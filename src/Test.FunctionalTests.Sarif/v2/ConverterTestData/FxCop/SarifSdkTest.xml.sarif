{
  "$schema": "http://json.schemastore.org/sarif-2.0.0-csd.2.beta.2018-09-26",
  "version": "2.0.0-csd.2.beta.2018-09-26",
  "runs": [
    {
      "tool": {
        "name": "FxCop"
      },
      "files": {
        "#$(ProjectDir)#../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll": {
          "mimeType": "application/octet-stream"
        },
        "#$(ProjectDir)#../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll": {
          "mimeType": "application/octet-stream"
        },
        "#$(ProjectDir)#../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll": {
          "mimeType": "application/octet-stream"
        },
        "#$(ProjectDir)#../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll": {
          "mimeType": "application/octet-stream"
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/AndroidStudioConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "3562F58BD918D44B51356B602D0C322D",
              "algorithm": "md5"
            },
            {
              "value": "CC2CA93566C7901E75517C537CDAAEF13869D7F8",
              "algorithm": "sha-1"
            },
            {
              "value": "2F411F04128E0697F7CE35D3E104A9E244CB1BF521261093CA55E27206F67059",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ClangAnalyzerConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "7A73E6161A07804745FC02381CD74041",
              "algorithm": "md5"
            },
            {
              "value": "F3A391CCCEB8498C5C3F35C2A9EA8361B088187C",
              "algorithm": "sha-1"
            },
            {
              "value": "02ECEA972BD59B48ECCB838AF3CF6E160ABD9E27E233E131284B888499611FF1",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/CppCheckConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5JTzsNCnVzaW5nIFN5c3RlbS5YbWw7DQoNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuV3JpdGVyczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuQ29udmVydGVycw0Kew0KICAgIHB1YmxpYyBjbGFzcyBDcHBDaGVja0NvbnZlcnRlciA6IFRvb2xGaWxlQ29udmVydGVyQmFzZQ0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBOYW1lVGFibGUgX25hbWVUYWJsZTsNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBDcHBDaGVja1N0cmluZ3MgX3N0cmluZ3M7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5PkluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkNwcENoZWNrQ29udmVydGVyIi8+IGNsYXNzLjwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIENwcENoZWNrQ29udmVydGVyKCkNCiAgICAgICAgew0KICAgICAgICAgICAgX25hbWVUYWJsZSA9IG5ldyBOYW1lVGFibGUoKTsNCiAgICAgICAgICAgIF9zdHJpbmdzID0gbmV3IENwcENoZWNrU3RyaW5ncyhfbmFtZVRhYmxlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEludGVyZmFjZSBpbXBsZW1lbnRhdGlvbiB0aGF0IHRha2VzIGEgQ3BwQ2hlY2tlciBsb2cgc3RyZWFtIGFuZCBjb252ZXJ0cyBpdHMgZGF0YSB0byBhIFNBUklGIGpzb24gc3RyZWFtLg0KICAgICAgICAvLy8gUmVhZCBpbiBDcHBDaGVja2VyIGRhdGEgZnJvbSBhbiBpbnB1dCBzdHJlYW0gYW5kIHdyaXRlIFJlc3VsdCBvYmplY3RzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImlucHV0Ij5TdHJlYW0gb2YgYSBDcHBDaGVja2VyIGxvZzwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3V0cHV0Ij5TQVJJRiBqc29uIHN0cmVhbSBvZiB0aGUgY29udmVydGVkIENwcENoZWNrZXIgbG9nPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJkYXRhVG9JbnNlcnQiPk9wdGlvbmFsbHkgZW1pdHRlZCBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGJlIHdyaXR0ZW4gdG8gbG9nLjwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIENvbnZlcnQoU3RyZWFtIGlucHV0LCBJUmVzdWx0TG9nV3JpdGVyIG91dHB1dCwgT3B0aW9uYWxseUVtaXR0ZWREYXRhIGRhdGFUb0luc2VydCkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKGlucHV0ID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2YoaW5wdXQpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKG91dHB1dCA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG91dHB1dCkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBYbWxSZWFkZXJTZXR0aW5ncyBzZXR0aW5ncyA9IG5ldyBYbWxSZWFkZXJTZXR0aW5ncw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIElnbm9yZVdoaXRlc3BhY2UgPSB0cnVlLA0KICAgICAgICAgICAgICAgIER0ZFByb2Nlc3NpbmcgPSBEdGRQcm9jZXNzaW5nLklnbm9yZSwNCiAgICAgICAgICAgICAgICBOYW1lVGFibGUgPSBfbmFtZVRhYmxlLA0KICAgICAgICAgICAgICAgIFhtbFJlc29sdmVyID0gbnVsbA0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdXNpbmcgKFhtbFJlYWRlciB4bWxSZWFkZXIgPSBYbWxSZWFkZXIuQ3JlYXRlKGlucHV0LCBzZXR0aW5ncykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUHJvY2Vzc0NwcENoZWNrTG9nKHhtbFJlYWRlciwgb3V0cHV0LCBkYXRhVG9JbnNlcnQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSB2b2lkIFByb2Nlc3NDcHBDaGVja0xvZyhYbWxSZWFkZXIgcmVhZGVyLCBJUmVzdWx0TG9nV3JpdGVyIG91dHB1dCwgT3B0aW9uYWxseUVtaXR0ZWREYXRhIGRhdGFUb0luc2VydCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmVhZGVyLlJlYWRTdGFydEVsZW1lbnQoX3N0cmluZ3MuUmVzdWx0cyk7DQoNCiAgICAgICAgICAgIGlmICghU3RyaW5nUmVmZXJlbmNlLkFyZUVxdWFsKHJlYWRlci5Mb2NhbE5hbWUsIF9zdHJpbmdzLkNwcENoZWNrKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyByZWFkZXIuQ3JlYXRlRXhjZXB0aW9uKENvbnZlcnRlclJlc291cmNlcy5DcHBDaGVja0NwcENoZWNrRWxlbWVudE1pc3NpbmcpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBzdHJpbmcgdmVyc2lvbiA9IHJlYWRlci5HZXRBdHRyaWJ1dGUoX3N0cmluZ3MuVmVyc2lvbik7DQoNCiAgICAgICAgICAgIGlmICh2ZXJzaW9uICE9IG51bGwgJiYgIXZlcnNpb24uSXNTZW1hbnRpY1ZlcnNpb25pbmdDb21wYXRpYmxlKCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgLy8gVGhpcyBsb2dpYyBvbmx5IGZpeGVzIHVwIHNpbXBsZSBjYXNlcywgc3VjaCBhcyBiZWluZyBwYXNzZWQNCiAgICAgICAgICAgICAgICAvLyAxLjY2LCB3aGVyZSBTZW1hbnRpYyBWZXJzaW9uaW5nIDIuMCByZXF1aXJlcyAxLjY2LjAuIEFsc28NCiAgICAgICAgICAgICAgICAvLyBzdHJpcHMgUmV2aXNpb24gbWVtYmVyIGlmIHBhc3NlZCBhIGNvbXBsZXRlIC5ORVQgdmVyc2lvbi4NCiAgICAgICAgICAgICAgICBWZXJzaW9uIGRvdE5ldFZlcnNpb247DQogICAgICAgICAgICAgICAgaWYgKFZlcnNpb24uVHJ5UGFyc2UodmVyc2lvbiwgb3V0IGRvdE5ldFZlcnNpb24pKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IA0KICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5NYXgoMCwgZG90TmV0VmVyc2lvbi5NYWpvcikgKyAiLiIgKyANCiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguTWF4KDAsIGRvdE5ldFZlcnNpb24uTWlub3IpICsgIi4iICsgDQogICAgICAgICAgICAgICAgICAgICAgICBNYXRoLk1heCgwLCBkb3ROZXRWZXJzaW9uLkJ1aWxkKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChTdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKHZlcnNpb24pKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IHJlYWRlci5DcmVhdGVFeGNlcHRpb24oQ29udmVydGVyUmVzb3VyY2VzLkNwcENoZWNrQ3BwQ2hlY2tFbGVtZW50TWlzc2luZyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJlYWRlci5Ta2lwKCk7IC8vIDxjcHBjaGVjayAvPg0KDQogICAgICAgICAgICBpZiAoIVN0cmluZ1JlZmVyZW5jZS5BcmVFcXVhbChyZWFkZXIuTG9jYWxOYW1lLCBfc3RyaW5ncy5FcnJvcnMpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IHJlYWRlci5DcmVhdGVFeGNlcHRpb24oQ29udmVydGVyUmVzb3VyY2VzLkNwcENoZWNrRXJyb3JzRWxlbWVudE1pc3NpbmcpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG5ldyBMaXN0PFJlc3VsdD4oKTsNCiAgICAgICAgICAgIGlmIChyZWFkZXIuSXNFbXB0eUVsZW1lbnQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmVhZGVyLlNraXAoKTsgLy8gPGVycm9ycyAvPg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGludCBlcnJvcnNEZXB0aCA9IHJlYWRlci5EZXB0aDsNCiAgICAgICAgICAgICAgICByZWFkZXIuUmVhZCgpOyAvLyA8ZXJyb3JzPg0KDQogICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5EZXB0aCA+IGVycm9yc0RlcHRoKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnNlZEVycm9yID0gQ3BwQ2hlY2tFcnJvci5QYXJzZShyZWFkZXIsIF9zdHJpbmdzKTsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5BZGQocGFyc2VkRXJyb3IuVG9TYXJpZklzc3VlKCkpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHJlYWRlci5SZWFkRW5kRWxlbWVudCgpOyAvLyA8L2Vycm9ycz4NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmVhZGVyLlJlYWRFbmRFbGVtZW50KCk7IC8vIDwvcmVzdWx0cz4NCg0KICAgICAgICAgICAgdmFyIHRvb2wgPSBuZXcgVG9vbA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIE5hbWUgPSAiQ3BwQ2hlY2siLA0KICAgICAgICAgICAgICAgIFZlcnNpb24gPSB2ZXJzaW9uLA0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIGZpbGVJbmZvRmFjdG9yeSA9IG5ldyBGaWxlSW5mb0ZhY3RvcnkodXJpID0+IE1pbWVUeXBlLkNwcCwgZGF0YVRvSW5zZXJ0KTsNCiAgICAgICAgICAgIERpY3Rpb25hcnk8c3RyaW5nLCBGaWxlRGF0YT4gZmlsZURpY3Rpb25hcnkgPSBmaWxlSW5mb0ZhY3RvcnkuQ3JlYXRlKHJlc3VsdHMpOw0KDQogICAgICAgICAgICB2YXIgcnVuID0gbmV3IFJ1bigpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgVG9vbCA9IHRvb2wNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIG91dHB1dC5Jbml0aWFsaXplKHJ1bik7DQoNCiAgICAgICAgICAgIGlmIChmaWxlRGljdGlvbmFyeSAhPSBudWxsICYmIGZpbGVEaWN0aW9uYXJ5LkNvdW50ID4gMCkgeyBvdXRwdXQuV3JpdGVGaWxlcyhmaWxlRGljdGlvbmFyeSk7IH0NCg0KICAgICAgICAgICAgb3V0cHV0Lk9wZW5SZXN1bHRzKCk7DQogICAgICAgICAgICBvdXRwdXQuV3JpdGVSZXN1bHRzKHJlc3VsdHMpOw0KICAgICAgICAgICAgb3V0cHV0LkNsb3NlUmVzdWx0cygpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "034EB22574ABF9E8243CAB64E545A2D6",
              "algorithm": "md5"
            },
            {
              "value": "C0A196A4DB5F9E8527F8C8FD7265E8397A219BAD",
              "algorithm": "sha-1"
            },
            {
              "value": "E3613DF357FF33177A5FDED22EF2C729FF8E4E2A6F6B8608B11A91DD12FE4EDF",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/Extensions.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "B6852CB5FFBE15421CCCDA9390042ACF",
              "algorithm": "md5"
            },
            {
              "value": "84814144ECEA14B754FD656B9C126078F6BE4551",
              "algorithm": "sha-1"
            },
            {
              "value": "7354460BC465D9413635288ECC9EA611D2EB6C0B6B4EB5E4B6C9D907E699613D",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "559B3E8B95DF86D716230FD8CF74F25E",
              "algorithm": "md5"
            },
            {
              "value": "1E8174678A9C7F8D6149913461D6F962CEDB71F8",
              "algorithm": "sha-1"
            },
            {
              "value": "DC6B16D68385508D9D04E47E0B2DF0EC731BCEED13D22AFC51A262213B42122A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "63F99F35F6471519204236EABE998A00",
              "algorithm": "md5"
            },
            {
              "value": "9B0ED6B0609582F5389AB409ACFA497637C411E4",
              "algorithm": "sha-1"
            },
            {
              "value": "45BB52F2A833D9D048C8B23E5FA94105711685EC4DE9624834B3C8E06BD272E2",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FxCopConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "9C543F0EE3B05A41A23D366F90581A5C",
              "algorithm": "md5"
            },
            {
              "value": "BA6E4A268D3FD85870752931A8CF3B2D1A4A4E3F",
              "algorithm": "sha-1"
            },
            {
              "value": "0C4FA164B3A7310335EB9DB2D02CED61915D65B1951D729C5C36D2C206E3A7E7",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/LogReader.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uSU87DQp1c2luZyBTeXN0ZW0uVGV4dDsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuQ29udmVydGVycw0Kew0KICAgIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBMb2dSZWFkZXI8VExvZz4gd2hlcmUgVExvZyA6IGNsYXNzDQogICAgew0KICAgICAgICBwdWJsaWMgVExvZyBSZWFkTG9nKHN0cmluZyBpbnB1dCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIFJlYWRMb2coaW5wdXQsIEVuY29kaW5nLlVURjgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIFRMb2cgUmVhZExvZyhzdHJpbmcgaW5wdXQsIEVuY29kaW5nIGVuY29kaW5nKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gUmVhZExvZyhuZXcgTWVtb3J5U3RyZWFtKGVuY29kaW5nLkdldEJ5dGVzKGlucHV0KSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGFic3RyYWN0IFRMb2cgUmVhZExvZyhTdHJlYW0gaW5wdXQpOw0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "ADF7A5073149A41839F00BACB9188A64",
              "algorithm": "md5"
            },
            {
              "value": "78CD0F0479A5DE3FE2AC793DE9CEE42D7C62FD59",
              "algorithm": "sha-1"
            },
            {
              "value": "E067CEEB61601B84EF8795CA177D689A367A210F50AAF2448A95CB9129D02C8E",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PluginConverterFactory.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uR2xvYmFsaXphdGlvbjsNCnVzaW5nIFN5c3RlbS5JTzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KdXNpbmcgU3lzdGVtLlJlZmxlY3Rpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnMNCnsNCiAgICBwdWJsaWMgZGVsZWdhdGUgQXNzZW1ibHkgQXNzZW1ibHlMb2FkRmlsZURlbGVnYXRlKHN0cmluZyBwYXRoKTsNCg0KICAgIC8vIEZhY3RvcnkgY2xhc3MgZm9yIGNyZWF0aW5nIGEgY29udmVydGVyIGZyb20gYSBzcGVjaWZpZWQgcGx1Zy1pbiBhc3NlbWJseS4NCiAgICBpbnRlcm5hbCBjbGFzcyBQbHVnaW5Db252ZXJ0ZXJGYWN0b3J5IDogQ29udmVydGVyRmFjdG9yeQ0KICAgIHsNCiAgICAgICAgLy8gVGhpcyBmaWVsZCBpcyBpbnRlcm5hbCwgcmF0aGVyIHRoYW4gcHJpdmF0ZSwgZm9yIHRlc3QgcHVycG9zZXMuDQogICAgICAgIGludGVybmFsIHJlYWRvbmx5IHN0cmluZyBwbHVnaW5Bc3NlbWJseVBhdGg7DQoNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBBc3NlbWJseUxvYWRGaWxlRGVsZWdhdGUgYXNzZW1ibHlMb2FkRmlsZURlbGVnYXRlOw0KDQogICAgICAgIGludGVybmFsIFBsdWdpbkNvbnZlcnRlckZhY3RvcnkoDQogICAgICAgICAgICBzdHJpbmcgcGx1Z2luQXNzZW1ibHlQYXRoLA0KICAgICAgICAgICAgQXNzZW1ibHlMb2FkRmlsZURlbGVnYXRlIGFzc2VtYmx5TG9hZEZpbGVEZWxlZ2F0ZSA9IG51bGwpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRoaXMuYXNzZW1ibHlMb2FkRmlsZURlbGVnYXRlID0gYXNzZW1ibHlMb2FkRmlsZURlbGVnYXRlID8/IEFzc2VtYmx5LkxvYWRGaWxlOw0KICAgICAgICAgICAgdGhpcy5wbHVnaW5Bc3NlbWJseVBhdGggPSBwbHVnaW5Bc3NlbWJseVBhdGg7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgVG9vbEZpbGVDb252ZXJ0ZXJCYXNlIENyZWF0ZUNvbnZlcnRlckNvcmUoc3RyaW5nIHRvb2xGb3JtYXQpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICghRmlsZS5FeGlzdHModGhpcy5wbHVnaW5Bc3NlbWJseVBhdGgpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0cmluZyBtZXNzYWdlID0gc3RyaW5nLkZvcm1hdCgNCiAgICAgICAgICAgICAgICAgICAgQ3VsdHVyZUluZm8uQ3VycmVudEN1bHR1cmUsDQogICAgICAgICAgICAgICAgICAgIENvbnZlcnRlclJlc291cmNlcy5FcnJvck1pc3NpbmdQbHVnaW5Bc3NlbWJseSwNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5Bc3NlbWJseVBhdGgpOw0KDQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKG1lc3NhZ2UsIG5hbWVvZih0aGlzLnBsdWdpbkFzc2VtYmx5UGF0aCkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBBc3NlbWJseSBwbHVnaW5Bc3NlbWJseSA9IHRoaXMuYXNzZW1ibHlMb2FkRmlsZURlbGVnYXRlKHRoaXMucGx1Z2luQXNzZW1ibHlQYXRoKTsNCiAgICAgICAgICAgIFR5cGVbXSBwbHVnaW5UeXBlcyA9IHBsdWdpbkFzc2VtYmx5DQogICAgICAgICAgICAgICAgLkdldFR5cGVzKCkNCiAgICAgICAgICAgICAgICAuV2hlcmUodCA9PiBJc0NvbnZlcnRlckNsYXNzRm9yVG9vbEZvcm1hdCh0LCB0b29sRm9ybWF0KSkNCiAgICAgICAgICAgICAgICAuVG9BcnJheSgpOw0KDQogICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgdHlwZXMgd2l0aCB0aGUgc2FtZSBuYW1lIGV4aXN0IGluIG1vcmUgdGhhbiBvbmUgbmFtZXNwYWNlLg0KICAgICAgICAgICAgaWYgKHBsdWdpblR5cGVzLkxlbmd0aCA+IDEpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIG1lc3NhZ2UgPSBzdHJpbmcuRm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICBDdWx0dXJlSW5mby5DdXJyZW50Q3VsdHVyZSwNCiAgICAgICAgICAgICAgICAgICAgQ29udmVydGVyUmVzb3VyY2VzLkVycm9yQW1iaWd1b3VzQ29udmVydGVyVHlwZSwNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5Bc3NlbWJseVBhdGgsDQogICAgICAgICAgICAgICAgICAgIHRvb2xGb3JtYXQuQ29udmVydGVyVHlwZU5hbWUoKSwNCiAgICAgICAgICAgICAgICAgICAgdG9vbEZvcm1hdCk7DQoNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRFeGNlcHRpb24obWVzc2FnZSwgbmFtZW9mKHRoaXMucGx1Z2luQXNzZW1ibHlQYXRoKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBwbHVnaW5UeXBlcy5MZW5ndGggPT0gMA0KICAgICAgICAgICAgICAgID8gbnVsbA0KICAgICAgICAgICAgICAgIDogKFRvb2xGaWxlQ29udmVydGVyQmFzZSlBY3RpdmF0b3IuQ3JlYXRlSW5zdGFuY2UocGx1Z2luVHlwZXNbMF0pOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgYm9vbCBJc0NvbnZlcnRlckNsYXNzRm9yVG9vbEZvcm1hdChUeXBlIHR5cGUsIHN0cmluZyB0b29sRm9ybWF0KQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gdHlwZS5Jc1B1YmxpYw0KICAgICAgICAgICAgICAgICYmIHR5cGUuTmFtZS5FcXVhbHModG9vbEZvcm1hdC5Db252ZXJ0ZXJUeXBlTmFtZSgpLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWwpDQogICAgICAgICAgICAgICAgJiYgdHlwZS5Jc1N1YmNsYXNzT2YodHlwZW9mKFRvb2xGaWxlQ29udmVydGVyQmFzZSkpDQogICAgICAgICAgICAgICAgJiYgdHlwZS5IYXNEZWZhdWx0Q29uc3RydWN0b3IoKQ0KICAgICAgICAgICAgICAgICYmICF0eXBlLklzQWJzdHJhY3Q7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "25B70AF5DE11C33F75E610DAEB922981",
              "algorithm": "md5"
            },
            {
              "value": "4793C65018A6227DD03C1D2A0DC9C24639EB910E",
              "algorithm": "sha-1"
            },
            {
              "value": "F0F037577ED9CC4AEA463F1C1E9664859C6480D54F953890377622A78E452B36",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "F0350D0582BAA6077DCFC8EB34551E2D",
              "algorithm": "md5"
            },
            {
              "value": "E284EB9DE28E621E1F7BFC9CA68DD3BEACE4FDAD",
              "algorithm": "sha-1"
            },
            {
              "value": "816A05D080F309791AE5D540489DFBC8122ACFEFB4519ACB89039185F2C7A05A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5JTzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KdXNpbmcgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Xcml0ZXJzOw0KdXNpbmcgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Db252ZXJ0ZXJzLlB5bGludE9iamVjdE1vZGVsOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Db252ZXJ0ZXJzDQp7DQogICAgcHVibGljIGNsYXNzIFB5bGludENvbnZlcnRlciA6IFRvb2xGaWxlQ29udmVydGVyQmFzZQ0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBMb2dSZWFkZXI8UHlsaW50TG9nPiBsb2dSZWFkZXI7DQoNCiAgICAgICAgcHVibGljIFB5bGludENvbnZlcnRlcigpDQogICAgICAgIHsNCiAgICAgICAgICAgIGxvZ1JlYWRlciA9IG5ldyBQeWxpbnRMb2dSZWFkZXIoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIENvbnZlcnQoU3RyZWFtIGlucHV0LCBJUmVzdWx0TG9nV3JpdGVyIG91dHB1dCwgT3B0aW9uYWxseUVtaXR0ZWREYXRhIGRhdGFUb0luc2VydCkNCiAgICAgICAgew0KICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCA/PyB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihpbnB1dCkpOw0KICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0ID8/IHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG91dHB1dCkpOw0KDQogICAgICAgICAgICBQeWxpbnRMb2cgbG9nID0gbG9nUmVhZGVyLlJlYWRMb2coaW5wdXQpOw0KDQogICAgICAgICAgICBUb29sIHRvb2wgPSBuZXcgVG9vbA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIE5hbWUgPSAiUHlsaW50Ig0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIHJ1biA9IG5ldyBSdW4oKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFRvb2wgPSB0b29sDQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBvdXRwdXQuSW5pdGlhbGl6ZShydW4pOw0KDQogICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG5ldyBMaXN0PFJlc3VsdD4oKTsNCg0KICAgICAgICAgICAgZm9yZWFjaCAoUHlsaW50TG9nRW50cnkgZW50cnkgaW4gbG9nKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJlc3VsdHMuQWRkKENyZWF0ZVJlc3VsdChlbnRyeSkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgZmlsZUluZm9GYWN0b3J5ID0gbmV3IEZpbGVJbmZvRmFjdG9yeShNaW1lVHlwZS5EZXRlcm1pbmVGcm9tRmlsZUV4dGVuc2lvbiwgZGF0YVRvSW5zZXJ0KTsNCiAgICAgICAgICAgIERpY3Rpb25hcnk8c3RyaW5nLCBGaWxlRGF0YT4gZmlsZURpY3Rpb25hcnkgPSBmaWxlSW5mb0ZhY3RvcnkuQ3JlYXRlKHJlc3VsdHMpOw0KDQogICAgICAgICAgICBpZiAoZmlsZURpY3Rpb25hcnk/LkFueSgpID09IHRydWUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgb3V0cHV0LldyaXRlRmlsZXMoZmlsZURpY3Rpb25hcnkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBvdXRwdXQuT3BlblJlc3VsdHMoKTsNCiAgICAgICAgICAgIG91dHB1dC5Xcml0ZVJlc3VsdHMocmVzdWx0cyk7DQogICAgICAgICAgICBvdXRwdXQuQ2xvc2VSZXN1bHRzKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpbnRlcm5hbCBSZXN1bHQgQ3JlYXRlUmVzdWx0KFB5bGludExvZ0VudHJ5IGRlZmVjdCkNCiAgICAgICAgew0KICAgICAgICAgICAgZGVmZWN0ID0gZGVmZWN0ID8/IHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKGRlZmVjdCkpOw0KDQogICAgICAgICAgICBSZXN1bHQgcmVzdWx0ID0gbmV3IFJlc3VsdA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFJ1bGVJZCA9ICQie2RlZmVjdC5NZXNzYWdlSWR9KHtkZWZlY3QuU3ltYm9sfSkiLA0KICAgICAgICAgICAgICAgIE1lc3NhZ2UgPSBuZXcgTWVzc2FnZSB7IFRleHQgPSBkZWZlY3QuTWVzc2FnZSB9DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBzd2l0Y2ggKGRlZmVjdC5UeXBlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGNhc2UgImVycm9yIjoNCiAgICAgICAgICAgICAgICBjYXNlICJmYXRhbCI6DQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5MZXZlbCA9IFJlc3VsdExldmVsLkVycm9yOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJ3YXJuaW5nIjoNCiAgICAgICAgICAgICAgICBjYXNlICJjb252ZW50aW9uIjoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LkxldmVsID0gUmVzdWx0TGV2ZWwuV2FybmluZzsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAicmVmYWN0b3IiOg0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5MZXZlbCA9IFJlc3VsdExldmVsLk5vdGU7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIHJlZ2lvbiA9IG5ldyBSZWdpb24NCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBTdGFydENvbHVtbiA9IGludC5QYXJzZShkZWZlY3QuQ29sdW1uKSwNCiAgICAgICAgICAgICAgICBTdGFydExpbmUgPSBpbnQuUGFyc2UoZGVmZWN0LkxpbmUpDQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgZmlsZVVyaSA9IG5ldyBVcmkoJCJ7ZGVmZWN0LkZpbGVQYXRofSIsIFVyaUtpbmQuUmVsYXRpdmVPckFic29sdXRlKTsNCiAgICAgICAgICAgIHZhciBwaHlzaWNhbExvY2F0aW9uID0gbmV3IFBoeXNpY2FsTG9jYXRpb24oaWQ6IDAsIGZpbGVMb2NhdGlvbjogbmV3IEZpbGVMb2NhdGlvbih1cmk6IGZpbGVVcmksIHVyaUJhc2VJZDogbnVsbCksIHJlZ2lvbjogcmVnaW9uLCBjb250ZXh0UmVnaW9uOiBudWxsKTsNCg0KICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gbmV3IExvY2F0aW9uDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUGh5c2ljYWxMb2NhdGlvbiA9IHBoeXNpY2FsTG9jYXRpb24NCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHJlc3VsdC5Mb2NhdGlvbnMgPSBuZXcgTGlzdDxMb2NhdGlvbj4NCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBsb2NhdGlvbg0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "AFC6326A711C951EA43C1849F070A8EC",
              "algorithm": "md5"
            },
            {
              "value": "DE1D620F5BC74D3286CC0723559A556F66247BFE",
              "algorithm": "sha-1"
            },
            {
              "value": "AE9F0F0AB17F7ACB479AC375AF8E40638B34AA9183F6FF3D2566E4B3805055AE",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "2854AE32CB4F62AAB45AC081363ABFE0",
              "algorithm": "md5"
            },
            {
              "value": "8C84DD18D938093C934460CE9D59A241BC48B51A",
              "algorithm": "sha-1"
            },
            {
              "value": "4AF4020EF9BFB8138FEEF8E67258B3120937AF0D1554273395D3F2E3ECBCEA0A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SparseReader.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "377BD641352D700B0EA156076565453E",
              "algorithm": "md5"
            },
            {
              "value": "22FE0E3B15C6590A1EE83F6B54BCD2CBFA0A2B06",
              "algorithm": "sha-1"
            },
            {
              "value": "F89AAA97063560194CB5FC055A11FD297A5EFEA2CD6CD5492562B9D661CE2609",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/StaticDriverVerifierConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "D6D89AA234FFCBB46CBE31C8C9836D46",
              "algorithm": "md5"
            },
            {
              "value": "E4BCB9BCA823E6B9B555FC432DCFBB4CECFF7B2F",
              "algorithm": "sha-1"
            },
            {
              "value": "8DF3EEE7F972C59A8733FD8B50AAEAD749003AB68969B9FA79158206C5810CC4",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ToolFileConverterBase.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5HbG9iYWxpemF0aW9uOw0KdXNpbmcgU3lzdGVtLklPOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Db252ZXJ0ZXJzDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBCYXNlIGNsYXNzIGZvciB0b29sIGZpbGUgY29udmVydGVycy4gRW5jYXBzdWxhdGVzIHRoZSBjb21tb24gbG9naWMNCiAgICAvLy8gZm9yIHBvcHVsYXRpbmcgdGhlIGxvZ2ljYWxMb2NhdGlvbnMgZGljdGlvbmFyeS4NCiAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBUb29sRmlsZUNvbnZlcnRlckJhc2UNCiAgICB7DQogICAgICAgIHByb3RlY3RlZCBUb29sRmlsZUNvbnZlcnRlckJhc2UoKQ0KICAgICAgICB7DQogICAgICAgICAgICBMb2dpY2FsTG9jYXRpb25zRGljdGlvbmFyeSA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgTG9naWNhbExvY2F0aW9uPigpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGFic3RyYWN0IHZvaWQgQ29udmVydChTdHJlYW0gaW5wdXQsIElSZXN1bHRMb2dXcml0ZXIgb3V0cHV0LCBPcHRpb25hbGx5RW1pdHRlZERhdGEgZGF0YVRvSW5zZXJ0KTsNCg0KICAgICAgICAvLyBpbnRlcm5hbCBhcyB3ZWxsIGFzIHByb3RlY3RlZCBpdCBjYW4gYmUgZXhlcmNpc2VkIGJ5IHVuaXQgdGVzdHMuDQogICAgICAgIHByb3RlY3RlZCBpbnRlcm5hbCBJRGljdGlvbmFyeTxzdHJpbmcsIExvZ2ljYWxMb2NhdGlvbj4gTG9naWNhbExvY2F0aW9uc0RpY3Rpb25hcnkgeyBnZXQ7IHByaXZhdGUgc2V0OyAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBpbnRlcm5hbCBzdHJpbmcgQWRkTG9naWNhbExvY2F0aW9uKExvZ2ljYWxMb2NhdGlvbiBsb2dpY2FsTG9jYXRpb24pDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBBZGRMb2dpY2FsTG9jYXRpb24obG9naWNhbExvY2F0aW9uLCBkZWxpbWl0ZXI6ICIuIik7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBpbnRlcm5hbCBhcyB3ZWxsIGFzIHByb3RlY3RlZCBpdCBjYW4gYmUgZXhlcmNpc2VkIGJ5IHVuaXQgdGVzdHMuDQogICAgICAgIHByb3RlY3RlZCBpbnRlcm5hbCBzdHJpbmcgQWRkTG9naWNhbExvY2F0aW9uKExvZ2ljYWxMb2NhdGlvbiBsb2dpY2FsTG9jYXRpb24sIHN0cmluZyBkZWxpbWl0ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChsb2dpY2FsTG9jYXRpb24gPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihsb2dpY2FsTG9jYXRpb24pKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaW50IGRpc2FtYmlndWF0b3IgPSAwOw0KDQogICAgICAgICAgICBzdHJpbmcgZnVsbHlRdWFsaWZpZWRMb2dpY2FsTmFtZSA9IGxvZ2ljYWxMb2NhdGlvbi5QYXJlbnRLZXkgPT0gbnVsbCA/DQogICAgICAgICAgICAgICAgbG9naWNhbExvY2F0aW9uLk5hbWUgOiANCiAgICAgICAgICAgICAgICBsb2dpY2FsTG9jYXRpb24uUGFyZW50S2V5ICsgZGVsaW1pdGVyICsgbG9naWNhbExvY2F0aW9uLk5hbWU7DQogICAgICAgICAgICBzdHJpbmcgZ2VuZXJhdGVkS2V5ID0gZnVsbHlRdWFsaWZpZWRMb2dpY2FsTmFtZTsNCg0KICAgICAgICAgICAgbG9naWNhbExvY2F0aW9uLk5hbWUgPSBHZXRMb2dpY2FsTG9jYXRpb25OYW1lKGxvZ2ljYWxMb2NhdGlvbi5QYXJlbnRLZXksIGZ1bGx5UXVhbGlmaWVkTG9naWNhbE5hbWUsIGRlbGltaXRlcik7DQogICAgICAgICAgICBsb2dpY2FsTG9jYXRpb24uRnVsbHlRdWFsaWZpZWROYW1lID0gZnVsbHlRdWFsaWZpZWRMb2dpY2FsTmFtZTsNCg0KICAgICAgICAgICAgd2hpbGUgKExvZ2ljYWxMb2NhdGlvbnNEaWN0aW9uYXJ5LkNvbnRhaW5zS2V5KGdlbmVyYXRlZEtleSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTG9naWNhbExvY2F0aW9uIGxvZ0xvYyA9IExvZ2ljYWxMb2NhdGlvbnNEaWN0aW9uYXJ5W2dlbmVyYXRlZEtleV0uRGVlcENsb25lKCk7DQogICAgICAgICAgICAgICAgbG9nTG9jLk5hbWUgPSBHZXRMb2dpY2FsTG9jYXRpb25OYW1lKGxvZ0xvYy5QYXJlbnRLZXksIGZ1bGx5UXVhbGlmaWVkTG9naWNhbE5hbWUsIGRlbGltaXRlcik7DQogICAgICAgICAgICAgICAgbG9nTG9jLkZ1bGx5UXVhbGlmaWVkTmFtZSA9IGZ1bGx5UXVhbGlmaWVkTG9naWNhbE5hbWU7DQoNCiAgICAgICAgICAgICAgICBpZiAobG9naWNhbExvY2F0aW9uLlZhbHVlRXF1YWxzKGxvZ0xvYykpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBnZW5lcmF0ZWRLZXkgPSBmdWxseVF1YWxpZmllZExvZ2ljYWxOYW1lICsgIi0iICsgZGlzYW1iaWd1YXRvci5Ub1N0cmluZyhDdWx0dXJlSW5mby5JbnZhcmlhbnRDdWx0dXJlKTsNCiAgICAgICAgICAgICAgICArK2Rpc2FtYmlndWF0b3I7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChkaXNhbWJpZ3VhdG9yID09IDApDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgbG9naWNhbExvY2F0aW9uLkZ1bGx5UXVhbGlmaWVkTmFtZSA9IG51bGw7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsb2dpY2FsTG9jYXRpb24uTmFtZSA9PSBnZW5lcmF0ZWRLZXkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgbG9naWNhbExvY2F0aW9uLk5hbWUgPSBudWxsOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIUxvZ2ljYWxMb2NhdGlvbnNEaWN0aW9uYXJ5LkNvbnRhaW5zS2V5KGdlbmVyYXRlZEtleSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTG9naWNhbExvY2F0aW9uc0RpY3Rpb25hcnkuQWRkKGdlbmVyYXRlZEtleSwgbG9naWNhbExvY2F0aW9uKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlZEtleTsNCiAgICAgICAgfQ0KDQogICAgICAgIGludGVybmFsIHN0YXRpYyBzdHJpbmcgR2V0TG9naWNhbExvY2F0aW9uTmFtZShzdHJpbmcgcGFyZW50S2V5LCBzdHJpbmcgZnVsbHlRdWFsaWZpZWRMb2dpY2FsTmFtZSwgc3RyaW5nIGRlbGltaXRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgc3RyaW5nIGxvZ2ljYWxOYW1lID0gbnVsbDsNCiAgICAgICAgICAgIGludCBpbmRleDsNCg0KICAgICAgICAgICAgaWYgKHBhcmVudEtleSA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGluZGV4ID0gIXN0cmluZy5Jc051bGxPcldoaXRlU3BhY2UoZGVsaW1pdGVyKSA/IGZ1bGx5UXVhbGlmaWVkTG9naWNhbE5hbWUuTGFzdEluZGV4T2YoZGVsaW1pdGVyKSA6IC0xOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGluZGV4ID0gcGFyZW50S2V5Lkxlbmd0aDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGluZGV4ID09IC0xKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIEl0J3MgYSB0b3AtbGV2ZWwgbG9jYXRpb24NCiAgICAgICAgICAgICAgICBsb2dpY2FsTmFtZSA9IGZ1bGx5UXVhbGlmaWVkTG9naWNhbE5hbWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgLy8gR2V0IHRoZSByaWdodG1vc3Qgc2VnbWVudCBhcyB0aGUgbmFtZQ0KICAgICAgICAgICAgICAgIC8vIEV4YW1wbGU6IEZvbzo6QmFyIC0+IEJhciB3aGVyZSAnOjonIGlzIHRoZSBkZWxpbWl0ZXINCiAgICAgICAgICAgICAgICBpbnQgbGVuZ3RoID0gZGVsaW1pdGVyPy5MZW5ndGggPz8gMDsNCiAgICAgICAgICAgICAgICBsb2dpY2FsTmFtZSA9IGZ1bGx5UXVhbGlmaWVkTG9naWNhbE5hbWUuU3Vic3RyaW5nKGluZGV4ICsgbGVuZ3RoKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIGxvZ2ljYWxOYW1lOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "13839AB8E716FCF4C2D24DE865F542B4",
              "algorithm": "md5"
            },
            {
              "value": "B6A28546DF71FC99D7914E3301888B6ED77A13B1",
              "algorithm": "sha-1"
            },
            {
              "value": "D294F2DA137FAA94B5CB7339EE593A240E62507885E179A71B3C425C8BEC6F43",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ToolFormatConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uSU87DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLldyaXRlcnM7DQp1c2luZyBOZXd0b25zb2Z0Lkpzb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnMNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIEEgY2xhc3MgdGhhdCBwcm92aWRlcyBoZWxwZXJzIGZvciBjb252ZXJ0aW5nIGEgbG9nIGZpbGUgcHJvZHVjZWQgYnkgDQogICAgLy8vIG9uZSBvZiBhIHdlbGwta25vd24gc2V0IG9mIHRvb2xzIHRvIHRoZSBTQVJJRiBmb3JtYXQuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBwdWJsaWMgY2xhc3MgVG9vbEZvcm1hdENvbnZlcnRlcg0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBBc3NlbWJseUxvYWRGaWxlRGVsZWdhdGUgYXNzZW1ibHlMb2FkRmlsZURlbGVnYXRlOw0KDQogICAgICAgIHB1YmxpYyBUb29sRm9ybWF0Q29udmVydGVyKEFzc2VtYmx5TG9hZEZpbGVEZWxlZ2F0ZSBhc3NlbWJseUxvYWRGaWxlRGVsZWdhdGUgPSBudWxsKQ0KICAgICAgICB7DQogICAgICAgICAgICB0aGlzLmFzc2VtYmx5TG9hZEZpbGVEZWxlZ2F0ZSA9IGFzc2VtYmx5TG9hZEZpbGVEZWxlZ2F0ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT5Db252ZXJ0cyBhIHRvb2wgbG9nIGZpbGUgaW50byB0aGUgU0FSSUYgZm9ybWF0Ljwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj5UaHJvd24gd2hlbiBvbmUgb3IgbW9yZSByZXF1aXJlZCBhcmd1bWVudHMgYXJlIG51bGwuPC9leGNlcHRpb24+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50RXhjZXB0aW9uIj5UaHJvd24gd2hlbiBvbmUgb3IgbW9yZSBhcmd1bWVudHMgaGF2ZSB1bnN1cHBvcnRlZCBvcg0KICAgICAgICAvLy8gaWxsZWdhbCB2YWx1ZXMuPC9leGNlcHRpb24+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkludmFsaWRPcGVyYXRpb25FeGNlcHRpb24iPlRocm93biB3aGVuIHRoZSByZXF1ZXN0ZWQgb3BlcmF0aW9uIGlzIGludmFsaWQuPC9leGNlcHRpb24+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idG9vbEZvcm1hdCI+VGhlIHRvb2wgZm9ybWF0IG9mIHRoZSBpbnB1dCBmaWxlLjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iaW5wdXRGaWxlTmFtZSI+VGhlIGlucHV0IGxvZyBmaWxlIG5hbWUuPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdXRwdXRGaWxlTmFtZSI+VGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gd2hpY2ggdGhlIHJlc3VsdGluZyBTQVJJRiBsb2cgc2hhbGwgYmUNCiAgICAgICAgLy8vIHdyaXR0ZW4uIFRoaXMgY2Fubm90IGJlIGEgZGlyZWN0b3J5LjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iY29udmVyc2lvbk9wdGlvbnMiPk9wdGlvbnMgZm9yIGNvbnRyb2xsaW5nIHRoZSBjb252ZXJzaW9uLjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icGx1Z2luQXNzZW1ibHlQYXRoIj5QYXRoIHRvIHBsdWdpbiBhc3NlbWJseSBjb250YWluaW5nIGNvbnZlcnRlciB0eXBlcy48L3BhcmFtPg0KICAgICAgICBwdWJsaWMgdm9pZCBDb252ZXJ0VG9TdGFuZGFyZEZvcm1hdCgNCiAgICAgICAgICAgIHN0cmluZyB0b29sRm9ybWF0LA0KICAgICAgICAgICAgc3RyaW5nIGlucHV0RmlsZU5hbWUsDQogICAgICAgICAgICBzdHJpbmcgb3V0cHV0RmlsZU5hbWUsDQogICAgICAgICAgICBMb2dnaW5nT3B0aW9ucyBsb2dnaW5nT3B0aW9ucyA9IExvZ2dpbmdPcHRpb25zLk5vbmUsDQogICAgICAgICAgICBPcHRpb25hbGx5RW1pdHRlZERhdGEgZGF0YVRvSW5zZXJ0ID0gT3B0aW9uYWxseUVtaXR0ZWREYXRhLk5vbmUsDQogICAgICAgICAgICBzdHJpbmcgcGx1Z2luQXNzZW1ibHlQYXRoID0gbnVsbCkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKGlucHV0RmlsZU5hbWUgPT0gbnVsbCkgeyB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihpbnB1dEZpbGVOYW1lKSk7IH0NCiAgICAgICAgICAgIGlmIChvdXRwdXRGaWxlTmFtZSA9PSBudWxsKSB7IHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG91dHB1dEZpbGVOYW1lKSk7IH0NCg0KICAgICAgICAgICAgaWYgKERpcmVjdG9yeS5FeGlzdHMob3V0cHV0RmlsZU5hbWUpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbigiU3BlY2lmaWVkIGZpbGUgb3V0cHV0IHBhdGggZXhpc3RzIGJ1dCBpcyBhIGRpcmVjdG9yeS4iLCBuYW1lb2Yob3V0cHV0RmlsZU5hbWUpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFsb2dnaW5nT3B0aW9ucy5JbmNsdWRlcyhMb2dnaW5nT3B0aW9ucy5PdmVyd3JpdGVFeGlzdGluZ091dHB1dEZpbGUpICYmIEZpbGUuRXhpc3RzKG91dHB1dEZpbGVOYW1lKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbigiT3V0cHV0IGZpbGUgYWxyZWFkeSBleGlzdHMgYW5kIG9wdGlvbiB0byBvdmVyd3JpdGUgd2FzIG5vdCBzcGVjaWZpZWQuIik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIEZpbGVNb2RlIHNldHRpbmdzIGhlcmUgd2lsbCByZXN1bHRzIGluIGFuIGV4Y2VwdGlvbiBiZWluZyByYWlzZWQgaWYgdGhlIGlucHV0IA0KICAgICAgICAgICAgLy8gZmlsZSBkb2VzIG5vdCBleGlzdCwgYW5kIHRoYXQgYW4gZXhpc3Rpbmcgb3V0cHV0IGZpbGUgd2lsbCBiZSBvdmVyd3JpdHRlbg0KICAgICAgICAgICAgdXNpbmcgKHZhciBpbnB1dCA9IEZpbGUuT3BlblJlYWQoaW5wdXRGaWxlTmFtZSkpDQogICAgICAgICAgICB1c2luZyAodmFyIG91dHB1dFRleHRTdHJlYW0gPSBGaWxlLkNyZWF0ZShvdXRwdXRGaWxlTmFtZSkpDQogICAgICAgICAgICB1c2luZyAodmFyIG91dHB1dFRleHRXcml0ZXIgPSBuZXcgU3RyZWFtV3JpdGVyKG91dHB1dFRleHRTdHJlYW0pKQ0KICAgICAgICAgICAgdXNpbmcgKHZhciBvdXRwdXRKc29uID0gbmV3IEpzb25UZXh0V3JpdGVyKG91dHB1dFRleHRXcml0ZXIpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsb2dnaW5nT3B0aW9ucy5JbmNsdWRlcyhMb2dnaW5nT3B0aW9ucy5QcmV0dHlQcmludCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBvdXRwdXRKc29uLkZvcm1hdHRpbmcgPSBGb3JtYXR0aW5nLkluZGVudGVkOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHVzaW5nICh2YXIgb3V0cHV0ID0gbmV3IFJlc3VsdExvZ0pzb25Xcml0ZXIob3V0cHV0SnNvbikpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBDb252ZXJ0VG9TdGFuZGFyZEZvcm1hdCh0b29sRm9ybWF0LCBpbnB1dCwgb3V0cHV0LCBkYXRhVG9JbnNlcnQsIHBsdWdpbkFzc2VtYmx5UGF0aCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+Q29udmVydHMgYSB0b29sIGxvZyBmaWxlIHJlcHJlc2VudGVkIGFzIGEgc3RyZWFtIGludG8gdGhlIFNBUklGIGZvcm1hdC48L3N1bW1hcnk+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+VGhyb3duIHdoZW4gb25lIG9yIG1vcmUgcmVxdWlyZWQgYXJndW1lbnRzIGFyZSBudWxsLjwvZXhjZXB0aW9uPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudEV4Y2VwdGlvbiI+VGhyb3duIHdoZW4gb25lIG9yIG1vcmUgYXJndW1lbnRzIGhhdmUgdW5zdXBwb3J0ZWQgb3INCiAgICAgICAgLy8vIGlsbGVnYWwgdmFsdWVzLjwvZXhjZXB0aW9uPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InRvb2xGb3JtYXQiPlRoZSB0b29sIGZvcm1hdCBvZiB0aGUgaW5wdXQgZmlsZS48L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImlucHV0U3RyZWFtIj5BIHN0cmVhbSB0aGF0IGNvbnRhaW5zIHRvb2wgbG9nIGNvbnRlbnRzLjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3V0cHV0U3RyZWFtIj5BIHN0cmVhbSB0byB3aGljaCB0aGUgY29udmVydGVkIG91dHB1dCBzaG91bGQgYmUgd3JpdHRlbi48L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InBsdWdpbkFzc2VtYmx5UGF0aCI+UGF0aCB0byBwbHVnaW4gYXNzZW1ibHkgY29udGFpbmluZyBjb252ZXJ0ZXIgdHlwZXMuPC9wYXJhbT4NCiAgICAgICAgcHVibGljIHZvaWQgQ29udmVydFRvU3RhbmRhcmRGb3JtYXQoDQogICAgICAgICAgICBzdHJpbmcgdG9vbEZvcm1hdCwNCiAgICAgICAgICAgIFN0cmVhbSBpbnB1dFN0cmVhbSwNCiAgICAgICAgICAgIElSZXN1bHRMb2dXcml0ZXIgb3V0cHV0U3RyZWFtLA0KICAgICAgICAgICAgT3B0aW9uYWxseUVtaXR0ZWREYXRhIGRhdGFUb0luc2VydCA9IE9wdGlvbmFsbHlFbWl0dGVkRGF0YS5Ob25lLA0KICAgICAgICAgICAgc3RyaW5nIHBsdWdpbkFzc2VtYmx5UGF0aCA9IG51bGwpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChpbnB1dFN0cmVhbSA9PSBudWxsKSB7IHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKGlucHV0U3RyZWFtKSk7IH0NCiAgICAgICAgICAgIGlmIChvdXRwdXRTdHJlYW0gPT0gbnVsbCkgeyB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdXRwdXRTdHJlYW0pKTsgfQ0KDQogICAgICAgICAgICBDb252ZXJ0ZXJGYWN0b3J5IGZhY3RvcnkgPSBDcmVhdGVDb252ZXJ0ZXJGYWN0b3J5KHBsdWdpbkFzc2VtYmx5UGF0aCk7DQoNCiAgICAgICAgICAgIFRvb2xGaWxlQ29udmVydGVyQmFzZSBjb252ZXJ0ZXIgPSBmYWN0b3J5LkNyZWF0ZUNvbnZlcnRlcih0b29sRm9ybWF0KTsNCiAgICAgICAgICAgIGlmIChjb252ZXJ0ZXIgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjb252ZXJ0ZXIuQ29udmVydChpbnB1dFN0cmVhbSwgb3V0cHV0U3RyZWFtLCBkYXRhVG9JbnNlcnQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbigiVW5yZWNvZ25pemVkIHRvb2wgc3BlY2lmaWVkOiAiICsgdG9vbEZvcm1hdCwgbmFtZW9mKHRvb2xGb3JtYXQpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFNldCB1cCBhIENoYWluIG9mIFJlc3BvbnNpYmlsaXR5IHRoYXQgd2lsbCBnZXQgdGhlIGNvbnZlcnRlciBmcm9tIHRoZSBmaXJzdA0KICAgICAgICAvLyBmYWN0b3J5IGNhcGFibGUgb2YgY3JlYXRpbmcgaXQuDQogICAgICAgIC8vIFRoaXMgbWV0aG9kIGlzIGludGVybmFsLCByYXRoZXIgdGhhbiBwcml2YXRlLCBmb3IgdGVzdCBwdXJwb3Nlcy4NCiAgICAgICAgaW50ZXJuYWwgQ29udmVydGVyRmFjdG9yeSBDcmVhdGVDb252ZXJ0ZXJGYWN0b3J5KHN0cmluZyBwbHVnaW5Bc3NlbWJseVBhdGgpDQogICAgICAgIHsNCiAgICAgICAgICAgIENvbnZlcnRlckZhY3RvcnkgZmFjdG9yeSA9IG5ldyBCdWlsdEluQ29udmVydGVyRmFjdG9yeSgpOw0KICAgICAgICAgICAgaWYgKCFzdHJpbmcuSXNOdWxsT3JXaGl0ZVNwYWNlKHBsdWdpbkFzc2VtYmx5UGF0aCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZmFjdG9yeSA9IG5ldyBQbHVnaW5Db252ZXJ0ZXJGYWN0b3J5KHBsdWdpbkFzc2VtYmx5UGF0aCwgdGhpcy5hc3NlbWJseUxvYWRGaWxlRGVsZWdhdGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBOZXh0ID0gZmFjdG9yeSwNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gZmFjdG9yeTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "EE53EB79E6EAE65617C94E5719C7B2D1",
              "algorithm": "md5"
            },
            {
              "value": "11E63107090D1D5EAEC8BCCE11C9B2E0B1158292",
              "algorithm": "sha-1"
            },
            {
              "value": "ED7F0934A2268A06EB7D24FE6AD15304BF7DDEA1952A171548DD67DBD3D79070",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5JTzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KdXNpbmcgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Db252ZXJ0ZXJzLlRTTGludE9iamVjdE1vZGVsOw0KdXNpbmcgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Xcml0ZXJzOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Db252ZXJ0ZXJzDQp7DQogICAgcHVibGljIGNsYXNzIFRTTGludENvbnZlcnRlciA6IFRvb2xGaWxlQ29udmVydGVyQmFzZQ0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBMb2dSZWFkZXI8VFNMaW50TG9nPiBsb2dSZWFkZXI7DQogICAgICAgIA0KICAgICAgICBwdWJsaWMgVFNMaW50Q29udmVydGVyKCkNCiAgICAgICAgew0KICAgICAgICAgICAgbG9nUmVhZGVyID0gbmV3IFRTTGludExvZ1JlYWRlcigpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBDb252ZXJ0KFN0cmVhbSBpbnB1dCwgSVJlc3VsdExvZ1dyaXRlciBvdXRwdXQsIE9wdGlvbmFsbHlFbWl0dGVkRGF0YSBkYXRhVG9JbnNlcnQpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgPz8gdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2YoaW5wdXQpKTsNCg0KICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0ID8/IHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG91dHB1dCkpOw0KDQogICAgICAgICAgICBUU0xpbnRMb2cgdHNMaW50TG9nID0gbG9nUmVhZGVyLlJlYWRMb2coaW5wdXQpOw0KDQogICAgICAgICAgICBUb29sIHRvb2wgPSBuZXcgVG9vbA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIE5hbWUgPSAiVFNMaW50Ig0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgdmFyIHJ1biA9IG5ldyBSdW4oKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFRvb2wgPSB0b29sDQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBvdXRwdXQuSW5pdGlhbGl6ZShydW4pOw0KDQogICAgICAgICAgICB2YXIgcmVzdWx0cyA9IG5ldyBMaXN0PFJlc3VsdD4oKTsNCiAgICAgICAgICAgIGZvcmVhY2goVFNMaW50TG9nRW50cnkgZW50cnkgaW4gdHNMaW50TG9nKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJlc3VsdHMuQWRkKENyZWF0ZVJlc3VsdChlbnRyeSkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgZmlsZUluZm9GYWN0b3J5ID0gbmV3IEZpbGVJbmZvRmFjdG9yeShNaW1lVHlwZS5EZXRlcm1pbmVGcm9tRmlsZUV4dGVuc2lvbiwgZGF0YVRvSW5zZXJ0KTsNCiAgICAgICAgICAgIERpY3Rpb25hcnk8c3RyaW5nLCBGaWxlRGF0YT4gZmlsZURpY3Rpb25hcnkgPSBmaWxlSW5mb0ZhY3RvcnkuQ3JlYXRlKHJlc3VsdHMpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiAoZmlsZURpY3Rpb25hcnk/LkFueSgpID09IHRydWUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgb3V0cHV0LldyaXRlRmlsZXMoZmlsZURpY3Rpb25hcnkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBvdXRwdXQuT3BlblJlc3VsdHMoKTsNCiAgICAgICAgICAgIG91dHB1dC5Xcml0ZVJlc3VsdHMocmVzdWx0cyk7DQogICAgICAgICAgICBvdXRwdXQuQ2xvc2VSZXN1bHRzKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpbnRlcm5hbCBSZXN1bHQgQ3JlYXRlUmVzdWx0KFRTTGludExvZ0VudHJ5IGVudHJ5KQ0KICAgICAgICB7DQogICAgICAgICAgICBlbnRyeSA9IGVudHJ5ID8/IHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKGVudHJ5KSk7DQoNCiAgICAgICAgICAgIFJlc3VsdCByZXN1bHQgPSBuZXcgUmVzdWx0KCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBSdWxlSWQgPSBlbnRyeS5SdWxlTmFtZSwNCiAgICAgICAgICAgICAgICBNZXNzYWdlID0gbmV3IE1lc3NhZ2UgeyBUZXh0ID0gZW50cnkuRmFpbHVyZSB9DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBzd2l0Y2ggKGVudHJ5LlJ1bGVTZXZlcml0eSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjYXNlICJFUlJPUiI6DQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5MZXZlbCA9IFJlc3VsdExldmVsLkVycm9yOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJXQVJOIjoNCiAgICAgICAgICAgICAgICBjYXNlICJXQVJOSU5HIjoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LkxldmVsID0gUmVzdWx0TGV2ZWwuV2FybmluZzsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAiREVGQVVMVCI6DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LkxldmVsID0gUmVzdWx0TGV2ZWwuTm90ZTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFJlZ2lvbiByZWdpb24gPSBuZXcgUmVnaW9uKCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAvLyBUaGUgVFNMaW50IGxvZ3MgaGF2ZSBsaW5lIGFuZCBjb2x1bW4gc3RhcnQgYXQgMCwgU2FyaWYgaGFzIHRoZW0gc3RhcnRpbmcgYXQgMSwgc28gYWRkIDEgdG8gZWFjaA0KICAgICAgICAgICAgICAgIFN0YXJ0TGluZSA9IGVudHJ5LlN0YXJ0UG9zaXRpb24uTGluZSArIDEsDQogICAgICAgICAgICAgICAgU3RhcnRDb2x1bW4gPSBlbnRyeS5TdGFydFBvc2l0aW9uLkNoYXJhY3RlciArIDEsDQogICAgICAgICAgICAgICAgRW5kTGluZSA9IGVudHJ5LkVuZFBvc2l0aW9uLkxpbmUgKyAxLA0KICAgICAgICAgICAgICAgIEVuZENvbHVtbiA9IGVudHJ5LkVuZFBvc2l0aW9uLkNoYXJhY3RlciArIDEsDQoNCiAgICAgICAgICAgICAgICBDaGFyT2Zmc2V0ID0gZW50cnkuU3RhcnRQb3NpdGlvbi5Qb3NpdGlvbg0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgaW50IGxlbmd0aCA9IGVudHJ5LkVuZFBvc2l0aW9uLlBvc2l0aW9uIC0gZW50cnkuU3RhcnRQb3NpdGlvbi5Qb3NpdGlvbjsNCiAgICAgICAgICAgIHJlZ2lvbi5DaGFyTGVuZ3RoID0gbGVuZ3RoID4gMCA/IGxlbmd0aCA6IDA7DQoNCiAgICAgICAgICAgIFVyaSBhbmFseXNpc1RhcmdldFVyaSA9IG5ldyBVcmkoZW50cnkuTmFtZSwgVXJpS2luZC5SZWxhdGl2ZSk7DQoNCiAgICAgICAgICAgIHZhciBwaHlzaWNhbExvY2F0aW9uID0gbmV3IFBoeXNpY2FsTG9jYXRpb24oaWQ6IDAsIGZpbGVMb2NhdGlvbjogbmV3IEZpbGVMb2NhdGlvbih1cmk6IGFuYWx5c2lzVGFyZ2V0VXJpLCB1cmlCYXNlSWQ6IG51bGwpLCByZWdpb246IHJlZ2lvbiwgY29udGV4dFJlZ2lvbjogbnVsbCk7DQogICAgICAgICAgICBMb2NhdGlvbiBsb2NhdGlvbiA9IG5ldyBMb2NhdGlvbigpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUGh5c2ljYWxMb2NhdGlvbiA9IHBoeXNpY2FsTG9jYXRpb24NCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHJlc3VsdC5Mb2NhdGlvbnMgPSBuZXcgTGlzdDxMb2NhdGlvbj4oKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGxvY2F0aW9uDQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBpZiAoZW50cnkuRml4ZXM/LkFueSgpID09IHRydWUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgSUxpc3Q8UmVwbGFjZW1lbnQ+IHJlcGxhY2VtZW50cyA9IG5ldyBMaXN0PFJlcGxhY2VtZW50PigpOw0KDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoVFNMaW50TG9nRml4IGZpeCBpbiBlbnRyeS5GaXhlcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFJlcGxhY2VtZW50IHJlcGxhY2VtZW50ID0gbmV3IFJlcGxhY2VtZW50KCk7DQoNCiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuRGVsZXRlZFJlZ2lvbiA9IG5ldyBSZWdpb24NCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgQ2hhckxlbmd0aCA9IGZpeC5Jbm5lckxlbmd0aCwNCiAgICAgICAgICAgICAgICAgICAgICAgIENoYXJPZmZzZXQgPSBmaXguSW5uZXJTdGFydA0KICAgICAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgICAgIGlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkoZml4LklubmVyVGV4dCkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50Lkluc2VydGVkQ29udGVudCA9IG5ldyBGaWxlQ29udGVudA0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHQgPSBmaXguSW5uZXJUZXh0DQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnRzLkFkZChyZXBsYWNlbWVudCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgRmlsZUNoYW5nZSBzYXJpZkZpbGVDaGFuZ2UgPSBuZXcgRmlsZUNoYW5nZShmaWxlTG9jYXRpb246IG5ldyBGaWxlTG9jYXRpb24odXJpOiBhbmFseXNpc1RhcmdldFVyaSwgdXJpQmFzZUlkOiBudWxsKSwgcmVwbGFjZW1lbnRzOiByZXBsYWNlbWVudHMpOw0KDQogICAgICAgICAgICAgICAgRml4IHNhcmlmRml4ID0gbmV3IEZpeChkZXNjcmlwdGlvbjogbnVsbCwgZmlsZUNoYW5nZXM6IG5ldyBMaXN0PEZpbGVDaGFuZ2U+KCkgeyBzYXJpZkZpbGVDaGFuZ2UgfSk7DQogICAgICAgICAgICAgICAgcmVzdWx0LkZpeGVzID0gbmV3IExpc3Q8Rml4PiB7IHNhcmlmRml4IH07DQogICAgICAgICAgICB9IA0KDQogICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICB9ICAgICAgICANCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "0766DB0ADCAA4CE0F91D1A3FFC53FF28",
              "algorithm": "md5"
            },
            {
              "value": "A0677FA0C8F9412ED5B846D52F42E964108A8673",
              "algorithm": "sha-1"
            },
            {
              "value": "801B0870AA467FBEC2C12A5012C46E361AFFD8F6B78B149EFE2C61AD80CD1C5A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintLogReader.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "CE47C81D9680E67F184482AAC37D5363",
              "algorithm": "md5"
            },
            {
              "value": "4C4428E28BC4D22665FAE32DA6EC7B1187F19239",
              "algorithm": "sha-1"
            },
            {
              "value": "4400A79C532721319B2FFD3E96261C4F3A6A9058EE533F4A1CC96CFBFF848E66",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/Category.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/dXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQp1c2luZyBTeXN0ZW0uWG1sOw0KdXNpbmcgU3lzdGVtLlhtbC5TY2hlbWE7DQp1c2luZyBTeXN0ZW0uWG1sLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnMuUFJFRmFzdE9iamVjdE1vZGVsDQp7DQogICAgcHVibGljIGNsYXNzIENhdGVnb3J5IDogRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4sIElYbWxTZXJpYWxpemFibGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBYbWxTY2hlbWEgR2V0U2NoZW1hKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBEZWZpbmUgaG93IFhtbFNlcmlhbGl6ZXIuRGVzZXJpYWxpemUgc2hvdWxkIGRlc2VyaWFsaXplIGludG8gYSBkaWN0aW9uYXJ5DQogICAgICAgIHB1YmxpYyB2b2lkIFJlYWRYbWwoWG1sUmVhZGVyIHJlYWRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgYm9vbCB3YXNFbXB0eSA9IHJlYWRlci5Jc0VtcHR5RWxlbWVudDsNCiAgICAgICAgICAgIHJlYWRlci5SZWFkKCk7DQoNCiAgICAgICAgICAgIGlmICh3YXNFbXB0eSkNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICANCiAgICAgICAgICAgIHdoaWxlIChyZWFkZXIuTm9kZVR5cGUgIT0gWG1sTm9kZVR5cGUuRW5kRWxlbWVudCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIga2V5ID0gcmVhZGVyLk5hbWU7DQogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVhZGVyLlJlYWRJbm5lclhtbCgpOw0KDQogICAgICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPcldoaXRlU3BhY2Uoa2V5KSkNCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQoNCiAgICAgICAgICAgICAgICBBZGQoa2V5LCB2YWx1ZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJlYWRlci5SZWFkRW5kRWxlbWVudCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgV3JpdGVYbWwoWG1sV3JpdGVyIHdyaXRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uKCk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "DCDF96B99BA46D82E87C568A334636E9",
              "algorithm": "md5"
            },
            {
              "value": "9B015B229F89ABE8839A907A5987D430F217471A",
              "algorithm": "sha-1"
            },
            {
              "value": "3D731F3858D0E36AA4925C110DB93AEE518DECCF51E54841436E299658BD7B88",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/Defect.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/dXNpbmcgU3lzdGVtLlhtbC5TZXJpYWxpemF0aW9uOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Db252ZXJ0ZXJzLlBSRUZhc3RPYmplY3RNb2RlbA0Kew0KICAgIHB1YmxpYyBjbGFzcyBEZWZlY3QNCiAgICB7DQogICAgICAgIFtYbWxFbGVtZW50KCJTRkEiKV0NCiAgICAgICAgcHVibGljIFNGQSBTRkEgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIFtYbWxFbGVtZW50KCJERUZFQ1RDT0RFIildDQogICAgICAgIHB1YmxpYyBzdHJpbmcgRGVmZWN0Q29kZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgW1htbEVsZW1lbnQoIkRFU0NSSVBUSU9OIildDQogICAgICAgIHB1YmxpYyBzdHJpbmcgRGVzY3JpcHRpb24geyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIFtYbWxFbGVtZW50KCJGVU5DVElPTiIpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIEZ1bmN0aW9uIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBbWG1sRWxlbWVudCgiREVDT1JBVEVEIildDQogICAgICAgIHB1YmxpYyBzdHJpbmcgRGVjb3JhdGVkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBbWG1sRWxlbWVudCgiRlVOQ0xJTkUiKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBGdW5jbGluZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgW1htbEVsZW1lbnQoIlBST0JBQklMSVRZIildDQogICAgICAgIHB1YmxpYyBzdHJpbmcgUHJvYmFiaWxpdHkgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIFtYbWxFbGVtZW50KCJSQU5LIildDQogICAgICAgIHB1YmxpYyBzdHJpbmcgUmFuayB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgW1htbEVsZW1lbnQoIlBBVEgiKV0NCiAgICAgICAgcHVibGljIFBSRUZhc3RQYXRoIFBhdGggeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIFtYbWxFbGVtZW50KCJDQVRFR09SWSIpXQ0KICAgICAgICBwdWJsaWMgQ2F0ZWdvcnkgQ2F0ZWdvcnkgeyBnZXQ7IHNldDsgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "7A837A495F68EEAAD9E663EBC9570A9B",
              "algorithm": "md5"
            },
            {
              "value": "BBB70B5691194E00BF52941380AC7DDF81222BBA",
              "algorithm": "sha-1"
            },
            {
              "value": "02D0F026318F446B95FEA25D899C54C173FE593D92EC5179DFEBB129AD41F96F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/DefectList.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/dXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQp1c2luZyBTeXN0ZW0uWG1sLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnMuUFJFRmFzdE9iamVjdE1vZGVsDQp7DQogICAgW1htbFJvb3QoIkRFRkVDVFMiKV0NCiAgICBwdWJsaWMgY2xhc3MgRGVmZWN0TGlzdA0KICAgIHsNCiAgICAgICAgW1htbEVsZW1lbnQoIkRFRkVDVCIpXQ0KICAgICAgICBwdWJsaWMgTGlzdDxEZWZlY3Q+IERlZmVjdHMgeyBnZXQ7IHNldDsgfSA9IG5ldyBMaXN0PERlZmVjdD4oKTsNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "6B569192CB00362CDD0F64A85F8203E3",
              "algorithm": "md5"
            },
            {
              "value": "94AE119BC55EC02E415B64F32FA08DF953B91D66",
              "algorithm": "sha-1"
            },
            {
              "value": "18C895A02FBF9C290F7EB07CB401E7CF8E1C03DB36D56E4DCCBD4572160C83F8",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/PREFastPath.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/dXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQp1c2luZyBTeXN0ZW0uWG1sLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnMuUFJFRmFzdE9iamVjdE1vZGVsDQp7DQogICAgcHVibGljIGNsYXNzIFBSRUZhc3RQYXRoDQogICAgew0KICAgICAgICBbWG1sRWxlbWVudCgiU0ZBIildDQogICAgICAgIHB1YmxpYyBMaXN0PFNGQT4gU0ZBcyB7IGdldDsgc2V0OyB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "673AACA6616FF4F9530C4D33862A3C06",
              "algorithm": "md5"
            },
            {
              "value": "36D0D8B44F88C88EB2681FBFCB3A38AA66B2EDC9",
              "algorithm": "sha-1"
            },
            {
              "value": "699993A373F0F499DC6431C7AD2A2C6966561BCB7376EE500B203C8C44A83593",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintObjectModel/PylintLogEntry.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBOZXd0b25zb2Z0Lkpzb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnMuUHlsaW50T2JqZWN0TW9kZWwNCnsNCiAgICBwdWJsaWMgY2xhc3MgUHlsaW50TG9nRW50cnkNCiAgICB7DQogICAgICAgIFtKc29uUHJvcGVydHkoInR5cGUiKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBUeXBlIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBbSnNvblByb3BlcnR5KCJtb2R1bGUiKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBNb2R1bGVOYW1lIHsgZ2V0OyAgc2V0OyB9DQoNCiAgICAgICAgW0pzb25Qcm9wZXJ0eSgib2JqIildDQogICAgICAgIHB1YmxpYyBzdHJpbmcgT2JqZWN0IHsgZ2V0OyAgc2V0OyB9DQoNCiAgICAgICAgW0pzb25Qcm9wZXJ0eSgibGluZSIpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIExpbmUgeyBnZXQ7ICBzZXQ7IH0NCg0KICAgICAgICBbSnNvblByb3BlcnR5KCJjb2x1bW4iKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBDb2x1bW4geyAgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBbSnNvblByb3BlcnR5KCJwYXRoIildDQogICAgICAgIHB1YmxpYyBzdHJpbmcgRmlsZVBhdGggeyBnZXQ7ICBzZXQ7IH0NCg0KICAgICAgICBbSnNvblByb3BlcnR5KCJzeW1ib2wiKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBTeW1ib2wgeyBnZXQ7ICBzZXQ7IH0NCg0KICAgICAgICBbSnNvblByb3BlcnR5KCJtZXNzYWdlIildDQogICAgICAgIHB1YmxpYyBzdHJpbmcgTWVzc2FnZSB7IGdldDsgIHNldDsgfQ0KDQogICAgICAgIFtKc29uUHJvcGVydHkoIm1lc3NhZ2UtaWQiKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBNZXNzYWdlSWQgeyBnZXQ7IHNldDsgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "AC70811C79154A779A65CC16A9591C1A",
              "algorithm": "md5"
            },
            {
              "value": "25DDF468E2FCABD5058120769C16DC0A52831495",
              "algorithm": "sha-1"
            },
            {
              "value": "5CD4A7DAB48FEC71F2EEE17ED4C65D7AD636BB22532086380244B0FFC0365127",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintObjectModel/PylintLogReader.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uSU87DQp1c2luZyBOZXd0b25zb2Z0Lkpzb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnMuUHlsaW50T2JqZWN0TW9kZWwNCnsNCiAgICBwdWJsaWMgY2xhc3MgUHlsaW50TG9nUmVhZGVyIDogTG9nUmVhZGVyPFB5bGludExvZz4NCiAgICB7DQogICAgICAgIHB1YmxpYyBvdmVycmlkZSBQeWxpbnRMb2cgUmVhZExvZyhTdHJlYW0gaW5wdXQpDQogICAgICAgIHsNCiAgICAgICAgICAgIHN0cmluZyBweWxpbnRUZXh0Ow0KDQogICAgICAgICAgICB1c2luZyAoVGV4dFJlYWRlciBzdHJlYW1SZWFkZXIgPSBuZXcgU3RyZWFtUmVhZGVyKGlucHV0KSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBweWxpbnRUZXh0ID0gc3RyZWFtUmVhZGVyLlJlYWRUb0VuZCgpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gSnNvbkNvbnZlcnQuRGVzZXJpYWxpemVPYmplY3Q8UHlsaW50TG9nPihweWxpbnRUZXh0KTsNCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "5E614640B001E483386D8C2BEAA931E0",
              "algorithm": "md5"
            },
            {
              "value": "1B540058B099D3F060F937D90B149AF531E7D255",
              "algorithm": "sha-1"
            },
            {
              "value": "EEAD15A29770FE60FA33039CE87DA760E4020ADE2686B91941B608F7F16A52D0",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintObjectModel/TSLintLogEntry.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnMuVFNMaW50T2JqZWN0TW9kZWwNCnsNCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIHB1YmxpYyBjbGFzcyBUU0xpbnRMb2dFbnRyeQ0KICAgIHsNCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJuYW1lIiwgSXNSZXF1aXJlZCA9IHRydWUsIEVtaXREZWZhdWx0VmFsdWUgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBOYW1lIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImZhaWx1cmUiLCBJc1JlcXVpcmVkID0gdHJ1ZSwgRW1pdERlZmF1bHRWYWx1ZSA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIEZhaWx1cmUgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAicnVsZU5hbWUiLCBJc1JlcXVpcmVkID0gdHJ1ZSwgRW1pdERlZmF1bHRWYWx1ZSA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIFJ1bGVOYW1lIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInJ1bGVTZXZlcml0eSIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIFJ1bGVTZXZlcml0eSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJzdGFydFBvc2l0aW9uIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBUU0xpbnRMb2dQb3NpdGlvbiBTdGFydFBvc2l0aW9uIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImVuZFBvc2l0aW9uIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBUU0xpbnRMb2dQb3NpdGlvbiBFbmRQb3NpdGlvbiB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJmaXgiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIElMaXN0PFRTTGludExvZ0ZpeD4gRml4ZXMgeyBnZXQ7IHNldDsgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "AD20A342981F18D6827179A59843E423",
              "algorithm": "md5"
            },
            {
              "value": "9DFB2197A816DE167AADEA29237CEC239E79E30B",
              "algorithm": "sha-1"
            },
            {
              "value": "670DEFD399EEAD411379ED492D2C7A2F464B017A902458F4C234F225A88C26F5",
              "algorithm": "sha-256"
            }
          ]
        },
        "#$(ProjectDir)#../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll": {
          "mimeType": "application/octet-stream"
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Attachment.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBBIGZpbGUgcmVsZXZhbnQgdG8gYSB0b29sIGludm9jYXRpb24gb3IgdG8gYSByZXN1bHQuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Ni4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBBdHRhY2htZW50IDogSVNhcmlmTm9kZQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBJRXF1YWxpdHlDb21wYXJlcjxBdHRhY2htZW50PiBWYWx1ZUNvbXBhcmVyID0+IEF0dGFjaG1lbnRFcXVhbGl0eUNvbXBhcmVyLkluc3RhbmNlOw0KDQogICAgICAgIHB1YmxpYyBib29sIFZhbHVlRXF1YWxzKEF0dGFjaG1lbnQgb3RoZXIpID0+IFZhbHVlQ29tcGFyZXIuRXF1YWxzKHRoaXMsIG90aGVyKTsNCiAgICAgICAgcHVibGljIGludCBWYWx1ZUdldEhhc2hDb2RlKCkgPT4gVmFsdWVDb21wYXJlci5HZXRIYXNoQ29kZSh0aGlzKTsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBvYmplY3QgaW1wbGVtZW50aW5nIDxzZWUgY3JlZj0iSVNhcmlmTm9kZSIgLz4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTYXJpZk5vZGVLaW5kIFNhcmlmTm9kZUtpbmQNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFNhcmlmTm9kZUtpbmQuQXR0YWNobWVudDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgbWVzc2FnZSBkZXNjcmliaW5nIHRoZSByb2xlIHBsYXllZCBieSB0aGUgYXR0YWNobWVudC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJkZXNjcmlwdGlvbiIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIE1lc3NhZ2UgRGVzY3JpcHRpb24geyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBsb2NhdGlvbiBvZiB0aGUgYXR0YWNobWVudC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJmaWxlTG9jYXRpb24iLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBGaWxlTG9jYXRpb24gRmlsZUxvY2F0aW9uIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiByZWdpb25zIG9mIGludGVyZXN0IHdpdGhpbiB0aGUgYXR0YWNobWVudC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJyZWdpb25zIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8UmVnaW9uPiBSZWdpb25zIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiByZWN0YW5nbGVzIHNwZWNpZnlpbmcgYXJlYXMgb2YgaW50ZXJlc3Qgd2l0aGluIHRoZSBpbWFnZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJyZWN0YW5nbGVzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8UmVjdGFuZ2xlPiBSZWN0YW5nbGVzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJBdHRhY2htZW50IiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIEF0dGFjaG1lbnQoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJBdHRhY2htZW50IiAvPiBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCB2YWx1ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZGVzY3JpcHRpb24iPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IERlc2NyaXB0aW9uIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZmlsZUxvY2F0aW9uIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBGaWxlTG9jYXRpb24iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJyZWdpb25zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBSZWdpb25zIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icmVjdGFuZ2xlcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUmVjdGFuZ2xlcyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICBwdWJsaWMgQXR0YWNobWVudChNZXNzYWdlIGRlc2NyaXB0aW9uLCBGaWxlTG9jYXRpb24gZmlsZUxvY2F0aW9uLCBJRW51bWVyYWJsZTxSZWdpb24+IHJlZ2lvbnMsIElFbnVtZXJhYmxlPFJlY3RhbmdsZT4gcmVjdGFuZ2xlcykNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdChkZXNjcmlwdGlvbiwgZmlsZUxvY2F0aW9uLCByZWdpb25zLCByZWN0YW5nbGVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkF0dGFjaG1lbnQiIC8+IGNsYXNzIGZyb20gdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdGhlciI+DQogICAgICAgIC8vLyBUaGUgaW5zdGFuY2UgZnJvbSB3aGljaCB0aGUgbmV3IGluc3RhbmNlIGlzIHRvIGJlIGluaXRpYWxpemVkLg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj4NCiAgICAgICAgLy8vIFRocm93biBpZiA8cGFyYW1yZWYgbmFtZT0ib3RoZXIiIC8+IGlzIG51bGwuDQogICAgICAgIC8vLyA8L2V4Y2VwdGlvbj4NCiAgICAgICAgcHVibGljIEF0dGFjaG1lbnQoQXR0YWNobWVudCBvdGhlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yob3RoZXIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSW5pdChvdGhlci5EZXNjcmlwdGlvbiwgb3RoZXIuRmlsZUxvY2F0aW9uLCBvdGhlci5SZWdpb25zLCBvdGhlci5SZWN0YW5nbGVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgQXR0YWNobWVudCBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKEF0dGFjaG1lbnQpRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBJU2FyaWZOb2RlIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IEF0dGFjaG1lbnQodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChNZXNzYWdlIGRlc2NyaXB0aW9uLCBGaWxlTG9jYXRpb24gZmlsZUxvY2F0aW9uLCBJRW51bWVyYWJsZTxSZWdpb24+IHJlZ2lvbnMsIElFbnVtZXJhYmxlPFJlY3RhbmdsZT4gcmVjdGFuZ2xlcykNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKGRlc2NyaXB0aW9uICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgRGVzY3JpcHRpb24gPSBuZXcgTWVzc2FnZShkZXNjcmlwdGlvbik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChmaWxlTG9jYXRpb24gIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBGaWxlTG9jYXRpb24gPSBuZXcgRmlsZUxvY2F0aW9uKGZpbGVMb2NhdGlvbik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChyZWdpb25zICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzAgPSBuZXcgTGlzdDxSZWdpb24+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gcmVnaW9ucykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobmV3IFJlZ2lvbih2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBSZWdpb25zID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHJlY3RhbmdsZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMSA9IG5ldyBMaXN0PFJlY3RhbmdsZT4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMSBpbiByZWN0YW5nbGVzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzEgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMS5BZGQobnVsbCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8xLkFkZChuZXcgUmVjdGFuZ2xlKHZhbHVlXzEpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIFJlY3RhbmdsZXMgPSBkZXN0aW5hdGlvbl8xOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "0138FEFD8924D9B74F3D6CE4B37A815F",
              "algorithm": "md5"
            },
            {
              "value": "50CFB017B2FDD4C9167CFBB2506FE16F83D776D9",
              "algorithm": "sha-1"
            },
            {
              "value": "0E65AB3BD57908AB3AF44E3F31222C4FEADC9E5D70A7E0977F09643BDB2356B0",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/CodeFlow.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBBIHNldCBvZiB0aHJlYWRGbG93cyB3aGljaCB0b2dldGhlciBkZXNjcmliZSBhIHBhdHRlcm4gb2YgY29kZSBleGVjdXRpb24gcmVsZXZhbnQgdG8gZGV0ZWN0aW5nIGEgcmVzdWx0Lg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgQ29kZUZsb3cgOiBQcm9wZXJ0eUJhZ0hvbGRlciwgSVNhcmlmTm9kZQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBJRXF1YWxpdHlDb21wYXJlcjxDb2RlRmxvdz4gVmFsdWVDb21wYXJlciA9PiBDb2RlRmxvd0VxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoQ29kZUZsb3cgb3RoZXIpID0+IFZhbHVlQ29tcGFyZXIuRXF1YWxzKHRoaXMsIG90aGVyKTsNCiAgICAgICAgcHVibGljIGludCBWYWx1ZUdldEhhc2hDb2RlKCkgPT4gVmFsdWVDb21wYXJlci5HZXRIYXNoQ29kZSh0aGlzKTsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBvYmplY3QgaW1wbGVtZW50aW5nIDxzZWUgY3JlZj0iSVNhcmlmTm9kZSIgLz4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTYXJpZk5vZGVLaW5kIFNhcmlmTm9kZUtpbmQNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFNhcmlmTm9kZUtpbmQuQ29kZUZsb3c7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIG1lc3NhZ2UgcmVsZXZhbnQgdG8gdGhlIGNvZGUgZmxvdy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJtZXNzYWdlIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgTWVzc2FnZSBNZXNzYWdlIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiBvbmUgb3IgbW9yZSB1bmlxdWUgdGhyZWFkRmxvdyBvYmplY3RzLCBlYWNoIG9mIHdoaWNoIGRlc2NyaWJlcyB0aGUgcHJvZ3Jlc3Mgb2YgYSBwcm9ncmFtIHRocm91Z2ggYSB0aHJlYWQgb2YgZXhlY3V0aW9uLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInRocmVhZEZsb3dzIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8VGhyZWFkRmxvdz4gVGhyZWFkRmxvd3MgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEtleS92YWx1ZSBwYWlycyB0aGF0IHByb3ZpZGUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29kZSBmbG93Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInByb3BlcnRpZXMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIGludGVybmFsIG92ZXJyaWRlIElEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4gUHJvcGVydGllcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iQ29kZUZsb3ciIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgQ29kZUZsb3coKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJDb2RlRmxvdyIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im1lc3NhZ2UiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IE1lc3NhZ2UiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJ0aHJlYWRGbG93cyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogVGhyZWFkRmxvd3MiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwcm9wZXJ0aWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBQcm9wZXJ0aWVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBDb2RlRmxvdyhNZXNzYWdlIG1lc3NhZ2UsIElFbnVtZXJhYmxlPFRocmVhZEZsb3c+IHRocmVhZEZsb3dzLCBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IHByb3BlcnRpZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEluaXQobWVzc2FnZSwgdGhyZWFkRmxvd3MsIHByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iQ29kZUZsb3ciIC8+IGNsYXNzIGZyb20gdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdGhlciI+DQogICAgICAgIC8vLyBUaGUgaW5zdGFuY2UgZnJvbSB3aGljaCB0aGUgbmV3IGluc3RhbmNlIGlzIHRvIGJlIGluaXRpYWxpemVkLg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj4NCiAgICAgICAgLy8vIFRocm93biBpZiA8cGFyYW1yZWYgbmFtZT0ib3RoZXIiIC8+IGlzIG51bGwuDQogICAgICAgIC8vLyA8L2V4Y2VwdGlvbj4NCiAgICAgICAgcHVibGljIENvZGVGbG93KENvZGVGbG93IG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLk1lc3NhZ2UsIG90aGVyLlRocmVhZEZsb3dzLCBvdGhlci5Qcm9wZXJ0aWVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgQ29kZUZsb3cgRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIChDb2RlRmxvdylEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgQ29kZUZsb3codGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChNZXNzYWdlIG1lc3NhZ2UsIElFbnVtZXJhYmxlPFRocmVhZEZsb3c+IHRocmVhZEZsb3dzLCBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IHByb3BlcnRpZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChtZXNzYWdlICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTWVzc2FnZSA9IG5ldyBNZXNzYWdlKG1lc3NhZ2UpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAodGhyZWFkRmxvd3MgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PFRocmVhZEZsb3c+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gdGhyZWFkRmxvd3MpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG5ldyBUaHJlYWRGbG93KHZhbHVlXzApKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIFRocmVhZEZsb3dzID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPihwcm9wZXJ0aWVzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "461FBFDF16CD39A5865878EDB6710076",
              "algorithm": "md5"
            },
            {
              "value": "B5D6F01AB53A87CBD0C9F967B00ED429A687169F",
              "algorithm": "sha-1"
            },
            {
              "value": "EB0DE7E76B869598081D182C37DCBE1E68AFB4FACF24FAEB28AF2799394CD7CF",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/ConsoleLogger.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "3131B61A60BF1D07BB768FF8508D8231",
              "algorithm": "md5"
            },
            {
              "value": "4F42D9A5AC5160B3AAE84FAE17EA39A00A2E902A",
              "algorithm": "sha-1"
            },
            {
              "value": "E523793EDB38ECF4E7534DA0711697156ED8B89913606AC1AD8FCEE00D68FD14",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Conversion.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBEZXNjcmliZXMgaG93IGEgY29udmVydGVyIHRyYW5zZm9ybWVkIHRoZSBvdXRwdXQgb2YgYSBzdGF0aWMgYW5hbHlzaXMgdG9vbCBmcm9tIHRoZSBhbmFseXNpcyB0b29sJ3MgbmF0aXZlIG91dHB1dCBmb3JtYXQgaW50byB0aGUgU0FSSUYgZm9ybWF0Lg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgQ29udmVyc2lvbiA6IElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8Q29udmVyc2lvbj4gVmFsdWVDb21wYXJlciA9PiBDb252ZXJzaW9uRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhDb252ZXJzaW9uIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLkNvbnZlcnNpb247DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHRvb2wgb2JqZWN0IHRoYXQgZGVzY3JpYmVzIHRoZSBjb252ZXJ0ZXIuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAidG9vbCIsIElzUmVxdWlyZWQgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIFRvb2wgVG9vbCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQW4gaW52b2NhdGlvbiBvYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIGludm9jYXRpb24gb2YgdGhlIGNvbnZlcnRlci4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJpbnZvY2F0aW9uIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSW52b2NhdGlvbiBJbnZvY2F0aW9uIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBUaGUgbG9jYXRpb25zIG9mIHRoZSBhbmFseXNpcyB0b29sJ3MgcGVyLXJ1biBsb2cgZmlsZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiYW5hbHlzaXNUb29sTG9nRmlsZXMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxGaWxlTG9jYXRpb24+IEFuYWx5c2lzVG9vbExvZ0ZpbGVzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJDb252ZXJzaW9uIiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIENvbnZlcnNpb24oKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJDb252ZXJzaW9uIiAvPiBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCB2YWx1ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idG9vbCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogVG9vbCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Imludm9jYXRpb24iPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEludm9jYXRpb24iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJhbmFseXNpc1Rvb2xMb2dGaWxlcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogQW5hbHlzaXNUb29sTG9nRmlsZXMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgcHVibGljIENvbnZlcnNpb24oVG9vbCB0b29sLCBJbnZvY2F0aW9uIGludm9jYXRpb24sIElFbnVtZXJhYmxlPEZpbGVMb2NhdGlvbj4gYW5hbHlzaXNUb29sTG9nRmlsZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEluaXQodG9vbCwgaW52b2NhdGlvbiwgYW5hbHlzaXNUb29sTG9nRmlsZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iQ29udmVyc2lvbiIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgQ29udmVyc2lvbihDb252ZXJzaW9uIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLlRvb2wsIG90aGVyLkludm9jYXRpb24sIG90aGVyLkFuYWx5c2lzVG9vbExvZ0ZpbGVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgQ29udmVyc2lvbiBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKENvbnZlcnNpb24pRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBJU2FyaWZOb2RlIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IENvbnZlcnNpb24odGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChUb29sIHRvb2wsIEludm9jYXRpb24gaW52b2NhdGlvbiwgSUVudW1lcmFibGU8RmlsZUxvY2F0aW9uPiBhbmFseXNpc1Rvb2xMb2dGaWxlcykNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHRvb2wgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBUb29sID0gbmV3IFRvb2wodG9vbCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChpbnZvY2F0aW9uICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgSW52b2NhdGlvbiA9IG5ldyBJbnZvY2F0aW9uKGludm9jYXRpb24pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoYW5hbHlzaXNUb29sTG9nRmlsZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PEZpbGVMb2NhdGlvbj4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMCBpbiBhbmFseXNpc1Rvb2xMb2dGaWxlcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobmV3IEZpbGVMb2NhdGlvbih2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBBbmFseXNpc1Rvb2xMb2dGaWxlcyA9IGRlc3RpbmF0aW9uXzA7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "BF816D6C3479A653BB02CEF7B3C83FB0",
              "algorithm": "md5"
            },
            {
              "value": "301280E17FF223AF16B815FA529A193A813515E5",
              "algorithm": "sha-1"
            },
            {
              "value": "A45F14C92A1F81E47A421D601086D2A96D9C23CE330E94697D6CEAEE0FED9545",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Edge.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBSZXByZXNlbnRzIGEgZGlyZWN0ZWQgZWRnZSBpbiBhIGdyYXBoLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgRWRnZSA6IFByb3BlcnR5QmFnSG9sZGVyLCBJU2FyaWZOb2RlDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPEVkZ2U+IFZhbHVlQ29tcGFyZXIgPT4gRWRnZUVxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoRWRnZSBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlIiAvPi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTm9kZUtpbmQgU2FyaWZOb2RlS2luZA0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZC5FZGdlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBzdHJpbmcgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBlZGdlIHdpdGhpbiBpdHMgZ3JhcGguDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiaWQiLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgSWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIGVkZ2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAibGFiZWwiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBNZXNzYWdlIExhYmVsIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJZGVudGlmaWVzIHRoZSBzb3VyY2Ugbm9kZSAodGhlIG5vZGUgYXQgd2hpY2ggdGhlIGVkZ2Ugc3RhcnRzKS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJzb3VyY2VOb2RlSWQiLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgU291cmNlTm9kZUlkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJZGVudGlmaWVzIHRoZSB0YXJnZXQgbm9kZSAodGhlIG5vZGUgYXQgd2hpY2ggdGhlIGVkZ2UgZW5kcykuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAidGFyZ2V0Tm9kZUlkIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIFRhcmdldE5vZGVJZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gS2V5L3ZhbHVlIHBhaXJzIHRoYXQgcHJvdmlkZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlZGdlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInByb3BlcnRpZXMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIGludGVybmFsIG92ZXJyaWRlIElEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4gUHJvcGVydGllcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRWRnZSIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBFZGdlKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRWRnZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImlkIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBJZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImxhYmVsIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBMYWJlbCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InNvdXJjZU5vZGVJZCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogU291cmNlTm9kZUlkIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idGFyZ2V0Tm9kZUlkIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBUYXJnZXROb2RlSWQiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwcm9wZXJ0aWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBQcm9wZXJ0aWVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBFZGdlKHN0cmluZyBpZCwgTWVzc2FnZSBsYWJlbCwgc3RyaW5nIHNvdXJjZU5vZGVJZCwgc3RyaW5nIHRhcmdldE5vZGVJZCwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KGlkLCBsYWJlbCwgc291cmNlTm9kZUlkLCB0YXJnZXROb2RlSWQsIHByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRWRnZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgRWRnZShFZGdlIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLklkLCBvdGhlci5MYWJlbCwgb3RoZXIuU291cmNlTm9kZUlkLCBvdGhlci5UYXJnZXROb2RlSWQsIG90aGVyLlByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZSBJU2FyaWZOb2RlLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBFZGdlIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoRWRnZSlEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgRWRnZSh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KHN0cmluZyBpZCwgTWVzc2FnZSBsYWJlbCwgc3RyaW5nIHNvdXJjZU5vZGVJZCwgc3RyaW5nIHRhcmdldE5vZGVJZCwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJZCA9IGlkOw0KICAgICAgICAgICAgaWYgKGxhYmVsICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGFiZWwgPSBuZXcgTWVzc2FnZShsYWJlbCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFNvdXJjZU5vZGVJZCA9IHNvdXJjZU5vZGVJZDsNCiAgICAgICAgICAgIFRhcmdldE5vZGVJZCA9IHRhcmdldE5vZGVJZDsNCiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUHJvcGVydGllcyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4ocHJvcGVydGllcyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "CECA16D55E1F40B2F816CC313A3D742C",
              "algorithm": "md5"
            },
            {
              "value": "66BEC02CDE283AD8A5C7623554540DDEFB716E64",
              "algorithm": "sha-1"
            },
            {
              "value": "4CBCB46B59C457BA81CBD58E4F578FE5C8C56170A131E03B2030CAC0E9EB0CD5",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/EdgeTraversal.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBSZXByZXNlbnRzIHRoZSB0cmF2ZXJzYWwgb2YgYSBzaW5nbGUgZWRnZSBpbiB0aGUgY291cnNlIG9mIGEgZ3JhcGggdHJhdmVyc2FsLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgRWRnZVRyYXZlcnNhbCA6IFByb3BlcnR5QmFnSG9sZGVyLCBJU2FyaWZOb2RlDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPEVkZ2VUcmF2ZXJzYWw+IFZhbHVlQ29tcGFyZXIgPT4gRWRnZVRyYXZlcnNhbEVxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoRWRnZVRyYXZlcnNhbCBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlIiAvPi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTm9kZUtpbmQgU2FyaWZOb2RlS2luZA0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZC5FZGdlVHJhdmVyc2FsOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSWRlbnRpZmllcyB0aGUgZWRnZSBiZWluZyB0cmF2ZXJzZWQuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiZWRnZUlkIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIEVkZ2VJZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBtZXNzYWdlIHRvIGRpc3BsYXkgdG8gdGhlIHVzZXIgYXMgdGhlIGVkZ2UgaXMgdHJhdmVyc2VkLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gIm1lc3NhZ2UiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBNZXNzYWdlIE1lc3NhZ2UgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSB2YWx1ZXMgb2YgcmVsZXZhbnQgZXhwcmVzc2lvbnMgYWZ0ZXIgdGhlIGVkZ2UgaGFzIGJlZW4gdHJhdmVyc2VkLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImZpbmFsU3RhdGUiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gRmluYWxTdGF0ZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIG51bWJlciBvZiBlZGdlIHRyYXZlcnNhbHMgbmVjZXNzYXJ5IHRvIHJldHVybiBmcm9tIGEgbmVzdGVkIGdyYXBoLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInN0ZXBPdmVyRWRnZUNvdW50IiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgaW50IFN0ZXBPdmVyRWRnZUNvdW50IHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBLZXkvdmFsdWUgcGFpcnMgdGhhdCBwcm92aWRlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVkZ2UgdHJhdmVyc2FsLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInByb3BlcnRpZXMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIGludGVybmFsIG92ZXJyaWRlIElEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4gUHJvcGVydGllcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRWRnZVRyYXZlcnNhbCIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBFZGdlVHJhdmVyc2FsKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRWRnZVRyYXZlcnNhbCIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImVkZ2VJZCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogRWRnZUlkIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ibWVzc2FnZSI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogTWVzc2FnZSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImZpbmFsU3RhdGUiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEZpbmFsU3RhdGUiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJzdGVwT3ZlckVkZ2VDb3VudCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogU3RlcE92ZXJFZGdlQ291bnQiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwcm9wZXJ0aWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBQcm9wZXJ0aWVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBFZGdlVHJhdmVyc2FsKHN0cmluZyBlZGdlSWQsIE1lc3NhZ2UgbWVzc2FnZSwgSURpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IGZpbmFsU3RhdGUsIGludCBzdGVwT3ZlckVkZ2VDb3VudCwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KGVkZ2VJZCwgbWVzc2FnZSwgZmluYWxTdGF0ZSwgc3RlcE92ZXJFZGdlQ291bnQsIHByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRWRnZVRyYXZlcnNhbCIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgRWRnZVRyYXZlcnNhbChFZGdlVHJhdmVyc2FsIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLkVkZ2VJZCwgb3RoZXIuTWVzc2FnZSwgb3RoZXIuRmluYWxTdGF0ZSwgb3RoZXIuU3RlcE92ZXJFZGdlQ291bnQsIG90aGVyLlByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZSBJU2FyaWZOb2RlLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBFZGdlVHJhdmVyc2FsIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoRWRnZVRyYXZlcnNhbClEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgRWRnZVRyYXZlcnNhbCh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KHN0cmluZyBlZGdlSWQsIE1lc3NhZ2UgbWVzc2FnZSwgSURpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IGZpbmFsU3RhdGUsIGludCBzdGVwT3ZlckVkZ2VDb3VudCwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBFZGdlSWQgPSBlZGdlSWQ7DQogICAgICAgICAgICBpZiAobWVzc2FnZSAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIE1lc3NhZ2UgPSBuZXcgTWVzc2FnZShtZXNzYWdlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGZpbmFsU3RhdGUgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBGaW5hbFN0YXRlID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KGZpbmFsU3RhdGUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBTdGVwT3ZlckVkZ2VDb3VudCA9IHN0ZXBPdmVyRWRnZUNvdW50Ow0KICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPihwcm9wZXJ0aWVzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "0C63FEC4B6E6A25D148809073B8D2EDC",
              "algorithm": "md5"
            },
            {
              "value": "774C945B1A5F28BAE6B179CD5786310671F88B90",
              "algorithm": "sha-1"
            },
            {
              "value": "45735DC204FC45FD8C138627877C6BA7806E0CCF76236B570FBB689D66957709",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Core/ExceptionData.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBEZXNjcmliZXMgYSBjb25kaXRpb24gcmVsZXZhbnQgdG8gdGhlIHRvb2wgaXRzZWxmLCBhcyBvcHBvc2VkIHRvIGJlaW5nIHJlbGV2YW50IHRvIGEgZmlsZSBiZWluZyBhbmFseXplZCBieSB0aGUgdG9vbC4NCiAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgIHB1YmxpYyBwYXJ0aWFsIGNsYXNzIEV4Y2VwdGlvbkRhdGENCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgRXhjZXB0aW9uRGF0YSBDcmVhdGUoRXhjZXB0aW9uIGV4Y2VwdGlvbikNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBFeGNlcHRpb25EYXRhDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgS2luZCA9IGV4Y2VwdGlvbi5HZXRUeXBlKCkuTmFtZSwNCiAgICAgICAgICAgICAgICBNZXNzYWdlID0gZXhjZXB0aW9uLk1lc3NhZ2UsDQogICAgICAgICAgICAgICAgSW5uZXJFeGNlcHRpb25zID0gR2V0SW5uZXJFeGNlcHRpb25zKGV4Y2VwdGlvbiksDQogICAgICAgICAgICAgICAgU3RhY2sgPSBTdGFjay5DcmVhdGUoZXhjZXB0aW9uLlN0YWNrVHJhY2UpDQogICAgICAgICAgICB9Ow0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgSUxpc3Q8RXhjZXB0aW9uRGF0YT4gR2V0SW5uZXJFeGNlcHRpb25zKEV4Y2VwdGlvbiBleGNlcHRpb24pDQogICAgICAgIHsNCiAgICAgICAgICAgIHZhciBpbm5lckV4Y2VwdGlvbnMgPSBuZXcgTGlzdDxFeGNlcHRpb25EYXRhPigpOw0KDQogICAgICAgICAgICBJUmVhZE9ubHlDb2xsZWN0aW9uPEV4Y2VwdGlvbj4gYWdncmVnYXRlSW5uZXJFeGNlcHRpb25zID0gKGV4Y2VwdGlvbiBhcyBBZ2dyZWdhdGVFeGNlcHRpb24pPy5Jbm5lckV4Y2VwdGlvbnM7DQogICAgICAgICAgICBpZiAoYWdncmVnYXRlSW5uZXJFeGNlcHRpb25zICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoRXhjZXB0aW9uIGlubmVyRXhjZXB0aW9uIGluIGFnZ3JlZ2F0ZUlubmVyRXhjZXB0aW9ucykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlubmVyRXhjZXB0aW9ucy5BZGQoQ3JlYXRlKGlubmVyRXhjZXB0aW9uKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAoZXhjZXB0aW9uLklubmVyRXhjZXB0aW9uICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaW5uZXJFeGNlcHRpb25zLkFkZChDcmVhdGUoZXhjZXB0aW9uLklubmVyRXhjZXB0aW9uKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBpbm5lckV4Y2VwdGlvbnM7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "98F221F7BD384AB785CD8C5D15FA8699",
              "algorithm": "md5"
            },
            {
              "value": "3E6C49F782BD8228A99F157C6C895AB6D6C9D041",
              "algorithm": "sha-1"
            },
            {
              "value": "542BF9ABFE0F688592CA25CD96556CBA86B09088A497E6BE7914B03FA6EC2D1D",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ExceptionData.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgRXhjZXB0aW9uRGF0YSA6IElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8RXhjZXB0aW9uRGF0YT4gVmFsdWVDb21wYXJlciA9PiBFeGNlcHRpb25EYXRhRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhFeGNlcHRpb25EYXRhIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLkV4Y2VwdGlvbkRhdGE7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHN0cmluZyB0aGF0IGlkZW50aWZpZXMgdGhlIGtpbmQgb2YgZXhjZXB0aW9uLCBmb3IgZXhhbXBsZSwgdGhlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIG5hbWUgb2YgYW4gb2JqZWN0IHRoYXQgd2FzIHRocm93biwgb3IgdGhlIHN5bWJvbGljIG5hbWUgb2YgYSBzaWduYWwuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAia2luZCIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBLaW5kIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHBsYWluIHRleHQgbWVzc2FnZSB0aGF0IGRlc2NyaWJlcyB0aGUgZXhjZXB0aW9uLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gIm1lc3NhZ2UiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgTWVzc2FnZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIHNlcXVlbmNlIG9mIGZ1bmN0aW9uIGNhbGxzIGxlYWRpbmcgdG8gdGhlIGV4Y2VwdGlvbi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJzdGFjayIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIFN0YWNrIFN0YWNrIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiBleGNlcHRpb24gb2JqZWN0cyBlYWNoIG9mIHdoaWNoIGlzIGNvbnNpZGVyZWQgYSBjYXVzZSBvZiB0aGlzIGV4Y2VwdGlvbi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJpbm5lckV4Y2VwdGlvbnMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxFeGNlcHRpb25EYXRhPiBJbm5lckV4Y2VwdGlvbnMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkV4Y2VwdGlvbkRhdGEiIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgRXhjZXB0aW9uRGF0YSgpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkV4Y2VwdGlvbkRhdGEiIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJraW5kIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBLaW5kIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ibWVzc2FnZSI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogTWVzc2FnZSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InN0YWNrIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBTdGFjayIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImlubmVyRXhjZXB0aW9ucyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogSW5uZXJFeGNlcHRpb25zIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBFeGNlcHRpb25EYXRhKHN0cmluZyBraW5kLCBzdHJpbmcgbWVzc2FnZSwgU3RhY2sgc3RhY2ssIElFbnVtZXJhYmxlPEV4Y2VwdGlvbkRhdGE+IGlubmVyRXhjZXB0aW9ucykNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdChraW5kLCBtZXNzYWdlLCBzdGFjaywgaW5uZXJFeGNlcHRpb25zKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkV4Y2VwdGlvbkRhdGEiIC8+IGNsYXNzIGZyb20gdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdGhlciI+DQogICAgICAgIC8vLyBUaGUgaW5zdGFuY2UgZnJvbSB3aGljaCB0aGUgbmV3IGluc3RhbmNlIGlzIHRvIGJlIGluaXRpYWxpemVkLg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj4NCiAgICAgICAgLy8vIFRocm93biBpZiA8cGFyYW1yZWYgbmFtZT0ib3RoZXIiIC8+IGlzIG51bGwuDQogICAgICAgIC8vLyA8L2V4Y2VwdGlvbj4NCiAgICAgICAgcHVibGljIEV4Y2VwdGlvbkRhdGEoRXhjZXB0aW9uRGF0YSBvdGhlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yob3RoZXIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSW5pdChvdGhlci5LaW5kLCBvdGhlci5NZXNzYWdlLCBvdGhlci5TdGFjaywgb3RoZXIuSW5uZXJFeGNlcHRpb25zKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgRXhjZXB0aW9uRGF0YSBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKEV4Y2VwdGlvbkRhdGEpRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBJU2FyaWZOb2RlIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IEV4Y2VwdGlvbkRhdGEodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChzdHJpbmcga2luZCwgc3RyaW5nIG1lc3NhZ2UsIFN0YWNrIHN0YWNrLCBJRW51bWVyYWJsZTxFeGNlcHRpb25EYXRhPiBpbm5lckV4Y2VwdGlvbnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEtpbmQgPSBraW5kOw0KICAgICAgICAgICAgTWVzc2FnZSA9IG1lc3NhZ2U7DQogICAgICAgICAgICBpZiAoc3RhY2sgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBTdGFjayA9IG5ldyBTdGFjayhzdGFjayk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChpbm5lckV4Y2VwdGlvbnMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PEV4Y2VwdGlvbkRhdGE+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gaW5uZXJFeGNlcHRpb25zKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzAgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobnVsbCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChuZXcgRXhjZXB0aW9uRGF0YSh2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBJbm5lckV4Y2VwdGlvbnMgPSBkZXN0aW5hdGlvbl8wOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "77C0502EDEF463B79B01A593CEE37690",
              "algorithm": "md5"
            },
            {
              "value": "CE1389BCF5780C040DDDFD0E7D81422485413FA0",
              "algorithm": "sha-1"
            },
            {
              "value": "E5E4353400ECC577EF6B24EC5ADC2AFE78D6706EA5B178A0EEC536EB6A35AB0B",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/ExtensionMethods.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "0D511DE9067B7F00E1F0C84E1A74CD16",
              "algorithm": "md5"
            },
            {
              "value": "EC3A663747EADCE8ACFB4A9E5CD21B33B0711607",
              "algorithm": "sha-1"
            },
            {
              "value": "C9B0D5ACEFA10BEF6EA7FC19C8F24C1305A0E525D2FDF0BD4E043BE30388DC4F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileChange.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBBIGNoYW5nZSB0byBhIHNpbmdsZSBmaWxlLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgRmlsZUNoYW5nZSA6IElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8RmlsZUNoYW5nZT4gVmFsdWVDb21wYXJlciA9PiBGaWxlQ2hhbmdlRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhGaWxlQ2hhbmdlIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLkZpbGVDaGFuZ2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBUaGUgbG9jYXRpb24gb2YgdGhlIGZpbGUgdG8gY2hhbmdlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImZpbGVMb2NhdGlvbiIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIEZpbGVMb2NhdGlvbiBGaWxlTG9jYXRpb24geyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEFuIGFycmF5IG9mIHJlcGxhY2VtZW50IG9iamVjdHMsIGVhY2ggb2Ygd2hpY2ggcmVwcmVzZW50cyB0aGUgcmVwbGFjZW1lbnQgb2YgYSBzaW5nbGUgcmFuZ2Ugb2YgYnl0ZXMgaW4gYSBzaW5nbGUgZmlsZSBzcGVjaWZpZWQgYnkgJ2ZpbGVMb2NhdGlvbicuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAicmVwbGFjZW1lbnRzIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8UmVwbGFjZW1lbnQ+IFJlcGxhY2VtZW50cyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRmlsZUNoYW5nZSIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBGaWxlQ2hhbmdlKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRmlsZUNoYW5nZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImZpbGVMb2NhdGlvbiI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogRmlsZUxvY2F0aW9uIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icmVwbGFjZW1lbnRzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBSZXBsYWNlbWVudHMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgcHVibGljIEZpbGVDaGFuZ2UoRmlsZUxvY2F0aW9uIGZpbGVMb2NhdGlvbiwgSUVudW1lcmFibGU8UmVwbGFjZW1lbnQ+IHJlcGxhY2VtZW50cykNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdChmaWxlTG9jYXRpb24sIHJlcGxhY2VtZW50cyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJGaWxlQ2hhbmdlIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBGaWxlQ2hhbmdlKEZpbGVDaGFuZ2Ugb3RoZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChvdGhlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG90aGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEluaXQob3RoZXIuRmlsZUxvY2F0aW9uLCBvdGhlci5SZXBsYWNlbWVudHMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZSBJU2FyaWZOb2RlLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBGaWxlQ2hhbmdlIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoRmlsZUNoYW5nZSlEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgRmlsZUNoYW5nZSh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KEZpbGVMb2NhdGlvbiBmaWxlTG9jYXRpb24sIElFbnVtZXJhYmxlPFJlcGxhY2VtZW50PiByZXBsYWNlbWVudHMpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChmaWxlTG9jYXRpb24gIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBGaWxlTG9jYXRpb24gPSBuZXcgRmlsZUxvY2F0aW9uKGZpbGVMb2NhdGlvbik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudHMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PFJlcGxhY2VtZW50PigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8wIGluIHJlcGxhY2VtZW50cykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobmV3IFJlcGxhY2VtZW50KHZhbHVlXzApKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIFJlcGxhY2VtZW50cyA9IGRlc3RpbmF0aW9uXzA7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "CED88867ABF4FCED1CE24173AC8773D9",
              "algorithm": "md5"
            },
            {
              "value": "CEC6B4051B9950C0793AF43BA8B7F72BE702F840",
              "algorithm": "sha-1"
            },
            {
              "value": "E83777B4F44FF6D8CFD99FC711E07D425364721F8B763F02656612E1F2CFF2C7",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileData.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "4AAF3CF868AC30F7F48C41715AEC1CEF",
              "algorithm": "md5"
            },
            {
              "value": "511197EA48D482E5D5BD88921E1252E3FA124330",
              "algorithm": "sha-1"
            },
            {
              "value": "02C565158688557ECCA71B452230A0FD5BFE0FD007597F8823F4515C7DE187A2",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Core/FileData.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQp1c2luZyBTeXN0ZW0uSU87DQp1c2luZyBTeXN0ZW0uVGV4dDsNCnVzaW5nIFNhcmlmV3JpdGVycyA9IE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuV3JpdGVyczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIFJlcHJlc2VudHMgYSBzaW5nbGUgZmlsZS4gSW4gc29tZSBjYXNlcywgdGhpcyBmaWxlIG1pZ2h0IGJlIG5lc3RlZCB3aXRoaW4gYW5vdGhlciBmaWxlLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgRmlsZURhdGEgOiBJU2FyaWZOb2RlDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIEZpbGVEYXRhIENyZWF0ZSgNCiAgICAgICAgICAgIFVyaSB1cmksIA0KICAgICAgICAgICAgT3B0aW9uYWxseUVtaXR0ZWREYXRhIGRhdGFUb0luc2VydCA9IE9wdGlvbmFsbHlFbWl0dGVkRGF0YS5Ob25lLCANCiAgICAgICAgICAgIHN0cmluZyBtaW1lVHlwZSA9IG51bGwsIA0KICAgICAgICAgICAgRW5jb2RpbmcgZW5jb2RpbmcgPSBudWxsLA0KICAgICAgICAgICAgSUZpbGVTeXN0ZW0gZmlsZVN5c3RlbSA9IG51bGwpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICh1cmkgPT0gbnVsbCkgeyB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZih1cmkpKTsgfQ0KDQogICAgICAgICAgICBtaW1lVHlwZSA9IG1pbWVUeXBlID8/IFNhcmlmV3JpdGVycy5NaW1lVHlwZS5EZXRlcm1pbmVGcm9tRmlsZUV4dGVuc2lvbih1cmkpOw0KICAgICAgICAgICAgZmlsZVN5c3RlbSA9IGZpbGVTeXN0ZW0gPz8gbmV3IEZpbGVTeXN0ZW0oKTsNCg0KICAgICAgICAgICAgdmFyIGZpbGVEYXRhID0gbmV3IEZpbGVEYXRhKCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBFbmNvZGluZyA9IGVuY29kaW5nPy5XZWJOYW1lLA0KICAgICAgICAgICAgICAgIE1pbWVUeXBlID0gbWltZVR5cGUNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gcGVyc2lzdCBmaWxlIGNvbnRlbnRzIGFuZC9vciBjb21wdXRlIGZpbGUgaGFzaCBhbmQgcGVyc2lzdA0KICAgICAgICAgICAgLy8gdGhpcyBpbmZvcm1hdGlvbiB0byB0aGUgbG9nIGZpbGUuIEluIHRoZSBldmVudCB0aGF0IHRoZXJlIGlzIHNvbWUgaXNzdWUNCiAgICAgICAgICAgIC8vIGFjY2Vzc2luZyB0aGUgZmlsZSwgZm9yIGV4YW1wbGUsIGR1ZSB0byBBQ0xzIGFwcGxpZWQgdG8gYSBkaXJlY3RvcnksDQogICAgICAgICAgICAvLyB3ZSBjdXJyZW50bHkgc3dhbGxvdyB0aGVzZSBleGNlcHRpb25zIHdpdGhvdXQgcG9wdWxhdGluZyBhbnkgcmVxdWVzdGVkDQogICAgICAgICAgICAvLyBkYXRhIG9yIHB1dHRpbmcgYSBub3RpZmljYXRpb24gaW4gdGhlIGxvZyBmaWxlIHRoYXQgYSBwcm9ibGVtDQogICAgICAgICAgICAvLyBvY2N1cnJlZC4gU29tZXRoaW5nIHRvIGRpc2N1c3MgbW92aW5nIGZvcndhcmQuDQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoIXVyaS5Jc0Fic29sdXRlVXJpIHx8ICF1cmkuSXNGaWxlIHx8ICFmaWxlU3lzdGVtLkZpbGVFeGlzdHModXJpLkxvY2FsUGF0aCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZURhdGE7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgc3RyaW5nIGZpbGVQYXRoID0gdXJpLkxvY2FsUGF0aDsNCg0KICAgICAgICAgICAgICAgIGlmIChkYXRhVG9JbnNlcnQuSW5jbHVkZXMoT3B0aW9uYWxseUVtaXR0ZWREYXRhLkJpbmFyeUZpbGVzKSAmJg0KICAgICAgICAgICAgICAgICAgICBTYXJpZldyaXRlcnMuTWltZVR5cGUuSXNCaW5hcnlNaW1lVHlwZShtaW1lVHlwZSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBmaWxlRGF0YS5Db250ZW50cyA9IEdldEVuY29kZWRGaWxlQ29udGVudHMoZmlsZVN5c3RlbSwgZmlsZVBhdGgsIG1pbWVUeXBlLCBlbmNvZGluZyk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKGRhdGFUb0luc2VydC5JbmNsdWRlcyhPcHRpb25hbGx5RW1pdHRlZERhdGEuVGV4dEZpbGVzKSAmJg0KICAgICAgICAgICAgICAgICAgICBTYXJpZldyaXRlcnMuTWltZVR5cGUuSXNUZXh0dWFsTWltZVR5cGUobWltZVR5cGUpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgZmlsZURhdGEuQ29udGVudHMgPSBHZXRFbmNvZGVkRmlsZUNvbnRlbnRzKGZpbGVTeXN0ZW0sIGZpbGVQYXRoLCBtaW1lVHlwZSwgZW5jb2RpbmcpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChkYXRhVG9JbnNlcnQuSW5jbHVkZXMoT3B0aW9uYWxseUVtaXR0ZWREYXRhLkhhc2hlcykpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBIYXNoRGF0YSBoYXNoZXMgPSBIYXNoVXRpbGl0aWVzLkNvbXB1dGVIYXNoZXMoZmlsZVBhdGgpOw0KICAgICAgICAgICAgICAgICAgICBmaWxlRGF0YS5IYXNoZXMgPSBuZXcgTGlzdDxIYXNoPg0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBuZXcgSGFzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsdWUgPSBoYXNoZXMuTUQ1LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsZ29yaXRobSA9ICJtZDUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBIYXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZSA9IGhhc2hlcy5TaGExLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsZ29yaXRobSA9ICJzaGEtMSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhhc2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlID0gaGFzaGVzLlNoYTI1NiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGdvcml0aG0gPSAic2hhLTI1NiIsDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZSkgd2hlbiAoZSBpcyBJT0V4Y2VwdGlvbiB8fCBlIGlzIFVuYXV0aG9yaXplZEFjY2Vzc0V4Y2VwdGlvbikgeyB9DQoNCiAgICAgICAgICAgIHJldHVybiBmaWxlRGF0YTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIEZpbGVDb250ZW50IEdldEVuY29kZWRGaWxlQ29udGVudHMoSUZpbGVTeXN0ZW0gZmlsZVN5c3RlbSwgc3RyaW5nIGZpbGVQYXRoLCBzdHJpbmcgbWltZVR5cGUsIEVuY29kaW5nIGlucHV0RmlsZUVuY29kaW5nKQ0KICAgICAgICB7DQogICAgICAgICAgICB2YXIgZmlsZUNvbnRlbnQgPSBuZXcgRmlsZUNvbnRlbnQoKTsNCiAgICAgICAgICAgIGJ5dGVbXSBmaWxlQ29udGVudHMgPSBmaWxlU3lzdGVtLlJlYWRBbGxCeXRlcyhmaWxlUGF0aCk7DQoNCiAgICAgICAgICAgIGlmIChTYXJpZldyaXRlcnMuTWltZVR5cGUuSXNCaW5hcnlNaW1lVHlwZShtaW1lVHlwZSkgfHwgaW5wdXRGaWxlRW5jb2RpbmcgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmaWxlQ29udGVudC5CaW5hcnkgPSBDb252ZXJ0LlRvQmFzZTY0U3RyaW5nKGZpbGVDb250ZW50cyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZmlsZUNvbnRlbnQuVGV4dCA9IGlucHV0RmlsZUVuY29kaW5nLkdldFN0cmluZyhmaWxlQ29udGVudHMpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gZmlsZUNvbnRlbnQ7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "DA29519F2A960DBB4CC7636FE51B95DA",
              "algorithm": "md5"
            },
            {
              "value": "6D12CB255152492EFC4F8C9AFF181AD20D24D5F8",
              "algorithm": "sha-1"
            },
            {
              "value": "21ED79396DC8189853963CCC6D0561E5ACEE86B26E946B76FD81703A060081F1",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileDataEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "320D00D3B17C65887C4589EC730B8262",
              "algorithm": "md5"
            },
            {
              "value": "1E58F913ED3849C04CAEE04DB221A09B64AB9E94",
              "algorithm": "sha-1"
            },
            {
              "value": "233EF87F2A9939F37F1802902F5245DD55EAE2B8516667B6EF11036E79B99E56",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileLocation.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBTcGVjaWZpZXMgdGhlIGxvY2F0aW9uIG9mIGEgZmlsZS4NCiAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgIFtEYXRhQ29udHJhY3RdDQogICAgW0dlbmVyYXRlZENvZGUoIk1pY3Jvc29mdC5Kc29uLlNjaGVtYS5Ub0RvdE5ldCIsICIwLjU2LjAuMCIpXQ0KICAgIHB1YmxpYyBwYXJ0aWFsIGNsYXNzIEZpbGVMb2NhdGlvbiA6IElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8RmlsZUxvY2F0aW9uPiBWYWx1ZUNvbXBhcmVyID0+IEZpbGVMb2NhdGlvbkVxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoRmlsZUxvY2F0aW9uIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLkZpbGVMb2NhdGlvbjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgc3RyaW5nIGNvbnRhaW5pbmcgYSB2YWxpZCByZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkkuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAidXJpIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgVXJpIFVyaSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBzdHJpbmcgd2hpY2ggaW5kaXJlY3RseSBzcGVjaWZpZXMgdGhlIGFic29sdXRlIFVSSSB3aXRoIHJlc3BlY3QgdG8gd2hpY2ggYSByZWxhdGl2ZSBVUkkgaW4gdGhlICJ1cmkiIHByb3BlcnR5IGlzIGludGVycHJldGVkLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInVyaUJhc2VJZCIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBVcmlCYXNlSWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkZpbGVMb2NhdGlvbiIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBGaWxlTG9jYXRpb24oKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJGaWxlTG9jYXRpb24iIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJ1cmkiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFVyaSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InVyaUJhc2VJZCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogVXJpQmFzZUlkIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBGaWxlTG9jYXRpb24oVXJpIHVyaSwgc3RyaW5nIHVyaUJhc2VJZCkNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdCh1cmksIHVyaUJhc2VJZCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJGaWxlTG9jYXRpb24iIC8+IGNsYXNzIGZyb20gdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdGhlciI+DQogICAgICAgIC8vLyBUaGUgaW5zdGFuY2UgZnJvbSB3aGljaCB0aGUgbmV3IGluc3RhbmNlIGlzIHRvIGJlIGluaXRpYWxpemVkLg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj4NCiAgICAgICAgLy8vIFRocm93biBpZiA8cGFyYW1yZWYgbmFtZT0ib3RoZXIiIC8+IGlzIG51bGwuDQogICAgICAgIC8vLyA8L2V4Y2VwdGlvbj4NCiAgICAgICAgcHVibGljIEZpbGVMb2NhdGlvbihGaWxlTG9jYXRpb24gb3RoZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChvdGhlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG90aGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEluaXQob3RoZXIuVXJpLCBvdGhlci5VcmlCYXNlSWQpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZSBJU2FyaWZOb2RlLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBGaWxlTG9jYXRpb24gRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIChGaWxlTG9jYXRpb24pRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBJU2FyaWZOb2RlIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IEZpbGVMb2NhdGlvbih0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KFVyaSB1cmksIHN0cmluZyB1cmlCYXNlSWQpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICh1cmkgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBVcmkgPSBuZXcgVXJpKHVyaS5PcmlnaW5hbFN0cmluZywgdXJpLklzQWJzb2x1dGVVcmkgPyBVcmlLaW5kLkFic29sdXRlIDogVXJpS2luZC5SZWxhdGl2ZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFVyaUJhc2VJZCA9IHVyaUJhc2VJZDsNCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "3C2862B14F46CCF251A450B8123463CC",
              "algorithm": "md5"
            },
            {
              "value": "AA72A279EA09E4BA957366811425A124E0AFE179",
              "algorithm": "sha-1"
            },
            {
              "value": "68EFE257216B09F1C1CE01702E5F319949E2748F3CBA93A8B27894511C0FE6C5",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Core/FileLocation.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgRmlsZUxvY2F0aW9uDQogICAgew0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBdHRlbXB0IHRvIHJlY29uc3RydWN0IGEgVVJJLCBpZiBhcHByb3ByaWF0ZSwgdXNpbmcgUnVuIGluc3RhbmNlIA0KICAgICAgICAvLy8gb3JpZ2luYWxVcmlCYXNlSWQgYW5kIHVyaUJhc2VJZCBwcm9wZXJ0aWVzLiBJZiB0aGlzIG1ldGhvZCBjYW5ub3QNCiAgICAgICAgLy8vIHN1Y2Nlc3NmdWxseSByZWNvbnN0aXR1dGUgYW4gYWJzb2x1dGUgVVJJLCBpdCB3aWxsIHJldHVybiBmYWxzZQ0KICAgICAgICAvLy8gYW5kIHBvcHVsYXRlICdyZXNvbHZlZFVyaScgd2l0aCBudWxsLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImZpbGVMb2NhdGlvbiI+VGhlIGZpbGVMb2NhdGlvIGluc3RhbmNlIGZyb20gd2hpY2ggYW4gYWJzb2x1dGUgVVJJIHNob3VsZCBiZSByZWNvbnN0cnVjdGVkLCBpZiBwb3NzaWJsZS48L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im9yaWdpbmFsVXJpQmFzZUlkcyI+VGhlIG9yaWdpbmFsIHVyaSBiYXNlIGlkIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHRvb2wgcnVuLjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icmVzb2x2ZWRVcmkiPlRoZSByZWNvbnN0cnVjdGVkIGFic29sdXRlIFVSSSBvciBudWxsIChpZiBhbiBhYnNvbHV0ZSBVUkkgY2Fubm90IGJlIHJlY29uc3RydWN0ZWQpLjwvcGFyYW0+DQogICAgICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+DQogICAgICAgIHB1YmxpYyBib29sIFRyeVJlY29uc3RydWN0QWJzb2x1dGVVcmkoSURpY3Rpb25hcnk8c3RyaW5nLCBVcmk+IG9yaWdpbmFsVXJpQmFzZUlkcywgb3V0IFVyaSByZXNvbHZlZFVyaSkNCiAgICAgICAgew0KICAgICAgICAgICAgcmVzb2x2ZWRVcmkgPSB0aGlzLlVyaS5Jc0Fic29sdXRlVXJpID8gdGhpcy5VcmkgOiBudWxsOw0KDQogICAgICAgICAgICAvLyBXZSBjYW4ndCByZXN0b3JlIGFueSBhYnNvbHV0ZSBVUklzIHVubGVzcyBzb21lb25lIGhhcw0KICAgICAgICAgICAgLy8gZGVjb25zdHJ1Y3RlZCB0aGVtIHVzaW5nIHVyaUJhc2VJZCArIG9yaWdpbmFsVXJpQmFzZUlkcw0KICAgICAgICAgICAgaWYgKG9yaWdpbmFsVXJpQmFzZUlkcyA9PSBudWxsKSB7IHJldHVybiB0aGlzLlVyaS5Jc0Fic29sdXRlVXJpOyB9DQoNCiAgICAgICAgICAgIHJlc29sdmVkVXJpID0gdGhpcy5Vcmk7DQoNCiAgICAgICAgICAgIGlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkodGhpcy5VcmlCYXNlSWQpICYmDQogICAgICAgICAgICAgICAgIXRoaXMuVXJpLklzQWJzb2x1dGVVcmkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsVXJpQmFzZUlkcy5UcnlHZXRWYWx1ZSh0aGlzLlVyaUJhc2VJZCwgb3V0IFVyaSBvcmlnaW5hbFVyaUJhc2VJZCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXNvbHZlZFVyaSA9IG5ldyBVcmkob3JpZ2luYWxVcmlCYXNlSWQsIHJlc29sdmVkVXJpLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZW4ndCBhYmxlIHRvIHJlY29uc3RydWN0IGEgVVJJIChvciByZXNvbHZlZFVyaSB3YXNuJ3QgYWxyZWFkeSANCiAgICAgICAgICAgIC8vIGFuIGFic29sdXRlIFVSSSBvbiBpbnB1dCksIGluaXRpYWxpemUgb3V0IHBhcmFtZXRlciB0byBudWxsOw0KICAgICAgICAgICAgaWYgKCFyZXNvbHZlZFVyaS5Jc0Fic29sdXRlVXJpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJlc29sdmVkVXJpID0gbnVsbDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkVXJpICE9IG51bGw7DQogICAgICAgIH0NCiAgICAgICAgcHVibGljIHN0YXRpYyBGaWxlTG9jYXRpb24gQ3JlYXRlRnJvbUZpbGVzRGljdGlvbmFyeUtleShzdHJpbmcga2V5KQ0KICAgICAgICB7DQogICAgICAgICAgICBzdHJpbmcgdXJpQmFzZUlkID0gbnVsbDsNCg0KICAgICAgICAgICAgaWYgKGtleS5TdGFydHNXaXRoKCIjIikpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nW10gdG9rZW5zID0ga2V5LlNwbGl0KG5ld1tdIHsgJyMnIH0sIFN0cmluZ1NwbGl0T3B0aW9ucy5SZW1vdmVFbXB0eUVudHJpZXMpOw0KICAgICAgICAgICAgICAgIHVyaUJhc2VJZCA9IHRva2Vuc1swXTsNCg0KICAgICAgICAgICAgICAgIC8vICsyIHRvIHNraXAgcGFzdCBsZWFkaW5nIGFuZCB0cmFpbGluZyBvY3RvdGhvcnBlcw0KICAgICAgICAgICAgICAgIGtleSA9IGtleS5TdWJzdHJpbmcodXJpQmFzZUlkLkxlbmd0aCArIDIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gbmV3IEZpbGVMb2NhdGlvbigpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgIFVyaSA9IG5ldyBVcmkoa2V5LCBVcmlLaW5kLlJlbGF0aXZlT3JBYnNvbHV0ZSksDQogICAgICAgICAgICAgICAgIFVyaUJhc2VJZCA9IHVyaUJhc2VJZA0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "FBF1A444DECE2BBB418676964EE2858E",
              "algorithm": "md5"
            },
            {
              "value": "43BB2601C5B6F8889E749955AE62FB2ED96B8717",
              "algorithm": "sha-1"
            },
            {
              "value": "5A15875080537A619E423FDCB89E7F618C124DD5476E0AA41205246F58C6BCBA",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/FileRegionsCache.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "B3617B1B20FFA43887A19417E632D728",
              "algorithm": "md5"
            },
            {
              "value": "8585D56E82EB1A3C9C563F1907E0A5DB22B31C5A",
              "algorithm": "sha-1"
            },
            {
              "value": "0CE142F751CDB256928C9A411D8185BA65391F1E3910A3D5CAFB42B5D637B99B",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Fix.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBBIHByb3Bvc2VkIGZpeCBmb3IgdGhlIHByb2JsZW0gcmVwcmVzZW50ZWQgYnkgYSByZXN1bHQgb2JqZWN0LiBBIGZpeCBzcGVjaWZpZXMgYSBzZXQgb2YgZmlsZSB0byBtb2RpZnkuIEZvciBlYWNoIGZpbGUsIGl0IHNwZWNpZmllcyBhIHNldCBvZiBieXRlcyB0byByZW1vdmUsIGFuZCBwcm92aWRlcyBhIHNldCBvZiBuZXcgYnl0ZXMgdG8gcmVwbGFjZSB0aGVtLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgRml4IDogSVNhcmlmTm9kZQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBJRXF1YWxpdHlDb21wYXJlcjxGaXg+IFZhbHVlQ29tcGFyZXIgPT4gRml4RXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhGaXggb3RoZXIpID0+IFZhbHVlQ29tcGFyZXIuRXF1YWxzKHRoaXMsIG90aGVyKTsNCiAgICAgICAgcHVibGljIGludCBWYWx1ZUdldEhhc2hDb2RlKCkgPT4gVmFsdWVDb21wYXJlci5HZXRIYXNoQ29kZSh0aGlzKTsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBvYmplY3QgaW1wbGVtZW50aW5nIDxzZWUgY3JlZj0iSVNhcmlmTm9kZSIgLz4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTYXJpZk5vZGVLaW5kIFNhcmlmTm9kZUtpbmQNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFNhcmlmTm9kZUtpbmQuRml4Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBtZXNzYWdlIHRoYXQgZGVzY3JpYmVzIHRoZSBwcm9wb3NlZCBmaXgsIGVuYWJsaW5nIHZpZXdlcnMgdG8gcHJlc2VudCB0aGUgcHJvcG9zZWQgY2hhbmdlIHRvIGFuIGVuZCB1c2VyLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImRlc2NyaXB0aW9uIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgTWVzc2FnZSBEZXNjcmlwdGlvbiB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gT25lIG9yIG1vcmUgZmlsZSBjaGFuZ2VzIHRoYXQgY29tcHJpc2UgYSBmaXggZm9yIGEgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImZpbGVDaGFuZ2VzIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8RmlsZUNoYW5nZT4gRmlsZUNoYW5nZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkZpeCIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBGaXgoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJGaXgiIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJkZXNjcmlwdGlvbiI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogRGVzY3JpcHRpb24iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJmaWxlQ2hhbmdlcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogRmlsZUNoYW5nZXMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgcHVibGljIEZpeChNZXNzYWdlIGRlc2NyaXB0aW9uLCBJRW51bWVyYWJsZTxGaWxlQ2hhbmdlPiBmaWxlQ2hhbmdlcykNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdChkZXNjcmlwdGlvbiwgZmlsZUNoYW5nZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRml4IiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBGaXgoRml4IG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLkRlc2NyaXB0aW9uLCBvdGhlci5GaWxlQ2hhbmdlcyk7DQogICAgICAgIH0NCg0KICAgICAgICBJU2FyaWZOb2RlIElTYXJpZk5vZGUuRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIERlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhpcyBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIEZpeCBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKEZpeClEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgRml4KHRoaXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSB2b2lkIEluaXQoTWVzc2FnZSBkZXNjcmlwdGlvbiwgSUVudW1lcmFibGU8RmlsZUNoYW5nZT4gZmlsZUNoYW5nZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbiAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0gbmV3IE1lc3NhZ2UoZGVzY3JpcHRpb24pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoZmlsZUNoYW5nZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PEZpbGVDaGFuZ2U+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gZmlsZUNoYW5nZXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG5ldyBGaWxlQ2hhbmdlKHZhbHVlXzApKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIEZpbGVDaGFuZ2VzID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "D39862C9E21E601706D9A30EEBD951EB",
              "algorithm": "md5"
            },
            {
              "value": "3CEE49CFF9C0118F41A07F7935B4B8410A3A0420",
              "algorithm": "sha-1"
            },
            {
              "value": "54DFB5A61647923CC3F21093A891426DCA6F22424355CA797CAB1813D552254F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Graph.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "7667FE05490023183FCA84B295C6FDE4",
              "algorithm": "md5"
            },
            {
              "value": "7489A0F9246610BC9359F62A13CAA9C44825EBD4",
              "algorithm": "sha-1"
            },
            {
              "value": "4C20A65274FE53B55E24A4FBF5872DDD42B51728FA5C2E7F3D4C19DB2E6A43E6",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUmVhZGVyczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIERlZmluZXMgbWV0aG9kcyB0byBzdXBwb3J0IHRoZSBjb21wYXJpc29uIG9mIG9iamVjdHMgb2YgdHlwZSBHcmFwaCBmb3IgZXF1YWxpdHkuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgaW50ZXJuYWwgc2VhbGVkIGNsYXNzIEdyYXBoRXF1YWxpdHlDb21wYXJlciA6IElFcXVhbGl0eUNvbXBhcmVyPEdyYXBoPg0KICAgIHsNCiAgICAgICAgaW50ZXJuYWwgc3RhdGljIHJlYWRvbmx5IEdyYXBoRXF1YWxpdHlDb21wYXJlciBJbnN0YW5jZSA9IG5ldyBHcmFwaEVxdWFsaXR5Q29tcGFyZXIoKTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBFcXVhbHMoR3JhcGggbGVmdCwgR3JhcGggcmlnaHQpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMobGVmdCwgcmlnaHQpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoUmVmZXJlbmNlRXF1YWxzKGxlZnQsIG51bGwpIHx8IFJlZmVyZW5jZUVxdWFscyhyaWdodCwgbnVsbCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobGVmdC5JZCAhPSByaWdodC5JZCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghTWVzc2FnZS5WYWx1ZUNvbXBhcmVyLkVxdWFscyhsZWZ0LkRlc2NyaXB0aW9uLCByaWdodC5EZXNjcmlwdGlvbikpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5Ob2RlcywgcmlnaHQuTm9kZXMpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsZWZ0Lk5vZGVzID09IG51bGwgfHwgcmlnaHQuTm9kZXMgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5Ob2Rlcy5Db3VudCAhPSByaWdodC5Ob2Rlcy5Db3VudCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3IgKGludCBpbmRleF8wID0gMDsgaW5kZXhfMCA8IGxlZnQuTm9kZXMuQ291bnQ7ICsraW5kZXhfMCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICghTm9kZS5WYWx1ZUNvbXBhcmVyLkVxdWFscyhsZWZ0Lk5vZGVzW2luZGV4XzBdLCByaWdodC5Ob2Rlc1tpbmRleF8wXSkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKGxlZnQuRWRnZXMsIHJpZ2h0LkVkZ2VzKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5FZGdlcyA9PSBudWxsIHx8IHJpZ2h0LkVkZ2VzID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKGxlZnQuRWRnZXMuQ291bnQgIT0gcmlnaHQuRWRnZXMuQ291bnQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgZm9yIChpbnQgaW5kZXhfMSA9IDA7IGluZGV4XzEgPCBsZWZ0LkVkZ2VzLkNvdW50OyArK2luZGV4XzEpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAoIUVkZ2UuVmFsdWVDb21wYXJlci5FcXVhbHMobGVmdC5FZGdlc1tpbmRleF8xXSwgcmlnaHQuRWRnZXNbaW5kZXhfMV0pKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhsZWZ0LlByb3BlcnRpZXMsIHJpZ2h0LlByb3BlcnRpZXMpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LlByb3BlcnRpZXMgPT0gbnVsbCB8fCByaWdodC5Qcm9wZXJ0aWVzID09IG51bGwgfHwgbGVmdC5Qcm9wZXJ0aWVzLkNvdW50ICE9IHJpZ2h0LlByb3BlcnRpZXMuQ291bnQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gbGVmdC5Qcm9wZXJ0aWVzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgU2VyaWFsaXplZFByb3BlcnR5SW5mbyB2YWx1ZV8xOw0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJpZ2h0LlByb3BlcnRpZXMuVHJ5R2V0VmFsdWUodmFsdWVfMC5LZXksIG91dCB2YWx1ZV8xKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmplY3QuRXF1YWxzKHZhbHVlXzAuVmFsdWUsIHZhbHVlXzEpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGludCBHZXRIYXNoQ29kZShHcmFwaCBvYmopDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMob2JqLCBudWxsKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaW50IHJlc3VsdCA9IDE3Ow0KICAgICAgICAgICAgdW5jaGVja2VkDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG9iai5JZCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5JZC5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouRGVzY3JpcHRpb24gIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyBvYmouRGVzY3JpcHRpb24uVmFsdWVHZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouTm9kZXMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8yIGluIG9iai5Ob2RlcykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICogMzE7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMiAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyB2YWx1ZV8yLlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouRWRnZXMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8zIGluIG9iai5FZGdlcykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICogMzE7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMyAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyB2YWx1ZV8zLlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouUHJvcGVydGllcyAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHhvciBmb3IgZGljdGlvbmFyaWVzIHRvIGJlIG9yZGVyLWluZGVwZW5kZW50Lg0KICAgICAgICAgICAgICAgICAgICBpbnQgeG9yXzAgPSAwOw0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfNCBpbiBvYmouUHJvcGVydGllcykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzAgXj0gdmFsdWVfNC5LZXkuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV80LlZhbHVlICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzAgXj0gdmFsdWVfNC5WYWx1ZS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIHhvcl8wOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "DAD93F85BFF7FD50C365E9F6588B3B02",
              "algorithm": "md5"
            },
            {
              "value": "46735D446A156A1A96251C6759932E5C0662E5BC",
              "algorithm": "sha-1"
            },
            {
              "value": "33168551F6E4C147517F367BB50DC013AC5016F270659134397941DF58B6B3D7",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphTraversal.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "1A8F58A3C41689D3C9FA97EDF43D0605",
              "algorithm": "md5"
            },
            {
              "value": "4D6B1633A9FEC1EC85CCE950F1FF0582D23A961E",
              "algorithm": "sha-1"
            },
            {
              "value": "90B96FBC44AAED062F8BEDBB915976DC160A83E8301E0A9DC4E582A29AD94F27",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphTraversalEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUmVhZGVyczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIERlZmluZXMgbWV0aG9kcyB0byBzdXBwb3J0IHRoZSBjb21wYXJpc29uIG9mIG9iamVjdHMgb2YgdHlwZSBHcmFwaFRyYXZlcnNhbCBmb3IgZXF1YWxpdHkuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgaW50ZXJuYWwgc2VhbGVkIGNsYXNzIEdyYXBoVHJhdmVyc2FsRXF1YWxpdHlDb21wYXJlciA6IElFcXVhbGl0eUNvbXBhcmVyPEdyYXBoVHJhdmVyc2FsPg0KICAgIHsNCiAgICAgICAgaW50ZXJuYWwgc3RhdGljIHJlYWRvbmx5IEdyYXBoVHJhdmVyc2FsRXF1YWxpdHlDb21wYXJlciBJbnN0YW5jZSA9IG5ldyBHcmFwaFRyYXZlcnNhbEVxdWFsaXR5Q29tcGFyZXIoKTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBFcXVhbHMoR3JhcGhUcmF2ZXJzYWwgbGVmdCwgR3JhcGhUcmF2ZXJzYWwgcmlnaHQpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMobGVmdCwgcmlnaHQpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoUmVmZXJlbmNlRXF1YWxzKGxlZnQsIG51bGwpIHx8IFJlZmVyZW5jZUVxdWFscyhyaWdodCwgbnVsbCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobGVmdC5HcmFwaElkICE9IHJpZ2h0LkdyYXBoSWQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIU1lc3NhZ2UuVmFsdWVDb21wYXJlci5FcXVhbHMobGVmdC5EZXNjcmlwdGlvbiwgcmlnaHQuRGVzY3JpcHRpb24pKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKGxlZnQuSW5pdGlhbFN0YXRlLCByaWdodC5Jbml0aWFsU3RhdGUpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LkluaXRpYWxTdGF0ZSA9PSBudWxsIHx8IHJpZ2h0LkluaXRpYWxTdGF0ZSA9PSBudWxsIHx8IGxlZnQuSW5pdGlhbFN0YXRlLkNvdW50ICE9IHJpZ2h0LkluaXRpYWxTdGF0ZS5Db3VudCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMCBpbiBsZWZ0LkluaXRpYWxTdGF0ZSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHN0cmluZyB2YWx1ZV8xOw0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJpZ2h0LkluaXRpYWxTdGF0ZS5UcnlHZXRWYWx1ZSh2YWx1ZV8wLktleSwgb3V0IHZhbHVlXzEpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMC5WYWx1ZSAhPSB2YWx1ZV8xKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhsZWZ0LkVkZ2VUcmF2ZXJzYWxzLCByaWdodC5FZGdlVHJhdmVyc2FscykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuRWRnZVRyYXZlcnNhbHMgPT0gbnVsbCB8fCByaWdodC5FZGdlVHJhdmVyc2FscyA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LkVkZ2VUcmF2ZXJzYWxzLkNvdW50ICE9IHJpZ2h0LkVkZ2VUcmF2ZXJzYWxzLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvciAoaW50IGluZGV4XzAgPSAwOyBpbmRleF8wIDwgbGVmdC5FZGdlVHJhdmVyc2Fscy5Db3VudDsgKytpbmRleF8wKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFFZGdlVHJhdmVyc2FsLlZhbHVlQ29tcGFyZXIuRXF1YWxzKGxlZnQuRWRnZVRyYXZlcnNhbHNbaW5kZXhfMF0sIHJpZ2h0LkVkZ2VUcmF2ZXJzYWxzW2luZGV4XzBdKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5Qcm9wZXJ0aWVzLCByaWdodC5Qcm9wZXJ0aWVzKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5Qcm9wZXJ0aWVzID09IG51bGwgfHwgcmlnaHQuUHJvcGVydGllcyA9PSBudWxsIHx8IGxlZnQuUHJvcGVydGllcy5Db3VudCAhPSByaWdodC5Qcm9wZXJ0aWVzLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8yIGluIGxlZnQuUHJvcGVydGllcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8gdmFsdWVfMzsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyaWdodC5Qcm9wZXJ0aWVzLlRyeUdldFZhbHVlKHZhbHVlXzIuS2V5LCBvdXQgdmFsdWVfMykpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0LkVxdWFscyh2YWx1ZV8yLlZhbHVlLCB2YWx1ZV8zKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBpbnQgR2V0SGFzaENvZGUoR3JhcGhUcmF2ZXJzYWwgb2JqKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoUmVmZXJlbmNlRXF1YWxzKG9iaiwgbnVsbCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGludCByZXN1bHQgPSAxNzsNCiAgICAgICAgICAgIHVuY2hlY2tlZA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChvYmouR3JhcGhJZCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5HcmFwaElkLkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKG9iai5EZXNjcmlwdGlvbiAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5EZXNjcmlwdGlvbi5WYWx1ZUdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKG9iai5Jbml0aWFsU3RhdGUgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIC8vIFVzZSB4b3IgZm9yIGRpY3Rpb25hcmllcyB0byBiZSBvcmRlci1pbmRlcGVuZGVudC4NCiAgICAgICAgICAgICAgICAgICAgaW50IHhvcl8wID0gMDsNCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzQgaW4gb2JqLkluaXRpYWxTdGF0ZSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzAgXj0gdmFsdWVfNC5LZXkuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV80LlZhbHVlICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzAgXj0gdmFsdWVfNC5WYWx1ZS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIHhvcl8wOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouRWRnZVRyYXZlcnNhbHMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV81IGluIG9iai5FZGdlVHJhdmVyc2FscykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICogMzE7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfNSAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyB2YWx1ZV81LlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouUHJvcGVydGllcyAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHhvciBmb3IgZGljdGlvbmFyaWVzIHRvIGJlIG9yZGVyLWluZGVwZW5kZW50Lg0KICAgICAgICAgICAgICAgICAgICBpbnQgeG9yXzEgPSAwOw0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfNiBpbiBvYmouUHJvcGVydGllcykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzEgXj0gdmFsdWVfNi5LZXkuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV82LlZhbHVlICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzEgXj0gdmFsdWVfNi5WYWx1ZS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIHhvcl8xOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "1F97D4CAB80D4FD51268CD0EAA519716",
              "algorithm": "md5"
            },
            {
              "value": "6B4E8C65424B839DC7447ACBCE9EDB2C0F9B9381",
              "algorithm": "sha-1"
            },
            {
              "value": "174B9FB99C831201C3FE9DCE518246B0B269F90108334291B14820EE7CBC1E76",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/HashData.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZg0Kew0KICAgIHB1YmxpYyBjbGFzcyBIYXNoRGF0YQ0KICAgIHsNCiAgICAgICAgcHVibGljIEhhc2hEYXRhKHN0cmluZyBtZDUsIHN0cmluZyBzaGExLCBzdHJpbmcgc2hhMjU2KQ0KICAgICAgICB7DQogICAgICAgICAgICBNRDUgPSBtZDU7DQogICAgICAgICAgICBTaGExID0gc2hhMTsNCiAgICAgICAgICAgIFNoYTI1NiA9IHNoYTI1NjsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdHJpbmcgTUQ1IHsgZ2V0OyB9DQoNCiAgICAgICAgcHVibGljIHN0cmluZyBTaGExIHsgZ2V0OyB9DQoNCiAgICAgICAgcHVibGljIHN0cmluZyBTaGEyNTYgeyBnZXQ7IH0NCg0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "8AE9735908187B129F32D064E180FDEC",
              "algorithm": "md5"
            },
            {
              "value": "B138469380253478B851532B25383CF48AC8F5EE",
              "algorithm": "sha-1"
            },
            {
              "value": "4111A595C3044B7C6415250D61BEB7B173D4456FF0D6706D44E291E60D80C4FB",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/HashUtilities.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzOw0KdXNpbmcgU3lzdGVtLklPOw0KdXNpbmcgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeTsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIEhhc2hVdGlsaXRpZXMNCiAgICB7DQogICAgICAgIFtTdXBwcmVzc01lc3NhZ2UoIk1pY3Jvc29mdC5TZWN1cml0eS5DcnlwdG9ncmFwaHkiLCAiQ0E1MzU0OlNIQTFDYW5ub3RCZVVzZWQiKV0NCiAgICAgICAgW1N1cHByZXNzTWVzc2FnZSgiTWljcm9zb2Z0LlNlY3VyaXR5LkNyeXB0b2dyYXBoeSIsICJDQTUzNTA6TUQ1Q2Fubm90QmVVc2VkIildDQogICAgICAgIHB1YmxpYyBzdGF0aWMgSGFzaERhdGEgQ29tcHV0ZUhhc2hlcyhzdHJpbmcgZmlsZU5hbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHVzaW5nIChGaWxlU3RyZWFtIHN0cmVhbSA9IEZpbGUuT3BlblJlYWQoZmlsZU5hbWUpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdXNpbmcgKHZhciBidWZmZXJlZFN0cmVhbSA9IG5ldyBCdWZmZXJlZFN0cmVhbShzdHJlYW0sIDEwMjQgKiAzMikpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBtZDUsIHNoYTEsIHNoYTI1NjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVbXSBjaGVja3N1bTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgdXNpbmcgKHZhciBtZDVDbmcgPSBNRDUuQ3JlYXRlKCkpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tzdW0gPSBtZDVDbmcuQ29tcHV0ZUhhc2goYnVmZmVyZWRTdHJlYW0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kNSA9IEJpdENvbnZlcnRlci5Ub1N0cmluZyhjaGVja3N1bSkuUmVwbGFjZSgiLSIsIHN0cmluZy5FbXB0eSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5TZWVrKDAsIFNlZWtPcmlnaW4uQmVnaW4pOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyZWRTdHJlYW0uU2VlaygwLCBTZWVrT3JpZ2luLkJlZ2luKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgdXNpbmcgKHZhciBzaGExQ25nID0gU0hBMS5DcmVhdGUoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja3N1bSA9IHNoYTFDbmcuQ29tcHV0ZUhhc2goYnVmZmVyZWRTdHJlYW0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYTEgPSBCaXRDb252ZXJ0ZXIuVG9TdHJpbmcoY2hlY2tzdW0pLlJlcGxhY2UoIi0iLCBzdHJpbmcuRW1wdHkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uU2VlaygwLCBTZWVrT3JpZ2luLkJlZ2luKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcmVkU3RyZWFtLlNlZWsoMCwgU2Vla09yaWdpbi5CZWdpbik7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHVzaW5nICh2YXIgc2hhMjU2Q25nID0gU0hBMjU2LkNyZWF0ZSgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrc3VtID0gc2hhMjU2Q25nLkNvbXB1dGVIYXNoKGJ1ZmZlcmVkU3RyZWFtKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGEyNTYgPSBCaXRDb252ZXJ0ZXIuVG9TdHJpbmcoY2hlY2tzdW0pLlJlcGxhY2UoIi0iLCBzdHJpbmcuRW1wdHkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEhhc2hEYXRhKG1kNSwgc2hhMSwgc2hhMjU2KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChJT0V4Y2VwdGlvbikgeyB9DQogICAgICAgICAgICBjYXRjaCAoVW5hdXRob3JpemVkQWNjZXNzRXhjZXB0aW9uKSB7IH0NCiAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgQ29tcHV0ZVNoYTI1Nkhhc2goc3RyaW5nIGZpbGVOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBzdHJpbmcgc2hhMjU2SGFzaCA9IG51bGw7DQoNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHVzaW5nIChGaWxlU3RyZWFtIHN0cmVhbSA9IEZpbGUuT3BlblJlYWQoZmlsZU5hbWUpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdXNpbmcgKHZhciBidWZmZXJlZFN0cmVhbSA9IG5ldyBCdWZmZXJlZFN0cmVhbShzdHJlYW0sIDEwMjQgKiAzMikpDQogICAgICAgICAgICAgICAgICAgIHsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgdXNpbmcgKHZhciBzaGEgPSBTSEEyNTYuQ3JlYXRlKCkpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZVtdIGNoZWNrc3VtID0gc2hhLkNvbXB1dGVIYXNoKGJ1ZmZlcmVkU3RyZWFtKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGEyNTZIYXNoID0gQml0Q29udmVydGVyLlRvU3RyaW5nKGNoZWNrc3VtKS5SZXBsYWNlKCItIiwgc3RyaW5nLkVtcHR5KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChJT0V4Y2VwdGlvbikgeyB9DQogICAgICAgICAgICBjYXRjaCAoVW5hdXRob3JpemVkQWNjZXNzRXhjZXB0aW9uKSB7IH0NCiAgICAgICAgICAgIHJldHVybiBzaGEyNTZIYXNoOw0KICAgICAgICB9DQoNCiAgICAgICAgW1N1cHByZXNzTWVzc2FnZSgiTWljcm9zb2Z0LlNlY3VyaXR5LkNyeXB0b2dyYXBoeSIsICJDQTUzNTQ6U0hBMUNhbm5vdEJlVXNlZCIpXQ0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBDb21wdXRlU2hhMUhhc2goc3RyaW5nIGZpbGVOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBzdHJpbmcgc2hhMSA9IG51bGw7DQoNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHVzaW5nIChGaWxlU3RyZWFtIHN0cmVhbSA9IEZpbGUuT3BlblJlYWQoZmlsZU5hbWUpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdXNpbmcgKHZhciBidWZmZXJlZFN0cmVhbSA9IG5ldyBCdWZmZXJlZFN0cmVhbShzdHJlYW0sIDEwMjQgKiAzMikpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVzaW5nICh2YXIgc2hhID0gU0hBMS5DcmVhdGUoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlW10gY2hlY2tzdW0gPSBzaGEuQ29tcHV0ZUhhc2goYnVmZmVyZWRTdHJlYW0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYTEgPSBCaXRDb252ZXJ0ZXIuVG9TdHJpbmcoY2hlY2tzdW0pLlJlcGxhY2UoIi0iLCBzdHJpbmcuRW1wdHkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKElPRXhjZXB0aW9uKSB7IH0NCiAgICAgICAgICAgIGNhdGNoIChVbmF1dGhvcml6ZWRBY2Nlc3NFeGNlcHRpb24pIHsgfQ0KICAgICAgICAgICAgcmV0dXJuIHNoYTE7DQogICAgICAgIH0NCg0KICAgICAgICBbU3VwcHJlc3NNZXNzYWdlKCJNaWNyb3NvZnQuU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5IiwgIkNBNTM1MDpNRDVDYW5ub3RCZVVzZWQiKV0NCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgQ29tcHV0ZU1ENUhhc2goc3RyaW5nIGZpbGVOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBzdHJpbmcgbWQ1ID0gbnVsbDsNCg0KICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdXNpbmcgKEZpbGVTdHJlYW0gc3RyZWFtID0gRmlsZS5PcGVuUmVhZChmaWxlTmFtZSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB1c2luZyAodmFyIGJ1ZmZlcmVkU3RyZWFtID0gbmV3IEJ1ZmZlcmVkU3RyZWFtKHN0cmVhbSwgMTAyNCAqIDMyKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgdXNpbmcgKHZhciBzaGEgPSBNRDUuQ3JlYXRlKCkpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZVtdIGNoZWNrc3VtID0gc2hhLkNvbXB1dGVIYXNoKGJ1ZmZlcmVkU3RyZWFtKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZDUgPSBCaXRDb252ZXJ0ZXIuVG9TdHJpbmcoY2hlY2tzdW0pLlJlcGxhY2UoIi0iLCBzdHJpbmcuRW1wdHkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKElPRXhjZXB0aW9uKSB7IH0NCiAgICAgICAgICAgIGNhdGNoIChVbmF1dGhvcml6ZWRBY2Nlc3NFeGNlcHRpb24pIHsgfQ0KICAgICAgICAgICAgcmV0dXJuIG1kNTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "3E618462D24AFB5387B1CA0D2EC2DB5D",
              "algorithm": "md5"
            },
            {
              "value": "394E5E11D3AABE71A42B17302E84DA41A28D4526",
              "algorithm": "sha-1"
            },
            {
              "value": "ACFA6AEC53C2C6436C9D6F8502AF9DCFF152B9E3E75BE8FCD231CF646469086B",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "B7F8F1E56B3DB529CB8B97DA4E67EC49",
              "algorithm": "md5"
            },
            {
              "value": "83F087D5D609D90A60944362D701F07F920B2051",
              "algorithm": "sha-1"
            },
            {
              "value": "F94D7323790A0DA57D309D51C4800E61D2F04567BE49D220713640979E3F6E90",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Invocation.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQp1c2luZyBTeXN0ZW0uTGlucTsNCnVzaW5nIFN5c3RlbS5SZWZsZWN0aW9uOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZg0Kew0KICAgIHB1YmxpYyBwYXJ0aWFsIGNsYXNzIEludm9jYXRpb24NCiAgICB7DQogICAgICAgIHByaXZhdGUgSUVudW1lcmFibGU8c3RyaW5nPiBQcm9wZXJ0aWVzVG9Mb2cge2dldDsgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBJbnZvY2F0aW9uIENyZWF0ZSgNCiAgICAgICAgICAgIGJvb2wgZW1pdE1hY2hpbmVFbnZpcm9ubWVudCA9IGZhbHNlLA0KICAgICAgICAgICAgSUVudW1lcmFibGU8c3RyaW5nPiBwcm9wZXJ0aWVzVG9Mb2cgPSBudWxsKQ0KICAgICAgICB7DQogICAgICAgICAgICB2YXIgaW52b2NhdGlvbiA9IG5ldyBJbnZvY2F0aW9uDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUHJvcGVydGllc1RvTG9nID0gcHJvcGVydGllc1RvTG9nPy5TZWxlY3QocCA9PiBwLlRvVXBwZXJJbnZhcmlhbnQoKSkuVG9MaXN0KCkNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIGludm9jYXRpb24uU3RhcnRUaW1lID0gRGF0ZVRpbWUuVXRjTm93Ow0KDQogICAgICAgICAgICBpZiAoaW52b2NhdGlvbi5TaG91bGRMb2cobmFtZW9mKFByb2Nlc3NJZCkpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGludm9jYXRpb24uUHJvY2Vzc0lkID0gU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MuR2V0Q3VycmVudFByb2Nlc3MoKS5JZDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGludm9jYXRpb24uU2hvdWxkTG9nKG5hbWVvZihXb3JraW5nRGlyZWN0b3J5KSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaW52b2NhdGlvbi5Xb3JraW5nRGlyZWN0b3J5ID0gRW52aXJvbm1lbnQuQ3VycmVudERpcmVjdG9yeTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGludm9jYXRpb24uU2hvdWxkTG9nKG5hbWVvZihDb21tYW5kTGluZSkpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGludm9jYXRpb24uQ29tbWFuZExpbmUgPSBFbnZpcm9ubWVudC5Db21tYW5kTGluZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGVtaXRNYWNoaW5lRW52aXJvbm1lbnQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaW52b2NhdGlvbi5NYWNoaW5lID0gRW52aXJvbm1lbnQuTWFjaGluZU5hbWU7DQogICAgICAgICAgICAgICAgaW52b2NhdGlvbi5BY2NvdW50ID0gRW52aXJvbm1lbnQuVXNlck5hbWU7DQogICAgICAgICAgICAgICAgaW52b2NhdGlvbi5FbnZpcm9ubWVudFZhcmlhYmxlcyA9IENvcHlFbnZpcm9ubWVudFZhcmlhYmxlcygpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoaW52b2NhdGlvbi5TaG91bGRMb2cobmFtZW9mKEV4ZWN1dGFibGVMb2NhdGlvbikpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIEFzc2VtYmx5IGFzc2VtYmx5ID0gQXNzZW1ibHkuR2V0RW50cnlBc3NlbWJseSgpID8/IEFzc2VtYmx5LkdldEV4ZWN1dGluZ0Fzc2VtYmx5KCk7DQogICAgICAgICAgICAgICAgaW52b2NhdGlvbi5FeGVjdXRhYmxlTG9jYXRpb24uVXJpID0gbmV3IFVyaShhc3NlbWJseS5Mb2NhdGlvbik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBpbnZvY2F0aW9uOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgSURpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IENvcHlFbnZpcm9ubWVudFZhcmlhYmxlcygpDQogICAgICAgIHsNCiAgICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4oKTsNCiAgICAgICAgICAgIHZhciB2YXJpYWJsZXMgPSBFbnZpcm9ubWVudC5HZXRFbnZpcm9ubWVudFZhcmlhYmxlcygpOw0KDQogICAgICAgICAgICBmb3JlYWNoIChEaWN0aW9uYXJ5RW50cnkgZW50cnkgaW4gdmFyaWFibGVzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJlc3VsdFsoc3RyaW5nKWVudHJ5LktleV0gPSAoc3RyaW5nKWVudHJ5LlZhbHVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBib29sIFNob3VsZExvZyhzdHJpbmcgcHJvcGVydHlOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gUHJvcGVydGllc1RvTG9nICE9IG51bGwgJiYgUHJvcGVydGllc1RvTG9nLkNvbnRhaW5zKHByb3BlcnR5TmFtZS5Ub1VwcGVySW52YXJpYW50KCkpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "8F2CE7A51BEDCDA0B96E20EAFA68B16F",
              "algorithm": "md5"
            },
            {
              "value": "30BDAA3886EB9ED2B7E10607E97AC57EB3D1751D",
              "algorithm": "sha-1"
            },
            {
              "value": "68BDC2EF50BC992E6AF2F81E5C6B88CFB24ED794B4C9976B5B5A75186F1A228D",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/InvocationEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "E3D8FCCB82FB0787C532DCB3F4078AEE",
              "algorithm": "md5"
            },
            {
              "value": "ECBEA09D7A59885EF430C7201442E4BAC8B871FE",
              "algorithm": "sha-1"
            },
            {
              "value": "5616A76578C3D6C3F402B3CB06947A764FFAD849FA4159B71F1EDD7DE150713A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Location.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "304BA61E2EA0D957F92B58810F0A6EE3",
              "algorithm": "md5"
            },
            {
              "value": "CD5D7D810A7B15284F0A59ECB3B6858DDD606F2A",
              "algorithm": "sha-1"
            },
            {
              "value": "A9BEA81D95B646499752F1FDAF3561CD4BD1444450F9D3E5B19147A5A4B3A282",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Message.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBFbmNhcHN1bGF0ZXMgYSBtZXNzYWdlIGludGVuZGVkIHRvIGJlIHJlYWQgYnkgdGhlIGVuZCB1c2VyLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgTWVzc2FnZSA6IElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8TWVzc2FnZT4gVmFsdWVDb21wYXJlciA9PiBNZXNzYWdlRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhNZXNzYWdlIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLk1lc3NhZ2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHBsYWluIHRleHQgbWVzc2FnZSBzdHJpbmcuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAidGV4dCIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBUZXh0IHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBUaGUgcmVzb3VyY2UgaWQgZm9yIGEgcGxhaW4gdGV4dCBtZXNzYWdlIHN0cmluZy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJtZXNzYWdlSWQiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgTWVzc2FnZUlkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHJpY2ggdGV4dCBtZXNzYWdlIHN0cmluZy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJyaWNoVGV4dCIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBSaWNoVGV4dCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIHJlc291cmNlIGlkIGZvciBhIHJpY2ggdGV4dCBtZXNzYWdlIHN0cmluZy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJyaWNoTWVzc2FnZUlkIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIFJpY2hNZXNzYWdlSWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEFuIGFycmF5IG9mIHN0cmluZ3MgdG8gc3Vic3RpdHV0ZSBpbnRvIHRoZSBtZXNzYWdlIHN0cmluZy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJhcmd1bWVudHMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxzdHJpbmc+IEFyZ3VtZW50cyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iTWVzc2FnZSIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBNZXNzYWdlKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iTWVzc2FnZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InRleHQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFRleHQiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJtZXNzYWdlSWQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IE1lc3NhZ2VJZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InJpY2hUZXh0Ij4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBSaWNoVGV4dCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InJpY2hNZXNzYWdlSWQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFJpY2hNZXNzYWdlSWQiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJhcmd1bWVudHMiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEFyZ3VtZW50cyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICBwdWJsaWMgTWVzc2FnZShzdHJpbmcgdGV4dCwgc3RyaW5nIG1lc3NhZ2VJZCwgc3RyaW5nIHJpY2hUZXh0LCBzdHJpbmcgcmljaE1lc3NhZ2VJZCwgSUVudW1lcmFibGU8c3RyaW5nPiBhcmd1bWVudHMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEluaXQodGV4dCwgbWVzc2FnZUlkLCByaWNoVGV4dCwgcmljaE1lc3NhZ2VJZCwgYXJndW1lbnRzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9Ik1lc3NhZ2UiIC8+IGNsYXNzIGZyb20gdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdGhlciI+DQogICAgICAgIC8vLyBUaGUgaW5zdGFuY2UgZnJvbSB3aGljaCB0aGUgbmV3IGluc3RhbmNlIGlzIHRvIGJlIGluaXRpYWxpemVkLg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj4NCiAgICAgICAgLy8vIFRocm93biBpZiA8cGFyYW1yZWYgbmFtZT0ib3RoZXIiIC8+IGlzIG51bGwuDQogICAgICAgIC8vLyA8L2V4Y2VwdGlvbj4NCiAgICAgICAgcHVibGljIE1lc3NhZ2UoTWVzc2FnZSBvdGhlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yob3RoZXIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSW5pdChvdGhlci5UZXh0LCBvdGhlci5NZXNzYWdlSWQsIG90aGVyLlJpY2hUZXh0LCBvdGhlci5SaWNoTWVzc2FnZUlkLCBvdGhlci5Bcmd1bWVudHMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZSBJU2FyaWZOb2RlLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBNZXNzYWdlIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoTWVzc2FnZSlEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgTWVzc2FnZSh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KHN0cmluZyB0ZXh0LCBzdHJpbmcgbWVzc2FnZUlkLCBzdHJpbmcgcmljaFRleHQsIHN0cmluZyByaWNoTWVzc2FnZUlkLCBJRW51bWVyYWJsZTxzdHJpbmc+IGFyZ3VtZW50cykNCiAgICAgICAgew0KICAgICAgICAgICAgVGV4dCA9IHRleHQ7DQogICAgICAgICAgICBNZXNzYWdlSWQgPSBtZXNzYWdlSWQ7DQogICAgICAgICAgICBSaWNoVGV4dCA9IHJpY2hUZXh0Ow0KICAgICAgICAgICAgUmljaE1lc3NhZ2VJZCA9IHJpY2hNZXNzYWdlSWQ7DQogICAgICAgICAgICBpZiAoYXJndW1lbnRzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzAgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gYXJndW1lbnRzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQodmFsdWVfMCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgQXJndW1lbnRzID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "F5BAA08F493A944DD3F9A0B08940472B",
              "algorithm": "md5"
            },
            {
              "value": "CED8BAF3A2EBAAB14386E8EDC40BB1D918F694EB",
              "algorithm": "sha-1"
            },
            {
              "value": "0D70C6C8FB7367177FAC0EA130104BA6881D7D9C3AD834B50D9CBB5B8768EF95",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Node.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBSZXByZXNlbnRzIGEgbm9kZSBpbiBhIGdyYXBoLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgTm9kZSA6IFByb3BlcnR5QmFnSG9sZGVyLCBJU2FyaWZOb2RlDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPE5vZGU+IFZhbHVlQ29tcGFyZXIgPT4gTm9kZUVxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoTm9kZSBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlIiAvPi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTm9kZUtpbmQgU2FyaWZOb2RlS2luZA0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZC5Ob2RlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBzdHJpbmcgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBub2RlIHdpdGhpbiBpdHMgZ3JhcGguDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiaWQiLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgSWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIG5vZGUuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAibGFiZWwiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBNZXNzYWdlIExhYmVsIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIGNvZGUgbG9jYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBub2RlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImxvY2F0aW9uIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgTG9jYXRpb24gTG9jYXRpb24geyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEFycmF5IG9mIGNoaWxkIG5vZGVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImNoaWxkcmVuIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8Tm9kZT4gQ2hpbGRyZW4geyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEtleS92YWx1ZSBwYWlycyB0aGF0IHByb3ZpZGUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbm9kZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJwcm9wZXJ0aWVzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBpbnRlcm5hbCBvdmVycmlkZSBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IFByb3BlcnRpZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9Ik5vZGUiIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgTm9kZSgpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9Ik5vZGUiIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJpZCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogSWQiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJsYWJlbCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogTGFiZWwiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJsb2NhdGlvbiI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogTG9jYXRpb24iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJjaGlsZHJlbiI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogQ2hpbGRyZW4iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwcm9wZXJ0aWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBQcm9wZXJ0aWVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBOb2RlKHN0cmluZyBpZCwgTWVzc2FnZSBsYWJlbCwgTG9jYXRpb24gbG9jYXRpb24sIElFbnVtZXJhYmxlPE5vZGU+IGNoaWxkcmVuLCBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IHByb3BlcnRpZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEluaXQoaWQsIGxhYmVsLCBsb2NhdGlvbiwgY2hpbGRyZW4sIHByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iTm9kZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgTm9kZShOb2RlIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLklkLCBvdGhlci5MYWJlbCwgb3RoZXIuTG9jYXRpb24sIG90aGVyLkNoaWxkcmVuLCBvdGhlci5Qcm9wZXJ0aWVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgTm9kZSBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKE5vZGUpRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBJU2FyaWZOb2RlIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IE5vZGUodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChzdHJpbmcgaWQsIE1lc3NhZ2UgbGFiZWwsIExvY2F0aW9uIGxvY2F0aW9uLCBJRW51bWVyYWJsZTxOb2RlPiBjaGlsZHJlbiwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJZCA9IGlkOw0KICAgICAgICAgICAgaWYgKGxhYmVsICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTGFiZWwgPSBuZXcgTWVzc2FnZShsYWJlbCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsb2NhdGlvbiAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIExvY2F0aW9uID0gbmV3IExvY2F0aW9uKGxvY2F0aW9uKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGNoaWxkcmVuICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzAgPSBuZXcgTGlzdDxOb2RlPigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8wIGluIGNoaWxkcmVuKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzAgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobnVsbCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChuZXcgTm9kZSh2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBDaGlsZHJlbiA9IGRlc3RpbmF0aW9uXzA7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUHJvcGVydGllcyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4ocHJvcGVydGllcyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "AE683B289E9F3A8BE53B898076A90CDF",
              "algorithm": "md5"
            },
            {
              "value": "4C9D90EB84C3A61C29A27DFA86876B9A5428D430",
              "algorithm": "sha-1"
            },
            {
              "value": "F95EED45A5E8F3F48B1761C30447544A1583F260E13E53CC53DE9194B04B5D93",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Notification.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "337377498B9A6A224540DD3CB90792E0",
              "algorithm": "md5"
            },
            {
              "value": "09A4E4D60A87F0341A09BAB253EBCCF9DD22E625",
              "algorithm": "sha-1"
            },
            {
              "value": "A9025B0C9C3534A1CF3ECBEF647FD4D44C4C746A2651B1E0587FA483D72E6483",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/PropertiesDictionary.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "36DFB9A85D22D6344A1657C46E7AC486",
              "algorithm": "md5"
            },
            {
              "value": "0B788B4C9EB196419737328A57B4D8A1B9D2B7C9",
              "algorithm": "sha-1"
            },
            {
              "value": "60E55DBF351B4565EDC1CEBD3D9DD5BE6A1577E8B002EF488815C40447FC1CEB",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Core/PropertyBagHolder.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "AA9BE7560260940CAD63E22FBCA39BA0",
              "algorithm": "md5"
            },
            {
              "value": "65AA216134DDC7A1EFF4B90540EE5F92A7A1B010",
              "algorithm": "sha-1"
            },
            {
              "value": "D981E6A766927CFDE7A991FCE97782BB6C7F8F20192AE99E247E3C2EA47ED58E",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Region.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "592E757599D474D88F775C79F4486F30",
              "algorithm": "md5"
            },
            {
              "value": "97B9BEC4CB09143EAFA75A7027241A1EBD6FC9C0",
              "algorithm": "sha-1"
            },
            {
              "value": "02312DE73D068A311F4F1E27BD3D51EDD51D736BF8BE7A57B0D6F8CEC02D68C3",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Resources.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZg0Kew0KICAgIC8vLyA8c3VtbWFyeT4NCiAgICAvLy8gQ29udGFpbmVyIGZvciBpdGVtcyB0aGF0IHJlcXVpcmUgbG9jYWxpemF0aW9uLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgUmVzb3VyY2VzIDogUHJvcGVydHlCYWdIb2xkZXIsIElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8UmVzb3VyY2VzPiBWYWx1ZUNvbXBhcmVyID0+IFJlc291cmNlc0VxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoUmVzb3VyY2VzIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLlJlc291cmNlczsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgZGljdGlvbmFyeSwgZWFjaCBvZiB3aG9zZSBrZXlzIGlzIGEgcmVzb3VyY2UgaWRlbnRpZmllciBhbmQgZWFjaCBvZiB3aG9zZSB2YWx1ZXMgaXMgYSBsb2NhbGl6ZWQgc3RyaW5nLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gIm1lc3NhZ2VTdHJpbmdzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSURpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IE1lc3NhZ2VTdHJpbmdzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIGRpY3Rpb25hcnksIGVhY2ggb2Ygd2hvc2Uga2V5cyBpcyBhIHN0cmluZyBhbmQgZWFjaCBvZiB3aG9zZSB2YWx1ZXMgaXMgYSAncnVsZScgb2JqZWN0LCB0aGF0IGRlc2NyaWJlIGFsbCBydWxlcyBhc3NvY2lhdGVkIHdpdGggYW4gYW5hbHlzaXMgdG9vbCBvciBhIHNwZWNpZmljIHJ1biBvZiBhbiBhbmFseXNpcyB0b29sLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInJ1bGVzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSURpY3Rpb25hcnk8c3RyaW5nLCBSdWxlPiBSdWxlcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iUmVzb3VyY2VzIiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFJlc291cmNlcygpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlJlc291cmNlcyIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im1lc3NhZ2VTdHJpbmdzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBNZXNzYWdlU3RyaW5ncyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InJ1bGVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBSdWxlcyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICBwdWJsaWMgUmVzb3VyY2VzKElEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBtZXNzYWdlU3RyaW5ncywgSURpY3Rpb25hcnk8c3RyaW5nLCBSdWxlPiBydWxlcykNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdChtZXNzYWdlU3RyaW5ncywgcnVsZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iUmVzb3VyY2VzIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBSZXNvdXJjZXMoUmVzb3VyY2VzIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLk1lc3NhZ2VTdHJpbmdzLCBvdGhlci5SdWxlcyk7DQogICAgICAgIH0NCg0KICAgICAgICBJU2FyaWZOb2RlIElTYXJpZk5vZGUuRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIERlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhpcyBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFJlc291cmNlcyBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKFJlc291cmNlcylEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2VzKHRoaXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSB2b2lkIEluaXQoSURpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IG1lc3NhZ2VTdHJpbmdzLCBJRGljdGlvbmFyeTxzdHJpbmcsIFJ1bGU+IHJ1bGVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAobWVzc2FnZVN0cmluZ3MgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBNZXNzYWdlU3RyaW5ncyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPihtZXNzYWdlU3RyaW5ncyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChydWxlcyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFJ1bGVzID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBSdWxlPihydWxlcyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "212301ED58B646843406DDEDD0B5E522",
              "algorithm": "md5"
            },
            {
              "value": "337E856B7570B0EE7E729F13EF733477FE62A6AE",
              "algorithm": "sha-1"
            },
            {
              "value": "5EBBE3F42FF37D3156187C952788EEA5742C29873968ABBE9DF86F9209E24096",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBBIHJlc3VsdCBwcm9kdWNlZCBieSBhbiBhbmFseXNpcyB0b29sLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgUmVzdWx0IDogUHJvcGVydHlCYWdIb2xkZXIsIElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8UmVzdWx0PiBWYWx1ZUNvbXBhcmVyID0+IFJlc3VsdEVxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoUmVzdWx0IG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLlJlc3VsdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBzdGFibGUsIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBydWxlIChpZiBhbnkpIHRvIHdoaWNoIHRoaXMgbm90aWZpY2F0aW9uIGlzIHJlbGV2YW50LiBJZiAncnVsZUtleScgaXMgbm90IHNwZWNpZmllZCwgdGhpcyBtZW1iZXIgY2FuIGJlIHVzZWQgdG8gcmV0cmlldmUgcnVsZSBtZXRhZGF0YSBmcm9tIHRoZSBydWxlcyBkaWN0aW9uYXJ5LCBpZiBpdCBleGlzdHMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAicnVsZUlkIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIFJ1bGVJZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSB2YWx1ZSBzcGVjaWZ5aW5nIHRoZSBzZXZlcml0eSBsZXZlbCBvZiB0aGUgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImxldmVsIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgUmVzdWx0TGV2ZWwgTGV2ZWwgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgbWVzc2FnZSB0aGF0IGRlc2NyaWJlcyB0aGUgcmVzdWx0LiBUaGUgZmlyc3Qgc2VudGVuY2Ugb2YgdGhlIG1lc3NhZ2Ugb25seSB3aWxsIGJlIGRpc3BsYXllZCB3aGVuIHZpc2libGUgc3BhY2UgaXMgbGltaXRlZC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJtZXNzYWdlIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgTWVzc2FnZSBNZXNzYWdlIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHN0cmluZyB0aGF0IGlkZW50aWZpZXMgdGhlIG1lc3NhZ2Ugd2l0aGluIHRoZSBtZXRhZGF0YSBmb3IgdGhlIHJ1bGUgdXNlZCBpbiB0aGlzIHJlc3VsdC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJydWxlTWVzc2FnZUlkIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIFJ1bGVNZXNzYWdlSWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIElkZW50aWZpZXMgdGhlIGZpbGUgdGhhdCB0aGUgYW5hbHlzaXMgdG9vbCB3YXMgaW5zdHJ1Y3RlZCB0byBzY2FuLiBUaGlzIG5lZWQgbm90IGJlIHRoZSBzYW1lIGFzIHRoZSBmaWxlIHdoZXJlIHRoZSByZXN1bHQgYWN0dWFsbHkgb2NjdXJyZWQuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiYW5hbHlzaXNUYXJnZXQiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBGaWxlTG9jYXRpb24gQW5hbHlzaXNUYXJnZXQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIE9uZSBvciBtb3JlIGxvY2F0aW9ucyB3aGVyZSB0aGUgcmVzdWx0IG9jY3VycmVkLiBTcGVjaWZ5IG9ubHkgb25lIGxvY2F0aW9uIHVubGVzcyB0aGUgcHJvYmxlbSBpbmRpY2F0ZWQgYnkgdGhlIHJlc3VsdCBjYW4gb25seSBiZSBjb3JyZWN0ZWQgYnkgbWFraW5nIGEgY2hhbmdlIGF0IGV2ZXJ5IHNwZWNpZmllZCBsb2NhdGlvbi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJsb2NhdGlvbnMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxMb2NhdGlvbj4gTG9jYXRpb25zIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHN0YWJsZSwgdW5pcXVlIGlkZW50aWZlciBmb3IgdGhlIHJlc3VsdCBpbiB0aGUgZm9ybSBvZiBhIEdVSUQuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiaW5zdGFuY2VHdWlkIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIEluc3RhbmNlR3VpZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBzdGFibGUsIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZXF1aXZhbGVuY2UgY2xhc3Mgb2YgbG9naWNhbGx5IGlkZW50aWNhbCByZXN1bHRzIHRvIHdoaWNoIHRoaXMgcmVzdWx0IGJlbG9uZ3MsIGluIHRoZSBmb3JtIG9mIGEgR1VJRC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJjb3JyZWxhdGlvbkd1aWQiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgQ29ycmVsYXRpb25HdWlkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHNldCBvZiBzdHJpbmdzIHRoYXQgY29udHJpYnV0ZSB0byB0aGUgc3RhYmxlLCB1bmlxdWUgaWRlbnRpdHkgb2YgdGhlIHJlc3VsdC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJwYXJ0aWFsRmluZ2VycHJpbnRzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSURpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IFBhcnRpYWxGaW5nZXJwcmludHMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgc2V0IG9mIHN0cmluZ3MgZWFjaCBvZiB3aGljaCBpbmRpdmlkdWFsbHkgZGVmaW5lcyBhIHN0YWJsZSwgdW5pcXVlIGlkZW50aXR5IGZvciB0aGUgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImZpbmdlcnByaW50cyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBGaW5nZXJwcmludHMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEFuIGFycmF5IG9mICdzdGFjaycgb2JqZWN0cyByZWxldmFudCB0byB0aGUgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInN0YWNrcyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElMaXN0PFN0YWNrPiBTdGFja3MgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEFuIGFycmF5IG9mICdjb2RlRmxvdycgb2JqZWN0cyByZWxldmFudCB0byB0aGUgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImNvZGVGbG93cyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElMaXN0PENvZGVGbG93PiBDb2RlRmxvd3MgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEFuIGFycmF5IG9mIG9uZSBvciBtb3JlIHVuaXF1ZSAnZ3JhcGgnIG9iamVjdHMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiZ3JhcGhzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8R3JhcGg+IEdyYXBocyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQW4gYXJyYXkgb2Ygb25lIG9yIG1vcmUgdW5pcXVlICdncmFwaFRyYXZlcnNhbCcgb2JqZWN0cy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJncmFwaFRyYXZlcnNhbHMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxHcmFwaFRyYXZlcnNhbD4gR3JhcGhUcmF2ZXJzYWxzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHNldCBvZiBsb2NhdGlvbnMgcmVsZXZhbnQgdG8gdGhpcyByZXN1bHQuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAicmVsYXRlZExvY2F0aW9ucyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElMaXN0PExvY2F0aW9uPiBSZWxhdGVkTG9jYXRpb25zIHsgZ2V0OyBzZXQ7IH0NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJzdXBwcmVzc2lvblN0YXRlcyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIFN1cHByZXNzaW9uU3RhdGVzIFN1cHByZXNzaW9uU3RhdGVzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBUaGUgc3RhdGUgb2YgYSByZXN1bHQgcmVsYXRpdmUgdG8gYSBiYXNlbGluZSBvZiBhIHByZXZpb3VzIHJ1bi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJiYXNlbGluZVN0YXRlIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgQmFzZWxpbmVTdGF0ZSBCYXNlbGluZVN0YXRlIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHNldCBvZiBmaWxlcyByZWxldmFudCB0byB0aGUgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImF0dGFjaG1lbnRzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8QXR0YWNobWVudD4gQXR0YWNobWVudHMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBVUklzIG9mIHRoZSB3b3JrIGl0ZW1zIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJlc3VsdA0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gIndvcmtJdGVtVXJpcyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElMaXN0PFVyaT4gV29ya0l0ZW1VcmlzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiBhbmFseXNpc1Rvb2xMb2dGaWxlQ29udGVudHMgb2JqZWN0cyB3aGljaCBzcGVjaWZ5IHRoZSBwb3J0aW9ucyBvZiBhbiBhbmFseXNpcyB0b29sJ3Mgb3V0cHV0IHRoYXQgYSBjb252ZXJ0ZXIgdHJhbnNmb3JtZWQgaW50byB0aGUgcmVzdWx0IG9iamVjdC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJjb252ZXJzaW9uUHJvdmVuYW5jZSIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElMaXN0PFBoeXNpY2FsTG9jYXRpb24+IENvbnZlcnNpb25Qcm92ZW5hbmNlIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiAnZml4JyBvYmplY3RzLCBlYWNoIG9mIHdoaWNoIHJlcHJlc2VudHMgYSBwcm9wb3NlZCBmaXggdG8gdGhlIHByb2JsZW0gaW5kaWNhdGVkIGJ5IHRoZSByZXN1bHQuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiZml4ZXMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxGaXg+IEZpeGVzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBLZXkvdmFsdWUgcGFpcnMgdGhhdCBwcm92aWRlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlc3VsdC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJwcm9wZXJ0aWVzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBpbnRlcm5hbCBvdmVycmlkZSBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IFByb3BlcnRpZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlJlc3VsdCIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBSZXN1bHQoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJSZXN1bHQiIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJydWxlSWQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFJ1bGVJZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImxldmVsIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBMZXZlbCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im1lc3NhZ2UiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IE1lc3NhZ2UiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJydWxlTWVzc2FnZUlkIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBSdWxlTWVzc2FnZUlkIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iYW5hbHlzaXNUYXJnZXQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEFuYWx5c2lzVGFyZ2V0IiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ibG9jYXRpb25zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBMb2NhdGlvbnMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJpbnN0YW5jZUd1aWQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEluc3RhbmNlR3VpZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImNvcnJlbGF0aW9uR3VpZCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogQ29ycmVsYXRpb25HdWlkIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icGFydGlhbEZpbmdlcnByaW50cyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUGFydGlhbEZpbmdlcnByaW50cyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImZpbmdlcnByaW50cyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogRmluZ2VycHJpbnRzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ic3RhY2tzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBTdGFja3MiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJjb2RlRmxvd3MiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IENvZGVGbG93cyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImdyYXBocyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogR3JhcGhzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZ3JhcGhUcmF2ZXJzYWxzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBHcmFwaFRyYXZlcnNhbHMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJyZWxhdGVkTG9jYXRpb25zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBSZWxhdGVkTG9jYXRpb25zIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ic3VwcHJlc3Npb25TdGF0ZXMiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFN1cHByZXNzaW9uU3RhdGVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iYmFzZWxpbmVTdGF0ZSI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogQmFzZWxpbmVTdGF0ZSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImF0dGFjaG1lbnRzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBBdHRhY2htZW50cyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9IndvcmtJdGVtVXJpcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogV29ya0l0ZW1VcmlzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iY29udmVyc2lvblByb3ZlbmFuY2UiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IENvbnZlcnNpb25Qcm92ZW5hbmNlIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZml4ZXMiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEZpeGVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icHJvcGVydGllcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUHJvcGVydGllcyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICBwdWJsaWMgUmVzdWx0KHN0cmluZyBydWxlSWQsIFJlc3VsdExldmVsIGxldmVsLCBNZXNzYWdlIG1lc3NhZ2UsIHN0cmluZyBydWxlTWVzc2FnZUlkLCBGaWxlTG9jYXRpb24gYW5hbHlzaXNUYXJnZXQsIElFbnVtZXJhYmxlPExvY2F0aW9uPiBsb2NhdGlvbnMsIHN0cmluZyBpbnN0YW5jZUd1aWQsIHN0cmluZyBjb3JyZWxhdGlvbkd1aWQsIElEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBwYXJ0aWFsRmluZ2VycHJpbnRzLCBJRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gZmluZ2VycHJpbnRzLCBJRW51bWVyYWJsZTxTdGFjaz4gc3RhY2tzLCBJRW51bWVyYWJsZTxDb2RlRmxvdz4gY29kZUZsb3dzLCBJRW51bWVyYWJsZTxHcmFwaD4gZ3JhcGhzLCBJRW51bWVyYWJsZTxHcmFwaFRyYXZlcnNhbD4gZ3JhcGhUcmF2ZXJzYWxzLCBJRW51bWVyYWJsZTxMb2NhdGlvbj4gcmVsYXRlZExvY2F0aW9ucywgU3VwcHJlc3Npb25TdGF0ZXMgc3VwcHJlc3Npb25TdGF0ZXMsIEJhc2VsaW5lU3RhdGUgYmFzZWxpbmVTdGF0ZSwgSUVudW1lcmFibGU8QXR0YWNobWVudD4gYXR0YWNobWVudHMsIElFbnVtZXJhYmxlPFVyaT4gd29ya0l0ZW1VcmlzLCBJRW51bWVyYWJsZTxQaHlzaWNhbExvY2F0aW9uPiBjb252ZXJzaW9uUHJvdmVuYW5jZSwgSUVudW1lcmFibGU8Rml4PiBmaXhlcywgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KHJ1bGVJZCwgbGV2ZWwsIG1lc3NhZ2UsIHJ1bGVNZXNzYWdlSWQsIGFuYWx5c2lzVGFyZ2V0LCBsb2NhdGlvbnMsIGluc3RhbmNlR3VpZCwgY29ycmVsYXRpb25HdWlkLCBwYXJ0aWFsRmluZ2VycHJpbnRzLCBmaW5nZXJwcmludHMsIHN0YWNrcywgY29kZUZsb3dzLCBncmFwaHMsIGdyYXBoVHJhdmVyc2FscywgcmVsYXRlZExvY2F0aW9ucywgc3VwcHJlc3Npb25TdGF0ZXMsIGJhc2VsaW5lU3RhdGUsIGF0dGFjaG1lbnRzLCB3b3JrSXRlbVVyaXMsIGNvbnZlcnNpb25Qcm92ZW5hbmNlLCBmaXhlcywgcHJvcGVydGllcyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJSZXN1bHQiIC8+IGNsYXNzIGZyb20gdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdGhlciI+DQogICAgICAgIC8vLyBUaGUgaW5zdGFuY2UgZnJvbSB3aGljaCB0aGUgbmV3IGluc3RhbmNlIGlzIHRvIGJlIGluaXRpYWxpemVkLg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj4NCiAgICAgICAgLy8vIFRocm93biBpZiA8cGFyYW1yZWYgbmFtZT0ib3RoZXIiIC8+IGlzIG51bGwuDQogICAgICAgIC8vLyA8L2V4Y2VwdGlvbj4NCiAgICAgICAgcHVibGljIFJlc3VsdChSZXN1bHQgb3RoZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChvdGhlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG90aGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEluaXQob3RoZXIuUnVsZUlkLCBvdGhlci5MZXZlbCwgb3RoZXIuTWVzc2FnZSwgb3RoZXIuUnVsZU1lc3NhZ2VJZCwgb3RoZXIuQW5hbHlzaXNUYXJnZXQsIG90aGVyLkxvY2F0aW9ucywgb3RoZXIuSW5zdGFuY2VHdWlkLCBvdGhlci5Db3JyZWxhdGlvbkd1aWQsIG90aGVyLlBhcnRpYWxGaW5nZXJwcmludHMsIG90aGVyLkZpbmdlcnByaW50cywgb3RoZXIuU3RhY2tzLCBvdGhlci5Db2RlRmxvd3MsIG90aGVyLkdyYXBocywgb3RoZXIuR3JhcGhUcmF2ZXJzYWxzLCBvdGhlci5SZWxhdGVkTG9jYXRpb25zLCBvdGhlci5TdXBwcmVzc2lvblN0YXRlcywgb3RoZXIuQmFzZWxpbmVTdGF0ZSwgb3RoZXIuQXR0YWNobWVudHMsIG90aGVyLldvcmtJdGVtVXJpcywgb3RoZXIuQ29udmVyc2lvblByb3ZlbmFuY2UsIG90aGVyLkZpeGVzLCBvdGhlci5Qcm9wZXJ0aWVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgUmVzdWx0IERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoUmVzdWx0KURlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgSVNhcmlmTm9kZSBEZWVwQ2xvbmVDb3JlKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChzdHJpbmcgcnVsZUlkLCBSZXN1bHRMZXZlbCBsZXZlbCwgTWVzc2FnZSBtZXNzYWdlLCBzdHJpbmcgcnVsZU1lc3NhZ2VJZCwgRmlsZUxvY2F0aW9uIGFuYWx5c2lzVGFyZ2V0LCBJRW51bWVyYWJsZTxMb2NhdGlvbj4gbG9jYXRpb25zLCBzdHJpbmcgaW5zdGFuY2VHdWlkLCBzdHJpbmcgY29ycmVsYXRpb25HdWlkLCBJRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gcGFydGlhbEZpbmdlcnByaW50cywgSURpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IGZpbmdlcnByaW50cywgSUVudW1lcmFibGU8U3RhY2s+IHN0YWNrcywgSUVudW1lcmFibGU8Q29kZUZsb3c+IGNvZGVGbG93cywgSUVudW1lcmFibGU8R3JhcGg+IGdyYXBocywgSUVudW1lcmFibGU8R3JhcGhUcmF2ZXJzYWw+IGdyYXBoVHJhdmVyc2FscywgSUVudW1lcmFibGU8TG9jYXRpb24+IHJlbGF0ZWRMb2NhdGlvbnMsIFN1cHByZXNzaW9uU3RhdGVzIHN1cHByZXNzaW9uU3RhdGVzLCBCYXNlbGluZVN0YXRlIGJhc2VsaW5lU3RhdGUsIElFbnVtZXJhYmxlPEF0dGFjaG1lbnQ+IGF0dGFjaG1lbnRzLCBJRW51bWVyYWJsZTxVcmk+IHdvcmtJdGVtVXJpcywgSUVudW1lcmFibGU8UGh5c2ljYWxMb2NhdGlvbj4gY29udmVyc2lvblByb3ZlbmFuY2UsIElFbnVtZXJhYmxlPEZpeD4gZml4ZXMsIElEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4gcHJvcGVydGllcykNCiAgICAgICAgew0KICAgICAgICAgICAgUnVsZUlkID0gcnVsZUlkOw0KICAgICAgICAgICAgTGV2ZWwgPSBsZXZlbDsNCiAgICAgICAgICAgIGlmIChtZXNzYWdlICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTWVzc2FnZSA9IG5ldyBNZXNzYWdlKG1lc3NhZ2UpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBSdWxlTWVzc2FnZUlkID0gcnVsZU1lc3NhZ2VJZDsNCiAgICAgICAgICAgIGlmIChhbmFseXNpc1RhcmdldCAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIEFuYWx5c2lzVGFyZ2V0ID0gbmV3IEZpbGVMb2NhdGlvbihhbmFseXNpc1RhcmdldCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsb2NhdGlvbnMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PExvY2F0aW9uPigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8wIGluIGxvY2F0aW9ucykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobmV3IExvY2F0aW9uKHZhbHVlXzApKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIExvY2F0aW9ucyA9IGRlc3RpbmF0aW9uXzA7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEluc3RhbmNlR3VpZCA9IGluc3RhbmNlR3VpZDsNCiAgICAgICAgICAgIENvcnJlbGF0aW9uR3VpZCA9IGNvcnJlbGF0aW9uR3VpZDsNCiAgICAgICAgICAgIGlmIChwYXJ0aWFsRmluZ2VycHJpbnRzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUGFydGlhbEZpbmdlcnByaW50cyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPihwYXJ0aWFsRmluZ2VycHJpbnRzKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGZpbmdlcnByaW50cyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIEZpbmdlcnByaW50cyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPihmaW5nZXJwcmludHMpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoc3RhY2tzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzEgPSBuZXcgTGlzdDxTdGFjaz4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMSBpbiBzdGFja3MpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMSA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8xLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzEuQWRkKG5ldyBTdGFjayh2YWx1ZV8xKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBTdGFja3MgPSBkZXN0aW5hdGlvbl8xOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoY29kZUZsb3dzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzIgPSBuZXcgTGlzdDxDb2RlRmxvdz4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMiBpbiBjb2RlRmxvd3MpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMiA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8yLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzIuQWRkKG5ldyBDb2RlRmxvdyh2YWx1ZV8yKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBDb2RlRmxvd3MgPSBkZXN0aW5hdGlvbl8yOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoZ3JhcGhzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzMgPSBuZXcgTGlzdDxHcmFwaD4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMyBpbiBncmFwaHMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMyA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8zLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzMuQWRkKG5ldyBHcmFwaCh2YWx1ZV8zKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBHcmFwaHMgPSBkZXN0aW5hdGlvbl8zOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoZ3JhcGhUcmF2ZXJzYWxzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzQgPSBuZXcgTGlzdDxHcmFwaFRyYXZlcnNhbD4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfNCBpbiBncmFwaFRyYXZlcnNhbHMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfNCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl80LkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzQuQWRkKG5ldyBHcmFwaFRyYXZlcnNhbCh2YWx1ZV80KSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBHcmFwaFRyYXZlcnNhbHMgPSBkZXN0aW5hdGlvbl80Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAocmVsYXRlZExvY2F0aW9ucyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbl81ID0gbmV3IExpc3Q8TG9jYXRpb24+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzUgaW4gcmVsYXRlZExvY2F0aW9ucykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV81ID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzUuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fNS5BZGQobmV3IExvY2F0aW9uKHZhbHVlXzUpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIFJlbGF0ZWRMb2NhdGlvbnMgPSBkZXN0aW5hdGlvbl81Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBTdXBwcmVzc2lvblN0YXRlcyA9IHN1cHByZXNzaW9uU3RhdGVzOw0KICAgICAgICAgICAgQmFzZWxpbmVTdGF0ZSA9IGJhc2VsaW5lU3RhdGU7DQogICAgICAgICAgICBpZiAoYXR0YWNobWVudHMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fNiA9IG5ldyBMaXN0PEF0dGFjaG1lbnQ+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzYgaW4gYXR0YWNobWVudHMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfNiA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl82LkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzYuQWRkKG5ldyBBdHRhY2htZW50KHZhbHVlXzYpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIEF0dGFjaG1lbnRzID0gZGVzdGluYXRpb25fNjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHdvcmtJdGVtVXJpcyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbl83ID0gbmV3IExpc3Q8VXJpPigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV83IGluIHdvcmtJdGVtVXJpcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzcuQWRkKHZhbHVlXzcpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIFdvcmtJdGVtVXJpcyA9IGRlc3RpbmF0aW9uXzc7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChjb252ZXJzaW9uUHJvdmVuYW5jZSAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbl84ID0gbmV3IExpc3Q8UGh5c2ljYWxMb2NhdGlvbj4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfOCBpbiBjb252ZXJzaW9uUHJvdmVuYW5jZSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV84ID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzguQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fOC5BZGQobmV3IFBoeXNpY2FsTG9jYXRpb24odmFsdWVfOCkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgQ29udmVyc2lvblByb3ZlbmFuY2UgPSBkZXN0aW5hdGlvbl84Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoZml4ZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fOSA9IG5ldyBMaXN0PEZpeD4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfOSBpbiBmaXhlcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV85ID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzkuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fOS5BZGQobmV3IEZpeCh2YWx1ZV85KSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBGaXhlcyA9IGRlc3RpbmF0aW9uXzk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUHJvcGVydGllcyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4ocHJvcGVydGllcyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "65F9CCFAC07820CFAF6F507F2F5F7266",
              "algorithm": "md5"
            },
            {
              "value": "2712737413EFBAB9CF68A6E6DCA58B2ED36CA7B2",
              "algorithm": "sha-1"
            },
            {
              "value": "99E87448C8B5DEF9C048F32C9B412FD7043AF94903006A3F88CAC6F7EC5B641C",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ResultEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUmVhZGVyczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIERlZmluZXMgbWV0aG9kcyB0byBzdXBwb3J0IHRoZSBjb21wYXJpc29uIG9mIG9iamVjdHMgb2YgdHlwZSBSZXN1bHQgZm9yIGVxdWFsaXR5Lg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0dlbmVyYXRlZENvZGUoIk1pY3Jvc29mdC5Kc29uLlNjaGVtYS5Ub0RvdE5ldCIsICIwLjU2LjAuMCIpXQ0KICAgIGludGVybmFsIHNlYWxlZCBjbGFzcyBSZXN1bHRFcXVhbGl0eUNvbXBhcmVyIDogSUVxdWFsaXR5Q29tcGFyZXI8UmVzdWx0Pg0KICAgIHsNCiAgICAgICAgaW50ZXJuYWwgc3RhdGljIHJlYWRvbmx5IFJlc3VsdEVxdWFsaXR5Q29tcGFyZXIgSW5zdGFuY2UgPSBuZXcgUmVzdWx0RXF1YWxpdHlDb21wYXJlcigpOw0KDQogICAgICAgIHB1YmxpYyBib29sIEVxdWFscyhSZXN1bHQgbGVmdCwgUmVzdWx0IHJpZ2h0KQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoUmVmZXJlbmNlRXF1YWxzKGxlZnQsIHJpZ2h0KSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKFJlZmVyZW5jZUVxdWFscyhsZWZ0LCBudWxsKSB8fCBSZWZlcmVuY2VFcXVhbHMocmlnaHQsIG51bGwpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGxlZnQuUnVsZUlkICE9IHJpZ2h0LlJ1bGVJZCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0LkxldmVsICE9IHJpZ2h0LkxldmVsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFNZXNzYWdlLlZhbHVlQ29tcGFyZXIuRXF1YWxzKGxlZnQuTWVzc2FnZSwgcmlnaHQuTWVzc2FnZSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobGVmdC5SdWxlTWVzc2FnZUlkICE9IHJpZ2h0LlJ1bGVNZXNzYWdlSWQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIUZpbGVMb2NhdGlvbi5WYWx1ZUNvbXBhcmVyLkVxdWFscyhsZWZ0LkFuYWx5c2lzVGFyZ2V0LCByaWdodC5BbmFseXNpc1RhcmdldCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5Mb2NhdGlvbnMsIHJpZ2h0LkxvY2F0aW9ucykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuTG9jYXRpb25zID09IG51bGwgfHwgcmlnaHQuTG9jYXRpb25zID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKGxlZnQuTG9jYXRpb25zLkNvdW50ICE9IHJpZ2h0LkxvY2F0aW9ucy5Db3VudCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3IgKGludCBpbmRleF8wID0gMDsgaW5kZXhfMCA8IGxlZnQuTG9jYXRpb25zLkNvdW50OyArK2luZGV4XzApDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAoIUxvY2F0aW9uLlZhbHVlQ29tcGFyZXIuRXF1YWxzKGxlZnQuTG9jYXRpb25zW2luZGV4XzBdLCByaWdodC5Mb2NhdGlvbnNbaW5kZXhfMF0pKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0Lkluc3RhbmNlR3VpZCAhPSByaWdodC5JbnN0YW5jZUd1aWQpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobGVmdC5Db3JyZWxhdGlvbkd1aWQgIT0gcmlnaHQuQ29ycmVsYXRpb25HdWlkKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKGxlZnQuUGFydGlhbEZpbmdlcnByaW50cywgcmlnaHQuUGFydGlhbEZpbmdlcnByaW50cykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuUGFydGlhbEZpbmdlcnByaW50cyA9PSBudWxsIHx8IHJpZ2h0LlBhcnRpYWxGaW5nZXJwcmludHMgPT0gbnVsbCB8fCBsZWZ0LlBhcnRpYWxGaW5nZXJwcmludHMuQ291bnQgIT0gcmlnaHQuUGFydGlhbEZpbmdlcnByaW50cy5Db3VudCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMCBpbiBsZWZ0LlBhcnRpYWxGaW5nZXJwcmludHMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBzdHJpbmcgdmFsdWVfMTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyaWdodC5QYXJ0aWFsRmluZ2VycHJpbnRzLlRyeUdldFZhbHVlKHZhbHVlXzAuS2V5LCBvdXQgdmFsdWVfMSkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wLlZhbHVlICE9IHZhbHVlXzEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKGxlZnQuRmluZ2VycHJpbnRzLCByaWdodC5GaW5nZXJwcmludHMpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LkZpbmdlcnByaW50cyA9PSBudWxsIHx8IHJpZ2h0LkZpbmdlcnByaW50cyA9PSBudWxsIHx8IGxlZnQuRmluZ2VycHJpbnRzLkNvdW50ICE9IHJpZ2h0LkZpbmdlcnByaW50cy5Db3VudCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMiBpbiBsZWZ0LkZpbmdlcnByaW50cykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHN0cmluZyB2YWx1ZV8zOw0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJpZ2h0LkZpbmdlcnByaW50cy5UcnlHZXRWYWx1ZSh2YWx1ZV8yLktleSwgb3V0IHZhbHVlXzMpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMi5WYWx1ZSAhPSB2YWx1ZV8zKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhsZWZ0LlN0YWNrcywgcmlnaHQuU3RhY2tzKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5TdGFja3MgPT0gbnVsbCB8fCByaWdodC5TdGFja3MgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5TdGFja3MuQ291bnQgIT0gcmlnaHQuU3RhY2tzLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvciAoaW50IGluZGV4XzEgPSAwOyBpbmRleF8xIDwgbGVmdC5TdGFja3MuQ291bnQ7ICsraW5kZXhfMSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICghU3RhY2suVmFsdWVDb21wYXJlci5FcXVhbHMobGVmdC5TdGFja3NbaW5kZXhfMV0sIHJpZ2h0LlN0YWNrc1tpbmRleF8xXSkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKGxlZnQuQ29kZUZsb3dzLCByaWdodC5Db2RlRmxvd3MpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LkNvZGVGbG93cyA9PSBudWxsIHx8IHJpZ2h0LkNvZGVGbG93cyA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LkNvZGVGbG93cy5Db3VudCAhPSByaWdodC5Db2RlRmxvd3MuQ291bnQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgZm9yIChpbnQgaW5kZXhfMiA9IDA7IGluZGV4XzIgPCBsZWZ0LkNvZGVGbG93cy5Db3VudDsgKytpbmRleF8yKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFDb2RlRmxvdy5WYWx1ZUNvbXBhcmVyLkVxdWFscyhsZWZ0LkNvZGVGbG93c1tpbmRleF8yXSwgcmlnaHQuQ29kZUZsb3dzW2luZGV4XzJdKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5HcmFwaHMsIHJpZ2h0LkdyYXBocykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuR3JhcGhzID09IG51bGwgfHwgcmlnaHQuR3JhcGhzID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKGxlZnQuR3JhcGhzLkNvdW50ICE9IHJpZ2h0LkdyYXBocy5Db3VudCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3IgKGludCBpbmRleF8zID0gMDsgaW5kZXhfMyA8IGxlZnQuR3JhcGhzLkNvdW50OyArK2luZGV4XzMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAoIUdyYXBoLlZhbHVlQ29tcGFyZXIuRXF1YWxzKGxlZnQuR3JhcGhzW2luZGV4XzNdLCByaWdodC5HcmFwaHNbaW5kZXhfM10pKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhsZWZ0LkdyYXBoVHJhdmVyc2FscywgcmlnaHQuR3JhcGhUcmF2ZXJzYWxzKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5HcmFwaFRyYXZlcnNhbHMgPT0gbnVsbCB8fCByaWdodC5HcmFwaFRyYXZlcnNhbHMgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5HcmFwaFRyYXZlcnNhbHMuQ291bnQgIT0gcmlnaHQuR3JhcGhUcmF2ZXJzYWxzLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvciAoaW50IGluZGV4XzQgPSAwOyBpbmRleF80IDwgbGVmdC5HcmFwaFRyYXZlcnNhbHMuQ291bnQ7ICsraW5kZXhfNCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICghR3JhcGhUcmF2ZXJzYWwuVmFsdWVDb21wYXJlci5FcXVhbHMobGVmdC5HcmFwaFRyYXZlcnNhbHNbaW5kZXhfNF0sIHJpZ2h0LkdyYXBoVHJhdmVyc2Fsc1tpbmRleF80XSkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKGxlZnQuUmVsYXRlZExvY2F0aW9ucywgcmlnaHQuUmVsYXRlZExvY2F0aW9ucykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuUmVsYXRlZExvY2F0aW9ucyA9PSBudWxsIHx8IHJpZ2h0LlJlbGF0ZWRMb2NhdGlvbnMgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5SZWxhdGVkTG9jYXRpb25zLkNvdW50ICE9IHJpZ2h0LlJlbGF0ZWRMb2NhdGlvbnMuQ291bnQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgZm9yIChpbnQgaW5kZXhfNSA9IDA7IGluZGV4XzUgPCBsZWZ0LlJlbGF0ZWRMb2NhdGlvbnMuQ291bnQ7ICsraW5kZXhfNSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICghTG9jYXRpb24uVmFsdWVDb21wYXJlci5FcXVhbHMobGVmdC5SZWxhdGVkTG9jYXRpb25zW2luZGV4XzVdLCByaWdodC5SZWxhdGVkTG9jYXRpb25zW2luZGV4XzVdKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobGVmdC5TdXBwcmVzc2lvblN0YXRlcyAhPSByaWdodC5TdXBwcmVzc2lvblN0YXRlcykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0LkJhc2VsaW5lU3RhdGUgIT0gcmlnaHQuQmFzZWxpbmVTdGF0ZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhsZWZ0LkF0dGFjaG1lbnRzLCByaWdodC5BdHRhY2htZW50cykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuQXR0YWNobWVudHMgPT0gbnVsbCB8fCByaWdodC5BdHRhY2htZW50cyA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LkF0dGFjaG1lbnRzLkNvdW50ICE9IHJpZ2h0LkF0dGFjaG1lbnRzLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvciAoaW50IGluZGV4XzYgPSAwOyBpbmRleF82IDwgbGVmdC5BdHRhY2htZW50cy5Db3VudDsgKytpbmRleF82KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFBdHRhY2htZW50LlZhbHVlQ29tcGFyZXIuRXF1YWxzKGxlZnQuQXR0YWNobWVudHNbaW5kZXhfNl0sIHJpZ2h0LkF0dGFjaG1lbnRzW2luZGV4XzZdKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5Xb3JrSXRlbVVyaXMsIHJpZ2h0LldvcmtJdGVtVXJpcykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuV29ya0l0ZW1VcmlzID09IG51bGwgfHwgcmlnaHQuV29ya0l0ZW1VcmlzID09IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKGxlZnQuV29ya0l0ZW1VcmlzLkNvdW50ICE9IHJpZ2h0LldvcmtJdGVtVXJpcy5Db3VudCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3IgKGludCBpbmRleF83ID0gMDsgaW5kZXhfNyA8IGxlZnQuV29ya0l0ZW1VcmlzLkNvdW50OyArK2luZGV4XzcpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAobGVmdC5Xb3JrSXRlbVVyaXNbaW5kZXhfN10gIT0gcmlnaHQuV29ya0l0ZW1VcmlzW2luZGV4XzddKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhsZWZ0LkNvbnZlcnNpb25Qcm92ZW5hbmNlLCByaWdodC5Db252ZXJzaW9uUHJvdmVuYW5jZSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuQ29udmVyc2lvblByb3ZlbmFuY2UgPT0gbnVsbCB8fCByaWdodC5Db252ZXJzaW9uUHJvdmVuYW5jZSA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LkNvbnZlcnNpb25Qcm92ZW5hbmNlLkNvdW50ICE9IHJpZ2h0LkNvbnZlcnNpb25Qcm92ZW5hbmNlLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvciAoaW50IGluZGV4XzggPSAwOyBpbmRleF84IDwgbGVmdC5Db252ZXJzaW9uUHJvdmVuYW5jZS5Db3VudDsgKytpbmRleF84KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFQaHlzaWNhbExvY2F0aW9uLlZhbHVlQ29tcGFyZXIuRXF1YWxzKGxlZnQuQ29udmVyc2lvblByb3ZlbmFuY2VbaW5kZXhfOF0sIHJpZ2h0LkNvbnZlcnNpb25Qcm92ZW5hbmNlW2luZGV4XzhdKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5GaXhlcywgcmlnaHQuRml4ZXMpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LkZpeGVzID09IG51bGwgfHwgcmlnaHQuRml4ZXMgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5GaXhlcy5Db3VudCAhPSByaWdodC5GaXhlcy5Db3VudCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3IgKGludCBpbmRleF85ID0gMDsgaW5kZXhfOSA8IGxlZnQuRml4ZXMuQ291bnQ7ICsraW5kZXhfOSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICghRml4LlZhbHVlQ29tcGFyZXIuRXF1YWxzKGxlZnQuRml4ZXNbaW5kZXhfOV0sIHJpZ2h0LkZpeGVzW2luZGV4XzldKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5Qcm9wZXJ0aWVzLCByaWdodC5Qcm9wZXJ0aWVzKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5Qcm9wZXJ0aWVzID09IG51bGwgfHwgcmlnaHQuUHJvcGVydGllcyA9PSBudWxsIHx8IGxlZnQuUHJvcGVydGllcy5Db3VudCAhPSByaWdodC5Qcm9wZXJ0aWVzLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV80IGluIGxlZnQuUHJvcGVydGllcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8gdmFsdWVfNTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyaWdodC5Qcm9wZXJ0aWVzLlRyeUdldFZhbHVlKHZhbHVlXzQuS2V5LCBvdXQgdmFsdWVfNSkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0LkVxdWFscyh2YWx1ZV80LlZhbHVlLCB2YWx1ZV81KSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBpbnQgR2V0SGFzaENvZGUoUmVzdWx0IG9iaikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKFJlZmVyZW5jZUVxdWFscyhvYmosIG51bGwpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpbnQgcmVzdWx0ID0gMTc7DQogICAgICAgICAgICB1bmNoZWNrZWQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAob2JqLlJ1bGVJZCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5SdWxlSWQuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLkxldmVsLkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgaWYgKG9iai5NZXNzYWdlICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLk1lc3NhZ2UuVmFsdWVHZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouUnVsZU1lc3NhZ2VJZCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5SdWxlTWVzc2FnZUlkLkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKG9iai5BbmFseXNpc1RhcmdldCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5BbmFseXNpc1RhcmdldC5WYWx1ZUdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKG9iai5Mb2NhdGlvbnMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV82IGluIG9iai5Mb2NhdGlvbnMpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIDMxOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzYgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgdmFsdWVfNi5WYWx1ZUdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLkluc3RhbmNlR3VpZCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5JbnN0YW5jZUd1aWQuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLkNvcnJlbGF0aW9uR3VpZCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5Db3JyZWxhdGlvbkd1aWQuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLlBhcnRpYWxGaW5nZXJwcmludHMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIC8vIFVzZSB4b3IgZm9yIGRpY3Rpb25hcmllcyB0byBiZSBvcmRlci1pbmRlcGVuZGVudC4NCiAgICAgICAgICAgICAgICAgICAgaW50IHhvcl8wID0gMDsNCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzcgaW4gb2JqLlBhcnRpYWxGaW5nZXJwcmludHMpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHhvcl8wIF49IHZhbHVlXzcuS2V5LkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfNy5WYWx1ZSAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhvcl8wIF49IHZhbHVlXzcuVmFsdWUuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyB4b3JfMDsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLkZpbmdlcnByaW50cyAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHhvciBmb3IgZGljdGlvbmFyaWVzIHRvIGJlIG9yZGVyLWluZGVwZW5kZW50Lg0KICAgICAgICAgICAgICAgICAgICBpbnQgeG9yXzEgPSAwOw0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfOCBpbiBvYmouRmluZ2VycHJpbnRzKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB4b3JfMSBePSB2YWx1ZV84LktleS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzguVmFsdWUgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4b3JfMSBePSB2YWx1ZV84LlZhbHVlLkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgeG9yXzE7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKG9iai5TdGFja3MgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV85IGluIG9iai5TdGFja3MpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIDMxOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzkgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgdmFsdWVfOS5WYWx1ZUdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLkNvZGVGbG93cyAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzEwIGluIG9iai5Db2RlRmxvd3MpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIDMxOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzEwICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIHZhbHVlXzEwLlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouR3JhcGhzICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMTEgaW4gb2JqLkdyYXBocykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICogMzE7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMTEgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgdmFsdWVfMTEuVmFsdWVHZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKG9iai5HcmFwaFRyYXZlcnNhbHMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8xMiBpbiBvYmouR3JhcGhUcmF2ZXJzYWxzKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKiAzMTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8xMiAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyB2YWx1ZV8xMi5WYWx1ZUdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLlJlbGF0ZWRMb2NhdGlvbnMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8xMyBpbiBvYmouUmVsYXRlZExvY2F0aW9ucykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICogMzE7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMTMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgdmFsdWVfMTMuVmFsdWVHZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5TdXBwcmVzc2lvblN0YXRlcy5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyBvYmouQmFzZWxpbmVTdGF0ZS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIGlmIChvYmouQXR0YWNobWVudHMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8xNCBpbiBvYmouQXR0YWNobWVudHMpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIDMxOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzE0ICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIHZhbHVlXzE0LlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouV29ya0l0ZW1VcmlzICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMTUgaW4gb2JqLldvcmtJdGVtVXJpcykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICogMzE7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMTUgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgdmFsdWVfMTUuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouQ29udmVyc2lvblByb3ZlbmFuY2UgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8xNiBpbiBvYmouQ29udmVyc2lvblByb3ZlbmFuY2UpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIDMxOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzE2ICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIHZhbHVlXzE2LlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouRml4ZXMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8xNyBpbiBvYmouRml4ZXMpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIDMxOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzE3ICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIHZhbHVlXzE3LlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouUHJvcGVydGllcyAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHhvciBmb3IgZGljdGlvbmFyaWVzIHRvIGJlIG9yZGVyLWluZGVwZW5kZW50Lg0KICAgICAgICAgICAgICAgICAgICBpbnQgeG9yXzIgPSAwOw0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMTggaW4gb2JqLlByb3BlcnRpZXMpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHhvcl8yIF49IHZhbHVlXzE4LktleS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzE4LlZhbHVlICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzIgXj0gdmFsdWVfMTguVmFsdWUuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyB4b3JfMjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "9E375847C58469C3FED90AD0AF4C93B6",
              "algorithm": "md5"
            },
            {
              "value": "D281861267B27163CA18CD515FFDBCC41F658602",
              "algorithm": "sha-1"
            },
            {
              "value": "CB574E9BD5EFB0888951B6586ACC91B72B70A3DBAD6CE8419EE0196CF7DB5965",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Rule.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "BF00F24519A56D81CBA532B0710C7A58",
              "algorithm": "md5"
            },
            {
              "value": "F898D7FCFAE05081A777D3F033E17202BC42FF48",
              "algorithm": "sha-1"
            },
            {
              "value": "DF241CACD78F0DDF27C71E700ECCEA3059F41128C4D9758DA1804DB1D5DBFC2A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ReportingConfiguration.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBJbmZvcm1hdGlvbiBhYm91dCBhIHJ1bGUgdGhhdCBjYW4gYmUgY29uZmlndXJlZCBhdCBydW50aW1lLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgUnVsZUNvbmZpZ3VyYXRpb24gOiBJU2FyaWZOb2RlDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPFJ1bGVDb25maWd1cmF0aW9uPiBWYWx1ZUNvbXBhcmVyID0+IFJ1bGVDb25maWd1cmF0aW9uRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhSdWxlQ29uZmlndXJhdGlvbiBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlIiAvPi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTm9kZUtpbmQgU2FyaWZOb2RlS2luZA0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZC5SdWxlQ29uZmlndXJhdGlvbjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBydWxlIHdpbGwgYmUgZXZhbHVhdGVkIGR1cmluZyB0aGUgc2Nhbi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJlbmFibGVkIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgYm9vbCBFbmFibGVkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBTcGVjaWZpZXMgdGhlIGRlZmF1bHQgc2V2ZXJpdHkgbGV2ZWwgb2YgdGhlIHJlc3VsdC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJkZWZhdWx0TGV2ZWwiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBSdWxlQ29uZmlndXJhdGlvbkRlZmF1bHRMZXZlbCBEZWZhdWx0TGV2ZWwgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENvbnRhaW5zIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24gc3BlY2lmaWMgdG8gdGhpcyBydWxlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInBhcmFtZXRlcnMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IFBhcmFtZXRlcnMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlJ1bGVDb25maWd1cmF0aW9uIiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFJ1bGVDb25maWd1cmF0aW9uKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iUnVsZUNvbmZpZ3VyYXRpb24iIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJlbmFibGVkIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBFbmFibGVkIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZGVmYXVsdExldmVsIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBEZWZhdWx0TGV2ZWwiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwYXJhbWV0ZXJzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBQYXJhbWV0ZXJzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBSdWxlQ29uZmlndXJhdGlvbihib29sIGVuYWJsZWQsIFJ1bGVDb25maWd1cmF0aW9uRGVmYXVsdExldmVsIGRlZmF1bHRMZXZlbCwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwYXJhbWV0ZXJzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KGVuYWJsZWQsIGRlZmF1bHRMZXZlbCwgcGFyYW1ldGVycyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJSdWxlQ29uZmlndXJhdGlvbiIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgUnVsZUNvbmZpZ3VyYXRpb24oUnVsZUNvbmZpZ3VyYXRpb24gb3RoZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChvdGhlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG90aGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEluaXQob3RoZXIuRW5hYmxlZCwgb3RoZXIuRGVmYXVsdExldmVsLCBvdGhlci5QYXJhbWV0ZXJzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgUnVsZUNvbmZpZ3VyYXRpb24gRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIChSdWxlQ29uZmlndXJhdGlvbilEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgUnVsZUNvbmZpZ3VyYXRpb24odGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChib29sIGVuYWJsZWQsIFJ1bGVDb25maWd1cmF0aW9uRGVmYXVsdExldmVsIGRlZmF1bHRMZXZlbCwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwYXJhbWV0ZXJzKQ0KICAgICAgICB7DQogICAgICAgICAgICBFbmFibGVkID0gZW5hYmxlZDsNCiAgICAgICAgICAgIERlZmF1bHRMZXZlbCA9IGRlZmF1bHRMZXZlbDsNCiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUGFyYW1ldGVycyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4ocGFyYW1ldGVycyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "62C3B6D82E1638BEF4D4DF893034A729",
              "algorithm": "md5"
            },
            {
              "value": "73A324FEB1351A041D54A253499089CBD15368DF",
              "algorithm": "sha-1"
            },
            {
              "value": "D42411545783351B503C120EAF43D6EFE2B89F16D7364947613E4199CB9618F1",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/RuleEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "EC13AE1A8D21D2810A305AD5675690F1",
              "algorithm": "md5"
            },
            {
              "value": "0B68D73934671D23230105E9EF0CEC9DF89B78BE",
              "algorithm": "sha-1"
            },
            {
              "value": "6F80EEF3B1FF6629273EA07C293DA27AC3568EE3E7BB472662F9DA2C28F5054D",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/RuleUtilities.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SZXNvdXJjZXM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgcHVibGljIHN0YXRpYyBjbGFzcyBSdWxlVXRpbGl0aWVzDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIFJlc3VsdCBCdWlsZFJlc3VsdChSZXN1bHRMZXZlbCBsZXZlbCwgSUFuYWx5c2lzQ29udGV4dCBjb250ZXh0LCBSZWdpb24gcmVnaW9uLCBzdHJpbmcgcnVsZU1lc3NhZ2VJZCwgcGFyYW1zIHN0cmluZ1tdIGFyZ3VtZW50cykNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihjb250ZXh0KSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChhcmd1bWVudHMgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihhcmd1bWVudHMpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcnVsZU1lc3NhZ2VJZCA9IE5vcm1hbGl6ZVJ1bGVNZXNzYWdlSWQocnVsZU1lc3NhZ2VJZCwgY29udGV4dC5SdWxlLklkKTsNCg0KICAgICAgICAgICAgUmVzdWx0IHJlc3VsdCA9IG5ldyBSZXN1bHQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBSdWxlSWQgPSBjb250ZXh0LlJ1bGUuSWQsDQogICAgICAgICAgICAgICAgUnVsZU1lc3NhZ2VJZCA9IHJ1bGVNZXNzYWdlSWQsDQoNCiAgICAgICAgICAgICAgICBNZXNzYWdlID0gbmV3IE1lc3NhZ2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIEFyZ3VtZW50cyA9IGFyZ3VtZW50cw0KICAgICAgICAgICAgICAgIH0sDQoNCiAgICAgICAgICAgICAgICBMZXZlbCA9IGxldmVsDQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBzdHJpbmcgdGFyZ2V0UGF0aCA9IGNvbnRleHQuVGFyZ2V0VXJpPy5Mb2NhbFBhdGg7DQogICAgICAgICAgICBpZiAodGFyZ2V0UGF0aCAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJlc3VsdC5Mb2NhdGlvbnMgPSBuZXcgTGlzdDxMb2NhdGlvbj4gew0KICAgICAgICAgICAgICAgICAgICBuZXcgU2FyaWYuTG9jYXRpb24gew0KICAgICAgICAgICAgICAgICAgICAgICAgUGh5c2ljYWxMb2NhdGlvbiA9IG5ldyBQaHlzaWNhbExvY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUxvY2F0aW9uID0gbmV3IEZpbGVMb2NhdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXJpID0gbmV3IFVyaSh0YXJnZXRQYXRoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVnaW9uID0gcmVnaW9uDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobGV2ZWwgPT0gUmVzdWx0TGV2ZWwuV2FybmluZykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjb250ZXh0LlJ1bnRpbWVFcnJvcnMgfD0gUnVudGltZUNvbmRpdGlvbnMuT25lT3JNb3JlV2FybmluZ3NGaXJlZDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGxldmVsID09IFJlc3VsdExldmVsLkVycm9yKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGNvbnRleHQuUnVudGltZUVycm9ycyB8PSBSdW50aW1lQ29uZGl0aW9ucy5PbmVPck1vcmVFcnJvcnNGaXJlZDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gQnVpbGREaWN0aW9uYXJ5KA0KICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyIHJlc291cmNlTWFuYWdlciwgDQogICAgICAgICAgICBJRW51bWVyYWJsZTxzdHJpbmc+IHJlc291cmNlTmFtZXMsIA0KICAgICAgICAgICAgc3RyaW5nIHJ1bGVJZCwNCiAgICAgICAgICAgIHN0cmluZyBwcmVmaXggPSBudWxsKQ0KICAgICAgICB7DQogICAgICAgICAgICAvL3ZhbGlkYXRpb24NCiAgICAgICAgICAgIGlmIChyZXNvdXJjZU5hbWVzID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2YocmVzb3VyY2VOYW1lcykpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAocmVzb3VyY2VNYW5hZ2VyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2YocmVzb3VyY2VNYW5hZ2VyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIE5vdGUgdGhpcyBkaWN0aW9uYXJ5IHByb3ZpZGVzIGZvciBjYXNlLWluc2Vuc2l0aXZlIGtleXMNCiAgICAgICAgICAgIHZhciBkaWN0aW9uYXJ5ID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KFN0cmluZ0NvbXBhcmVyLk9yZGluYWxJZ25vcmVDYXNlKTsNCg0KICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIHJlc291cmNlTmFtZSBpbiByZXNvdXJjZU5hbWVzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0cmluZyByZXNvdXJjZVZhbHVlID0gcmVzb3VyY2VNYW5hZ2VyLkdldFN0cmluZyhyZXNvdXJjZU5hbWUpOw0KDQogICAgICAgICAgICAgICAgc3RyaW5nIG5vcm1hbGl6ZWRSZXNvdXJjZU5hbWUgPSBOb3JtYWxpemVSdWxlTWVzc2FnZUlkKHJlc291cmNlTmFtZSwgcnVsZUlkLCBwcmVmaXgpOw0KDQogICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byB1c2UgdGhlIG5vbi1ub3JtYWxpemVkIGtleSB0byByZXRyaWV2ZSB0aGUgcmVzb3VyY2UgdmFsdWUNCiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5W25vcm1hbGl6ZWRSZXNvdXJjZU5hbWVdID0gcmVzb3VyY2VWYWx1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gV2UgbmVlZCB0byByZXR1cm4gbnVsbCBoZXJlLCBvdGhlcndpc2UgdGhpcyBlbXB0eSBkaWN0aW9uYXJ5IHdpbGwgc2VyaWFsaXplIHRvIFNBUklGIGxvZ3MgdW5uZWNlc3NhcmlseQ0KICAgICAgICAgICAgcmV0dXJuIGRpY3Rpb25hcnkuQ291bnQgPiAwID8gZGljdGlvbmFyeSA6IG51bGw7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBOb3JtYWxpemVSdWxlTWVzc2FnZUlkKHN0cmluZyBydWxlTWVzc2FnZUlkLCBzdHJpbmcgcnVsZUlkLCBzdHJpbmcgcHJlZml4ID0gbnVsbCkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHJ1bGVNZXNzYWdlSWQgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihydWxlTWVzc2FnZUlkKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkocnVsZUlkKSAmJiBydWxlTWVzc2FnZUlkLlN0YXJ0c1dpdGgocnVsZUlkICsgIl8iLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWwpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJ1bGVNZXNzYWdlSWQgPSBydWxlTWVzc2FnZUlkLlN1YnN0cmluZyhydWxlSWQuTGVuZ3RoICsgMSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkocHJlZml4KSAmJiBydWxlTWVzc2FnZUlkLlN0YXJ0c1dpdGgocHJlZml4ICsgIl8iLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWwpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJ1bGVNZXNzYWdlSWQgPSBydWxlTWVzc2FnZUlkLlN1YnN0cmluZyhwcmVmaXguTGVuZ3RoICsgMSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBydWxlTWVzc2FnZUlkOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "93684A7440017F05201F4E29606EBBA4",
              "algorithm": "md5"
            },
            {
              "value": "5570AE316F9E61559C61CA3875F9A6B688D96851",
              "algorithm": "sha-1"
            },
            {
              "value": "8EA29232B592730E588E478B29E3F10503AEC1171CA58A9BEBA284525A41DA5F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "F00F5FA48C2DEAE37D498B1238BB07A9",
              "algorithm": "md5"
            },
            {
              "value": "E9116997B69DBFB201A9C4D0A9868B21AEB76554",
              "algorithm": "sha-1"
            },
            {
              "value": "67221D94750490357A78124536512D96FFD610C2F0040F083AF8EC36B37FAF5F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/RunEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "6D64C3708F7D38563D5FE9A6EE16B681",
              "algorithm": "md5"
            },
            {
              "value": "AD113B252659D032AD08B61365530C48921DB311",
              "algorithm": "sha-1"
            },
            {
              "value": "1C4991D7993C768215A508CE4BBFECD2F2510402E5FBB5F00CCB0D701DB14D54",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/SarifLog.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBTdGF0aWMgQW5hbHlzaXMgUmVzdWx0cyBGb3JtYXQgKFNBUklGKSBWZXJzaW9uIDIuMC4wIEpTT04gU2NoZW1hOiBhIHN0YW5kYXJkIGZvcm1hdCBmb3IgdGhlIG91dHB1dCBvZiBzdGF0aWMgYW5hbHlzaXMgYW5kIG90aGVyIHRvb2xzLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgU2FyaWZMb2cgOiBJU2FyaWZOb2RlDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPFNhcmlmTG9nPiBWYWx1ZUNvbXBhcmVyID0+IFNhcmlmTG9nRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhTYXJpZkxvZyBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlIiAvPi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTm9kZUtpbmQgU2FyaWZOb2RlS2luZA0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZC5TYXJpZkxvZzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBVUkkgb2YgdGhlIEpTT04gc2NoZW1hIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHZlcnNpb24uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiJHNjaGVtYSIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIFVyaSBTY2hlbWFVcmkgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBTQVJJRiBmb3JtYXQgdmVyc2lvbiBvZiB0aGlzIGxvZyBmaWxlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInZlcnNpb24iLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBTYXJpZlZlcnNpb24gVmVyc2lvbiB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIHNldCBvZiBydW5zIGNvbnRhaW5lZCBpbiB0aGlzIGxvZyBmaWxlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInJ1bnMiLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxSdW4+IFJ1bnMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlNhcmlmTG9nIiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTG9nKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iU2FyaWZMb2ciIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJzY2hlbWFVcmkiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFNjaGVtYVVyaSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InZlcnNpb24iPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFZlcnNpb24iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJydW5zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBSdW5zIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBTYXJpZkxvZyhVcmkgc2NoZW1hVXJpLCBTYXJpZlZlcnNpb24gdmVyc2lvbiwgSUVudW1lcmFibGU8UnVuPiBydW5zKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KHNjaGVtYVVyaSwgdmVyc2lvbiwgcnVucyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJTYXJpZkxvZyIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgU2FyaWZMb2coU2FyaWZMb2cgb3RoZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChvdGhlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG90aGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEluaXQob3RoZXIuU2NoZW1hVXJpLCBvdGhlci5WZXJzaW9uLCBvdGhlci5SdW5zKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZMb2cgRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIChTYXJpZkxvZylEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgU2FyaWZMb2codGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChVcmkgc2NoZW1hVXJpLCBTYXJpZlZlcnNpb24gdmVyc2lvbiwgSUVudW1lcmFibGU8UnVuPiBydW5zKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoc2NoZW1hVXJpICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgU2NoZW1hVXJpID0gbmV3IFVyaShzY2hlbWFVcmkuT3JpZ2luYWxTdHJpbmcsIHNjaGVtYVVyaS5Jc0Fic29sdXRlVXJpID8gVXJpS2luZC5BYnNvbHV0ZSA6IFVyaUtpbmQuUmVsYXRpdmUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBWZXJzaW9uID0gdmVyc2lvbjsNCiAgICAgICAgICAgIGlmIChydW5zICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzAgPSBuZXcgTGlzdDxSdW4+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gcnVucykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobmV3IFJ1bih2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBSdW5zID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "C3915E9BC79377B9E4D62934A98D038E",
              "algorithm": "md5"
            },
            {
              "value": "2A76711731CEC006916E528D8BEEC06B73FCB18C",
              "algorithm": "sha-1"
            },
            {
              "value": "AA817B0C2D84D1FB27E3C6921F117482DA2F45C60532DD94D660637934AD686A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/SarifRewritingVisitor.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "255FED93CB148C33831A7DDE0968654C",
              "algorithm": "md5"
            },
            {
              "value": "73956B7D814430A63C53931B8F9282020C4061FB",
              "algorithm": "sha-1"
            },
            {
              "value": "7F6A1759D284B096905C58C2FE1F22D1FE388E9F2E4267EB3C81D94074B633C8",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "A9AFF0B515C8A296DD1914464D70C1EF",
              "algorithm": "md5"
            },
            {
              "value": "E35835099F8BF83F3CF06FD7CF756AD4C0659E38",
              "algorithm": "sha-1"
            },
            {
              "value": "921EF3620C4C06B60271DB98B2840A8917E242F82D7C4B9947FC88B750543E1F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/SarifUtilitiesVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmU7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgcHVibGljIHN0YXRpYyBjbGFzcyBTYXJpZlV0aWxpdGllc1ZlcnNpb25PbmUNCiAgICB7DQogICAgICAgIHByaXZhdGUgY29uc3Qgc3RyaW5nIFYxXzBfMCA9ICIxLjAuMCI7DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgQ29udmVydFRvVGV4dCh0aGlzIFNhcmlmVmVyc2lvblZlcnNpb25PbmUgc2FyaWZWZXJzaW9uKQ0KICAgICAgICB7DQogICAgICAgICAgICBzd2l0Y2ggKHNhcmlmVmVyc2lvbikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjYXNlIFNhcmlmVmVyc2lvblZlcnNpb25PbmUuT25lWmVyb1plcm86DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBWMV8wXzA7DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKCJVbnN1cHBvcnRlZCBTQVJJRiB2ZXJzaW9uIiwgbmFtZW9mKHNhcmlmVmVyc2lvbikpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBVcmkgQ29udmVydFRvU2NoZW1hVXJpKHRoaXMgU2FyaWZWZXJzaW9uVmVyc2lvbk9uZSBzYXJpZlZlcnNpb24pDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgVXJpKCJodHRwOi8vanNvbi5zY2hlbWFzdG9yZS5vcmcvc2FyaWYtIiArIHNhcmlmVmVyc2lvbi5Db252ZXJ0VG9UZXh0KCksIFVyaUtpbmQuQWJzb2x1dGUpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "A52EB971CECB082E88FB3926503B4AA4",
              "algorithm": "md5"
            },
            {
              "value": "061C7EFC892A655AB56CEC80929E858C95A9A0CC",
              "algorithm": "sha-1"
            },
            {
              "value": "90E582F79B8D7E0B7D884E1E13377363A523E97561C74DA8D4D68BDFC77D4A56",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Stack.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBBIGNhbGwgc3RhY2sgdGhhdCBpcyByZWxldmFudCB0byBhIHJlc3VsdC4NCiAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgIFtEYXRhQ29udHJhY3RdDQogICAgW0dlbmVyYXRlZENvZGUoIk1pY3Jvc29mdC5Kc29uLlNjaGVtYS5Ub0RvdE5ldCIsICIwLjU2LjAuMCIpXQ0KICAgIHB1YmxpYyBwYXJ0aWFsIGNsYXNzIFN0YWNrIDogUHJvcGVydHlCYWdIb2xkZXIsIElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8U3RhY2s+IFZhbHVlQ29tcGFyZXIgPT4gU3RhY2tFcXVhbGl0eUNvbXBhcmVyLkluc3RhbmNlOw0KDQogICAgICAgIHB1YmxpYyBib29sIFZhbHVlRXF1YWxzKFN0YWNrIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLlN0YWNrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBtZXNzYWdlIHJlbGV2YW50IHRvIHRoaXMgY2FsbCBzdGFjay4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJtZXNzYWdlIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgTWVzc2FnZSBNZXNzYWdlIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiBzdGFjayBmcmFtZXMgdGhhdCByZXByZXNlbnQgYSBzZXF1ZW5jZSBvZiBjYWxscywgcmVuZGVyZWQgaW4gcmV2ZXJzZSBjaHJvbm9sb2dpY2FsIG9yZGVyLCB0aGF0IGNvbXByaXNlIHRoZSBjYWxsIHN0YWNrLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImZyYW1lcyIsIElzUmVxdWlyZWQgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIElMaXN0PFN0YWNrRnJhbWU+IEZyYW1lcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gS2V5L3ZhbHVlIHBhaXJzIHRoYXQgcHJvdmlkZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzdGFjay4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJwcm9wZXJ0aWVzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBpbnRlcm5hbCBvdmVycmlkZSBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IFByb3BlcnRpZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlN0YWNrIiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFN0YWNrKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iU3RhY2siIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJtZXNzYWdlIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBNZXNzYWdlIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZnJhbWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBGcmFtZXMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwcm9wZXJ0aWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBQcm9wZXJ0aWVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBTdGFjayhNZXNzYWdlIG1lc3NhZ2UsIElFbnVtZXJhYmxlPFN0YWNrRnJhbWU+IGZyYW1lcywgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KG1lc3NhZ2UsIGZyYW1lcywgcHJvcGVydGllcyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJTdGFjayIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgU3RhY2soU3RhY2sgb3RoZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChvdGhlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG90aGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEluaXQob3RoZXIuTWVzc2FnZSwgb3RoZXIuRnJhbWVzLCBvdGhlci5Qcm9wZXJ0aWVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU3RhY2sgRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIChTdGFjaylEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhY2sodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChNZXNzYWdlIG1lc3NhZ2UsIElFbnVtZXJhYmxlPFN0YWNrRnJhbWU+IGZyYW1lcywgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAobWVzc2FnZSAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIE1lc3NhZ2UgPSBuZXcgTWVzc2FnZShtZXNzYWdlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGZyYW1lcyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbl8wID0gbmV3IExpc3Q8U3RhY2tGcmFtZT4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMCBpbiBmcmFtZXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG5ldyBTdGFja0ZyYW1lKHZhbHVlXzApKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIEZyYW1lcyA9IGRlc3RpbmF0aW9uXzA7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUHJvcGVydGllcyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4ocHJvcGVydGllcyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "6D7567EB0BC943A322E6767C737F4364",
              "algorithm": "md5"
            },
            {
              "value": "7F077705D9925C54A711E91257D05BC7E8EFA538",
              "algorithm": "sha-1"
            },
            {
              "value": "875D49CFC9CC3400FB2338FAE54E8203542CDA4F1EFAB1B6A4CA04B482BCA4A8",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Stack.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7DQp1c2luZyBTeXN0ZW0uVGV4dDsNCnVzaW5nIFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNzaW9uczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICBwdWJsaWMgZW51bSBTdGFja0Zvcm1hdA0KICAgIHsNCiAgICAgICAgRGVmYXVsdCwNCiAgICAgICAgVHJhaWxpbmdOZXdMaW5lDQogICAgfQ0KDQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBBIGNhbGwgc3RhY2sgcmVsZXZhbnQgdG8gYSBTQVJJRiByZXN1bHQuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBTdGFjaw0KICAgIHsNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlIG9uZSBvciBtb3JlIFN0YWNrIGluc3RhbmNlcyBmcm9tIGEgLk5FVCBleGNlcHRpb24uIENhcHR1cmVzDQogICAgICAgIC8vLyBpbm5lciBleGNlcHRpb25zIGFuZCBoYW5kbGVzIGFnZ3JlZ2F0ZWQgZXhjZXB0aW9ucy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJleGNlcHRpb24iPjwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSVNldDxTdGFjaz4gQ3JlYXRlU3RhY2tzKEV4Y2VwdGlvbiBleGNlcHRpb24pDQogICAgICAgIHsNCiAgICAgICAgICAgIEhhc2hTZXQ8U3RhY2s+IHN0YWNrczsNCiAgICAgICAgICAgIFF1ZXVlPEV4Y2VwdGlvbj4gZXhjZXB0aW9uczsNCg0KICAgICAgICAgICAgc3RhY2tzID0gbmV3IEhhc2hTZXQ8U3RhY2s+KCk7DQogICAgICAgICAgICBleGNlcHRpb25zID0gbmV3IFF1ZXVlPEV4Y2VwdGlvbj4obmV3IEV4Y2VwdGlvbltdIHsgZXhjZXB0aW9uIH0pOw0KDQogICAgICAgICAgICB3aGlsZSAoZXhjZXB0aW9ucy5Db3VudCA+IDApDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgU3RhY2sgc3RhY2s7DQogICAgICAgICAgICAgICAgRXhjZXB0aW9uIGN1cnJlbnQ7DQoNCiAgICAgICAgICAgICAgICBjdXJyZW50ID0gZXhjZXB0aW9ucy5EZXF1ZXVlKCk7DQoNCiAgICAgICAgICAgICAgICB2YXIgYWdncmVnYXRlZCA9IGN1cnJlbnQgYXMgQWdncmVnYXRlRXhjZXB0aW9uOw0KICAgICAgICAgICAgICAgIGlmIChhZ2dyZWdhdGVkICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoIChFeGNlcHRpb24gZSBpbiBhZ2dyZWdhdGVkLklubmVyRXhjZXB0aW9ucykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9ucy5FbnF1ZXVlKGUpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIC8vIEFnZ3JlZ2F0ZWRFeGNlcHRpb25zIHN1cmZhY2UgdGhlIGZpcnN0IGV4Y2VwdGlvbg0KICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGUgYWdncmVnYXRpb24gYXMgSW5uZXJFeGNlcHRpb24sIHNvIHdlIGRvbid0DQogICAgICAgICAgICAgICAgICAgIC8vIHJlZXhhbWluZSB0aGlzIHByb3BlcnR5IGZvciB0aGF0IGV4Y2VwdGlvbiB0eXBlIChhcw0KICAgICAgICAgICAgICAgICAgICAvLyBpdCBpcyBhbHJlYWR5IGVucXVldWVkIGZyb20gaW5zcGVjdGluZyBJbm5lckV4Y2VwdGlvbnMpLg0KICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5Jbm5lckV4Y2VwdGlvbiAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHRpb25zLkVucXVldWUoY3VycmVudC5Jbm5lckV4Y2VwdGlvbik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBzdGFjayA9IENyZWF0ZShjdXJyZW50LlN0YWNrVHJhY2UpOw0KDQogICAgICAgICAgICAgICAgc3RhY2suTWVzc2FnZSA9IG5ldyBNZXNzYWdlIHsgVGV4dCA9IGN1cnJlbnQuRm9ybWF0TWVzc2FnZSgpIH07DQoNCiAgICAgICAgICAgICAgICBzdGFja3MuQWRkKHN0YWNrKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHN0YWNrczsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBTQVJJRiBTdGFjayBpbnN0YW5jZSBmcm9tIGEgLk5FVCBTdGFja1RyYWNlIGluc3RhbmNlDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ic3RhY2tUcmFjZSI+PC9wYXJhbT4NCiAgICAgICAgcHVibGljIFN0YWNrKFN0YWNrVHJhY2Ugc3RhY2tUcmFjZSkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHN0YWNrVHJhY2UuRnJhbWVDb3VudCA9PSAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdGhpcy5GcmFtZXMgPSBuZXcgU3RhY2tGcmFtZVtzdGFja1RyYWNlLkZyYW1lQ291bnRdOw0KDQogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHN0YWNrVHJhY2UuRnJhbWVDb3VudDsgaSsrKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRoaXMuRnJhbWVzW2ldID0gU3RhY2tGcmFtZS5DcmVhdGUoc3RhY2tUcmFjZS5HZXRGcmFtZShpKSk7ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIFNBUklGIFN0YWNrIGluc3RhbmNlIGZyb20gYSAuTkVUIFN0YWNrVHJhY2UNCiAgICAgICAgLy8vIHRleHQgcmVwcmVzZW50YXRpb24gKGFzIHJldHVybmVkIGJ5IFN0YWNrVHJhY2UuVG9TdHJpbmcoKSkNCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJzdGFja1RyYWNlIj48L3BhcmFtPg0KICAgICAgICBwdWJsaWMgc3RhdGljIFN0YWNrIENyZWF0ZShzdHJpbmcgc3RhY2tUcmFjZSkNCiAgICAgICAgew0KICAgICAgICAgICAgU3RhY2sgc3RhY2sgPSBuZXcgU3RhY2soKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHN0YWNrVHJhY2UpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBzdGFjazsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgc3RhY2suRnJhbWVzID0gbmV3IExpc3Q8U3RhY2tGcmFtZT4oKTsNCg0KICAgICAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ2V4KFN0YWNrRnJhbWUuQVQgKyBAIihbXildK1wpKSgiICsgU3RhY2tGcmFtZS5JTiArIEAiKFteOl0rOlteOl0rKSIgKyBTdGFja0ZyYW1lLkxJTkUgKyBAIiAoLiopKT8iLCBSZWdleE9wdGlvbnMuQ29tcGlsZWQpOw0KDQogICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgbGluZSBpbiBzdGFja1RyYWNlLlNwbGl0KG5ldyBzdHJpbmdbXSB7IEVudmlyb25tZW50Lk5ld0xpbmUgfSwgU3RyaW5nU3BsaXRPcHRpb25zLk5vbmUpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIGF0IFR5cGUuTWV0aG9kKCkgaW4gRmlsZS5jcyA6IGxpbmUgWA0KICAgICAgICAgICAgICAgIHN0cmluZyBjdXJyZW50ID0gbGluZTsNCg0KICAgICAgICAgICAgICAgIHZhciBzdGFja0ZyYW1lID0gbmV3IFN0YWNrRnJhbWUoKTsNCg0KICAgICAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gcmVnZXguTWF0Y2gobGluZSk7DQoNCiAgICAgICAgICAgICAgICBpZiAobWF0Y2guU3VjY2VzcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHN0YWNrRnJhbWUuTG9jYXRpb24gPSBuZXcgTG9jYXRpb24NCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgRnVsbHlRdWFsaWZpZWRMb2dpY2FsTmFtZSA9IG1hdGNoLkdyb3Vwc1sxXS5WYWx1ZQ0KICAgICAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgICAgIGlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkobWF0Y2guR3JvdXBzWzJdLlZhbHVlKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGZpbGVOYW1lID0gbWF0Y2guR3JvdXBzWzNdLlZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgaW50IGxpbmVOdW1iZXIgPSBpbnQuUGFyc2UobWF0Y2guR3JvdXBzWzRdLlZhbHVlKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tGcmFtZS5Mb2NhdGlvbi5QaHlzaWNhbExvY2F0aW9uID0gbmV3IFBoeXNpY2FsTG9jYXRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlTG9jYXRpb24gPSBuZXcgRmlsZUxvY2F0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcmkgPSBuZXcgVXJpKGZpbGVOYW1lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVnaW9uID0gbmV3IFJlZ2lvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRMaW5lID0gbGluZU51bWJlcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc3RhY2suRnJhbWVzLkFkZChzdGFja0ZyYW1lKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHN0YWNrOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBUb1N0cmluZygpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBUb1N0cmluZyhTdGFja0Zvcm1hdC5EZWZhdWx0KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdHJpbmcgVG9TdHJpbmcoU3RhY2tGb3JtYXQgc3RhY2tGb3JtYXQpDQogICAgICAgIHsgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKHRoaXMuRnJhbWVzID09IG51bGwpIHsgcmV0dXJuICJbTm8gZnJhbWVzXSI7IH0NCg0KICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKDI1NSk7DQoNCiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5GcmFtZXMuQ291bnQ7IGkrKykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBTdGFja0ZyYW1lIHNmID0gdGhpcy5GcmFtZXNbaV07DQoNCiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHsgc2IuQXBwZW5kTGluZSgpOyB9DQoNCiAgICAgICAgICAgICAgICBzYi5BcHBlbmQoc2YuVG9TdHJpbmcoKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChzdGFja0Zvcm1hdCA9PSBTdGFja0Zvcm1hdC5UcmFpbGluZ05ld0xpbmUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc2IuQXBwZW5kTGluZSgpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gc2IuVG9TdHJpbmcoKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "003A4944A3F8358DEA2C829BCF6BE977",
              "algorithm": "md5"
            },
            {
              "value": "2B9A9B3BB1A863ED99A2BBDB38F8198FE1E720C6",
              "algorithm": "sha-1"
            },
            {
              "value": "8C61D5F8E47506D922926A94C1B63E4BA25708CE94AE58A4F7F06A3B54174DFB",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/StackFrame.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "FA317DA44D9253A2A1AE95D49840AF68",
              "algorithm": "md5"
            },
            {
              "value": "5CC77B8B5A3DA5C69E24AEE0A5E5CA395AA75B76",
              "algorithm": "sha-1"
            },
            {
              "value": "26A00A72CF23C804DC31153626C35F110FAD59B623184BA8AC20AB559C7A79D6",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Core/StackFrame.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkdsb2JhbGl6YXRpb247DQp1c2luZyBTeXN0ZW0uUmVmbGVjdGlvbjsNCnVzaW5nIFN5c3RlbS5UZXh0Ow0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZg0Kew0KICAgIC8vLyA8c3VtbWFyeT4NCiAgICAvLy8gQSBzdGFjayBmcmFtZSBvZiBhIFNBUklGIHN0YWNrLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgU3RhY2tGcmFtZQ0KICAgIHsNCiAgICAgICAgaW50ZXJuYWwgY29uc3Qgc3RyaW5nIElOID0gIiBpbiAiOw0KICAgICAgICBpbnRlcm5hbCBjb25zdCBzdHJpbmcgQVQgPSAiICAgYXQgIjsNCiAgICAgICAgaW50ZXJuYWwgY29uc3Qgc3RyaW5nIExJTkUgPSAiOmxpbmUiOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBTQVJJRiBTdGFja0ZyYW1lIGluc3RhbmNlIGZyb20gYSAuTkVUIFN0YWNrRnJhbWUgaW5zdGFuY2UNCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJzdGFja1RyYWNlIj48L3BhcmFtPg0KICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPg0KICAgICAgICBwdWJsaWMgc3RhdGljIFN0YWNrRnJhbWUgQ3JlYXRlKFN5c3RlbS5EaWFnbm9zdGljcy5TdGFja0ZyYW1lIGRvdE5ldFN0YWNrRnJhbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vIFRoaXMgdmFsdWUgaXMgLTEgaWYgbm90IHByZXNlbnQNCiAgICAgICAgICAgIGludCBpbE9mZnNldCA9IGRvdE5ldFN0YWNrRnJhbWUuR2V0SUxPZmZzZXQoKTsNCiAgICAgICAgICAgIHN0cmluZyBmaWxlTmFtZSA9IGRvdE5ldFN0YWNrRnJhbWUuR2V0RmlsZU5hbWUoKTsNCiAgICAgICAgICAgIGludCBuYXRpdmVPZmZzZXQgPSBkb3ROZXRTdGFja0ZyYW1lLkdldE5hdGl2ZU9mZnNldCgpOw0KICAgICAgICAgICAgTWV0aG9kQmFzZSBtZXRob2RCYXNlID0gZG90TmV0U3RhY2tGcmFtZS5HZXRNZXRob2QoKTsNCiAgICAgICAgICAgIEFzc2VtYmx5IGFzc2VtYmx5ID0gbWV0aG9kQmFzZT8uRGVjbGFyaW5nVHlwZS5Bc3NlbWJseTsNCiAgICAgICAgICAgIHN0cmluZyBmdWxseVF1YWxpZmllZE5hbWUgPSBDcmVhdGVGdWxseVF1YWxpZmllZE5hbWUobWV0aG9kQmFzZSk7DQoNCiAgICAgICAgICAgIFN0YWNrRnJhbWUgc3RhY2tGcmFtZSA9IG5ldyBTdGFja0ZyYW1lDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTW9kdWxlID0gYXNzZW1ibHk/LkdldE5hbWUoKS5OYW1lLA0KICAgICAgICAgICAgICAgIExvY2F0aW9uID0gbmV3IExvY2F0aW9uDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBGdWxseVF1YWxpZmllZExvZ2ljYWxOYW1lID0gZnVsbHlRdWFsaWZpZWROYW1lDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgaWYgKGZpbGVOYW1lICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RhY2tGcmFtZS5Mb2NhdGlvbiA9IG5ldyBMb2NhdGlvbg0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgUGh5c2ljYWxMb2NhdGlvbiA9IG5ldyBQaHlzaWNhbExvY2F0aW9uDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVMb2NhdGlvbiA9IG5ldyBGaWxlTG9jYXRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcmkgPSBuZXcgVXJpKGZpbGVOYW1lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIFJlZ2lvbiA9IG5ldyBSZWdpb24NCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGFydExpbmUgPSBkb3ROZXRTdGFja0ZyYW1lLkdldEZpbGVMaW5lTnVtYmVyKCksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRDb2x1bW4gPSBkb3ROZXRTdGFja0ZyYW1lLkdldEZpbGVDb2x1bW5OdW1iZXIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGlsT2Zmc2V0ICE9IC0xKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0YWNrRnJhbWUuT2Zmc2V0ID0gaWxPZmZzZXQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChuYXRpdmVPZmZzZXQgIT0gLTEpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RhY2tGcmFtZS5TZXRQcm9wZXJ0eSgiTmF0aXZlT2Zmc2V0IiwgbmF0aXZlT2Zmc2V0LlRvU3RyaW5nKEN1bHR1cmVJbmZvLkludmFyaWFudEN1bHR1cmUpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHN0YWNrRnJhbWU7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIFRvU3RyaW5nKCkNCiAgICAgICAgew0KICAgICAgICAgICAgc3RyaW5nIHJlc3VsdCA9IEFUICsgdGhpcy5Mb2NhdGlvbj8uRnVsbHlRdWFsaWZpZWRMb2dpY2FsTmFtZTsNCg0KICAgICAgICAgICAgaWYgKHRoaXMuTG9jYXRpb24/LlBoeXNpY2FsTG9jYXRpb24/LkZpbGVMb2NhdGlvbj8uVXJpICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIGZpbGVOYW1lID0gdGhpcy5Mb2NhdGlvbi5QaHlzaWNhbExvY2F0aW9uLkZpbGVMb2NhdGlvbi5VcmkuTG9jYWxQYXRoOw0KICAgICAgICAgICAgICAgIHJlc3VsdCArPSBJTiArIGZpbGVOYW1lOw0KDQogICAgICAgICAgICAgICAgaWYgKHRoaXMuTG9jYXRpb24/LlBoeXNpY2FsTG9jYXRpb24/LlJlZ2lvbiAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGxpbmVOdW1iZXIgPSB0aGlzLkxvY2F0aW9uLlBoeXNpY2FsTG9jYXRpb24uUmVnaW9uLlN0YXJ0TGluZS5Ub1N0cmluZyhDdWx0dXJlSW5mby5JbnZhcmlhbnRDdWx0dXJlKTsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IExJTkUgKyAiICIgKyBsaW5lTnVtYmVyOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBDcmVhdGVGdWxseVF1YWxpZmllZE5hbWUoTWV0aG9kQmFzZSBtZXRob2RCYXNlKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAobWV0aG9kQmFzZSA9PSBudWxsKSB7IHJldHVybiBudWxsOyAgfQ0KDQogICAgICAgICAgICB2YXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigpOw0KDQogICAgICAgICAgICBUeXBlIHR5cGUgPSBtZXRob2RCYXNlLkRlY2xhcmluZ1R5cGU7DQogICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIHR5cGUgKG5vbiBnbG9iYWwgbWV0aG9kKSBwcmludCBpdA0KICAgICAgICAgICAgaWYgKHR5cGUgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBzYi5BcHBlbmQodHlwZS5GdWxsTmFtZS5SZXBsYWNlKCcrJywgJy4nKSk7DQogICAgICAgICAgICAgICAgc2IuQXBwZW5kKCIuIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzYi5BcHBlbmQobWV0aG9kQmFzZS5OYW1lKTsNCg0KICAgICAgICAgICAgLy8gZGVhbCB3aXRoIHRoZSBnZW5lcmljIHBvcnRpb24gb2YgdGhlIG1ldGhvZA0KICAgICAgICAgICAgaWYgKG1ldGhvZEJhc2UgaXMgTWV0aG9kSW5mbyAmJiAoKE1ldGhvZEluZm8pbWV0aG9kQmFzZSkuSXNHZW5lcmljTWV0aG9kKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFR5cGVbXSB0eXBlQXJndW1lbnRzID0gKChNZXRob2RJbmZvKW1ldGhvZEJhc2UpLkdldEdlbmVyaWNBcmd1bWVudHMoKTsNCiAgICAgICAgICAgICAgICBzYi5BcHBlbmQoIlsiKTsNCiAgICAgICAgICAgICAgICBpbnQgayA9IDA7DQogICAgICAgICAgICAgICAgYm9vbCBmaXJzdFR5cGVQYXJhbWV0ZXIgPSB0cnVlOw0KICAgICAgICAgICAgICAgIHdoaWxlIChrIDwgdHlwZUFyZ3VtZW50cy5MZW5ndGgpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RUeXBlUGFyYW1ldGVyID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBzYi5BcHBlbmQoIiwiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0VHlwZVBhcmFtZXRlciA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKHR5cGVBcmd1bWVudHNba10uTmFtZSk7DQogICAgICAgICAgICAgICAgICAgIGsrKzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc2IuQXBwZW5kKCJdIik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIGFyZ3VtZW50cyBwcmludGluZw0KICAgICAgICAgICAgc2IuQXBwZW5kKCIoIik7DQogICAgICAgICAgICBQYXJhbWV0ZXJJbmZvW10gcGFyYW1ldGVySW5mb3MgPSBtZXRob2RCYXNlLkdldFBhcmFtZXRlcnMoKTsNCiAgICAgICAgICAgIGJvb2wgZmlyc3RQYXJhbWV0ZXJJbmZvID0gdHJ1ZTsNCiAgICAgICAgICAgIGZvciAoaW50IGogPSAwOyBqIDwgcGFyYW1ldGVySW5mb3MuTGVuZ3RoOyBqKyspDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGZpcnN0UGFyYW1ldGVySW5mbyA9PSBmYWxzZSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHNiLkFwcGVuZCgiLCAiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgZmlyc3RQYXJhbWV0ZXJJbmZvID0gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgU3RyaW5nIHR5cGVOYW1lID0gIjxVbmtub3duVHlwZT4iOw0KICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJJbmZvc1tqXS5QYXJhbWV0ZXJUeXBlICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZSA9IHBhcmFtZXRlckluZm9zW2pdLlBhcmFtZXRlclR5cGUuTmFtZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc2IuQXBwZW5kKHR5cGVOYW1lICsgIiAiICsgcGFyYW1ldGVySW5mb3Nbal0uTmFtZSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzYi5BcHBlbmQoIikiKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHNiLlRvU3RyaW5nKCk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "51F335C189184FE5ACB85CCB4807DDB4",
              "algorithm": "md5"
            },
            {
              "value": "45A4CC3C51D272DC2C3680D7D277EA514C9B2A26",
              "algorithm": "sha-1"
            },
            {
              "value": "13CD80639C65BA74ECC11D44B9E2483C8BB9316FA5D9FCD989ED56B29579B3FE",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlow.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTYuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgVGhyZWFkRmxvdyA6IFByb3BlcnR5QmFnSG9sZGVyLCBJU2FyaWZOb2RlDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPFRocmVhZEZsb3c+IFZhbHVlQ29tcGFyZXIgPT4gVGhyZWFkRmxvd0VxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoVGhyZWFkRmxvdyBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlIiAvPi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTm9kZUtpbmQgU2FyaWZOb2RlS2luZA0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZC5UaHJlYWRGbG93Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQW4gc3RyaW5nIHRoYXQgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgdGhyZWFkRmxvdyB3aXRoaW4gdGhlIGNvZGVGbG93IGluIHdoaWNoIGl0IG9jY3Vycy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJpZCIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBJZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBtZXNzYWdlIHJlbGV2YW50IHRvIHRoZSBjb2RlIGZsb3cuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAibWVzc2FnZSIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIE1lc3NhZ2UgTWVzc2FnZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQW4gYXJyYXkgb2YgJ3RocmVhZEZsb3dMb2NhdGlvbicgb2JqZWN0cywgZWFjaCBvZiB3aGljaCBkZXNjcmliZXMgYSBzaW5nbGUgbG9jYXRpb24gdmlzaXRlZCBieSB0aGUgdG9vbCBpbiB0aGUgY291cnNlIG9mIHByb2R1Y2luZyB0aGUgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImxvY2F0aW9ucyIsIElzUmVxdWlyZWQgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIElMaXN0PFRocmVhZEZsb3dMb2NhdGlvbj4gTG9jYXRpb25zIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBLZXkvdmFsdWUgcGFpcnMgdGhhdCBwcm92aWRlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvZGUgZmxvdy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJwcm9wZXJ0aWVzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBpbnRlcm5hbCBvdmVycmlkZSBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IFByb3BlcnRpZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlRocmVhZEZsb3ciIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgVGhyZWFkRmxvdygpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlRocmVhZEZsb3ciIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJpZCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogSWQiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJtZXNzYWdlIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBNZXNzYWdlIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ibG9jYXRpb25zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBMb2NhdGlvbnMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwcm9wZXJ0aWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBQcm9wZXJ0aWVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBUaHJlYWRGbG93KHN0cmluZyBpZCwgTWVzc2FnZSBtZXNzYWdlLCBJRW51bWVyYWJsZTxUaHJlYWRGbG93TG9jYXRpb24+IGxvY2F0aW9ucywgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KGlkLCBtZXNzYWdlLCBsb2NhdGlvbnMsIHByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iVGhyZWFkRmxvdyIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgVGhyZWFkRmxvdyhUaHJlYWRGbG93IG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLklkLCBvdGhlci5NZXNzYWdlLCBvdGhlci5Mb2NhdGlvbnMsIG90aGVyLlByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZSBJU2FyaWZOb2RlLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBUaHJlYWRGbG93IERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoVGhyZWFkRmxvdylEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgVGhyZWFkRmxvdyh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KHN0cmluZyBpZCwgTWVzc2FnZSBtZXNzYWdlLCBJRW51bWVyYWJsZTxUaHJlYWRGbG93TG9jYXRpb24+IGxvY2F0aW9ucywgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJZCA9IGlkOw0KICAgICAgICAgICAgaWYgKG1lc3NhZ2UgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBNZXNzYWdlID0gbmV3IE1lc3NhZ2UobWVzc2FnZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsb2NhdGlvbnMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PFRocmVhZEZsb3dMb2NhdGlvbj4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMCBpbiBsb2NhdGlvbnMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG5ldyBUaHJlYWRGbG93TG9jYXRpb24odmFsdWVfMCkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgTG9jYXRpb25zID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPihwcm9wZXJ0aWVzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "9A2258A3BDB761443BE4CADA240BEDE0",
              "algorithm": "md5"
            },
            {
              "value": "2EE064A3068240CFE4ACDCC7E9589D6C5CE65FB5",
              "algorithm": "sha-1"
            },
            {
              "value": "2086A44F7E4B8634ED034B9EBB8380E50A11E91615DF152A7302CB46E667D784",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlowLocation.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "5A59682DD4EE74EF806FE488C6871D18",
              "algorithm": "md5"
            },
            {
              "value": "B69176D6B0E6EE46E8A030F11950DAFC2D95BF3D",
              "algorithm": "sha-1"
            },
            {
              "value": "F2B974484ACCC1604161A1E802CB7CEEFE60B5AEC59B8176E7231BA0F059F688",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlowLocationEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUmVhZGVyczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIERlZmluZXMgbWV0aG9kcyB0byBzdXBwb3J0IHRoZSBjb21wYXJpc29uIG9mIG9iamVjdHMgb2YgdHlwZSBUaHJlYWRGbG93TG9jYXRpb24gZm9yIGVxdWFsaXR5Lg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0dlbmVyYXRlZENvZGUoIk1pY3Jvc29mdC5Kc29uLlNjaGVtYS5Ub0RvdE5ldCIsICIwLjU2LjAuMCIpXQ0KICAgIGludGVybmFsIHNlYWxlZCBjbGFzcyBUaHJlYWRGbG93TG9jYXRpb25FcXVhbGl0eUNvbXBhcmVyIDogSUVxdWFsaXR5Q29tcGFyZXI8VGhyZWFkRmxvd0xvY2F0aW9uPg0KICAgIHsNCiAgICAgICAgaW50ZXJuYWwgc3RhdGljIHJlYWRvbmx5IFRocmVhZEZsb3dMb2NhdGlvbkVxdWFsaXR5Q29tcGFyZXIgSW5zdGFuY2UgPSBuZXcgVGhyZWFkRmxvd0xvY2F0aW9uRXF1YWxpdHlDb21wYXJlcigpOw0KDQogICAgICAgIHB1YmxpYyBib29sIEVxdWFscyhUaHJlYWRGbG93TG9jYXRpb24gbGVmdCwgVGhyZWFkRmxvd0xvY2F0aW9uIHJpZ2h0KQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoUmVmZXJlbmNlRXF1YWxzKGxlZnQsIHJpZ2h0KSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKFJlZmVyZW5jZUVxdWFscyhsZWZ0LCBudWxsKSB8fCBSZWZlcmVuY2VFcXVhbHMocmlnaHQsIG51bGwpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGxlZnQuU3RlcCAhPSByaWdodC5TdGVwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCFMb2NhdGlvbi5WYWx1ZUNvbXBhcmVyLkVxdWFscyhsZWZ0LkxvY2F0aW9uLCByaWdodC5Mb2NhdGlvbikpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIVN0YWNrLlZhbHVlQ29tcGFyZXIuRXF1YWxzKGxlZnQuU3RhY2ssIHJpZ2h0LlN0YWNrKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0LktpbmQgIT0gcmlnaHQuS2luZCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0Lk1vZHVsZSAhPSByaWdodC5Nb2R1bGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5TdGF0ZSwgcmlnaHQuU3RhdGUpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LlN0YXRlID09IG51bGwgfHwgcmlnaHQuU3RhdGUgPT0gbnVsbCB8fCBsZWZ0LlN0YXRlLkNvdW50ICE9IHJpZ2h0LlN0YXRlLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8wIGluIGxlZnQuU3RhdGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBzdHJpbmcgdmFsdWVfMTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyaWdodC5TdGF0ZS5UcnlHZXRWYWx1ZSh2YWx1ZV8wLktleSwgb3V0IHZhbHVlXzEpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMC5WYWx1ZSAhPSB2YWx1ZV8xKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0Lk5lc3RpbmdMZXZlbCAhPSByaWdodC5OZXN0aW5nTGV2ZWwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobGVmdC5FeGVjdXRpb25PcmRlciAhPSByaWdodC5FeGVjdXRpb25PcmRlcikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0LlRpbWVzdGFtcCAhPSByaWdodC5UaW1lc3RhbXApDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobGVmdC5JbXBvcnRhbmNlICE9IHJpZ2h0LkltcG9ydGFuY2UpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMobGVmdC5Qcm9wZXJ0aWVzLCByaWdodC5Qcm9wZXJ0aWVzKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobGVmdC5Qcm9wZXJ0aWVzID09IG51bGwgfHwgcmlnaHQuUHJvcGVydGllcyA9PSBudWxsIHx8IGxlZnQuUHJvcGVydGllcy5Db3VudCAhPSByaWdodC5Qcm9wZXJ0aWVzLkNvdW50KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8yIGluIGxlZnQuUHJvcGVydGllcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8gdmFsdWVfMzsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyaWdodC5Qcm9wZXJ0aWVzLlRyeUdldFZhbHVlKHZhbHVlXzIuS2V5LCBvdXQgdmFsdWVfMykpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0LkVxdWFscyh2YWx1ZV8yLlZhbHVlLCB2YWx1ZV8zKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBpbnQgR2V0SGFzaENvZGUoVGhyZWFkRmxvd0xvY2F0aW9uIG9iaikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKFJlZmVyZW5jZUVxdWFscyhvYmosIG51bGwpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpbnQgcmVzdWx0ID0gMTc7DQogICAgICAgICAgICB1bmNoZWNrZWQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLlN0ZXAuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICBpZiAob2JqLkxvY2F0aW9uICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLkxvY2F0aW9uLlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLlN0YWNrICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLlN0YWNrLlZhbHVlR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLktpbmQgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyBvYmouS2luZC5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouTW9kdWxlICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLk1vZHVsZS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouU3RhdGUgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIC8vIFVzZSB4b3IgZm9yIGRpY3Rpb25hcmllcyB0byBiZSBvcmRlci1pbmRlcGVuZGVudC4NCiAgICAgICAgICAgICAgICAgICAgaW50IHhvcl8wID0gMDsNCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzQgaW4gb2JqLlN0YXRlKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB4b3JfMCBePSB2YWx1ZV80LktleS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzQuVmFsdWUgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4b3JfMCBePSB2YWx1ZV80LlZhbHVlLkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgeG9yXzA7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5OZXN0aW5nTGV2ZWwuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLkV4ZWN1dGlvbk9yZGVyLkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5UaW1lc3RhbXAuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLkltcG9ydGFuY2UuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICBpZiAob2JqLlByb3BlcnRpZXMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIC8vIFVzZSB4b3IgZm9yIGRpY3Rpb25hcmllcyB0byBiZSBvcmRlci1pbmRlcGVuZGVudC4NCiAgICAgICAgICAgICAgICAgICAgaW50IHhvcl8xID0gMDsNCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzUgaW4gb2JqLlByb3BlcnRpZXMpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHhvcl8xIF49IHZhbHVlXzUuS2V5LkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfNS5WYWx1ZSAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhvcl8xIF49IHZhbHVlXzUuVmFsdWUuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyB4b3JfMTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "F4F0377B92362D56AAD4A0267628C0F2",
              "algorithm": "md5"
            },
            {
              "value": "118007B9D81EEBE13605E4ED801D06421832B2A4",
              "algorithm": "sha-1"
            },
            {
              "value": "E8907D08915A15D4C28497983D7236B24F74D5C4E224BA0BFDE6B0646EC9AD9A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Tool.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBUaGUgYW5hbHlzaXMgdG9vbCB0aGF0IHdhcyBydW4uDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Ni4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBUb29sIDogUHJvcGVydHlCYWdIb2xkZXIsIElTYXJpZk5vZGUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8VG9vbD4gVmFsdWVDb21wYXJlciA9PiBUb29sRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhUb29sIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZCBTYXJpZk5vZGVLaW5kDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kLlRvb2w7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBUaGUgbmFtZSBvZiB0aGUgdG9vbC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJuYW1lIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIE5hbWUgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBuYW1lIG9mIHRoZSB0b29sIGFsb25nIHdpdGggaXRzIHZlcnNpb24gYW5kIGFueSBvdGhlciB1c2VmdWwgaWRlbnRpZnlpbmcgaW5mb3JtYXRpb24sIHN1Y2ggYXMgaXRzIGxvY2FsZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJmdWxsTmFtZSIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBGdWxsTmFtZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIHRvb2wgdmVyc2lvbiwgaW4gd2hhdGV2ZXIgZm9ybWF0IHRoZSB0b29sIG5hdGl2ZWx5IHByb3ZpZGVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInZlcnNpb24iLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgVmVyc2lvbiB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIHRvb2wgdmVyc2lvbiBpbiB0aGUgZm9ybWF0IHNwZWNpZmllZCBieSBTZW1hbnRpYyBWZXJzaW9uaW5nIDIuMC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJzZW1hbnRpY1ZlcnNpb24iLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgU2VtYW50aWNWZXJzaW9uIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBUaGUgYmluYXJ5IHZlcnNpb24gb2YgdGhlIHRvb2wncyBwcmltYXJ5IGV4ZWN1dGFibGUgZmlsZSAoZm9yIG9wZXJhdGluZyBzeXN0ZW1zIHN1Y2ggYXMgV2luZG93cyB0aGF0IHByb3ZpZGUgdGhhdCBpbmZvcm1hdGlvbikuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiZmlsZVZlcnNpb24iLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgRmlsZVZlcnNpb24geyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBhYnNvbHV0ZSBVUkkgZnJvbSB3aGljaCB0aGUgdG9vbCBjYW4gYmUgZG93bmxvYWRlZC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJkb3dubG9hZFVyaSIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIFVyaSBEb3dubG9hZFVyaSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSB2ZXJzaW9uIHRoYXQgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgU0FSSUYgbG9nZ2luZyBjb21wb25lbnQgdGhhdCBnZW5lcmF0ZWQgdGhpcyBmaWxlLCBpZiBpdCBpcyB2ZXJzaW9uZWQgc2VwYXJhdGVseSBmcm9tIHRoZSB0b29sLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInNhcmlmTG9nZ2VyVmVyc2lvbiIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBTYXJpZkxvZ2dlclZlcnNpb24geyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSB0b29sIGxhbmd1YWdlIChleHByZXNzZWQgYXMgYW4gSVNPIDY0OSB0d28tbGV0dGVyIGxvd2VyY2FzZSBjdWx0dXJlIGNvZGUpIGFuZCByZWdpb24gKGV4cHJlc3NlZCBhcyBhbiBJU08gMzE2NiB0d28tbGV0dGVyIHVwcGVyY2FzZSBzdWJjdWx0dXJlIGNvZGUgYXNzb2NpYXRlZCB3aXRoIGEgY291bnRyeSBvciByZWdpb24pLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImxhbmd1YWdlIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIExhbmd1YWdlIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBLZXkvdmFsdWUgcGFpcnMgdGhhdCBwcm92aWRlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRvb2wuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAicHJvcGVydGllcyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgaW50ZXJuYWwgb3ZlcnJpZGUgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBQcm9wZXJ0aWVzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJUb29sIiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFRvb2woKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJUb29sIiAvPiBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCB2YWx1ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ibmFtZSI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogTmFtZSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImZ1bGxOYW1lIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBGdWxsTmFtZSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InZlcnNpb24iPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFZlcnNpb24iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJzZW1hbnRpY1ZlcnNpb24iPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFNlbWFudGljVmVyc2lvbiIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImZpbGVWZXJzaW9uIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBGaWxlVmVyc2lvbiIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImRvd25sb2FkVXJpIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBEb3dubG9hZFVyaSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InNhcmlmTG9nZ2VyVmVyc2lvbiI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogU2FyaWZMb2dnZXJWZXJzaW9uIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ibGFuZ3VhZ2UiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IExhbmd1YWdlIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icHJvcGVydGllcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUHJvcGVydGllcyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICBwdWJsaWMgVG9vbChzdHJpbmcgbmFtZSwgc3RyaW5nIGZ1bGxOYW1lLCBzdHJpbmcgdmVyc2lvbiwgc3RyaW5nIHNlbWFudGljVmVyc2lvbiwgc3RyaW5nIGZpbGVWZXJzaW9uLCBVcmkgZG93bmxvYWRVcmksIHN0cmluZyBzYXJpZkxvZ2dlclZlcnNpb24sIHN0cmluZyBsYW5ndWFnZSwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KG5hbWUsIGZ1bGxOYW1lLCB2ZXJzaW9uLCBzZW1hbnRpY1ZlcnNpb24sIGZpbGVWZXJzaW9uLCBkb3dubG9hZFVyaSwgc2FyaWZMb2dnZXJWZXJzaW9uLCBsYW5ndWFnZSwgcHJvcGVydGllcyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJUb29sIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBUb29sKFRvb2wgb3RoZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChvdGhlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKG90aGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEluaXQob3RoZXIuTmFtZSwgb3RoZXIuRnVsbE5hbWUsIG90aGVyLlZlcnNpb24sIG90aGVyLlNlbWFudGljVmVyc2lvbiwgb3RoZXIuRmlsZVZlcnNpb24sIG90aGVyLkRvd25sb2FkVXJpLCBvdGhlci5TYXJpZkxvZ2dlclZlcnNpb24sIG90aGVyLkxhbmd1YWdlLCBvdGhlci5Qcm9wZXJ0aWVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGUgSVNhcmlmTm9kZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgVG9vbCBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKFRvb2wpRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBJU2FyaWZOb2RlIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IFRvb2wodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChzdHJpbmcgbmFtZSwgc3RyaW5nIGZ1bGxOYW1lLCBzdHJpbmcgdmVyc2lvbiwgc3RyaW5nIHNlbWFudGljVmVyc2lvbiwgc3RyaW5nIGZpbGVWZXJzaW9uLCBVcmkgZG93bmxvYWRVcmksIHN0cmluZyBzYXJpZkxvZ2dlclZlcnNpb24sIHN0cmluZyBsYW5ndWFnZSwgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBOYW1lID0gbmFtZTsNCiAgICAgICAgICAgIEZ1bGxOYW1lID0gZnVsbE5hbWU7DQogICAgICAgICAgICBWZXJzaW9uID0gdmVyc2lvbjsNCiAgICAgICAgICAgIFNlbWFudGljVmVyc2lvbiA9IHNlbWFudGljVmVyc2lvbjsNCiAgICAgICAgICAgIEZpbGVWZXJzaW9uID0gZmlsZVZlcnNpb247DQogICAgICAgICAgICBpZiAoZG93bmxvYWRVcmkgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBEb3dubG9hZFVyaSA9IG5ldyBVcmkoZG93bmxvYWRVcmkuT3JpZ2luYWxTdHJpbmcsIGRvd25sb2FkVXJpLklzQWJzb2x1dGVVcmkgPyBVcmlLaW5kLkFic29sdXRlIDogVXJpS2luZC5SZWxhdGl2ZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFNhcmlmTG9nZ2VyVmVyc2lvbiA9IHNhcmlmTG9nZ2VyVmVyc2lvbjsNCiAgICAgICAgICAgIExhbmd1YWdlID0gbGFuZ3VhZ2U7DQogICAgICAgICAgICBpZiAocHJvcGVydGllcyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFByb3BlcnRpZXMgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+KHByb3BlcnRpZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "99699D9C873AEF94C1731B3C0F9580AE",
              "algorithm": "md5"
            },
            {
              "value": "6ECB4480689B929863DE27EBBFE1E777434876A0",
              "algorithm": "sha-1"
            },
            {
              "value": "C22FB7E827C03BE5149FF17819DDA922840AF1461FB5E832114544EDF6EC6CDE",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Tool.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkRpYWdub3N0aWNzOw0KdXNpbmcgU3lzdGVtLkdsb2JhbGl6YXRpb247DQp1c2luZyBTeXN0ZW0uSU87DQp1c2luZyBTeXN0ZW0uUmVmbGVjdGlvbjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIFRoZSBhbmFseXNpcyB0b29sIHRoYXQgd2FzIHJ1bi4NCiAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgIHB1YmxpYyBwYXJ0aWFsIGNsYXNzIFRvb2wgDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIFRvb2wgQ3JlYXRlRnJvbUFzc2VtYmx5RGF0YShzdHJpbmcgcHJlcmVsZWFzZUluZm8gPSBudWxsKQ0KICAgICAgICB7DQogICAgICAgICAgICBBc3NlbWJseSBhc3NlbWJseSA9IEFzc2VtYmx5LkdldEVudHJ5QXNzZW1ibHkoKSA/PyBBc3NlbWJseS5HZXRFeGVjdXRpbmdBc3NlbWJseSgpOw0KICAgICAgICAgICAgc3RyaW5nIG5hbWUgPSBQYXRoLkdldEZpbGVOYW1lV2l0aG91dEV4dGVuc2lvbihhc3NlbWJseS5Mb2NhdGlvbik7DQoNCiAgICAgICAgICAgIFRvb2wgdG9vbCA9IG5ldyBUb29sKCk7DQoNCiAgICAgICAgICAgIC8vICduYW1lJw0KICAgICAgICAgICAgdG9vbC5OYW1lID0gbmFtZTsNCg0KICAgICAgICAgICAgLy8gJ3ZlcnNpb24nIDogcHJpbWFyeSB0b29sIHZlcnNpb24uDQogICAgICAgICAgICBWZXJzaW9uIHZlcnNpb24gPSBhc3NlbWJseS5HZXROYW1lKCkuVmVyc2lvbjsNCiAgICAgICAgICAgIHRvb2wuVmVyc2lvbiA9IHZlcnNpb24uVG9TdHJpbmcoKTsNCg0KICAgICAgICAgICAgLy8gU3ludGhlc2l6ZWQgc2VtdmVyIDIuMCB2ZXJzaW9uIHJlcXVpcmVkIGJ5IHNwZWMNCiAgICAgICAgICAgIHRvb2wuU2VtYW50aWNWZXJzaW9uID0gdmVyc2lvbi5NYWpvci5Ub1N0cmluZygpICsgIi4iICsgdmVyc2lvbi5NaW5vci5Ub1N0cmluZygpICsgIi4iICsgdmVyc2lvbi5CdWlsZC5Ub1N0cmluZygpOw0KDQogICAgICAgICAgICAvLyBCaW5hcnkgZmlsZSB2ZXJzaW9uDQogICAgICAgICAgICBGaWxlVmVyc2lvbkluZm8gZmlsZVZlcnNpb24gPSBGaWxlVmVyc2lvbkluZm8uR2V0VmVyc2lvbkluZm8oYXNzZW1ibHkuTG9jYXRpb24pOw0KDQogICAgICAgICAgICBpZiAoZmlsZVZlcnNpb24uRmlsZVZlcnNpb24gIT0gdG9vbC5WZXJzaW9uKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRvb2wuRmlsZVZlcnNpb24gPSBmaWxlVmVyc2lvbi5GaWxlVmVyc2lvbjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdG9vbC5GdWxsTmFtZSA9IG5hbWUgKyAiICIgKyB0b29sLlZlcnNpb24gKyAocHJlcmVsZWFzZUluZm8gPz8gIiIpOw0KDQogICAgICAgICAgICB0b29sLkxhbmd1YWdlID0gQ3VsdHVyZUluZm8uQ3VycmVudEN1bHR1cmUuTmFtZTsNCg0KICAgICAgICAgICAgaWYgKCFzdHJpbmcuSXNOdWxsT3JFbXB0eShmaWxlVmVyc2lvbi5Db21tZW50cykpIHsgdG9vbC5TZXRQcm9wZXJ0eSgiQ29tbWVudHMiLCBmaWxlVmVyc2lvbi5Db21tZW50cyk7IH0NCiAgICAgICAgICAgIGlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkoZmlsZVZlcnNpb24uQ29tcGFueU5hbWUpKSB7IHRvb2wuU2V0UHJvcGVydHkoIkNvbXBhbnlOYW1lIiwgZmlsZVZlcnNpb24uQ29tcGFueU5hbWUpOyB9DQogICAgICAgICAgICBpZiAoIXN0cmluZy5Jc051bGxPckVtcHR5KGZpbGVWZXJzaW9uLlByb2R1Y3ROYW1lKSkgeyB0b29sLlNldFByb3BlcnR5KCJQcm9kdWN0TmFtZSIsIGZpbGVWZXJzaW9uLlByb2R1Y3ROYW1lKTsgfQ0KDQogICAgICAgICAgICByZXR1cm4gdG9vbDsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "E47C8CC1A595DCBF365140F465B15CFA",
              "algorithm": "md5"
            },
            {
              "value": "5E70DBF35502B7A9AAAD8DE139B7CAF40673E138",
              "algorithm": "sha-1"
            },
            {
              "value": "4964B196548775FE6CC2D2F4FAAF5CCC8E4B93815DB25602AAA2220EAD011E83",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnM7DQp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7DQp1c2luZyBTeXN0ZW0uTGlucTsNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbjsNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbi5Db252ZXJ0ZXJzOw0KdXNpbmcgTmV3dG9uc29mdC5Kc29uLkxpbnE7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmDQp7DQogICAgcHVibGljIGNsYXNzIFR5cGVkUHJvcGVydGllc0RpY3Rpb25hcnlDb252ZXJ0ZXIgOiBKc29uQ29udmVydGVyDQogICAgew0KICAgICAgICBwdWJsaWMgVHlwZWRQcm9wZXJ0aWVzRGljdGlvbmFyeUNvbnZlcnRlcigpDQogICAgICAgIHsNCiAgICAgICAgICAgIF92ZXJzaW9uQ29udmVydGVyID0gbmV3IFZlcnNpb25Db252ZXJ0ZXIoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgVmVyc2lvbkNvbnZlcnRlciBfdmVyc2lvbkNvbnZlcnRlcjsNCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgYm9vbCBDYW5Db252ZXJ0KFR5cGUgb2JqZWN0VHlwZSkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIG9iamVjdFR5cGUgPT0gdHlwZW9mKFN0cmluZ1NldCkgfHwNCiAgICAgICAgICAgICAgICAgICBvYmplY3RUeXBlID09IHR5cGVvZihJbnRlZ2VyU2V0KSB8fA0KICAgICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgPT0gdHlwZW9mKFByb3BlcnRpZXNEaWN0aW9uYXJ5KSB8fA0KICAgICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgPT0gdHlwZW9mKElEaWN0aW9uYXJ5KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSBvYmplY3QgUmVhZEpzb24oSnNvblJlYWRlciByZWFkZXIsIFR5cGUgb2JqZWN0VHlwZSwgb2JqZWN0IGV4aXN0aW5nVmFsdWUsIEpzb25TZXJpYWxpemVyIHNlcmlhbGl6ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIEpBcnJheSBqYTsNCg0KICAgICAgICAgICAgaWYgKG9iamVjdFR5cGUgPT0gdHlwZW9mKFN0cmluZ1NldCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgamEgPSBKQXJyYXkuTG9hZChyZWFkZXIpOw0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaW5nU2V0KGphLlZhbHVlcygpLlNlbGVjdCh0b2tlbiA9PiB0b2tlbi5Ub1N0cmluZygpKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChvYmplY3RUeXBlID09IHR5cGVvZihJbnRlZ2VyU2V0KSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBqYSA9IEpBcnJheS5Mb2FkKHJlYWRlcik7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRlZ2VyU2V0KGphLlZhbHVlcygpLlNlbGVjdCh0b2tlbiA9PiBJbnQzMi5QYXJzZSh0b2tlbi5Ub1N0cmluZygpKSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAob2JqZWN0VHlwZSA9PSB0eXBlb2YoVmVyc2lvbikpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIEpzb25Db252ZXJ0LkRlc2VyaWFsaXplT2JqZWN0PFZlcnNpb24+KHJlYWRlci5SZWFkQXNTdHJpbmcoKSwgX3ZlcnNpb25Db252ZXJ0ZXIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBKT2JqZWN0IGpvID0gSk9iamVjdC5Mb2FkKHJlYWRlcik7DQogICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IFByb3BlcnRpZXNEaWN0aW9uYXJ5KCk7DQoNCiAgICAgICAgICAgIGZvcmVhY2ggKEpQcm9wZXJ0eSBwcm9wZXJ0eSBpbiBqby5Qcm9wZXJ0aWVzKCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIGtleSA9IHByb3BlcnR5Lk5hbWU7DQogICAgICAgICAgICAgICAgSlRva2VuIHRva2VuID0gcHJvcGVydHkuVmFsdWU7DQoNCiAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5LlZhbHVlLlR5cGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBjYXNlIEpUb2tlblR5cGUuU3RyaW5nOg0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHRva2VuLlRvT2JqZWN0PHN0cmluZz4oc2VyaWFsaXplcik7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBjYXNlIEpUb2tlblR5cGUuSW50ZWdlcjoNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB0b2tlbi5Ub09iamVjdDxpbnQ+KHNlcmlhbGl6ZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgY2FzZSBKVG9rZW5UeXBlLkJvb2xlYW46DQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdG9rZW4uVG9PYmplY3Q8Ym9vbD4oc2VyaWFsaXplcik7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBjYXNlIEpUb2tlblR5cGUuT2JqZWN0Og0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHRva2VuLlRvT2JqZWN0PFByb3BlcnRpZXNEaWN0aW9uYXJ5PihzZXJpYWxpemVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGNhc2UgSlRva2VuVHlwZS5BcnJheToNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgamEgPSAoSkFycmF5KXByb3BlcnR5LlZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGphLkNoaWxkcmVuKCkuRmlyc3QoKS5UeXBlID09IEpUb2tlblR5cGUuSW50ZWdlcikNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHRva2VuLlRvT2JqZWN0PEludGVnZXJTZXQ+KHNlcmlhbGl6ZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLkFzc2VydChqYS5DaGlsZHJlbigpLkZpcnN0KCkuVHlwZSA9PSBKVG9rZW5UeXBlLlN0cmluZyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB0b2tlbi5Ub09iamVjdDxTdHJpbmdTZXQ+KHNlcmlhbGl6ZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFdyaXRlSnNvbihKc29uV3JpdGVyIHdyaXRlciwgb2JqZWN0IHZhbHVlLCBKc29uU2VyaWFsaXplciBzZXJpYWxpemVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBKQXJyYXkgamE7DQogICAgICAgICAgICBpZiAodmFsdWUgaXMgU3RyaW5nU2V0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFN0cmluZ1NldCBoYXNoU2V0ID0gKFN0cmluZ1NldCl2YWx1ZTsNCiAgICAgICAgICAgICAgICBqYSA9IG5ldyBKQXJyYXkoaGFzaFNldC5TZWxlY3QoaSA9PiBuZXcgSlZhbHVlKGkpKSk7DQogICAgICAgICAgICAgICAgamEuV3JpdGVUbyh3cml0ZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgaXMgSW50ZWdlclNldCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBJbnRlZ2VyU2V0IGhhc2hTZXQgPSAoSW50ZWdlclNldCl2YWx1ZTsNCiAgICAgICAgICAgICAgICBqYSA9IG5ldyBKQXJyYXkoaGFzaFNldC5TZWxlY3QoaSA9PiBuZXcgSlZhbHVlKGkpKSk7DQogICAgICAgICAgICAgICAgamEuV3JpdGVUbyh3cml0ZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBkaWN0aW9uYXJ5ID0gKElEaWN0aW9uYXJ5KXZhbHVlOw0KICAgICAgICAgICAgICAgIHdyaXRlci5Xcml0ZVN0YXJ0T2JqZWN0KCk7DQoNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcga2V5IGluIGRpY3Rpb25hcnkuS2V5cykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHdyaXRlci5Xcml0ZVByb3BlcnR5TmFtZShrZXkpOw0KDQogICAgICAgICAgICAgICAgICAgIG9iamVjdCBkaWN0aW9uYXJ5VmFsdWUgPSBkaWN0aW9uYXJ5W2tleV07DQoNCiAgICAgICAgICAgICAgICAgICAgVHlwZSB0ID0gdHlwZW9mKG9iamVjdCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChkaWN0aW9uYXJ5VmFsdWUgaXMgSURpY3Rpb25hcnkgfHwNCiAgICAgICAgICAgICAgICAgICAgICAgIGRpY3Rpb25hcnlWYWx1ZSBpcyBJbnRlZ2VyU2V0ICB8fA0KICAgICAgICAgICAgICAgICAgICAgICAgZGljdGlvbmFyeVZhbHVlIGlzIFN0cmluZ1NldCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGVKc29uKHdyaXRlciwgZGljdGlvbmFyeVZhbHVlLCBzZXJpYWxpemVyKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkaWN0aW9uYXJ5VmFsdWUgaXMgVmVyc2lvbikNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplci5TZXJpYWxpemUod3JpdGVyLCBkaWN0aW9uYXJ5VmFsdWUuVG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVyLlNlcmlhbGl6ZSh3cml0ZXIsIGRpY3Rpb25hcnlWYWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB3cml0ZXIuV3JpdGVFbmRPYmplY3QoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KfQ0K"
          },
          "hashes": [
            {
              "value": "45C4AC90649D7D26688BE79D362F44FB",
              "algorithm": "md5"
            },
            {
              "value": "B90716D3CD34C4E5BBADDA903C3711C883694276",
              "algorithm": "sha-1"
            },
            {
              "value": "8036FBEED1BC3A3CEC129A0951A1260DA1B79B71C757CC43260DD38FD3981A16",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/UriHelper.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uVGV4dDsNCnVzaW5nIFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNzaW9uczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYNCnsNCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFVyaUhlbHBlcg0KICAgIHsNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlIGEgc3ludGFjdGljYWxseSB2YWxpZCBVUkkgZnJvbSBhIHBhdGggdGhhdCBtaWdodCBiZQ0KICAgICAgICAvLy8gYWJzb2x1dGUgb3IgcmVsYXRpdmUsIGFuZCB0aGF0IG1pZ2h0IHJlcXVpcmUgcGVyY2VudC1lbmNvZGluZy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwYXRoIj4NCiAgICAgICAgLy8vIFRoZSBwYXRoIHRvIGJlIHRyYW5zZm9ybWVkIGludG8gYSBzeW50YWN0aWNhbGx5IHZhbGlkIFVSSS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cmV0dXJucz4NCiAgICAgICAgLy8vIEEgc3ludGFjdGljYWxseSB2YWxpZCBVUkkgcmVwcmVzZW50aW5nIDxwYXJhbXJlZiBuYW1lPSJwYXRoIi8+Lg0KICAgICAgICAvLy8gPC9yZXR1cm5zPg0KICAgICAgICAvLy8gPHJlbWFya3M+DQogICAgICAgIC8vLyBJbiBnZW5lcmFsLCA8cGFyYW1yZWYgbmFtZT0icGF0aCIvPiBtaWdodCBiZToNCiAgICAgICAgLy8vIA0KICAgICAgICAvLy8gMS4gUG9zc2libGUgdG8gaW50ZXJwcmV0IGFzIGFuIGFic29sdXRlIHBhdGggLyBhYnNvbHV0ZSBVUkkNCiAgICAgICAgLy8vIDIuIFBvc3NpYmxlIHRvIGludGVycHJldCBhcyBhIHJlbGF0aXZlIHBhdGggLyByZWxhdGl2ZSBVUkkNCiAgICAgICAgLy8vIDMuIE5laXRoZXINCiAgICAgICAgLy8vDQogICAgICAgIC8vLyBXZSBtdXN0IGNyZWF0ZSBhIHZhbGlkIFVSSSB0byBwZXJzaXN0IGluIHRoZSBTQVJJRiBsb2cuIFdlIHByb2NlZWQgYXMgZm9sbG93czoNCiAgICAgICAgLy8vDQogICAgICAgIC8vLyAxLiBUcnkgdG8gY3JlYXRlIGFuIGFic29sdXRlIFN5c3RlbS5VcmkuIElmIHRoYXQgc3VjY2VlZHMsIHRha2UgaXRzDQogICAgICAgIC8vLyBBYnNvbHV0ZVVyaSwgd2hpY2ggKHVubGlrZSBVcmkuVG9TdHJpbmcoKSkgd2lsbCBiZSBwcm9wZXJseSBwZXJjZW50LWVuY29kZWQuDQogICAgICAgIC8vLw0KICAgICAgICAvLy8gMi4gVHJ5IHRvIGNyZWF0ZSBhIHJlbGF0aXZlIFN5c3RlbS5VcmkuIElmIHRoYXQgc3VjY2VlZHMsIHdlIHdhbnQgdG8gd3JpdGUgaXQgb3V0LA0KICAgICAgICAvLy8gYnV0IHNpbmNlIHRoaXMgaXMgYSByZWxhdGl2ZSBVUkksIHdlIGNhbid0IGFjY2VzcyBpdHMgQWJzb2x1dGVVcmkgb3IgQWJzb2x1dGVQYXRoDQogICAgICAgIC8vLyBwcm9wZXJ0eSAtLSBhbmQgYWdhaW4sIFVyaS5Ub1N0cmluZygpIGRvZXMgbm90IHBlcmZvcm0gcGVyY2VudCBlbmNvZGluZy4NCiAgICAgICAgLy8vIA0KICAgICAgICAvLy8gV2UgdXNlIHRoaXMgd29ya2Fyb3VuZDoNCiAgICAgICAgLy8vIA0KICAgICAgICAvLy8gICAgIGEuIENvbWJpbmUgdGhlIHJlbGF0aXZlIHBhdGggd2l0aCBhbiBhcmJpdHJhcnkgc2NoZW1lIGFuZCBob3N0IHRvIGZvcm0NCiAgICAgICAgLy8vICAgICAgICBhbiBhYnNvbHV0ZSBVUkkuDQogICAgICAgIC8vLyAgICAgYi4gRXh0cmFjdCB0aGUgQWJzb2x1dGVQYXRoIHByb3BlcnR5LCB3aGljaCB3aWxsIGJlIHBlcmNlbnQgZW5jb2RlZC4NCiAgICAgICAgLy8vICAgICANCiAgICAgICAgLy8vDQogICAgICAgIC8vLyAzLiBJZiBhbGwgZWxzZSBmYWlscywgd2UgaGF2ZSBhIHN0cmluZyB0aGF0IHdlIGNhbid0IGNvbnZlcnQgdG8gYSBTeXN0ZW0uVXJpLA0KICAgICAgICAvLy8gc28ganVzdCBwZXJjZW50IGVuY29kZSB0aGUgd2hvbGUgdGhpbmcuIFRoaXMgc2hvdWxkIGJlIGV4dHJlbWVseSByYXJlIGluIHByYWN0aWNlLg0KICAgICAgICAvLy8NCiAgICAgICAgLy8vIFRoYW5rcyBhbmQgYSB0aXAgbycgdGhlIGhhdCB0byBAbmd1ZXJyZXJhIGZvciB0aGlzIGNvZGUgKGFuZCBmb3IgdGhlIGNvbW1lbnQpLg0KICAgICAgICAvLy8gPC9yZW1hcmtzPg0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBNYWtlVmFsaWRVcmkoc3RyaW5nIHBhdGgpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShwYXRoKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihwYXRoKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFVyaSB1cmk7DQogICAgICAgICAgICBzdHJpbmcgdmFsaWRVcmk7DQogICAgICAgICAgICBpZiAoVXJpLlRyeUNyZWF0ZShwYXRoLCBVcmlLaW5kLkFic29sdXRlLCBvdXQgdXJpKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YWxpZFVyaSA9IHVyaS5BYnNvbHV0ZVVyaTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKFVyaS5UcnlDcmVhdGUocGF0aCwgVXJpS2luZC5SZWxhdGl2ZSwgb3V0IHVyaSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgVXJpQnVpbGRlciBidWlsZGVyID0gbmV3IFVyaUJ1aWxkZXIoImh0dHAiLCAid3d3LmV4YW1wbGUuY29tIiwgODAsIHBhdGgpOw0KICAgICAgICAgICAgICAgIHZhbGlkVXJpID0gYnVpbGRlci5VcmkuQWJzb2x1dGVQYXRoOw0KDQogICAgICAgICAgICAgICAgLy8gU2luY2Ugd2hhdCB3ZSBhY3R1YWxseSB3YW50IGlzIGEgcmVsYXRpdmUgcGF0aCwgc3RyaXAgdGhlIGxlYWRpbmcgIi8iDQogICAgICAgICAgICAgICAgLy8gZnJvbSB0aGUgQWJzb2x1dGVQYXRoIC0tIHVubGVzcyB0aGUgaW5wdXQgc3RyaW5nIHN0YXJ0ZWQgd2l0aCAiLyIuDQogICAgICAgICAgICAgICAgaWYgKCFwYXRoLlN0YXJ0c1dpdGgoIi8iLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWwpICYmDQogICAgICAgICAgICAgICAgICAgICFwYXRoLlN0YXJ0c1dpdGgoQCJcIiwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsKSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHZhbGlkVXJpID0gdmFsaWRVcmkuU3Vic3RyaW5nKDEpOw0KDQogICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIFVyaUJ1aWxkZXIgY29uc3RydWN0cyBhbiBhYnNvbHV0ZSBVUkksIGl0IHN0cmlwcyBhbnkNCiAgICAgICAgICAgICAgICAgICAgLy8gbGVhZGluZyAiLiIgYW5kICIuLiIgc2VnbWVudHMgKCJkb3Qtc2VnbWVudHMiLCBhcyBSRkMgMzk4NiBjYWxscw0KICAgICAgICAgICAgICAgICAgICAvLyB0aGVtKS4gR2x1ZSB0aGVtIGJhY2sgb24gc28gd2UgZG9uJ3QgbG9zZSB0aGUgcmVsYXRpdmUgcGF0aA0KICAgICAgICAgICAgICAgICAgICAvLyBpbmZvcm1hdGlvbi4NCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGxlYWRpbmdEb3RTZWdtZW50cyA9IEdldExlYWRpbmdEb3RTZWdtZW50cyhwYXRoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJpbmcuSXNOdWxsT3JFbXB0eShsZWFkaW5nRG90U2VnbWVudHMpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZFVyaSA9IGxlYWRpbmdEb3RTZWdtZW50cyArIHZhbGlkVXJpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhbGlkVXJpID0gU3lzdGVtLk5ldC5XZWJVdGlsaXR5LlVybEVuY29kZShwYXRoKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHZhbGlkVXJpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUmVnZXggc19vbmVEb3RQYXR0ZXJuID0NCiAgICAgICAgICAgIG5ldyBSZWdleChAIl5cLltcXC9dIiwgUmVnZXhPcHRpb25zLkNvbXBpbGVkIHwgUmVnZXhPcHRpb25zLkN1bHR1cmVJbnZhcmlhbnQpOw0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFJlZ2V4IHNfdHdvRG90UGF0dGVybiA9DQogICAgICAgICAgICBuZXcgUmVnZXgoQCJeXC5cLltcXC9dIiwgUmVnZXhPcHRpb25zLkNvbXBpbGVkIHwgUmVnZXhPcHRpb25zLkN1bHR1cmVJbnZhcmlhbnQpOw0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBHZXRMZWFkaW5nRG90U2VnbWVudHMoc3RyaW5nIHBhdGgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHZhciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7DQoNCiAgICAgICAgICAgIGJvb2wgbW9yZURvdFNlZ21lbnRzID0gdHJ1ZTsNCiAgICAgICAgICAgIHdoaWxlIChtb3JlRG90U2VnbWVudHMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKHNfb25lRG90UGF0dGVybi5Jc01hdGNoKHBhdGgpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHBhdGguU3Vic3RyaW5nKDIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzX3R3b0RvdFBhdHRlcm4uSXNNYXRjaChwYXRoKSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoLlN1YnN0cmluZygzKTsNCiAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKCIuLi8iKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgbW9yZURvdFNlZ21lbnRzID0gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBDb3JuZXIgY2FzZTogdGhlIHBhdGggaXMgZW50aXJlbHkgY29tcG9zZWQgb2YgYSBzaW5nbGUgdHdvLWRvdCBzZWdtZW50LA0KICAgICAgICAgICAgLy8gb3IgZW5kcyB3aXRoIGEgdHdvLWRvdCBzZWdtZW50Lg0KICAgICAgICAgICAgaWYgKHBhdGguRXF1YWxzKCIuLiIsIFN0cmluZ0NvbXBhcmlzb24uT3JkaW5hbCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc2IuQXBwZW5kKCIuLiIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gc2IuVG9TdHJpbmcoKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "2BF551B35A7B7F08DB59927BDF6A5259",
              "algorithm": "md5"
            },
            {
              "value": "E06214BD010F41E1875B294AD75E21FBDC0E7584",
              "algorithm": "sha-1"
            },
            {
              "value": "55E2955EDAFC4CFD9EAA72F2895485820CB8D6A1A13C7EB143B19A770FF14FBD",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/VersionControlDetails.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "AB6766B206D2C1100FFED634E9E4B054",
              "algorithm": "md5"
            },
            {
              "value": "07EAB0F49C64C7BEFC53CD125AF841C6B42D56B6",
              "algorithm": "sha-1"
            },
            {
              "value": "456B93C8A853D0E73A25BAC72FA46806F88F52A58AB70F5A73877D4A0B24712A",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/SarifLogBaseliner.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5CYXNlbGluZQ0Kew0KICAgIGludGVybmFsIGNsYXNzIFNhcmlmTG9nQmFzZWxpbmVyIDogSVNhcmlmTG9nQmFzZWxpbmVyDQogICAgew0KICAgICAgICBJRXF1YWxpdHlDb21wYXJlcjxSZXN1bHQ+IFJlc3VsdENvbXBhcmF0b3I7DQoNCiAgICAgICAgcHVibGljIFNhcmlmTG9nQmFzZWxpbmVyKElFcXVhbGl0eUNvbXBhcmVyPFJlc3VsdD4gY29tcGFyYXRvcikNCiAgICAgICAgew0KICAgICAgICAgICAgUmVzdWx0Q29tcGFyYXRvciA9IGNvbXBhcmF0b3I7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgUnVuIENyZWF0ZUJhc2VsaW5lZFJ1bihSdW4gYmFzZUxpbmUsIFJ1biBuZXh0TG9nKQ0KICAgICAgICB7DQogICAgICAgICAgICBSdW4gZGlmZmVyZW5jZWRSdW4gPSBuZXh0TG9nLkRlZXBDbG9uZSgpOw0KICAgICAgICAgICAgZGlmZmVyZW5jZWRSdW4uUmVzdWx0cyA9IG5ldyBMaXN0PFJlc3VsdD4oKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yZWFjaCAodmFyIHJlc3VsdCBpbiBuZXh0TG9nLlJlc3VsdHMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgUmVzdWx0IG5ld1Jlc3VsdCA9IHJlc3VsdC5EZWVwQ2xvbmUoKTsNCg0KICAgICAgICAgICAgICAgIG5ld1Jlc3VsdC5CYXNlbGluZVN0YXRlID0gDQogICAgICAgICAgICAgICAgICAgIGJhc2VMaW5lLlJlc3VsdHMuQ29udGFpbnMocmVzdWx0LCBSZXN1bHRDb21wYXJhdG9yKSA/IEJhc2VsaW5lU3RhdGUuRXhpc3RpbmcgOiBCYXNlbGluZVN0YXRlLk5ldzsNCg0KICAgICAgICAgICAgICAgIGRpZmZlcmVuY2VkUnVuLlJlc3VsdHMuQWRkKG5ld1Jlc3VsdCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZvcmVhY2ggKHZhciByZXN1bHQgaW4gYmFzZUxpbmUuUmVzdWx0cykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoIW5leHRMb2cuUmVzdWx0cy5Db250YWlucyhyZXN1bHQsIFJlc3VsdENvbXBhcmF0b3IpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgUmVzdWx0IG5ld1Jlc3VsdCA9IHJlc3VsdC5EZWVwQ2xvbmUoKTsNCiAgICAgICAgICAgICAgICAgICAgbmV3UmVzdWx0LkJhc2VsaW5lU3RhdGUgPSBCYXNlbGluZVN0YXRlLkFic2VudDsNCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZWRSdW4uUmVzdWx0cy5BZGQobmV3UmVzdWx0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBkaWZmZXJlbmNlZFJ1bjsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "F81204B9AD05F04E8160F1265C3C197A",
              "algorithm": "md5"
            },
            {
              "value": "98F495FCDE0186622E8445E9886436E35C65570B",
              "algorithm": "sha-1"
            },
            {
              "value": "1BF1AFAD6F6D82B6F8C4C170C7A1D44BEB1DEEA62E5B7787A6B318767B3FEF11",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/SarifLogBaselinerFactory.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5CYXNlbGluZQ0Kew0KICAgIHB1YmxpYyBjbGFzcyBTYXJpZkxvZ0Jhc2VsaW5lckZhY3RvcnkNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSVNhcmlmTG9nQmFzZWxpbmVyIENyZWF0ZVNhcmlmTG9nQmFzZWxpbmVyKFNhcmlmQmFzZWxpbmVUeXBlIGxvZ0Jhc2VsaW5lclR5cGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHN3aXRjaCAobG9nQmFzZWxpbmVyVHlwZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjYXNlIFNhcmlmQmFzZWxpbmVUeXBlLlN0cmljdDoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTYXJpZkxvZ0Jhc2VsaW5lcihSZXN1bHQuVmFsdWVDb21wYXJlcik7DQogICAgICAgICAgICAgICAgY2FzZSBTYXJpZkJhc2VsaW5lVHlwZS5TdGFuZGFyZDoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTYXJpZkxvZ0Jhc2VsaW5lcihEZWZhdWx0QmFzZWxpbmUuUmVzdWx0QmFzZWxpbmVFcXVhbHMuRGVmYXVsdEluc3RhbmNlKTsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNhcmlmTG9nQmFzZWxpbmVyKFJlc3VsdC5WYWx1ZUNvbXBhcmVyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "404D29ECD31B159EB92A5AE27AD87823",
              "algorithm": "md5"
            },
            {
              "value": "1B46BD407925104229401E1A20A67C443C526FDC",
              "algorithm": "sha-1"
            },
            {
              "value": "4ACF42BBD72AF3ACF259B9894008B36F1AF54F55C32E07A402962459E1AAAE61",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/CodeFlowBaselineEquals.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuQmFzZWxpbmUuRGVmYXVsdEJhc2VsaW5lDQp7DQogICAgaW50ZXJuYWwgY2xhc3MgQ29kZUZsb3dCYXNlbGluZUVxdWFsaXR5Q29tcGFyYXRvciA6IElFcXVhbGl0eUNvbXBhcmVyPENvZGVGbG93Pg0KICAgIHsNCiAgICAgICAgaW50ZXJuYWwgc3RhdGljIHJlYWRvbmx5IENvZGVGbG93QmFzZWxpbmVFcXVhbGl0eUNvbXBhcmF0b3IgSW5zdGFuY2UgPSBuZXcgQ29kZUZsb3dCYXNlbGluZUVxdWFsaXR5Q29tcGFyYXRvcigpOw0KDQogICAgICAgIHB1YmxpYyBib29sIEVxdWFscyhDb2RlRmxvdyB4LCBDb2RlRmxvdyB5KQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMoeCwgeSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKCFMaXN0Q29tcGFyaXNvbkhlbHBlcnMuQ29tcGFyZUxpc3RzT3JkZXJlZCh4LlRocmVhZEZsb3dzLCB5LlRocmVhZEZsb3dzLCBUaHJlYWRGbG93QmFzZWxpbmVFcXVhbGl0eUNvbXBhcmF0b3IuSW5zdGFuY2UpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGludCBHZXRIYXNoQ29kZShDb2RlRmxvdyBvYmopDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMob2JqLCBudWxsKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpbnQgaHMgPSAwOw0KDQogICAgICAgICAgICAgICAgaHMgPSBocyBeIExpc3RDb21wYXJpc29uSGVscGVycy5HZXRIYXNoT2ZMaXN0Q29udGVudHNPcmRlcmVkKG9iai5UaHJlYWRGbG93cyk7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gaHM7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "23B29AD3477DB48D0D2CD41D1554B413",
              "algorithm": "md5"
            },
            {
              "value": "C5D2D42ED4FD33A0456A7599D2DC50B9F51009EF",
              "algorithm": "sha-1"
            },
            {
              "value": "DCCFBC7987B750D2116418536D4E4025C309ABC2CB0ED68E25311275B3D4D5D9",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/DefaultBaselineExtensions.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5CYXNlbGluZS5EZWZhdWx0QmFzZWxpbmUNCnsNCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIERlZmF1bHRCYXNlbGluZUV4dGVuc2lvbnMNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IEdldE51bGxDaGVja2VkSGFzaENvZGUodGhpcyBvYmplY3Qgb2JqKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob2JqID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gb2JqLkdldEhhc2hDb2RlKCk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "CEFCC4278A87EADF3B0E854C0F9B2598",
              "algorithm": "md5"
            },
            {
              "value": "A1842AFBE28A84C3983E640EB6B16E916FBB95B7",
              "algorithm": "sha-1"
            },
            {
              "value": "D829F87AAFCE833192FEB004AB9C9B642B8C8D9D3963807658CE3AF885855840",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/LocationBaselineEquals.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuQmFzZWxpbmUuRGVmYXVsdEJhc2VsaW5lDQp7DQogICAgaW50ZXJuYWwgY2xhc3MgTG9jYXRpb25CYXNlbGluZUVxdWFscyA6IElFcXVhbGl0eUNvbXBhcmVyPExvY2F0aW9uPg0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBMb2NhdGlvbkJhc2VsaW5lRXF1YWxzIEluc3RhbmNlID0gbmV3IExvY2F0aW9uQmFzZWxpbmVFcXVhbHMoKTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBFcXVhbHMoTG9jYXRpb24geCwgTG9jYXRpb24geSkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKHgsIHkpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIFJlc3VsdCBmaWxlcyBzaG91bGQgbWF0Y2guDQogICAgICAgICAgICAgICAgaWYgKCFQaHlzaWNhbExvY2F0aW9uQmFzZWxpbmVFcXVhbHMuSW5zdGFuY2UuRXF1YWxzKHguUGh5c2ljYWxMb2NhdGlvbiwgeS5QaHlzaWNhbExvY2F0aW9uKSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBDb2RlIGxvY2F0aW9ucyAoZnVsbHkgcXVhbGlmaWVkIGxvZ2ljYWwgbmFtZSkgc2hvdWxkIG1hdGNoLg0KICAgICAgICAgICAgICAgIGlmICh4LkZ1bGx5UXVhbGlmaWVkTG9naWNhbE5hbWUgIT0geS5GdWxseVF1YWxpZmllZExvZ2ljYWxOYW1lKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGludCBHZXRIYXNoQ29kZShMb2NhdGlvbiBvYmopDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMob2JqLCBudWxsKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpbnQgaHMgPSAwOw0KDQogICAgICAgICAgICAgICAgaHMgPSBocyBeIFBoeXNpY2FsTG9jYXRpb25CYXNlbGluZUVxdWFscy5JbnN0YW5jZS5HZXRIYXNoQ29kZShvYmouUGh5c2ljYWxMb2NhdGlvbik7DQoNCiAgICAgICAgICAgICAgICBocyA9IGhzIF4gb2JqLkZ1bGx5UXVhbGlmaWVkTG9naWNhbE5hbWUuR2V0TnVsbENoZWNrZWRIYXNoQ29kZSgpOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuIGhzOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "D4244549420D778F171173F74F848972",
              "algorithm": "md5"
            },
            {
              "value": "04B8BCD0961499C7E78CF995BA51B843B603761E",
              "algorithm": "sha-1"
            },
            {
              "value": "1BC6BA295F6836669DC38ADDDA6B2D54FA6117C70BEA90DBB51D5B973B41071F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ResultBaselineEquals.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5CYXNlbGluZS5EZWZhdWx0QmFzZWxpbmUNCnsNCiAgICBpbnRlcm5hbCBjbGFzcyBSZXN1bHRCYXNlbGluZUVxdWFscyA6IElFcXVhbGl0eUNvbXBhcmVyPFJlc3VsdD4NCiAgICB7DQogICAgICAgIGludGVybmFsIHN0YXRpYyByZWFkb25seSBSZXN1bHRCYXNlbGluZUVxdWFscyBEZWZhdWx0SW5zdGFuY2UgPSBuZXcgUmVzdWx0QmFzZWxpbmVFcXVhbHMoKTsNCiAgICAgICAgDQogICAgICAgIHB1YmxpYyBib29sIEVxdWFscyhSZXN1bHQgeCwgUmVzdWx0IHkpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyh4LCB5KSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAvLyBSdWxlIElEIHNob3VsZCBtYXRjaA0KICAgICAgICAgICAgICAgIGlmICh4LlJ1bGVJZCAhPSB5LlJ1bGVJZCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBUYXJnZXQgZmlsZSBzaG91bGQgbWF0Y2guDQogICAgICAgICAgICAgICAgaWYgKCFGaWxlTG9jYXRpb25CYXNlbGluZUVxdWFscy5JbnN0YW5jZS5FcXVhbHMoeC5BbmFseXNpc1RhcmdldCwgeS5BbmFseXNpc1RhcmdldCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gTG9jYXRpb25zIHNob3VsZCBhbGwgYmUgdGhlIHNhbWUuDQogICAgICAgICAgICAgICAgaWYgKCFMaXN0Q29tcGFyaXNvbkhlbHBlcnMuQ29tcGFyZUxpc3RzQXNTZXRzKHguTG9jYXRpb25zLCB5LkxvY2F0aW9ucywgTG9jYXRpb25CYXNlbGluZUVxdWFscy5JbnN0YW5jZSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gUmVsYXRlZCBMb2NhdGlvbnMgc2hvdWxkIGFsbCBiZSB0aGUgc2FtZS4NCiAgICAgICAgICAgICAgICBpZiAoIUxpc3RDb21wYXJpc29uSGVscGVycy5Db21wYXJlTGlzdHNBc1NldHMoeC5SZWxhdGVkTG9jYXRpb25zLCB5LlJlbGF0ZWRMb2NhdGlvbnMsIExvY2F0aW9uQmFzZWxpbmVFcXVhbHMuSW5zdGFuY2UpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIEZpbmdlcnByaW50cyAodmFsdWVzIG9ubHksIGlnbm9yZSBrZXlzKSBzaG91bGQgYmUgdGhlIHNhbWUuDQogICAgICAgICAgICAgICAgaWYgKCFMaXN0Q29tcGFyaXNvbkhlbHBlcnMuQ29tcGFyZUxpc3RzQXNTZXRzKHguRmluZ2VycHJpbnRzPy5WYWx1ZXM/LlRvTGlzdCgpLCB5LkZpbmdlcnByaW50cz8uVmFsdWVzPy5Ub0xpc3QoKSwgU3RyaW5nQ29tcGFyZXIuT3JkaW5hbCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gUGFydGlhbCBmaW5nZXJwcmludHMgKHZhbHVlcyBvbmx5LCBpZ25vcmUga2V5cykgc2hvdWxkIGJlIHRoZSBzYW1lLg0KICAgICAgICAgICAgICAgIGlmICghTGlzdENvbXBhcmlzb25IZWxwZXJzLkNvbXBhcmVMaXN0c0FzU2V0cyh4LlBhcnRpYWxGaW5nZXJwcmludHM/LlZhbHVlcz8uVG9MaXN0KCksIHkuUGFydGlhbEZpbmdlcnByaW50cz8uVmFsdWVzPy5Ub0xpc3QoKSwgU3RyaW5nQ29tcGFyZXIuT3JkaW5hbCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gSWYgc3RhY2tzIGFyZSBwcmVzZW50LCB3ZSdsbCBtYWtlIHN1cmUgdGhleSdyZSB0aGUgc2FtZQ0KICAgICAgICAgICAgICAgIGlmICghTGlzdENvbXBhcmlzb25IZWxwZXJzLkNvbXBhcmVMaXN0c0FzU2V0cyh4LlN0YWNrcywgeS5TdGFja3MsIFN0YWNrQmFzZWxpbmVFcXVhbHMuSW5zdGFuY2UpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIElmIGNvZGVmbG93cyBhcmUgcHJlc2VudCwgd2UnbGwgbWFrZSBzdXJlIHRoZXkncmUgdGhlIHNhbWUuDQogICAgICAgICAgICAgICAgaWYgKCFMaXN0Q29tcGFyaXNvbkhlbHBlcnMuQ29tcGFyZUxpc3RzQXNTZXRzKHguQ29kZUZsb3dzLCB5LkNvZGVGbG93cywgQ29kZUZsb3dCYXNlbGluZUVxdWFsaXR5Q29tcGFyYXRvci5JbnN0YW5jZSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgaW50IEdldEhhc2hDb2RlKFJlc3VsdCBvYmopDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMob2JqLCBudWxsKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpbnQgaHMgPSAwOw0KDQogICAgICAgICAgICAgICAgaHMgPSBocyBeIG9iai5SdWxlSWQuR2V0TnVsbENoZWNrZWRIYXNoQ29kZSgpIF4gb2JqLlBhcnRpYWxGaW5nZXJwcmludHMuR2V0TnVsbENoZWNrZWRIYXNoQ29kZSgpOw0KDQogICAgICAgICAgICAgICAgaHMgPSBocyBeIExpc3RDb21wYXJpc29uSGVscGVycy5HZXRIYXNoT2ZMaXN0Q29udGVudHNBc1NldHMob2JqLkxvY2F0aW9ucywgTG9jYXRpb25CYXNlbGluZUVxdWFscy5JbnN0YW5jZSk7DQoNCiAgICAgICAgICAgICAgICBocyA9IGhzIF4gTGlzdENvbXBhcmlzb25IZWxwZXJzLkdldEhhc2hPZkxpc3RDb250ZW50c0FzU2V0cyhvYmouUmVsYXRlZExvY2F0aW9ucywgTG9jYXRpb25CYXNlbGluZUVxdWFscy5JbnN0YW5jZSk7DQoNCiAgICAgICAgICAgICAgICBocyA9IGhzIF4gTGlzdENvbXBhcmlzb25IZWxwZXJzLkdldEhhc2hPZkxpc3RDb250ZW50c0FzU2V0cyhvYmouU3RhY2tzLCBTdGFja0Jhc2VsaW5lRXF1YWxzLkluc3RhbmNlKTsNCg0KICAgICAgICAgICAgICAgIGhzID0gaHMgXiBMaXN0Q29tcGFyaXNvbkhlbHBlcnMuR2V0SGFzaE9mTGlzdENvbnRlbnRzQXNTZXRzKG9iai5Db2RlRmxvd3MsIENvZGVGbG93QmFzZWxpbmVFcXVhbGl0eUNvbXBhcmF0b3IuSW5zdGFuY2UpOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuIGhzOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "04FDBFD582F70357A9D23F6EF747807B",
              "algorithm": "md5"
            },
            {
              "value": "212EE5A343F9FA71E7D8C1CF02069B246CBFFAA8",
              "algorithm": "sha-1"
            },
            {
              "value": "8AF4A5B45F09635C30C63741F52C410D36D44E943427CD03A449D951E8E94ECA",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/StackBaselineEquals.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuQmFzZWxpbmUuRGVmYXVsdEJhc2VsaW5lDQp7DQogICAgaW50ZXJuYWwgY2xhc3MgU3RhY2tCYXNlbGluZUVxdWFscyA6IElFcXVhbGl0eUNvbXBhcmVyPFN0YWNrPg0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBTdGFja0Jhc2VsaW5lRXF1YWxzIEluc3RhbmNlID0gbmV3IFN0YWNrQmFzZWxpbmVFcXVhbHMoKTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBFcXVhbHMoU3RhY2sgeCwgU3RhY2sgeSkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKHgsIHkpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmICghTGlzdENvbXBhcmlzb25IZWxwZXJzLkNvbXBhcmVMaXN0c09yZGVyZWQoeC5GcmFtZXMsIHkuRnJhbWVzKSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBpbnQgR2V0SGFzaENvZGUoU3RhY2sgb2JqKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoUmVmZXJlbmNlRXF1YWxzKG9iaiwgbnVsbCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaW50IGhzID0gMDsNCg0KICAgICAgICAgICAgICAgIGhzID0gaHMgXiBMaXN0Q29tcGFyaXNvbkhlbHBlcnMuR2V0SGFzaE9mTGlzdENvbnRlbnRzT3JkZXJlZChvYmouRnJhbWVzLCBTdGFja0ZyYW1lQmFzZWxpbmVFcXVhbHMuSW5zdGFuY2UpOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuIGhzOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "6B05A181D6DCEB9979FD703FD4AB55DA",
              "algorithm": "md5"
            },
            {
              "value": "9D43CA44CA2EBADE007C1335AD9E4AB3DEEB7E62",
              "algorithm": "sha-1"
            },
            {
              "value": "3AF4B4443BFD913FB9AD4526F5E785ED72E69070BCDC0A111D7640065F758638",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/StackFrameBaselineEquals.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuQmFzZWxpbmUuRGVmYXVsdEJhc2VsaW5lDQp7DQogICAgaW50ZXJuYWwgY2xhc3MgU3RhY2tGcmFtZUJhc2VsaW5lRXF1YWxzIDogSUVxdWFsaXR5Q29tcGFyZXI8U3RhY2tGcmFtZT4NCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU3RhY2tGcmFtZUJhc2VsaW5lRXF1YWxzIEluc3RhbmNlID0gbmV3IFN0YWNrRnJhbWVCYXNlbGluZUVxdWFscygpOw0KDQogICAgICAgIHB1YmxpYyBib29sIEVxdWFscyhTdGFja0ZyYW1lIHgsIFN0YWNrRnJhbWUgeSkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKCFvYmplY3QuUmVmZXJlbmNlRXF1YWxzKHgsIHkpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmICh4LkxvY2F0aW9uPy5QaHlzaWNhbExvY2F0aW9uPy5GaWxlTG9jYXRpb24/LlVyaSAhPSB5LkxvY2F0aW9uPy5QaHlzaWNhbExvY2F0aW9uPy5GaWxlTG9jYXRpb24/LlVyaSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAoeC5Nb2R1bGUgIT0geS5Nb2R1bGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKCFMaXN0Q29tcGFyaXNvbkhlbHBlcnMuQ29tcGFyZUxpc3RzT3JkZXJlZCh4LlBhcmFtZXRlcnMsIHkuUGFyYW1ldGVycykpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgaW50IEdldEhhc2hDb2RlKFN0YWNrRnJhbWUgb2JqKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoUmVmZXJlbmNlRXF1YWxzKG9iaiwgbnVsbCkgfHwgb2JqLkxvY2F0aW9uPy5QaHlzaWNhbExvY2F0aW9uPy5GaWxlTG9jYXRpb24/LlVyaSA9PSBudWxsIHx8IG9iai5Nb2R1bGUgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpbnQgaHMgPSAwOw0KDQogICAgICAgICAgICAgICAgaHMgPSBocyBeIG9iai5Mb2NhdGlvbi5QaHlzaWNhbExvY2F0aW9uLkZpbGVMb2NhdGlvbi5VcmkuR2V0TnVsbENoZWNrZWRIYXNoQ29kZSgpOw0KDQogICAgICAgICAgICAgICAgaHMgPSBocyBeIG9iai5Nb2R1bGUuR2V0TnVsbENoZWNrZWRIYXNoQ29kZSgpOw0KDQogICAgICAgICAgICAgICAgaHMgPSBocyBeIExpc3RDb21wYXJpc29uSGVscGVycy5HZXRIYXNoT2ZMaXN0Q29udGVudHNPcmRlcmVkKG9iai5QYXJhbWV0ZXJzKTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiBoczsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "7A7DC8454E236D6B53DECFC378A39ADB",
              "algorithm": "md5"
            },
            {
              "value": "41149837423A1FB9FDBE2CE0AD7EB39FCDC1F84D",
              "algorithm": "sha-1"
            },
            {
              "value": "6846DDB987AE5331B6EC9D43C6295804B2F25C861EF7C5DBE5228083438421BD",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ThreadFlowBaselineEquals.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuQmFzZWxpbmUuRGVmYXVsdEJhc2VsaW5lDQp7DQogICAgaW50ZXJuYWwgY2xhc3MgVGhyZWFkRmxvd0Jhc2VsaW5lRXF1YWxpdHlDb21wYXJhdG9yIDogSUVxdWFsaXR5Q29tcGFyZXI8VGhyZWFkRmxvdz4NCiAgICB7DQogICAgICAgIGludGVybmFsIHN0YXRpYyByZWFkb25seSBUaHJlYWRGbG93QmFzZWxpbmVFcXVhbGl0eUNvbXBhcmF0b3IgSW5zdGFuY2UgPSBuZXcgVGhyZWFkRmxvd0Jhc2VsaW5lRXF1YWxpdHlDb21wYXJhdG9yKCk7DQoNCiAgICAgICAgcHVibGljIGJvb2wgRXF1YWxzKFRocmVhZEZsb3cgeCwgVGhyZWFkRmxvdyB5KQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMoeCwgeSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKCFMaXN0Q29tcGFyaXNvbkhlbHBlcnMuQ29tcGFyZUxpc3RzT3JkZXJlZCh4LkxvY2F0aW9ucywgeS5Mb2NhdGlvbnMsIFRocmVhZEZsb3dMb2NhdGlvbkJhc2VsaW5lRXF1YWxzLkRlZmF1bHRJbnN0YW5jZSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgaW50IEdldEhhc2hDb2RlKFRocmVhZEZsb3cgb2JqKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoUmVmZXJlbmNlRXF1YWxzKG9iaiwgbnVsbCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaW50IGhzID0gMDsNCg0KICAgICAgICAgICAgICAgIGhzID0gaHMgXiBMaXN0Q29tcGFyaXNvbkhlbHBlcnMuR2V0SGFzaE9mTGlzdENvbnRlbnRzT3JkZXJlZChvYmouTG9jYXRpb25zKTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiBoczsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "74CEF9A2CE51AA0A7FA2D47665CC1A65",
              "algorithm": "md5"
            },
            {
              "value": "A082E49E17E17ABBC1776FA9D89907FBE09ECD51",
              "algorithm": "sha-1"
            },
            {
              "value": "A2568F50955A13B0DB9D01EF41EB5D67FD797281B117A29579B6A260B745AE5F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ThreadFlowLocationBaselineEquals.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuQmFzZWxpbmUuRGVmYXVsdEJhc2VsaW5lDQp7DQogICAgaW50ZXJuYWwgY2xhc3MgVGhyZWFkRmxvd0xvY2F0aW9uQmFzZWxpbmVFcXVhbHMgOiBJRXF1YWxpdHlDb21wYXJlcjxUaHJlYWRGbG93TG9jYXRpb24+DQogICAgew0KICAgICAgICBpbnRlcm5hbCBzdGF0aWMgcmVhZG9ubHkgVGhyZWFkRmxvd0xvY2F0aW9uQmFzZWxpbmVFcXVhbHMgRGVmYXVsdEluc3RhbmNlID0gbmV3IFRocmVhZEZsb3dMb2NhdGlvbkJhc2VsaW5lRXF1YWxzKCk7DQogICAgICAgIA0KICAgICAgICBwdWJsaWMgYm9vbCBFcXVhbHMoVGhyZWFkRmxvd0xvY2F0aW9uIHgsIFRocmVhZEZsb3dMb2NhdGlvbiB5KQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoIW9iamVjdC5SZWZlcmVuY2VFcXVhbHMoeCwgeSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKHguSW1wb3J0YW5jZSAhPSB5LkltcG9ydGFuY2UpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKHguTW9kdWxlICE9IHkuTW9kdWxlKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmICghTG9jYXRpb25CYXNlbGluZUVxdWFscy5JbnN0YW5jZS5FcXVhbHMoeC5Mb2NhdGlvbiwgeS5Mb2NhdGlvbikpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgaW50IEdldEhhc2hDb2RlKFRocmVhZEZsb3dMb2NhdGlvbiBvYmopDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMob2JqLCBudWxsKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpbnQgaHMgPSAwOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGhzID0gaHMgXiBvYmouTmVzdGluZ0xldmVsIF4gTG9jYXRpb25CYXNlbGluZUVxdWFscy5JbnN0YW5jZS5HZXRIYXNoQ29kZShvYmouTG9jYXRpb24pOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuIGhzOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "0C6BE9150520E145EEE2423CE2083C90",
              "algorithm": "md5"
            },
            {
              "value": "DA893B4FC0F24DC7E6F915DE59DA79E348C3B304",
              "algorithm": "sha-1"
            },
            {
              "value": "8F4C7AF22EBB4674393EBD05F6AF06B9F5C4EF085685AB4BBD2D931097D47AC6",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Generic/GenericActionPipeline.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUHJvY2Vzc29ycw0Kew0KICAgIHB1YmxpYyBjbGFzcyBHZW5lcmljQWN0aW9uUGlwZWxpbmU8VD4gOiBJQWN0aW9uV3JhcHBlcjxUPg0KICAgIHsNCiAgICAgICAgSUVudW1lcmFibGU8SUFjdGlvbldyYXBwZXI8VD4+IF9zdGFnZXM7DQoNCiAgICAgICAgcHVibGljIEdlbmVyaWNBY3Rpb25QaXBlbGluZShJRW51bWVyYWJsZTxJQWN0aW9uV3JhcHBlcjxUPj4gc3RhZ2VzKQ0KICAgICAgICB7DQogICAgICAgICAgICBfc3RhZ2VzID0gc3RhZ2VzOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIElFbnVtZXJhYmxlPFQ+IEFjdChJRW51bWVyYWJsZTxUPiBjb2xsZWN0aW9uKQ0KICAgICAgICB7DQogICAgICAgICAgICBJRW51bWVyYWJsZTxUPiBpbnRlcm1lZGlhdGUgPSBjb2xsZWN0aW9uOw0KICAgICAgICAgICAgZm9yZWFjaCAodmFyIGFjdGlvbiBpbiBfc3RhZ2VzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZSA9IGFjdGlvbi5BY3QoaW50ZXJtZWRpYXRlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBpbnRlcm1lZGlhdGU7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "8D51071F359BC57BF97656E95B843EA7",
              "algorithm": "md5"
            },
            {
              "value": "22FA1AC5A38F09BF894FC5C840E6615B3DE9C174",
              "algorithm": "sha-1"
            },
            {
              "value": "233C85D79A05A0223390D0B58C35AA8811EB4B75010187184D06620B41DA0D09",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Generic/GenericMappingAction.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUHJvY2Vzc29ycw0Kew0KICAgIHB1YmxpYyBjbGFzcyBHZW5lcmljTWFwcGluZ0FjdGlvbjxUPiA6IElNYXBBY3Rpb248VD4NCiAgICB7DQogICAgICAgIHB1YmxpYyBGdW5jPFQsIFQ+IEFjdGlvbjsNCg0KICAgICAgICBwdWJsaWMgR2VuZXJpY01hcHBpbmdBY3Rpb24oRnVuYzxULCBUPiBhY3Rpb24pDQogICAgICAgIHsNCiAgICAgICAgICAgIEFjdGlvbiA9IGFjdGlvbjsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBJRW51bWVyYWJsZTxUPiBNYXAoSUVudW1lcmFibGU8VD4gY29sbGVjdGlvbikNCiAgICAgICAgew0KICAgICAgICAgICAgTGlzdDxUPiBvdXRwdXQgPSBuZXcgTGlzdDxUPigpOw0KICAgICAgICAgICAgZm9yZWFjaCh2YXIgdmFsdWUgaW4gY29sbGVjdGlvbikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBvdXRwdXQuQWRkKEFjdGlvbi5JbnZva2UodmFsdWUpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgSUVudW1lcmFibGU8VD4gQWN0KElFbnVtZXJhYmxlPFQ+IGxpc3QpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBNYXAobGlzdCk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "4F228959563BAEE6798F2B42BBE71E6D",
              "algorithm": "md5"
            },
            {
              "value": "290233DFC3315AF28EEE4929366F4D75909E5871",
              "algorithm": "sha-1"
            },
            {
              "value": "153AE0C9804E63C9CD10F47A1C2589595F7DD322C7203E634AEF1D42AF4A94C3",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogExtensionMethods.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgICAgICAgIA0KLy8gbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24uIA0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Qcm9jZXNzb3JzDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBTYXJpZiBsb2cgZXh0ZW5zaW9uIG1ldGhvZHMgaW4gb3JkZXIgdG8gYWxsb3cgZm9yIGVhc2Ugb2YgdXNlIGFzIGFuIEFQSS4NCiAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgU2FyaWZMb2dFeHRlbnNpb25NZXRob2RzDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIFNhcmlmTG9nIE1lcmdlKHRoaXMgSUVudW1lcmFibGU8U2FyaWZMb2c+IHNhcmlmTG9nKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKChHZW5lcmljRm9sZEFjdGlvbjxTYXJpZkxvZz4pU2FyaWZMb2dQcm9jZXNzb3JGYWN0b3J5LkdldEFjdGlvblN0YWdlKFNhcmlmTG9nQWN0aW9uLk1lcmdlKSkuRm9sZChzYXJpZkxvZyk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIElFbnVtZXJhYmxlPFNhcmlmTG9nPiBSZWJhc2VVcmkodGhpcyBJRW51bWVyYWJsZTxTYXJpZkxvZz4gc2FyaWZMb2csIHN0cmluZyBiYXNlUGF0aFRva2VuLCBib29sIHJlYmFzZVJlbGF0aXZlVXJpcywgVXJpIHVyaSkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIFNhcmlmTG9nUHJvY2Vzc29yRmFjdG9yeS5HZXRBY3Rpb25TdGFnZShTYXJpZkxvZ0FjdGlvbi5SZWJhc2VVcmksIGJhc2VQYXRoVG9rZW4sIHJlYmFzZVJlbGF0aXZlVXJpcy5Ub1N0cmluZygpLCB1cmkuQWJzb2x1dGVVcmkpLkFjdChzYXJpZkxvZyk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIFNhcmlmTG9nIFJlYmFzZVVyaSh0aGlzIFNhcmlmTG9nIHNhcmlmTG9nLCBzdHJpbmcgYmFzZVBhdGhUb2tlbiwgYm9vbCByZWJhc2VSZWxhdGl2ZVVyaXMsIFVyaSB1cmkpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAobmV3IExpc3Q8U2FyaWZMb2c+KCkgeyBzYXJpZkxvZyB9KS5SZWJhc2VVcmkoYmFzZVBhdGhUb2tlbiwgcmViYXNlUmVsYXRpdmVVcmlzLCB1cmkpLlNpbmdsZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBJRW51bWVyYWJsZTxTYXJpZkxvZz4gTWFrZVVyaXNBYnNvbHV0ZSh0aGlzIElFbnVtZXJhYmxlPFNhcmlmTG9nPiBzYXJpZkxvZ3MpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBTYXJpZkxvZ1Byb2Nlc3NvckZhY3RvcnkuR2V0QWN0aW9uU3RhZ2UoU2FyaWZMb2dBY3Rpb24uTWFrZVVyaXNBYnNvbHV0ZSkuQWN0KHNhcmlmTG9ncyk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIFNhcmlmTG9nIE1ha2VVcmlzQWJzb2x1dGUodGhpcyBTYXJpZkxvZyBzYXJpZkxvZykNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIChuZXcgTGlzdDxTYXJpZkxvZz4oKSB7IHNhcmlmTG9nIH0pLk1ha2VVcmlzQWJzb2x1dGUoKS5TaW5nbGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "3565FB7A37A79A16CB7C4F2372973587",
              "algorithm": "md5"
            },
            {
              "value": "363E1D610FEE5E11917B5A9F039520BBDA02BE11",
              "algorithm": "sha-1"
            },
            {
              "value": "67F834C13D58FDC6BE981A69988E1A9A8AA25FC9631183ABAAACF45B64505428",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogPipeline.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgICAgICAgIA0KLy8gbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24uIA0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KdXNpbmcgTmV3dG9uc29mdC5Kc29uOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Qcm9jZXNzb3JzDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBTZXJpYWxpemFibGUgbG9nIG1hbmlwdWxhdGlvbiBwaXBlbGluZS0tdGFrZXMgYSBzZXJpZXMgb2Ygc3RhZ2VzLCBhbmQgdGhlbiBleGVjdXRlcyB0aGVtIHNlcXVlbnRpYWxseSBvbiBhIGxvZyBmaWxlLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW1NlcmlhbGl6YWJsZV0NCiAgICBwdWJsaWMgY2xhc3MgU2FyaWZMb2dQaXBlbGluZQ0KICAgIHsNCiAgICAgICAgW0pzb25SZXF1aXJlZF0NCiAgICAgICAgcHVibGljIExpc3Q8U2FyaWZMb2dBY3Rpb25UdXBsZT4gQWN0aW9ucw0KICAgICAgICB7DQogICAgICAgICAgICBnZXQ7DQogICAgICAgICAgICBwcml2YXRlIHNldDsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgcHJpdmF0ZSBHZW5lcmljQWN0aW9uUGlwZWxpbmU8U2FyaWZMb2c+IF9waXBlbGluZTsNCg0KICAgICAgICBbSnNvbkNvbnN0cnVjdG9yXQ0KICAgICAgICBwdWJsaWMgU2FyaWZMb2dQaXBlbGluZShMaXN0PFNhcmlmTG9nQWN0aW9uVHVwbGU+IGFjdGlvbnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRoaXMuQWN0aW9ucyA9IGFjdGlvbnM7DQogICAgICAgICAgICANCiAgICAgICAgICAgIF9waXBlbGluZSA9IG5ldyBHZW5lcmljQWN0aW9uUGlwZWxpbmU8U2FyaWZMb2c+KEFjdGlvbnMuU2VsZWN0KGEgPT4gU2FyaWZMb2dQcm9jZXNzb3JGYWN0b3J5LkdldEFjdGlvblN0YWdlKGEuQWN0aW9uLCBhLlBhcmFtZXRlcnMpKSk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgSUVudW1lcmFibGU8U2FyaWZMb2c+IEFwcGx5UGlwZWxpbmUoSUVudW1lcmFibGU8U2FyaWZMb2c+IGxvZ3MpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBfcGlwZWxpbmUuQWN0KGxvZ3MpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBUd28gcGlwZWxpbmVzIGFyZSBlcXVhbCBpZiB0aGV5IGFwcGx5IHRoZSBzYW1lIHN0ZXBzIHRvIHRoZSBpbnB1dCBzYXJpZiBmaWxlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIG92ZXJyaWRlIGJvb2wgRXF1YWxzKG9iamVjdCBvYmopDQogICAgICAgIHsNCiAgICAgICAgICAgIFNhcmlmTG9nUGlwZWxpbmUgb3RoZXIgPSBvYmogYXMgU2FyaWZMb2dQaXBlbGluZTsNCg0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGJhc2UuRXF1YWxzKG9iaik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChvdGhlci5BY3Rpb25zLkNvdW50ICE9IHRoaXMuQWN0aW9ucy5Db3VudCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5BY3Rpb25zLkNvdW50OyBpKyspDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYoIXRoaXMuQWN0aW9uc1tpXS5FcXVhbHMob3RoZXIuQWN0aW9uc1tpXSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdlbmVyYXRlZCBieSBWaXN1YWwgU3R1ZGlvLiAgV2UncmUgb3ZlcnJpZGluZyBFcXVhbHMoKSBzbyB3ZSBuZWVkIHRvIG92ZXJyaWRlIHRoaXMgYXMgd2VsbC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIG92ZXJyaWRlIGludCBHZXRIYXNoQ29kZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAxNTIyNjg0MzI0ICsgRXF1YWxpdHlDb21wYXJlcjxMaXN0PFNhcmlmTG9nQWN0aW9uVHVwbGU+Pi5EZWZhdWx0LkdldEhhc2hDb2RlKEFjdGlvbnMpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "7E608349B86D87BCDCECB2D66604BE15",
              "algorithm": "md5"
            },
            {
              "value": "F5F45557ED008C120569D3F51CC5E008F567C23F",
              "algorithm": "sha-1"
            },
            {
              "value": "BCE4694158326EE26375800CF99FFA11D7A4F0A99CAF81E929497FBB8C738798",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogStageFactory.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgICAgICAgIA0KLy8gbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24uIA0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5EaWFnbm9zdGljczsNCg0KdXNpbmcgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5WaXNpdG9yczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUHJvY2Vzc29ycw0Kew0KICAgIHB1YmxpYyBjbGFzcyBTYXJpZkxvZ1Byb2Nlc3NvckZhY3RvcnkNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUFjdGlvbldyYXBwZXI8U2FyaWZMb2c+IEdldEFjdGlvblN0YWdlKFNhcmlmTG9nQWN0aW9uIGFjdGlvbiwgcGFyYW1zIHN0cmluZ1tdIGFyZ3MpDQogICAgICAgIHsNCiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGNhc2UgU2FyaWZMb2dBY3Rpb24uTm9uZToNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR2VuZXJpY01hcHBpbmdBY3Rpb248U2FyaWZMb2c+KGEgPT4gYSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNhc2UgU2FyaWZMb2dBY3Rpb24uTWFrZVVyaXNBYnNvbHV0ZToNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR2VuZXJpY01hcHBpbmdBY3Rpb248U2FyaWZMb2c+KGxvZyA9Pg0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBBYnNvbHV0ZVVyaXNWaXNpdG9yIHZpc2l0b3IgPSBuZXcgQWJzb2x1dGVVcmlzVmlzaXRvcigpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuVmlzaXRTYXJpZkxvZyhsb2cpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2FzZSBTYXJpZkxvZ0FjdGlvbi5SZWJhc2VVcmk6DQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEdlbmVyaWNNYXBwaW5nQWN0aW9uPFNhcmlmTG9nPihsb2cgPT4NCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgYm9vbCByZWJhc2VSZWxhdGl2ZVVyaXMgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2wgY2FzdFJlbGF0aXZlVXJpc0FyZyA9IGJvb2wuVHJ5UGFyc2UoYXJnc1sxXSwgb3V0IHJlYmFzZVJlbGF0aXZlVXJpcyk7DQogICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQoY2FzdFJlbGF0aXZlVXJpc0FyZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIFJlYmFzZVVyaVZpc2l0b3IgdmlzaXRvciA9IG5ldyBSZWJhc2VVcmlWaXNpdG9yKGFyZ3NbMF0sIHJlYmFzZVJlbGF0aXZlVXJpcywgbmV3IFVyaShhcmdzWzJdKSk7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci5WaXNpdFNhcmlmTG9nKGxvZyk7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjYXNlIFNhcmlmTG9nQWN0aW9uLk1lcmdlOg0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHZW5lcmljRm9sZEFjdGlvbjxTYXJpZkxvZz4obWVyZ2VGdW5jdGlvbik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNhc2UgU2FyaWZMb2dBY3Rpb24uU29ydDoNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjYXNlIFNhcmlmTG9nQWN0aW9uLk1ha2VEZXRlcm1pbmlzdGljOg0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbigkIlVua25vd24vTm90IFN1cHBvcnRlZCBBY3Rpb24ge2FjdGlvbn0uIiwgbmFtZW9mKGFjdGlvbikpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBwcml2YXRlIHN0YXRpYyBGdW5jPFNhcmlmTG9nLCBTYXJpZkxvZywgU2FyaWZMb2c+IG1lcmdlRnVuY3Rpb24gPQ0KICAgICAgICAgICAgKGFjY3VtdWxhdG9yLCBuZXh0TG9nKSA9Pg0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChuZXh0TG9nLlJ1bnMgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAoYWNjdW11bGF0b3IuUnVucyA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IuUnVucyA9IG5ldyBMaXN0PFJ1bj4oKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgcnVuIGluIG5leHRMb2cuUnVucykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmIChydW4gIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IuUnVucy5BZGQocnVuKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7DQogICAgICAgICAgICB9Ow0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "8297925B8D45182F9671789364705BAE",
              "algorithm": "md5"
            },
            {
              "value": "C674FBF4C8B600B7A808F2410902747CA13D1E1F",
              "algorithm": "sha-1"
            },
            {
              "value": "918BD6142A3C10DFE1951D63CC6ECB33C4CF2767725712E6AB9E27281CB93684",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/EnumConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBOZXd0b25zb2Z0Lkpzb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnMNCnsNCiAgICBwdWJsaWMgY2xhc3MgRW51bUNvbnZlcnRlciA6IEpzb25Db252ZXJ0ZXINCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRW51bUNvbnZlcnRlciBJbnN0YW5jZSA9IG5ldyBFbnVtQ29udmVydGVyKCk7DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIGJvb2wgQ2FuQ29udmVydChUeXBlIG9iamVjdFR5cGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIG9iamVjdCBSZWFkSnNvbihKc29uUmVhZGVyIHJlYWRlciwgVHlwZSBvYmplY3RUeXBlLCBvYmplY3QgZXhpc3RpbmdWYWx1ZSwgSnNvblNlcmlhbGl6ZXIgc2VyaWFsaXplcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHJlYWRlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKHJlYWRlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBzdHJpbmcgdmFsdWUgPSAoc3RyaW5nKXJlYWRlci5WYWx1ZTsNCiAgICAgICAgICAgIHJldHVybiBFbnVtLlBhcnNlKG9iamVjdFR5cGUsIENvbnZlcnRUb1Bhc2NhbENhc2UodmFsdWUpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFdyaXRlSnNvbihKc29uV3JpdGVyIHdyaXRlciwgb2JqZWN0IHZhbHVlLCBKc29uU2VyaWFsaXplciBzZXJpYWxpemVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAod3JpdGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yod3JpdGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKHZhbHVlKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHN0cmluZyByZXN1bHRMZXZlbFN0cmluZyA9IHZhbHVlLlRvU3RyaW5nKCk7DQoNCiAgICAgICAgICAgIHJlc3VsdExldmVsU3RyaW5nID0gQ29udmVydFRvQ2FtZWxDYXNlKHJlc3VsdExldmVsU3RyaW5nKTsNCg0KICAgICAgICAgICAgd3JpdGVyLldyaXRlUmF3VmFsdWUoIlwiIiArIHJlc3VsdExldmVsU3RyaW5nICsgIlwiIik7DQogICAgICAgIH0NCg0KICAgICAgICBpbnRlcm5hbCBzdGF0aWMgc3RyaW5nIENvbnZlcnRUb0NhbWVsQ2FzZShzdHJpbmcgdXBwZXJDYXNlTmFtZSkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHVwcGVyQ2FzZU5hbWUuTGVuZ3RoID09IDEpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHVwcGVyQ2FzZU5hbWUuVG9Mb3dlckludmFyaWFudCgpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpbnQgcHJlZml4Q291bnQgPSBJc1ByZWZpeGVkV2l0aFR3b0xldHRlcldvcmQodXBwZXJDYXNlTmFtZSkgPyAyIDogMTsNCg0KICAgICAgICAgICAgcmV0dXJuIHVwcGVyQ2FzZU5hbWUuU3Vic3RyaW5nKDAsIHByZWZpeENvdW50KS5Ub0xvd2VySW52YXJpYW50KCkgKyB1cHBlckNhc2VOYW1lLlN1YnN0cmluZyhwcmVmaXhDb3VudCk7DQogICAgICAgIH0NCg0KICAgICAgICBpbnRlcm5hbCBzdGF0aWMgc3RyaW5nIENvbnZlcnRUb1Bhc2NhbENhc2Uoc3RyaW5nIGNhbWVsQ2FzZU5hbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChjYW1lbENhc2VOYW1lLkxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBjYW1lbENhc2VOYW1lLlRvVXBwZXJJbnZhcmlhbnQoKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaW50IHByZWZpeENvdW50ID0gSXNQcmVmaXhlZFdpdGhUd29MZXR0ZXJXb3JkKGNhbWVsQ2FzZU5hbWUpID8gMiA6IDE7DQoNCiAgICAgICAgICAgIHJldHVybiBjYW1lbENhc2VOYW1lLlN1YnN0cmluZygwLCBwcmVmaXhDb3VudCkuVG9VcHBlckludmFyaWFudCgpICsgY2FtZWxDYXNlTmFtZS5TdWJzdHJpbmcocHJlZml4Q291bnQpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgYm9vbCBJc1ByZWZpeGVkV2l0aFR3b0xldHRlcldvcmQoc3RyaW5nIG5hbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChuYW1lLkxlbmd0aCA8IDIpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBib29sIGlzUHJlZml4ZWRXaXRoVHdvTGV0dGVyV29yZCA9IENoYXIuSXNVcHBlcihuYW1lWzBdKSA9PSBDaGFyLklzVXBwZXIobmFtZVsxXSk7DQoNCiAgICAgICAgICAgIGlmIChuYW1lLkxlbmd0aCA9PSAyKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBpc1ByZWZpeGVkV2l0aFR3b0xldHRlcldvcmQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAoQ2hhci5Jc0RpZ2l0KG5hbWVbMl0pIHx8IENoYXIuSXNVcHBlcihuYW1lWzJdKSk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "0F3FFA9117E8946AEC29CC45B7FFD62D",
              "algorithm": "md5"
            },
            {
              "value": "BD5497824ADC8624723E9CC3AB5D6A33BCC66E0C",
              "algorithm": "sha-1"
            },
            {
              "value": "AD29F45CCCBE9CB442B4EA294982B17310F4BF497E37836945954BCA9980711C",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/FlagsEnumConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQoNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUmVhZGVycw0Kew0KICAgIFtTeXN0ZW0uRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZSgiTWljcm9zb2Z0Lk5hbWluZyIsICJDQTE3MjY6VXNlUHJlZmVycmVkVGVybXMiLCBNZXNzYWdlSWQgPSAiRmxhZ3MiKV0NCiAgICBwdWJsaWMgY2xhc3MgRmxhZ3NFbnVtQ29udmVydGVyIDogSnNvbkNvbnZlcnRlcg0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBGbGFnc0VudW1Db252ZXJ0ZXIgSW5zdGFuY2UgPSBuZXcgRmxhZ3NFbnVtQ29udmVydGVyKCk7DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIGJvb2wgQ2FuQ29udmVydChUeXBlIG9iamVjdFR5cGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIG9iamVjdCBSZWFkSnNvbihKc29uUmVhZGVyIHJlYWRlciwgVHlwZSBvYmplY3RUeXBlLCBvYmplY3QgZXhpc3RpbmdWYWx1ZSwgSnNvblNlcmlhbGl6ZXIgc2VyaWFsaXplcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHJlYWRlciA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24obmFtZW9mKHJlYWRlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpbnQgcmVzdWx0ID0gMDsNCg0KICAgICAgICAgICAgLy8gV2hhdCdzIGhhcHBlbmluZyBpbiB0aGlzIGNvZGU/IFdlIGV4cHJlc3MgW0ZsYWdzXSBlbnVtcyBpbiBKU09OIGFzIGFycmF5cyBvZg0KICAgICAgICAgICAgLy8gc3RyaW5ncy4gT24gZGVzZXJpYWxpemF0aW9uLCB3ZSB3YWxrIHRoZSBhcnJheSwgbG9jYXRlIGVhY2ggc3RyaW5nLCANCiAgICAgICAgICAgIC8vIGFuZCBjb252ZXJ0IGl0IHRvIGl0cyBlcXVpdmFsZW50IGVudW0gdmFsdWUuIEJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBhIHN0cm9uZw0KICAgICAgICAgICAgLy8gc2Vuc2Ugb2YgdGhlIGRlc3RpbmF0aW9uIHR5cGUsIHdlIHNpbXBseSB0cmVhdCB0aGUgZW51bSB2YWx1ZXMgYXMgbnVtYmVycw0KICAgICAgICAgICAgLy8gYW5kIE9SIHRoZW0gdG9nZXRoZXIuIFRoaXMgbnVtYmVyIHdpbGwgZXZlbnR1YWxseSBiZSB1bmJveGVkIGFuZCBhc3NpZ25lZA0KICAgICAgICAgICAgLy8gdG8gdGhlIHRhcmdldCBlbnVtIHByb3BlcnR5Lg0KDQogICAgICAgICAgICAvLyBSZWFkIHN0YXJ0IG9mIGFycmF5DQogICAgICAgICAgICByZWFkZXIuUmVhZCgpOw0KDQogICAgICAgICAgICB3aGlsZSAocmVhZGVyLlRva2VuVHlwZSA9PSBKc29uVG9rZW4uU3RyaW5nKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0cmluZyBlbnVtTmFtZSA9IEVudW1Db252ZXJ0ZXIuQ29udmVydFRvUGFzY2FsQ2FzZSgoc3RyaW5nKXJlYWRlci5WYWx1ZSk7DQogICAgICAgICAgICAgICAgcmVzdWx0IHw9IChpbnQpRW51bS5QYXJzZShvYmplY3RUeXBlLCBlbnVtTmFtZSk7DQogICAgICAgICAgICAgICAgcmVhZGVyLlJlYWQoKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFdyaXRlSnNvbihKc29uV3JpdGVyIHdyaXRlciwgb2JqZWN0IHZhbHVlLCBKc29uU2VyaWFsaXplciBzZXJpYWxpemVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAod3JpdGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yod3JpdGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghKHZhbHVlIGlzIFN1cHByZXNzaW9uU3RhdGVzIHx8IHZhbHVlIGlzIEZpbGVSb2xlcykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgd3JpdGVyLldyaXRlVmFsdWUodmFsdWUpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgc3RyaW5nIGZsYWdzRW51bVZhbHVlID0gdmFsdWUuVG9TdHJpbmcoKTsNCg0KICAgICAgICAgICAgc3RyaW5nW10gdG9rZW5zID0gZmxhZ3NFbnVtVmFsdWUuU3BsaXQoJywnKTsNCg0KDQogICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHRva2Vucy5MZW5ndGg7IGkrKykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0b2tlbnNbaV0gPSBFbnVtQ29udmVydGVyLkNvbnZlcnRUb0NhbWVsQ2FzZSh0b2tlbnNbaV0uVHJpbSgpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgd3JpdGVyLldyaXRlUmF3VmFsdWUoIltcIiIgKyBTdHJpbmcuSm9pbigiXCIsXCIiLCB0b2tlbnMpICsgIlwiXSIpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "CB03A965E1ABDBA563764423F7C0917A",
              "algorithm": "md5"
            },
            {
              "value": "448C406610A6103CCDB507B139C78E42FA55A9B2",
              "algorithm": "sha-1"
            },
            {
              "value": "3CD311C9E67272B85294FEE554CCE103EFDCAF1CD9FAFAB9F7460DF79C011FF9",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/PropertyBagConverter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUmVhZGVycw0Kew0KICAgIC8vLyA8c3VtbWFyeT4NCiAgICAvLy8gQ29udmVydHMgYSBwcm9wZXJ0eSBiYWcgKGEgSlNPTiBvYmplY3Qgd2hvc2Uga2V5cyBoYXZlIGFyYml0cmFyeSBuYW1lcyBhbmQgd2hvc2UgdmFsdWVzDQogICAgLy8vIG1heSBiZSBhbnkgSlNPTiB2YWx1ZXMpIGludG8gYSBkaWN0aW9uYXJ5IHdob3NlIGtleXMgbWF0Y2ggdGhlIEpTT04gb2JqZWN0J3MNCiAgICAvLy8gcHJvcGVydHkgbmFtZXMsIGFuZCB3aG9zZSB2YWx1ZXMgYXJlIG9mIHR5cGUgPHNlZSBjcmVmPSJTZXJpYWxpemVkUHJvcGVydHlJbmZvIi8+DQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBpbnRlcm5hbCBjbGFzcyBQcm9wZXJ0eUJhZ0NvbnZlcnRlciA6IEpzb25Db252ZXJ0ZXINCiAgICB7DQogICAgICAgIGludGVybmFsIHN0YXRpYyByZWFkb25seSBKc29uQ29udmVydGVyIEluc3RhbmNlID0gbmV3IFByb3BlcnR5QmFnQ29udmVydGVyKCk7DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIGJvb2wgQ2FuQ29udmVydChUeXBlIG9iamVjdFR5cGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiB0eXBlb2YoSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPikuSXNBc3NpZ25hYmxlRnJvbShvYmplY3RUeXBlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSBvYmplY3QgUmVhZEpzb24oSnNvblJlYWRlciByZWFkZXIsIFR5cGUgb2JqZWN0VHlwZSwgb2JqZWN0IGV4aXN0aW5nVmFsdWUsIEpzb25TZXJpYWxpemVyIHNlcmlhbGl6ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChzZXJpYWxpemVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yoc2VyaWFsaXplcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2YXIgb2JqZWN0RGljdGlvbmFyeSA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgb2JqZWN0PigpOw0KICAgICAgICAgICAgc2VyaWFsaXplci5Qb3B1bGF0ZShyZWFkZXIsIG9iamVjdERpY3Rpb25hcnkpOw0KDQogICAgICAgICAgICB2YXIgcHJvcGVydHlEaWN0aW9uYXJ5ID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPigpOw0KICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIGtleSBpbiBvYmplY3REaWN0aW9uYXJ5LktleXMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgVHlwZSBwcm9wZXJ0eVR5cGUgPSBvYmplY3REaWN0aW9uYXJ5W2tleV0uR2V0VHlwZSgpOw0KDQogICAgICAgICAgICAgICAgc3RyaW5nIHNlcmlhbGl6ZWRWYWx1ZSA9IG9iamVjdERpY3Rpb25hcnlba2V5XS5Ub1N0cmluZygpOw0KICAgICAgICAgICAgICAgIGJvb2wgaXNTdHJpbmcgPSBmYWxzZTsNCg0KICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eVR5cGUgPT0gdHlwZW9mKGJvb2wpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplZFZhbHVlID0gc2VyaWFsaXplZFZhbHVlLlRvTG93ZXJJbnZhcmlhbnQoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcGVydHlUeXBlID09IHR5cGVvZihzdHJpbmcpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplZFZhbHVlID0gJyInICsgU3lzdGVtLldlYi5IdHRwVXRpbGl0eS5KYXZhU2NyaXB0U3RyaW5nRW5jb2RlKHNlcmlhbGl6ZWRWYWx1ZSkgKyAnIic7DQogICAgICAgICAgICAgICAgICAgIGlzU3RyaW5nID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBwcm9wZXJ0eURpY3Rpb25hcnkuQWRkKA0KICAgICAgICAgICAgICAgICAgICBrZXksDQogICAgICAgICAgICAgICAgICAgIG5ldyBTZXJpYWxpemVkUHJvcGVydHlJbmZvKHNlcmlhbGl6ZWRWYWx1ZSwgaXNTdHJpbmcpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5RGljdGlvbmFyeTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFdyaXRlSnNvbihKc29uV3JpdGVyIHdyaXRlciwgb2JqZWN0IHZhbHVlLCBKc29uU2VyaWFsaXplciBzZXJpYWxpemVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAod3JpdGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yod3JpdGVyKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHdyaXRlci5Xcml0ZVN0YXJ0T2JqZWN0KCk7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlEaWN0aW9uYXJ5ID0gKERpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPil2YWx1ZTsNCiAgICAgICAgICAgIGZvcmVhY2ggKHN0cmluZyBrZXkgaW4gcHJvcGVydHlEaWN0aW9uYXJ5LktleXMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgd3JpdGVyLldyaXRlUHJvcGVydHlOYW1lKGtleSk7DQogICAgICAgICAgICAgICAgd3JpdGVyLldyaXRlUmF3VmFsdWUocHJvcGVydHlEaWN0aW9uYXJ5W2tleV0uU2VyaWFsaXplZFZhbHVlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgd3JpdGVyLldyaXRlRW5kT2JqZWN0KCk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "89029E741A4E276389E08CF4D00035E8",
              "algorithm": "md5"
            },
            {
              "value": "A67445B68B9457DABBABE5EBF60521C8D5AAFCAB",
              "algorithm": "sha-1"
            },
            {
              "value": "7FFF6218E021C7313839B90B6A1C1E4FE0709869E27D1BA1B06D2AA2854BF51F",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/ResultDiffingVisitor.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUmVhZGVycw0Kew0KICAgIHB1YmxpYyBjbGFzcyBSZXN1bHREaWZmaW5nVmlzaXRvciA6IFNhcmlmUmV3cml0aW5nVmlzaXRvcg0KICAgIHsNCiAgICAgICAgcHVibGljIFJlc3VsdERpZmZpbmdWaXNpdG9yKFNhcmlmTG9nIHNhcmlmTG9nKQ0KICAgICAgICB7DQogICAgICAgICAgICB0aGlzLkFic2VudFJlc3VsdHMgPSBuZXcgSGFzaFNldDxSZXN1bHQ+KFJlc3VsdC5WYWx1ZUNvbXBhcmVyKTsNCiAgICAgICAgICAgIHRoaXMuU2hhcmVkUmVzdWx0cyA9IG5ldyBIYXNoU2V0PFJlc3VsdD4oUmVzdWx0LlZhbHVlQ29tcGFyZXIpOw0KICAgICAgICAgICAgdGhpcy5OZXdSZXN1bHRzID0gbmV3IEhhc2hTZXQ8UmVzdWx0PihSZXN1bHQuVmFsdWVDb21wYXJlcik7DQoNCiAgICAgICAgICAgIFZpc2l0U2FyaWZMb2coc2FyaWZMb2cpOw0KICAgICAgICB9DQoNCiAgICAgICAgW1N5c3RlbS5EaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlKCJNaWNyb3NvZnQuVXNhZ2UiLCAiQ0EyMjI3OkNvbGxlY3Rpb25Qcm9wZXJ0aWVzU2hvdWxkQmVSZWFkT25seSIpXQ0KICAgICAgICBwdWJsaWMgSGFzaFNldDxSZXN1bHQ+IE5ld1Jlc3VsdHMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIFtTeXN0ZW0uRGlhZ25vc3RpY3MuQ29kZUFuYWx5c2lzLlN1cHByZXNzTWVzc2FnZSgiTWljcm9zb2Z0LlVzYWdlIiwgIkNBMjIyNzpDb2xsZWN0aW9uUHJvcGVydGllc1Nob3VsZEJlUmVhZE9ubHkiKV0NCiAgICAgICAgcHVibGljIEhhc2hTZXQ8UmVzdWx0PiBBYnNlbnRSZXN1bHRzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBbU3lzdGVtLkRpYWdub3N0aWNzLkNvZGVBbmFseXNpcy5TdXBwcmVzc01lc3NhZ2UoIk1pY3Jvc29mdC5Vc2FnZSIsICJDQTIyMjc6Q29sbGVjdGlvblByb3BlcnRpZXNTaG91bGRCZVJlYWRPbmx5IildDQogICAgICAgIHB1YmxpYyBIYXNoU2V0PFJlc3VsdD4gU2hhcmVkUmVzdWx0cyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJlc3VsdCBWaXNpdFJlc3VsdChSZXN1bHQgbm9kZSkNCiAgICAgICAgew0KICAgICAgICAgICAgdGhpcy5OZXdSZXN1bHRzLkFkZChub2RlKTsNCiAgICAgICAgICAgIHJldHVybiBub2RlOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGJvb2wgRGlmZihJRW51bWVyYWJsZTxSZXN1bHQ+IGFjdHVhbCkNCiAgICAgICAgew0KDQogICAgICAgICAgICB0aGlzLkFic2VudFJlc3VsdHMgPSB0aGlzLlNoYXJlZFJlc3VsdHM7DQoNCiAgICAgICAgICAgIHRoaXMuU2hhcmVkUmVzdWx0cyA9IG5ldyBIYXNoU2V0PFJlc3VsdD4oUmVzdWx0LlZhbHVlQ29tcGFyZXIpOw0KDQogICAgICAgICAgICBmb3JlYWNoIChSZXN1bHQgcmVzdWx0IGluIHRoaXMuTmV3UmVzdWx0cykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aGlzLkFic2VudFJlc3VsdHMuQWRkKHJlc3VsdCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHRoaXMuTmV3UmVzdWx0cy5DbGVhcigpOw0KDQogICAgICAgICAgICBpZiAoYWN0dWFsICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoUmVzdWx0IHJlc3VsdCBpbiBhY3R1YWwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5BYnNlbnRSZXN1bHRzLkNvbnRhaW5zKHJlc3VsdCkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuU2hhcmVkUmVzdWx0cy5BZGQocmVzdWx0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuQWJzZW50UmVzdWx0cy5SZW1vdmUocmVzdWx0KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTmV3UmVzdWx0cy5BZGQocmVzdWx0KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgdGhpcy5BYnNlbnRSZXN1bHRzLkNvdW50ID09IDAgJiYNCiAgICAgICAgICAgICAgICB0aGlzLk5ld1Jlc3VsdHMuQ291bnQgPT0gMDsNCg0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "C571765BE74097DEE401160603F67D5B",
              "algorithm": "md5"
            },
            {
              "value": "E572A36A604EE4916286B45CF17056FED5144BE5",
              "algorithm": "sha-1"
            },
            {
              "value": "B8338FAC3779201C800C04D7A75974BE51970A6771CDE8B0CBB8E925E3421C43",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "91BAA6B1CA828DDD6E1BE08A123BD507",
              "algorithm": "md5"
            },
            {
              "value": "40999CFC0A59BB70006E32768FECBBEC2A4CCD23",
              "algorithm": "sha-1"
            },
            {
              "value": "F64983DCF9C0BE14F60C1C49F78441218EC8DCEE189262CBEB23E4EB5DEEE6C5",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOneEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "AE5B60EE365D0308BC8B85BE7F43B7D0",
              "algorithm": "md5"
            },
            {
              "value": "82D29A0CFE2163E3991F01E58077E9F7916B04D8",
              "algorithm": "sha-1"
            },
            {
              "value": "C0632D351F1EE06BF779D607777C5ADD5FDB2DDE565F7D0C424ABC5EA7E82E2B",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotationVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBBbm5vdGF0aW9uVmVyc2lvbk9uZSA6IElTYXJpZk5vZGVWZXJzaW9uT25lDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPEFubm90YXRpb25WZXJzaW9uT25lPiBWYWx1ZUNvbXBhcmVyID0+IEFubm90YXRpb25WZXJzaW9uT25lRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhBbm5vdGF0aW9uVmVyc2lvbk9uZSBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlVmVyc2lvbk9uZSIgLz4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZSBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZQ0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZFZlcnNpb25PbmUuQW5ub3RhdGlvblZlcnNpb25PbmU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIG1lc3NhZ2UgcmVsZXZhbnQgdG8gYSBjb2RlIGxvY2F0aW9uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAibWVzc2FnZSIsIElzUmVxdWlyZWQgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBNZXNzYWdlIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiAncGh5c2ljYWxMb2NhdGlvbicgb2JqZWN0cyBhc3NvY2lhdGVkIHdpdGggdGhlIGFubm90YXRpb24uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAibG9jYXRpb25zIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8UGh5c2ljYWxMb2NhdGlvblZlcnNpb25PbmU+IExvY2F0aW9ucyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iQW5ub3RhdGlvblZlcnNpb25PbmUiIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgQW5ub3RhdGlvblZlcnNpb25PbmUoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJBbm5vdGF0aW9uVmVyc2lvbk9uZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im1lc3NhZ2UiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IE1lc3NhZ2UiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJsb2NhdGlvbnMiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IExvY2F0aW9ucyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICBwdWJsaWMgQW5ub3RhdGlvblZlcnNpb25PbmUoc3RyaW5nIG1lc3NhZ2UsIElFbnVtZXJhYmxlPFBoeXNpY2FsTG9jYXRpb25WZXJzaW9uT25lPiBsb2NhdGlvbnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEluaXQobWVzc2FnZSwgbG9jYXRpb25zKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkFubm90YXRpb25WZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBBbm5vdGF0aW9uVmVyc2lvbk9uZShBbm5vdGF0aW9uVmVyc2lvbk9uZSBvdGhlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yob3RoZXIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSW5pdChvdGhlci5NZXNzYWdlLCBvdGhlci5Mb2NhdGlvbnMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZVZlcnNpb25PbmUgSVNhcmlmTm9kZVZlcnNpb25PbmUuRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIERlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhpcyBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIEFubm90YXRpb25WZXJzaW9uT25lIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoQW5ub3RhdGlvblZlcnNpb25PbmUpRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBJU2FyaWZOb2RlVmVyc2lvbk9uZSBEZWVwQ2xvbmVDb3JlKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBBbm5vdGF0aW9uVmVyc2lvbk9uZSh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KHN0cmluZyBtZXNzYWdlLCBJRW51bWVyYWJsZTxQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZT4gbG9jYXRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICBNZXNzYWdlID0gbWVzc2FnZTsNCiAgICAgICAgICAgIGlmIChsb2NhdGlvbnMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PFBoeXNpY2FsTG9jYXRpb25WZXJzaW9uT25lPigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8wIGluIGxvY2F0aW9ucykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobmV3IFBoeXNpY2FsTG9jYXRpb25WZXJzaW9uT25lKHZhbHVlXzApKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIExvY2F0aW9ucyA9IGRlc3RpbmF0aW9uXzA7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "3B921EA5460C905BBD6CC70608483C45",
              "algorithm": "md5"
            },
            {
              "value": "B70A6314DFFA832AA92640AA1DFA74B2B8FF4230",
              "algorithm": "sha-1"
            },
            {
              "value": "93CA0DE38B67417715EFE654105704884A57A71D911B6CDE2FFFBD83411E2141",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/CodeFlowVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBDb2RlRmxvd1ZlcnNpb25PbmUgOiBQcm9wZXJ0eUJhZ0hvbGRlciwgSVNhcmlmTm9kZVZlcnNpb25PbmUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8Q29kZUZsb3dWZXJzaW9uT25lPiBWYWx1ZUNvbXBhcmVyID0+IENvZGVGbG93VmVyc2lvbk9uZUVxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoQ29kZUZsb3dWZXJzaW9uT25lIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGVWZXJzaW9uT25lIiAvPi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTm9kZUtpbmRWZXJzaW9uT25lIFNhcmlmTm9kZUtpbmRWZXJzaW9uT25lDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZS5Db2RlRmxvd1ZlcnNpb25PbmU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIG1lc3NhZ2UgcmVsZXZhbnQgdG8gdGhlIGNvZGUgZmxvdw0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gIm1lc3NhZ2UiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgTWVzc2FnZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQW4gYXJyYXkgb2YgJ2Fubm90YXRlZENvZGVMb2NhdGlvbicgb2JqZWN0cywgZWFjaCBvZiB3aGljaCBkZXNjcmliZXMgYSBzaW5nbGUgbG9jYXRpb24gdmlzaXRlZCBieSB0aGUgdG9vbCBpbiB0aGUgY291cnNlIG9mIHByb2R1Y2luZyB0aGUgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImxvY2F0aW9ucyIsIElzUmVxdWlyZWQgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIElMaXN0PEFubm90YXRlZENvZGVMb2NhdGlvblZlcnNpb25PbmU+IExvY2F0aW9ucyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gS2V5L3ZhbHVlIHBhaXJzIHRoYXQgcHJvdmlkZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb2RlIGZsb3cuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAicHJvcGVydGllcyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgaW50ZXJuYWwgb3ZlcnJpZGUgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBQcm9wZXJ0aWVzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJDb2RlRmxvd1ZlcnNpb25PbmUiIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgQ29kZUZsb3dWZXJzaW9uT25lKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iQ29kZUZsb3dWZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCB2YWx1ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ibWVzc2FnZSI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogTWVzc2FnZSIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImxvY2F0aW9ucyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogTG9jYXRpb25zIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icHJvcGVydGllcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUHJvcGVydGllcyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICBwdWJsaWMgQ29kZUZsb3dWZXJzaW9uT25lKHN0cmluZyBtZXNzYWdlLCBJRW51bWVyYWJsZTxBbm5vdGF0ZWRDb2RlTG9jYXRpb25WZXJzaW9uT25lPiBsb2NhdGlvbnMsIElEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4gcHJvcGVydGllcykNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdChtZXNzYWdlLCBsb2NhdGlvbnMsIHByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iQ29kZUZsb3dWZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBDb2RlRmxvd1ZlcnNpb25PbmUoQ29kZUZsb3dWZXJzaW9uT25lIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLk1lc3NhZ2UsIG90aGVyLkxvY2F0aW9ucywgb3RoZXIuUHJvcGVydGllcyk7DQogICAgICAgIH0NCg0KICAgICAgICBJU2FyaWZOb2RlVmVyc2lvbk9uZSBJU2FyaWZOb2RlVmVyc2lvbk9uZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgQ29kZUZsb3dWZXJzaW9uT25lIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoQ29kZUZsb3dWZXJzaW9uT25lKURlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgSVNhcmlmTm9kZVZlcnNpb25PbmUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgQ29kZUZsb3dWZXJzaW9uT25lKHRoaXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSB2b2lkIEluaXQoc3RyaW5nIG1lc3NhZ2UsIElFbnVtZXJhYmxlPEFubm90YXRlZENvZGVMb2NhdGlvblZlcnNpb25PbmU+IGxvY2F0aW9ucywgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBwcm9wZXJ0aWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBNZXNzYWdlID0gbWVzc2FnZTsNCiAgICAgICAgICAgIGlmIChsb2NhdGlvbnMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMCA9IG5ldyBMaXN0PEFubm90YXRlZENvZGVMb2NhdGlvblZlcnNpb25PbmU+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gbG9jYXRpb25zKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzAgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobnVsbCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChuZXcgQW5ub3RhdGVkQ29kZUxvY2F0aW9uVmVyc2lvbk9uZSh2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBMb2NhdGlvbnMgPSBkZXN0aW5hdGlvbl8wOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAocHJvcGVydGllcyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFByb3BlcnRpZXMgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+KHByb3BlcnRpZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "487CB5BB0C4794C65D80817C2F859A27",
              "algorithm": "md5"
            },
            {
              "value": "2E866A8B2A9943D8A200963594349F333BA80C45",
              "algorithm": "sha-1"
            },
            {
              "value": "3690F9603B9AA0881C73D5E4DD0A110DAC112936F0710E637C4D3652D6FC0FE0",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ExceptionDataVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBFeGNlcHRpb25EYXRhVmVyc2lvbk9uZSA6IElTYXJpZk5vZGVWZXJzaW9uT25lDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPEV4Y2VwdGlvbkRhdGFWZXJzaW9uT25lPiBWYWx1ZUNvbXBhcmVyID0+IEV4Y2VwdGlvbkRhdGFWZXJzaW9uT25lRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhFeGNlcHRpb25EYXRhVmVyc2lvbk9uZSBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlVmVyc2lvbk9uZSIgLz4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZSBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZQ0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZFZlcnNpb25PbmUuRXhjZXB0aW9uRGF0YVZlcnNpb25PbmU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHN0cmluZyB0aGF0IGlkZW50aWZpZXMgdGhlIGtpbmQgb2YgZXhjZXB0aW9uLCBmb3IgZXhhbXBsZSwgdGhlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIG5hbWUgb2YgYW4gb2JqZWN0IHRoYXQgd2FzIHRocm93biwgb3IgdGhlIHN5bWJvbGljIG5hbWUgb2YgYSBzaWduYWwuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAia2luZCIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBLaW5kIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgZXhjZXB0aW9uLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gIm1lc3NhZ2UiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgTWVzc2FnZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIHNlcXVlbmNlIG9mIGZ1bmN0aW9uIGNhbGxzIGxlYWRpbmcgdG8gdGhlIGV4Y2VwdGlvbi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJzdGFjayIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIFN0YWNrVmVyc2lvbk9uZSBTdGFjayB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQW4gYXJyYXkgb2YgZXhjZXB0aW9uIG9iamVjdHMgZWFjaCBvZiB3aGljaCBpcyBjb25zaWRlcmVkIGEgY2F1c2Ugb2YgdGhpcyBleGNlcHRpb24uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiaW5uZXJFeGNlcHRpb25zIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8RXhjZXB0aW9uRGF0YVZlcnNpb25PbmU+IElubmVyRXhjZXB0aW9ucyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRXhjZXB0aW9uRGF0YVZlcnNpb25PbmUiIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgRXhjZXB0aW9uRGF0YVZlcnNpb25PbmUoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJFeGNlcHRpb25EYXRhVmVyc2lvbk9uZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImtpbmQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEtpbmQiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJtZXNzYWdlIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBNZXNzYWdlIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ic3RhY2siPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFN0YWNrIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iaW5uZXJFeGNlcHRpb25zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBJbm5lckV4Y2VwdGlvbnMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgcHVibGljIEV4Y2VwdGlvbkRhdGFWZXJzaW9uT25lKHN0cmluZyBraW5kLCBzdHJpbmcgbWVzc2FnZSwgU3RhY2tWZXJzaW9uT25lIHN0YWNrLCBJRW51bWVyYWJsZTxFeGNlcHRpb25EYXRhVmVyc2lvbk9uZT4gaW5uZXJFeGNlcHRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KGtpbmQsIG1lc3NhZ2UsIHN0YWNrLCBpbm5lckV4Y2VwdGlvbnMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRXhjZXB0aW9uRGF0YVZlcnNpb25PbmUiIC8+IGNsYXNzIGZyb20gdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdGhlciI+DQogICAgICAgIC8vLyBUaGUgaW5zdGFuY2UgZnJvbSB3aGljaCB0aGUgbmV3IGluc3RhbmNlIGlzIHRvIGJlIGluaXRpYWxpemVkLg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj4NCiAgICAgICAgLy8vIFRocm93biBpZiA8cGFyYW1yZWYgbmFtZT0ib3RoZXIiIC8+IGlzIG51bGwuDQogICAgICAgIC8vLyA8L2V4Y2VwdGlvbj4NCiAgICAgICAgcHVibGljIEV4Y2VwdGlvbkRhdGFWZXJzaW9uT25lKEV4Y2VwdGlvbkRhdGFWZXJzaW9uT25lIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLktpbmQsIG90aGVyLk1lc3NhZ2UsIG90aGVyLlN0YWNrLCBvdGhlci5Jbm5lckV4Y2VwdGlvbnMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZVZlcnNpb25PbmUgSVNhcmlmTm9kZVZlcnNpb25PbmUuRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIERlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhpcyBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIEV4Y2VwdGlvbkRhdGFWZXJzaW9uT25lIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoRXhjZXB0aW9uRGF0YVZlcnNpb25PbmUpRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBJU2FyaWZOb2RlVmVyc2lvbk9uZSBEZWVwQ2xvbmVDb3JlKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBFeGNlcHRpb25EYXRhVmVyc2lvbk9uZSh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KHN0cmluZyBraW5kLCBzdHJpbmcgbWVzc2FnZSwgU3RhY2tWZXJzaW9uT25lIHN0YWNrLCBJRW51bWVyYWJsZTxFeGNlcHRpb25EYXRhVmVyc2lvbk9uZT4gaW5uZXJFeGNlcHRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICBLaW5kID0ga2luZDsNCiAgICAgICAgICAgIE1lc3NhZ2UgPSBtZXNzYWdlOw0KICAgICAgICAgICAgaWYgKHN0YWNrICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgU3RhY2sgPSBuZXcgU3RhY2tWZXJzaW9uT25lKHN0YWNrKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGlubmVyRXhjZXB0aW9ucyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbl8wID0gbmV3IExpc3Q8RXhjZXB0aW9uRGF0YVZlcnNpb25PbmU+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gaW5uZXJFeGNlcHRpb25zKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzAgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobnVsbCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChuZXcgRXhjZXB0aW9uRGF0YVZlcnNpb25PbmUodmFsdWVfMCkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgSW5uZXJFeGNlcHRpb25zID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "F620EC5E2D59B2328DA32E7C9CC39C16",
              "algorithm": "md5"
            },
            {
              "value": "0C6498818C89169CFA83AFFA8255B1DDA86204E0",
              "algorithm": "sha-1"
            },
            {
              "value": "DF586EDDC501DC39CB4702361BC560FC991B77586F8F6B59E688366861EB60BC",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileChangeVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIEEgY2hhbmdlIHRvIGEgc2luZ2xlIGZpbGUuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBGaWxlQ2hhbmdlVmVyc2lvbk9uZSA6IElTYXJpZk5vZGVWZXJzaW9uT25lDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPEZpbGVDaGFuZ2VWZXJzaW9uT25lPiBWYWx1ZUNvbXBhcmVyID0+IEZpbGVDaGFuZ2VWZXJzaW9uT25lRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhGaWxlQ2hhbmdlVmVyc2lvbk9uZSBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlVmVyc2lvbk9uZSIgLz4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZSBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZQ0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZFZlcnNpb25PbmUuRmlsZUNoYW5nZVZlcnNpb25PbmU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGxvY2F0aW9uIG9mIHRoZSBmaWxlIHRvIGNoYW5nZSBhcyBhIHZhbGlkIFVSSS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJ1cmkiLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBVcmkgVXJpIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIHN0cmluZyB0aGF0IGlkZW50aWZpZXMgdGhlIGNvbmNlcHR1YWwgYmFzZSBmb3IgdGhlICd1cmknIHByb3BlcnR5IChpZiBpdCBpcyByZWxhdGl2ZSksIGUuZy4sJyQoU29sdXRpb25EaXIpJyBvciAnJVNSQ1JPT1QlJy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJ1cmlCYXNlSWQiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgVXJpQmFzZUlkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiByZXBsYWNlbWVudCBvYmplY3RzLCBlYWNoIG9mIHdoaWNoIHJlcHJlc2VudHMgdGhlIHJlcGxhY2VtZW50IG9mIGEgc2luZ2xlIHJhbmdlIG9mIGJ5dGVzIGluIGEgc2luZ2xlIGZpbGUgc3BlY2lmaWVkIGJ5ICd1cmknLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInJlcGxhY2VtZW50cyIsIElzUmVxdWlyZWQgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIElMaXN0PFJlcGxhY2VtZW50VmVyc2lvbk9uZT4gUmVwbGFjZW1lbnRzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJGaWxlQ2hhbmdlVmVyc2lvbk9uZSIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBGaWxlQ2hhbmdlVmVyc2lvbk9uZSgpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkZpbGVDaGFuZ2VWZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCB2YWx1ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idXJpIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBVcmkiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJ1cmlCYXNlSWQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFVyaUJhc2VJZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InJlcGxhY2VtZW50cyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUmVwbGFjZW1lbnRzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBGaWxlQ2hhbmdlVmVyc2lvbk9uZShVcmkgdXJpLCBzdHJpbmcgdXJpQmFzZUlkLCBJRW51bWVyYWJsZTxSZXBsYWNlbWVudFZlcnNpb25PbmU+IHJlcGxhY2VtZW50cykNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdCh1cmksIHVyaUJhc2VJZCwgcmVwbGFjZW1lbnRzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkZpbGVDaGFuZ2VWZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBGaWxlQ2hhbmdlVmVyc2lvbk9uZShGaWxlQ2hhbmdlVmVyc2lvbk9uZSBvdGhlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yob3RoZXIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSW5pdChvdGhlci5VcmksIG90aGVyLlVyaUJhc2VJZCwgb3RoZXIuUmVwbGFjZW1lbnRzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGVWZXJzaW9uT25lIElTYXJpZk5vZGVWZXJzaW9uT25lLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBGaWxlQ2hhbmdlVmVyc2lvbk9uZSBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKEZpbGVDaGFuZ2VWZXJzaW9uT25lKURlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgSVNhcmlmTm9kZVZlcnNpb25PbmUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgRmlsZUNoYW5nZVZlcnNpb25PbmUodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChVcmkgdXJpLCBzdHJpbmcgdXJpQmFzZUlkLCBJRW51bWVyYWJsZTxSZXBsYWNlbWVudFZlcnNpb25PbmU+IHJlcGxhY2VtZW50cykNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHVyaSAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFVyaSA9IG5ldyBVcmkodXJpLk9yaWdpbmFsU3RyaW5nLCB1cmkuSXNBYnNvbHV0ZVVyaSA/IFVyaUtpbmQuQWJzb2x1dGUgOiBVcmlLaW5kLlJlbGF0aXZlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgVXJpQmFzZUlkID0gdXJpQmFzZUlkOw0KICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50cyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbl8wID0gbmV3IExpc3Q8UmVwbGFjZW1lbnRWZXJzaW9uT25lPigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8wIGluIHJlcGxhY2VtZW50cykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobmV3IFJlcGxhY2VtZW50VmVyc2lvbk9uZSh2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBSZXBsYWNlbWVudHMgPSBkZXN0aW5hdGlvbl8wOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "E8EA51DD4006C6FA44B2497007ACB8B4",
              "algorithm": "md5"
            },
            {
              "value": "2157E3EB1C1DB63E333AE13D8B5F886940AC0C39",
              "algorithm": "sha-1"
            },
            {
              "value": "B31BA6099F94E2D81643BBB5026EC16499445EAC6EFF1BF1F2BDD044936C43C9",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileDataVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "AEA21FD0EA57F7F04314C8AAB9A9745C",
              "algorithm": "md5"
            },
            {
              "value": "7619EF76FE40D23F2E01B12AB3267787A135210A",
              "algorithm": "sha-1"
            },
            {
              "value": "7EF8D52EAFD831C8ED2660DDFD830A480519CADE97EC58B1F3047B9FACE52122",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FixVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIEEgcHJvcG9zZWQgZml4IGZvciB0aGUgcHJvYmxlbSByZXByZXNlbnRlZCBieSBhIHJlc3VsdCBvYmplY3QuIEEgZml4IHNwZWNpZmllcyBhIHNldCBvZiBmaWxlIHRvIG1vZGlmeS4gRm9yIGVhY2ggZmlsZSwgaXQgc3BlY2lmaWVzIGEgc2V0IG9mIGJ5dGVzIHRvIHJlbW92ZSwgYW5kIHByb3ZpZGVzIGEgc2V0IG9mIG5ldyBieXRlcyB0byByZXBsYWNlIHRoZW0uDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBGaXhWZXJzaW9uT25lIDogSVNhcmlmTm9kZVZlcnNpb25PbmUNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSUVxdWFsaXR5Q29tcGFyZXI8Rml4VmVyc2lvbk9uZT4gVmFsdWVDb21wYXJlciA9PiBGaXhWZXJzaW9uT25lRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhGaXhWZXJzaW9uT25lIG90aGVyKSA9PiBWYWx1ZUNvbXBhcmVyLkVxdWFscyh0aGlzLCBvdGhlcik7DQogICAgICAgIHB1YmxpYyBpbnQgVmFsdWVHZXRIYXNoQ29kZSgpID0+IFZhbHVlQ29tcGFyZXIuR2V0SGFzaENvZGUodGhpcyk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0IGltcGxlbWVudGluZyA8c2VlIGNyZWY9IklTYXJpZk5vZGVWZXJzaW9uT25lIiAvPi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTm9kZUtpbmRWZXJzaW9uT25lIFNhcmlmTm9kZUtpbmRWZXJzaW9uT25lDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZS5GaXhWZXJzaW9uT25lOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBzdHJpbmcgdGhhdCBkZXNjcmliZXMgdGhlIHByb3Bvc2VkIGZpeCwgZW5hYmxpbmcgdmlld2VycyB0byBwcmVzZW50IGEgcHJvcG9zZWQgY2hhbmdlIHRvIGFuIGVuZCB1c2VyLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImRlc2NyaXB0aW9uIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIERlc2NyaXB0aW9uIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBPbmUgb3IgbW9yZSBmaWxlIGNoYW5nZXMgdGhhdCBjb21wcmlzZSBhIGZpeCBmb3IgYSByZXN1bHQuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiZmlsZUNoYW5nZXMiLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxGaWxlQ2hhbmdlVmVyc2lvbk9uZT4gRmlsZUNoYW5nZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkZpeFZlcnNpb25PbmUiIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgRml4VmVyc2lvbk9uZSgpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkZpeFZlcnNpb25PbmUiIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJkZXNjcmlwdGlvbiI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogRGVzY3JpcHRpb24iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJmaWxlQ2hhbmdlcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogRmlsZUNoYW5nZXMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgcHVibGljIEZpeFZlcnNpb25PbmUoc3RyaW5nIGRlc2NyaXB0aW9uLCBJRW51bWVyYWJsZTxGaWxlQ2hhbmdlVmVyc2lvbk9uZT4gZmlsZUNoYW5nZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEluaXQoZGVzY3JpcHRpb24sIGZpbGVDaGFuZ2VzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IkZpeFZlcnNpb25PbmUiIC8+IGNsYXNzIGZyb20gdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJvdGhlciI+DQogICAgICAgIC8vLyBUaGUgaW5zdGFuY2UgZnJvbSB3aGljaCB0aGUgbmV3IGluc3RhbmNlIGlzIHRvIGJlIGluaXRpYWxpemVkLg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxleGNlcHRpb24gY3JlZj0iQXJndW1lbnROdWxsRXhjZXB0aW9uIj4NCiAgICAgICAgLy8vIFRocm93biBpZiA8cGFyYW1yZWYgbmFtZT0ib3RoZXIiIC8+IGlzIG51bGwuDQogICAgICAgIC8vLyA8L2V4Y2VwdGlvbj4NCiAgICAgICAgcHVibGljIEZpeFZlcnNpb25PbmUoRml4VmVyc2lvbk9uZSBvdGhlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yob3RoZXIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSW5pdChvdGhlci5EZXNjcmlwdGlvbiwgb3RoZXIuRmlsZUNoYW5nZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZVZlcnNpb25PbmUgSVNhcmlmTm9kZVZlcnNpb25PbmUuRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIERlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhpcyBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIEZpeFZlcnNpb25PbmUgRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIChGaXhWZXJzaW9uT25lKURlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgSVNhcmlmTm9kZVZlcnNpb25PbmUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgRml4VmVyc2lvbk9uZSh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KHN0cmluZyBkZXNjcmlwdGlvbiwgSUVudW1lcmFibGU8RmlsZUNoYW5nZVZlcnNpb25PbmU+IGZpbGVDaGFuZ2VzKQ0KICAgICAgICB7DQogICAgICAgICAgICBEZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uOw0KICAgICAgICAgICAgaWYgKGZpbGVDaGFuZ2VzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzAgPSBuZXcgTGlzdDxGaWxlQ2hhbmdlVmVyc2lvbk9uZT4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMCBpbiBmaWxlQ2hhbmdlcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG51bGwpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobmV3IEZpbGVDaGFuZ2VWZXJzaW9uT25lKHZhbHVlXzApKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIEZpbGVDaGFuZ2VzID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "AD312233BF6E51E2B6249E3BAEE75D05",
              "algorithm": "md5"
            },
            {
              "value": "9999687665A38D2317CF72D273835F823CE45790",
              "algorithm": "sha-1"
            },
            {
              "value": "116CE29705F17E6EEE67209D9B12CCBD19E842B01D24A9DAA330372794AC1E43",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FormattedRuleMessageVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIENvbnRhaW5zIGluZm9ybWF0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gY29uc3RydWN0IGEgZm9ybWF0dGVkIG1lc3NhZ2UgdGhhdCBkZXNjcmliZXMgYSByZXN1bHQuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBGb3JtYXR0ZWRSdWxlTWVzc2FnZVZlcnNpb25PbmUgOiBJU2FyaWZOb2RlVmVyc2lvbk9uZQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBJRXF1YWxpdHlDb21wYXJlcjxGb3JtYXR0ZWRSdWxlTWVzc2FnZVZlcnNpb25PbmU+IFZhbHVlQ29tcGFyZXIgPT4gRm9ybWF0dGVkUnVsZU1lc3NhZ2VWZXJzaW9uT25lRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhGb3JtYXR0ZWRSdWxlTWVzc2FnZVZlcnNpb25PbmUgb3RoZXIpID0+IFZhbHVlQ29tcGFyZXIuRXF1YWxzKHRoaXMsIG90aGVyKTsNCiAgICAgICAgcHVibGljIGludCBWYWx1ZUdldEhhc2hDb2RlKCkgPT4gVmFsdWVDb21wYXJlci5HZXRIYXNoQ29kZSh0aGlzKTsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBvYmplY3QgaW1wbGVtZW50aW5nIDxzZWUgY3JlZj0iSVNhcmlmTm9kZVZlcnNpb25PbmUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZFZlcnNpb25PbmUgU2FyaWZOb2RlS2luZFZlcnNpb25PbmUNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFNhcmlmTm9kZUtpbmRWZXJzaW9uT25lLkZvcm1hdHRlZFJ1bGVNZXNzYWdlVmVyc2lvbk9uZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyB0aGUgbWVzc2FnZSBmb3JtYXQgdXNlZCB0byBmb3JtYXQgdGhlIG1lc3NhZ2UgdGhhdCBkZXNjcmliZXMgdGhpcyByZXN1bHQuIFRoZSB2YWx1ZSBvZiBmb3JtYXRJZCBtdXN0IGNvcnJlc3BvbmQgdG8gb25lIG9mIHRoZSBuYW1lcyBpbiB0aGUgc2V0IG9mIG5hbWUvdmFsdWUgcGFpcnMgY29udGFpbmVkIGluIHRoZSAnbWVzc2FnZUZvcm1hdHMnIHByb3BlcnR5IG9mIHRoZSBydWxlIG9iamVjdCB3aG9zZSAnaWQnIHByb3BlcnR5IG1hdGNoZXMgdGhlICdydWxlSWQnIHByb3BlcnR5IG9mIHRoaXMgcmVzdWx0Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImZvcm1hdElkIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIEZvcm1hdElkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgd2lsbCBiZSB1c2VkLCBpbiBjb21iaW5hdGlvbiB3aXRoIGEgbWVzc2FnZSBmb3JtYXQsIHRvIGNvbnN0cnVjdCBhIHJlc3VsdCBtZXNzYWdlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImFyZ3VtZW50cyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElMaXN0PHN0cmluZz4gQXJndW1lbnRzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJGb3JtYXR0ZWRSdWxlTWVzc2FnZVZlcnNpb25PbmUiIC8+IGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgRm9ybWF0dGVkUnVsZU1lc3NhZ2VWZXJzaW9uT25lKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRm9ybWF0dGVkUnVsZU1lc3NhZ2VWZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCB2YWx1ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZm9ybWF0SWQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEZvcm1hdElkIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iYXJndW1lbnRzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBBcmd1bWVudHMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgcHVibGljIEZvcm1hdHRlZFJ1bGVNZXNzYWdlVmVyc2lvbk9uZShzdHJpbmcgZm9ybWF0SWQsIElFbnVtZXJhYmxlPHN0cmluZz4gYXJndW1lbnRzKQ0KICAgICAgICB7DQogICAgICAgICAgICBJbml0KGZvcm1hdElkLCBhcmd1bWVudHMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iRm9ybWF0dGVkUnVsZU1lc3NhZ2VWZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBGb3JtYXR0ZWRSdWxlTWVzc2FnZVZlcnNpb25PbmUoRm9ybWF0dGVkUnVsZU1lc3NhZ2VWZXJzaW9uT25lIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLkZvcm1hdElkLCBvdGhlci5Bcmd1bWVudHMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZVZlcnNpb25PbmUgSVNhcmlmTm9kZVZlcnNpb25PbmUuRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIERlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhpcyBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIEZvcm1hdHRlZFJ1bGVNZXNzYWdlVmVyc2lvbk9uZSBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKEZvcm1hdHRlZFJ1bGVNZXNzYWdlVmVyc2lvbk9uZSlEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGVWZXJzaW9uT25lIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IEZvcm1hdHRlZFJ1bGVNZXNzYWdlVmVyc2lvbk9uZSh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KHN0cmluZyBmb3JtYXRJZCwgSUVudW1lcmFibGU8c3RyaW5nPiBhcmd1bWVudHMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEZvcm1hdElkID0gZm9ybWF0SWQ7DQogICAgICAgICAgICBpZiAoYXJndW1lbnRzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzAgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gYXJndW1lbnRzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQodmFsdWVfMCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgQXJndW1lbnRzID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "599DE927343376F731438551B02A6A20",
              "algorithm": "md5"
            },
            {
              "value": "AED2B7A2B64184A50ADD032FF66A45CDBA7AACD8",
              "algorithm": "sha-1"
            },
            {
              "value": "DE887CE020831B55D8190C800BE4CFC8251C45194E6AF6AF26CF8B36FDA33A73",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/InvocationVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "C850A96F15A778EAB995FE9C2872DA2A",
              "algorithm": "md5"
            },
            {
              "value": "3EE17601364FD68E0787D9851978F2E162A1E458",
              "algorithm": "sha-1"
            },
            {
              "value": "3D2B17262BB83C20489EDA6647B58C446F309A27112AD0543A9FA6531150B515",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/InvocationVersionOneEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "5F2CA2B357CB0CD545A33192D7B34F49",
              "algorithm": "md5"
            },
            {
              "value": "2E9E5508A353E2909C44AA875BBCE4C5FC59A9A6",
              "algorithm": "sha-1"
            },
            {
              "value": "C11F0972425273E41A1292A1666392DE9D459B82B897024702125BE6722C8763",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/LocationVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "6E59F863B61EA1597032E71CC52DF10E",
              "algorithm": "md5"
            },
            {
              "value": "DF52DCE3444603AF167C20A5F0B21ABD577B4615",
              "algorithm": "sha-1"
            },
            {
              "value": "F73A04FB01207D87284EB5B4360D35FA0CCAC7449B0625741D0A2574468F449D",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/NotificationVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "FA364C85F17A5760E36537332C70FA11",
              "algorithm": "md5"
            },
            {
              "value": "E66D580EE863AD0F4DB4A3069ED7DF04D6DCB52E",
              "algorithm": "sha-1"
            },
            {
              "value": "CBDE9389FEF9910B26BC4B991D1FC7EC63C2AAFFF88A2268CE8D0B426E9E52E8",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/PhysicalLocationVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIEEgcGh5c2ljYWwgbG9jYXRpb24gcmVsZXZhbnQgdG8gYSByZXN1bHQuIFNwZWNpZmllcyBhIHJlZmVyZW5jZSB0byBhIHByb2dyYW1taW5nIGFydGlmYWN0IHRvZ2V0aGVyIHdpdGggYSByYW5nZSBvZiBieXRlcyBvciBjaGFyYWN0ZXJzIHdpdGhpbiB0aGF0IGFydGlmYWN0Lg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTIuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgUGh5c2ljYWxMb2NhdGlvblZlcnNpb25PbmUgOiBJU2FyaWZOb2RlVmVyc2lvbk9uZQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBJRXF1YWxpdHlDb21wYXJlcjxQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZT4gVmFsdWVDb21wYXJlciA9PiBQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZUVxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoUGh5c2ljYWxMb2NhdGlvblZlcnNpb25PbmUgb3RoZXIpID0+IFZhbHVlQ29tcGFyZXIuRXF1YWxzKHRoaXMsIG90aGVyKTsNCiAgICAgICAgcHVibGljIGludCBWYWx1ZUdldEhhc2hDb2RlKCkgPT4gVmFsdWVDb21wYXJlci5HZXRIYXNoQ29kZSh0aGlzKTsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBvYmplY3QgaW1wbGVtZW50aW5nIDxzZWUgY3JlZj0iSVNhcmlmTm9kZVZlcnNpb25PbmUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZFZlcnNpb25PbmUgU2FyaWZOb2RlS2luZFZlcnNpb25PbmUNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFNhcmlmTm9kZUtpbmRWZXJzaW9uT25lLlBoeXNpY2FsTG9jYXRpb25WZXJzaW9uT25lOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIGxvY2F0aW9uIG9mIHRoZSBmaWxlIGFzIGEgdmFsaWQgVVJJLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInVyaSIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIFVyaSBVcmkgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyB0aGUgY29uY2VwdHVhbCBiYXNlIGZvciB0aGUgJ3VyaScgcHJvcGVydHkgKGlmIGl0IGlzIHJlbGF0aXZlKSwgZS5nLiwnJChTb2x1dGlvbkRpciknIG9yICclU1JDUk9PVCUnLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInVyaUJhc2VJZCIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIHN0cmluZyBVcmlCYXNlSWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSByZWdpb24gd2l0aGluIHRoZSBmaWxlIHdoZXJlIHRoZSByZXN1bHQgd2FzIGRldGVjdGVkLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInJlZ2lvbiIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIFJlZ2lvblZlcnNpb25PbmUgUmVnaW9uIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZSIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZSgpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlBoeXNpY2FsTG9jYXRpb25WZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCB2YWx1ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idXJpIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBVcmkiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJ1cmlCYXNlSWQiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFVyaUJhc2VJZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InJlZ2lvbiI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUmVnaW9uIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZShVcmkgdXJpLCBzdHJpbmcgdXJpQmFzZUlkLCBSZWdpb25WZXJzaW9uT25lIHJlZ2lvbikNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdCh1cmksIHVyaUJhc2VJZCwgcmVnaW9uKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlBoeXNpY2FsTG9jYXRpb25WZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZShQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZSBvdGhlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yob3RoZXIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSW5pdChvdGhlci5VcmksIG90aGVyLlVyaUJhc2VJZCwgb3RoZXIuUmVnaW9uKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGVWZXJzaW9uT25lIElTYXJpZk5vZGVWZXJzaW9uT25lLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBQaHlzaWNhbExvY2F0aW9uVmVyc2lvbk9uZSBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKFBoeXNpY2FsTG9jYXRpb25WZXJzaW9uT25lKURlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgSVNhcmlmTm9kZVZlcnNpb25PbmUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgUGh5c2ljYWxMb2NhdGlvblZlcnNpb25PbmUodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChVcmkgdXJpLCBzdHJpbmcgdXJpQmFzZUlkLCBSZWdpb25WZXJzaW9uT25lIHJlZ2lvbikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHVyaSAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFVyaSA9IG5ldyBVcmkodXJpLk9yaWdpbmFsU3RyaW5nLCB1cmkuSXNBYnNvbHV0ZVVyaSA/IFVyaUtpbmQuQWJzb2x1dGUgOiBVcmlLaW5kLlJlbGF0aXZlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgVXJpQmFzZUlkID0gdXJpQmFzZUlkOw0KICAgICAgICAgICAgaWYgKHJlZ2lvbiAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFJlZ2lvbiA9IG5ldyBSZWdpb25WZXJzaW9uT25lKHJlZ2lvbik7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "C974B277312E024975C107341CCE8FFD",
              "algorithm": "md5"
            },
            {
              "value": "DEB2E1AA329A334BA9D69739615F3433CB8C0D5E",
              "algorithm": "sha-1"
            },
            {
              "value": "E464599832FE3B747DF4DA5766F951E6FF23614FD2AFCBC85251F655E01ECA57",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "D18A2F38B3A64107CFE31B13E5481854",
              "algorithm": "md5"
            },
            {
              "value": "69ED9DE46C2B1168E84A70B5B82077E4C12ABB25",
              "algorithm": "sha-1"
            },
            {
              "value": "41AD86076F08A4CF1CE7B56A78F089E4ECB66A9B18EAC4400D9263343D5D1235",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOneEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "ECFE3607D5DEA21D4245F621BBEC765E",
              "algorithm": "md5"
            },
            {
              "value": "4361429C9B74A624F517D3C65FF1D36868F2676D",
              "algorithm": "sha-1"
            },
            {
              "value": "2AACF8DC73F658B489D1DF16F8DE91F5865A06A00943792ED595840339F6686C",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RuleVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "AF94BA1B2417B01BD8FF5A538BAEDF8B",
              "algorithm": "md5"
            },
            {
              "value": "DF8390693EEFF2C45DFA144E9BFFECA6819EEE9A",
              "algorithm": "sha-1"
            },
            {
              "value": "C37FA4281D090A49BAF1CD95490A8338B4489DB2FA97D6FC8EB24989CB1DB813",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RuleVersionOneEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUmVhZGVyczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuVmVyc2lvbk9uZQ0Kew0KICAgIC8vLyA8c3VtbWFyeT4NCiAgICAvLy8gRGVmaW5lcyBtZXRob2RzIHRvIHN1cHBvcnQgdGhlIGNvbXBhcmlzb24gb2Ygb2JqZWN0cyBvZiB0eXBlIFJ1bGVWZXJzaW9uT25lIGZvciBlcXVhbGl0eS4NCiAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBpbnRlcm5hbCBzZWFsZWQgY2xhc3MgUnVsZVZlcnNpb25PbmVFcXVhbGl0eUNvbXBhcmVyIDogSUVxdWFsaXR5Q29tcGFyZXI8UnVsZVZlcnNpb25PbmU+DQogICAgew0KICAgICAgICBpbnRlcm5hbCBzdGF0aWMgcmVhZG9ubHkgUnVsZVZlcnNpb25PbmVFcXVhbGl0eUNvbXBhcmVyIEluc3RhbmNlID0gbmV3IFJ1bGVWZXJzaW9uT25lRXF1YWxpdHlDb21wYXJlcigpOw0KDQogICAgICAgIHB1YmxpYyBib29sIEVxdWFscyhSdWxlVmVyc2lvbk9uZSBsZWZ0LCBSdWxlVmVyc2lvbk9uZSByaWdodCkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKFJlZmVyZW5jZUVxdWFscyhsZWZ0LCByaWdodCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMobGVmdCwgbnVsbCkgfHwgUmVmZXJlbmNlRXF1YWxzKHJpZ2h0LCBudWxsKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0LklkICE9IHJpZ2h0LklkKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGxlZnQuTmFtZSAhPSByaWdodC5OYW1lKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGxlZnQuU2hvcnREZXNjcmlwdGlvbiAhPSByaWdodC5TaG9ydERlc2NyaXB0aW9uKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGxlZnQuRnVsbERlc2NyaXB0aW9uICE9IHJpZ2h0LkZ1bGxEZXNjcmlwdGlvbikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhsZWZ0Lk1lc3NhZ2VGb3JtYXRzLCByaWdodC5NZXNzYWdlRm9ybWF0cykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxlZnQuTWVzc2FnZUZvcm1hdHMgPT0gbnVsbCB8fCByaWdodC5NZXNzYWdlRm9ybWF0cyA9PSBudWxsIHx8IGxlZnQuTWVzc2FnZUZvcm1hdHMuQ291bnQgIT0gcmlnaHQuTWVzc2FnZUZvcm1hdHMuQ291bnQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzAgaW4gbGVmdC5NZXNzYWdlRm9ybWF0cykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHN0cmluZyB2YWx1ZV8xOw0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJpZ2h0Lk1lc3NhZ2VGb3JtYXRzLlRyeUdldFZhbHVlKHZhbHVlXzAuS2V5LCBvdXQgdmFsdWVfMSkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8wLlZhbHVlICE9IHZhbHVlXzEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGxlZnQuQ29uZmlndXJhdGlvbiAhPSByaWdodC5Db25maWd1cmF0aW9uKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGxlZnQuRGVmYXVsdExldmVsICE9IHJpZ2h0LkRlZmF1bHRMZXZlbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsZWZ0LkhlbHBVcmkgIT0gcmlnaHQuSGVscFVyaSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICghb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhsZWZ0LlByb3BlcnRpZXMsIHJpZ2h0LlByb3BlcnRpZXMpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsZWZ0LlByb3BlcnRpZXMgPT0gbnVsbCB8fCByaWdodC5Qcm9wZXJ0aWVzID09IG51bGwgfHwgbGVmdC5Qcm9wZXJ0aWVzLkNvdW50ICE9IHJpZ2h0LlByb3BlcnRpZXMuQ291bnQpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzIgaW4gbGVmdC5Qcm9wZXJ0aWVzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgU2VyaWFsaXplZFByb3BlcnR5SW5mbyB2YWx1ZV8zOw0KICAgICAgICAgICAgICAgICAgICBpZiAoIXJpZ2h0LlByb3BlcnRpZXMuVHJ5R2V0VmFsdWUodmFsdWVfMi5LZXksIG91dCB2YWx1ZV8zKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmplY3QuRXF1YWxzKHZhbHVlXzIuVmFsdWUsIHZhbHVlXzMpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGludCBHZXRIYXNoQ29kZShSdWxlVmVyc2lvbk9uZSBvYmopDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChSZWZlcmVuY2VFcXVhbHMob2JqLCBudWxsKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaW50IHJlc3VsdCA9IDE3Ow0KICAgICAgICAgICAgdW5jaGVja2VkDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKG9iai5JZCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5JZC5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChvYmouTmFtZSAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5OYW1lLkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKG9iai5TaG9ydERlc2NyaXB0aW9uICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLlNob3J0RGVzY3JpcHRpb24uR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLkZ1bGxEZXNjcmlwdGlvbiAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIG9iai5GdWxsRGVzY3JpcHRpb24uR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLk1lc3NhZ2VGb3JtYXRzICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAvLyBVc2UgeG9yIGZvciBkaWN0aW9uYXJpZXMgdG8gYmUgb3JkZXItaW5kZXBlbmRlbnQuDQogICAgICAgICAgICAgICAgICAgIGludCB4b3JfMCA9IDA7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV80IGluIG9iai5NZXNzYWdlRm9ybWF0cykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzAgXj0gdmFsdWVfNC5LZXkuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZV80LlZhbHVlICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG9yXzAgXj0gdmFsdWVfNC5WYWx1ZS5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDMxKSArIHhvcl8wOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyBvYmouQ29uZmlndXJhdGlvbi5HZXRIYXNoQ29kZSgpOw0KICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyBvYmouRGVmYXVsdExldmVsLkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgaWYgKG9iai5IZWxwVXJpICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMzEpICsgb2JqLkhlbHBVcmkuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAob2JqLlByb3BlcnRpZXMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIC8vIFVzZSB4b3IgZm9yIGRpY3Rpb25hcmllcyB0byBiZSBvcmRlci1pbmRlcGVuZGVudC4NCiAgICAgICAgICAgICAgICAgICAgaW50IHhvcl8xID0gMDsNCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzUgaW4gb2JqLlByb3BlcnRpZXMpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHhvcl8xIF49IHZhbHVlXzUuS2V5LkdldEhhc2hDb2RlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfNS5WYWx1ZSAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhvcl8xIF49IHZhbHVlXzUuVmFsdWUuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgKiAzMSkgKyB4b3JfMTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7DQogICAgICAgIH0NCiAgICB9DQp9"
          },
          "hashes": [
            {
              "value": "6B1097B1687AF2B42E046F3257820004",
              "algorithm": "md5"
            },
            {
              "value": "DCDABAEE55720B8D2117F0878CF0F00CD0A1DDE0",
              "algorithm": "sha-1"
            },
            {
              "value": "F90A07181F121ED36CDDEFD9E41780F14B191B7FDD1A5A7AF652CF4399DE2EAF",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIERlc2NyaWJlcyBhIHNpbmdsZSBydW4gb2YgYW4gYW5hbHlzaXMgdG9vbCwgYW5kIGNvbnRhaW5zIHRoZSBvdXRwdXQgb2YgdGhhdCBydW4uDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBSdW5WZXJzaW9uT25lIDogUHJvcGVydHlCYWdIb2xkZXIsIElTYXJpZk5vZGVWZXJzaW9uT25lDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPFJ1blZlcnNpb25PbmU+IFZhbHVlQ29tcGFyZXIgPT4gUnVuVmVyc2lvbk9uZUVxdWFsaXR5Q29tcGFyZXIuSW5zdGFuY2U7DQoNCiAgICAgICAgcHVibGljIGJvb2wgVmFsdWVFcXVhbHMoUnVuVmVyc2lvbk9uZSBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlVmVyc2lvbk9uZSIgLz4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZSBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZQ0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZFZlcnNpb25PbmUuUnVuVmVyc2lvbk9uZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluZm9ybWF0aW9uIGFib3V0IHRoZSB0b29sIG9yIHRvb2wgcGlwZWxpbmUgdGhhdCBnZW5lcmF0ZWQgdGhlIHJlc3VsdHMgaW4gdGhpcyBydW4uIEEgcnVuIGNhbiBvbmx5IGNvbnRhaW4gcmVzdWx0cyBwcm9kdWNlZCBieSBhIHNpbmdsZSB0b29sIG9yIHRvb2wgcGlwZWxpbmUuIEEgcnVuIGNhbiBhZ2dyZWdhdGUgcmVzdWx0cyBmcm9tIG11bHRpcGxlIGxvZyBmaWxlcywgYXMgbG9uZyBhcyBjb250ZXh0IGFyb3VuZCB0aGUgdG9vbCBydW4gKHRvb2wgY29tbWFuZC1saW5lIGFyZ3VtZW50cyBhbmQgdGhlIGxpa2UpIGlzIGlkZW50aWNhbCBmb3IgYWxsIGFnZ3JlZ2F0ZWQgZmlsZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAidG9vbCIsIElzUmVxdWlyZWQgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIFRvb2xWZXJzaW9uT25lIFRvb2wgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIERlc2NyaWJlcyB0aGUgcnVudGltZSBlbnZpcm9ubWVudCwgaW5jbHVkaW5nIHBhcmFtZXRlcml6YXRpb24sIG9mIHRoZSBhbmFseXNpcyB0b29sIHJ1bi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJpbnZvY2F0aW9uIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSW52b2NhdGlvblZlcnNpb25PbmUgSW52b2NhdGlvbiB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBkaWN0aW9uYXJ5LCBlYWNoIG9mIHdob3NlIGtleXMgaXMgYSBVUkkgYW5kIGVhY2ggb2Ygd2hvc2UgdmFsdWVzIGlzIGFuIGFycmF5IG9mIGZpbGUgb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIGxvY2F0aW9uIG9mIGEgc2luZ2xlIGZpbGUgc2Nhbm5lZCBkdXJpbmcgdGhlIHJ1bi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJmaWxlcyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElEaWN0aW9uYXJ5PHN0cmluZywgRmlsZURhdGFWZXJzaW9uT25lPiBGaWxlcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBkaWN0aW9uYXJ5LCBlYWNoIG9mIHdob3NlIGtleXMgc3BlY2lmaWVzIGEgbG9naWNhbCBsb2NhdGlvbiBzdWNoIGFzIGEgbmFtZXNwYWNlLCB0eXBlIG9yIGZ1bmN0aW9uLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImxvZ2ljYWxMb2NhdGlvbnMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJRGljdGlvbmFyeTxzdHJpbmcsIExvZ2ljYWxMb2NhdGlvblZlcnNpb25PbmU+IExvZ2ljYWxMb2NhdGlvbnMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBzZXQgb2YgcmVzdWx0cyBjb250YWluZWQgaW4gYW4gU0FSSUYgbG9nLiBUaGUgcmVzdWx0cyBhcnJheSBjYW4gYmUgb21pdHRlZCB3aGVuIGEgcnVuIGlzIHNvbGVseSBleHBvcnRpbmcgcnVsZXMgbWV0YWRhdGEuIEl0IG11c3QgYmUgcHJlc2VudCAoYnV0IG1heSBiZSBlbXB0eSkgaW4gdGhlIGV2ZW50IHRoYXQgYSBsb2cgZmlsZSByZXByZXNlbnRzIGFuIGFjdHVhbCBzY2FuLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInJlc3VsdHMiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBJTGlzdDxSZXN1bHRWZXJzaW9uT25lPiBSZXN1bHRzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIGxpc3Qgb2YgcnVudGltZSBjb25kaXRpb25zIGRldGVjdGVkIGJ5IHRoZSB0b29sIGluIHRoZSBjb3Vyc2Ugb2YgdGhlIGFuYWx5c2lzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInRvb2xOb3RpZmljYXRpb25zIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8Tm90aWZpY2F0aW9uVmVyc2lvbk9uZT4gVG9vbE5vdGlmaWNhdGlvbnMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgbGlzdCBvZiBjb25kaXRpb25zIGRldGVjdGVkIGJ5IHRoZSB0b29sIHRoYXQgYXJlIHJlbGV2YW50IHRvIHRoZSB0b29sJ3MgY29uZmlndXJhdGlvbi4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJjb25maWd1cmF0aW9uTm90aWZpY2F0aW9ucyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIElMaXN0PE5vdGlmaWNhdGlvblZlcnNpb25PbmU+IENvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb25zIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIGRpY3Rpb25hcnksIGVhY2ggb2Ygd2hvc2Uga2V5cyBpcyBhIHN0cmluZyBhbmQgZWFjaCBvZiB3aG9zZSB2YWx1ZXMgaXMgYSAncnVsZScgb2JqZWN0LCB0aGF0IGRlc2NyaWJlIGFsbCBydWxlcyBhc3NvY2lhdGVkIHdpdGggYW4gYW5hbHlzaXMgdG9vbCBvciBhIHNwZWNpZmljIHJ1biBvZiBhbiBhbmFseXNpcyB0b29sLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInJ1bGVzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgSURpY3Rpb25hcnk8c3RyaW5nLCBSdWxlVmVyc2lvbk9uZT4gUnVsZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEFuIGlkZW50aWZpZXIgZm9yIHRoZSBydW4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiaWQiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgSWQgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEEgc3RhYmxlIGlkZW50aWZpZXIgZm9yIGEgcnVuLCBmb3IgZXhhbXBsZSwgJ25pZ2h0bHkgQ2xhbmcgYW5hbHl6ZXIgcnVuJy4gTXVsdGlwbGUgcnVucyBvZiB0aGUgc2FtZSB0eXBlIGNhbiBoYXZlIHRoZSBzYW1lIHN0YWJsZUlkLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInN0YWJsZUlkIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIFN0YWJsZUlkIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBBIGdsb2JhbCBpZGVudGlmaWVyIHRoYXQgYWxsb3dzIHRoZSBydW4gdG8gYmUgY29ycmVsYXRlZCB3aXRoIG90aGVyIGFydGlmYWN0cyBwcm9kdWNlZCBieSBhIGxhcmdlciBhdXRvbWF0aW9uIHByb2Nlc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiYXV0b21hdGlvbklkIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIEF1dG9tYXRpb25JZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlICdpZCcgcHJvcGVydHkgb2YgYSBzZXBhcmF0ZSAocG90ZW50aWFsbHkgZXh0ZXJuYWwpIFNBUklGICdydW4nIGluc3RhbmNlIHRoYXQgY29tcHJpc2VzIHRoZSBiYXNlbGluZSB0aGF0IHdhcyB1c2VkIHRvIGNvbXB1dGUgcmVzdWx0ICdiYXNlbGluZVN0YXRlJyBwcm9wZXJ0aWVzIGZvciB0aGUgcnVuLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gImJhc2VsaW5lSWQiLCBJc1JlcXVpcmVkID0gZmFsc2UsIEVtaXREZWZhdWx0VmFsdWUgPSBmYWxzZSldDQogICAgICAgIHB1YmxpYyBzdHJpbmcgQmFzZWxpbmVJZCB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gVGhlIGhhcmR3YXJlIGFyY2hpdGVjdHVyZSBmb3Igd2hpY2ggdGhlIHJ1biB3YXMgdGFyZ2V0ZWQuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiYXJjaGl0ZWN0dXJlIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIEFyY2hpdGVjdHVyZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gS2V5L3ZhbHVlIHBhaXJzIHRoYXQgcHJvdmlkZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBydW4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAicHJvcGVydGllcyIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgaW50ZXJuYWwgb3ZlcnJpZGUgSURpY3Rpb25hcnk8c3RyaW5nLCBTZXJpYWxpemVkUHJvcGVydHlJbmZvPiBQcm9wZXJ0aWVzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJSdW5WZXJzaW9uT25lIiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFJ1blZlcnNpb25PbmUoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJSdW5WZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCB2YWx1ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idG9vbCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogVG9vbCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Imludm9jYXRpb24iPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IEludm9jYXRpb24iIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJmaWxlcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogRmlsZXMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJsb2dpY2FsTG9jYXRpb25zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBMb2dpY2FsTG9jYXRpb25zIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icmVzdWx0cyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUmVzdWx0cyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InRvb2xOb3RpZmljYXRpb25zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBUb29sTm90aWZpY2F0aW9ucyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb25zIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBDb25maWd1cmF0aW9uTm90aWZpY2F0aW9ucyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InJ1bGVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBSdWxlcyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImlkIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBJZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InN0YWJsZUlkIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBTdGFibGVJZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImF1dG9tYXRpb25JZCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogQXV0b21hdGlvbklkIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iYmFzZWxpbmVJZCI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogQmFzZWxpbmVJZCIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImFyY2hpdGVjdHVyZSI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogQXJjaGl0ZWN0dXJlIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icHJvcGVydGllcyI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogUHJvcGVydGllcyIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICBwdWJsaWMgUnVuVmVyc2lvbk9uZShUb29sVmVyc2lvbk9uZSB0b29sLCBJbnZvY2F0aW9uVmVyc2lvbk9uZSBpbnZvY2F0aW9uLCBJRGljdGlvbmFyeTxzdHJpbmcsIEZpbGVEYXRhVmVyc2lvbk9uZT4gZmlsZXMsIElEaWN0aW9uYXJ5PHN0cmluZywgTG9naWNhbExvY2F0aW9uVmVyc2lvbk9uZT4gbG9naWNhbExvY2F0aW9ucywgSUVudW1lcmFibGU8UmVzdWx0VmVyc2lvbk9uZT4gcmVzdWx0cywgSUVudW1lcmFibGU8Tm90aWZpY2F0aW9uVmVyc2lvbk9uZT4gdG9vbE5vdGlmaWNhdGlvbnMsIElFbnVtZXJhYmxlPE5vdGlmaWNhdGlvblZlcnNpb25PbmU+IGNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb25zLCBJRGljdGlvbmFyeTxzdHJpbmcsIFJ1bGVWZXJzaW9uT25lPiBydWxlcywgc3RyaW5nIGlkLCBzdHJpbmcgc3RhYmxlSWQsIHN0cmluZyBhdXRvbWF0aW9uSWQsIHN0cmluZyBiYXNlbGluZUlkLCBzdHJpbmcgYXJjaGl0ZWN0dXJlLCBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IHByb3BlcnRpZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEluaXQodG9vbCwgaW52b2NhdGlvbiwgZmlsZXMsIGxvZ2ljYWxMb2NhdGlvbnMsIHJlc3VsdHMsIHRvb2xOb3RpZmljYXRpb25zLCBjb25maWd1cmF0aW9uTm90aWZpY2F0aW9ucywgcnVsZXMsIGlkLCBzdGFibGVJZCwgYXV0b21hdGlvbklkLCBiYXNlbGluZUlkLCBhcmNoaXRlY3R1cmUsIHByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iUnVuVmVyc2lvbk9uZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgUnVuVmVyc2lvbk9uZShSdW5WZXJzaW9uT25lIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLlRvb2wsIG90aGVyLkludm9jYXRpb24sIG90aGVyLkZpbGVzLCBvdGhlci5Mb2dpY2FsTG9jYXRpb25zLCBvdGhlci5SZXN1bHRzLCBvdGhlci5Ub29sTm90aWZpY2F0aW9ucywgb3RoZXIuQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbnMsIG90aGVyLlJ1bGVzLCBvdGhlci5JZCwgb3RoZXIuU3RhYmxlSWQsIG90aGVyLkF1dG9tYXRpb25JZCwgb3RoZXIuQmFzZWxpbmVJZCwgb3RoZXIuQXJjaGl0ZWN0dXJlLCBvdGhlci5Qcm9wZXJ0aWVzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElTYXJpZk5vZGVWZXJzaW9uT25lIElTYXJpZk5vZGVWZXJzaW9uT25lLkRlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoaXMgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBSdW5WZXJzaW9uT25lIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoUnVuVmVyc2lvbk9uZSlEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGVWZXJzaW9uT25lIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IFJ1blZlcnNpb25PbmUodGhpcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgSW5pdChUb29sVmVyc2lvbk9uZSB0b29sLCBJbnZvY2F0aW9uVmVyc2lvbk9uZSBpbnZvY2F0aW9uLCBJRGljdGlvbmFyeTxzdHJpbmcsIEZpbGVEYXRhVmVyc2lvbk9uZT4gZmlsZXMsIElEaWN0aW9uYXJ5PHN0cmluZywgTG9naWNhbExvY2F0aW9uVmVyc2lvbk9uZT4gbG9naWNhbExvY2F0aW9ucywgSUVudW1lcmFibGU8UmVzdWx0VmVyc2lvbk9uZT4gcmVzdWx0cywgSUVudW1lcmFibGU8Tm90aWZpY2F0aW9uVmVyc2lvbk9uZT4gdG9vbE5vdGlmaWNhdGlvbnMsIElFbnVtZXJhYmxlPE5vdGlmaWNhdGlvblZlcnNpb25PbmU+IGNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb25zLCBJRGljdGlvbmFyeTxzdHJpbmcsIFJ1bGVWZXJzaW9uT25lPiBydWxlcywgc3RyaW5nIGlkLCBzdHJpbmcgc3RhYmxlSWQsIHN0cmluZyBhdXRvbWF0aW9uSWQsIHN0cmluZyBiYXNlbGluZUlkLCBzdHJpbmcgYXJjaGl0ZWN0dXJlLCBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IHByb3BlcnRpZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICh0b29sICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgVG9vbCA9IG5ldyBUb29sVmVyc2lvbk9uZSh0b29sKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGludm9jYXRpb24gIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBJbnZvY2F0aW9uID0gbmV3IEludm9jYXRpb25WZXJzaW9uT25lKGludm9jYXRpb24pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoZmlsZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBGaWxlcyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgRmlsZURhdGFWZXJzaW9uT25lPigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8wIGluIGZpbGVzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgRmlsZXMuQWRkKHZhbHVlXzAuS2V5LCBuZXcgRmlsZURhdGFWZXJzaW9uT25lKHZhbHVlXzAuVmFsdWUpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsb2dpY2FsTG9jYXRpb25zICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTG9naWNhbExvY2F0aW9ucyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgTG9naWNhbExvY2F0aW9uVmVyc2lvbk9uZT4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMSBpbiBsb2dpY2FsTG9jYXRpb25zKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgTG9naWNhbExvY2F0aW9ucy5BZGQodmFsdWVfMS5LZXksIG5ldyBMb2dpY2FsTG9jYXRpb25WZXJzaW9uT25lKHZhbHVlXzEuVmFsdWUpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChyZXN1bHRzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzAgPSBuZXcgTGlzdDxSZXN1bHRWZXJzaW9uT25lPigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV8yIGluIHJlc3VsdHMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMiA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG5ldyBSZXN1bHRWZXJzaW9uT25lKHZhbHVlXzIpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIFJlc3VsdHMgPSBkZXN0aW5hdGlvbl8wOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAodG9vbE5vdGlmaWNhdGlvbnMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb25fMSA9IG5ldyBMaXN0PE5vdGlmaWNhdGlvblZlcnNpb25PbmU+KCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHZhbHVlXzMgaW4gdG9vbE5vdGlmaWNhdGlvbnMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMyA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8xLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzEuQWRkKG5ldyBOb3RpZmljYXRpb25WZXJzaW9uT25lKHZhbHVlXzMpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIFRvb2xOb3RpZmljYXRpb25zID0gZGVzdGluYXRpb25fMTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb25zICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzIgPSBuZXcgTGlzdDxOb3RpZmljYXRpb25WZXJzaW9uT25lPigpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB2YWx1ZV80IGluIGNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb25zKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzQgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMi5BZGQobnVsbCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8yLkFkZChuZXcgTm90aWZpY2F0aW9uVmVyc2lvbk9uZSh2YWx1ZV80KSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBDb25maWd1cmF0aW9uTm90aWZpY2F0aW9ucyA9IGRlc3RpbmF0aW9uXzI7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChydWxlcyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFJ1bGVzID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBSdWxlVmVyc2lvbk9uZT4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfNSBpbiBydWxlcykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFJ1bGVzLkFkZCh2YWx1ZV81LktleSwgbmV3IFJ1bGVWZXJzaW9uT25lKHZhbHVlXzUuVmFsdWUpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIElkID0gaWQ7DQogICAgICAgICAgICBTdGFibGVJZCA9IHN0YWJsZUlkOw0KICAgICAgICAgICAgQXV0b21hdGlvbklkID0gYXV0b21hdGlvbklkOw0KICAgICAgICAgICAgQmFzZWxpbmVJZCA9IGJhc2VsaW5lSWQ7DQogICAgICAgICAgICBBcmNoaXRlY3R1cmUgPSBhcmNoaXRlY3R1cmU7DQogICAgICAgICAgICBpZiAocHJvcGVydGllcyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFByb3BlcnRpZXMgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+KHByb3BlcnRpZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "98644D166E8B2E263713EED0F1E02DBA",
              "algorithm": "md5"
            },
            {
              "value": "4E53A96014FBA59E0448ADBC2A2EA8AA487DB217",
              "algorithm": "sha-1"
            },
            {
              "value": "242EB12FE363DFE596A6CE00A5EA86442D0D8931F8F560FF05601FE3E8569655",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOneEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "182D9BA283567E8325A72AAA0575F572",
              "algorithm": "md5"
            },
            {
              "value": "90CB23F32D258ABFE4E8F54AFD85745C5F868E23",
              "algorithm": "sha-1"
            },
            {
              "value": "77BB589BAD9020D4FC46E716E3A94203FA2F8D3B2496A00904C54F386C343F46",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/SarifLogVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIFN0YXRpYyBBbmFseXNpcyBSZXN1bHRzIEZvcm1hdCAoU0FSSUYpIFZlcnNpb24gMS4wLjAgSlNPTiBTY2hlbWE6IGEgc3RhbmRhcmQgZm9ybWF0IGZvciB0aGUgb3V0cHV0IG9mIHN0YXRpYyBhbmFseXNpcyBhbmQgb3RoZXIgdG9vbHMuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICBbRGF0YUNvbnRyYWN0XQ0KICAgIFtHZW5lcmF0ZWRDb2RlKCJNaWNyb3NvZnQuSnNvbi5TY2hlbWEuVG9Eb3ROZXQiLCAiMC41Mi4wLjAiKV0NCiAgICBwdWJsaWMgcGFydGlhbCBjbGFzcyBTYXJpZkxvZ1ZlcnNpb25PbmUgOiBJU2FyaWZOb2RlVmVyc2lvbk9uZQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBJRXF1YWxpdHlDb21wYXJlcjxTYXJpZkxvZ1ZlcnNpb25PbmU+IFZhbHVlQ29tcGFyZXIgPT4gU2FyaWZMb2dWZXJzaW9uT25lRXF1YWxpdHlDb21wYXJlci5JbnN0YW5jZTsNCg0KICAgICAgICBwdWJsaWMgYm9vbCBWYWx1ZUVxdWFscyhTYXJpZkxvZ1ZlcnNpb25PbmUgb3RoZXIpID0+IFZhbHVlQ29tcGFyZXIuRXF1YWxzKHRoaXMsIG90aGVyKTsNCiAgICAgICAgcHVibGljIGludCBWYWx1ZUdldEhhc2hDb2RlKCkgPT4gVmFsdWVDb21wYXJlci5HZXRIYXNoQ29kZSh0aGlzKTsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBvYmplY3QgaW1wbGVtZW50aW5nIDxzZWUgY3JlZj0iSVNhcmlmTm9kZVZlcnNpb25PbmUiIC8+Lg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU2FyaWZOb2RlS2luZFZlcnNpb25PbmUgU2FyaWZOb2RlS2luZFZlcnNpb25PbmUNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFNhcmlmTm9kZUtpbmRWZXJzaW9uT25lLlNhcmlmTG9nVmVyc2lvbk9uZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBVUkkgb2YgdGhlIEpTT04gc2NoZW1hIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHZlcnNpb24uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiJHNjaGVtYSIsIElzUmVxdWlyZWQgPSBmYWxzZSwgRW1pdERlZmF1bHRWYWx1ZSA9IGZhbHNlKV0NCiAgICAgICAgcHVibGljIFVyaSBTY2hlbWFVcmkgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBTQVJJRiBmb3JtYXQgdmVyc2lvbiBvZiB0aGlzIGxvZyBmaWxlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbRGF0YU1lbWJlcihOYW1lID0gInZlcnNpb24iLCBJc1JlcXVpcmVkID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBTYXJpZlZlcnNpb25WZXJzaW9uT25lIFZlcnNpb24geyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFRoZSBzZXQgb2YgcnVucyBjb250YWluZWQgaW4gdGhpcyBsb2cgZmlsZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJydW5zIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8UnVuVmVyc2lvbk9uZT4gUnVucyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iU2FyaWZMb2dWZXJzaW9uT25lIiAvPiBjbGFzcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTG9nVmVyc2lvbk9uZSgpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlNhcmlmTG9nVmVyc2lvbk9uZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgdmFsdWVzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InNjaGVtYVVyaSI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogU2NoZW1hVXJpIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idmVyc2lvbiI+DQogICAgICAgIC8vLyBBbiBpbml0aWFsaXphdGlvbiB2YWx1ZSBmb3IgdGhlIDxzZWUgY3JlZj0iUDogVmVyc2lvbiIgLz4gcHJvcGVydHkuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InJ1bnMiPg0KICAgICAgICAvLy8gQW4gaW5pdGlhbGl6YXRpb24gdmFsdWUgZm9yIHRoZSA8c2VlIGNyZWY9IlA6IFJ1bnMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgcHVibGljIFNhcmlmTG9nVmVyc2lvbk9uZShVcmkgc2NoZW1hVXJpLCBTYXJpZlZlcnNpb25WZXJzaW9uT25lIHZlcnNpb24sIElFbnVtZXJhYmxlPFJ1blZlcnNpb25PbmU+IHJ1bnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIEluaXQoc2NoZW1hVXJpLCB2ZXJzaW9uLCBydW5zKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlNhcmlmTG9nVmVyc2lvbk9uZSIgLz4gY2xhc3MgZnJvbSB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im90aGVyIj4NCiAgICAgICAgLy8vIFRoZSBpbnN0YW5jZSBmcm9tIHdoaWNoIHRoZSBuZXcgaW5zdGFuY2UgaXMgdG8gYmUgaW5pdGlhbGl6ZWQuDQogICAgICAgIC8vLyA8L3BhcmFtPg0KICAgICAgICAvLy8gPGV4Y2VwdGlvbiBjcmVmPSJBcmd1bWVudE51bGxFeGNlcHRpb24iPg0KICAgICAgICAvLy8gVGhyb3duIGlmIDxwYXJhbXJlZiBuYW1lPSJvdGhlciIgLz4gaXMgbnVsbC4NCiAgICAgICAgLy8vIDwvZXhjZXB0aW9uPg0KICAgICAgICBwdWJsaWMgU2FyaWZMb2dWZXJzaW9uT25lKFNhcmlmTG9nVmVyc2lvbk9uZSBvdGhlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG90aGVyID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2Yob3RoZXIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSW5pdChvdGhlci5TY2hlbWFVcmksIG90aGVyLlZlcnNpb24sIG90aGVyLlJ1bnMpOw0KICAgICAgICB9DQoNCiAgICAgICAgSVNhcmlmTm9kZVZlcnNpb25PbmUgSVNhcmlmTm9kZVZlcnNpb25PbmUuRGVlcENsb25lKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIERlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhpcyBpbnN0YW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIFNhcmlmTG9nVmVyc2lvbk9uZSBEZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gKFNhcmlmTG9nVmVyc2lvbk9uZSlEZWVwQ2xvbmVDb3JlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIElTYXJpZk5vZGVWZXJzaW9uT25lIERlZXBDbG9uZUNvcmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IFNhcmlmTG9nVmVyc2lvbk9uZSh0aGlzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBJbml0KFVyaSBzY2hlbWFVcmksIFNhcmlmVmVyc2lvblZlcnNpb25PbmUgdmVyc2lvbiwgSUVudW1lcmFibGU8UnVuVmVyc2lvbk9uZT4gcnVucykNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHNjaGVtYVVyaSAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFNjaGVtYVVyaSA9IG5ldyBVcmkoc2NoZW1hVXJpLk9yaWdpbmFsU3RyaW5nLCBzY2hlbWFVcmkuSXNBYnNvbHV0ZVVyaSA/IFVyaUtpbmQuQWJzb2x1dGUgOiBVcmlLaW5kLlJlbGF0aXZlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgVmVyc2lvbiA9IHZlcnNpb247DQogICAgICAgICAgICBpZiAocnVucyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBkZXN0aW5hdGlvbl8wID0gbmV3IExpc3Q8UnVuVmVyc2lvbk9uZT4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMCBpbiBydW5zKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlXzAgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fMC5BZGQobnVsbCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChuZXcgUnVuVmVyc2lvbk9uZSh2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBSdW5zID0gZGVzdGluYXRpb25fMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "32787796AD8EB311B122F93B86EE4A0D",
              "algorithm": "md5"
            },
            {
              "value": "6F04CC8BA1B9C8F3ED4F568435A0F43EDE545377",
              "algorithm": "sha-1"
            },
            {
              "value": "D8508319280D2BEB3FD416DCC9CD7D886BBFBFA5CABDA8FEFCA2B5B5A016F4E3",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/SarifRewritingVisitorVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "09CE01DCB6B63343783044639A82A48B",
              "algorithm": "md5"
            },
            {
              "value": "BF6266E0E759F0F64512E5FFABD0068700124954",
              "algorithm": "sha-1"
            },
            {
              "value": "DAE424C711D3A7E1659D60BBFFCAFC8B5EF524B8B692C676AEACF003CE3D7F5B",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "38ED407197D03A3836D2A32ACE474322",
              "algorithm": "md5"
            },
            {
              "value": "C3B84AE5BB40F128F80A44A53E577C219F934F50",
              "algorithm": "sha-1"
            },
            {
              "value": "2C89EEE95125A1E22F3D932C92851FED39A8B40C84C1C7F085A30C689BCBFE78",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOneEqualityComparer.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "C94FDE18D44043961540D1E788435A25",
              "algorithm": "md5"
            },
            {
              "value": "1B2DC2A605CA682504EF4C00C89ED3F0B80A5C1E",
              "algorithm": "sha-1"
            },
            {
              "value": "3DAD641802C3FB543597674A07936376E1A36F2545FBFF224C4CDE3C86E7C78E",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuICBBbGwgUmlnaHRzIFJlc2VydmVkLg0KLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi4NCg0KdXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb247DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmUNCnsNCiAgICAvLy8gPHN1bW1hcnk+DQogICAgLy8vIEEgY2FsbCBzdGFjayB0aGF0IGlzIHJlbGV2YW50IHRvIGEgcmVzdWx0Lg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgW0RhdGFDb250cmFjdF0NCiAgICBbR2VuZXJhdGVkQ29kZSgiTWljcm9zb2Z0Lkpzb24uU2NoZW1hLlRvRG90TmV0IiwgIjAuNTIuMC4wIildDQogICAgcHVibGljIHBhcnRpYWwgY2xhc3MgU3RhY2tWZXJzaW9uT25lIDogUHJvcGVydHlCYWdIb2xkZXIsIElTYXJpZk5vZGVWZXJzaW9uT25lDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIElFcXVhbGl0eUNvbXBhcmVyPFN0YWNrVmVyc2lvbk9uZT4gVmFsdWVDb21wYXJlciA9PiBTdGFja1ZlcnNpb25PbmVFcXVhbGl0eUNvbXBhcmVyLkluc3RhbmNlOw0KDQogICAgICAgIHB1YmxpYyBib29sIFZhbHVlRXF1YWxzKFN0YWNrVmVyc2lvbk9uZSBvdGhlcikgPT4gVmFsdWVDb21wYXJlci5FcXVhbHModGhpcywgb3RoZXIpOw0KICAgICAgICBwdWJsaWMgaW50IFZhbHVlR2V0SGFzaENvZGUoKSA9PiBWYWx1ZUNvbXBhcmVyLkdldEhhc2hDb2RlKHRoaXMpOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIG9iamVjdCBpbXBsZW1lbnRpbmcgPHNlZSBjcmVmPSJJU2FyaWZOb2RlVmVyc2lvbk9uZSIgLz4uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZSBTYXJpZk5vZGVLaW5kVmVyc2lvbk9uZQ0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gU2FyaWZOb2RlS2luZFZlcnNpb25PbmUuU3RhY2tWZXJzaW9uT25lOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQSBtZXNzYWdlIHJlbGV2YW50IHRvIHRoaXMgY2FsbCBzdGFjay4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJtZXNzYWdlIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgc3RyaW5nIE1lc3NhZ2UgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEFuIGFycmF5IG9mIHN0YWNrIGZyYW1lcyB0aGF0IHJlcHJlc2VudCBhIHNlcXVlbmNlIG9mIGNhbGxzLCByZW5kZXJlZCBpbiByZXZlcnNlIGNocm9ub2xvZ2ljYWwgb3JkZXIsIHRoYXQgY29tcHJpc2UgdGhlIGNhbGwgc3RhY2suDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtEYXRhTWVtYmVyKE5hbWUgPSAiZnJhbWVzIiwgSXNSZXF1aXJlZCA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgSUxpc3Q8U3RhY2tGcmFtZVZlcnNpb25PbmU+IEZyYW1lcyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gS2V5L3ZhbHVlIHBhaXJzIHRoYXQgcHJvdmlkZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzdGFjay4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW0RhdGFNZW1iZXIoTmFtZSA9ICJwcm9wZXJ0aWVzIiwgSXNSZXF1aXJlZCA9IGZhbHNlLCBFbWl0RGVmYXVsdFZhbHVlID0gZmFsc2UpXQ0KICAgICAgICBpbnRlcm5hbCBvdmVycmlkZSBJRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+IFByb3BlcnRpZXMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSA8c2VlIGNyZWY9IlN0YWNrVmVyc2lvbk9uZSIgLz4gY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBTdGFja1ZlcnNpb25PbmUoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgPHNlZSBjcmVmPSJTdGFja1ZlcnNpb25PbmUiIC8+IGNsYXNzIGZyb20gdGhlIHN1cHBsaWVkIHZhbHVlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJtZXNzYWdlIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBNZXNzYWdlIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZnJhbWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBGcmFtZXMiIC8+IHByb3BlcnR5Lg0KICAgICAgICAvLy8gPC9wYXJhbT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJwcm9wZXJ0aWVzIj4NCiAgICAgICAgLy8vIEFuIGluaXRpYWxpemF0aW9uIHZhbHVlIGZvciB0aGUgPHNlZSBjcmVmPSJQOiBQcm9wZXJ0aWVzIiAvPiBwcm9wZXJ0eS4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIHB1YmxpYyBTdGFja1ZlcnNpb25PbmUoc3RyaW5nIG1lc3NhZ2UsIElFbnVtZXJhYmxlPFN0YWNrRnJhbWVWZXJzaW9uT25lPiBmcmFtZXMsIElEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4gcHJvcGVydGllcykNCiAgICAgICAgew0KICAgICAgICAgICAgSW5pdChtZXNzYWdlLCBmcmFtZXMsIHByb3BlcnRpZXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIDxzZWUgY3JlZj0iU3RhY2tWZXJzaW9uT25lIiAvPiBjbGFzcyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3RoZXIiPg0KICAgICAgICAvLy8gVGhlIGluc3RhbmNlIGZyb20gd2hpY2ggdGhlIG5ldyBpbnN0YW5jZSBpcyB0byBiZSBpbml0aWFsaXplZC4NCiAgICAgICAgLy8vIDwvcGFyYW0+DQogICAgICAgIC8vLyA8ZXhjZXB0aW9uIGNyZWY9IkFyZ3VtZW50TnVsbEV4Y2VwdGlvbiI+DQogICAgICAgIC8vLyBUaHJvd24gaWYgPHBhcmFtcmVmIG5hbWU9Im90aGVyIiAvPiBpcyBudWxsLg0KICAgICAgICAvLy8gPC9leGNlcHRpb24+DQogICAgICAgIHB1YmxpYyBTdGFja1ZlcnNpb25PbmUoU3RhY2tWZXJzaW9uT25lIG90aGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKG5hbWVvZihvdGhlcikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBJbml0KG90aGVyLk1lc3NhZ2UsIG90aGVyLkZyYW1lcywgb3RoZXIuUHJvcGVydGllcyk7DQogICAgICAgIH0NCg0KICAgICAgICBJU2FyaWZOb2RlVmVyc2lvbk9uZSBJU2FyaWZOb2RlVmVyc2lvbk9uZS5EZWVwQ2xvbmUoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRGVlcENsb25lQ29yZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGlzIGluc3RhbmNlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgU3RhY2tWZXJzaW9uT25lIERlZXBDbG9uZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAoU3RhY2tWZXJzaW9uT25lKURlZXBDbG9uZUNvcmUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgSVNhcmlmTm9kZVZlcnNpb25PbmUgRGVlcENsb25lQ29yZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhY2tWZXJzaW9uT25lKHRoaXMpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSB2b2lkIEluaXQoc3RyaW5nIG1lc3NhZ2UsIElFbnVtZXJhYmxlPFN0YWNrRnJhbWVWZXJzaW9uT25lPiBmcmFtZXMsIElEaWN0aW9uYXJ5PHN0cmluZywgU2VyaWFsaXplZFByb3BlcnR5SW5mbz4gcHJvcGVydGllcykNCiAgICAgICAgew0KICAgICAgICAgICAgTWVzc2FnZSA9IG1lc3NhZ2U7DQogICAgICAgICAgICBpZiAoZnJhbWVzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uXzAgPSBuZXcgTGlzdDxTdGFja0ZyYW1lVmVyc2lvbk9uZT4oKTsNCiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgdmFsdWVfMCBpbiBmcmFtZXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVfMCA9PSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbl8wLkFkZChudWxsKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uXzAuQWRkKG5ldyBTdGFja0ZyYW1lVmVyc2lvbk9uZSh2YWx1ZV8wKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBGcmFtZXMgPSBkZXN0aW5hdGlvbl8wOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAocHJvcGVydGllcyAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFByb3BlcnRpZXMgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIFNlcmlhbGl6ZWRQcm9wZXJ0eUluZm8+KHByb3BlcnRpZXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "1B6A19ACC90CCE953862BCB97709905F",
              "algorithm": "md5"
            },
            {
              "value": "392A37BA8124EABBF69D9BF4B1174F1C16F3ACE0",
              "algorithm": "sha-1"
            },
            {
              "value": "651CAE5DA3B78B665A70CBE5480066F5EAA33FEFF4350B337BB06AAF879030FE",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ToolVersionOne.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "E33376C7425F27E26F78E1DF7CAA7B3B",
              "algorithm": "md5"
            },
            {
              "value": "9F3A4949737A7B4096C34736B119F3056724E32D",
              "algorithm": "sha-1"
            },
            {
              "value": "67363E7A073D9C456DDB266CD6656A58B6D841A9991A248898D9D27CB65782FB",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/AbsoluteUrisVisitor.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuVmlzaXRvcnMNCnsNCiAgICBwdWJsaWMgY2xhc3MgQWJzb2x1dGVVcmlzVmlzaXRvciA6IFNhcmlmUmV3cml0aW5nVmlzaXRvcg0KICAgIHsNCiAgICAgICAgaW50ZXJuYWwgRGljdGlvbmFyeTxzdHJpbmcsIFVyaT4gX2N1cnJlbnRVcmlNYXBwaW5nczsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBDcmVhdGUgYSBSZWJhc2VVcmlWaXNpdG9yLCB3aXRoIGEgZ2l2ZW4gbmFtZSBmb3IgdGhlIEJhc2UgVVJJIGFuZCBhIHZhbHVlIGZvciB0aGUgYmFzZSBVUkkuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBBYnNvbHV0ZVVyaXNWaXNpdG9yKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFBoeXNpY2FsTG9jYXRpb24gVmlzaXRQaHlzaWNhbExvY2F0aW9uKFBoeXNpY2FsTG9jYXRpb24gbm9kZSkNCiAgICAgICAgew0KICAgICAgICAgICAgUGh5c2ljYWxMb2NhdGlvbiBuZXdOb2RlID0gYmFzZS5WaXNpdFBoeXNpY2FsTG9jYXRpb24obm9kZSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIChfY3VycmVudFVyaU1hcHBpbmdzICE9IG51bGwgJiYgIXN0cmluZy5Jc051bGxPckVtcHR5KG5ld05vZGUuRmlsZUxvY2F0aW9uPy5VcmlCYXNlSWQpICYmIF9jdXJyZW50VXJpTWFwcGluZ3MuQ29udGFpbnNLZXkobmV3Tm9kZS5GaWxlTG9jYXRpb24uVXJpQmFzZUlkKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBVcmkgYmFzZVVyaSA9IF9jdXJyZW50VXJpTWFwcGluZ3NbbmV3Tm9kZS5GaWxlTG9jYXRpb24uVXJpQmFzZUlkXTsNCiAgICAgICAgICAgICAgICBuZXdOb2RlLkZpbGVMb2NhdGlvbi5VcmkgPSBDb21iaW5lVXJpcyhiYXNlVXJpLCBuZXdOb2RlLkZpbGVMb2NhdGlvbi5VcmkpOw0KICAgICAgICAgICAgICAgIG5ld05vZGUuRmlsZUxvY2F0aW9uLlVyaUJhc2VJZCA9IG51bGw7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBuZXdOb2RlOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJ1biBWaXNpdFJ1bihSdW4gbm9kZSkNCiAgICAgICAgew0KICAgICAgICAgICAgUnVuIG5ld1J1bjsNCg0KICAgICAgICAgICAgLy8gUmVzZXQgVVJJIG1hcHBpbmdzIGZvciB0aGlzIHJ1bi4NCiAgICAgICAgICAgIF9jdXJyZW50VXJpTWFwcGluZ3MgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIFVyaT4oKTsNCg0KICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCB0aGUgdXJpIG1hcHBpbmdzIGRpY3Rpb25hcnkgb3V0IG9mIHRoZSANCiAgICAgICAgICAgIGlmIChub2RlLlByb3BlcnRpZXMgIT0gbnVsbCAmJiBub2RlLlByb3BlcnRpZXMuQ29udGFpbnNLZXkoUmViYXNlVXJpVmlzaXRvci5CYXNlVXJpRGljdGlvbmFyeU5hbWUpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIEZvciBhIGdpdmVuIHJ1biwgd2UnbGwgcmVzZXQgdGhlIFVyaSBNYXBwaW5ncyB3aGlsZSB0cmF2ZXJzaW5nIGl0Lg0KICAgICAgICAgICAgICAgIGlmICghUmViYXNlVXJpVmlzaXRvci5UcnlEZXNlcmlhbGl6ZVByb3BlcnR5RGljdGlvbmFyeShub2RlLlByb3BlcnRpZXNbUmViYXNlVXJpVmlzaXRvci5CYXNlVXJpRGljdGlvbmFyeU5hbWVdLCBvdXQgX2N1cnJlbnRVcmlNYXBwaW5ncykpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbigkIkJhc2UgVVJJIERpY3Rpb25hcnkgaW5jb3JyZWN0bHkgZm9ybWF0dGVkLCB3ZSBleHBlY3QgYSBzdHJpbmctPnVyaSBkaWN0aW9uYXJ5IGluIHRoZSBSdW4gUHJvcGVydGllcyB3aXRoIG5hbWUge1JlYmFzZVVyaVZpc2l0b3IuQmFzZVVyaURpY3Rpb25hcnlOYW1lfSIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIGRpY3Rpb25hcnkgd2Ugd29uJ3QgbmVlZCB0byBmaXggdGhlIGZpbGVzIHVwLg0KICAgICAgICAgICAgICAgIGlmIChub2RlLkZpbGVzICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBGaXhGaWxlcyhub2RlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIG5ld1J1biA9IGJhc2UuVmlzaXRSdW4obm9kZSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiBuZXdSdW47DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBJZiB3ZSBhcmUgY2hhbmdpbmcgdGhlIFVSSXMgaW4gUmVzdWx0cyB0byBiZSByZWxhdGl2ZSwgd2UgbmVlZCB0byBhbHNvIGNoYW5nZSB0aGUgVVJJIGtleXMgaW4gdGhlIGZpbGVzIGRpY3Rpb25hcnkNCiAgICAgICAgLy8vIHRvIGJlIHJlbGF0aXZlLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InJ1biI+QSBydW4gdG8gZml4IHRoZSBGaWxlcyBkaWN0aW9uYXJ5IG9mLjwvcGFyYW0+DQogICAgICAgIHByaXZhdGUgdm9pZCBGaXhGaWxlcyhSdW4gcnVuKQ0KICAgICAgICB7DQogICAgICAgICAgICBEaWN0aW9uYXJ5PHN0cmluZywgRmlsZURhdGE+IG5ld0RpY3Rpb25hcnkgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIEZpbGVEYXRhPigpOw0KDQogICAgICAgICAgICBmb3JlYWNoICh2YXIga2V5IGluIHJ1bi5GaWxlcy5LZXlzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIEZpbGVEYXRhIG5ld05vZGUgPSBydW4uRmlsZXNba2V5XTsNCg0KICAgICAgICAgICAgICAgIFVyaSBiYXNlVXJpOw0KICAgICAgICAgICAgICAgIC8vIE5vZGUgaGFzIGEgVXJpQmFzZUlkICYmIHdlJ3JlIGdvaW5nIHRvIHJld3JpdGUgaXQuDQogICAgICAgICAgICAgICAgaWYgKCFzdHJpbmcuSXNOdWxsT3JFbXB0eShuZXdOb2RlLkZpbGVMb2NhdGlvbj8uVXJpQmFzZUlkKSAmJiBfY3VycmVudFVyaU1hcHBpbmdzLkNvbnRhaW5zS2V5KG5ld05vZGUuRmlsZUxvY2F0aW9uPy5VcmlCYXNlSWQpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gUmV3cml0ZSB0aGUgZmlsZWRhdGEncyBVUkkNCiAgICAgICAgICAgICAgICAgICAgYmFzZVVyaSA9IF9jdXJyZW50VXJpTWFwcGluZ3NbbmV3Tm9kZS5GaWxlTG9jYXRpb24uVXJpQmFzZUlkXTsNCiAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS5GaWxlTG9jYXRpb24uVXJpID0gQ29tYmluZVVyaXMoYmFzZVVyaSwgbmV3Tm9kZS5GaWxlTG9jYXRpb24uVXJpKTsNCg0KICAgICAgICAgICAgICAgICAgICBVcmkgcGFyZW50VXJpOw0KICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcGFyZW50IHVyaSBpcyByZWxhdGl2ZSwgd2Ugc2hvdWxkIHJld3JpdGUgaXQgYXMgd2VsbC4NCiAgICAgICAgICAgICAgICAgICAgaWYgKFVyaS5UcnlDcmVhdGUobmV3Tm9kZS5QYXJlbnRLZXksIFVyaUtpbmQuUmVsYXRpdmUsIG91dCBwYXJlbnRVcmkpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlLlBhcmVudEtleSA9IENvbWJpbmVVcmlzKGJhc2VVcmksIHBhcmVudFVyaSkuVG9TdHJpbmcoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIG5ld05vZGUuRmlsZUxvY2F0aW9uLlVyaUJhc2VJZCA9IG51bGw7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gZml4IGRpY3Rpb25hcnkNCiAgICAgICAgICAgICAgICBuZXdEaWN0aW9uYXJ5W25ld05vZGUuRmlsZUxvY2F0aW9uLlVyaS5Ub1N0cmluZygpXSA9IG5ld05vZGU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJ1bi5GaWxlcyA9IG5ld0RpY3Rpb25hcnk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHN0YXRpYyBVcmkgQ29tYmluZVVyaXMoVXJpIGJhc2VVcmksIFVyaSByZWxhdGl2ZVVyaSkNCiAgICAgICAgew0KICAgICAgICAgICAgVXJpIHJlbGF0aXZlUGFydCA9IHJlbGF0aXZlVXJpOw0KICAgICAgICAgICAgaWYocmVsYXRpdmVVcmkuT3JpZ2luYWxTdHJpbmcuU3RhcnRzV2l0aCgiLyIpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJlbGF0aXZlUGFydCA9IG5ldyBVcmkocmVsYXRpdmVVcmkuVG9TdHJpbmcoKS5UcmltU3RhcnQoJy8nKSwgVXJpS2luZC5SZWxhdGl2ZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBuZXcgVXJpKGJhc2VVcmksIHJlbGF0aXZlUGFydCk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "D6C8C3453CE54E932D053FF83579AD42",
              "algorithm": "md5"
            },
            {
              "value": "43266DE86ED7EB884EB196BF5CF62D3A4D2B01A1",
              "algorithm": "sha-1"
            },
            {
              "value": "E8EBFB70ABAB356B08F2B8DF421738BEFA75E5E63B511945071C47F03D75DD27",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/AddFileReferencesVisitor.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLnVzaW5nIFN5c3RlbTsNCnVzaW5nIFN5c3RlbTsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5WaXNpdG9ycw0Kew0KICAgIHB1YmxpYyBjbGFzcyBBZGRGaWxlUmVmZXJlbmNlc1Zpc2l0b3IgOiBTYXJpZlJld3JpdGluZ1Zpc2l0b3INCiAgICB7DQogICAgICAgIElEaWN0aW9uYXJ5PHN0cmluZywgRmlsZURhdGE+IF9maWxlczsNCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgUnVuIFZpc2l0UnVuKFJ1biBub2RlKQ0KICAgICAgICB7DQogICAgICAgICAgICBfZmlsZXMgPSBub2RlLkZpbGVzOw0KDQogICAgICAgICAgICBSdW4gcmVzdWx0ID0gYmFzZS5WaXNpdFJ1bihub2RlKTsNCiAgICAgICAgICAgIHJlc3VsdC5GaWxlcyA9IF9maWxlczsNCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFBoeXNpY2FsTG9jYXRpb24gVmlzaXRQaHlzaWNhbExvY2F0aW9uKFBoeXNpY2FsTG9jYXRpb24gbm9kZSkNCiAgICAgICAgew0KICAgICAgICAgICAgLy8gU3RyaWN0bHkgc3BlYWtpbmcsIHNvbWUgZWxlbWVudHMgdGhhdCBtYXkgY29udHJpYnV0ZSB0byBhIGZpbGVzIHRhYmxlIA0KICAgICAgICAgICAgLy8ga2V5IGFyZSBjYXNlIHNlbnNpdGl2ZSwgZS5nLiwgZXZlcnl0aGluZyBidXQgdGhlIHNjaGVtYSBhbmQgcHJvdG9jb2wgb2YgYQ0KICAgICAgICAgICAgLy8gd2ViIFVSSS4gV2UgZG9uJ3QgaGF2ZSBhIHByb3BlciBjb21wYXJlciBpbXBsZW1lbnRhdGlvbiB0aGF0IGNhbiBoYW5kbGUgDQogICAgICAgICAgICAvLyBhbGwgY2FzZXMuIEZvciBub3csIHdlIGNvdmVyIHRoZSBXaW5kb3dzIGhhcHB5IHBhdGgsIHdoaWNoIGFzc3VtZXMgdGhhdA0KICAgICAgICAgICAgLy8gbW9zdCBVUklzIGluIGxvZyBmaWxlcyBhcmUgZmlsZSBwYXRocyAod2hpY2ggYXJlIGNhc2UtaW5zZW5zaXRpdmUpDQogICAgICAgICAgICAvLw0KICAgICAgICAgICAgLy8gVHJhY2tpbmcgaXRlbSBmb3IgYW4gaW1wcm92ZWQgY29tcGFyZXI6DQogICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L3NhcmlmLXNkay9pc3N1ZXMvOTczDQogICAgICAgICAgICBfZmlsZXMgPSBfZmlsZXMgPz8gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBGaWxlRGF0YT4oU3RyaW5nQ29tcGFyZXIuT3JkaW5hbElnbm9yZUNhc2UpOw0KDQogICAgICAgICAgICBGaWxlTG9jYXRpb24gZmlsZUxvY2F0aW9uID0gbm9kZS5GaWxlTG9jYXRpb247DQoNCiAgICAgICAgICAgIHN0cmluZyB1cmlUZXh0ID0gVXJpLkVzY2FwZVVyaVN0cmluZyhmaWxlTG9jYXRpb24uVXJpLlRvU3RyaW5nKCkpOw0KDQogICAgICAgICAgICBpZiAoIXN0cmluZy5Jc051bGxPckVtcHR5KGZpbGVMb2NhdGlvbi5VcmlCYXNlSWQpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIFNlZSBFWEFNUExFIDMgb2YgMy4xMS4xMy4yICdQcm9wZXJ0eSBOYW1lcycgb2YNCiAgICAgICAgICAgICAgICAvLyBTQVJJRiB2MiAnZmlsZXMnIHByb3BlcnR5IHNwZWNpZmljYXRpb24gDQogICAgICAgICAgICAgICAgdXJpVGV4dCA9ICIjIiArIGZpbGVMb2NhdGlvbi5VcmlCYXNlSWQgKyAiIyIgKyB1cmlUZXh0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBJZiB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0cywgd2Ugd2lsbCBub3QgaW5zZXJ0IG9uZSBhcyB3ZSB3YW50IHRvIA0KICAgICAgICAgICAgLy8gcHJlc2VydmUgbWltZS10eXBlLCBoYXNoIGRldGFpbHMsIGFuZCBvdGhlciBpbmZvcm1hdGlvbiB0aGF0IA0KICAgICAgICAgICAgLy8gbWF5IGFscmVhZHkgYmUgcHJlc2VudA0KICAgICAgICAgICAgaWYgKCFfZmlsZXMuQ29udGFpbnNLZXkodXJpVGV4dCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIG1pbWVUeXBlID0gV3JpdGVycy5NaW1lVHlwZS5EZXRlcm1pbmVGcm9tRmlsZUV4dGVuc2lvbih1cmlUZXh0KTsNCg0KICAgICAgICAgICAgICAgIF9maWxlc1t1cmlUZXh0XSA9IG5ldyBGaWxlRGF0YSgpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBNaW1lVHlwZSA9IG1pbWVUeXBlDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIGJhc2UuVmlzaXRQaHlzaWNhbExvY2F0aW9uKG5vZGUpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "C5D0A775A5ADCD19AE0C5DE29D0CA639",
              "algorithm": "md5"
            },
            {
              "value": "4665932F1C9B5CA1ADE69C333F594B554E0EE82F",
              "algorithm": "sha-1"
            },
            {
              "value": "FDCB2AB5B880B12B354A81CB6B02A69F14B78AC8E51B50386A0347A6C608DFA4",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/InsertOptionalDataVisitor.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "5E3F70F9B27555BFA29C79C0F12B32B7",
              "algorithm": "md5"
            },
            {
              "value": "8C031F979EEC82EC30D1FD94983CDC57F7FBA41E",
              "algorithm": "sha-1"
            },
            {
              "value": "198DD3E8E21216ABF3C577AB8A58613082692641AF2FAFD77F80F2ECD8322AAA",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/RebaseUriVisitor.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "3EB0F4C674CDE6763880800019FD3FB8",
              "algorithm": "md5"
            },
            {
              "value": "953498CB0D7D7D75957969F1C87EF690EEC68DC2",
              "algorithm": "sha-1"
            },
            {
              "value": "0FA6ADA90310F6E8F4875C974AFB0B25ACD4575C1BEDBAE40229456D25F69DBB",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "777BC3EBAE01867A7BC30658C25F85CC",
              "algorithm": "md5"
            },
            {
              "value": "4A86B89B1FBBDA4ACB490DE6150EECE929479477",
              "algorithm": "sha-1"
            },
            {
              "value": "9905B985594516BB504E5F73590592716644EDD1BF88FDF924FDB2E109F5F5A9",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "B779CA0CA15C477813991DB43B70A49E",
              "algorithm": "md5"
            },
            {
              "value": "CB069FCDD1B501E603688CE92D275F0DB87737F0",
              "algorithm": "sha-1"
            },
            {
              "value": "9FFC6F9DCDC132B48F222EFFCCB564B738F60059DED7748947851C5E1BDF4895",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "7AF9B6C89984380EDD4922B2C6667BA1",
              "algorithm": "md5"
            },
            {
              "value": "2F5155E6B4F5CCA6B0D66A0FE3BC1159102D7469",
              "algorithm": "sha-1"
            },
            {
              "value": "F42E685051273889DD672719E682259DAF6548372336534BDCCE0C1C90B03E40",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/MimeType.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5JbW11dGFibGU7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLldyaXRlcnMNCnsNCiAgICAvLy8gPHN1bW1hcnk+QSBjbGFzcyBjb250YWluaW5nIHV0aWxpdHkgZnVuY3Rpb25zIGZvciB3b3JraW5nIHdpdGggTUlNRSB0eXBlcy48L3N1bW1hcnk+DQogICAgcHVibGljIHN0YXRpYyBjbGFzcyBNaW1lVHlwZQ0KICAgIHsNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pkd1ZXNzZXMgZmlsZVBhdGggYXBwcm9wcmlhdGUgTUlNRSB0eXBlIGdpdmVuIHRoZSBleHRlbnNpb24gZnJvbSBhIGZpbGUgbmFtZS48L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icGF0aCI+RmlsZSBwYXRoIGZyb20gd2hpY2ggTUlNRSB0eXBlIHNoYWxsIGJlIGd1ZXNzZWQuPC9wYXJhbT4NCiAgICAgICAgLy8vIDxyZXR1cm5zPkEgc3RyaW5nIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxpa2VseSBNSU1FIHR5cGUgb2YgPHBhcmFtcmVmIG5hbWU9InBhdGgiLz4NCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgRGV0ZXJtaW5lRnJvbUZpbGVFeHRlbnNpb24oc3RyaW5nIHBhdGgpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChwYXRoID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2YocGF0aCkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoU3lzdGVtLklPLkRpcmVjdG9yeS5FeGlzdHMocGF0aCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIE1pbWVUeXBlLkRpcmVjdG9yeTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZm9yZWFjaCAoSW1tdXRhYmxlQXJyYXk8SW1tdXRhYmxlQXJyYXk8c3RyaW5nPj4gZXh0ZW5zaW9uc1RhYmxlIGluIEdldEV4dGVuc2lvbnNUYWJsZXMoKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChJbW11dGFibGVBcnJheTxzdHJpbmc+IHRhYmxlRW50cnkgaW4gZXh0ZW5zaW9uc1RhYmxlKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gRWFjaCBlbnRyeSBpbiB0aGUgdGFibGUgaXMgb2YgdGhlIGZvcm0gWyBtaW1lVHlwZSwgZXh0MSwgZXh0MiwgLi4uIGV4dE4gXQ0KICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpZHggPSAxOyBpZHggPCB0YWJsZUVudHJ5Lkxlbmd0aDsgKytpZHgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChIYXNFeHRlbnNpb24ocGF0aCwgdGFibGVFbnRyeVtpZHhdKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVFbnRyeVswXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBNaW1lVHlwZS5CaW5hcnk7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+R3Vlc3NlcyBhbiBhcHByb3ByaWF0ZSBNSU1FIHR5cGUgZ2l2ZW4gdGhlIGV4dGVuc2lvbiBmcm9tIGEgZmlsZSBuYW1lLjwvc3VtbWFyeT4NCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJmaWxlTmFtZSI+RmlsZSBuYW1lIGZyb20gd2hpY2ggTUlNRSB0eXBlIHNoYWxsIGJlIGd1ZXNzZWQuPC9wYXJhbT4NCiAgICAgICAgLy8vIDxyZXR1cm5zPkEgc3RyaW5nIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxpa2VseSBNSU1FIHR5cGUgb2YgPHBhcmFtcmVmIG5hbWU9ImZpbGVOYW1lIi8+IGdpdmVuDQogICAgICAgIC8vLyBpdHMgZXh0ZW5zaW9uLjwvcmV0dXJucz4NCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgRGV0ZXJtaW5lRnJvbUZpbGVFeHRlbnNpb24oVXJpIGZpbGVVcmkpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChmaWxlVXJpID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbihuYW1lb2YoZmlsZVVyaSkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBzdHJpbmcgZmlsZU5hbWUgPSBmaWxlVXJpLlRvU3RyaW5nKCk7DQoNCiAgICAgICAgICAgIGlmIChmaWxlVXJpLklzQWJzb2x1dGVVcmkgJiYgZmlsZVVyaS5Jc0ZpbGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBmaWxlVXJpLkxvY2FsUGF0aDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIERldGVybWluZUZyb21GaWxlRXh0ZW5zaW9uKGZpbGVOYW1lKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc1RleHR1YWxNaW1lVHlwZShzdHJpbmcgbWltZVR5cGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHNfdGV4dHVhbE1pbWVUeXBlcyA9IHNfdGV4dHVhbE1pbWVUeXBlcyA/PyBJbml0aWFsaXplTWltZVR5cGVzU2V0KHNfdGV4dHVhbEV4dGVuc2lvbnNUYWJsZSk7DQoNCiAgICAgICAgICAgIC8vIEluIG9yZGVyIGZvciBhIG1pbWUgdHlwZSB0byBiZSByZWdhcmRlZCBhcyB0ZXh0dWFsLCB3ZSByZXF1aXJlIGFuIGV4cGxpY2l0IA0KICAgICAgICAgICAgLy8gcmVmZXJlbmNlIHRvIGl0IGluIHRoaXMgc2V0LiBBbGwgdW5yZWNvZ25pemVkIG1pbWUgdHlwZXMgYXJlIHJlZ2FyZGVkIGFzIA0KICAgICAgICAgICAgLy8gYmluYXJ5LCBpbiBvcmRlciB0byBwcm92b2tlIHRoZSBtb3N0IGNvbnNlcnZhdGl2ZSBTREsgYmVoYXZpb3JzIGFyb3VuZCANCiAgICAgICAgICAgIC8vIHJldHJpZXZpbmcgY29kZSBzbmlwcGV0cywgZXRjLg0KICAgICAgICAgICAgcmV0dXJuIHNfdGV4dHVhbE1pbWVUeXBlcy5Db250YWlucyhtaW1lVHlwZSk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgSXNCaW5hcnlNaW1lVHlwZShzdHJpbmcgbWltZVR5cGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHNfdGV4dHVhbE1pbWVUeXBlcyA9IHNfdGV4dHVhbE1pbWVUeXBlcyA/PyBJbml0aWFsaXplTWltZVR5cGVzU2V0KHNfdGV4dHVhbEV4dGVuc2lvbnNUYWJsZSk7DQoNCiAgICAgICAgICAgIC8vIEluIG9yZGVyIGZvciBhIG1pbWUgdHlwZSB0byBiZSByZWdhcmRlZCBhcyB0ZXh0dWFsLCB3ZSByZXF1aXJlIGFuIGV4cGxpY2l0IA0KICAgICAgICAgICAgLy8gcmVmZXJlbmNlIHRvIGl0IGluIHRoaXMgc2V0LiBBbGwgdW5yZWNvZ25pemVkIG1pbWUgdHlwZXMgYXJlIHJlZ2FyZGVkIGFzIA0KICAgICAgICAgICAgLy8gYmluYXJ5LCBpbiBvcmRlciB0byBwcm92b2tlIHRoZSBtb3N0IGNvbnNlcnZhdGl2ZSBTREsgYmVoYXZpb3JzIGFyb3VuZCANCiAgICAgICAgICAgIC8vIHJldHJpZXZpbmcgY29kZSBzbmlwcGV0cywgZXRjLg0KICAgICAgICAgICAgcmV0dXJuICFzX3RleHR1YWxNaW1lVHlwZXMuQ29udGFpbnMobWltZVR5cGUpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5PlRoZSBNSU1FIHR5cGUgdG8gdXNlIHdoZW4gbm8gYmV0dGVyIE1JTUUgdHlwZSBpcyBrbm93bi48L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgc3RyaW5nIERlZmF1bHQgPSBCaW5hcnk7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5PlRoZSBNSU1FIHR5cGUgZm9yIEMgYW5kIEMrKyBmaWxlcy48L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgc3RyaW5nIENwcCA9ICJ0ZXh0L3gtY3BwIjsNCiAgICAgICAgLy8vIC8vLyA8c3VtbWFyeT5UaGUgTUlNRSB0eXBlIGZvciBKYXZhIHNvdXJjZSBjb2RlIGZpbGVzLjwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBzdHJpbmcgSmF2YSA9ICJ0ZXh0L3gtamF2YS1zb3VyY2UiOw0KICAgICAgICAvLy8gPHN1bW1hcnk+VGhlIE1JTUUgdHlwZSBmb3IgYmluYXJpZXMuPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHN0cmluZyBCaW5hcnkgPSAiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtIjsNCiAgICAgICAgLy8vIDxzdW1tYXJ5PlRoZSBNSU1FIHR5cGUgZm9yIGRpcmVjdG9yaWVzLjwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBzdHJpbmcgRGlyZWN0b3J5ID0gImFwcGxpY2F0aW9uL3gtZGlyZWN0b3J5IjsNCiAgICAgICAgLy8vIDxzdW1tYXJ5PlRoZSBNSU1FIHR5cGUgdXNlZCBmb3IgQ1NoYXJwIGZpbGVzLjwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBzdHJpbmcgQ1NoYXJwID0gInRleHQveC1jc2hhcnAiOw0KICAgICAgICAvLy8gPHN1bW1hcnk+VGhlIE1JTUUgdHlwZSBmb3IgU0FSSUYgZmlsZXMuPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHN0cmluZyBTYXJpZiA9ICJhcHBsaWNhdGlvbi9zYXJpZi1qc29uIjsNCiAgICAgICAgLy8vIDxzdW1tYXJ5PlRoZSBNSU1FIHR5cGUgZm9yIEphdmEgcHJvcGVydGllcyBmaWxlcyAod2hpY2ggYXJlIHhtbCkuPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHN0cmluZyBKYXZhUHJvcGVydGllcyA9ICJ0ZXh0L3gtamF2YS1wcm9wZXJ0aWVzIjsNCg0KICAgICAgICBwcml2YXRlIHN0YXRpYyBib29sIEhhc0V4dGVuc2lvbihzdHJpbmcgZmlsZU5hbWUsIHN0cmluZyBleHRlbnNpb24pDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChleHRlbnNpb24uTGVuZ3RoICsgMSA+IGZpbGVOYW1lLkxlbmd0aCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAvLyBOb3QgbG9uZyBlbm91Z2gNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIENoZWNrIGZvciAnLicgd2l0aG91dCBhbGxvY2F0aW5nICIuIiArIGV4dGVuc2lvbg0KICAgICAgICAgICAgaW50IHNob3VsZEJlRG90SW5kZXggPSBmaWxlTmFtZS5MZW5ndGggLSBleHRlbnNpb24uTGVuZ3RoIC0gMTsNCiAgICAgICAgICAgIGlmIChmaWxlTmFtZVtzaG91bGRCZURvdEluZGV4XSAhPSAnLicpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgLy8gUGVyaW9kIG5vdCBpbiB0aGUgcmlnaHQgcGxhY2UuDQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gZmlsZU5hbWUuRW5kc1dpdGgoZXh0ZW5zaW9uLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWxJZ25vcmVDYXNlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIElFbnVtZXJhYmxlPEltbXV0YWJsZUFycmF5PEltbXV0YWJsZUFycmF5PHN0cmluZz4+PiBHZXRFeHRlbnNpb25zVGFibGVzKCkNCiAgICAgICAgew0KICAgICAgICAgICAgeWllbGQgcmV0dXJuIHNfdGV4dHVhbEV4dGVuc2lvbnNUYWJsZTsNCiAgICAgICAgICAgIHlpZWxkIHJldHVybiBzX2JpbmFyeUV4dGVuc2lvbnNUYWJsZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIEltbXV0YWJsZUhhc2hTZXQ8c3RyaW5nPiBJbml0aWFsaXplTWltZVR5cGVzU2V0KEltbXV0YWJsZUFycmF5PEltbXV0YWJsZUFycmF5PHN0cmluZz4+IGV4dGVuc2lvbnNUYWJsZSkNCiAgICAgICAgew0KICAgICAgICAgICAgdmFyIGJ1aWxkZXIgPSBJbW11dGFibGVIYXNoU2V0LkNyZWF0ZUJ1aWxkZXI8c3RyaW5nPigpOw0KICAgICAgICAgICAgZm9yZWFjaCAoSW1tdXRhYmxlQXJyYXk8c3RyaW5nPiB0YWJsZUVudHJ5IGluIGV4dGVuc2lvbnNUYWJsZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBidWlsZGVyLkFkZCh0YWJsZUVudHJ5WzBdKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLlRvSW1tdXRhYmxlSGFzaFNldDxzdHJpbmc+KCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHN0YXRpYyBJbW11dGFibGVIYXNoU2V0PHN0cmluZz4gc190ZXh0dWFsTWltZVR5cGVzOw0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEltbXV0YWJsZUFycmF5PEltbXV0YWJsZUFycmF5PHN0cmluZz4+IHNfdGV4dHVhbEV4dGVuc2lvbnNUYWJsZSA9IEltbXV0YWJsZUFycmF5LkNyZWF0ZSgNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC94LWJhdCIsICJiYXQiLCAiY21kIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoTWltZVR5cGUuQ3BwLCAiYyIsICJjcHAiLCAiaCIsICJocHAiLCAiY3h4IiwgLypTRFYgcnVsZSBmaWxlKi8gInNsaWMiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZShNaW1lVHlwZS5DU2hhcnAsICJjcyIpLA0KICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJ0ZXh0L2NvZmZlZXNjcmlwdCIsICJjb2ZmZWUiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC9jc3MiLCAiY3NzIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoInRleHQveC1mc2hhcnAiLCAiZnMiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC94LWhhbmRsZWJhcnMtdGVtcGxhdGUiLCAiaGFuZGxlYmFycyIpLA0KICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJ0ZXh0L2h0bWwiLCAiaHRtIiwgImh0bWwiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC94LWluaSIsICJpbmkiLCAiZ2l0Y29uZmlnIiwgInltbCIpLA0KICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJ0ZXh0L3gtamFkZSIsICJqYWRlIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoTWltZVR5cGUuSmF2YVByb3BlcnRpZXMsICJwcm9wZXJ0aWVzIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoInRleHQvamF2YXNjcmlwdCIsICJqcyIpLA0KICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJhcHBsaWNhdGlvbi9qc29uIiwgImpzb24iKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC9sZXNzIiwgImxlc3MiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC94LWx1YSIsICJsdWEiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC94LXdlYi1tYXJrZG93biIsICJtZCIsICJtYXJrZG93biIpLA0KICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJhcHBsaWNhdGlvbi94LXBocCIsICJwaHAiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC9wbGFpbiIsICJ0eHQiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC94LXBvd2Vyc2hlbGwiLCAicHMiLCAicHMxIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoInRleHQvcHl0aG9uIiwgInB5IiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoInRleHQveC1jc2h0bWwiLCAiY3NodG1sIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoInRleHQvcnVieSIsICJydWJ5IiwgImdlbXNwZWMiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZShNaW1lVHlwZS5TYXJpZiwgInNhcmlmIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoInRleHQvc2NzcyIsICJzY3NzIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoInRleHQveC1zcWwiLCAic3FsIiwgInRzcWwiKSwNCiAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgidGV4dC90eXBlc2NyaXB0IiwgInRzIiksDQogICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoInRleHQveC12YiIsICJ2YiIpLA0KICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJ0ZXh0L3htbCIsICJ4bWwiLCAiYXNjeCIsICJhc3B4IiwgImNzcHJvaiIsICJ4YW1sIiwgImR0ZCIsICJ4c2QiLCAidmN4cHJvaiIsICJ2YnByb2oiLCAid2l4cHJvaiIsICJqc3Byb2oiLCAicHJvaiIsICJ0YXJnZXRzIiwgInByb3BzIiwgImNvbmZpZyIpDQogICAgICAgICAgICApOw0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEltbXV0YWJsZUFycmF5PEltbXV0YWJsZUFycmF5PHN0cmluZz4+IHNfYmluYXJ5RXh0ZW5zaW9uc1RhYmxlID0gSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKA0KICAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZShNaW1lVHlwZS5KYXZhLCAiamF2YSIsICJqYXYiKSwNCiAgICAgICAgICAgICBJbW11dGFibGVBcnJheS5DcmVhdGUoImFwcGxpY2F0aW9uL2phdmEtYXJjaGl2ZSIsICJqYXIiKSwgICAgICAgICAgICAgDQogICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJhcHBsaWNhdGlvbi96aXAiLCAiemlwIiksDQogICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJhcHBsaWNhdGlvbi92bnMubXMtYXBweCIsICJhcHB4IiksDQogICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJhcHBsaWNhdGlvbi92bmQubXMtd29yZC5kb2N1bWVudCIsICJkb2N4IiksDQogICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJhcHBsaWNhdGlvbi92bmQubXMtd29yZC50ZW1wbGF0ZSIsICJkb3R4IiksDQogICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXkuQ3JlYXRlKCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwiLCAieGxzeCIpLA0KICAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQiLCAicHB0eCIpLA0KICAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgiYXBwbGljYXRpb24vdm5kLm1zLWNhYi1jb21wcmVzc2VkIiwgImNhYiIpLA0KICAgICAgICAgICAgIEltbXV0YWJsZUFycmF5LkNyZWF0ZSgiYXBwbGljYXRpb24vdm5kLm1zLXhwc2RvY3VtZW50IiwgInhwcyIpDQogICAgICAgICAgICAgKTsNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "7E5F1F023FDD060A1E721FDD65FE5FB9",
              "algorithm": "md5"
            },
            {
              "value": "382B2F2743508343C7D86234F3579BE17F91A335",
              "algorithm": "sha-1"
            },
            {
              "value": "DD2847887E3307FA4E769C5709EC60A56039CE8427523E5D5A8AB3B5F667CEE7",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/ResultLogJsonWriter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "FEC612921342BB5D0EB68744225DD48D",
              "algorithm": "md5"
            },
            {
              "value": "38377AF2BB80558EE13DA57F77CCDE17E43CCC2B",
              "algorithm": "sha-1"
            },
            {
              "value": "10F52AAF3272855AA08CF019EA1B33386E9820CF6A10F8AC83127B297D79031C",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/SarifLogger.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "C52026713C3429648AFD17539730D186",
              "algorithm": "md5"
            },
            {
              "value": "B1325BFED0C0696EE623FEFC129012B1B0190AA8",
              "algorithm": "sha-1"
            },
            {
              "value": "6942BE0CFD521073C65AC136EB83044BF086FD3D6B3006F3CD132AD6C26EB5BD",
              "algorithm": "sha-256"
            }
          ]
        },
        "#$(ProjectDir)#../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll": {
          "mimeType": "application/octet-stream"
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AggregatingLogger.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuRHJpdmVyDQp7DQogICAgcHVibGljIGNsYXNzIEFnZ3JlZ2F0aW5nTG9nZ2VyIDogSURpc3Bvc2FibGUsIElBbmFseXNpc0xvZ2dlcg0KICAgIHsNCiAgICAgICAgcHVibGljIEFnZ3JlZ2F0aW5nTG9nZ2VyKCkgOiB0aGlzKG51bGwpDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBBZ2dyZWdhdGluZ0xvZ2dlcihJRW51bWVyYWJsZTxJQW5hbHlzaXNMb2dnZXI+IGxvZ2dlcnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRoaXMuTG9nZ2VycyA9IGxvZ2dlcnMgIT0gbnVsbCA/DQogICAgICAgICAgICAgICAgbmV3IExpc3Q8SUFuYWx5c2lzTG9nZ2VyPihsb2dnZXJzKSA6DQogICAgICAgICAgICAgICAgbmV3IExpc3Q8SUFuYWx5c2lzTG9nZ2VyPigpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIElMaXN0PElBbmFseXNpc0xvZ2dlcj4gTG9nZ2VycyB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgRGlzcG9zZSgpDQogICAgICAgIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKElBbmFseXNpc0xvZ2dlciBsb2dnZXIgaW4gTG9nZ2VycykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB1c2luZyAobG9nZ2VyIGFzIElEaXNwb3NhYmxlKSB7IH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBBbmFseXNpc1N0YXJ0ZWQoKQ0KICAgICAgICB7DQogICAgICAgICAgICBmb3JlYWNoIChJQW5hbHlzaXNMb2dnZXIgbG9nZ2VyIGluIExvZ2dlcnMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgbG9nZ2VyLkFuYWx5c2lzU3RhcnRlZCgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgQW5hbHlzaXNTdG9wcGVkKFJ1bnRpbWVDb25kaXRpb25zIHJ1bnRpbWVDb25kaXRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICBmb3JlYWNoIChJQW5hbHlzaXNMb2dnZXIgbG9nZ2VyIGluIExvZ2dlcnMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgbG9nZ2VyLkFuYWx5c2lzU3RvcHBlZChydW50aW1lQ29uZGl0aW9ucyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBBbmFseXppbmdUYXJnZXQoSUFuYWx5c2lzQ29udGV4dCBjb250ZXh0KQ0KICAgICAgICB7DQogICAgICAgICAgICBmb3JlYWNoIChJQW5hbHlzaXNMb2dnZXIgbG9nZ2VyIGluIExvZ2dlcnMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgbG9nZ2VyLkFuYWx5emluZ1RhcmdldChjb250ZXh0KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyB2b2lkIExvZ01lc3NhZ2UoYm9vbCB2ZXJib3NlLCBzdHJpbmcgbWVzc2FnZSkNCiAgICAgICAgew0KICAgICAgICAgICAgZm9yZWFjaCAoSUFuYWx5c2lzTG9nZ2VyIGxvZ2dlciBpbiBMb2dnZXJzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGxvZ2dlci5Mb2dNZXNzYWdlKHZlcmJvc2UsIG1lc3NhZ2UpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgTG9nKElSdWxlIHJ1bGUsIFJlc3VsdCByZXN1bHQpDQogICAgICAgIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKElBbmFseXNpc0xvZ2dlciBsb2dnZXIgaW4gTG9nZ2VycykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBsb2dnZXIuTG9nKHJ1bGUsIHJlc3VsdCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBMb2dUb29sTm90aWZpY2F0aW9uKE5vdGlmaWNhdGlvbiBub3RpZmljYXRpb24pDQogICAgICAgIHsNCiAgICAgICAgICAgIGZvcmVhY2ggKElBbmFseXNpc0xvZ2dlciBsb2dnZXIgaW4gTG9nZ2VycykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBsb2dnZXIuTG9nVG9vbE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgTG9nQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbihOb3RpZmljYXRpb24gbm90aWZpY2F0aW9uKQ0KICAgICAgICB7DQogICAgICAgICAgICBmb3JlYWNoIChJQW5hbHlzaXNMb2dnZXIgbG9nZ2VyIGluIExvZ2dlcnMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgbG9nZ2VyLkxvZ0NvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24obm90aWZpY2F0aW9uKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "477A8267A3B752ADBBE09E15E45AED17",
              "algorithm": "md5"
            },
            {
              "value": "660E0FCEF6AC12FEA43AD3E95E5241B24A4E7276",
              "algorithm": "sha-1"
            },
            {
              "value": "2FA60A117943D3D2FC360856C099D734A8395FC64449FE41995451E5FE06C48E",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalysisContext.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/DQovLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24uDQoNCnVzaW5nIFN5c3RlbTsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuRHJpdmVyDQp7DQogICAgcHVibGljIGNsYXNzIEFuYWx5c2lzQ29udGV4dCA6IElBbmFseXNpc0NvbnRleHQNCiAgICB7DQogICAgICAgIHB1YmxpYyBFeGNlcHRpb24gVGFyZ2V0TG9hZEV4Y2VwdGlvbiB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIGJvb2wgSXNWYWxpZEFuYWx5c2lzVGFyZ2V0IHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBwdWJsaWMgSUFuYWx5c2lzTG9nZ2VyIExvZ2dlciB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIElSdWxlIFJ1bGUgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIHB1YmxpYyBQcm9wZXJ0aWVzRGljdGlvbmFyeSBQb2xpY3kgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIHB1YmxpYyBzdHJpbmcgTWltZVR5cGUgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIHB1YmxpYyBSdW50aW1lQ29uZGl0aW9ucyBSdW50aW1lRXJyb3JzIHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBwdWJsaWMgVXJpIFRhcmdldFVyaSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgRGlzcG9zZSgpIHsgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "002EF84EF2B303216D319E3AE60D0DEC",
              "algorithm": "md5"
            },
            {
              "value": "60F89C2E33195A9F1BAC1CCAE9534E6DA6D1756B",
              "algorithm": "sha-1"
            },
            {
              "value": "21B1A6B5CF98EC602E48232F4FF43B6B129129CACE2935D5F386D38421DC6EEA",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "A82CF1C6034692257B8844979888925E",
              "algorithm": "md5"
            },
            {
              "value": "0AB3C65E9962C34E429C617727484A4DED110B8B",
              "algorithm": "sha-1"
            },
            {
              "value": "0E75B82C8E413031980B28CDCCEDE3C52E9DB2FF5535EC7E90CC8F7CCFFE1438",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/ArgumentSplitter.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5UZXh0Ow0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Ecml2ZXINCnsNCiAgICAvLy8gPHN1bW1hcnk+VGhpcyBjbGFzcyBjb250YWlucyBhcmd1bWVudCBzcGxpdHRpbmcgZnVuY3Rpb25hbGl0eS48L3N1bW1hcnk+DQogICAgcHVibGljIHN0YXRpYyBjbGFzcyBBcmd1bWVudFNwbGl0dGVyDQogICAgew0KICAgICAgICBwcml2YXRlIGVudW0gV2hpdGVzcGFjZU1vZGUNCiAgICAgICAgew0KICAgICAgICAgICAgSWdub3JlLA0KICAgICAgICAgICAgUGFydE9mQXJndW1lbnQsDQogICAgICAgICAgICBFbmRBcmd1bWVudA0KICAgICAgICB9DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gTWltaWNzIENvbW1hbmRMaW5lVG9Bcmd2VydzIGFyZ3VtZW50IHNwbGl0dGluZyBiZWhhdmlvciwgcGx1cyBidWcgZml4ZXMuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iaW5wdXQiPlRoZSBjb21tYW5kIGxpbmUgdG8gc3BsaXQgaW50byBhcmd1bWVudHMuPC9wYXJhbT4NCiAgICAgICAgLy8vIDxyZXR1cm5zPlRoZSB2YWx1ZXMgb2YgdGhlIGFyZ3VtZW50cyBzdXBwbGllZCBpbiB0aGUgaW5wdXQuPC9yZXR1cm5zPg0KICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBDb21tYW5kTGluZVRvQXJndlcoc3RyaW5nIGlucHV0KQ0KICAgICAgICB7DQogICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIG1pbWljcyBDb21tYW5kTGluZVRvQXJndlcncyBlc2NhcGluZyBiZWhhdmlvciwgZG9jdW1lbnRlZCBoZXJlOg0KICAgICAgICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9iYjc3NjM5MS5hc3B4DQoNCiAgICAgICAgICAgIC8vDQogICAgICAgICAgICAvLyBXZSB1c2VkIHRvIFAvSW52b2tlIHRvIHRoZSByZWFsIENvbW1hbmRMaW5lVG9Bcmd2VywgYnV0IHJlLWltcGxlbWVudCBpdCBoZXJlDQogICAgICAgICAgICAvLyBhcyBhIHdvcmthcm91bmQgZm9yIHRoZSBmb2xsb3dpbmc6DQogICAgICAgICAgICAvLyANCiAgICAgICAgICAgIC8vICogQ29tbWFuZExpbmVUb0FyZ3ZXIGRvZXMgbm90IHRyZWF0IG5ld2xpbmVzIGFzIHdoaXRlc3BhY2UgKHR3Y3NlYy10ZnMwMSBidWcgIyAxNzI5MSkNCiAgICAgICAgICAgIC8vICogQ29tbWFuZExpbmVUb0FyZ3ZXIHJldHVybnMgdGhlIGV4ZWN1dGFibGUgbmFtZSBmb3IgdGhlIGVtcHR5IHN0cmluZywgbm90IHRoZSBlbXB0eSBzZXQNCiAgICAgICAgICAgIC8vICogQ29tbWFuZExpbmVUb0FyZ3ZXIGNob2tlcyBvbiBsZWFkaW5nIHdoaXRlc3BhY2UgKHR3Y3NlYy10ZnMwMSBidWcjIDE3Mzc4KQ0KICAgICAgICAgICAgLy8NCiAgICAgICAgICAgIC8vIGFuZCBhcyBhIHJlc3VsdCBvZiB0aGUgYWJvdmUgd2UgZXhwZWN0IHRvIGZpbmQgbW9yZSBuYXN0eSBlZGdlIGNhc2VzIGluIHRoZSBmdXR1cmUuDQogICAgICAgICAgICAvLw0KDQogICAgICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKCJpbnB1dCIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBXaGl0ZXNwYWNlTW9kZSB3aGl0ZXNwYWNlTW9kZSA9IFdoaXRlc3BhY2VNb2RlLklnbm9yZTsNCiAgICAgICAgICAgIGludCBzbGFzaENvdW50ID0gMDsNCg0KICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCiAgICAgICAgICAgIHZhciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7DQoNCiAgICAgICAgICAgIGZvcmVhY2ggKGNoYXIgYyBpbiBpbnB1dCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAod2hpdGVzcGFjZU1vZGUgPT0gV2hpdGVzcGFjZU1vZGUuSWdub3JlICYmIENoYXIuSXNXaGl0ZVNwYWNlKGMpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gUHVycG9zZWx5IGRvIG5vdGhpbmcNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAod2hpdGVzcGFjZU1vZGUgPT0gV2hpdGVzcGFjZU1vZGUuRW5kQXJndW1lbnQgJiYgQ2hhci5Jc1doaXRlU3BhY2UoYykpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBBZGRTbGFzaGVzKHNiLCByZWYgc2xhc2hDb3VudCk7DQogICAgICAgICAgICAgICAgICAgIEVtaXRBcmd1bWVudChyZXN1bHQsIHNiKTsNCiAgICAgICAgICAgICAgICAgICAgd2hpdGVzcGFjZU1vZGUgPSBXaGl0ZXNwYWNlTW9kZS5JZ25vcmU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGMgPT0gJ1xcJykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICsrc2xhc2hDb3VudDsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlc3BhY2VNb2RlID09IFdoaXRlc3BhY2VNb2RlLklnbm9yZSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVzcGFjZU1vZGUgPSBXaGl0ZXNwYWNlTW9kZS5FbmRBcmd1bWVudDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIGlmIChjID09ICdcIicpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBib29sIHF1b3RlSXNFc2NhcGVkID0gKHNsYXNoQ291bnQgJiAxKSA9PSAxOw0KICAgICAgICAgICAgICAgICAgICBzbGFzaENvdW50ID4+PSAxOyAvLyBVc2luZyA+PiB0byBhdm9pZCBDIyBiYW5rZXJzIHJvdW5kaW5nDQogICAgICAgICAgICAgICAgICAgIC8vIDJuIGJhY2tzbGFzaGVzIGZvbGxvd2VkIGJ5IGEgcXVvdGF0aW9uIG1hcmsgcHJvZHVjZSBuIHNsYXNoZXMgZm9sbG93ZWQgYnkgYSBxdW90YXRpb24gbWFyaw0KICAgICAgICAgICAgICAgICAgICBBZGRTbGFzaGVzKHNiLCByZWYgc2xhc2hDb3VudCk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKHF1b3RlSXNFc2NhcGVkKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBzYi5BcHBlbmQoYyk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAod2hpdGVzcGFjZU1vZGUgPT0gV2hpdGVzcGFjZU1vZGUuUGFydE9mQXJndW1lbnQpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VNb2RlID0gV2hpdGVzcGFjZU1vZGUuRW5kQXJndW1lbnQ7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlTW9kZSA9IFdoaXRlc3BhY2VNb2RlLlBhcnRPZkFyZ3VtZW50Ow0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIEFkZFNsYXNoZXMoc2IsIHJlZiBzbGFzaENvdW50KTsNCiAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKGMpOw0KICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVzcGFjZU1vZGUgPT0gV2hpdGVzcGFjZU1vZGUuSWdub3JlKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlTW9kZSA9IFdoaXRlc3BhY2VNb2RlLkVuZEFyZ3VtZW50Ow0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBBZGRTbGFzaGVzKHNiLCByZWYgc2xhc2hDb3VudCk7DQogICAgICAgICAgICBpZiAoc2IuTGVuZ3RoICE9IDApDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgRW1pdEFyZ3VtZW50KHJlc3VsdCwgc2IpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBFbWl0QXJndW1lbnQoTGlzdDxzdHJpbmc+IHJlc3VsdCwgU3RyaW5nQnVpbGRlciBzYikNCiAgICAgICAgew0KICAgICAgICAgICAgcmVzdWx0LkFkZChzYi5Ub1N0cmluZygpKTsNCiAgICAgICAgICAgIHNiLkNsZWFyKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIEFkZFNsYXNoZXMoU3RyaW5nQnVpbGRlciBzYiwgcmVmIGludCBzbGFzaENvdW50KQ0KICAgICAgICB7DQogICAgICAgICAgICBzYi5BcHBlbmQoJ1xcJywgc2xhc2hDb3VudCk7DQogICAgICAgICAgICBzbGFzaENvdW50ID0gMDsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "0878916455AC07A4502DC3456418451D",
              "algorithm": "md5"
            },
            {
              "value": "C9F3359CC12F91F95AB8043AB889662078171EA3",
              "algorithm": "sha-1"
            },
            {
              "value": "BE8F69C1F9F4A599B81B88B85577FC0D4B864A26E98D244067F7BF876E5EA974",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/DefaultDriverOptions.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuRHJpdmVyDQp7DQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyBPcHRpb25zIHRoYXQgY3V0IGFjcm9zcyBhbGwgcnVsZXMgdGhhdCBhcmUgcHJvdmlkZWQgYnkgYSBkcml2ZXIuIEN1cnJlbnRseSByZXN0cmljdGVkIHRvIGEgDQogICAgLy8vIHNpbmdsZSBzZXR0aW5nIHRoYXQgYWxsb3dzIGZvciBydWxlcyB0byBiZSBleHBsaWNpdGx5IGRpc2FibGVkLiBJbiB0aGUgZnV0dXJlLCB0aGlzIA0KICAgIC8vLyBzYW1lIG1lY2hhbmlzbSB3aWxsIGJlIGltcHJvdmVkIHRvIGFsbG93IGNvbmZpZ3VyYXRpb24gdG8gYWx0ZXIgdGhlIHdhcm5pbmcgbGV2ZWwNCiAgICAvLy8gZm9yIGEgcmVzdWx0Lg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgcHVibGljIGNsYXNzIERlZmF1bHREcml2ZXJPcHRpb25zIDogSU9wdGlvbnNQcm92aWRlcg0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBEZWZhdWx0RHJpdmVyT3B0aW9ucyBJbnN0YW5jZSA9IG5ldyBEZWZhdWx0RHJpdmVyT3B0aW9ucygpOw0KDQogICAgICAgIHByaXZhdGUgRGVmYXVsdERyaXZlck9wdGlvbnMoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBFbmFibGUgbmFtZXNwYWNlIGltcG9ydCBvcHRpbWl6YXRpb24uDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBzdGF0aWMgUGVyTGFuZ3VhZ2VPcHRpb248UnVsZUVuYWJsZWRTdGF0ZT4gUnVsZUVuYWJsZWQgeyBnZXQ7IH0gPQ0KICAgICAgICAgICAgbmV3IFBlckxhbmd1YWdlT3B0aW9uPFJ1bGVFbmFibGVkU3RhdGU+KA0KICAgICAgICAgICAgICAgIGZlYXR1cmU6ICJEZWZhdWx0RHJpdmVyT3B0aW9ucyIsIA0KICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVvZihSdWxlRW5hYmxlZCksIA0KICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4geyByZXR1cm4gUnVsZUVuYWJsZWRTdGF0ZS5EZWZhdWx0OyB9LA0KICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiANCiAgICAgICAgICAgICAgICBAIkVuYWJsZWQgc3RhdGUgb2YgcnVsZS4gVmFsaWQgdmFsdWVzOiBEZWZhdWx0LCBEaXNhYmxlZCwgV2FybmluZywgRXJyb3IuIEEgcnVsZSBpbiB0aGUgJ0RlZmF1bHQnICIgKyANCiAgICAgICAgICAgICAgICBAInN0YXRlIHdpbGwgcmFpc2UgYWxsIGlzc3VlcyBhcyBlcnJvcnMgb3Igd2FybmluZ3MgYWNjb3JkaW5nIHRvIGhvdyB0aGUgaXNzdWUgaXMgbG9nZ2VkLiIpOw0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgUGVyTGFuZ3VhZ2VPcHRpb248VD4gQ3JlYXRlUnVsZVNwZWNpZmljT3B0aW9uPFQ+KElSdWxlIHJ1bGUsIFBlckxhbmd1YWdlT3B0aW9uPFQ+IG9wdGlvbikNCiAgICAgICAgew0KICAgICAgICAgICAgLy8gVGhpcyBoZWxwZXIgcmV0dXJucyBhIGNvcHkgb2YgYSBydWxlIG9wdGlvbiB0aGF0IGlzIHF1YWxpZmllZCBieSBhIG5ldyBmZWF0dXJlIG5hbWUgY29uc3RydWN0ZWQNCiAgICAgICAgICAgIC8vIGZyb20gYW4gYXJiaXRyYXJ5IHJ1bGUgaW5zdGFuY2UuIFRoaXMgYWxsb3dzIHVzZXJzIHRvIGNyZWF0ZSBhIGdlbmVyaWMgcHJvcGVydHkgZGVzY3JpcHRvcg0KICAgICAgICAgICAgLy8gdGhhdCBpcyBmdXJ0aGVyIHF1YWxpZmllZCAoYnkgZmVhdHVyZSBuYW1lKSB0byBiZSBhc3NvY2lhdGVkIHdpdGggYSBkaWZmZXJlbnQgY2hlY2suDQogICAgICAgICAgICByZXR1cm4gbmV3IFBlckxhbmd1YWdlT3B0aW9uPFQ+KA0KICAgICAgICAgICAgICAgIGZlYXR1cmU6IHJ1bGUuSWQgKyAiLiIgKyBydWxlLk5hbWUuVGV4dCwNCiAgICAgICAgICAgICAgICBuYW1lOiBvcHRpb24uTmFtZSwNCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IG9wdGlvbi5EZWZhdWx0VmFsdWUsDQogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG9wdGlvbi5EZXNjcmlwdGlvbiApOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIElFbnVtZXJhYmxlPElPcHRpb24+IEdldE9wdGlvbnMoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbmV3IElPcHRpb25bXQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFJ1bGVFbmFibGVkDQogICAgICAgICAgICB9Ow0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "70B3E477CA39148CF072B9AE89ADBA4B",
              "algorithm": "md5"
            },
            {
              "value": "D958175FAC9675F4734ECE230DD503C5A19D7EFE",
              "algorithm": "sha-1"
            },
            {
              "value": "32EA2FB89C3345ED7706080296882DC415A0789DEC06A33CDE76F76A501D1F1B",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/DriverExtensionMethods.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLnVzaW5nIFN5c3RlbTsNCg0KdXNpbmcgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Xcml0ZXJzOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Ecml2ZXINCnsNCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIERyaXZlckV4dGVuc2lvbk1ldGhvZHMNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgTG9nZ2luZ09wdGlvbnMgQ29udmVydFRvTG9nZ2luZ09wdGlvbnModGhpcyBBbmFseXplT3B0aW9uc0Jhc2UgYW5hbHl6ZU9wdGlvbnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIExvZ2dpbmdPcHRpb25zIGxvZ2dpbmdPcHRpb25zID0gTG9nZ2luZ09wdGlvbnMuTm9uZTsNCg0KICAgICAgICAgICAgaWYgKGFuYWx5emVPcHRpb25zLlZlcmJvc2UpIHsgbG9nZ2luZ09wdGlvbnMgfD0gTG9nZ2luZ09wdGlvbnMuVmVyYm9zZTsgfQ0KICAgICAgICAgICAgaWYgKGFuYWx5emVPcHRpb25zLlByZXR0eVByaW50KSB7IGxvZ2dpbmdPcHRpb25zIHw9IExvZ2dpbmdPcHRpb25zLlByZXR0eVByaW50OyB9DQogICAgICAgICAgICBpZiAoYW5hbHl6ZU9wdGlvbnMuRm9yY2UpIHsgbG9nZ2luZ09wdGlvbnMgfD0gTG9nZ2luZ09wdGlvbnMuT3ZlcndyaXRlRXhpc3RpbmdPdXRwdXRGaWxlOyB9DQoNCiAgICAgICAgICAgIHJldHVybiBsb2dnaW5nT3B0aW9uczsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "8DCBF982C1AFDD37E51668D7AAED7D2D",
              "algorithm": "md5"
            },
            {
              "value": "E4240E9BECF3399C7A4C9C29C74FCF001BBEE78F",
              "algorithm": "sha-1"
            },
            {
              "value": "B6A8FDAD1C48655C27F6581D02C5E0865FDA906312FE754CEBE2A6702BEC7327",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/CompositionUtilities.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5JbW11dGFibGU7DQp1c2luZyBTeXN0ZW0uQ29tcG9zaXRpb24uQ29udmVudGlvbjsNCnVzaW5nIFN5c3RlbS5Db21wb3NpdGlvbi5Ib3N0aW5nOw0KdXNpbmcgU3lzdGVtLlJlZmxlY3Rpb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkRyaXZlcg0Kew0KICAgIGludGVybmFsIHN0YXRpYyBjbGFzcyBEcml2ZXJVdGlsaXRpZXMNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgSW1tdXRhYmxlQXJyYXk8VD4gR2V0RXhwb3J0czxUPihJRW51bWVyYWJsZTxBc3NlbWJseT4gYXNzZW1ibGllcykNCiAgICAgICAgew0KICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IENyZWF0ZUNvbXBvc2l0aW9uQ29udGFpbmVyPFQ+KGFzc2VtYmxpZXMpOw0KICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5HZXRFeHBvcnRzPFQ+KCkuVG9JbW11dGFibGVBcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgQ29tcG9zaXRpb25Ib3N0IENyZWF0ZUNvbXBvc2l0aW9uQ29udGFpbmVyPFQ+KElFbnVtZXJhYmxlPEFzc2VtYmx5PiBhc3NlbWJsaWVzKQ0KICAgICAgICB7DQogICAgICAgICAgICBDb252ZW50aW9uQnVpbGRlciBjb252ZW50aW9ucyA9IEdldENvbnZlbnRpb25zPFQ+KCk7DQoNCiAgICAgICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyQ29uZmlndXJhdGlvbigpDQogICAgICAgICAgICAgICAgLldpdGhBc3NlbWJsaWVzKGFzc2VtYmxpZXMsIGNvbnZlbnRpb25zKQ0KICAgICAgICAgICAgICAgIC5DcmVhdGVDb250YWluZXIoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIENvbnZlbnRpb25CdWlsZGVyIEdldENvbnZlbnRpb25zPFQ+KCkNCiAgICAgICAgew0KICAgICAgICAgICAgdmFyIGNvbnZlbnRpb25zID0gbmV3IENvbnZlbnRpb25CdWlsZGVyKCk7DQoNCiAgICAgICAgICAgIC8vIE5ldyBwZXItYW5hbHl6ZXIgb3B0aW9ucyBtZWNoYW5pc20gDQogICAgICAgICAgICBjb252ZW50aW9ucy5Gb3JUeXBlc0Rlcml2ZWRGcm9tPFQ+KCkNCiAgICAgICAgICAgICAgICAuRXhwb3J0PFQ+KCk7DQoNCiAgICAgICAgICAgIHJldHVybiBjb252ZW50aW9uczsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "4822A208FA68050764CD2975448549AE",
              "algorithm": "md5"
            },
            {
              "value": "B11EE77C180C8C1A0EAE298FE28BEC85CDA8862F",
              "algorithm": "sha-1"
            },
            {
              "value": "9F8D2C31CD778D3C26221FF8CD5F8D23173DFB8AFA1598E7D306667632CC64B1",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/EntryPointUtilities.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuRHJpdmVyDQp7DQogICAgcHVibGljIHN0YXRpYyBjbGFzcyBFbnRyeVBvaW50VXRpbGl0aWVzDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZ1tdIEdlbmVyYXRlQXJndW1lbnRzKA0KICAgICAgICAgICAgc3RyaW5nW10gYXJncywNCiAgICAgICAgICAgIElGaWxlU3lzdGVtIGZpbGVTeXN0ZW0sDQogICAgICAgICAgICBJRW52aXJvbm1lbnRWYXJpYWJsZXMgZW52aXJvbm1lbnRWYXJpYWJsZXMpDQogICAgICAgIHsNCiAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBleHBhbmRlZEFyZ3VtZW50cyA9IG5ldyBMaXN0PHN0cmluZz4oKTsNCg0KICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIGFyZ3VtZW50IGluIGFyZ3MpDQogICAgICAgICAgICB7DQoNCiAgICAgICAgICAgICAgICBpZiAoIUlzUmVzcG9uc2VGaWxlQXJndW1lbnQoYXJndW1lbnQpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRBcmd1bWVudHMuQWRkKGFyZ3VtZW50KTsNCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgc3RyaW5nIHJlc3BvbnNlRmlsZSA9IGFyZ3VtZW50LlRyaW0oJyInKS5TdWJzdHJpbmcoMSk7DQoNCiAgICAgICAgICAgICAgICByZXNwb25zZUZpbGUgPSBlbnZpcm9ubWVudFZhcmlhYmxlcy5FeHBhbmRFbnZpcm9ubWVudFZhcmlhYmxlcyhyZXNwb25zZUZpbGUpOw0KICAgICAgICAgICAgICAgIHJlc3BvbnNlRmlsZSA9IGZpbGVTeXN0ZW0uR2V0RnVsbFBhdGgocmVzcG9uc2VGaWxlKTsNCg0KICAgICAgICAgICAgICAgIHN0cmluZ1tdIHJlc3BvbnNlRmlsZUxpbmVzID0gZmlsZVN5c3RlbS5SZWFkQWxsTGluZXMocmVzcG9uc2VGaWxlKTsNCg0KICAgICAgICAgICAgICAgIEV4cGFuZFJlc3BvbnNlRmlsZShyZXNwb25zZUZpbGVMaW5lcywgZXhwYW5kZWRBcmd1bWVudHMpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gZXhwYW5kZWRBcmd1bWVudHMuVG9BcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgYm9vbCBJc1Jlc3BvbnNlRmlsZUFyZ3VtZW50KHN0cmluZyBhcmd1bWVudCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50WzBdID09ICdAJyAmJiBhcmd1bWVudC5MZW5ndGggPiAxOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBFeHBhbmRSZXNwb25zZUZpbGUoc3RyaW5nW10gcmVzcG9uc2VGaWxlTGluZXMsIExpc3Q8c3RyaW5nPiBleHBhbmRlZEFyZ3VtZW50cykNCiAgICAgICAgew0KICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIHJlc3BvbnNlRmlsZUxpbmUgaW4gcmVzcG9uc2VGaWxlTGluZXMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaW50IGFyZ3VtZW50Q291bnQ7DQogICAgICAgICAgICAgICAgSW50UHRyIHBvaW50ZXI7DQoNCiAgICAgICAgICAgICAgICBwb2ludGVyID0gQ29tbWFuZExpbmVUb0FyZ3ZXKHJlc3BvbnNlRmlsZUxpbmUuVHJpbSgpLCBvdXQgYXJndW1lbnRDb3VudCk7DQoNCiAgICAgICAgICAgICAgICBpZiAocG9pbnRlciA9PSBJbnRQdHIuWmVybykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9uKCJDb3VsZCBub3QgcGFyc2UgcmVzcG9uc2UgZmlsZSBsaW5lOiIgKyByZXNwb25zZUZpbGVMaW5lKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIC8vIENvcHkgZWFjaCBvZiB0aGVzZSBzdHJpbmdzIGludG8gb3VyIHNwbGl0IGFyZ3VtZW50IGFycmF5Lg0KICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50Q291bnQ7IGkrKykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRBcmd1bWVudHMuQWRkKE1hcnNoYWwuUHRyVG9TdHJpbmdVbmkoTWFyc2hhbC5SZWFkSW50UHRyKHBvaW50ZXIsIGkgKiBJbnRQdHIuU2l6ZSkpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGZpbmFsbHkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIExvY2FsRnJlZShwb2ludGVyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBbRGxsSW1wb3J0KCJzaGVsbDMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBzdGF0aWMgZXh0ZXJuIEludFB0ciBDb21tYW5kTGluZVRvQXJndlcoW01hcnNoYWxBcyhVbm1hbmFnZWRUeXBlLkxQV1N0cildIHN0cmluZyBscENtZExpbmUsIG91dCBpbnQgcE51bUFyZ3MpOw0KDQogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIpXQ0KICAgICAgICBzdGF0aWMgZXh0ZXJuIEludFB0ciBMb2NhbEZyZWUoSW50UHRyIGhNZW0pOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "323D62D39303E72A09BCCE37667B4D66",
              "algorithm": "md5"
            },
            {
              "value": "96CAEE925D7966407E28E38FF6D762913729E5CE",
              "algorithm": "sha-1"
            },
            {
              "value": "CD3071E51C16BBBC184F4135B63A78D4EA31792E16584EA36BFDF993E5575A24",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportConfigurationCommandBase.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5JbW11dGFibGU7DQp1c2luZyBTeXN0ZW0uSU87DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkRyaXZlcg0Kew0KICAgIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBFeHBvcnRDb25maWd1cmF0aW9uQ29tbWFuZEJhc2UgOiBQbHVnSW5Ecml2ZXJDb21tYW5kPEV4cG9ydENvbmZpZ3VyYXRpb25PcHRpb25zPg0KICAgIHsNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIGludCBSdW4oRXhwb3J0Q29uZmlndXJhdGlvbk9wdGlvbnMgZXhwb3J0T3B0aW9ucykNCiAgICAgICAgew0KICAgICAgICAgICAgaW50IHJlc3VsdCA9IEZBSUxVUkU7DQoNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFByb3BlcnRpZXNEaWN0aW9uYXJ5IGFsbE9wdGlvbnMgPSBuZXcgUHJvcGVydGllc0RpY3Rpb25hcnkoKTsNCg0KICAgICAgICAgICAgICAgIC8vIFRoZSBleHBvcnQgY29tbWFuZCBjb3VsZCBiZSB1cGRhdGVkIGluIHRoZSBmdXR1cmUgdG8gYWNjZXB0IGFuIGFyYml0cmFyeSBzZXQNCiAgICAgICAgICAgICAgICAvLyBvZiBhbmFseXplcnMgZm9yIHdoaWNoIHRvIGJ1aWxkIGFuIG9wdGlvbnMgWE1MIGZpbGUgc3VpdGFibGUgZm9yIGNvbmZpZ3VyaW5nIHRoZW0uDQogICAgICAgICAgICAgICAgSW1tdXRhYmxlQXJyYXk8SU9wdGlvbnNQcm92aWRlcj4gcHJvdmlkZXJzID0gRHJpdmVyVXRpbGl0aWVzLkdldEV4cG9ydHM8SU9wdGlvbnNQcm92aWRlcj4oRGVmYXVsdFBsdWdJbkFzc2VtYmxpZXMpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKElPcHRpb25zUHJvdmlkZXIgcHJvdmlkZXIgaW4gcHJvdmlkZXJzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgSU9wdGlvbiBzYW1wbGVPcHRpb24gPSBudWxsOw0KDQogICAgICAgICAgICAgICAgICAgIC8vIEV2ZXJ5IGFuYWx5c2lzIG9wdGlvbnMgcHJvdmlkZXIgaGFzIGFjY2VzcyB0byB0aGUgZm9sbG93aW5nIGRlZmF1bHQgY29uZmlndXJhdGlvbiBrbm9icw0KICAgICAgICAgICAgICAgICAgICBmb3JlYWNoIChJT3B0aW9uIG9wdGlvbiBpbiBwcm92aWRlci5HZXRPcHRpb25zKCkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZU9wdGlvbiA9IHNhbXBsZU9wdGlvbiA/PyBvcHRpb247DQogICAgICAgICAgICAgICAgICAgICAgICBhbGxPcHRpb25zLlNldFByb3BlcnR5KG9wdGlvbiwgb3B0aW9uLkRlZmF1bHRWYWx1ZSwgY2FjaGVEZXNjcmlwdGlvbjogdHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBJRW51bWVyYWJsZTxJUnVsZT4gcnVsZXM7DQogICAgICAgICAgICAgICAgcnVsZXMgPSBEcml2ZXJVdGlsaXRpZXMuR2V0RXhwb3J0czxJUnVsZT4oRGVmYXVsdFBsdWdJbkFzc2VtYmxpZXMpOw0KDQogICAgICAgICAgICAgICAgLy8gVGhpcyBjb2RlIGluamVjdHMgcHJvcGVydGllcyB0aGF0IGFyZSBwcm92aWRlZCBmb3IgZXZlcnkgcnVsZSBpbnN0YW5jZS4NCiAgICAgICAgICAgICAgICBmb3JlYWNoIChJUnVsZSBydWxlIGluIHJ1bGVzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0IG9iamVjdFJlc3VsdDsNCiAgICAgICAgICAgICAgICAgICAgUHJvcGVydGllc0RpY3Rpb25hcnkgcHJvcGVydGllczsNCg0KICAgICAgICAgICAgICAgICAgICBzdHJpbmcgcnVsZU9wdGlvbnNLZXkgPSBydWxlLklkICsgIi4iICsgcnVsZS5OYW1lLlRleHQgKyAiLk9wdGlvbnMiOw0KDQogICAgICAgICAgICAgICAgICAgIGlmICghYWxsT3B0aW9ucy5UcnlHZXRWYWx1ZShydWxlT3B0aW9uc0tleSwgb3V0IG9iamVjdFJlc3VsdCkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdFJlc3VsdCA9IGFsbE9wdGlvbnNbcnVsZU9wdGlvbnNLZXldID0gbmV3IFByb3BlcnRpZXNEaWN0aW9uYXJ5KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IChQcm9wZXJ0aWVzRGljdGlvbmFyeSlvYmplY3RSZXN1bHQ7DQoNCiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoSU9wdGlvbiBvcHRpb24gaW4gRGVmYXVsdERyaXZlck9wdGlvbnMuSW5zdGFuY2UuR2V0T3B0aW9ucygpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLlNldFByb3BlcnR5KG9wdGlvbiwgb3B0aW9uLkRlZmF1bHRWYWx1ZSwgY2FjaGVEZXNjcmlwdGlvbjogdHJ1ZSwgcGVyc2lzdFRvU2V0dGluZ3NDb250YWluZXIgOiBmYWxzZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBzdHJpbmcgZXh0ZW5zaW9uID0gUGF0aC5HZXRFeHRlbnNpb24oZXhwb3J0T3B0aW9ucy5PdXRwdXRGaWxlUGF0aCk7DQoNCiAgICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9uLkVxdWFscygiLnhtbCIsIFN0cmluZ0NvbXBhcmlzb24uT3JkaW5hbElnbm9yZUNhc2UpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgYWxsT3B0aW9ucy5TYXZlVG9YbWwoZXhwb3J0T3B0aW9ucy5PdXRwdXRGaWxlUGF0aCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV4dGVuc2lvbi5FcXVhbHMoIi5qc29uIiwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsSWdub3JlQ2FzZSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhbGxPcHRpb25zLlNhdmVUb0pzb24oZXhwb3J0T3B0aW9ucy5PdXRwdXRGaWxlUGF0aCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV4cG9ydE9wdGlvbnMuRmlsZUZvcm1hdCA9PSBGaWxlRm9ybWF0LlhtbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGFsbE9wdGlvbnMuU2F2ZVRvWG1sKGV4cG9ydE9wdGlvbnMuT3V0cHV0RmlsZVBhdGgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBhbGxPcHRpb25zLlNhdmVUb0pzb24oZXhwb3J0T3B0aW9ucy5PdXRwdXRGaWxlUGF0aCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIkNvbmZpZ3VyYXRpb24gZmlsZSBzYXZlZCB0bzogIiArIFBhdGguR2V0RnVsbFBhdGgoZXhwb3J0T3B0aW9ucy5PdXRwdXRGaWxlUGF0aCkpOw0KDQogICAgICAgICAgICAgICAgcmVzdWx0ID0gU1VDQ0VTUzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZXgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgQ29uc29sZS5FcnJvci5Xcml0ZUxpbmUoZXguVG9TdHJpbmcoKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "315EA2F57966C4D1464D316331358E2C",
              "algorithm": "md5"
            },
            {
              "value": "DD987B2260A3D32EE42FAEFF52F9EF2AEDE3076B",
              "algorithm": "sha-1"
            },
            {
              "value": "4767276940B2578A358260E08CBD93EA6607465D7167D9D9BE879587536B38B1",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "F3A534B006E2BA051FD12F236AC706E7",
              "algorithm": "md5"
            },
            {
              "value": "47D12D0AA6311D7055FADDA419C81EA0F4EE29E8",
              "algorithm": "sha-1"
            },
            {
              "value": "51711FF650F4050A869EB13D6261CFE4A1D1B99BA815ACF431AE3AC52248F11D",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/FileSpecifier.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5JTzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuRHJpdmVyDQp7DQogICAgcHVibGljIGNsYXNzIEZpbGVTcGVjaWZpZXINCiAgICB7DQogICAgICAgIHB1YmxpYyBGaWxlU3BlY2lmaWVyKHN0cmluZyBzcGVjaWZpZXIsIGJvb2wgcmVjdXJzZSA9IGZhbHNlKQ0KICAgICAgICB7DQogICAgICAgICAgICBfcmVjdXJzZSA9IHJlY3Vyc2U7DQogICAgICAgICAgICBfc3BlY2lmaWVyID0gc3BlY2lmaWVyOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBib29sIF9yZWN1cnNlOw0KICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0cmluZyBfc3BlY2lmaWVyOw0KICAgICAgICBwcml2YXRlIExpc3Q8c3RyaW5nPiBfZmlsZXM7DQogICAgICAgIHByaXZhdGUgTGlzdDxzdHJpbmc+IF9kaXJlY3RvcmllczsNCg0KICAgICAgICBwdWJsaWMgSUxpc3Q8c3RyaW5nPiBGaWxlcw0KICAgICAgICB7DQogICAgICAgICAgICBnZXQgeyByZXR1cm4gX2ZpbGVzID8/IEJ1aWxkRmlsZXMoKTsgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIElMaXN0PHN0cmluZz4gRGlyZWN0b3JpZXMNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIF9kaXJlY3RvcmllcyA/PyBCdWlsZERpcmVjdG9yaWVzKCk7IH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgTGlzdDxzdHJpbmc+IEJ1aWxkRGlyZWN0b3JpZXMoKQ0KICAgICAgICB7DQogICAgICAgICAgICBCdWlsZEZpbGVzQW5kRGlyZWN0b3JpZXNMaXN0KCk7DQogICAgICAgICAgICByZXR1cm4gX2RpcmVjdG9yaWVzOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBMaXN0PHN0cmluZz4gQnVpbGRGaWxlcygpDQogICAgICAgIHsNCiAgICAgICAgICAgIEJ1aWxkRmlsZXNBbmREaXJlY3Rvcmllc0xpc3QoKTsNCiAgICAgICAgICAgIHJldHVybiBfZmlsZXM7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgQnVpbGRGaWxlc0FuZERpcmVjdG9yaWVzTGlzdCgpDQogICAgICAgIHsNCiAgICAgICAgICAgIHN0cmluZyBleHBhbmRlZFNwZWNpZmllcjsNCg0KICAgICAgICAgICAgX2ZpbGVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KICAgICAgICAgICAgX2RpcmVjdG9yaWVzID0gbmV3IExpc3Q8c3RyaW5nPigpOw0KDQogICAgICAgICAgICBleHBhbmRlZFNwZWNpZmllciA9IEVudmlyb25tZW50LkV4cGFuZEVudmlyb25tZW50VmFyaWFibGVzKF9zcGVjaWZpZXIpOw0KDQogICAgICAgICAgICBzdHJpbmcgZmlsdGVyID0gUGF0aC5HZXRGaWxlTmFtZShleHBhbmRlZFNwZWNpZmllcik7DQogICAgICAgICAgICBzdHJpbmcgZGlyZWN0b3J5ID0gUGF0aC5HZXREaXJlY3RvcnlOYW1lKGV4cGFuZGVkU3BlY2lmaWVyKTsNCg0KICAgICAgICAgICAgaWYgKGRpcmVjdG9yeS5MZW5ndGggPT0gMCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBkaXJlY3RvcnkgPSBAIi5cIjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgQWRkRmlsZXNGcm9tRGlyZWN0b3J5KGRpcmVjdG9yeSwgZmlsdGVyKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBBZGRGaWxlc0Zyb21EaXJlY3Rvcnkoc3RyaW5nIGRpciwgc3RyaW5nIGZpbHRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKERpcmVjdG9yeS5FeGlzdHMoZGlyKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgZmlsZSBpbiBEaXJlY3RvcnkuR2V0RmlsZXMoZGlyLCBmaWx0ZXIpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgQWRkRmlsZVRvTGlzdChmaWxlKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAoX3JlY3Vyc2UpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIHN1YmRpciBpbiBEaXJlY3RvcnkuR2V0RGlyZWN0b3JpZXMoZGlyKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZGRGaWxlc0Zyb21EaXJlY3Rvcnkoc3ViZGlyLCBmaWx0ZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGNhdGNoIChVbmF1dGhvcml6ZWRBY2Nlc3NFeGNlcHRpb24pDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnNvbGUuRXJyb3IuV3JpdGVMaW5lQXN5bmMoIlVuYXV0aG9yaXplZCBhY2Nlc3MgZXhjZXB0aW9uIGZvciBkaXJlY3Rvcnk6ICIgKyBkaXIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSB2b2lkIEFkZEZpbGVUb0xpc3Qoc3RyaW5nIGV4cGFuZGVkU3BlY2lmaWVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBfZmlsZXMuQWRkKFBhdGguR2V0RnVsbFBhdGgoZXhwYW5kZWRTcGVjaWZpZXIpKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "4FBE119755A1FAF6B3C50D1A3CC09490",
              "algorithm": "md5"
            },
            {
              "value": "987003D0A847B66E744143AC195E5966195343C7",
              "algorithm": "sha-1"
            },
            {
              "value": "1681F40BB1D0419DA0C477C5F2705FCCD08078CD07977AF37D435DFBF8DFA6E7",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/PlugInDriverCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5SZWZsZWN0aW9uOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5Ecml2ZXINCnsNCiAgICBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgUGx1Z0luRHJpdmVyQ29tbWFuZDxUPiA6IERyaXZlckNvbW1hbmQ8VD4NCiAgICB7DQogICAgICAgIHB1YmxpYyB2aXJ0dWFsIElFbnVtZXJhYmxlPEFzc2VtYmx5PiBEZWZhdWx0UGx1Z0luQXNzZW1ibGllcw0KICAgICAgICB7DQogICAgICAgICAgICBnZXQgeyByZXR1cm4gbnVsbDsgfQ0KICAgICAgICAgICAgc2V0IHsgdGhyb3cgbmV3IEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24oKTsgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGFic3RyYWN0IHN0cmluZyBQcmVyZWxlYXNlIHsgZ2V0OyB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "EFC732551C16AAEEDCB4FB47E49FAE62",
              "algorithm": "md5"
            },
            {
              "value": "306374909D562B7E608ADD655E3D038B111E3B3D",
              "algorithm": "sha-1"
            },
            {
              "value": "68C91CCB24A7C3E7F7E4952F6CA126FF9BC99A621DD3634B1096C7D456E9A3C9",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkRyaXZlcg0Kew0KICAgIHB1YmxpYyBjbGFzcyBTdGF0aXN0aWNzTG9nZ2VyIDogSUFuYWx5c2lzTG9nZ2VyDQogICAgew0KICAgICAgICBwcml2YXRlIFN0b3B3YXRjaCBfc3RvcHdhdGNoOw0KICAgICAgICBwcml2YXRlIGxvbmcgX3RhcmdldHNDb3VudDsNCiAgICAgICAgcHJpdmF0ZSBsb25nIF9pbnZhbGlkVGFyZ2V0c0NvdW50Ow0KDQogICAgICAgIHB1YmxpYyBTdGF0aXN0aWNzTG9nZ2VyKCkNCiAgICAgICAgew0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgQW5hbHlzaXNTdGFydGVkKCkNCiAgICAgICAgew0KICAgICAgICAgICAgX3N0b3B3YXRjaCA9IFN0b3B3YXRjaC5TdGFydE5ldygpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgQW5hbHlzaXNTdG9wcGVkKFJ1bnRpbWVDb25kaXRpb25zIHJ1bnRpbWVDb25kaXRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgpOw0KICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIiMgdmFsaWQgdGFyZ2V0czogIiArIF90YXJnZXRzQ291bnQuVG9TdHJpbmcoKSk7DQogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiIyBpbnZhbGlkIHRhcmdldHM6ICIgKyBfaW52YWxpZFRhcmdldHNDb3VudC5Ub1N0cmluZygpKTsNCiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJUaW1lIGVsYXBzZWQ6ICIgKyBfc3RvcHdhdGNoLkVsYXBzZWQuVG9TdHJpbmcoKSk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBBbmFseXppbmdUYXJnZXQoSUFuYWx5c2lzQ29udGV4dCBjb250ZXh0KQ0KICAgICAgICB7DQogICAgICAgICAgICBfdGFyZ2V0c0NvdW50Kys7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBMb2coSVJ1bGUgcnVsZSwgUmVzdWx0IHJlc3VsdCkNCiAgICAgICAgew0KICAgICAgICAgICAgTG9nKHJlc3VsdC5MZXZlbCwgcmVzdWx0LlJ1bGVJZCk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBMb2dUb29sTm90aWZpY2F0aW9uKE5vdGlmaWNhdGlvbiBub3RpZmljYXRpb24pDQogICAgICAgIHsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyB2b2lkIExvZ0NvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24oTm90aWZpY2F0aW9uIG5vdGlmaWNhdGlvbikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbi5JZCA9PSBXYXJuaW5ncy5Xcm45OTdfSW52YWxpZFRhcmdldCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBfaW52YWxpZFRhcmdldHNDb3VudCsrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgTG9nTWVzc2FnZShib29sIHZlcmJvc2UsIHN0cmluZyBtZXNzYWdlKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBMb2coUmVzdWx0TGV2ZWwgbGV2ZWwsIHN0cmluZyBydWxlSWQpDQogICAgICAgIHsNCiAgICAgICAgICAgIHN3aXRjaCAobGV2ZWwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgY2FzZSBSZXN1bHRMZXZlbC5QYXNzOg0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgIGNhc2UgUmVzdWx0TGV2ZWwuRXJyb3I6DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICAgICAgY2FzZSBSZXN1bHRMZXZlbC5XYXJuaW5nOg0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgIGNhc2UgUmVzdWx0TGV2ZWwuTm90QXBwbGljYWJsZToNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbigpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgRGlzcG9zZSgpDQogICAgICAgIHsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "DF87300DA72F4E03DA0FF4287216F0E3",
              "algorithm": "md5"
            },
            {
              "value": "0287101A9B9092B73EC71DD7CE1CD89607685970",
              "algorithm": "sha-1"
            },
            {
              "value": "99F87598447ED0DF3878137AE69873CFE3E4D15A38F3806D97ECFB76B4842561",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/FileStreamExtensionMethods.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uSU87DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzRHJpdmVyDQp7DQogICAgcHVibGljIHN0YXRpYyBjbGFzcyBGaWxlU3RyZWFtRXh0ZW5zaW9uTWV0aG9kcw0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgUmVhZFN0cmluZyh0aGlzIEZpbGVTdHJlYW0gc3RyZWFtLCBpbnQgcGFkVG8pDQogICAgICAgIHsNCiAgICAgICAgICAgIGxvbmcgc3RhcnRQb3NpdGlvbiA9IHN0cmVhbS5Qb3NpdGlvbjsNCg0KICAgICAgICAgICAgaW50IGJ5dGVSZWFkOw0KICAgICAgICAgICAgaW50IGJ5dGVDb3VudCA9IDA7DQoNCiAgICAgICAgICAgIHdoaWxlICgoYnl0ZVJlYWQgPSBzdHJlYW0uUmVhZEJ5dGUoKSkgPiAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGJ5dGVDb3VudCsrOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgc3RyZWFtLlNlZWsoc3RhcnRQb3NpdGlvbiwgU2Vla09yaWdpbi5CZWdpbik7DQogICAgICAgICAgICBieXRlW10gYWJTdHJpbmcgPSBzdHJlYW0uUmVhZFRvQXJyYXkoYnl0ZUNvdW50KTsNCg0KICAgICAgICAgICAgaW50IHBhZGRpbmcgPSBwYWRUbyAtIChieXRlQ291bnQgKyAxKSAlIHBhZFRvOw0KICAgICAgICAgICAgaWYgKHBhZGRpbmcgPiAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0cmVhbS5TZWVrKHBhZGRpbmcgKyAxLCBTZWVrT3JpZ2luLkN1cnJlbnQpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gU3lzdGVtLlRleHQuRW5jb2RpbmcuVVRGOC5HZXRTdHJpbmcoYWJTdHJpbmcpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBVSW50MTYgUmVhZFVJbnQxNih0aGlzIEZpbGVTdHJlYW0gc3RyZWFtKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gQml0Q29udmVydGVyLlRvVUludDE2KHN0cmVhbS5SZWFkVG9BcnJheSgyKSwgMCk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIEludDMyIFJlYWRJbnQzMih0aGlzIEZpbGVTdHJlYW0gc3RyZWFtKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gQml0Q29udmVydGVyLlRvSW50MzIoc3RyZWFtLlJlYWRUb0FycmF5KDQpLCAwKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgSW50NjQgUmVhZEludDY0KHRoaXMgRmlsZVN0cmVhbSBzdHJlYW0pDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBCaXRDb252ZXJ0ZXIuVG9JbnQ2NChzdHJlYW0uUmVhZFRvQXJyYXkoOCksIDApOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBieXRlW10gUmVhZFRvQXJyYXkodGhpcyBGaWxlU3RyZWFtIHN0cmVhbSwgaW50IGxlbmd0aCkNCiAgICAgICAgew0KICAgICAgICAgICAgYnl0ZVtdIGJ5dGVzID0gbmV3IGJ5dGVbbGVuZ3RoXTsNCiAgICAgICAgICAgIGludCBkYXRhUmVhZCA9IHN0cmVhbS5SZWFkKGJ5dGVzLCAwLCBsZW5ndGgpOw0KICAgICAgICAgICAgaWYgKGRhdGFSZWFkICE9IGxlbmd0aCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGFFeGNlcHRpb24oIkludmFsaWQgZGF0YSBsZW5ndGggcmVhZC4gRXhwZWN0ZWQgIiArIGxlbmd0aCArICIgcmVhZCAiICsgZGF0YVJlYWQpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gYnl0ZXM7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "CF395E762EDAF2473EB23F853F1BC5F1",
              "algorithm": "md5"
            },
            {
              "value": "11896D73D0548CA253653CFF3C7A0ECB62697640",
              "algorithm": "sha-1"
            },
            {
              "value": "682095ADA3FB093A8020EEA66F56766A417DAE3039D5729F7AF6761A9AC670BC",
              "algorithm": "sha-256"
            }
          ]
        },
        "#$(ProjectDir)#../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe": {
          "mimeType": "application/octet-stream"
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/AbsoluteUriCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5JTzsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUHJvY2Vzc29yczsNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sDQp7DQogICAgaW50ZXJuYWwgc3RhdGljIGNsYXNzIEFic29sdXRlVXJpQ29tbWFuZA0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgUnVuKEFic29sdXRlVXJpT3B0aW9ucyBhYnNvbHV0ZVVyaU9wdGlvbnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBzYXJpZkZpbGVzID0gR2V0U2FyaWZGaWxlcyhhYnNvbHV0ZVVyaU9wdGlvbnMpOw0KDQogICAgICAgICAgICAgICAgRGlyZWN0b3J5LkNyZWF0ZURpcmVjdG9yeShhYnNvbHV0ZVVyaU9wdGlvbnMuT3V0cHV0Rm9sZGVyUGF0aCk7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHNhcmlmTG9nIGluIHNhcmlmRmlsZXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBzYXJpZkxvZy5Mb2cgPSBzYXJpZkxvZy5Mb2cuTWFrZVVyaXNBYnNvbHV0ZSgpOw0KDQogICAgICAgICAgICAgICAgICAgIC8vIFdyaXRlIG91dHB1dCB0byBmaWxlLg0KICAgICAgICAgICAgICAgICAgICBzdHJpbmcgb3V0cHV0TmFtZSA9IHNhcmlmTG9nLkdldE91dHB1dEZpbGVOYW1lKGFic29sdXRlVXJpT3B0aW9ucyk7DQogICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0aW5nID0gYWJzb2x1dGVVcmlPcHRpb25zLlByZXR0eVByaW50DQogICAgICAgICAgICAgICAgICAgICAgICA/IEZvcm1hdHRpbmcuSW5kZW50ZWQNCiAgICAgICAgICAgICAgICAgICAgICAgIDogRm9ybWF0dGluZy5Ob25lOw0KDQogICAgICAgICAgICAgICAgICAgIE11bHRpdG9vbEZpbGVIZWxwZXJzLldyaXRlU2FyaWZGaWxlKHNhcmlmTG9nLkxvZywgb3V0cHV0TmFtZSwgZm9ybWF0dGluZyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBleCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShleCk7DQogICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgSUVudW1lcmFibGU8QWJzb2x1dGVVcmlGaWxlPiBHZXRTYXJpZkZpbGVzKEFic29sdXRlVXJpT3B0aW9ucyBhYnNvbHV0ZVVyaU9wdGlvbnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vIEdldCBmaWxlcyBuYW1lcyBmaXJzdCwgYXMgd2UgbWF5IHdyaXRlIG1vcmUgc2FyaWYgbG9ncyB0byB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgd2UgcmViYXNlIHRoZW0uDQogICAgICAgICAgICBIYXNoU2V0PHN0cmluZz4gZmlsZU5hbWVzID0gTXVsdGl0b29sRmlsZUhlbHBlcnMuQ3JlYXRlVGFyZ2V0c1NldChhYnNvbHV0ZVVyaU9wdGlvbnMuVGFyZ2V0RmlsZVNwZWNpZmllcnMsIGFic29sdXRlVXJpT3B0aW9ucy5SZWN1cnNlKTsNCiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBmaWxlIGluIGZpbGVOYW1lcykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB5aWVsZCByZXR1cm4gbmV3IEFic29sdXRlVXJpRmlsZSgpIHsgRmlsZU5hbWUgPSBmaWxlLCBMb2cgPSBNdWx0aXRvb2xGaWxlSGVscGVycy5SZWFkU2FyaWZGaWxlPFNhcmlmTG9nPihmaWxlKSB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBjbGFzcyBBYnNvbHV0ZVVyaUZpbGUNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBGaWxlTmFtZTsNCg0KICAgICAgICAgICAgcHVibGljIFNhcmlmTG9nIExvZzsNCg0KICAgICAgICAgICAgaW50ZXJuYWwgc3RyaW5nIEdldE91dHB1dEZpbGVOYW1lKEFic29sdXRlVXJpT3B0aW9ucyBtZXJnZU9wdGlvbnMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuICFzdHJpbmcuSXNOdWxsT3JFbXB0eShtZXJnZU9wdGlvbnMuT3V0cHV0Rm9sZGVyUGF0aCkNCiAgICAgICAgICAgICAgICAgICAgPyBQYXRoLkdldEZ1bGxQYXRoKG1lcmdlT3B0aW9ucy5PdXRwdXRGb2xkZXJQYXRoKSArIFBhdGguRGlyZWN0b3J5U2VwYXJhdG9yQ2hhciArIFBhdGguR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uKEZpbGVOYW1lKSArICItYWJzb2x1dGUuc2FyaWYiDQogICAgICAgICAgICAgICAgICAgIDogUGF0aC5HZXREaXJlY3RvcnlOYW1lKEZpbGVOYW1lKSArIFBhdGguRGlyZWN0b3J5U2VwYXJhdG9yQ2hhciArIFBhdGguR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uKEZpbGVOYW1lKSArICItYWJzb2x1dGUuc2FyaWYiOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "B2F4038A54399CD66B1D48523BA46EC7",
              "algorithm": "md5"
            },
            {
              "value": "EA509A044FB191DA3102D320DB1B7BFCCA42EC37",
              "algorithm": "sha-1"
            },
            {
              "value": "3A4BC849AD5A1EE275982CA55F5DBFF8503E94D7BD951167682412520BD7724E",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/BaselineCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KdXNpbmcgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5CYXNlbGluZTsNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sDQp7DQogICAgY2xhc3MgQmFzZWxpbmVDb21tYW5kDQogICAgew0KICAgICAgICBwdWJsaWMgc3RhdGljIGludCBSdW4oQmFzZWxpbmVPcHRpb25zIGJhc2VsaW5lT3B0aW9ucykNCiAgICAgICAgew0KICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgU2FyaWZMb2cgYmFzZWxpbmVGaWxlID0gTXVsdGl0b29sRmlsZUhlbHBlcnMuUmVhZFNhcmlmRmlsZTxTYXJpZkxvZz4oYmFzZWxpbmVPcHRpb25zLkJhc2VsaW5lRmlsZVBhdGgpOw0KICAgICAgICAgICAgICAgIFNhcmlmTG9nIGN1cnJlbnRGaWxlID0gTXVsdGl0b29sRmlsZUhlbHBlcnMuUmVhZFNhcmlmRmlsZTxTYXJpZkxvZz4oYmFzZWxpbmVPcHRpb25zLkN1cnJlbnRGaWxlUGF0aCk7DQogICAgICAgICAgICAgICAgaWYgKGJhc2VsaW5lRmlsZS5SdW5zLkNvdW50ICE9IDEgfHwgY3VycmVudEZpbGUuUnVucy5Db3VudCAhPSAxKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKCJJbnZhbGlkIHNhcmlmIGxvZ3MsIHdlIGNhbiBvbmx5IGJhc2VsaW5lIGxvZ3Mgd2l0aCBhIHNpbmdsZSBydW4gaW4gdGhlbS4iKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBJU2FyaWZMb2dCYXNlbGluZXIgYmFzZWxpbmVyID0gU2FyaWZMb2dCYXNlbGluZXJGYWN0b3J5LkNyZWF0ZVNhcmlmTG9nQmFzZWxpbmVyKGJhc2VsaW5lT3B0aW9ucy5CYXNlbGluZVR5cGUpOw0KDQogICAgICAgICAgICAgICAgUnVuIGRpZmZlZFJ1biA9IGJhc2VsaW5lci5DcmVhdGVCYXNlbGluZWRSdW4oYmFzZWxpbmVGaWxlLlJ1bnMuRmlyc3QoKSwgY3VycmVudEZpbGUuUnVucy5GaXJzdCgpKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBTYXJpZkxvZyBvdXRwdXQgPSBjdXJyZW50RmlsZS5EZWVwQ2xvbmUoKTsNCiAgICAgICAgICAgICAgICBvdXRwdXQuUnVucyA9IG5ldyBMaXN0PFJ1bj4oKTsNCiAgICAgICAgICAgICAgICBvdXRwdXQuUnVucy5BZGQoZGlmZmVkUnVuKTsNCg0KICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0aW5nID0gYmFzZWxpbmVPcHRpb25zLlByZXR0eVByaW50DQogICAgICAgICAgICAgICAgICAgICAgICA/IEZvcm1hdHRpbmcuSW5kZW50ZWQNCiAgICAgICAgICAgICAgICAgICAgICAgIDogRm9ybWF0dGluZy5Ob25lOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIE11bHRpdG9vbEZpbGVIZWxwZXJzLldyaXRlU2FyaWZGaWxlKG91dHB1dCwgYmFzZWxpbmVPcHRpb25zLk91dHB1dEZpbGVQYXRoLCBmb3JtYXR0aW5nKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZXgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoZXgpOw0KICAgICAgICAgICAgICAgIHJldHVybiAxOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "8D96C0D8D8A11E4534C6C4C699586E44",
              "algorithm": "md5"
            },
            {
              "value": "B680E327B4EB9F26708FB207420D9AA13A23C0E7",
              "algorithm": "sha-1"
            },
            {
              "value": "937482494EB291A0D10034551920564F46D0851511011152CFBFF08E1303CED6",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/ConvertCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLkNvbnZlcnRlcnM7DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLldyaXRlcnM7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLk11bHRpdG9vbA0Kew0KICAgIGludGVybmFsIHN0YXRpYyBjbGFzcyBDb252ZXJ0Q29tbWFuZA0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgUnVuKENvbnZlcnRPcHRpb25zIGNvbnZlcnRPcHRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBMb2dnaW5nT3B0aW9ucyBsb2dnaW5nT3B0aW9ucyA9IExvZ2dpbmdPcHRpb25zLk5vbmU7DQoNCiAgICAgICAgICAgICAgICBPcHRpb25hbGx5RW1pdHRlZERhdGEgZGF0YVRvSW5zZXJ0ID0gY29udmVydE9wdGlvbnMuRGF0YVRvSW5zZXJ0LlRvRmxhZ3MoKTsNCg0KICAgICAgICAgICAgICAgIGlmIChjb252ZXJ0T3B0aW9ucy5QcmV0dHlQcmludCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGxvZ2dpbmdPcHRpb25zIHw9IExvZ2dpbmdPcHRpb25zLlByZXR0eVByaW50Ow0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICBpZiAoY29udmVydE9wdGlvbnMuRm9yY2UpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBsb2dnaW5nT3B0aW9ucyB8PSBMb2dnaW5nT3B0aW9ucy5PdmVyd3JpdGVFeGlzdGluZ091dHB1dEZpbGU7DQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShjb252ZXJ0T3B0aW9ucy5PdXRwdXRGaWxlUGF0aCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBjb252ZXJ0T3B0aW9ucy5PdXRwdXRGaWxlUGF0aCA9IGNvbnZlcnRPcHRpb25zLklucHV0RmlsZVBhdGggKyAiLnNhcmlmIjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBuZXcgVG9vbEZvcm1hdENvbnZlcnRlcigpLkNvbnZlcnRUb1N0YW5kYXJkRm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydE9wdGlvbnMuVG9vbEZvcm1hdCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRPcHRpb25zLklucHV0RmlsZVBhdGgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0T3B0aW9ucy5PdXRwdXRGaWxlUGF0aCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dpbmdPcHRpb25zLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVRvSW5zZXJ0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydE9wdGlvbnMuUGx1Z2luQXNzZW1ibHlQYXRoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZXgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoZXgpOw0KICAgICAgICAgICAgICAgIHJldHVybiAxOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "5E094347B99CE16E9ACE8CECBC2727CC",
              "algorithm": "md5"
            },
            {
              "value": "F03F18CECBEAC10D71A5BB1BC188EDDB550D2B45",
              "algorithm": "sha-1"
            },
            {
              "value": "2C76320F230E64650D9EB73B24FFF1E7D02F57DD19FC388FC587333BB7D96A08",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/JTokenExtensions.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uTGlucTsNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbi5MaW5xOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5NdWx0aXRvb2wNCnsNCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIEpUb2tlbkV4dGVuc2lvbnMNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBIYXNQcm9wZXJ0eSh0aGlzIEpUb2tlbiB0b2tlbiwgc3RyaW5nIHByb3BlcnR5TmFtZSkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIHRva2VuLkNoaWxkcmVuPEpQcm9wZXJ0eT4oKQ0KICAgICAgICAgICAgICAgIC5BbnkoanAgPT4ganAuTmFtZS5FcXVhbHMocHJvcGVydHlOYW1lLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWwpKTsNCiAgICAgICAgfQ0KICAgIH0NCn0="
          },
          "hashes": [
            {
              "value": "E9F1FE8FB7A42227F148A95FE5171683",
              "algorithm": "md5"
            },
            {
              "value": "C320CB4A55F78F13134B5693FECB5BB29BC339C0",
              "algorithm": "sha-1"
            },
            {
              "value": "EF3CBC855ADBD50946100796CF23661245C4169FABAACB9C61BC8730BDC8BCF2",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/MergeCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5JTzsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUHJvY2Vzc29yczsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuVmlzaXRvcnM7DQp1c2luZyBOZXd0b25zb2Z0Lkpzb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLk11bHRpdG9vbA0Kew0KICAgIGludGVybmFsIHN0YXRpYyBjbGFzcyBNZXJnZUNvbW1hbmQNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFJ1bihNZXJnZU9wdGlvbnMgbWVyZ2VPcHRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB2YXIgc2FyaWZGaWxlcyA9IE11bHRpdG9vbEZpbGVIZWxwZXJzLkNyZWF0ZVRhcmdldHNTZXQobWVyZ2VPcHRpb25zLlRhcmdldEZpbGVTcGVjaWZpZXJzLCBtZXJnZU9wdGlvbnMuUmVjdXJzZSk7DQoNCiAgICAgICAgICAgICAgICB2YXIgYWxsUnVucyA9IFBhcnNlRmlsZXMoc2FyaWZGaWxlcyk7DQoNCiAgICAgICAgICAgICAgICAvLyBCdWlsZCBvbmUgU2FyaWZMb2cgd2l0aCBhbGwgdGhlIFJ1bnMuDQogICAgICAgICAgICAgICAgU2FyaWZMb2cgY29tYmluZWRMb2cgPSBhbGxSdW5zLk1lcmdlKCk7DQogICAgICAgICAgICAgICAgY29tYmluZWRMb2cuVmVyc2lvbiA9IFNhcmlmVmVyc2lvbi5Ud29aZXJvWmVybzsNCiAgICAgICAgICAgICAgICBjb21iaW5lZExvZy5TY2hlbWFVcmkgPSBjb21iaW5lZExvZy5WZXJzaW9uLkNvbnZlcnRUb1NjaGVtYVVyaSgpOw0KDQogICAgICAgICAgICAgICAgT3B0aW9uYWxseUVtaXR0ZWREYXRhIGRhdGFUb0luc2VydCA9IG1lcmdlT3B0aW9ucy5EYXRhVG9JbnNlcnQuVG9GbGFncygpOw0KDQogICAgICAgICAgICAgICAgaWYgKGRhdGFUb0luc2VydCAhPSBPcHRpb25hbGx5RW1pdHRlZERhdGEuTm9uZSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGNvbWJpbmVkTG9nID0gbmV3IEluc2VydE9wdGlvbmFsRGF0YVZpc2l0b3IoZGF0YVRvSW5zZXJ0KS5WaXNpdFNhcmlmTG9nKGNvbWJpbmVkTG9nKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBXcml0ZSBvdXRwdXQgdG8gZmlsZS4NCiAgICAgICAgICAgICAgICBzdHJpbmcgb3V0cHV0TmFtZSA9IFBhdGguQ29tYmluZShtZXJnZU9wdGlvbnMuT3V0cHV0Rm9sZGVyUGF0aCwgR2V0T3V0cHV0RmlsZU5hbWUobWVyZ2VPcHRpb25zKSk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRpbmcgPSBtZXJnZU9wdGlvbnMuUHJldHR5UHJpbnQNCiAgICAgICAgICAgICAgICAgICAgPyBGb3JtYXR0aW5nLkluZGVudGVkDQogICAgICAgICAgICAgICAgICAgIDogRm9ybWF0dGluZy5Ob25lOw0KDQogICAgICAgICAgICAgICAgRGlyZWN0b3J5LkNyZWF0ZURpcmVjdG9yeShtZXJnZU9wdGlvbnMuT3V0cHV0Rm9sZGVyUGF0aCk7DQogICAgICAgICAgICAgICAgTXVsdGl0b29sRmlsZUhlbHBlcnMuV3JpdGVTYXJpZkZpbGUoY29tYmluZWRMb2csIG91dHB1dE5hbWUsIGZvcm1hdHRpbmcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBleCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShleCk7DQogICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KDQoJICAgIHByaXZhdGUgc3RhdGljIElFbnVtZXJhYmxlPFNhcmlmTG9nPiBQYXJzZUZpbGVzKElFbnVtZXJhYmxlPHN0cmluZz4gc2FyaWZGaWxlcykNCgkgICAgew0KICAgICAgICAgICAgZm9yZWFjaCAodmFyIGZpbGUgaW4gc2FyaWZGaWxlcykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB5aWVsZCByZXR1cm4gTXVsdGl0b29sRmlsZUhlbHBlcnMuUmVhZFNhcmlmRmlsZTxTYXJpZkxvZz4oZmlsZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGludGVybmFsIHN0YXRpYyBzdHJpbmcgR2V0T3V0cHV0RmlsZU5hbWUoTWVyZ2VPcHRpb25zIG1lcmdlT3B0aW9ucykNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuICFzdHJpbmcuSXNOdWxsT3JFbXB0eShtZXJnZU9wdGlvbnMuT3V0cHV0RmlsZU5hbWUpDQogICAgICAgICAgICAgICAgPyBtZXJnZU9wdGlvbnMuT3V0cHV0RmlsZU5hbWUNCiAgICAgICAgICAgICAgICA6ICJjb21iaW5lZC5zYXJpZiI7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "4F5468D76C1112D9E5F648090426D13E",
              "algorithm": "md5"
            },
            {
              "value": "8D9D3BFC8301BF9648C048056768616574F5829D",
              "algorithm": "sha-1"
            },
            {
              "value": "50A70E4EC158587E9DB304D8AC832CB3E44FE50497360386A9DE57F81CC0F584",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/RebaseUriCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5JTzsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuUHJvY2Vzc29yczsNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sDQp7DQogICAgaW50ZXJuYWwgc3RhdGljIGNsYXNzIFJlYmFzZVVyaUNvbW1hbmQNCiAgICB7DQogICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IFJ1bihSZWJhc2VVcmlPcHRpb25zIHJlYmFzZU9wdGlvbnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFVyaSBiYXNlVXJpOw0KICAgICAgICAgICAgICAgIGlmICghVXJpLlRyeUNyZWF0ZShyZWJhc2VPcHRpb25zLkJhc2VQYXRoLCBVcmlLaW5kLkFic29sdXRlLCBvdXQgYmFzZVVyaSkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRFeGNlcHRpb24oJCJCYXNlUGF0aCB7cmViYXNlT3B0aW9ucy5CYXNlUGF0aH0gd2FzIG5vdCBhbiBhYnNvbHV0ZSBVUkkuICBJdCBtdXN0IGJlLiIpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIEluIGNhc2Ugc29tZW9uZSBhY2NpZGVudGFsbHkgcGFzc2VzIEM6XGJsZFxzcmMgYW5kIG1lYW50IEM6XGJsZFxzcmNcLS10aGUgYmFzZSBwYXRoIHNob3VsZCBhbHdheXMgYmUgYSBmb2xkZXIsIG5vdCBzb21ldGhpbmcgdGhhdCBwb2ludHMgdG8gYSBmaWxlLg0KICAgICAgICAgICAgICAgIGlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkoYmFzZVVyaS5HZXRGaWxlTmFtZSgpKSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGJhc2VVcmkgPSBuZXcgVXJpKGJhc2VVcmkuVG9TdHJpbmcoKSArICIvIik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdmFyIHNhcmlmRmlsZXMgPSBHZXRTYXJpZkZpbGVzKHJlYmFzZU9wdGlvbnMpOw0KDQogICAgICAgICAgICAgICAgRGlyZWN0b3J5LkNyZWF0ZURpcmVjdG9yeShyZWJhc2VPcHRpb25zLk91dHB1dEZvbGRlclBhdGgpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBzYXJpZkxvZyBpbiBzYXJpZkZpbGVzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgc2FyaWZMb2cuTG9nID0gc2FyaWZMb2cuTG9nLlJlYmFzZVVyaShyZWJhc2VPcHRpb25zLkJhc2VQYXRoVG9rZW4sIHJlYmFzZU9wdGlvbnMuUmViYXNlUmVsYXRpdmVVcmlzLCBiYXNlVXJpKTsNCg0KICAgICAgICAgICAgICAgICAgICAvLyBXcml0ZSBvdXRwdXQgdG8gZmlsZS4NCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIG91dHB1dE5hbWUgPSBzYXJpZkxvZy5HZXRPdXRwdXRGaWxlTmFtZShyZWJhc2VPcHRpb25zKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRpbmcgPSByZWJhc2VPcHRpb25zLlByZXR0eVByaW50DQogICAgICAgICAgICAgICAgICAgICAgICA/IEZvcm1hdHRpbmcuSW5kZW50ZWQNCiAgICAgICAgICAgICAgICAgICAgICAgIDogRm9ybWF0dGluZy5Ob25lOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgTXVsdGl0b29sRmlsZUhlbHBlcnMuV3JpdGVTYXJpZkZpbGUoc2FyaWZMb2cuTG9nLCBvdXRwdXROYW1lLCBmb3JtYXR0aW5nKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uIGV4KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKGV4KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gMTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIHByaXZhdGUgc3RhdGljIElFbnVtZXJhYmxlPFJlYmFzZVVyaUZpbGU+IEdldFNhcmlmRmlsZXMoUmViYXNlVXJpT3B0aW9ucyBtZXJnZU9wdGlvbnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vIEdldCBmaWxlcyBuYW1lcyBmaXJzdCwgYXMgd2UgbWF5IHdyaXRlIG1vcmUgc2FyaWYgbG9ncyB0byB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgd2UgcmViYXNlIHRoZW0uDQogICAgICAgICAgICBIYXNoU2V0PHN0cmluZz4gZmlsZU5hbWVzID0gTXVsdGl0b29sRmlsZUhlbHBlcnMuQ3JlYXRlVGFyZ2V0c1NldChtZXJnZU9wdGlvbnMuVGFyZ2V0RmlsZVNwZWNpZmllcnMsIG1lcmdlT3B0aW9ucy5SZWN1cnNlKTsNCiAgICAgICAgICAgIGZvcmVhY2godmFyIGZpbGUgaW4gZmlsZU5hbWVzKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHlpZWxkIHJldHVybiBuZXcgUmViYXNlVXJpRmlsZSgpIHsgRmlsZU5hbWUgPSBmaWxlLCBMb2cgPSBNdWx0aXRvb2xGaWxlSGVscGVycy5SZWFkU2FyaWZGaWxlPFNhcmlmTG9nPihmaWxlKSB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBwcml2YXRlIGNsYXNzIFJlYmFzZVVyaUZpbGUNCiAgICAgICAgew0KICAgICAgICAgICAgcHVibGljIHN0cmluZyBGaWxlTmFtZTsNCg0KICAgICAgICAgICAgcHVibGljIFNhcmlmTG9nIExvZzsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaW50ZXJuYWwgc3RyaW5nIEdldE91dHB1dEZpbGVOYW1lKFJlYmFzZVVyaU9wdGlvbnMgbWVyZ2VPcHRpb25zKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiAhc3RyaW5nLklzTnVsbE9yRW1wdHkobWVyZ2VPcHRpb25zLk91dHB1dEZvbGRlclBhdGgpDQogICAgICAgICAgICAgICAgICAgID8gUGF0aC5HZXRGdWxsUGF0aChtZXJnZU9wdGlvbnMuT3V0cHV0Rm9sZGVyUGF0aCkgKyBQYXRoLkRpcmVjdG9yeVNlcGFyYXRvckNoYXIgKyBQYXRoLkdldEZpbGVOYW1lV2l0aG91dEV4dGVuc2lvbihGaWxlTmFtZSkgKyAiLXJlYmFzZWQuc2FyaWYiDQogICAgICAgICAgICAgICAgICAgIDogUGF0aC5HZXREaXJlY3RvcnlOYW1lKEZpbGVOYW1lKSArIFBhdGguRGlyZWN0b3J5U2VwYXJhdG9yQ2hhciArIFBhdGguR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uKEZpbGVOYW1lKSArICItcmViYXNlZC5zYXJpZiI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "70EC20AB28968CEBDC3AE97F66B02F91",
              "algorithm": "md5"
            },
            {
              "value": "517AAC263014E5BBAD71BF3079FA5F9835DDA50C",
              "algorithm": "sha-1"
            },
            {
              "value": "793DC570C59CFF0BF2369EEF47F13DC94AE70F5FC70F37C11A56E8AAA49D1820",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/RewriteCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uTGlucTsNCnVzaW5nIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuVmlzaXRvcnM7DQp1c2luZyBOZXd0b25zb2Z0Lkpzb247DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLk11bHRpdG9vbA0Kew0KICAgIGludGVybmFsIHN0YXRpYyBjbGFzcyBSZXdyaXRlQ29tbWFuZA0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgUnVuKFJld3JpdGVPcHRpb25zIHJld3JpdGVPcHRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXdyaXRlT3B0aW9ucyA9IFZhbGlkYXRlT3B0aW9ucyhyZXdyaXRlT3B0aW9ucyk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgU2FyaWZMb2cgYWN0dWFsTG9nID0gTXVsdGl0b29sRmlsZUhlbHBlcnMuUmVhZFNhcmlmRmlsZTxTYXJpZkxvZz4ocmV3cml0ZU9wdGlvbnMuSW5wdXRGaWxlUGF0aCk7DQoNCiAgICAgICAgICAgICAgICBPcHRpb25hbGx5RW1pdHRlZERhdGEgZGF0YVRvSW5zZXJ0ID0gcmV3cml0ZU9wdGlvbnMuRGF0YVRvSW5zZXJ0LlRvRmxhZ3MoKTsNCg0KICAgICAgICAgICAgICAgIFNhcmlmTG9nIHJlZm9ybWF0dGVkTG9nID0gbmV3IEluc2VydE9wdGlvbmFsRGF0YVZpc2l0b3IoZGF0YVRvSW5zZXJ0KS5WaXNpdFNhcmlmTG9nKGFjdHVhbExvZyk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgc3RyaW5nIGZpbGVOYW1lID0gQ29tbWFuZFV0aWxpdGllcy5HZXRUcmFuc2Zvcm1lZE91dHB1dEZpbGVOYW1lKHJld3JpdGVPcHRpb25zKTsNCg0KICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0aW5nID0gcmV3cml0ZU9wdGlvbnMuUHJldHR5UHJpbnQNCiAgICAgICAgICAgICAgICAgICAgPyBGb3JtYXR0aW5nLkluZGVudGVkDQogICAgICAgICAgICAgICAgICAgIDogRm9ybWF0dGluZy5Ob25lOw0KDQogICAgICAgICAgICAgICAgTXVsdGl0b29sRmlsZUhlbHBlcnMuV3JpdGVTYXJpZkZpbGUocmVmb3JtYXR0ZWRMb2csIGZpbGVOYW1lLCBmb3JtYXR0aW5nKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoKEV4Y2VwdGlvbiBleCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShleCk7DQogICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgUmV3cml0ZU9wdGlvbnMgVmFsaWRhdGVPcHRpb25zKFJld3JpdGVPcHRpb25zIHJld3JpdGVPcHRpb25zKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAocmV3cml0ZU9wdGlvbnMuSW5saW5lKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJld3JpdGVPcHRpb25zLkZvcmNlID0gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJld3JpdGVPcHRpb25zOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "55B3231D002CAF5A646D0FCD8B380988",
              "algorithm": "md5"
            },
            {
              "value": "E5938724EE8AEDD1E66FBBECBFA7D2842B612C70",
              "algorithm": "sha-1"
            },
            {
              "value": "7D19F67E3969E5C44D74549D2069F7D84C13B1EBC64FDDC80EA41C542C1492DC",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/SarifValidationContext.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uSU87DQp1c2luZyBOZXd0b25zb2Z0Lkpzb24uTGlucTsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sDQp7DQogICAgcHVibGljIGNsYXNzIFNhcmlmVmFsaWRhdGlvbkNvbnRleHQgOiBJQW5hbHlzaXNDb250ZXh0DQogICAgew0KICAgICAgICBwdWJsaWMgYm9vbCBJc1ZhbGlkQW5hbHlzaXNUYXJnZXQNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFBhdGguR2V0RXh0ZW5zaW9uKFRhcmdldFVyaS5Mb2NhbFBhdGgpLkVxdWFscygiLnNhcmlmIiwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsSWdub3JlQ2FzZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgSUFuYWx5c2lzTG9nZ2VyIExvZ2dlciB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIHN0cmluZyBNaW1lVHlwZQ0KICAgICAgICB7DQogICAgICAgICAgICBnZXQgeyByZXR1cm4gImFwcGxpY2F0aW9uL3NhcmlmLWpzb24iOyB9DQogICAgICAgICAgICBzZXQgeyB0aHJvdyBuZXcgSW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbigpOyB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgUHJvcGVydGllc0RpY3Rpb25hcnkgUG9saWN5IHsgZ2V0OyBzZXQ7IH0NCg0KICAgICAgICBwdWJsaWMgSVJ1bGUgUnVsZSB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIFJ1bnRpbWVDb25kaXRpb25zIFJ1bnRpbWVFcnJvcnMgeyBnZXQ7IHNldDsgfQ0KDQogICAgICAgIHB1YmxpYyBFeGNlcHRpb24gVGFyZ2V0TG9hZEV4Y2VwdGlvbiB7IGdldDsgc2V0OyB9DQoNCiAgICAgICAgcHJpdmF0ZSBVcmkgX3VyaTsNCg0KICAgICAgICBwdWJsaWMgVXJpIFRhcmdldFVyaQ0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gX3VyaTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgc2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKF91cmkgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9uKE11bHRpdG9vbFJlc291cmNlcy5FcnJvcklsbGVnYWxDb250ZXh0UmV1c2UpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIF91cmkgPSB2YWx1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdHJpbmcgU2NoZW1hRmlsZVBhdGggeyBnZXQ7IGludGVybmFsIHNldDsgfQ0KDQogICAgICAgIHB1YmxpYyBzdHJpbmcgSW5wdXRMb2dDb250ZW50cyB7IGdldDsgaW50ZXJuYWwgc2V0OyB9DQoNCiAgICAgICAgcHVibGljIFNhcmlmTG9nIElucHV0TG9nIHsgZ2V0OyBpbnRlcm5hbCBzZXQ7IH0NCg0KICAgICAgICBwdWJsaWMgSlRva2VuIElucHV0TG9nVG9rZW4geyBnZXQ7IGludGVybmFsIHNldDsgfQ0KDQogICAgICAgIHB1YmxpYyB2b2lkIERpc3Bvc2UoKQ0KICAgICAgICB7DQogICAgICAgICAgICAvLyBOb3RoaW5nIHRvIGRpc3Bvc2UuDQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "ADB8B2587C882B4B3226A104836207A1",
              "algorithm": "md5"
            },
            {
              "value": "D3A23875A748D7CB8C1884CA8E8F95EC30D41C82",
              "algorithm": "sha-1"
            },
            {
              "value": "B7D3FF38EF24CD8019D77414661B52686FADB9127D894B3B4C830E21A3D84BE9",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/TransformCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlJlYWRlcnM7DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZlcnNpb25PbmU7DQp1c2luZyBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLlZpc2l0b3JzOw0KdXNpbmcgTmV3dG9uc29mdC5Kc29uOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5NdWx0aXRvb2wNCnsNCiAgICBpbnRlcm5hbCBzdGF0aWMgY2xhc3MgVHJhbnNmb3JtQ29tbWFuZA0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgUnVuKFRyYW5zZm9ybU9wdGlvbnMgdHJhbnNmb3JtT3B0aW9ucykNCiAgICAgICAgew0KICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybU9wdGlvbnMuVmVyc2lvbiA8IDEgfHwgdHJhbnNmb3JtT3B0aW9ucy5WZXJzaW9uID4gMikNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKE11bHRpdG9vbFJlc291cmNlcy5FcnJvckludmFsaWRUcmFuc2Zvcm1UYXJnZXRWZXJzaW9uKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgT3B0aW9uYWxseUVtaXR0ZWREYXRhIGRhdGFUb0luc2VydCA9IHRyYW5zZm9ybU9wdGlvbnMuRGF0YVRvSW5zZXJ0LlRvRmxhZ3MoKTsNCg0KICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIGRvbid0IGFjdHVhbGx5IHV0aWxpemUgdGhlIGRhdGFUb0luc2VydCBjb21tYW5kLWxpbmUgZGF0YSB5ZXQuLi4NCg0KICAgICAgICAgICAgICAgIHN0cmluZyBmaWxlTmFtZSA9IENvbW1hbmRVdGlsaXRpZXMuR2V0VHJhbnNmb3JtZWRPdXRwdXRGaWxlTmFtZSh0cmFuc2Zvcm1PcHRpb25zKTsNCg0KICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0aW5nID0gdHJhbnNmb3JtT3B0aW9ucy5QcmV0dHlQcmludA0KICAgICAgICAgICAgICAgICAgICA/IEZvcm1hdHRpbmcuSW5kZW50ZWQNCiAgICAgICAgICAgICAgICAgICAgOiBGb3JtYXR0aW5nLk5vbmU7DQoNCiAgICAgICAgICAgICAgICAvLyBBc3N1bWUgdGhlIGlucHV0IGxvZyBpcyB0aGUgIm90aGVyIiB2ZXJzaW9uDQogICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybU9wdGlvbnMuVmVyc2lvbiA9PSAyKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgU2FyaWZMb2dWZXJzaW9uT25lIGFjdHVhbExvZyA9IE11bHRpdG9vbEZpbGVIZWxwZXJzLlJlYWRTYXJpZkZpbGU8U2FyaWZMb2dWZXJzaW9uT25lPih0cmFuc2Zvcm1PcHRpb25zLklucHV0RmlsZVBhdGgsIFNhcmlmQ29udHJhY3RSZXNvbHZlclZlcnNpb25PbmUuSW5zdGFuY2UpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgdmlzaXRvciA9IG5ldyBTYXJpZlZlcnNpb25PbmVUb0N1cnJlbnRWaXNpdG9yKCk7DQogICAgICAgICAgICAgICAgICAgIHZpc2l0b3IuVmlzaXRTYXJpZkxvZ1ZlcnNpb25PbmUoYWN0dWFsTG9nKTsNCg0KICAgICAgICAgICAgICAgICAgICBNdWx0aXRvb2xGaWxlSGVscGVycy5Xcml0ZVNhcmlmRmlsZSh2aXNpdG9yLlNhcmlmTG9nLCBmaWxlTmFtZSwgZm9ybWF0dGluZyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFNhcmlmTG9nIGFjdHVhbExvZyA9IE11bHRpdG9vbEZpbGVIZWxwZXJzLlJlYWRTYXJpZkZpbGU8U2FyaWZMb2c+KHRyYW5zZm9ybU9wdGlvbnMuSW5wdXRGaWxlUGF0aCk7DQogICAgICAgICAgICAgICAgICAgIHZhciB2aXNpdG9yID0gbmV3IFNhcmlmQ3VycmVudFRvVmVyc2lvbk9uZVZpc2l0b3IoKTsNCiAgICAgICAgICAgICAgICAgICAgdmlzaXRvci5WaXNpdFNhcmlmTG9nKGFjdHVhbExvZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgTXVsdGl0b29sRmlsZUhlbHBlcnMuV3JpdGVTYXJpZkZpbGUodmlzaXRvci5TYXJpZkxvZ1ZlcnNpb25PbmUsIGZpbGVOYW1lLCBmb3JtYXR0aW5nKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uIGV4KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKGV4KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gMTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIDA7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "8D17A2CA85DF3D41AA1AEEAE83D3E4D6",
              "algorithm": "md5"
            },
            {
              "value": "5B6A2B0ACFD268AD9B315B5BA8815796A99EB2F2",
              "algorithm": "sha-1"
            },
            {
              "value": "25C4EDC24D644766F380F461CA055E75235534B86EC20F1BD770BF1D68C8A7AD",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/ValidateCommand.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "570818640A038E510E1C8C4E59B190DE",
              "algorithm": "md5"
            },
            {
              "value": "73B7C61ADC20D4694714D303C231578BA9C647B3",
              "algorithm": "sha-1"
            },
            {
              "value": "7D24966EDEA651E7C731732930DB8F50EF3D7D8DE8B57EB3FA1EC5C4E53CF1C7",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/DoNotUseFriendlyNameAsRuleId.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sLlJ1bGVzDQp7DQogICAgcHVibGljIGNsYXNzIERvTm90VXNlRnJpZW5kbHlOYW1lQXNSdWxlSWQgOiBTYXJpZlZhbGlkYXRpb25Ta2ltbWVyQmFzZQ0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSBNZXNzYWdlIF9mdWxsRGVzY3JpcHRpb24gPSBuZXcgTWVzc2FnZQ0KICAgICAgICB7DQogICAgICAgICAgICBUZXh0ID0gUnVsZVJlc291cmNlcy5TQVJJRjEwMDFfRG9Ob3RVc2VGcmllbmRseU5hbWVBc1J1bGVJZERlc2NyaXB0aW9uDQogICAgICAgIH07DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIE1lc3NhZ2UgRnVsbERlc2NyaXB0aW9uID0+IF9mdWxsRGVzY3JpcHRpb247DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJlc3VsdExldmVsIERlZmF1bHRMZXZlbCA9PiBSZXN1bHRMZXZlbC5XYXJuaW5nOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFNBUklGMTAwMQ0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIElkID0+IFJ1bGVJZC5Eb05vdFVzZUZyaWVuZGx5TmFtZUFzUnVsZUlkOw0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSBJRW51bWVyYWJsZTxzdHJpbmc+IE1lc3NhZ2VSZXNvdXJjZU5hbWVzDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc3RyaW5nW10NCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIG5hbWVvZihSdWxlUmVzb3VyY2VzLlNBUklGMTAwMV9EZWZhdWx0KQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBbmFseXplKFJ1bGUgcnVsZSwgc3RyaW5nIHJ1bGVQb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAocnVsZS5JZCAhPSBudWxsICYmDQogICAgICAgICAgICAgICAgcnVsZS5OYW1lICE9IG51bGwgJiYNCiAgICAgICAgICAgICAgICBydWxlLk5hbWUuVGV4dCAhPSBudWxsICYmDQogICAgICAgICAgICAgICAgcnVsZS5JZC5FcXVhbHMocnVsZS5OYW1lLlRleHQsIFN0cmluZ0NvbXBhcmlzb24uT3JkaW5hbElnbm9yZUNhc2UpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIExvZ1Jlc3VsdCgNCiAgICAgICAgICAgICAgICAgICAgcnVsZVBvaW50ZXIsDQogICAgICAgICAgICAgICAgICAgIG5hbWVvZihSdWxlUmVzb3VyY2VzLlNBUklGMTAwMV9EZWZhdWx0KSwNCiAgICAgICAgICAgICAgICAgICAgcnVsZS5JZCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "5BE513CA01FABBFC46CA5C7681FF074C",
              "algorithm": "md5"
            },
            {
              "value": "B20A8D169DA67D6BAACBD9727E4A2680FB8F3271",
              "algorithm": "sha-1"
            },
            {
              "value": "69E3EF06A9B17C61D161D44D6C1A699131BD30E615CA3D6C089099D473581A1E",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/EndColumnMustNotBeLessThanStartColumn.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Kc29uLlBvaW50ZXI7DQp1c2luZyBOZXd0b25zb2Z0Lkpzb24uTGlucTsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sLlJ1bGVzDQp7DQogICAgcHVibGljIGNsYXNzIEVuZENvbHVtbk11c3ROb3RCZUxlc3NUaGFuU3RhcnRDb2x1bW4gOiBTYXJpZlZhbGlkYXRpb25Ta2ltbWVyQmFzZQ0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBNZXNzYWdlIF9mdWxsRGVzY3JpcHRpb24gPSBuZXcgTWVzc2FnZQ0KICAgICAgICB7DQogICAgICAgICAgICBUZXh0ID0gUnVsZVJlc291cmNlcy5TQVJJRjEwMTNfRW5kQ29sdW1uTXVzdE5vdEJlTGVzc1RoYW5TdGFydENvbHVtbg0KICAgICAgICB9Ow0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSBNZXNzYWdlIEZ1bGxEZXNjcmlwdGlvbiA9PiBfZnVsbERlc2NyaXB0aW9uOw0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSBSZXN1bHRMZXZlbCBEZWZhdWx0TGV2ZWwgPT4gUmVzdWx0TGV2ZWwuRXJyb3I7DQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gU0FSSUYxMDEzDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgSWQgPT4gUnVsZUlkLkVuZENvbHVtbk11c3ROb3RCZUxlc3NUaGFuU3RhcnRDb2x1bW47DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIElFbnVtZXJhYmxlPHN0cmluZz4gTWVzc2FnZVJlc291cmNlTmFtZXMNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzdHJpbmdbXQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDEzX0RlZmF1bHQpDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoUmVnaW9uIHJlZ2lvbiwgc3RyaW5nIHJlZ2lvblBvaW50ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIHZhciBqc29uUG9pbnRlciA9IG5ldyBKc29uUG9pbnRlcihyZWdpb25Qb2ludGVyKTsNCiAgICAgICAgICAgIHZhciByZWdpb25Ub2tlbiA9IGpzb25Qb2ludGVyLkV2YWx1YXRlKENvbnRleHQuSW5wdXRMb2dUb2tlbik7DQoNCiAgICAgICAgICAgIGlmIChSZWdpb25Jc09uT25lTGluZShyZWdpb24sIHJlZ2lvblRva2VuKSAmJg0KICAgICAgICAgICAgICAgIHJlZ2lvblRva2VuLkhhc1Byb3BlcnR5KFNhcmlmUHJvcGVydHlOYW1lLkVuZENvbHVtbikgJiYNCiAgICAgICAgICAgICAgICByZWdpb24uRW5kQ29sdW1uIDwgcmVnaW9uLlN0YXJ0Q29sdW1uKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0cmluZyBlbmRDb2x1bW5Qb2ludGVyID0gcmVnaW9uUG9pbnRlci5BdFByb3BlcnR5KFNhcmlmUHJvcGVydHlOYW1lLkVuZENvbHVtbik7DQoNCiAgICAgICAgICAgICAgICBMb2dSZXN1bHQoDQogICAgICAgICAgICAgICAgICAgIGVuZENvbHVtblBvaW50ZXIsDQogICAgICAgICAgICAgICAgICAgIG5hbWVvZihSdWxlUmVzb3VyY2VzLlNBUklGMTAxM19EZWZhdWx0KSwNCiAgICAgICAgICAgICAgICAgICAgcmVnaW9uLkVuZENvbHVtbi5Ub0ludmFyaWFudFN0cmluZygpLA0KICAgICAgICAgICAgICAgICAgICByZWdpb24uU3RhcnRDb2x1bW4uVG9JbnZhcmlhbnRTdHJpbmcoKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHN0YXRpYyBib29sIFJlZ2lvbklzT25PbmVMaW5lKFJlZ2lvbiByZWdpb24sIEpUb2tlbiByZWdpb25Ub2tlbikNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIHJlZ2lvblRva2VuLkhhc1Byb3BlcnR5KFNhcmlmUHJvcGVydHlOYW1lLkVuZExpbmUpDQogICAgICAgICAgICAgICAgPyByZWdpb24uU3RhcnRMaW5lID09IHJlZ2lvbi5FbmRMaW5lDQogICAgICAgICAgICAgICAgOiB0cnVlOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "6D4D0F8F7F14983C174E7475B411484C",
              "algorithm": "md5"
            },
            {
              "value": "C4123B0BD6809059B152E084F5E02245A95EFE2A",
              "algorithm": "sha-1"
            },
            {
              "value": "6221EB52D51CD295752AB2DB1CB074AE7B23C8A39607C3EE71F38D4AD5476D8C",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/EndLineMustNotBeLessThanStartLine.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Kc29uLlBvaW50ZXI7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLk11bHRpdG9vbC5SdWxlcw0Kew0KICAgIHB1YmxpYyBjbGFzcyBFbmRMaW5lTXVzdE5vdEJlTGVzc1RoYW5TdGFydExpbmUgOiBTYXJpZlZhbGlkYXRpb25Ta2ltbWVyQmFzZQ0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBNZXNzYWdlIF9mdWxsRGVzY3JpcHRpb24gPSBuZXcgTWVzc2FnZQ0KICAgICAgICB7DQogICAgICAgICAgICBUZXh0ID0gUnVsZVJlc291cmNlcy5TQVJJRjEwMTJfRW5kTGluZU11c3ROb3RCZUxlc3NUaGFuU3RhcnRMaW5lDQogICAgICAgIH07DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIE1lc3NhZ2UgRnVsbERlc2NyaXB0aW9uID0+IF9mdWxsRGVzY3JpcHRpb247DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJlc3VsdExldmVsIERlZmF1bHRMZXZlbCA9PiBSZXN1bHRMZXZlbC5FcnJvcjsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBTQVJJRjEwMTINCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBJZCA9PiBSdWxlSWQuRW5kTGluZU11c3ROb3RCZUxlc3NUaGFuU3RhcnRMaW5lOw0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSBJRW51bWVyYWJsZTxzdHJpbmc+IE1lc3NhZ2VSZXNvdXJjZU5hbWVzDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc3RyaW5nW10NCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIG5hbWVvZihSdWxlUmVzb3VyY2VzLlNBUklGMTAxMl9EZWZhdWx0KQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBbmFseXplKFJlZ2lvbiByZWdpb24sIHN0cmluZyByZWdpb25Qb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICB2YXIganNvblBvaW50ZXIgPSBuZXcgSnNvblBvaW50ZXIocmVnaW9uUG9pbnRlcik7DQogICAgICAgICAgICB2YXIgcmVnaW9uVG9rZW4gPSBqc29uUG9pbnRlci5FdmFsdWF0ZShDb250ZXh0LklucHV0TG9nVG9rZW4pOw0KDQogICAgICAgICAgICBpZiAocmVnaW9uVG9rZW4uSGFzUHJvcGVydHkoU2FyaWZQcm9wZXJ0eU5hbWUuRW5kTGluZSkgJiYNCiAgICAgICAgICAgICAgICByZWdpb24uRW5kTGluZSA8IHJlZ2lvbi5TdGFydExpbmUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIGVuZExpbmVQb2ludGVyID0gcmVnaW9uUG9pbnRlci5BdFByb3BlcnR5KFNhcmlmUHJvcGVydHlOYW1lLkVuZExpbmUpOw0KDQogICAgICAgICAgICAgICAgTG9nUmVzdWx0KA0KICAgICAgICAgICAgICAgICAgICBlbmRMaW5lUG9pbnRlciwNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDEyX0RlZmF1bHQpLA0KICAgICAgICAgICAgICAgICAgICByZWdpb24uRW5kTGluZS5Ub0ludmFyaWFudFN0cmluZygpLA0KICAgICAgICAgICAgICAgICAgICByZWdpb24uU3RhcnRMaW5lLlRvSW52YXJpYW50U3RyaW5nKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "8A8194EE833A2F79EAC0FBBB1D5ADB7B",
              "algorithm": "md5"
            },
            {
              "value": "35892C1BBD461CC6B1040B7A512B9543C291A3EA",
              "algorithm": "sha-1"
            },
            {
              "value": "3EBE9CE18C311B2D9D41382CD35A46998B57181055BAE716966B44B11E06CB2D",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/EndTimeMustBeAfterStartTime.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5HbG9iYWxpemF0aW9uOw0KdXNpbmcgTWljcm9zb2Z0Lkpzb24uUG9pbnRlcjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sLlJ1bGVzDQp7DQogICAgcHVibGljIGNsYXNzIEVuZFRpbWVNdXN0QmVBZnRlclN0YXJ0VGltZSA6IFNhcmlmVmFsaWRhdGlvblNraW1tZXJCYXNlDQogICAgew0KICAgICAgICBwcml2YXRlIE1lc3NhZ2UgX2Z1bGxEZXNjcmlwdGlvbiA9IG5ldyBNZXNzYWdlDQogICAgICAgIHsNCiAgICAgICAgICAgIFRleHQgPSBSdWxlUmVzb3VyY2VzLlNBUklGMTAwN19FbmRUaW1lTXVzdEJlQWZ0ZXJTdGFydFRpbWUNCiAgICAgICAgfTsNCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgTWVzc2FnZSBGdWxsRGVzY3JpcHRpb24gPT4gX2Z1bGxEZXNjcmlwdGlvbjsNCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgUmVzdWx0TGV2ZWwgRGVmYXVsdExldmVsID0+IFJlc3VsdExldmVsLkVycm9yOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFNBUklGMTAwNw0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIElkID0+IFJ1bGVJZC5FbmRUaW1lTXVzdEJlQWZ0ZXJTdGFydFRpbWU7DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIElFbnVtZXJhYmxlPHN0cmluZz4gTWVzc2FnZVJlc291cmNlTmFtZXMNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzdHJpbmdbXQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDA3X0RlZmF1bHQpDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBzdHJpbmcgaW52b2NhdGlvblBvaW50ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChpbnZvY2F0aW9uLlN0YXJ0VGltZSA+IGludm9jYXRpb24uRW5kVGltZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBzdHJpbmcgZW5kVGltZVBvaW50ZXIgPSBpbnZvY2F0aW9uUG9pbnRlci5BdFByb3BlcnR5KFNhcmlmUHJvcGVydHlOYW1lLkVuZFRpbWUpOw0KDQogICAgICAgICAgICAgICAgTG9nUmVzdWx0KA0KICAgICAgICAgICAgICAgICAgICBlbmRUaW1lUG9pbnRlciwNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDA3X0RlZmF1bHQpLA0KICAgICAgICAgICAgICAgICAgICBGb3JtYXREYXRlVGltZShpbnZvY2F0aW9uLkVuZFRpbWUpLA0KICAgICAgICAgICAgICAgICAgICBGb3JtYXREYXRlVGltZShpbnZvY2F0aW9uLlN0YXJ0VGltZSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIEZvcm1hdERhdGVUaW1lKERhdGVUaW1lIGRhdGVUaW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gZGF0ZVRpbWUuVG9TdHJpbmcoDQogICAgICAgICAgICAgICAgU2FyaWZVdGlsaXRpZXMuU2FyaWZEYXRlVGltZUZvcm1hdE1pbGxpc2Vjb25kc1ByZWNpc2lvbiwNCiAgICAgICAgICAgICAgICBDdWx0dXJlSW5mby5JbnZhcmlhbnRDdWx0dXJlKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "B4379693888BE062E8DD8BF30D83DDF9",
              "algorithm": "md5"
            },
            {
              "value": "5FBC8A93C99D698D66EC0F9EAFC46C7BE5997C63",
              "algorithm": "sha-1"
            },
            {
              "value": "E9041838DAF4B78299001D10F3AB5D50995C85E6CBB4FCAB607ACAA41892AC18",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/HashAlgorithmsMustBeUnique.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KdXNpbmcgTWljcm9zb2Z0Lkpzb24uUG9pbnRlcjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sLlJ1bGVzDQp7DQogICAgcHVibGljIGNsYXNzIEhhc2hBbGdvcml0aG1zTXVzdEJlVW5pcXVlIDogU2FyaWZWYWxpZGF0aW9uU2tpbW1lckJhc2UNCiAgICB7DQogICAgICAgIHByaXZhdGUgTWVzc2FnZSBfZnVsbERlc2NyaXB0aW9uID0gbmV3IE1lc3NhZ2UNCiAgICAgICAgew0KICAgICAgICAgICAgVGV4dCA9IFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDA2X0hhc2hBbGdvcml0aG1zTXVzdEJlVW5pcXVlDQogICAgICAgIH07DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIE1lc3NhZ2UgRnVsbERlc2NyaXB0aW9uID0+IF9mdWxsRGVzY3JpcHRpb247DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJlc3VsdExldmVsIERlZmF1bHRMZXZlbCA9PiBSZXN1bHRMZXZlbC5FcnJvcjsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBTQVJJRjEwMDYNCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBJZCA9PiBSdWxlSWQuSGFzaEFsZ29yaXRobXNNdXN0QmVVbmlxdWU7DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIElFbnVtZXJhYmxlPHN0cmluZz4gTWVzc2FnZVJlc291cmNlTmFtZXMNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzdHJpbmdbXQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDA2X0RlZmF1bHQpDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoRmlsZURhdGEgZmlsZURhdGEsIHN0cmluZyBmaWxlS2V5LCBzdHJpbmcgZmlsZVBvaW50ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChmaWxlRGF0YS5IYXNoZXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgYWxnb3JpdGhtS2luZCBpbiBmaWxlRGF0YS5IYXNoZXMuU2VsZWN0KGggPT4gaC5BbGdvcml0aG0pLkRpc3RpbmN0KCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZURhdGEuSGFzaGVzLkNvdW50KGggPT4gaC5BbGdvcml0aG0gPT0gYWxnb3JpdGhtS2luZCkgPiAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgaGFzaGVzUG9pbnRlciA9IGZpbGVQb2ludGVyLkF0UHJvcGVydHkoU2FyaWZQcm9wZXJ0eU5hbWUuSGFzaGVzKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgTG9nUmVzdWx0KA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc2hlc1BvaW50ZXIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDA2X0RlZmF1bHQpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobUtpbmQuVG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "D6720FEFE4E8DF0660CBF192CC8AA6B0",
              "algorithm": "md5"
            },
            {
              "value": "20EFE0DDD16934507DAA6EC869D2ECF271A89BEE",
              "algorithm": "sha-1"
            },
            {
              "value": "389D5F10E9F9748082DE756624EE72329743AE3C454CE543A7801EE33CCD8889",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/MessagesShouldEndWithPeriod.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Kc29uLlBvaW50ZXI7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLk11bHRpdG9vbC5SdWxlcw0Kew0KICAgIHB1YmxpYyBjbGFzcyBNZXNzYWdlc1Nob3VsZEVuZFdpdGhQZXJpb2QgOiBTYXJpZlZhbGlkYXRpb25Ta2ltbWVyQmFzZQ0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBNZXNzYWdlIF9mdWxsRGVzY3JpcHRpb24gPSBuZXcgTWVzc2FnZQ0KICAgICAgICB7DQogICAgICAgICAgICBUZXh0ID0gUnVsZVJlc291cmNlcy5TQVJJRjEwMDhfTWVzc2FnZXNTaG91bGRFbmRXaXRoUGVyaW9kDQogICAgICAgIH07DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIE1lc3NhZ2UgRnVsbERlc2NyaXB0aW9uID0+IF9mdWxsRGVzY3JpcHRpb247DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJlc3VsdExldmVsIERlZmF1bHRMZXZlbCA9PiBSZXN1bHRMZXZlbC5XYXJuaW5nOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFNBUklGMTAwOA0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIElkID0+IFJ1bGVJZC5NZXNzYWdlc1Nob3VsZEVuZFdpdGhQZXJpb2Q7DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIElFbnVtZXJhYmxlPHN0cmluZz4gTWVzc2FnZVJlc291cmNlTmFtZXMNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzdHJpbmdbXQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDA4X0RlZmF1bHQpDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoUnVsZSBydWxlLCBzdHJpbmcgcnVsZVBvaW50ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIEFuYWx5emVNZXNzYWdlU3RyaW5ncyhydWxlLk1lc3NhZ2VTdHJpbmdzLCBydWxlUG9pbnRlciwgU2FyaWZQcm9wZXJ0eU5hbWUuTWVzc2FnZVN0cmluZ3MpOw0KICAgICAgICAgICAgQW5hbHl6ZU1lc3NhZ2VTdHJpbmdzKHJ1bGUuUmljaE1lc3NhZ2VTdHJpbmdzLCBydWxlUG9pbnRlciwgU2FyaWZQcm9wZXJ0eU5hbWUuUmljaE1lc3NhZ2VTdHJpbmdzKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBBbmFseXplTWVzc2FnZVN0cmluZ3MoDQogICAgICAgICAgICBJRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gbWVzc2FnZVN0cmluZ3MsDQogICAgICAgICAgICBzdHJpbmcgcnVsZVBvaW50ZXIsDQogICAgICAgICAgICBzdHJpbmcgcHJvcGVydHlOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAobWVzc2FnZVN0cmluZ3MgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcga2V5IGluIG1lc3NhZ2VTdHJpbmdzLktleXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBzdHJpbmcgbWVzc2FnZVN0cmluZyA9IG1lc3NhZ2VTdHJpbmdzW2tleV07DQogICAgICAgICAgICAgICAgICAgIGlmICghU3RyaW5nLklzTnVsbE9yRW1wdHkobWVzc2FnZVN0cmluZykgJiYgRG9lc05vdEVuZFdpdGhQZXJpb2QobWVzc2FnZVN0cmluZykpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBtZXNzYWdlUG9pbnRlciA9IHJ1bGVQb2ludGVyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLkF0UHJvcGVydHkocHJvcGVydHlOYW1lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5BdFByb3BlcnR5KGtleSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIExvZ1Jlc3VsdCgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlUG9pbnRlciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lb2YoUnVsZVJlc291cmNlcy5TQVJJRjEwMDhfRGVmYXVsdCksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVN0cmluZyk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBbmFseXplKE1lc3NhZ2UgbWVzc2FnZSwgc3RyaW5nIG1lc3NhZ2VQb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBBbmFseXplTWVzc2FnZVN0cmluZyhtZXNzYWdlLlRleHQsIG1lc3NhZ2VQb2ludGVyLCBTYXJpZlByb3BlcnR5TmFtZS5UZXh0KTsNCiAgICAgICAgICAgIEFuYWx5emVNZXNzYWdlU3RyaW5nKG1lc3NhZ2UuUmljaFRleHQsIG1lc3NhZ2VQb2ludGVyLCBTYXJpZlByb3BlcnR5TmFtZS5SaWNoVGV4dCk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgQW5hbHl6ZU1lc3NhZ2VTdHJpbmcoDQogICAgICAgICAgICBzdHJpbmcgbWVzc2FnZVN0cmluZywNCiAgICAgICAgICAgIHN0cmluZyBtZXNzYWdlUG9pbnRlciwNCiAgICAgICAgICAgIHN0cmluZyBwcm9wZXJ0eU5hbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICghU3RyaW5nLklzTnVsbE9yRW1wdHkobWVzc2FnZVN0cmluZykgJiYgRG9lc05vdEVuZFdpdGhQZXJpb2QobWVzc2FnZVN0cmluZykpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIHRleHRQb2ludGVyID0gbWVzc2FnZVBvaW50ZXIuQXRQcm9wZXJ0eShwcm9wZXJ0eU5hbWUpOw0KDQogICAgICAgICAgICAgICAgTG9nUmVzdWx0KA0KICAgICAgICAgICAgICAgICAgICB0ZXh0UG9pbnRlciwNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDA4X0RlZmF1bHQpLA0KICAgICAgICAgICAgICAgICAgICBtZXNzYWdlU3RyaW5nKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgRG9lc05vdEVuZFdpdGhQZXJpb2Qoc3RyaW5nIG1lc3NhZ2UpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlICE9IG51bGwgJiYgIW1lc3NhZ2UuRW5kc1dpdGgoIi4iLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWwpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "3E5EE632E853DF80BD3D1129FEA07B94",
              "algorithm": "md5"
            },
            {
              "value": "41045F7B9BB45E9D8ECD597967DEA30A22880998",
              "algorithm": "sha-1"
            },
            {
              "value": "6F46C60DF254D88557ABAAE8599DC9C43EEC666A2BCBEF7EED7ADCB6961AF358",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/SarifValidationSkimmerBase.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "C7A5DD1303E8A1D562F5D5043B7E342B",
              "algorithm": "md5"
            },
            {
              "value": "8AC2F5B437B07DA37AAD322F18934BF82E64C087",
              "algorithm": "sha-1"
            },
            {
              "value": "F0F2EC1D30EB594294A2E2DC1BA7247DFCE5B619266F79F38FC262500BAB1A13",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/StepValuesMustFormOneBasedSequence.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5EaWFnbm9zdGljczsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KdXNpbmcgTWljcm9zb2Z0Lkpzb24uUG9pbnRlcjsNCnVzaW5nIE5ld3RvbnNvZnQuSnNvbi5MaW5xOw0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LkNvZGVBbmFseXNpcy5TYXJpZi5NdWx0aXRvb2wuUnVsZXMNCnsNCiAgICBwdWJsaWMgY2xhc3MgU3RlcFZhbHVlc011c3RGb3JtT25lQmFzZWRTZXF1ZW5jZSA6IFNhcmlmVmFsaWRhdGlvblNraW1tZXJCYXNlDQogICAgew0KICAgICAgICBwcml2YXRlIHJlYWRvbmx5IE1lc3NhZ2UgX2Z1bGxEZXNjcmlwdGlvbiA9IG5ldyBNZXNzYWdlDQogICAgICAgIHsNCiAgICAgICAgICAgIFRleHQgPSBSdWxlUmVzb3VyY2VzLlNBUklGMTAwOV9TdGVwVmFsdWVzTXVzdEZvcm1PbmVCYXNlZFNlcXVlbmNlDQogICAgICAgIH07DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIE1lc3NhZ2UgRnVsbERlc2NyaXB0aW9uID0+IF9mdWxsRGVzY3JpcHRpb247DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJlc3VsdExldmVsIERlZmF1bHRMZXZlbCA9PiBSZXN1bHRMZXZlbC5FcnJvcjsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBTQVJJRjEwMDkNCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBJZCA9PiBSdWxlSWQuU3RlcFZhbHVlc011c3RGb3JtT25lQmFzZWRTZXF1ZW5jZTsNCg0KICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgSUVudW1lcmFibGU8c3RyaW5nPiBNZXNzYWdlUmVzb3VyY2VOYW1lcw0KICAgICAgICB7DQogICAgICAgICAgICBnZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHN0cmluZ1tdDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBuYW1lb2YoUnVsZVJlc291cmNlcy5TQVJJRjEwMDlfU3RlcE5vdFByZXNlbnRPbkFsbExvY2F0aW9ucyksDQogICAgICAgICAgICAgICAgICAgIG5hbWVvZihSdWxlUmVzb3VyY2VzLlNBUklGMTAwOV9JbnZhbGlkU3RlcFZhbHVlKQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBbmFseXplKFRocmVhZEZsb3cgdGhyZWFkRmxvdywgc3RyaW5nIHRocmVhZEZsb3dQb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICB2YXIgcG9pbnRlciA9IG5ldyBKc29uUG9pbnRlcih0aHJlYWRGbG93UG9pbnRlcik7DQogICAgICAgICAgICBKVG9rZW4gdGhyZWFkRmxvd1Rva2VuID0gcG9pbnRlci5FdmFsdWF0ZShDb250ZXh0LklucHV0TG9nVG9rZW4pOw0KDQogICAgICAgICAgICBKUHJvcGVydHkgbG9jYXRpb25zUHJvcGVydHkgPSB0aHJlYWRGbG93VG9rZW4uQ2hpbGRyZW48SlByb3BlcnR5PigpDQogICAgICAgICAgICAgICAgLkZpcnN0T3JEZWZhdWx0KHByb3AgPT4gcHJvcC5OYW1lLkVxdWFscyhTYXJpZlByb3BlcnR5TmFtZS5Mb2NhdGlvbnMsIFN0cmluZ0NvbXBhcmlzb24uT3JkaW5hbCkpOw0KICAgICAgICAgICAgaWYgKGxvY2F0aW9uc1Byb3BlcnR5ICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgSkFycmF5IHRocmVhZEZsb3dMb2NhdGlvbnNBcnJheSA9IGxvY2F0aW9uc1Byb3BlcnR5LlZhbHVlIGFzIEpBcnJheTsNCiAgICAgICAgICAgICAgICBzdHJpbmcgdGhyZWFkRmxvd0xvY2F0aW9uc1BvaW50ZXIgPSB0aHJlYWRGbG93UG9pbnRlci5BdFByb3BlcnR5KFNhcmlmUHJvcGVydHlOYW1lLkxvY2F0aW9ucyk7DQoNCiAgICAgICAgICAgICAgICBSZXBvcnRNaXNzaW5nU3RlcFByb3BlcnR5KA0KICAgICAgICAgICAgICAgICAgICB0aHJlYWRGbG93TG9jYXRpb25zQXJyYXksDQogICAgICAgICAgICAgICAgICAgIHRocmVhZEZsb3dMb2NhdGlvbnNQb2ludGVyKTsNCg0KICAgICAgICAgICAgICAgIFJlcG9ydEludmFsaWRTdGVwVmFsdWVzKA0KICAgICAgICAgICAgICAgICAgICB0aHJlYWRGbG93LkxvY2F0aW9ucy5Ub0FycmF5KCksDQogICAgICAgICAgICAgICAgICAgIHRocmVhZEZsb3dMb2NhdGlvbnNBcnJheSwNCiAgICAgICAgICAgICAgICAgICAgdGhyZWFkRmxvd0xvY2F0aW9uc1BvaW50ZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSB2b2lkIFJlcG9ydEludmFsaWRTdGVwVmFsdWVzKA0KICAgICAgICAgICAgVGhyZWFkRmxvd0xvY2F0aW9uW10gbG9jYXRpb25zLA0KICAgICAgICAgICAgSkFycmF5IHRocmVhZEZsb3dMb2NhdGlvbnNBcnJheSwNCiAgICAgICAgICAgIHN0cmluZyB0aHJlYWRGbG93TG9jYXRpb25zUG9pbnRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgSk9iamVjdFtdIHRocmVhZEZsb3dMb2NhdGlvbk9iamVjdHMgPSB0aHJlYWRGbG93TG9jYXRpb25zQXJyYXkuQ2hpbGRyZW48Sk9iamVjdD4oKS5Ub0FycmF5KCk7DQoNCiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbG9jYXRpb25zLkxlbmd0aDsgKytpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIE9ubHkgcmVwb3J0ICJpbnZhbGlkIHN0ZXAgdmFsdWUiIGZvciBsb2NhdGlvbnMgdGhhdCBhY3R1YWxseSBzcGVjaWZ5DQogICAgICAgICAgICAgICAgLy8gdGhlICJzdGVwIiBwcm9wZXJ0eSAodGhlIHZhbHVlIG9mIHRoZSBTdGVwIHByb3BlcnR5IGluIHRoZSBvYmplY3QNCiAgICAgICAgICAgICAgICAvLyBtb2RlbCB3aWxsIGJlIDAgZm9yIHN1Y2ggc3RlcHMsIHdoaWNoIGlzIG5ldmVyIHZhbGlkKSwgYmVjYXVzZSB3ZQ0KICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgcmVwb3J0ZWQgdGhlIG1pc3NpbmcgInN0ZXAiIHByb3BlcnRpZXMuDQogICAgICAgICAgICAgICAgaWYgKExvY2F0aW9uSGFzU3RlcCh0aHJlYWRGbG93TG9jYXRpb25PYmplY3RzW2ldKSAmJg0KICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbnNbaV0uU3RlcCAhPSBpICsgMSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHN0cmluZyBpbnZhbGlkU3RlcFBvaW50ZXIgPSB0aHJlYWRGbG93TG9jYXRpb25zUG9pbnRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgLkF0SW5kZXgoaSkuQXRQcm9wZXJ0eShTYXJpZlByb3BlcnR5TmFtZS5TdGVwKTsNCg0KICAgICAgICAgICAgICAgICAgICBMb2dSZXN1bHQoDQogICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkU3RlcFBvaW50ZXIsDQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lb2YoUnVsZVJlc291cmNlcy5TQVJJRjEwMDlfSW52YWxpZFN0ZXBWYWx1ZSksDQogICAgICAgICAgICAgICAgICAgICAgICAoaSArIDEpLlRvSW52YXJpYW50U3RyaW5nKCksDQogICAgICAgICAgICAgICAgICAgICAgICAobG9jYXRpb25zW2ldLlN0ZXApLlRvSW52YXJpYW50U3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBSZXBvcnRNaXNzaW5nU3RlcFByb3BlcnR5KA0KICAgICAgICAgICAgSkFycmF5IHRocmVhZEZsb3dMb2NhdGlvbkFycmF5LA0KICAgICAgICAgICAgc3RyaW5nIHRocmVhZEZsb3dMb2NhdGlvbnNQb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBKT2JqZWN0W10gdGhyZWFkRmxvd0xvY2F0aW9uT2JqZWN0cyA9IHRocmVhZEZsb3dMb2NhdGlvbkFycmF5LkNoaWxkcmVuPEpPYmplY3Q+KCkuVG9BcnJheSgpOw0KICAgICAgICAgICAgaWYgKHRocmVhZEZsb3dMb2NhdGlvbk9iamVjdHMuTGVuZ3RoID4gMCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBKT2JqZWN0W10gbG9jYXRpb25zV2l0aFN0ZXAgPSBHZXRMb2NhdGlvbnNXaXRoU3RlcCh0aHJlYWRGbG93TG9jYXRpb25PYmplY3RzKTsNCg0KICAgICAgICAgICAgICAgIC8vIEl0J3Mgb2sgaWYgdGhlcmUgYXJlIG5vIHN0ZXBzLCBidXQgaWYgYW55IGxvY2F0aW9uIGhhcyBhIHN0ZXAgcHJvcGVydHksDQogICAgICAgICAgICAgICAgLy8gYWxsIGxvY2F0aW9ucyBtdXN0IGhhdmUgaXQuDQogICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uc1dpdGhTdGVwLkxlbmd0aCA+IDAgJiYNCiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25zV2l0aFN0ZXAuTGVuZ3RoIDwgdGhyZWFkRmxvd0xvY2F0aW9uT2JqZWN0cy5MZW5ndGgpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpbnQgbWlzc2luZ1N0ZXBJbmRleCA9IEZpbmRGaXJzdExvY2F0aW9uV2l0aE1pc3NpbmdTdGVwKHRocmVhZEZsb3dMb2NhdGlvbk9iamVjdHMpOw0KICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQobWlzc2luZ1N0ZXBJbmRleCAhPSAtMSwgIkNvdWxkbid0IGZpbmQgbG9jYXRpb24gd2l0aCBtaXNzaW5nIHN0ZXAuIik7DQoNCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIG1pc3NpbmdTdGVwUG9pbnRlciA9IHRocmVhZEZsb3dMb2NhdGlvbnNQb2ludGVyLkF0SW5kZXgobWlzc2luZ1N0ZXBJbmRleCk7DQoNCiAgICAgICAgICAgICAgICAgICAgTG9nUmVzdWx0KG1pc3NpbmdTdGVwUG9pbnRlciwgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDA5X1N0ZXBOb3RQcmVzZW50T25BbGxMb2NhdGlvbnMpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIGludCBGaW5kRmlyc3RMb2NhdGlvbldpdGhNaXNzaW5nU3RlcChKT2JqZWN0W10gdGhyZWFkRmxvd0xvY2F0aW9uT2JqZWN0cykNCiAgICAgICAgew0KICAgICAgICAgICAgaW50IGluZGV4ID0gLTE7DQoNCiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdGhyZWFkRmxvd0xvY2F0aW9uT2JqZWN0cy5MZW5ndGg7ICsraSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoIXRocmVhZEZsb3dMb2NhdGlvbk9iamVjdHNbaV0uSGFzUHJvcGVydHkoU2FyaWZQcm9wZXJ0eU5hbWUuU3RlcCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIGluZGV4Ow0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgSk9iamVjdFtdIEdldExvY2F0aW9uc1dpdGhTdGVwKEpPYmplY3RbXSB0aHJlYWRGbG93TG9jYXRpb25PYmplY3RzKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gdGhyZWFkRmxvd0xvY2F0aW9uT2JqZWN0cw0KICAgICAgICAgICAgICAgIC5XaGVyZShMb2NhdGlvbkhhc1N0ZXApDQogICAgICAgICAgICAgICAgLlRvQXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgTG9jYXRpb25IYXNTdGVwKEpPYmplY3QgbG9jKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gbG9jLkhhc1Byb3BlcnR5KFNhcmlmUHJvcGVydHlOYW1lLlN0ZXApOw0KICAgICAgICB9DQogICAgfQ0KfQ=="
          },
          "hashes": [
            {
              "value": "94FF2EA8E532104E4738B02D0852E1FF",
              "algorithm": "md5"
            },
            {
              "value": "1A5E6BFD822CA2201D1B4C3752325BF0A6728148",
              "algorithm": "sha-1"
            },
            {
              "value": "DD04AB0CAB06CDF2A353AC531C40B6ADEE803BC1CACBA225074D038B390DC8D0",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UriBaseIdRequiresRelativeUri.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Kc29uLlBvaW50ZXI7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLk11bHRpdG9vbC5SdWxlcw0Kew0KICAgIHB1YmxpYyBjbGFzcyBVcmlCYXNlSWRSZXF1aXJlc1JlbGF0aXZlVXJpIDogU2FyaWZWYWxpZGF0aW9uU2tpbW1lckJhc2UNCiAgICB7DQogICAgICAgIHByaXZhdGUgTWVzc2FnZSBfZnVsbERlc2NyaXB0aW9uID0gbmV3IE1lc3NhZ2UNCiAgICAgICAgew0KICAgICAgICAgICAgVGV4dCA9IFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDE0X1VyaUJhc2VJZFJlcXVpcmVzUmVsYXRpdmVVcmkNCiAgICAgICAgfTsNCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgTWVzc2FnZSBGdWxsRGVzY3JpcHRpb24gPT4gX2Z1bGxEZXNjcmlwdGlvbjsNCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgUmVzdWx0TGV2ZWwgRGVmYXVsdExldmVsID0+IFJlc3VsdExldmVsLkVycm9yOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFNBUklGMTAxNA0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIElkID0+IFJ1bGVJZC5VcmlCYXNlSWRSZXF1aXJlc1JlbGF0aXZlVXJpOw0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSBJRW51bWVyYWJsZTxzdHJpbmc+IE1lc3NhZ2VSZXNvdXJjZU5hbWVzDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc3RyaW5nW10NCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIG5hbWVvZihSdWxlUmVzb3VyY2VzLlNBUklGMTAxNF9EZWZhdWx0KQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBbmFseXplKEZpbGVMb2NhdGlvbiBmaWxlTG9jYXRpb24sIHN0cmluZyBmaWxlTG9jYXRpb25Qb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoZmlsZUxvY2F0aW9uLlVyaUJhc2VJZCAhPSBudWxsICYmIGZpbGVMb2NhdGlvbi5VcmkuSXNBYnNvbHV0ZVVyaSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBMb2dSZXN1bHQoDQogICAgICAgICAgICAgICAgICAgIGZpbGVMb2NhdGlvblBvaW50ZXIuQXRQcm9wZXJ0eShTYXJpZlByb3BlcnR5TmFtZS5VcmkpLA0KICAgICAgICAgICAgICAgICAgICBuYW1lb2YoUnVsZVJlc291cmNlcy5TQVJJRjEwMTRfRGVmYXVsdCksDQogICAgICAgICAgICAgICAgICAgIGZpbGVMb2NhdGlvbi5VcmkuT3JpZ2luYWxTdHJpbmcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "D9A3E0CFAE4C55C8D66D9940A0D5B0C4",
              "algorithm": "md5"
            },
            {
              "value": "76F3C35D4F1D87544E7145E1A91030E9EE407D66",
              "algorithm": "sha-1"
            },
            {
              "value": "ADEF38A19C11FEED62009AD99CC79FB5DBAFD62FBC65993FA0E2684CA0EDEE06",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5MaW5xOw0KdXNpbmcgTWljcm9zb2Z0Lkpzb24uUG9pbnRlcjsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5Db2RlQW5hbHlzaXMuU2FyaWYuTXVsdGl0b29sLlJ1bGVzDQp7DQogICAgcHVibGljIGNsYXNzIFVyaXNNdXN0QmVWYWxpZCA6IFNhcmlmVmFsaWRhdGlvblNraW1tZXJCYXNlDQogICAgew0KICAgICAgICBwcml2YXRlIE1lc3NhZ2UgX2Z1bGxEZXNjcmlwdGlvbiA9IG5ldyBNZXNzYWdlDQogICAgICAgIHsNCiAgICAgICAgICAgIFRleHQgPSBSdWxlUmVzb3VyY2VzLlNBUklGMTAwM19VcmlzTXVzdEJlVmFsaWQNCiAgICAgICAgfTsNCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgTWVzc2FnZSBGdWxsRGVzY3JpcHRpb24gPT4gX2Z1bGxEZXNjcmlwdGlvbjsNCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgUmVzdWx0TGV2ZWwgRGVmYXVsdExldmVsID0+IFJlc3VsdExldmVsLkVycm9yOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFNBUklGMTAwMw0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIElkID0+IFJ1bGVJZC5VcmlzTXVzdEJlVmFsaWQ7DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIElFbnVtZXJhYmxlPHN0cmluZz4gTWVzc2FnZVJlc291cmNlTmFtZXMNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzdHJpbmdbXQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDAzX0RlZmF1bHQpDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoU2FyaWZMb2cgbG9nLCBzdHJpbmcgbG9nUG9pbnRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgQW5hbHl6ZVVyaShsb2cuU2NoZW1hVXJpLCBsb2dQb2ludGVyLkF0UHJvcGVydHkoU2FyaWZQcm9wZXJ0eU5hbWUuU2NoZW1hKSk7DQogICAgICAgIH0NCg0KICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBbmFseXplKEZpbGVEYXRhIGZpbGVEYXRhLCBzdHJpbmcgZmlsZUtleSwgc3RyaW5nIGZpbGVQb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBzdHJpbmcgZmlsZVVyaVJlZmVyZW5jZSA9IGZpbGVLZXkuVW5lc2NhcGVKc29uUG9pbnRlcigpOw0KICAgICAgICAgICAgQW5hbHl6ZVVyaShmaWxlVXJpUmVmZXJlbmNlLCBmaWxlUG9pbnRlcik7DQogICAgICAgIH0NCg0KICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBbmFseXplKEZpbGVMb2NhdGlvbiBmaWxlTG9jYXRpb24sIHN0cmluZyBmaWxlTG9jYXRpb25Qb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBBbmFseXplVXJpKGZpbGVMb2NhdGlvbi5VcmksIGZpbGVMb2NhdGlvblBvaW50ZXIuQXRQcm9wZXJ0eShTYXJpZlByb3BlcnR5TmFtZS5VcmkpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoUmVzdWx0IHJlc3VsdCwgc3RyaW5nIHJlc3VsdFBvaW50ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChyZXN1bHQuV29ya0l0ZW1VcmlzICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgVXJpW10gd29ya0l0ZW1VcmlzID0gcmVzdWx0LldvcmtJdGVtVXJpcy5Ub0FycmF5KCk7DQogICAgICAgICAgICAgICAgc3RyaW5nIHdvcmtJdGVtVXJpc1BvaW50ZXIgPSByZXN1bHRQb2ludGVyLkF0UHJvcGVydHkoU2FyaWZQcm9wZXJ0eU5hbWUuV29ya0l0ZW1VcmlzKTsNCg0KICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgd29ya0l0ZW1VcmlzLkxlbmd0aDsgKytpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgQW5hbHl6ZVVyaSh3b3JrSXRlbVVyaXNbaV0sIHdvcmtJdGVtVXJpc1BvaW50ZXIuQXRJbmRleChpKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgQW5hbHl6ZShSdWxlIHJ1bGUsIHN0cmluZyBydWxlUG9pbnRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgQW5hbHl6ZVVyaShydWxlLkhlbHBVcmksIHJ1bGVQb2ludGVyLkF0UHJvcGVydHkoU2FyaWZQcm9wZXJ0eU5hbWUuSGVscFVyaSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgQW5hbHl6ZShSdW4gcnVuLCBzdHJpbmcgcnVuUG9pbnRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHJ1bi5PcmlnaW5hbFVyaUJhc2VJZHMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBzdHJpbmcgb3JpZ2luYWxVcmlCYXNlSWRzUG9pbnRlciA9IHJ1blBvaW50ZXIuQXRQcm9wZXJ0eShTYXJpZlByb3BlcnR5TmFtZS5PcmlnaW5hbFVyaUJhc2VJZHMpOw0KDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIGtleSBpbiBydW4uT3JpZ2luYWxVcmlCYXNlSWRzLktleXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBBbmFseXplVXJpKHJ1bi5PcmlnaW5hbFVyaUJhc2VJZHNba2V5XSwgb3JpZ2luYWxVcmlCYXNlSWRzUG9pbnRlci5BdFByb3BlcnR5KGtleSkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoVG9vbCB0b29sLCBzdHJpbmcgdG9vbFBvaW50ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIEFuYWx5emVVcmkodG9vbC5Eb3dubG9hZFVyaSwgdG9vbFBvaW50ZXIuQXRQcm9wZXJ0eShTYXJpZlByb3BlcnR5TmFtZS5Eb3dubG9hZFVyaSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHZvaWQgQW5hbHl6ZShWZXJzaW9uQ29udHJvbERldGFpbHMgdmVyc2lvbkNvbnRyb2xEZXRhaWxzLCBzdHJpbmcgdmVyc2lvbkNvbnRyb2xEZXRhaWxzUG9pbnRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgQW5hbHl6ZVVyaSh2ZXJzaW9uQ29udHJvbERldGFpbHMuVXJpLCB2ZXJzaW9uQ29udHJvbERldGFpbHNQb2ludGVyLkF0UHJvcGVydHkoU2FyaWZQcm9wZXJ0eU5hbWUuVXJpKSk7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHZvaWQgQW5hbHl6ZVVyaShVcmkgdXJpLCBzdHJpbmcgcG9pbnRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgQW5hbHl6ZVVyaSh1cmk/Lk9yaWdpbmFsU3RyaW5nLCBwb2ludGVyKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBBbmFseXplVXJpKHN0cmluZyB1cmksIHN0cmluZyBwb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAodXJpICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKCFVcmkuSXNXZWxsRm9ybWVkVXJpU3RyaW5nKHVyaSwgVXJpS2luZC5SZWxhdGl2ZU9yQWJzb2x1dGUpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgTG9nUmVzdWx0KHBvaW50ZXIsIG5hbWVvZihSdWxlUmVzb3VyY2VzLlNBUklGMTAwM19EZWZhdWx0KSwgdXJpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "6A1837DFD46BA4DB774FDC24900BE67C",
              "algorithm": "md5"
            },
            {
              "value": "103C94AB280938C404AA177EF736F9D1DF18E537",
              "algorithm": "sha-1"
            },
            {
              "value": "6CDF947BA73AFC247D5CB2E6FB49C0535B2596040CFC31709866A77FFC01453D",
              "algorithm": "sha-256"
            }
          ]
        },
        "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UseAbsolutePathsForNestedFileUriFragments.cs": {
          "mimeType": "text/x-csharp",
          "contents": {
            "binary": "77u/Ly8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuDQovLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLg0KDQp1c2luZyBTeXN0ZW07DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIE1pY3Jvc29mdC5Kc29uLlBvaW50ZXI7DQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuQ29kZUFuYWx5c2lzLlNhcmlmLk11bHRpdG9vbC5SdWxlcw0Kew0KICAgIHB1YmxpYyBjbGFzcyBVc2VBYnNvbHV0ZVBhdGhzRm9yTmVzdGVkRmlsZVVyaUZyYWdtZW50cyA6IFNhcmlmVmFsaWRhdGlvblNraW1tZXJCYXNlDQogICAgew0KICAgICAgICBwcml2YXRlIE1lc3NhZ2UgX2Z1bGxEZXNjcmlwdGlvbiA9IG5ldyBNZXNzYWdlDQogICAgICAgIHsNCiAgICAgICAgICAgIFRleHQgPSBSdWxlUmVzb3VyY2VzLlNBUklGMTAwMl9Vc2VBYnNvbHV0ZVBhdGhzRm9yTmVzdGVkRmlsZVVyaUZyYWdtZW50c0Rlc2NyaXB0aW9uDQogICAgICAgIH07DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIE1lc3NhZ2UgRnVsbERlc2NyaXB0aW9uID0+IF9mdWxsRGVzY3JpcHRpb247DQoNCiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJlc3VsdExldmVsIERlZmF1bHRMZXZlbCA9PiBSZXN1bHRMZXZlbC5FcnJvcjsNCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBTQVJJRjEwMDINCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBJZCA9PiBSdWxlSWQuVXNlQWJzb2x1dGVQYXRoc0Zvck5lc3RlZEZpbGVVcmlGcmFnbWVudHM7DQoNCiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIElFbnVtZXJhYmxlPHN0cmluZz4gTWVzc2FnZVJlc291cmNlTmFtZXMNCiAgICAgICAgew0KICAgICAgICAgICAgZ2V0DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzdHJpbmdbXQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZW9mKFJ1bGVSZXNvdXJjZXMuU0FSSUYxMDAyX0RlZmF1bHQpDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoRmlsZUxvY2F0aW9uIGZpbGVMb2NhdGlvbiwgc3RyaW5nIGZpbGVMb2NhdGlvblBvaW50ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIEFuYWx5emVVcmkoZmlsZUxvY2F0aW9uLlVyaSwgZmlsZUxvY2F0aW9uUG9pbnRlci5BdFByb3BlcnR5KFNhcmlmUHJvcGVydHlOYW1lLlVyaSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gSW4gYWRkaXRpb24gdG8gYXBwZWFyaW5nIGluIGZpbGVMb2NhdGlvbiBvYmplY3RzLCBVUklzIHdpdGggZnJhZ21lbnRzIG1pZ2h0DQogICAgICAgIC8vIGFwcGVhciBhcyBwcm9wZXJ0eSBuYW1lcyBpbiB0aGUgcnVuLmZpbGVzIGRpY3Rpb25hcnkuDQogICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIEFuYWx5emUoRmlsZURhdGEgZmlsZURhdGEsIHN0cmluZyBmaWxlS2V5LCBzdHJpbmcgZmlsZVBvaW50ZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICghVXJpLklzV2VsbEZvcm1lZFVyaVN0cmluZyhmaWxlS2V5LCBVcmlLaW5kLlJlbGF0aXZlT3JBYnNvbHV0ZSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgLy8gSXQgd2Fzbid0IGEgdmFsdWUgVVJJLiBSdWxlIFNBUklGMTAwMywgVXJpc011c3RCZVZhbGlkLCB3aWxsIGNhdGNoIHRoaXMgcHJvYmxlbS4NCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFVyaSBmaWxlS2V5VXJpID0gbmV3IFVyaShmaWxlS2V5LCBVcmlLaW5kLlJlbGF0aXZlT3JBYnNvbHV0ZSk7DQogICAgICAgICAgICBBbmFseXplVXJpKGZpbGVLZXlVcmksIGZpbGVQb2ludGVyKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgdm9pZCBBbmFseXplVXJpKFVyaSB1cmksIHN0cmluZyBwb2ludGVyKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoVXJpSGFzTm9uQWJzb2x1dGVGcmFnbWVudCh1cmkpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIExvZ1Jlc3VsdChwb2ludGVyLCBuYW1lb2YoUnVsZVJlc291cmNlcy5TQVJJRjEwMDJfRGVmYXVsdCksIHVyaS5PcmlnaW5hbFN0cmluZyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIGJvb2wgVXJpSGFzTm9uQWJzb2x1dGVGcmFnbWVudChVcmkgdXJpKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAodXJpID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBZb3UgY2FuJ3QgYWNjZXNzIHRoZSBGcmFnbWVudCBwcm9wZXJ0eSBvZiBhIHJlbGF0aXZlIFVSSSwgc28gaWYgdGhpcyBVUkkgaXMNCiAgICAgICAgICAgIC8vIHJlbGF0aXZlLCB0dXJuIGl0IGludG8gYSBmYWtlIGFic29sdXRlIFVSSSwgYW5kIGdldCB0aGUgZnJhZ21lbnQgZnJvbSB0aGF0Lg0KICAgICAgICAgICAgVXJpIGFic29sdXRlVXJpID0gdXJpLklzQWJzb2x1dGVVcmkNCiAgICAgICAgICAgICAgICA/IHVyaQ0KICAgICAgICAgICAgICAgIDogTWFrZUZha2VBYnNvbHV0ZVVyaSh1cmkpOw0KDQogICAgICAgICAgICBzdHJpbmcgZnJhZ21lbnQgPSBhYnNvbHV0ZVVyaS5GcmFnbWVudDsNCg0KICAgICAgICAgICAgcmV0dXJuICFzdHJpbmcuSXNOdWxsT3JFbXB0eShmcmFnbWVudCkgJiYgIWZyYWdtZW50LlN0YXJ0c1dpdGgoIiMvIiwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFVyaSBfZmFrZUJhc2VVcmkgPSBuZXcgVXJpKCJmaWxlOi8vL3Jvb3QiLCBVcmlLaW5kLkFic29sdXRlKTsNCg0KICAgICAgICBwcml2YXRlIHN0YXRpYyBVcmkgTWFrZUZha2VBYnNvbHV0ZVVyaShVcmkgcmVsYXRpdmVVcmkpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgVXJpKF9mYWtlQmFzZVVyaSwgcmVsYXRpdmVVcmkpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "0063A6EABDCA8799BFB019DDBC8539C8",
              "algorithm": "md5"
            },
            {
              "value": "6B8AD418A3045AC84459E950458D48E6FAD7468B",
              "algorithm": "sha-1"
            },
            {
              "value": "1B4C2015E7BFAF738BF67AA8A0B25BD79926A55426AE10900627A3E15FDE9262",
              "algorithm": "sha-256"
            }
          ]
        }
      },
      "logicalLocations": {
        "Microsoft.CodeAnalysis.Sarif": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Baseline": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Converters": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Driver": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Multitool": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Multitool.Rules": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Processors": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Readers": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.VersionOne": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.VersionOne.Readers": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Visitors": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysis.Sarif.Writers": {
          "kind": "namespace"
        },
        "Microsoft.CodeAnalysisDriver": {
          "kind": "namespace"
        },
        "Microsoft.Json.Pointer": {
          "kind": "namespace"
        },
        "microsoft.json.pointer.dll": {
          "kind": "module"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer": {
          "name": "Microsoft.Json.Pointer",
          "parentKey": "microsoft.json.pointer.dll",
          "kind": "namespace"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.JsonPointer": {
          "name": "JsonPointer",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer",
          "kind": "type"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.JsonPointer..ctor(System.String,Microsoft.Json.Pointer.JsonPointerRepresentation)": {
          "name": ".ctor(System.String,Microsoft.Json.Pointer.JsonPointerRepresentation)",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.JsonPointer",
          "kind": "member"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.Resources": {
          "name": "Resources",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer",
          "kind": "type"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions": {
          "name": "StringExtensions",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer",
          "kind": "type"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions.AtIndex(System.String,System.Int32)": {
          "name": "AtIndex(System.String,System.Int32)",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions",
          "kind": "member"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions.AtProperty(System.String,System.String)": {
          "name": "AtProperty(System.String,System.String)",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions",
          "kind": "member"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions.UnescapeJsonPointer(System.String)": {
          "name": "UnescapeJsonPointer(System.String)",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions",
          "kind": "member"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.VersionConstants": {
          "name": "VersionConstants",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer",
          "kind": "type"
        },
        "microsoft.json.pointer.dll!Microsoft.Json.Pointer.VersionConstants.PreRelease": {
          "name": "PreRelease",
          "parentKey": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.VersionConstants",
          "kind": "member"
        },
        "microsoft.json.schema.dll": {
          "kind": "module"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema": {
          "name": "Microsoft.Json.Schema",
          "parentKey": "microsoft.json.schema.dll",
          "kind": "namespace"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.AdditionalItems": {
          "name": "AdditionalItems",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.AdditionalItems..ctor(Microsoft.Json.Schema.AdditionalItems)": {
          "name": ".ctor(Microsoft.Json.Schema.AdditionalItems)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.AdditionalItems",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.AdditionalProperties": {
          "name": "AdditionalProperties",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.AdditionalProperties..ctor(Microsoft.Json.Schema.AdditionalProperties)": {
          "name": ".ctor(Microsoft.Json.Schema.AdditionalProperties)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.AdditionalProperties",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.Dependency": {
          "name": "Dependency",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.Dependency..ctor(Microsoft.Json.Schema.Dependency)": {
          "name": ".ctor(Microsoft.Json.Schema.Dependency)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.Dependency",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.Dependency.PropertyDependencies": {
          "name": "PropertyDependencies",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.Dependency",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.DependencyConverter": {
          "name": "DependencyConverter",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.DependencyConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.DependencyConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.Error": {
          "name": "Error",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.Error.CreateException(System.String,System.Object[])": {
          "name": "CreateException(System.String,System.Object[])",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.Error",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.Items": {
          "name": "Items",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.Items..ctor(Microsoft.Json.Schema.Items)": {
          "name": ".ctor(Microsoft.Json.Schema.Items)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.Items",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.Items.Schemas": {
          "name": "Schemas",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.Items",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.ItemsConverter": {
          "name": "ItemsConverter",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.ItemsConverter.Instance": {
          "name": "Instance",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.ItemsConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.ItemsConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.ItemsConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema": {
          "name": "JsonSchema",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema..ctor(Microsoft.Json.Schema.JsonSchema)": {
          "name": ".ctor(Microsoft.Json.Schema.JsonSchema)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.AllOf": {
          "name": "AllOf",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.AnyOf": {
          "name": "AnyOf",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Collapse(Microsoft.Json.Schema.JsonSchema,Microsoft.Json.Schema.JsonSchema)": {
          "name": "Collapse(Microsoft.Json.Schema.JsonSchema,Microsoft.Json.Schema.JsonSchema)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Definitions": {
          "name": "Definitions",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Dependencies": {
          "name": "Dependencies",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Enum": {
          "name": "Enum",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Equals(Microsoft.Json.Schema.JsonSchema)": {
          "name": "Equals(Microsoft.Json.Schema.JsonSchema)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.OneOf": {
          "name": "OneOf",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.PatternProperties": {
          "name": "PatternProperties",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Properties": {
          "name": "Properties",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Required": {
          "name": "Required",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Type": {
          "name": "Type",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchemaContractResolver": {
          "name": "JsonSchemaContractResolver",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchemaContractResolver.ResolveContract(System.Type)": {
          "name": "ResolveContract(System.Type)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchemaContractResolver",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchemaExtensions": {
          "name": "JsonSchemaExtensions",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchemaExtensions.SafeGetType(Microsoft.Json.Schema.JsonSchema)": {
          "name": "SafeGetType(Microsoft.Json.Schema.JsonSchema)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchemaExtensions",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSerializerExtensions": {
          "name": "JsonSerializerExtensions",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSerializerExtensions.CaptureError(Newtonsoft.Json.JsonSerializer,Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])": {
          "name": "CaptureError(Newtonsoft.Json.JsonSerializer,Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSerializerExtensions",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSyntaxException": {
          "name": "JsonSyntaxException",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSyntaxException..ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)": {
          "name": ".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSyntaxException",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JTokenTypeExtensions": {
          "name": "JTokenTypeExtensions",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.JTokenTypeExtensions.ToSchemaType(Newtonsoft.Json.Linq.JTokenType)": {
          "name": "ToSchemaType(Newtonsoft.Json.Linq.JTokenType)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.JTokenTypeExtensions",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.MustBeStringConverter": {
          "name": "MustBeStringConverter",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.MustBeStringConverter.CanConvert(System.Type)": {
          "name": "CanConvert(System.Type)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.MustBeStringConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.MustBeStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.MustBeStringConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.RefProperty": {
          "name": "RefProperty",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.RefProperty.s_inputPattern": {
          "name": "s_inputPattern",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.RefProperty",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.RefProperty.s_outputPattern": {
          "name": "s_outputPattern",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.RefProperty",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaReader": {
          "name": "SchemaReader",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaReader.ReadSchema(System.IO.TextReader,System.String)": {
          "name": "ReadSchema(System.IO.TextReader,System.String)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaReader",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaReader.ReadSchema(System.String,System.String)": {
          "name": "ReadSchema(System.String,System.String)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaReader",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter": {
          "name": "SchemaTypeConverter",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter.SchemaTypeFromString(System.String)": {
          "name": "SchemaTypeFromString(System.String)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter+<>c": {
          "name": "SchemaTypeConverter+<>c",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter+<>c.<WriteJson>b__3_0(Microsoft.Json.Schema.SchemaType)": {
          "name": "<WriteJson>b__3_0(Microsoft.Json.Schema.SchemaType)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter+<>c",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException": {
          "name": "SchemaValidationException",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException..ctor(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])": {
          "name": ".ctor(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException..ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)": {
          "name": ".ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException.Args": {
          "name": "Args",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter": {
          "name": "SchemaWriter",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter.WriteSchema(Newtonsoft.Json.JsonWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)": {
          "name": "WriteSchema(Newtonsoft.Json.JsonWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter.WriteSchema(System.IO.TextWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)": {
          "name": "WriteSchema(System.IO.TextWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment": {
          "name": "UriOrFragment",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment..ctor(Microsoft.Json.Schema.UriOrFragment)": {
          "name": ".ctor(Microsoft.Json.Schema.UriOrFragment)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment..ctor(System.String)": {
          "name": ".ctor(System.String)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment.Equals(System.Object)": {
          "name": "Equals(System.Object)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentConverter": {
          "name": "UriOrFragmentConverter",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentConverter",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentExtensions": {
          "name": "UriOrFragmentExtensions",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentExtensions.GetDefinitionName(Microsoft.Json.Schema.UriOrFragment)": {
          "name": "GetDefinitionName(Microsoft.Json.Schema.UriOrFragment)",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentExtensions",
          "kind": "member"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.VersionConstants": {
          "name": "VersionConstants",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema",
          "kind": "type"
        },
        "microsoft.json.schema.dll!Microsoft.Json.Schema.VersionConstants.PreRelease": {
          "name": "PreRelease",
          "parentKey": "microsoft.json.schema.dll!Microsoft.Json.Schema.VersionConstants",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll": {
          "kind": "module"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation": {
          "name": "Microsoft.Json.Schema.Validation",
          "parentKey": "microsoft.json.schema.validation.dll",
          "kind": "namespace"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JsonSyntaxErrorExceptionExtensions": {
          "name": "JsonSyntaxErrorExceptionExtensions",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation",
          "kind": "type"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JsonSyntaxErrorExceptionExtensions.ToSarifResult(Microsoft.Json.Schema.JsonSyntaxException)": {
          "name": "ToSarifResult(Microsoft.Json.Schema.JsonSyntaxException)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JsonSyntaxErrorExceptionExtensions",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JTokenEqualityComparer": {
          "name": "JTokenEqualityComparer",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation",
          "kind": "type"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JTokenEqualityComparer.NullEquals(System.Object)": {
          "name": "NullEquals(System.Object)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JTokenEqualityComparer",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.ResultFactory": {
          "name": "ResultFactory",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation",
          "kind": "type"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.ResultFactory.CreateResult(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])": {
          "name": "CreateResult(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.ResultFactory",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleExtensions": {
          "name": "RuleExtensions",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation",
          "kind": "type"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleExtensions.SetResultFile(Microsoft.CodeAnalysis.Sarif.Result,System.String)": {
          "name": "SetResultFile(Microsoft.CodeAnalysis.Sarif.Result,System.String)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleExtensions",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleFactory": {
          "name": "RuleFactory",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation",
          "kind": "type"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleFactory.ErrorCodeFormat": {
          "name": "ErrorCodeFormat",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleFactory",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleFactory.GetRuleFromRuleId(System.String)": {
          "name": "GetRuleFromRuleId(System.String)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleFactory",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleResources": {
          "name": "RuleResources",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation",
          "kind": "type"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator": {
          "name": "Validator",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation",
          "kind": "type"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.FormatBoolean(System.String)": {
          "name": "FormatBoolean(System.String)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.FormatObject(System.Object)": {
          "name": "FormatObject(System.Object)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.GetPropertyNames(Newtonsoft.Json.Linq.JObject)": {
          "name": "GetPropertyNames(Newtonsoft.Json.Linq.JObject)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.TokenMatchesEnum(Newtonsoft.Json.Linq.JToken,System.Collections.Generic.IList`1<System.Object>)": {
          "name": "TokenMatchesEnum(Newtonsoft.Json.Linq.JToken,System.Collections.Generic.IList`1<System.Object>)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.UnicodeLength(System.String)": {
          "name": "UnicodeLength(System.String)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.ValidateAdditionalProperties(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.List`1<System.String>,Microsoft.Json.Schema.AdditionalProperties)": {
          "name": "ValidateAdditionalProperties(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.List`1<System.String>,Microsoft.Json.Schema.AdditionalProperties)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.ValidateToken(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.JsonSchema)": {
          "name": "ValidateToken(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.JsonSchema)",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator",
          "kind": "member"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.VersionConstants": {
          "name": "VersionConstants",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation",
          "kind": "type"
        },
        "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.VersionConstants.PreRelease": {
          "name": "PreRelease",
          "parentKey": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.VersionConstants",
          "kind": "member"
        },
        "sarif.converters.dll": {
          "kind": "module"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters": {
          "name": "Microsoft.CodeAnalysis.Sarif.Converters",
          "parentKey": "sarif.converters.dll",
          "kind": "namespace"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.AndroidStudioConverter": {
          "name": "AndroidStudioConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.AndroidStudioConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)": {
          "name": "Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.AndroidStudioConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.AssemblyLoadFileDelegate": {
          "name": "AssemblyLoadFileDelegate",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ClangAnalyzerConverter": {
          "name": "ClangAnalyzerConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ClangAnalyzerConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)": {
          "name": "Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ClangAnalyzerConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ClangAnalyzerConverter.ReadDictionary(System.Xml.XmlReader)": {
          "name": "ReadDictionary(System.Xml.XmlReader)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ClangAnalyzerConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources": {
          "name": "ConverterResources",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources..ctor()": {
          "name": ".ctor()",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.CppCheckConverter": {
          "name": "CppCheckConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.CppCheckConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)": {
          "name": "Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.CppCheckConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.Extensions": {
          "name": "Extensions",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.Extensions.HasDefaultConstructor(System.Type)": {
          "name": "HasDefaultConstructor(System.Type)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.Extensions",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.Extensions.MatchesToolFormat(System.String,System.String)": {
          "name": "MatchesToolFormat(System.String,System.String)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.Extensions",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyConverter": {
          "name": "FortifyConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)": {
          "name": "Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter": {
          "name": "FortifyFprConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.AddMessagesToResults()": {
          "name": "AddMessagesToResults()",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseAuditStream(System.IO.Stream)": {
          "name": "ParseAuditStream(System.IO.Stream)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseFile()": {
          "name": "ParseFile()",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseRegion()": {
          "name": "ParseRegion()",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseSnippet()": {
          "name": "ParseSnippet()",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopConverter": {
          "name": "FxCopConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopConverter.BuildFileLocationFromFxCopReference(System.String)": {
          "name": "BuildFileLocationFromFxCopReference(System.String)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopConverter.CreateRule(Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader+Context)": {
          "name": "CreateRule(Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader+Context)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader": {
          "name": "FxCopLogReader",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader.Read(Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader+Context,System.IO.Stream)": {
          "name": "Read(Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader+Context,System.IO.Stream)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.LogReader`1": {
          "name": "LogReader`1",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.LogReader`1.ReadLog(System.String,System.Text.Encoding)": {
          "name": "ReadLog(System.String,System.Text.Encoding)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.LogReader`1",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PluginConverterFactory": {
          "name": "PluginConverterFactory",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PluginConverterFactory.CreateConverterCore(System.String)": {
          "name": "CreateConverterCore(System.String)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PluginConverterFactory",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter": {
          "name": "PREfastConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)": {
          "name": "Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect)": {
          "name": "CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.GenerateCodeFlows(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "GenerateCodeFlows(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.RemovePREfastNewLine(System.String)": {
          "name": "RemovePREfastNewLine(System.String)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.SetProbability(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "SetProbability(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.SetRank(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "SetRank(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter": {
          "name": "PylintConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry)": {
          "name": "CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter": {
          "name": "SemmleQLConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.GetResultsFromStream(System.IO.Stream)": {
          "name": "GetResultsFromStream(System.IO.Stream)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)": {
          "name": "NormalizeRawMessage(System.String,System.String&)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.s_delimiters": {
          "name": "s_delimiters",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.SemmleError": {
          "name": "SemmleError",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.SemmleRecommendation": {
          "name": "SemmleRecommendation",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.SemmleWarning": {
          "name": "SemmleWarning",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReader": {
          "name": "SparseReader",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReader.CreateFromStream(Microsoft.CodeAnalysis.Sarif.Converters.SparseReaderDispatchTable,System.IO.Stream,System.Xml.Schema.XmlSchemaSet)": {
          "name": "CreateFromStream(Microsoft.CodeAnalysis.Sarif.Converters.SparseReaderDispatchTable,System.IO.Stream,System.Xml.Schema.XmlSchemaSet)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReader",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReader.ReadChildren(System.String,System.Object,System.String&)": {
          "name": "ReadChildren(System.String,System.Object,System.String&)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReader",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReaderDispatchTable": {
          "name": "SparseReaderDispatchTable",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter": {
          "name": "StaticDriverVerifierConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter._sb": {
          "name": "_sb",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter.IsHarnessOrRulesFiles(System.String)": {
          "name": "IsHarnessOrRulesFiles(System.String)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter.ProcessLine(System.String,System.Int32&,Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "ProcessLine(System.String,System.Int32&,Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StringReference": {
          "name": "StringReference",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StringReference.Equals(System.Object,System.Object)": {
          "name": "Equals(System.Object,System.Object)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StringReference",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFileConverterBase": {
          "name": "ToolFileConverterBase",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFileConverterBase.GetLogicalLocationName(System.String,System.String,System.String)": {
          "name": "GetLogicalLocationName(System.String,System.String,System.String)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFileConverterBase",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat": {
          "name": "ToolFormat",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.CppCheck": {
          "name": "CppCheck",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.FortifyFpr": {
          "name": "FortifyFpr",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.PREfast": {
          "name": "PREfast",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.Pylint": {
          "name": "Pylint",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.SemmleQL": {
          "name": "SemmleQL",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter": {
          "name": "ToolFormatConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter..ctor(Microsoft.CodeAnalysis.Sarif.Converters.AssemblyLoadFileDelegate)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Converters.AssemblyLoadFileDelegate)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter.ConvertToStandardFormat(System.String,System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String)": {
          "name": "ConvertToStandardFormat(System.String,System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter.ConvertToStandardFormat(System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String)": {
          "name": "ConvertToStandardFormat(System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintConverter": {
          "name": "TSLintConverter",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLogEntry)": {
          "name": "CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLogEntry)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintConverter",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader": {
          "name": "TSLintLogReader",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.NormalizeEntries(Newtonsoft.Json.Linq.JArray)": {
          "name": "NormalizeEntries(Newtonsoft.Json.Linq.JArray)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.NormalizeFixProperty(Newtonsoft.Json.Linq.JProperty)": {
          "name": "NormalizeFixProperty(Newtonsoft.Json.Linq.JProperty)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.NormalizeLog(Newtonsoft.Json.Linq.JToken)": {
          "name": "NormalizeLog(Newtonsoft.Json.Linq.JToken)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.ReadLog(System.IO.Stream)": {
          "name": "ReadLog(System.IO.Stream)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel": {
          "name": "Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel",
          "parentKey": "sarif.converters.dll",
          "kind": "namespace"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Category": {
          "name": "Category",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Category.ReadXml(System.Xml.XmlReader)": {
          "name": "ReadXml(System.Xml.XmlReader)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Category",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect": {
          "name": "Defect",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect.Category": {
          "name": "Category",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect.Funcline": {
          "name": "Funcline",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect.SFA": {
          "name": "SFA",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.DefectList": {
          "name": "DefectList",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.DefectList.Defects": {
          "name": "Defects",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.DefectList",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.PREFastPath": {
          "name": "PREFastPath",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.PREFastPath.SFAs": {
          "name": "SFAs",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.PREFastPath",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.SFA": {
          "name": "SFA",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel": {
          "name": "Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel",
          "parentKey": "sarif.converters.dll",
          "kind": "namespace"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLog": {
          "name": "PylintLog",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry": {
          "name": "PylintLogEntry",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry.Type": {
          "name": "Type",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogReader": {
          "name": "PylintLogReader",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogReader.ReadLog(System.IO.Stream)": {
          "name": "ReadLog(System.IO.Stream)",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogReader",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel": {
          "name": "Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel",
          "parentKey": "sarif.converters.dll",
          "kind": "namespace"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLog": {
          "name": "TSLintLog",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLogEntry": {
          "name": "TSLintLogEntry",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel",
          "kind": "type"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLogEntry.Fixes": {
          "name": "Fixes",
          "parentKey": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLogEntry",
          "kind": "member"
        },
        "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources": {
          "name": "Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources",
          "parentKey": "sarif.converters.dll",
          "kind": "resource"
        },
        "sarif.dll": {
          "kind": "module"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif": {
          "name": "Microsoft.CodeAnalysis.Sarif",
          "parentKey": "sarif.dll",
          "kind": "namespace"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Attachment": {
          "name": "Attachment",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Attachment.Rectangles": {
          "name": "Rectangles",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Attachment",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Attachment.Regions": {
          "name": "Regions",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Attachment",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow": {
          "name": "CodeFlow",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow..ctor(Microsoft.CodeAnalysis.Sarif.CodeFlow)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.CodeFlow)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow..ctor(Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlow>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlow>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow.ThreadFlows": {
          "name": "ThreadFlows",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ConsoleLogger": {
          "name": "ConsoleLogger",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ConsoleLogger.FormatNotificationMessage(Microsoft.CodeAnalysis.Sarif.Notification)": {
          "name": "FormatNotificationMessage(Microsoft.CodeAnalysis.Sarif.Notification)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ConsoleLogger",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ConsoleLogger.NormalizeMessage(System.String,System.Boolean)": {
          "name": "NormalizeMessage(System.String,System.Boolean)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ConsoleLogger",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Conversion": {
          "name": "Conversion",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Conversion.AnalysisToolLogFiles": {
          "name": "AnalysisToolLogFiles",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Conversion",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Edge": {
          "name": "Edge",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Edge..ctor(Microsoft.CodeAnalysis.Sarif.Edge)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Edge)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Edge",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Edge..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Edge",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal": {
          "name": "EdgeTraversal",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal..ctor(Microsoft.CodeAnalysis.Sarif.EdgeTraversal)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.EdgeTraversal)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Int32,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Int32,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal.FinalState": {
          "name": "FinalState",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExceptionData": {
          "name": "ExceptionData",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExceptionData.Create(System.Exception)": {
          "name": "Create(System.Exception)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExceptionData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExceptionData.InnerExceptions": {
          "name": "InnerExceptions",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExceptionData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExtensionMethods": {
          "name": "ExtensionMethods",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExtensionMethods.GetFileName(System.Uri)": {
          "name": "GetFileName(System.Uri)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExtensionMethods",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExtensionMethods.ToFlags(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData>)": {
          "name": "ToFlags(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExtensionMethods",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileChange": {
          "name": "FileChange",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileChange.Replacements": {
          "name": "Replacements",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileChange",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData": {
          "name": "FileData",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData..ctor(Microsoft.CodeAnalysis.Sarif.FileData)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.FileData)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData..ctor(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.FileRoles,System.String,Microsoft.CodeAnalysis.Sarif.FileContent,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Hash>,System.DateTime,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.FileRoles,System.String,Microsoft.CodeAnalysis.Sarif.FileContent,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Hash>,System.DateTime,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData.Create(System.Uri,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String,System.Text.Encoding,Microsoft.CodeAnalysis.Sarif.IFileSystem)": {
          "name": "Create(System.Uri,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String,System.Text.Encoding,Microsoft.CodeAnalysis.Sarif.IFileSystem)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData.Hashes": {
          "name": "Hashes",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileDataEqualityComparer": {
          "name": "FileDataEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileDataEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.FileData,Microsoft.CodeAnalysis.Sarif.FileData)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.FileData,Microsoft.CodeAnalysis.Sarif.FileData)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileDataEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation": {
          "name": "FileLocation",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation..ctor(System.Uri,System.String)": {
          "name": ".ctor(System.Uri,System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation.CreateFromFilesDictionaryKey(System.String)": {
          "name": "CreateFromFilesDictionaryKey(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation.TryReconstructAbsoluteUri(System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Uri&)": {
          "name": "TryReconstructAbsoluteUri(System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Uri&)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation.UriBaseId": {
          "name": "UriBaseId",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache": {
          "name": "FileRegionsCache",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache._filePathToNewLineIndexMap": {
          "name": "_filePathToNewLineIndexMap",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache._run": {
          "name": "_run",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache.PopulateCharLength(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region)": {
          "name": "PopulateCharLength(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache.PopulateEndColumn(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region,System.String)": {
          "name": "PopulateEndColumn(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region,System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache.PopulatePropertiesFromCharOffsetAndLength(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region)": {
          "name": "PopulatePropertiesFromCharOffsetAndLength(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Fix": {
          "name": "Fix",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Fix.FileChanges": {
          "name": "FileChanges",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Fix",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph": {
          "name": "Graph",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph..ctor(Microsoft.CodeAnalysis.Sarif.Graph)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Graph)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Node>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Edge>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Node>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Edge>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph.Edges": {
          "name": "Edges",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph.Nodes": {
          "name": "Nodes",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphEqualityComparer": {
          "name": "GraphEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Graph,Microsoft.CodeAnalysis.Sarif.Graph)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.Graph,Microsoft.CodeAnalysis.Sarif.Graph)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal": {
          "name": "GraphTraversal",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal..ctor(Microsoft.CodeAnalysis.Sarif.GraphTraversal)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.GraphTraversal)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.EdgeTraversal>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.EdgeTraversal>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal.EdgeTraversals": {
          "name": "EdgeTraversals",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal.InitialState": {
          "name": "InitialState",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversalEqualityComparer": {
          "name": "GraphTraversalEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversalEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.GraphTraversal,Microsoft.CodeAnalysis.Sarif.GraphTraversal)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.GraphTraversal,Microsoft.CodeAnalysis.Sarif.GraphTraversal)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversalEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData": {
          "name": "HashData",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData..ctor(System.String,System.String,System.String)": {
          "name": ".ctor(System.String,System.String,System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData.Sha1": {
          "name": "Sha1",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData.Sha256": {
          "name": "Sha256",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities": {
          "name": "HashUtilities",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeHashes(System.String)": {
          "name": "ComputeHashes(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeMD5Hash(System.String)": {
          "name": "ComputeMD5Hash(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeSha1Hash(System.String)": {
          "name": "ComputeSha1Hash(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeSha256Hash(System.String)": {
          "name": "ComputeSha256Hash(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.IAnalysisContext": {
          "name": "IAnalysisContext",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.IAnalysisContext.Policy": {
          "name": "Policy",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.IAnalysisContext",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.IFileSystem": {
          "name": "IFileSystem",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.IFileSystem.WriteAllBytes(System.String,System.Byte[])": {
          "name": "WriteAllBytes(System.String,System.Byte[])",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.IFileSystem",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.IMarker": {
          "name": "IMarker",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.IntegerSet": {
          "name": "IntegerSet",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation": {
          "name": "Invocation",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(Microsoft.CodeAnalysis.Sarif.Invocation)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Invocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Arguments": {
          "name": "Arguments",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Attachments": {
          "name": "Attachments",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.ConfigurationNotifications": {
          "name": "ConfigurationNotifications",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Create(System.Boolean,System.Collections.Generic.IEnumerable`1<System.String>)": {
          "name": "Create(System.Boolean,System.Collections.Generic.IEnumerable`1<System.String>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.EnvironmentVariables": {
          "name": "EnvironmentVariables",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Init(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": "Init(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.ResponseFiles": {
          "name": "ResponseFiles",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Stderr": {
          "name": "Stderr",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Stdin": {
          "name": "Stdin",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Stdout": {
          "name": "Stdout",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.StdoutStderr": {
          "name": "StdoutStderr",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.ToolNotifications": {
          "name": "ToolNotifications",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer": {
          "name": "InvocationEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Invocation,Microsoft.CodeAnalysis.Sarif.Invocation)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.Invocation,Microsoft.CodeAnalysis.Sarif.Invocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.Invocation)": {
          "name": "GetHashCode(Microsoft.CodeAnalysis.Sarif.Invocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.IOptionsProvider": {
          "name": "IOptionsProvider",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.IOptionsProvider.GetOptions()": {
          "name": "GetOptions()",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.IOptionsProvider",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ISarifNode": {
          "name": "ISarifNode",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ISarifNode.SarifNodeKind": {
          "name": "SarifNodeKind",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ISarifNode",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location": {
          "name": "Location",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location..ctor(Microsoft.CodeAnalysis.Sarif.Location)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Location)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location..ctor(Microsoft.CodeAnalysis.Sarif.PhysicalLocation,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Region>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.PhysicalLocation,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Region>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location.Annotations": {
          "name": "Annotations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Message": {
          "name": "Message",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Message.Arguments": {
          "name": "Arguments",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Message",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash": {
          "name": "MultiplyByPrimesHash",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash.AddRange(System.Collections.Generic.IEnumerable`1<System.Int32>)": {
          "name": "AddRange(System.Collections.Generic.IEnumerable`1<System.Int32>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash.AddRange(System.Collections.IEnumerable)": {
          "name": "AddRange(System.Collections.IEnumerable)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash.AddRange(System.Int32[])": {
          "name": "AddRange(System.Int32[])",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.NewLineIndex": {
          "name": "NewLineIndex",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.NewLineIndex..ctor(System.String)": {
          "name": ".ctor(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.NewLineIndex",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node": {
          "name": "Node",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node..ctor(Microsoft.CodeAnalysis.Sarif.Node)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Node)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Location,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Node>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Location,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Node>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node.Children": {
          "name": "Children",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notes": {
          "name": "Notes",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notes.Msg001AnalyzingTarget": {
          "name": "Msg001AnalyzingTarget",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notes",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notification": {
          "name": "Notification",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notification..ctor(Microsoft.CodeAnalysis.Sarif.Notification)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Notification)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notification",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notification..ctor(System.String,System.String,Microsoft.CodeAnalysis.Sarif.PhysicalLocation,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.FailureLevel,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.ExceptionData,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.String,Microsoft.CodeAnalysis.Sarif.PhysicalLocation,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.FailureLevel,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.ExceptionData,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notification",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData": {
          "name": "OptionallyEmittedData",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary": {
          "name": "PropertiesDictionary",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary.LoadFromXml(System.IO.Stream)": {
          "name": "LoadFromXml(System.IO.Stream)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary.SaveToJson(System.String,System.Boolean)": {
          "name": "SaveToJson(System.String,System.Boolean)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary.TryGetProperty`1(System.String,!!0&)": {
          "name": "TryGetProperty`1(System.String,!!0&)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertyBagHolder": {
          "name": "PropertyBagHolder",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertyBagHolder.SetProperty`1(System.String,!!0)": {
          "name": "SetProperty`1(System.String,!!0)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertyBagHolder",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Region": {
          "name": "Region",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Region..ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.FileContent,Microsoft.CodeAnalysis.Sarif.Message)": {
          "name": ".ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.FileContent,Microsoft.CodeAnalysis.Sarif.Message)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Region",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Resources": {
          "name": "Resources",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Resources.MessageStrings": {
          "name": "MessageStrings",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Resources",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Resources.Rules": {
          "name": "Rules",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Resources",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result": {
          "name": "Result",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result..ctor(Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result..ctor(System.String,Microsoft.CodeAnalysis.Sarif.ResultLevel,Microsoft.CodeAnalysis.Sarif.Message,System.String,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Stack>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.CodeFlow>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.GraphTraversal>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,Microsoft.CodeAnalysis.Sarif.SuppressionStates,Microsoft.CodeAnalysis.Sarif.BaselineState,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.Collections.Generic.IEnumerable`1<System.Uri>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.PhysicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Fix>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.ResultLevel,Microsoft.CodeAnalysis.Sarif.Message,System.String,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Stack>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.CodeFlow>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.GraphTraversal>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,Microsoft.CodeAnalysis.Sarif.SuppressionStates,Microsoft.CodeAnalysis.Sarif.BaselineState,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.Collections.Generic.IEnumerable`1<System.Uri>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.PhysicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Fix>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Attachments": {
          "name": "Attachments",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.CodeFlows": {
          "name": "CodeFlows",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.ConversionProvenance": {
          "name": "ConversionProvenance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Fingerprints": {
          "name": "Fingerprints",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Fixes": {
          "name": "Fixes",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Graphs": {
          "name": "Graphs",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.GraphTraversals": {
          "name": "GraphTraversals",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Init(System.String,Microsoft.CodeAnalysis.Sarif.ResultLevel,Microsoft.CodeAnalysis.Sarif.Message,System.String,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Stack>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.CodeFlow>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.GraphTraversal>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,Microsoft.CodeAnalysis.Sarif.SuppressionStates,Microsoft.CodeAnalysis.Sarif.BaselineState,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.Collections.Generic.IEnumerable`1<System.Uri>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.PhysicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Fix>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": "Init(System.String,Microsoft.CodeAnalysis.Sarif.ResultLevel,Microsoft.CodeAnalysis.Sarif.Message,System.String,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Stack>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.CodeFlow>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.GraphTraversal>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,Microsoft.CodeAnalysis.Sarif.SuppressionStates,Microsoft.CodeAnalysis.Sarif.BaselineState,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.Collections.Generic.IEnumerable`1<System.Uri>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.PhysicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Fix>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Locations": {
          "name": "Locations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.PartialFingerprints": {
          "name": "PartialFingerprints",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.RelatedLocations": {
          "name": "RelatedLocations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Stacks": {
          "name": "Stacks",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.WorkItemUris": {
          "name": "WorkItemUris",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer": {
          "name": "ResultEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "GetHashCode(Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule": {
          "name": "Rule",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule..ctor(Microsoft.CodeAnalysis.Sarif.Rule)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Rule)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.ReportingConfiguration,System.Uri,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.ReportingConfiguration,System.Uri,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule.MessageStrings": {
          "name": "MessageStrings",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule.RichMessageStrings": {
          "name": "RichMessageStrings",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ReportingConfiguration": {
          "name": "ReportingConfiguration",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ReportingConfiguration.Parameters": {
          "name": "Parameters",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ReportingConfiguration",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleEqualityComparer": {
          "name": "RuleEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Rule,Microsoft.CodeAnalysis.Sarif.Rule)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.Rule,Microsoft.CodeAnalysis.Sarif.Rule)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleUtilities": {
          "name": "RuleUtilities",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleUtilities.BuildDictionary(System.Resources.ResourceManager,System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.String)": {
          "name": "BuildDictionary(System.Resources.ResourceManager,System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleUtilities.NormalizeRuleMessageId(System.String,System.String,System.String)": {
          "name": "NormalizeRuleMessageId(System.String,System.String,System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run": {
          "name": "Run",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run..ctor(Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run..ctor(Microsoft.CodeAnalysis.Sarif.Tool,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Invocation>,Microsoft.CodeAnalysis.Sarif.Conversion,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionControlDetails>,System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.FileData>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.LogicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Result>,Microsoft.CodeAnalysis.Sarif.Resources,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.ColumnKind,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Tool,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Invocation>,Microsoft.CodeAnalysis.Sarif.Conversion,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionControlDetails>,System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.FileData>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.LogicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Result>,Microsoft.CodeAnalysis.Sarif.Resources,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.ColumnKind,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Files": {
          "name": "Files",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Graphs": {
          "name": "Graphs",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Init(Microsoft.CodeAnalysis.Sarif.Tool,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Invocation>,Microsoft.CodeAnalysis.Sarif.Conversion,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionControlDetails>,System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.FileData>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.LogicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Result>,Microsoft.CodeAnalysis.Sarif.Resources,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.ColumnKind,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": "Init(Microsoft.CodeAnalysis.Sarif.Tool,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Invocation>,Microsoft.CodeAnalysis.Sarif.Conversion,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionControlDetails>,System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.FileData>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.LogicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Result>,Microsoft.CodeAnalysis.Sarif.Resources,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.ColumnKind,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Invocations": {
          "name": "Invocations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.LogicalLocations": {
          "name": "LogicalLocations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.OriginalUriBaseIds": {
          "name": "OriginalUriBaseIds",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Results": {
          "name": "Results",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.VersionControlProvenance": {
          "name": "VersionControlProvenance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RunEqualityComparer": {
          "name": "RunEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RunEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RunEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RunEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "GetHashCode(Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RunEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuntimeConditions": {
          "name": "RuntimeConditions",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifConstants": {
          "name": "SarifConstants",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifLog": {
          "name": "SarifLog",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifLog.Runs": {
          "name": "Runs",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifLog",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifNodeKind": {
          "name": "SarifNodeKind",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifNodeKind.SarifLog": {
          "name": "SarifLog",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifNodeKind",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor": {
          "name": "SarifRewritingVisitor",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor.VisitActual(Microsoft.CodeAnalysis.Sarif.ISarifNode)": {
          "name": "VisitActual(Microsoft.CodeAnalysis.Sarif.ISarifNode)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor.VisitSarifLog(Microsoft.CodeAnalysis.Sarif.SarifLog)": {
          "name": "VisitSarifLog(Microsoft.CodeAnalysis.Sarif.SarifLog)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities": {
          "name": "SarifUtilities",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.AddOrUpdateDictionaryEntry`2(System.Collections.Generic.IDictionary`2<!!0,!!1>,!!0,!!1)": {
          "name": "AddOrUpdateDictionaryEntry`2(System.Collections.Generic.IDictionary`2<!!0,!!1>,!!0,!!1)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.ConvertToSarifVersion(System.String)": {
          "name": "ConvertToSarifVersion(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.ConvertToSchemaUri(Microsoft.CodeAnalysis.Sarif.SarifVersion)": {
          "name": "ConvertToSchemaUri(Microsoft.CodeAnalysis.Sarif.SarifVersion)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.ConvertToText(Microsoft.CodeAnalysis.Sarif.SarifVersion)": {
          "name": "ConvertToText(Microsoft.CodeAnalysis.Sarif.SarifVersion)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.CreateSingleThreadedCodeFlow(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation>)": {
          "name": "CreateSingleThreadedCodeFlow(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.DecodeBase64String(System.String,System.Text.Encoding)": {
          "name": "DecodeBase64String(System.String,System.Text.Encoding)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetBase64String(System.String,System.Text.Encoding)": {
          "name": "GetBase64String(System.String,System.Text.Encoding)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetByteLength(System.Char[],System.Text.Encoding)": {
          "name": "GetByteLength(System.Char[],System.Text.Encoding)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetByteLength(System.String,System.Text.Encoding)": {
          "name": "GetByteLength(System.String,System.Text.Encoding)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetUtf8Base64String(System.String)": {
          "name": "GetUtf8Base64String(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.SarifDateTimeFormatMillisecondsPrecision": {
          "name": "SarifDateTimeFormatMillisecondsPrecision",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.SarifDateTimeFormatSecondsPrecision": {
          "name": "SarifDateTimeFormatSecondsPrecision",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne": {
          "name": "SarifUtilitiesVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne.ConvertToSchemaUri(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne)": {
          "name": "ConvertToSchemaUri(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne.ConvertToText(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne)": {
          "name": "ConvertToText(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifVersion": {
          "name": "SarifVersion",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SdkResources": {
          "name": "SdkResources",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SdkResources..ctor()": {
          "name": ".ctor()",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SdkResources",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack": {
          "name": "Stack",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack..ctor(Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.StackFrame>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.StackFrame>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack..ctor(Microsoft.CodeAnalysis.Sarif.Stack)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Stack)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack..ctor(System.Diagnostics.StackTrace)": {
          "name": ".ctor(System.Diagnostics.StackTrace)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack.Create(System.String)": {
          "name": "Create(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack.Frames": {
          "name": "Frames",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame": {
          "name": "StackFrame",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame..ctor(Microsoft.CodeAnalysis.Sarif.Location,System.String,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Location,System.String,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame..ctor(Microsoft.CodeAnalysis.Sarif.StackFrame)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.StackFrame)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame.Create(System.Diagnostics.StackFrame)": {
          "name": "Create(System.Diagnostics.StackFrame)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame.CreateFullyQualifiedName(System.Reflection.MethodBase)": {
          "name": "CreateFullyQualifiedName(System.Reflection.MethodBase)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame.Parameters": {
          "name": "Parameters",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.StringSet": {
          "name": "StringSet",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.StringToVersionMap": {
          "name": "StringToVersionMap",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SupportedPlatform": {
          "name": "SupportedPlatform",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.SupportedPlatform.OSX": {
          "name": "OSX",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SupportedPlatform",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow": {
          "name": "ThreadFlow",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow..ctor(Microsoft.CodeAnalysis.Sarif.ThreadFlow)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.ThreadFlow)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow.Locations": {
          "name": "Locations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation": {
          "name": "ThreadFlowLocation",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation..ctor(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation..ctor(System.Int32,Microsoft.CodeAnalysis.Sarif.Location,Microsoft.CodeAnalysis.Sarif.Stack,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Int32,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationImportance,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.Int32,Microsoft.CodeAnalysis.Sarif.Location,Microsoft.CodeAnalysis.Sarif.Stack,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Int32,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationImportance,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation.State": {
          "name": "State",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationEqualityComparer": {
          "name": "ThreadFlowLocationEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool": {
          "name": "Tool",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool..ctor(Microsoft.CodeAnalysis.Sarif.Tool)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.Tool)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool..ctor(System.String,System.String,System.String,System.String,System.String,System.Uri,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.String,System.String,System.String,System.String,System.Uri,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool.CreateFromAssemblyData(System.String)": {
          "name": "CreateFromAssemblyData(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool.SarifLoggerVersion": {
          "name": "SarifLoggerVersion",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionary`1": {
          "name": "TypedPropertiesDictionary`1",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionary`1.SettingNameToDescriptionsMap": {
          "name": "SettingNameToDescriptionsMap",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionary`1",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter": {
          "name": "TypedPropertiesDictionaryConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter+<>c": {
          "name": "TypedPropertiesDictionaryConverter+<>c",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter+<>c.<ReadJson>b__3_1(Newtonsoft.Json.Linq.JToken)": {
          "name": "<ReadJson>b__3_1(Newtonsoft.Json.Linq.JToken)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter+<>c",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.UriHelper": {
          "name": "UriHelper",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.UriHelper.MakeValidUri(System.String)": {
          "name": "MakeValidUri(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.UriHelper",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionControlDetails": {
          "name": "VersionControlDetails",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionControlDetails..ctor(Microsoft.CodeAnalysis.Sarif.VersionControlDetails)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionControlDetails)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionControlDetails",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionControlDetails..ctor(System.Uri,System.String,System.String,System.String,System.DateTime,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.Uri,System.String,System.String,System.String,System.DateTime,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionControlDetails",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings": {
          "name": "Warnings",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn997_InvalidTarget": {
          "name": "Wrn997_InvalidTarget",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn998_UnsupportedPlatform": {
          "name": "Wrn998_UnsupportedPlatform",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn999_RuleExplicitlyDisabled": {
          "name": "Wrn999_RuleExplicitlyDisabled",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline": {
          "name": "Microsoft.CodeAnalysis.Sarif.Baseline",
          "parentKey": "sarif.dll",
          "kind": "namespace"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.ISarifLogBaseliner": {
          "name": "ISarifLogBaseliner",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.ISarifLogBaseliner.CreateBaselinedRun(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "CreateBaselinedRun(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.ISarifLogBaseliner",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifBaselineType": {
          "name": "SarifBaselineType",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaseliner": {
          "name": "SarifLogBaseliner",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaseliner.CreateBaselinedRun(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "CreateBaselinedRun(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaseliner",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaselinerFactory": {
          "name": "SarifLogBaselinerFactory",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaselinerFactory.CreateSarifLogBaseliner(Microsoft.CodeAnalysis.Sarif.Baseline.SarifBaselineType)": {
          "name": "CreateSarifLogBaseliner(Microsoft.CodeAnalysis.Sarif.Baseline.SarifBaselineType)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaselinerFactory",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline": {
          "name": "Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "parentKey": "sarif.dll",
          "kind": "namespace"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.CodeFlowBaselineEqualityComparator": {
          "name": "CodeFlowBaselineEqualityComparator",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.CodeFlowBaselineEqualityComparator.Equals(Microsoft.CodeAnalysis.Sarif.CodeFlow,Microsoft.CodeAnalysis.Sarif.CodeFlow)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.CodeFlow,Microsoft.CodeAnalysis.Sarif.CodeFlow)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.CodeFlowBaselineEqualityComparator",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.DefaultBaselineExtensions": {
          "name": "DefaultBaselineExtensions",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.DefaultBaselineExtensions.GetNullCheckedHashCode(System.Object)": {
          "name": "GetNullCheckedHashCode(System.Object)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.DefaultBaselineExtensions",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.LocationBaselineEquals": {
          "name": "LocationBaselineEquals",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.LocationBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Location,Microsoft.CodeAnalysis.Sarif.Location)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.Location,Microsoft.CodeAnalysis.Sarif.Location)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.LocationBaselineEquals",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ResultBaselineEquals": {
          "name": "ResultBaselineEquals",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ResultBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ResultBaselineEquals",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackBaselineEquals": {
          "name": "StackBaselineEquals",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Stack,Microsoft.CodeAnalysis.Sarif.Stack)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.Stack,Microsoft.CodeAnalysis.Sarif.Stack)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackBaselineEquals",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackFrameBaselineEquals": {
          "name": "StackFrameBaselineEquals",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackFrameBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.StackFrame,Microsoft.CodeAnalysis.Sarif.StackFrame)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.StackFrame,Microsoft.CodeAnalysis.Sarif.StackFrame)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackFrameBaselineEquals",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowBaselineEqualityComparator": {
          "name": "ThreadFlowBaselineEqualityComparator",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowBaselineEqualityComparator.Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlow,Microsoft.CodeAnalysis.Sarif.ThreadFlow)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlow,Microsoft.CodeAnalysis.Sarif.ThreadFlow)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowBaselineEqualityComparator",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowLocationBaselineEquals": {
          "name": "ThreadFlowLocationBaselineEquals",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowLocationBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowLocationBaselineEquals",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors": {
          "name": "Microsoft.CodeAnalysis.Sarif.Processors",
          "parentKey": "sarif.dll",
          "kind": "namespace"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericActionPipeline`1": {
          "name": "GenericActionPipeline`1",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericActionPipeline`1..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Processors.IActionWrapper`1<!0>>)": {
          "name": ".ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Processors.IActionWrapper`1<!0>>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericActionPipeline`1",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1": {
          "name": "GenericMappingAction`1",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1.Act(System.Collections.Generic.IEnumerable`1<!0>)": {
          "name": "Act(System.Collections.Generic.IEnumerable`1<!0>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1.Action": {
          "name": "Action",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1.Map(System.Collections.Generic.IEnumerable`1<!0>)": {
          "name": "Map(System.Collections.Generic.IEnumerable`1<!0>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogAction": {
          "name": "SarifLogAction",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple": {
          "name": "SarifLogActionTuple",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple.Action": {
          "name": "Action",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple.Parameters": {
          "name": "Parameters",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods": {
          "name": "SarifLogExtensionMethods",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.MakeUrisAbsolute(Microsoft.CodeAnalysis.Sarif.SarifLog)": {
          "name": "MakeUrisAbsolute(Microsoft.CodeAnalysis.Sarif.SarifLog)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.MakeUrisAbsolute(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>)": {
          "name": "MakeUrisAbsolute(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.Merge(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>)": {
          "name": "Merge(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.RebaseUri(Microsoft.CodeAnalysis.Sarif.SarifLog,System.String,System.Boolean,System.Uri)": {
          "name": "RebaseUri(Microsoft.CodeAnalysis.Sarif.SarifLog,System.String,System.Boolean,System.Uri)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.RebaseUri(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>,System.String,System.Boolean,System.Uri)": {
          "name": "RebaseUri(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>,System.String,System.Boolean,System.Uri)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline": {
          "name": "SarifLogPipeline",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline..ctor(System.Collections.Generic.List`1<Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple>)": {
          "name": ".ctor(System.Collections.Generic.List`1<Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline._pipeline": {
          "name": "_pipeline",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline.Actions": {
          "name": "Actions",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogProcessorFactory": {
          "name": "SarifLogProcessorFactory",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogProcessorFactory.GetActionStage(Microsoft.CodeAnalysis.Sarif.Processors.SarifLogAction,System.String[])": {
          "name": "GetActionStage(Microsoft.CodeAnalysis.Sarif.Processors.SarifLogAction,System.String[])",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogProcessorFactory",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers": {
          "name": "Microsoft.CodeAnalysis.Sarif.Readers",
          "parentKey": "sarif.dll",
          "kind": "namespace"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter": {
          "name": "DateTimeConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter": {
          "name": "EnumConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter.ConvertToCamelCase(System.String)": {
          "name": "ConvertToCamelCase(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter": {
          "name": "FlagsEnumConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.PropertyBagConverter": {
          "name": "PropertyBagConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.PropertyBagConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)": {
          "name": "ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.PropertyBagConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor": {
          "name": "ResultDiffingVisitor",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor..ctor(Microsoft.CodeAnalysis.Sarif.SarifLog)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.SarifLog)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor.AbsentResults": {
          "name": "AbsentResults",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor.NewResults": {
          "name": "NewResults",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor.SharedResults": {
          "name": "SharedResults",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.RuleDictionaryConverter": {
          "name": "RuleDictionaryConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.RuleDictionaryConverter.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.RuleDictionaryConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolver": {
          "name": "SarifContractResolver",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolver.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolver",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolverVersionOne": {
          "name": "SarifContractResolverVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolverVersionOne.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolverVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifVersionConverter": {
          "name": "SarifVersionConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifVersionConverter.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifVersionConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.UriConverter": {
          "name": "UriConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.UriConverter.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.UriConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.VersionConverter": {
          "name": "VersionConverter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.VersionConverter.Instance": {
          "name": "Instance",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.VersionConverter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne": {
          "name": "Microsoft.CodeAnalysis.Sarif.VersionOne",
          "parentKey": "sarif.dll",
          "kind": "namespace"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne": {
          "name": "AlgorithmKindVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Authentihash": {
          "name": "Authentihash",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Ecoh": {
          "name": "Ecoh",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Fsb": {
          "name": "Fsb",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Gost": {
          "name": "Gost",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Groestl": {
          "name": "Groestl",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Haval": {
          "name": "Haval",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sdhash": {
          "name": "Sdhash",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha1": {
          "name": "Sha1",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha224": {
          "name": "Sha224",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha256": {
          "name": "Sha256",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha3": {
          "name": "Sha3",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha384": {
          "name": "Sha384",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha512": {
          "name": "Sha512",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Snefru": {
          "name": "Snefru",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Ssdeep": {
          "name": "Ssdeep",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Swifft": {
          "name": "Swifft",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Tlsh": {
          "name": "Tlsh",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne": {
          "name": "AnnotatedCodeLocationVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne..ctor(System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,System.String,System.String,System.Int32,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationKindVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.TaintKindVersionOne,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.String,System.Boolean,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationImportanceVersionOne,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,System.String,System.String,System.Int32,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationKindVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.TaintKindVersionOne,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.String,System.Boolean,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationImportanceVersionOne,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne.Annotations": {
          "name": "Annotations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne.State": {
          "name": "State",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne.Values": {
          "name": "Values",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOneEqualityComparer": {
          "name": "AnnotatedCodeLocationVersionOneEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOneEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)": {
          "name": "GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOne": {
          "name": "AnnotationVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOne.Locations": {
          "name": "Locations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne": {
          "name": "CodeFlowVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne..ctor(System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne.Locations": {
          "name": "Locations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOne": {
          "name": "ExceptionDataVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOne.InnerExceptions": {
          "name": "InnerExceptions",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne": {
          "name": "FileChangeVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne..ctor(System.Uri,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.ReplacementVersionOne>)": {
          "name": ".ctor(System.Uri,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.ReplacementVersionOne>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne.Replacements": {
          "name": "Replacements",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne.UriBaseId": {
          "name": "UriBaseId",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne": {
          "name": "FileDataVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne..ctor(System.Uri,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.Uri,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne.Hashes": {
          "name": "Hashes",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne.UriBaseId": {
          "name": "UriBaseId",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOne": {
          "name": "FixVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOne.FileChanges": {
          "name": "FileChanges",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOne": {
          "name": "FormattedRuleMessageVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOne.Arguments": {
          "name": "Arguments",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne": {
          "name": "InvocationVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne..ctor(System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne.EnvironmentVariables": {
          "name": "EnvironmentVariables",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne.ResponseFiles": {
          "name": "ResponseFiles",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOneEqualityComparer": {
          "name": "InvocationVersionOneEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.IRuleVersionOne": {
          "name": "IRuleVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne": {
          "name": "ISarifNodeVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.SarifNodeKindVersionOne": {
          "name": "SarifNodeKindVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne": {
          "name": "LocationVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne": {
          "name": "NotificationVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne..ctor(System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationLevelVersionOne,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOne,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationLevelVersionOne,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOne,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne": {
          "name": "PhysicalLocationVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne..ctor(System.Uri,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.RegionVersionOne)": {
          "name": ".ctor(System.Uri,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.RegionVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne.UriBaseId": {
          "name": "UriBaseId",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne": {
          "name": "ResultVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne..ctor(System.String,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOne,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne>,System.String,System.String,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne>,Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.BaselineStateVersionOne,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOne,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne>,System.String,System.String,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne>,Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.BaselineStateVersionOne,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.CodeFlows": {
          "name": "CodeFlows",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.Fixes": {
          "name": "Fixes",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.Locations": {
          "name": "Locations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.RelatedLocations": {
          "name": "RelatedLocations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.Stacks": {
          "name": "Stacks",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOneEqualityComparer": {
          "name": "ResultVersionOneEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOneEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)": {
          "name": "GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne": {
          "name": "RuleVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne..ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.VersionOne.reportingConfigurationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne,System.Uri,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.VersionOne.reportingConfigurationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne,System.Uri,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne.MessageFormats": {
          "name": "MessageFormats",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOneEqualityComparer": {
          "name": "RuleVersionOneEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne": {
          "name": "RunVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.LogicalLocationVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne>,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.LogicalLocationVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne>,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.ConfigurationNotifications": {
          "name": "ConfigurationNotifications",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.Files": {
          "name": "Files",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.LogicalLocations": {
          "name": "LogicalLocations",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.Results": {
          "name": "Results",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.Rules": {
          "name": "Rules",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.ToolNotifications": {
          "name": "ToolNotifications",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOneEqualityComparer": {
          "name": "RunVersionOneEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOneEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)": {
          "name": "GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne": {
          "name": "SarifLogVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne.Runs": {
          "name": "Runs",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifNodeKindVersionOne": {
          "name": "SarifNodeKindVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifNodeKindVersionOne.SarifLogVersionOne": {
          "name": "SarifLogVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifNodeKindVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifRewritingVisitorVersionOne": {
          "name": "SarifRewritingVisitorVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifRewritingVisitorVersionOne.VisitSarifLogVersionOne(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne)": {
          "name": "VisitSarifLogVersionOne(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifRewritingVisitorVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne": {
          "name": "SarifVersionVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne": {
          "name": "StackFrameVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne..ctor(System.String,System.Uri,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.Uri,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne.Parameters": {
          "name": "Parameters",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne.UriBaseId": {
          "name": "UriBaseId",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOneEqualityComparer": {
          "name": "StackFrameVersionOneEqualityComparer",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne)": {
          "name": "Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOneEqualityComparer",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne": {
          "name": "StackVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne..ctor(System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne.Frames": {
          "name": "Frames",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne": {
          "name": "SuppressionStatesVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.TagsCollectionVersionOne": {
          "name": "TagsCollectionVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne": {
          "name": "ToolVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne)": {
          "name": ".ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne..ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)": {
          "name": ".ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne.SarifLoggerVersion": {
          "name": "SarifLoggerVersion",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors": {
          "name": "Microsoft.CodeAnalysis.Sarif.Visitors",
          "parentKey": "sarif.dll",
          "kind": "namespace"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor": {
          "name": "AbsoluteUrisVisitor",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor.CombineUris(System.Uri,System.Uri)": {
          "name": "CombineUris(System.Uri,System.Uri)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor.VisitRun(Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "VisitRun(Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AddFileReferencesVisitor": {
          "name": "AddFileReferencesVisitor",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AddFileReferencesVisitor.VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)": {
          "name": "VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AddFileReferencesVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AddFileReferencesVisitor.VisitRun(Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "VisitRun(Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AddFileReferencesVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor": {
          "name": "InsertOptionalDataVisitor",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor.s_fileSystem": {
          "name": "s_fileSystem",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor.VisitMessage(Microsoft.CodeAnalysis.Sarif.Message)": {
          "name": "VisitMessage(Microsoft.CodeAnalysis.Sarif.Message)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor.VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)": {
          "name": "VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor.VisitResult(Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "VisitResult(Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor": {
          "name": "RebaseUriVisitor",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor..ctor(System.String,System.Boolean,System.Uri)": {
          "name": ".ctor(System.String,System.Boolean,System.Uri)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor..ctor(System.String,System.Uri)": {
          "name": ".ctor(System.String,System.Uri)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor.VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)": {
          "name": "VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor.VisitRun(Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "VisitRun(Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor": {
          "name": "SarifCurrentToVersionOneVisitor",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateFileChange(Microsoft.CodeAnalysis.Sarif.FileChange)": {
          "name": "CreateFileChange(Microsoft.CodeAnalysis.Sarif.FileChange)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateLogicalLocation(Microsoft.CodeAnalysis.Sarif.LogicalLocation)": {
          "name": "CreateLogicalLocation(Microsoft.CodeAnalysis.Sarif.LogicalLocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreatePhysicalLocation(Microsoft.CodeAnalysis.Sarif.FileLocation)": {
          "name": "CreatePhysicalLocation(Microsoft.CodeAnalysis.Sarif.FileLocation)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateReplacement(Microsoft.CodeAnalysis.Sarif.Replacement,System.Text.Encoding)": {
          "name": "CreateReplacement(Microsoft.CodeAnalysis.Sarif.Replacement,System.Text.Encoding)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateResult(Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "CreateResult(Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateRule(Microsoft.CodeAnalysis.Sarif.Rule)": {
          "name": "CreateRule(Microsoft.CodeAnalysis.Sarif.Rule)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateRun(Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "CreateRun(Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateTool(Microsoft.CodeAnalysis.Sarif.Tool)": {
          "name": "CreateTool(Microsoft.CodeAnalysis.Sarif.Tool)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.GetContentStream(System.Uri,System.Text.Encoding&)": {
          "name": "GetContentStream(System.Uri,System.Text.Encoding&)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.GetFileEncoding(System.String)": {
          "name": "GetFileEncoding(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.SarifLogVersionOne": {
          "name": "SarifLogVersionOne",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.VisitSarifLog(Microsoft.CodeAnalysis.Sarif.SarifLog)": {
          "name": "VisitSarifLog(Microsoft.CodeAnalysis.Sarif.SarifLog)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities": {
          "name": "SarifTransformerUtilities",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.AlgorithmKindNameMap": {
          "name": "AlgorithmKindNameMap",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.AlgorithmNameKindMap": {
          "name": "AlgorithmNameKindMap",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateAnnotatedCodeLocationImportance(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationImportance)": {
          "name": "CreateAnnotatedCodeLocationImportance(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationImportance)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateBaselineState(Microsoft.CodeAnalysis.Sarif.VersionOne.BaselineStateVersionOne)": {
          "name": "CreateBaselineState(Microsoft.CodeAnalysis.Sarif.VersionOne.BaselineStateVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateBaselineStateVersionOne(Microsoft.CodeAnalysis.Sarif.BaselineState)": {
          "name": "CreateBaselineStateVersionOne(Microsoft.CodeAnalysis.Sarif.BaselineState)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateDisambiguatedName(System.String,System.Int32)": {
          "name": "CreateDisambiguatedName(System.String,System.Int32)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateNotificationLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationLevelVersionOne)": {
          "name": "CreateNotificationLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationLevelVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateNotificationLevelVersionOne(Microsoft.CodeAnalysis.Sarif.FailureLevel)": {
          "name": "CreateNotificationLevelVersionOne(Microsoft.CodeAnalysis.Sarif.FailureLevel)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateResultLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne)": {
          "name": "CreateResultLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateResultLevelVersionOne(Microsoft.CodeAnalysis.Sarif.ResultLevel)": {
          "name": "CreateResultLevelVersionOne(Microsoft.CodeAnalysis.Sarif.ResultLevel)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateResultLevelVersionOne(Microsoft.CodeAnalysis.Sarif.reportingConfigurationDefaultLevel)": {
          "name": "CreateResultLevelVersionOne(Microsoft.CodeAnalysis.Sarif.reportingConfigurationDefaultLevel)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreatereportingConfigurationDefaultLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne)": {
          "name": "CreatereportingConfigurationDefaultLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateSuppressionStates(Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne)": {
          "name": "CreateSuppressionStates(Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateSuppressionStatesVersionOne(Microsoft.CodeAnalysis.Sarif.SuppressionStates)": {
          "name": "CreateSuppressionStatesVersionOne(Microsoft.CodeAnalysis.Sarif.SuppressionStates)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateThreadFlowLocationImportance(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationImportanceVersionOne)": {
          "name": "CreateThreadFlowLocationImportance(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationImportanceVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.DefaultFullyQualifiedNameDelimiters": {
          "name": "DefaultFullyQualifiedNameDelimiters",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.JsonSettingsV1": {
          "name": "JsonSettingsV1",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.JsonSettingsV1Compact": {
          "name": "JsonSettingsV1Compact",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.JsonSettingsV2": {
          "name": "JsonSettingsV2",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.JsonSettingsV2Compact": {
          "name": "JsonSettingsV2Compact",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.PropertyBagTransformerItemPrefixes": {
          "name": "PropertyBagTransformerItemPrefixes",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor": {
          "name": "SarifVersionOneToCurrentVisitor",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor._currentV1Run": {
          "name": "_currentV1Run",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateFileLocation(System.Uri,System.String)": {
          "name": "CreateFileLocation(System.Uri,System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateHash(Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOne)": {
          "name": "CreateHash(Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateLogicalLocation(Microsoft.CodeAnalysis.Sarif.VersionOne.LogicalLocationVersionOne)": {
          "name": "CreateLogicalLocation(Microsoft.CodeAnalysis.Sarif.VersionOne.LogicalLocationVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateMessage(System.String)": {
          "name": "CreateMessage(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateRegion(Microsoft.CodeAnalysis.Sarif.VersionOne.RegionVersionOne)": {
          "name": "CreateRegion(Microsoft.CodeAnalysis.Sarif.VersionOne.RegionVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)": {
          "name": "CreateRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateResult(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)": {
          "name": "CreateResult(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateRun(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)": {
          "name": "CreateRun(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateTool(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne)": {
          "name": "CreateTool(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.GetLogicalLocationName(System.String)": {
          "name": "GetLogicalLocationName(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.SarifLog": {
          "name": "SarifLog",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.VisitSarifLogVersionOne(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne)": {
          "name": "VisitSarifLogVersionOne(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.UnknownEncodingException": {
          "name": "UnknownEncodingException",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers": {
          "name": "Microsoft.CodeAnalysis.Sarif.Writers",
          "parentKey": "sarif.dll",
          "kind": "namespace"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType": {
          "name": "MimeType",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType.Cpp": {
          "name": "Cpp",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType.DetermineFromFileExtension(System.String)": {
          "name": "DetermineFromFileExtension(System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType.Sarif": {
          "name": "Sarif",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.ResultLogJsonWriter": {
          "name": "ResultLogJsonWriter",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.ResultLogJsonWriter.Initialize(Microsoft.CodeAnalysis.Sarif.Run)": {
          "name": "Initialize(Microsoft.CodeAnalysis.Sarif.Run)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.ResultLogJsonWriter",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger": {
          "name": "SarifLogger",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers",
          "kind": "type"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger..ctor(System.IO.TextWriter,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)": {
          "name": ".ctor(System.IO.TextWriter,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)": {
          "name": ".ctor(System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger",
          "kind": "member"
        },
        "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger.CaptureFilesInResult(Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "CaptureFilesInResult(Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger",
          "kind": "member"
        },
        "sarif.driver.dll": {
          "kind": "module"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver": {
          "name": "Microsoft.CodeAnalysis.Sarif.Driver",
          "parentKey": "sarif.driver.dll",
          "kind": "namespace"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger": {
          "name": "AggregatingLogger",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger.Dispose()": {
          "name": "Dispose()",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger.Loggers": {
          "name": "Loggers",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext": {
          "name": "AnalysisContext",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext.Dispose()": {
          "name": "Dispose()",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext.Policy": {
          "name": "Policy",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2": {
          "name": "AnalyzeCommandBase`2",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)": {
          "name": "AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTargets(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.IEnumerable`1<System.String>)": {
          "name": "AnalyzeTargets(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.IEnumerable`1<System.String>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.CreateContext(!1,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,Microsoft.CodeAnalysis.Sarif.RuntimeConditions,System.String)": {
          "name": "CreateContext(!1,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,Microsoft.CodeAnalysis.Sarif.RuntimeConditions,System.String)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.CreateSkimmers(!0)": {
          "name": "CreateSkimmers(!0)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DefaultPolicyName": {
          "name": "DefaultPolicyName",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityAndAnalyze(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.String,System.Collections.Generic.HashSet`1<System.String>)": {
          "name": "DetermineApplicabilityAndAnalyze(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.String,System.Collections.Generic.HashSet`1<System.String>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityForTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)": {
          "name": "DetermineApplicabilityForTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.GenerateSensitiveTokensList()": {
          "name": "GenerateSensitiveTokensList()",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.GetCurrentRunningOS()": {
          "name": "GetCurrentRunningOS()",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeLogger(Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeOptionsBase)": {
          "name": "InitializeLogger(Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeOptionsBase)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeOutputFile(!1,!0,System.Collections.Generic.HashSet`1<System.String>)": {
          "name": "InitializeOutputFile(!1,!0,System.Collections.Generic.HashSet`1<System.String>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeSkimmers(System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0)": {
          "name": "InitializeSkimmers(System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InvokeCatchingRelevantIOExceptions(System.Action,System.Action`1<System.Exception>)": {
          "name": "InvokeCatchingRelevantIOExceptions(System.Action,System.Action`1<System.Exception>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.LogToolNotification(Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,System.String,Microsoft.CodeAnalysis.Sarif.FailureLevel,System.Exception)": {
          "name": "LogToolNotification(Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,System.String,Microsoft.CodeAnalysis.Sarif.FailureLevel,System.Exception)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.RaiseUnhandledExceptionInDriverCode": {
          "name": "RaiseUnhandledExceptionInDriverCode",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.Run(!1)": {
          "name": "Run(!1)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.ThrowExitApplicationException(!0,Microsoft.CodeAnalysis.Sarif.Driver.ExitReason,System.Exception)": {
          "name": "ThrowExitApplicationException(!0,Microsoft.CodeAnalysis.Sarif.Driver.ExitReason,System.Exception)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.ValidateFile(!0,System.String,System.Nullable`1<System.Boolean>)": {
          "name": "ValidateFile(!0,System.String,System.Nullable`1<System.Boolean>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ArgumentSplitter": {
          "name": "ArgumentSplitter",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ArgumentSplitter.CommandLineToArgvW(System.String)": {
          "name": "CommandLineToArgvW(System.String)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ArgumentSplitter",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DefaultDriverOptions": {
          "name": "DefaultDriverOptions",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DefaultDriverOptions.CreateRuleSpecificOption`1(Microsoft.CodeAnalysis.Sarif.IRule,Microsoft.CodeAnalysis.Sarif.PerLanguageOption`1<!!0>)": {
          "name": "CreateRuleSpecificOption`1(Microsoft.CodeAnalysis.Sarif.IRule,Microsoft.CodeAnalysis.Sarif.PerLanguageOption`1<!!0>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DefaultDriverOptions",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DefaultDriverOptions.Instance": {
          "name": "Instance",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DefaultDriverOptions",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DisposableEnumerable`1": {
          "name": "DisposableEnumerable`1",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1": {
          "name": "DriverCommand`1",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1.FAILURE": {
          "name": "FAILURE",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1.SUCCESS": {
          "name": "SUCCESS",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverExtensionMethods": {
          "name": "DriverExtensionMethods",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverExtensionMethods.ConvertToLoggingOptions(Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeOptionsBase)": {
          "name": "ConvertToLoggingOptions(Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeOptionsBase)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverExtensionMethods",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverResources": {
          "name": "DriverResources",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverResources..ctor()": {
          "name": ".ctor()",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverResources",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverUtilities": {
          "name": "DriverUtilities",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverUtilities.GetExports`1(System.Collections.Generic.IEnumerable`1<System.Reflection.Assembly>)": {
          "name": "GetExports`1(System.Collections.Generic.IEnumerable`1<System.Reflection.Assembly>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverUtilities",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities": {
          "name": "EntryPointUtilities",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities.CommandLineToArgvW(System.String,System.Int32&)": {
          "name": "CommandLineToArgvW(System.String,System.Int32&)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities.GenerateArguments(System.String[],Microsoft.CodeAnalysis.Sarif.IFileSystem,Microsoft.CodeAnalysis.Sarif.Driver.IEnvironmentVariables)": {
          "name": "GenerateArguments(System.String[],Microsoft.CodeAnalysis.Sarif.IFileSystem,Microsoft.CodeAnalysis.Sarif.Driver.IEnvironmentVariables)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities.LocalFree(System.IntPtr)": {
          "name": "LocalFree(System.IntPtr)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions": {
          "name": "EnumerableExtensions",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions.LexicographicalCompare`1(System.Collections.Generic.IEnumerable`1<!!0>,System.Collections.Generic.IEnumerable`1<!!0>,System.Collections.Generic.IComparer`1<!!0>)": {
          "name": "LexicographicalCompare`1(System.Collections.Generic.IEnumerable`1<!!0>,System.Collections.Generic.IEnumerable`1<!!0>,System.Collections.Generic.IComparer`1<!!0>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions.RemoveIf`1(!!0[]&,System.Func`2<!!0,System.Boolean>)": {
          "name": "RemoveIf`1(!!0[]&,System.Func`2<!!0,System.Boolean>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExceptionStrings": {
          "name": "ExceptionStrings",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExceptionStrings..ctor()": {
          "name": ".ctor()",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExceptionStrings",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExitApplicationException`1": {
          "name": "ExitApplicationException`1",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationCommandBase": {
          "name": "ExportConfigurationCommandBase",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationOptions)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationCommandBase",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase": {
          "name": "ExportRulesMetadataCommandBase",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.GetIdIntegerSuffix(System.String)": {
          "name": "GetIdIntegerSuffix(System.String)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.OutputSarifRulesMetada(System.String,System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Sarif.IRule>)": {
          "name": "OutputSarifRulesMetada(System.String,System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Sarif.IRule>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataOptions)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.FileSpecifier": {
          "name": "FileSpecifier",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.FileSpecifier..ctor(System.String,System.Boolean)": {
          "name": ".ctor(System.String,System.Boolean)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.FileSpecifier",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1": {
          "name": "ISkimmer`1",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1.CanAnalyze(!0,System.String&)": {
          "name": "CanAnalyze(!0,System.String&)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash": {
          "name": "MurmurHash",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash.AddRange(System.Collections.Generic.IEnumerable`1<System.Int32>)": {
          "name": "AddRange(System.Collections.Generic.IEnumerable`1<System.Int32>)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash.AddRange(System.Collections.IEnumerable)": {
          "name": "AddRange(System.Collections.IEnumerable)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash.AddRange(System.Int32[])": {
          "name": "AddRange(System.Int32[])",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.PlugInDriverCommand`1": {
          "name": "PlugInDriverCommand`1",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.PlugInDriverCommand`1.DefaultPlugInAssemblies": {
          "name": "DefaultPlugInAssemblies",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.PlugInDriverCommand`1",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ReferenceEqualityComparer`1": {
          "name": "ReferenceEqualityComparer`1",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ReferenceEqualityComparer`1.Instance": {
          "name": "Instance",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ReferenceEqualityComparer`1",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.RentalStream": {
          "name": "RentalStream",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.RentalStream.Dispose(System.Boolean)": {
          "name": "Dispose(System.Boolean)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.RentalStream",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.RuleEnabledState": {
          "name": "RuleEnabledState",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.SkimmerBase`1": {
          "name": "SkimmerBase`1",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger": {
          "name": "StatisticsLogger",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.AnalysisStopped(Microsoft.CodeAnalysis.Sarif.RuntimeConditions)": {
          "name": "AnalysisStopped(Microsoft.CodeAnalysis.Sarif.RuntimeConditions)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.Dispose()": {
          "name": "Dispose()",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.Log(Microsoft.CodeAnalysis.Sarif.IRule,Microsoft.CodeAnalysis.Sarif.Result)": {
          "name": "Log(Microsoft.CodeAnalysis.Sarif.IRule,Microsoft.CodeAnalysis.Sarif.Result)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.Log(Microsoft.CodeAnalysis.Sarif.ResultLevel,System.String)": {
          "name": "Log(Microsoft.CodeAnalysis.Sarif.ResultLevel,System.String)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.LogConfigurationNotification(Microsoft.CodeAnalysis.Sarif.Notification)": {
          "name": "LogConfigurationNotification(Microsoft.CodeAnalysis.Sarif.Notification)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.TempFile": {
          "name": "TempFile",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.TempFile..ctor(System.String)": {
          "name": ".ctor(System.String)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.TempFile",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.XmlWriterExtensions": {
          "name": "XmlWriterExtensions",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.XmlWriterExtensions.WriteElementInt(System.Xml.XmlWriter,System.String,System.Int32)": {
          "name": "WriteElementInt(System.Xml.XmlWriter,System.String,System.Int32)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.XmlWriterExtensions",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysisDriver": {
          "name": "Microsoft.CodeAnalysisDriver",
          "parentKey": "sarif.driver.dll",
          "kind": "namespace"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods": {
          "name": "FileStreamExtensionMethods",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysisDriver",
          "kind": "type"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods.ReadString(System.IO.FileStream,System.Int32)": {
          "name": "ReadString(System.IO.FileStream,System.Int32)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods",
          "kind": "member"
        },
        "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods.ReadToArray(System.IO.FileStream,System.Int32)": {
          "name": "ReadToArray(System.IO.FileStream,System.Int32)",
          "parentKey": "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods",
          "kind": "member"
        },
        "sarif.multitool.exe": {
          "kind": "module"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif": {
          "name": "Microsoft.CodeAnalysis.Sarif",
          "parentKey": "sarif.multitool.exe",
          "kind": "namespace"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.MultitoolResources": {
          "name": "MultitoolResources",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.MultitoolResources..ctor()": {
          "name": ".ctor()",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.MultitoolResources",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool": {
          "name": "Microsoft.CodeAnalysis.Sarif.Multitool",
          "parentKey": "sarif.multitool.exe",
          "kind": "namespace"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.AbsoluteUriCommand": {
          "name": "AbsoluteUriCommand",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.AbsoluteUriCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.AbsoluteUriOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Multitool.AbsoluteUriOptions)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.AbsoluteUriCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.BaselineCommand": {
          "name": "BaselineCommand",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.BaselineCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.BaselineOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Multitool.BaselineOptions)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.BaselineCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ConvertCommand": {
          "name": "ConvertCommand",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ConvertCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.ConvertOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Multitool.ConvertOptions)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ConvertCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.JTokenExtensions": {
          "name": "JTokenExtensions",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.JTokenExtensions.HasProperty(Newtonsoft.Json.Linq.JToken,System.String)": {
          "name": "HasProperty(Newtonsoft.Json.Linq.JToken,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.JTokenExtensions",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.MergeCommand": {
          "name": "MergeCommand",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.MergeCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.MergeOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Multitool.MergeOptions)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.MergeCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.MultitoolOptionsBase": {
          "name": "MultitoolOptionsBase",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriCommand": {
          "name": "RebaseUriCommand",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriOptions)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RewriteCommand": {
          "name": "RewriteCommand",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RewriteCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.RewriteOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Multitool.RewriteOptions)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RewriteCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName": {
          "name": "SarifPropertyName",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.Stderr": {
          "name": "Stderr",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.Stdin": {
          "name": "Stdin",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.Stdout": {
          "name": "Stdout",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.StdoutStderr": {
          "name": "StdoutStderr",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext": {
          "name": "SarifValidationContext",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext.Dispose()": {
          "name": "Dispose()",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext.Policy": {
          "name": "Policy",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.TransformCommand": {
          "name": "TransformCommand",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.TransformCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.TransformOptions)": {
          "name": "Run(Microsoft.CodeAnalysis.Sarif.Multitool.TransformOptions)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.TransformCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand": {
          "name": "ValidateCommand",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext>>,Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext,System.Collections.Generic.HashSet`1<System.String>)": {
          "name": "AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext>>,Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext,System.Collections.Generic.HashSet`1<System.String>)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.CreateContext(Microsoft.CodeAnalysis.Sarif.Multitool.ValidateOptions,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,Microsoft.CodeAnalysis.Sarif.RuntimeConditions,System.String)": {
          "name": "CreateContext(Microsoft.CodeAnalysis.Sarif.Multitool.ValidateOptions,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,Microsoft.CodeAnalysis.Sarif.RuntimeConditions,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.Validate(System.String,System.String,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger)": {
          "name": "Validate(System.String,System.String,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidatorResources": {
          "name": "ValidatorResources",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidatorResources..ctor()": {
          "name": ".ctor()",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidatorResources",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules": {
          "name": "Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "parentKey": "sarif.multitool.exe",
          "kind": "namespace"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.DoNotUseFriendlyNameAsRuleId": {
          "name": "DoNotUseFriendlyNameAsRuleId",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.DoNotUseFriendlyNameAsRuleId.Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.DoNotUseFriendlyNameAsRuleId",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndColumnMustNotBeLessThanStartColumn": {
          "name": "EndColumnMustNotBeLessThanStartColumn",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndColumnMustNotBeLessThanStartColumn.Analyze(Microsoft.CodeAnalysis.Sarif.Region,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Region,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndColumnMustNotBeLessThanStartColumn",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndLineMustNotBeLessThanStartLine": {
          "name": "EndLineMustNotBeLessThanStartLine",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndLineMustNotBeLessThanStartLine.Analyze(Microsoft.CodeAnalysis.Sarif.Region,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Region,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndLineMustNotBeLessThanStartLine",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndTimeMustBeAfterStartTime": {
          "name": "EndTimeMustBeAfterStartTime",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndTimeMustBeAfterStartTime.Analyze(Microsoft.CodeAnalysis.Sarif.Invocation,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Invocation,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndTimeMustBeAfterStartTime",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.HashAlgorithmsMustBeUnique": {
          "name": "HashAlgorithmsMustBeUnique",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.HashAlgorithmsMustBeUnique.Analyze(Microsoft.CodeAnalysis.Sarif.FileData,System.String,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.FileData,System.String,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.HashAlgorithmsMustBeUnique",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.MessagesShouldEndWithPeriod": {
          "name": "MessagesShouldEndWithPeriod",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.MessagesShouldEndWithPeriod.Analyze(Microsoft.CodeAnalysis.Sarif.Message,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Message,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.MessagesShouldEndWithPeriod",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.MessagesShouldEndWithPeriod.Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.MessagesShouldEndWithPeriod",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.RuleResources": {
          "name": "RuleResources",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.RuleResources..ctor()": {
          "name": ".ctor()",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.RuleResources",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.SarifValidationSkimmerBase": {
          "name": "SarifValidationSkimmerBase",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.SarifValidationSkimmerBase.LogResult(System.String,System.String,System.String[])": {
          "name": "LogResult(System.String,System.String,System.String[])",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.SarifValidationSkimmerBase",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.StepValuesMustFormOneBasedSequence": {
          "name": "StepValuesMustFormOneBasedSequence",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.StepValuesMustFormOneBasedSequence.Analyze(Microsoft.CodeAnalysis.Sarif.ThreadFlow,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.ThreadFlow,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.StepValuesMustFormOneBasedSequence",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.StepValuesMustFormOneBasedSequence.FindFirstLocationWithMissingStep(Newtonsoft.Json.Linq.JObject[])": {
          "name": "FindFirstLocationWithMissingStep(Newtonsoft.Json.Linq.JObject[])",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.StepValuesMustFormOneBasedSequence",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UriBaseIdRequiresRelativeUri": {
          "name": "UriBaseIdRequiresRelativeUri",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UriBaseIdRequiresRelativeUri.Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UriBaseIdRequiresRelativeUri",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid": {
          "name": "UrisMustBeValid",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.FileData,System.String,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.FileData,System.String,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.Result,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Result,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.Run,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Run,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.SarifLog,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.SarifLog,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.Tool,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.Tool,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.VersionControlDetails,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.VersionControlDetails,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UseAbsolutePathsForNestedFileUriFragments": {
          "name": "UseAbsolutePathsForNestedFileUriFragments",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules",
          "kind": "type"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UseAbsolutePathsForNestedFileUriFragments.Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)": {
          "name": "Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UseAbsolutePathsForNestedFileUriFragments",
          "kind": "member"
        },
        "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UseAbsolutePathsForNestedFileUriFragments.UriHasNonAbsoluteFragment(System.Uri)": {
          "name": "UriHasNonAbsoluteFragment(System.Uri)",
          "parentKey": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UseAbsolutePathsForNestedFileUriFragments",
          "kind": "member"
        }
      },
      "results": [
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1020",
          "level": "warning",
          "message": {
            "text": "Consider merging the types defined in 'Microsoft.CodeAnalysis.Sarif.Baseline' with another namespace."
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Baseline"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Baseline'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Baseline"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1020",
          "level": "warning",
          "message": {
            "text": "Consider merging the types defined in 'Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline' with another namespace."
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Converters'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Converters"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1709",
          "level": "error",
          "message": {
            "text": "Correct the casing of 'PRE' in namespace name 'Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel' by changing it to 'Pre'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "PRE#Namespace"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1020",
          "level": "warning",
          "message": {
            "text": "Consider merging the types defined in 'Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel' with another namespace."
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Pylint' in namespace name 'Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Pylint#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1020",
          "level": "warning",
          "message": {
            "text": "Consider merging the types defined in 'Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel' with another namespace."
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Driver'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Driver"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Multitool' in namespace name 'Microsoft.CodeAnalysis.Sarif.Multitool'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Multitool"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Multitool#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Multitool'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Multitool"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Multitool' in namespace name 'Microsoft.CodeAnalysis.Sarif.Multitool.Rules'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Multitool.Rules"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Multitool#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Multitool.Rules'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Multitool.Rules"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Processors'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Processors"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Readers'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Readers"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.VersionOne'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.VersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1020",
          "level": "warning",
          "message": {
            "text": "Consider merging the types defined in 'Microsoft.CodeAnalysis.Sarif.VersionOne.Readers' with another namespace."
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.VersionOne.Readers"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.VersionOne.Readers'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.VersionOne.Readers"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Visitors'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Visitors"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1020",
          "level": "warning",
          "message": {
            "text": "Consider merging the types defined in 'Microsoft.CodeAnalysis.Sarif.Writers' with another namespace."
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Writers"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in namespace name 'Microsoft.CodeAnalysis.Sarif.Writers'.",
            "messageId": "Namespace"
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.Sarif.Writers"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Namespace"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1020",
          "level": "warning",
          "message": {
            "text": "Consider merging the types defined in 'Microsoft.CodeAnalysisDriver' with another namespace."
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.CodeAnalysisDriver"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1020",
          "level": "warning",
          "message": {
            "text": "Consider merging the types defined in 'Microsoft.Json.Pointer' with another namespace."
          },
          "locations": [
            {
              "fullyQualifiedLogicalName": "Microsoft.Json.Pointer"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1014",
          "level": "error",
          "message": {
            "text": "Mark 'Microsoft.Json.Pointer.dll' with CLSCompliant(true) because it exposes externally visible types."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1824",
          "level": "warning",
          "message": {
            "text": "Because assembly 'Microsoft.Json.Pointer.dll' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'JsonPointer.JsonPointer(string, JsonPointerRepresentation)' with an overload that supplies all default arguments."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.JsonPointer..ctor(System.String,Microsoft.Json.Pointer.JsonPointerRepresentation)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1812",
          "level": "warning",
          "message": {
            "text": "'Resources' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.Resources"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'StringExtensions.AtIndex(this string, int)', correct the spelling of 'j' in parameter name 'jPointer' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions.AtIndex(System.String,System.Int32)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "j#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.AtIndex(this string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions.AtIndex(System.String,System.Int32)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'StringExtensions.AtProperty(this string, string)', correct the spelling of 'j' in parameter name 'jPointer' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions.AtProperty(System.String,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "j#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.AtProperty(this string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions.AtProperty(System.String,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'StringExtensions.UnescapeJsonPointer(this string)', correct the spelling of 'j' in parameter name 'jPointer' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.StringExtensions.UnescapeJsonPointer(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "j#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1702",
          "level": "error",
          "message": {
            "text": "The compound word 'PreRelease' in member name 'VersionConstants.PreRelease' exists as a discrete term. If your usage is intended to be single word, case it as 'Prerelease' or strip the first token entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberShouldBeDiscreteTerm"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Pointer.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.pointer.dll!Microsoft.Json.Pointer.VersionConstants.PreRelease"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "PreRelease#MemberShouldBeDiscreteTerm"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1014",
          "level": "error",
          "message": {
            "text": "Mark 'Microsoft.Json.Schema.dll' with CLSCompliant(true) because it exposes externally visible types."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1824",
          "level": "warning",
          "message": {
            "text": "Because assembly 'Microsoft.Json.Schema.dll' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AdditionalItems.AdditionalItems(AdditionalItems)', validate parameter 'other' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.AdditionalItems..ctor(Microsoft.Json.Schema.AdditionalItems)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AdditionalProperties.AdditionalProperties(AdditionalProperties)', validate parameter 'other' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.AdditionalProperties..ctor(Microsoft.Json.Schema.AdditionalProperties)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'Dependency.Dependency(Dependency)', validate parameter 'other' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.Dependency..ctor(Microsoft.Json.Schema.Dependency)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1002",
          "level": "error",
          "message": {
            "text": "Change 'List<string>' in 'Dependency.PropertyDependencies' to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.Dependency.PropertyDependencies"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'DependencyConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.DependencyConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1716",
          "level": "error",
          "message": {
            "text": "Rename type 'Error' so that it no longer conflicts with the reserved language keyword 'Error'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.Error"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Error#Type"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2201",
          "level": "error",
          "message": {
            "text": "'Error.CreateException(string, params object[])' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.",
            "messageId": "TooGeneric"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.Error.CreateException(System.String,System.Object[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "TooGeneric"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'Items.Items(Items)', validate parameter 'other' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.Items..ctor(Microsoft.Json.Schema.Items)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Items.Schemas' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.Items.Schemas"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'ItemsConverter.Instance' or change the field to one that is an immutable reference type. If the reference type 'ItemsConverter' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.ItemsConverter.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ItemsConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.ItemsConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'JsonSchema.JsonSchema(JsonSchema)', validate parameter 'other' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema..ctor(Microsoft.Json.Schema.JsonSchema)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.AllOf' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.AllOf"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.AnyOf' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.AnyOf"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'JsonSchema.Collapse(JsonSchema, JsonSchema)' has a cyclomatic complexity of 34. Rewrite or refactor the method to reduce complexity to 25."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Collapse(Microsoft.Json.Schema.JsonSchema,Microsoft.Json.Schema.JsonSchema)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.Definitions' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Definitions"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.Dependencies' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Dependencies"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.Enum' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Enum"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'JsonSchema.Equals(JsonSchema)' has a cyclomatic complexity of 50. Rewrite or refactor the method to reduce complexity to 25."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Equals(Microsoft.Json.Schema.JsonSchema)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.OneOf' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.OneOf"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.PatternProperties' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.PatternProperties"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.Properties' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Properties"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.Required' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Required"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'JsonSchema.Type' to be read-only by removing the property setter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Type"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1721",
          "level": "error",
          "message": {
            "text": "The property name 'JsonSchema.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.",
            "messageId": "BaseType"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchema.Type"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "BaseType"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1725",
          "level": "error",
          "message": {
            "text": "In member 'JsonSchemaContractResolver.ResolveContract(Type)', change parameter name 'objectType' to 'type' in order to match the identifier as it has been declared in 'CamelCasePropertyNamesContractResolver.ResolveContract(Type)'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchemaContractResolver.ResolveContract(System.Type)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'JsonSchemaExtensions.SafeGetType(this JsonSchema)', validate parameter 'schema' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSchemaExtensions.SafeGetType(Microsoft.Json.Schema.JsonSchema)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'JsonSerializerExtensions.CaptureError(this JsonSerializer, JToken, ErrorNumber, params object[])', correct the spelling of 'j' in parameter name 'jToken' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSerializerExtensions.CaptureError(Newtonsoft.Json.JsonSerializer,Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "j#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'JsonSerializerExtensions.CaptureError(this JsonSerializer, JToken, ErrorNumber, params object[])', validate parameter 'serializer' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSerializerExtensions.CaptureError(Newtonsoft.Json.JsonSerializer,Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2237",
          "level": "error",
          "message": {
            "text": "Add [Serializable] to 'JsonSyntaxException' as this type implements ISerializable."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSyntaxException"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1032",
          "level": "error",
          "message": {
            "text": "Change the accessibility of 'JsonSyntaxException.JsonSyntaxException(SerializationInfo, StreamingContext)' to protected.",
            "messageId": "Accessibility"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JsonSyntaxException..ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Accessibility"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'JTokenTypeExtensions.ToSchemaType(this JTokenType)', correct the spelling of 'j' in parameter name 'jTokenType' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.JTokenTypeExtensions.ToSchemaType(Newtonsoft.Json.Linq.JTokenType)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "j#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'MustBeStringConverter.CanConvert(Type)', validate parameter 'objectType' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.MustBeStringConverter.CanConvert(System.Type)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'MustBeStringConverter.ReadJson(JsonReader, Type, object, JsonSerializer)', validate parameter 'reader' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.MustBeStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1802",
          "level": "warning",
          "message": {
            "text": "Field 'RefProperty.s_inputPattern' is declared as 'static readonly' but is initialized with a constant value '(?<before>[^\"]\")\\$ref(?<after>\"\\s*:)'. Mark this field as 'const' instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.RefProperty.s_inputPattern"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1802",
          "level": "warning",
          "message": {
            "text": "Field 'RefProperty.s_outputPattern' is declared as 'static readonly' but is initialized with a constant value '(?<before>[^\"]\")\\$\\$ref(?<after>\"\\s*:)'. Mark this field as 'const' instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.RefProperty.s_outputPattern"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SchemaReader.ReadSchema(TextReader, string)', validate parameter 'reader' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaReader.ReadSchema(System.IO.TextReader,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2000",
          "level": "warning",
          "message": {
            "text": "In method 'SchemaReader.ReadSchema(string, string)', object 'new StringReader(jsonText)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new StringReader(jsonText)' before all references to it are out of scope.",
            "messageId": "ExceptionEdge"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaReader.ReadSchema(System.String,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ExceptionEdge"
          },
          "properties": {
            "Category": "Microsoft.Reliability",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'SchemaTypeConverter.SchemaTypeFromString(string)' calls 'Enum.TryParse<SchemaType>(string, out SchemaType)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter.SchemaTypeFromString(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Enum.TryParse<Microsoft.Json.Schema.SchemaType>(System.String,Microsoft.Json.Schema.SchemaType@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1308",
          "level": "error",
          "message": {
            "text": "In method 'SchemaTypeConverter.WriteJson(JsonWriter, object, JsonSerializer)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().",
            "messageId": "ToUpperInvariant"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ToUpperInvariant"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SchemaTypeConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1308",
          "level": "error",
          "message": {
            "text": "In method 'SchemaTypeConverter.WriteJson(JsonWriter, object, JsonSerializer)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().",
            "messageId": "ToUpperInvariant"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaTypeConverter+<>c.<WriteJson>b__3_0(Microsoft.Json.Schema.SchemaType)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ToUpperInvariant"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2237",
          "level": "error",
          "message": {
            "text": "Add [Serializable] to 'SchemaValidationException' as this type implements ISerializable."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SchemaValidationException.SchemaValidationException(JToken, ErrorNumber, params object[])', correct the spelling of 'j' in parameter name 'jToken' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException..ctor(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "j#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1032",
          "level": "error",
          "message": {
            "text": "Change the accessibility of 'SchemaValidationException.SchemaValidationException(SerializationInfo, StreamingContext)' to protected.",
            "messageId": "Accessibility"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException..ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Accessibility"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1819",
          "level": "warning",
          "message": {
            "text": "Change 'SchemaValidationException.Args' to return a collection or make it a method."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaValidationException.Args"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'SchemaWriter.WriteSchema(JsonWriter, JsonSchema, Formatting)' with an overload that supplies all default arguments."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter.WriteSchema(Newtonsoft.Json.JsonWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'SchemaWriter.WriteSchema(TextWriter, JsonSchema, Formatting)' with an overload that supplies all default arguments."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter.WriteSchema(System.IO.TextWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2000",
          "level": "warning",
          "message": {
            "text": "In method 'SchemaWriter.WriteSchema(TextWriter, JsonSchema, Formatting)', call System.IDisposable.Dispose on object 'new StringWriter()' before all references to it are out of scope.",
            "messageId": "NonExceptionEdge"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter.WriteSchema(System.IO.TextWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NonExceptionEdge"
          },
          "properties": {
            "Category": "Microsoft.Reliability",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'StringWriter.StringWriter()' could vary based on the current user's locale settings, replace this call in 'SchemaWriter.WriteSchema(TextWriter, JsonSchema, Formatting)' with a call to 'StringWriter.StringWriter(IFormatProvider)'. If the result of 'StringWriter.StringWriter(IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter.WriteSchema(System.IO.TextWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.IO.StringWriter.#ctor#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SchemaWriter.WriteSchema(TextWriter, JsonSchema, Formatting)', validate parameter 'writer' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.SchemaWriter.WriteSchema(System.IO.TextWriter,Microsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Formatting)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UriOrFragment.UriOrFragment(UriOrFragment)', validate parameter 'other' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment..ctor(Microsoft.Json.Schema.UriOrFragment)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1720",
          "level": "error",
          "message": {
            "text": "In member 'UriOrFragment.UriOrFragment(string)', consider replacing the data type identifier 'String' in parameter name 'uriString' with a more generic term, such as 'value'.",
            "messageId": "LanguageIndependentMemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment..ctor(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "string#LanguageIndependentMemberParameter"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UriOrFragment.UriOrFragment(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment..ctor(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.StartsWith(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1054",
          "level": "error",
          "message": {
            "text": "Change the type of parameter 'uriString' of method 'UriOrFragment.UriOrFragment(string)' from string to System.Uri, or provide an overload of 'UriOrFragment.UriOrFragment(string)', that allows 'uriString' to be passed as a System.Uri object."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment..ctor(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UriOrFragment.UriOrFragment(string)', validate parameter 'uriString' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment..ctor(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1725",
          "level": "error",
          "message": {
            "text": "In member 'UriOrFragment.Equals(object)', change parameter name 'comparand' to 'obj' in order to match the identifier as it has been declared in 'object.Equals(object)'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragment.Equals(System.Object)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UriOrFragmentConverter.ReadJson(JsonReader, Type, object, JsonSerializer)', validate parameter 'reader' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UriOrFragmentConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UriOrFragmentExtensions.GetDefinitionName(this UriOrFragment)', validate parameter 'reference' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.UriOrFragmentExtensions.GetDefinitionName(Microsoft.Json.Schema.UriOrFragment)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1702",
          "level": "error",
          "message": {
            "text": "The compound word 'PreRelease' in member name 'VersionConstants.PreRelease' exists as a discrete term. If your usage is intended to be single word, case it as 'Prerelease' or strip the first token entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberShouldBeDiscreteTerm"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.dll!Microsoft.Json.Schema.VersionConstants.PreRelease"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "PreRelease#MemberShouldBeDiscreteTerm"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1014",
          "level": "error",
          "message": {
            "text": "Mark 'Microsoft.Json.Schema.Validation.dll' with CLSCompliant(true) because it exposes externally visible types."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1824",
          "level": "warning",
          "message": {
            "text": "Because assembly 'Microsoft.Json.Schema.Validation.dll' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'JsonSyntaxErrorExceptionExtensions.ToSarifResult(this JsonSyntaxException)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JsonSyntaxErrorExceptionExtensions.ToSarifResult(Microsoft.Json.Schema.JsonSyntaxException)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'JsonSyntaxErrorExceptionExtensions.ToSarifResult(this JsonSyntaxException)', validate parameter 'ex' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JsonSyntaxErrorExceptionExtensions.ToSarifResult(Microsoft.Json.Schema.JsonSyntaxException)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1800",
          "level": "warning",
          "message": {
            "text": "'obj', a parameter, is cast to type 'JToken' multiple times in method 'JTokenEqualityComparer.NullEquals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.",
            "messageId": "Parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.JTokenEqualityComparer.NullEquals(System.Object)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Parameter"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1053",
          "level": "error",
          "message": {
            "text": "Because type 'ResultFactory' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.ResultFactory"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'ResultFactory.CreateResult(JToken, ErrorNumber, object[])', correct the spelling of 'j' in parameter name 'jToken' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.ResultFactory.CreateResult(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "j#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ResultFactory.CreateResult(JToken, ErrorNumber, object[])', validate parameter 'jToken' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.ResultFactory.CreateResult(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.ErrorNumber,System.Object[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'RuleExtensions.SetResultFile(this Result, string)', validate parameter 'result' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleExtensions.SetResultFile(Microsoft.CodeAnalysis.Sarif.Result,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1802",
          "level": "warning",
          "message": {
            "text": "Field 'RuleFactory.ErrorCodeFormat' is declared as 'static readonly' but is initialized with a constant value 'JSON{0:D4}'. Mark this field as 'const' instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleFactory.ErrorCodeFormat"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'RuleFactory.GetRuleFromRuleId(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleFactory.GetRuleFromRuleId(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'RuleFactory.GetRuleFromRuleId(string)', validate parameter 'ruleId' before using it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleFactory.GetRuleFromRuleId(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1812",
          "level": "warning",
          "message": {
            "text": "'RuleResources' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.RuleResources"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1308",
          "level": "error",
          "message": {
            "text": "In method 'Validator.FormatBoolean(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().",
            "messageId": "ToUpperInvariant"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.FormatBoolean(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ToUpperInvariant"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1800",
          "level": "warning",
          "message": {
            "text": "'obj', a parameter, is cast to type 'JToken' multiple times in method 'Validator.FormatObject(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.",
            "messageId": "Parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.FormatObject(System.Object)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Parameter"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'Validator.GetPropertyNames(JObject)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.GetPropertyNames(Newtonsoft.Json.Linq.JObject)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'Validator.TokenMatchesEnum(JToken, IList<object>)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.TokenMatchesEnum(Newtonsoft.Json.Linq.JToken,System.Collections.Generic.IList`1<System.Object>)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'Validator.UnicodeLength(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.UnicodeLength(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1811",
          "level": "warning",
          "message": {
            "text": "'Validator.ValidateAdditionalProperties(JObject, List<string>, AdditionalProperties)' appears to have no upstream public or protected callers."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.ValidateAdditionalProperties(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.List`1<System.String>,Microsoft.Json.Schema.AdditionalProperties)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1800",
          "level": "warning",
          "message": {
            "text": "'jToken', a parameter, is cast to type 'JValue' multiple times in method 'Validator.ValidateToken(JToken, JsonSchema)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.",
            "messageId": "Parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.Validator.ValidateToken(Newtonsoft.Json.Linq.JToken,Microsoft.Json.Schema.JsonSchema)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Parameter"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1702",
          "level": "error",
          "message": {
            "text": "The compound word 'PreRelease' in member name 'VersionConstants.PreRelease' exists as a discrete term. If your usage is intended to be single word, case it as 'Prerelease' or strip the first token entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberShouldBeDiscreteTerm"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Microsoft.Json.Schema.Validation.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "microsoft.json.schema.validation.dll!Microsoft.Json.Schema.Validation.VersionConstants.PreRelease"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "PreRelease#MemberShouldBeDiscreteTerm"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2243",
          "level": "warning",
          "message": {
            "text": "In the constructor of 'AssemblyInformationalVersionAttribute', change the value of argument 'informationalVersion', which is currently \"2.0.0-csd.1.0.1\", to something that can be correctly parsed as 'Version'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in assembly name 'Sarif.Converters.dll'.",
            "messageId": "Assembly"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Assembly"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA3053",
          "level": "warning",
          "message": {
            "text": "'AndroidStudioConverter.Convert(Stream, IResultLogWriter, OptionallyEmittedData)' instantiates an XmlReader instance by calling System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings) and provided an XmlReaderSettings instance with an insecure XmlResolver property value. This usage is potentially unsafe as untrusted external resources may be resolved during read operations. Provide a XmlReaderSettings instance and set the XmlResolver property to null or an instance of XmlSecureResolver.",
            "messageId": "XmlReaderCreateInsecureXmlResolver"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/AndroidStudioConverter.cs"
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "            using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 14,
                  "charOffset": 2230,
                  "charLength": 125,
                  "snippet": {
                    "text": "            ISet<Result> results;\r\n            using (XmlReader xmlReader = XmlReader.Create(input, settings))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.AndroidStudioConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "XmlReaderCreateInsecureXmlResolver"
          },
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1711",
          "level": "error",
          "message": {
            "text": "Rename type name 'AssemblyLoadFileDelegate' so that it does not end in 'Delegate'.",
            "messageId": "TypeNoAlternate"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.AssemblyLoadFileDelegate"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "TypeNoAlternate"
          },
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA3053",
          "level": "warning",
          "message": {
            "text": "'ClangAnalyzerConverter.Convert(Stream, IResultLogWriter, OptionallyEmittedData)' instantiates an XmlReader instance by calling System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings) and provided an XmlReaderSettings instance with an insecure XmlResolver property value. This usage is potentially unsafe as untrusted external resources may be resolved during read operations. Provide a XmlReaderSettings instance and set the XmlResolver property to null or an instance of XmlSecureResolver.",
            "messageId": "XmlReaderCreateInsecureXmlResolver"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ClangAnalyzerConverter.cs"
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "                using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 18,
                  "charOffset": 1963,
                  "charLength": 100,
                  "snippet": {
                    "text": "\r\n                using (XmlReader xmlReader = XmlReader.Create(input, settings))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ClangAnalyzerConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "XmlReaderCreateInsecureXmlResolver"
          },
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'ClangAnalyzerConverter.ReadDictionary(XmlReader)' has a cyclomatic complexity of 30. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ClangAnalyzerConverter.cs"
                },
                "region": {
                  "startLine": 258,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "endLine": 259,
                  "endColumn": 87,
                  "charOffset": 9911,
                  "charLength": 185,
                  "snippet": {
                    "text": "        private static IDictionary<string, object> ReadDictionary(XmlReader xmlReader)\r\n        {\r\n            IDictionary<string, object> dictionary = new Dictionary<string, object>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ClangAnalyzerConverter.ReadDictionary(System.Xml.XmlReader)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1811",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources..ctor()"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Cpp' in type name 'CppCheckConverter'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.CppCheckConverter"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA3053",
          "level": "warning",
          "message": {
            "text": "'CppCheckConverter.Convert(Stream, IResultLogWriter, OptionallyEmittedData)' instantiates an XmlReader instance by calling System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings) and provided an XmlReaderSettings instance with an insecure XmlResolver property value. This usage is potentially unsafe as untrusted external resources may be resolved during read operations. Provide a XmlReaderSettings instance and set the XmlResolver property to null or an instance of XmlSecureResolver.",
            "messageId": "XmlReaderCreateInsecureXmlResolver"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/CppCheckConverter.cs"
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "            using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 14,
                  "charOffset": 1951,
                  "charLength": 92,
                  "snippet": {
                    "text": "\r\n            using (XmlReader xmlReader = XmlReader.Create(input, settings))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.CppCheckConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "XmlReaderCreateInsecureXmlResolver"
          },
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'Extensions.HasDefaultConstructor(this Type)', validate parameter 'type' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/Extensions.cs"
                },
                "region": {
                  "startLine": 22,
                  "snippet": {
                    "text": "            return type.GetConstructor("
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 73,
                  "charOffset": 753,
                  "charLength": 124,
                  "snippet": {
                    "text": "        {\r\n            return type.GetConstructor(\r\n                            BindingFlags.Instance | BindingFlags.Public,"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.Extensions.HasDefaultConstructor(System.Type)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'Extensions.MatchesToolFormat(this string, string)', validate parameter 'toolFormat' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/Extensions.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "            return toolFormat.Equals(other, StringComparison.OrdinalIgnoreCase);"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 10,
                  "charOffset": 501,
                  "charLength": 102,
                  "snippet": {
                    "text": "        {\r\n            return toolFormat.Equals(other, StringComparison.OrdinalIgnoreCase);\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.Extensions.MatchesToolFormat(System.String,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA3053",
          "level": "warning",
          "message": {
            "text": "'FortifyConverter.Convert(Stream, IResultLogWriter, OptionallyEmittedData)' instantiates an XmlReader instance by calling System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings) and provided an XmlReaderSettings instance with an insecure XmlResolver property value. This usage is potentially unsafe as untrusted external resources may be resolved during read operations. Provide a XmlReaderSettings instance and set the XmlResolver property to null or an instance of XmlSecureResolver.",
            "messageId": "XmlReaderCreateInsecureXmlResolver"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyConverter.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "            using (XmlReader reader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 14,
                  "charOffset": 2101,
                  "charLength": 89,
                  "snippet": {
                    "text": "\r\n            using (XmlReader reader = XmlReader.Create(input, settings))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "XmlReaderCreateInsecureXmlResolver"
          },
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1303",
          "level": "warning",
          "message": {
            "text": "Method 'FortifyFprConverter.AddMessagesToResults()' passes a literal string as parameter 'value' of a call to 'Message.Text.set(string)'. Retrieve the following string(s) from a resource table instead: \"[, ](1)\".",
            "messageId": "KnownValue"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 854,
                  "snippet": {
                    "text": "                        message.Text = messageText;"
                  }
                },
                "contextRegion": {
                  "startLine": 853,
                  "startColumn": 1,
                  "endLine": 855,
                  "endColumn": 22,
                  "charOffset": 30889,
                  "charLength": 130,
                  "snippet": {
                    "text": "                        message = message.DeepClone();\r\n                        message.Text = messageText;\r\n                    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.AddMessagesToResults()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.CodeAnalysis.Sarif.Message.set_Text(System.String)#KnownValue"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'FortifyFprConverter.AddMessagesToResults()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 843,
                  "snippet": {
                    "text": "                                messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),"
                  }
                },
                "contextRegion": {
                  "startLine": 842,
                  "startColumn": 1,
                  "endLine": 844,
                  "endColumn": 109,
                  "charOffset": 30242,
                  "charLength": 300,
                  "snippet": {
                    "text": "                                // Replace the token with an embedded hyperlink\r\n                                messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),\r\n                                                                  string.Format(EmbeddedLinkFormat, value));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.AddMessagesToResults()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'FortifyFprConverter.AddMessagesToResults()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 843,
                  "snippet": {
                    "text": "                                messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),"
                  }
                },
                "contextRegion": {
                  "startLine": 842,
                  "startColumn": 1,
                  "endLine": 844,
                  "endColumn": 109,
                  "charOffset": 30242,
                  "charLength": 300,
                  "snippet": {
                    "text": "                                // Replace the token with an embedded hyperlink\r\n                                messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),\r\n                                                                  string.Format(EmbeddedLinkFormat, value));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.AddMessagesToResults()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'FortifyFprConverter.AddMessagesToResults()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 849,
                  "snippet": {
                    "text": "                                messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key), value);"
                  }
                },
                "contextRegion": {
                  "startLine": 848,
                  "startColumn": 1,
                  "endLine": 850,
                  "endColumn": 30,
                  "charOffset": 30640,
                  "charLength": 218,
                  "snippet": {
                    "text": "                                // Replace the token with plain text\r\n                                messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key), value);\r\n                            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.AddMessagesToResults()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA3053",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseAuditStream(System.IO.Stream)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseFile()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 276,
                  "snippet": {
                    "text": "                int.TryParse(sizeAttribute, out length);"
                  }
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "endLine": 277,
                  "endColumn": 14,
                  "charOffset": 10480,
                  "charLength": 86,
                  "snippet": {
                    "text": "            {\r\n                int.TryParse(sizeAttribute, out length);\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseFile()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseRegion()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 508,
                  "snippet": {
                    "text": "                int.TryParse(lineAttr, out startLine);"
                  }
                },
                "contextRegion": {
                  "startLine": 507,
                  "startColumn": 1,
                  "endLine": 509,
                  "endColumn": 14,
                  "charOffset": 18718,
                  "charLength": 84,
                  "snippet": {
                    "text": "            {\r\n                int.TryParse(lineAttr, out startLine);\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseRegion()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseRegion()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 515,
                  "snippet": {
                    "text": "                int.TryParse(linelEndAttr, out endLine);"
                  }
                },
                "contextRegion": {
                  "startLine": 514,
                  "startColumn": 1,
                  "endLine": 516,
                  "endColumn": 14,
                  "charOffset": 18959,
                  "charLength": 86,
                  "snippet": {
                    "text": "            {\r\n                int.TryParse(linelEndAttr, out endLine);\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseRegion()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseRegion()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 522,
                  "snippet": {
                    "text": "                int.TryParse(colStartAttr, out startColumn);"
                  }
                },
                "contextRegion": {
                  "startLine": 521,
                  "startColumn": 1,
                  "endLine": 523,
                  "endColumn": 14,
                  "charOffset": 19207,
                  "charLength": 90,
                  "snippet": {
                    "text": "            {\r\n                int.TryParse(colStartAttr, out startColumn);\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseRegion()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseRegion()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "                int.TryParse(colEndAttr, out endColumn);"
                  }
                },
                "contextRegion": {
                  "startLine": 528,
                  "startColumn": 1,
                  "endLine": 530,
                  "endColumn": 14,
                  "charOffset": 19451,
                  "charLength": 86,
                  "snippet": {
                    "text": "            {\r\n                int.TryParse(colEndAttr, out endColumn);\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseRegion()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseSnippet()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 659,
                  "snippet": {
                    "text": "            int.TryParse(parts[parts.Length - 2], out regionStartLine);"
                  }
                },
                "contextRegion": {
                  "startLine": 658,
                  "startColumn": 1,
                  "endLine": 660,
                  "endColumn": 70,
                  "charOffset": 23723,
                  "charLength": 144,
                  "snippet": {
                    "text": "\r\n            int.TryParse(parts[parts.Length - 2], out regionStartLine);\r\n            int.TryParse(parts[parts.Length - 1], out regionEndLine);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseSnippet()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseSnippet()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 660,
                  "snippet": {
                    "text": "            int.TryParse(parts[parts.Length - 1], out regionEndLine);"
                  }
                },
                "contextRegion": {
                  "startLine": 659,
                  "startColumn": 1,
                  "endLine": 661,
                  "endColumn": 32,
                  "charOffset": 23725,
                  "charLength": 175,
                  "snippet": {
                    "text": "            int.TryParse(parts[parts.Length - 2], out regionStartLine);\r\n            int.TryParse(parts[parts.Length - 1], out regionEndLine);\r\n            string text = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseSnippet()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseSnippet()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 670,
                  "snippet": {
                    "text": "                    int.TryParse(value, out snippetStartLine);"
                  }
                },
                "contextRegion": {
                  "startLine": 669,
                  "startColumn": 1,
                  "endLine": 671,
                  "endColumn": 18,
                  "charOffset": 24077,
                  "charLength": 155,
                  "snippet": {
                    "text": "                    string value = _reader.ReadElementContentAsString();\r\n                    int.TryParse(value, out snippetStartLine);\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseSnippet()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1806",
          "level": "warning",
          "message": {
            "text": "'FortifyFprConverter.ParseSnippet()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
            "messageId": "TryParse"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FortifyFprConverter.cs"
                },
                "region": {
                  "startLine": 675,
                  "snippet": {
                    "text": "                    int.TryParse(value, out snippetEndLine);"
                  }
                },
                "contextRegion": {
                  "startLine": 674,
                  "startColumn": 1,
                  "endLine": 676,
                  "endColumn": 18,
                  "charOffset": 24316,
                  "charLength": 153,
                  "snippet": {
                    "text": "                    string value = _reader.ReadElementContentAsString();\r\n                    int.TryParse(value, out snippetEndLine);\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FortifyFprConverter.ParseSnippet()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.TryParse(System.String,System.Int32@)#TryParse"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'FxCopConverter.BuildFileLocationFromFxCopReference(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FxCopConverter.cs"
                },
                "region": {
                  "startLine": 193,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "endLine": 194,
                  "endColumn": 37,
                  "charOffset": 6949,
                  "charLength": 135,
                  "snippet": {
                    "text": "        private FileLocation BuildFileLocationFromFxCopReference(string fileReference)\r\n        {\r\n            string uriBaseId = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopConverter.BuildFileLocationFromFxCopReference(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'FxCopConverter.BuildFileLocationFromFxCopReference(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FxCopConverter.cs"
                },
                "region": {
                  "startLine": 196,
                  "snippet": {
                    "text": "            if (fileReference.StartsWith(ProjectDirectoryVariable + \"/\"))"
                  }
                },
                "contextRegion": {
                  "startLine": 195,
                  "startColumn": 1,
                  "endLine": 197,
                  "endColumn": 14,
                  "charOffset": 7086,
                  "charLength": 90,
                  "snippet": {
                    "text": "\r\n            if (fileReference.StartsWith(ProjectDirectoryVariable + \"/\"))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopConverter.BuildFileLocationFromFxCopReference(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.StartsWith(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'FxCopConverter.CreateRule(FxCopLogReader.Context)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FxCopConverter.cs"
                },
                "region": {
                  "startLine": 99,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 32,
                  "charOffset": 3306,
                  "charLength": 108,
                  "snippet": {
                    "text": "        internal Rule CreateRule(FxCopLogReader.Context context)\r\n        {\r\n            var rule = new Rule"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopConverter.CreateRule(Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader+Context)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'stream' can be disposed more than once in method 'FxCopLogReader.Read(FxCopLogReader.Context, Stream)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 734"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/FxCopConverter.cs"
                },
                "region": {
                  "startLine": 734,
                  "snippet": {
                    "text": "            }"
                  }
                },
                "contextRegion": {
                  "startLine": 733,
                  "startColumn": 1,
                  "endLine": 735,
                  "endColumn": 1,
                  "charOffset": 27288,
                  "charLength": 55,
                  "snippet": {
                    "text": "                schemaSet.Add(schema);\r\n            }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader.Read(Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader+Context,System.IO.Stream)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA3053",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader.Read(Microsoft.CodeAnalysis.Sarif.Converters.FxCopLogReader+Context,System.IO.Stream)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2000",
          "level": "warning",
          "message": {
            "text": "In method 'LogReader<TLog>.ReadLog(string, Encoding)', call System.IDisposable.Dispose on object 'new MemoryStream(encoding.GetBytes(input))' before all references to it are out of scope.",
            "messageId": "NonExceptionEdge"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/LogReader.cs"
                },
                "region": {
                  "startLine": 18,
                  "snippet": {
                    "text": "            return ReadLog(new MemoryStream(encoding.GetBytes(input)));"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 10,
                  "charOffset": 498,
                  "charLength": 93,
                  "snippet": {
                    "text": "        {\r\n            return ReadLog(new MemoryStream(encoding.GetBytes(input)));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.LogReader`1.ReadLog(System.String,System.Text.Encoding)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NonExceptionEdge"
          },
          "properties": {
            "Category": "Microsoft.Reliability",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'LogReader<TLog>.ReadLog(string, Encoding)', validate parameter 'encoding' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/LogReader.cs"
                },
                "region": {
                  "startLine": 18,
                  "snippet": {
                    "text": "            return ReadLog(new MemoryStream(encoding.GetBytes(input)));"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 10,
                  "charOffset": 498,
                  "charLength": 93,
                  "snippet": {
                    "text": "        {\r\n            return ReadLog(new MemoryStream(encoding.GetBytes(input)));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.LogReader`1.ReadLog(System.String,System.Text.Encoding)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2208",
          "level": "error",
          "message": {
            "text": "Method 'PluginConverterFactory.CreateConverterCore(string)' passes 'pluginAssemblyPath' as the 'paramName' argument to a 'ArgumentException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.",
            "messageId": "IncorrectParameterName"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PluginConverterFactory.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "                throw new ArgumentException(message, nameof(this.pluginAssemblyPath));"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 14,
                  "charOffset": 1461,
                  "charLength": 103,
                  "snippet": {
                    "text": "\r\n                throw new ArgumentException(message, nameof(this.pluginAssemblyPath));\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PluginConverterFactory.CreateConverterCore(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "IncorrectParameterName"
          },
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2208",
          "level": "error",
          "message": {
            "text": "Method 'PluginConverterFactory.CreateConverterCore(string)' passes 'pluginAssemblyPath' as the 'paramName' argument to a 'ArgumentException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.",
            "messageId": "IncorrectParameterName"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PluginConverterFactory.cs"
                },
                "region": {
                  "startLine": 58,
                  "snippet": {
                    "text": "                throw new ArgumentException(message, nameof(this.pluginAssemblyPath));"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 14,
                  "charOffset": 2297,
                  "charLength": 103,
                  "snippet": {
                    "text": "\r\n                throw new ArgumentException(message, nameof(this.pluginAssemblyPath));\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PluginConverterFactory.CreateConverterCore(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "IncorrectParameterName"
          },
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Efast' in type name 'PREfastConverter'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Efast#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA3053",
          "level": "warning",
          "message": {
            "text": "'PREfastConverter.Convert(Stream, IResultLogWriter, OptionallyEmittedData)' instantiates an XmlReader instance by calling System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings) and provided an XmlReaderSettings instance with an insecure XmlResolver property value. This usage is potentially unsafe as untrusted external resources may be resolved during read operations. Provide a XmlReaderSettings instance and set the XmlResolver property to null or an instance of XmlSecureResolver.",
            "messageId": "XmlReaderCreateInsecureXmlResolver"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastConverter.cs"
                },
                "region": {
                  "startLine": 50,
                  "snippet": {
                    "text": "            using (var reader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 14,
                  "charOffset": 1584,
                  "charLength": 83,
                  "snippet": {
                    "text": "\r\n            using (var reader = XmlReader.Create(input, settings))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.Convert(System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "XmlReaderCreateInsecureXmlResolver"
          },
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PREfastConverter.CreateResult(Defect)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastConverter.cs"
                },
                "region": {
                  "startLine": 86,
                  "snippet": {
                    "text": "            var resultsFileUri = new Uri($\"{defect.SFA.FilePath}{defect.SFA.FileName}\", UriKind.Relative);"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 171,
                  "charOffset": 2908,
                  "charLength": 280,
                  "snippet": {
                    "text": "\r\n            var resultsFileUri = new Uri($\"{defect.SFA.FilePath}{defect.SFA.FileName}\", UriKind.Relative);\r\n            var physicalLocation = new PhysicalLocation(id: 0, fileLocation: new FileLocation(uri: resultsFileUri, uriBaseId: null), region: region, contextRegion: null);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'PREfastConverter.GenerateCodeFlows(Defect, Result)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastConverter.cs"
                },
                "region": {
                  "startLine": 144,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "endLine": 145,
                  "endColumn": 49,
                  "charOffset": 4926,
                  "charLength": 129,
                  "snippet": {
                    "text": "        private void GenerateCodeFlows(Defect defect, Result result)\r\n        {\r\n            List<SFA> sfas = defect?.Path?.SFAs;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.GenerateCodeFlows(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PREfastConverter.GenerateCodeFlows(Defect, Result)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastConverter.cs"
                },
                "region": {
                  "startLine": 163,
                  "snippet": {
                    "text": "                var uri = new Uri($\"{sfa.FilePath}{sfa.FileName}\", UriKind.Relative);"
                  }
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 160,
                  "charOffset": 5605,
                  "charLength": 248,
                  "snippet": {
                    "text": "\r\n                var uri = new Uri($\"{sfa.FilePath}{sfa.FileName}\", UriKind.Relative);\r\n                var fileLocation = new PhysicalLocation(id: 0, fileLocation: new FileLocation(uri: uri, uriBaseId: null), region: region, contextRegion: null);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.GenerateCodeFlows(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'PREfastConverter.RemovePREfastNewLine(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastConverter.cs"
                },
                "region": {
                  "startLine": 224,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "endLine": 225,
                  "endColumn": 71,
                  "charOffset": 7959,
                  "charLength": 142,
                  "snippet": {
                    "text": "        private string RemovePREfastNewLine(string content)\r\n        {\r\n            return content.Replace(\"PREFAST_NEWLINE\\n\", string.Empty);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.RemovePREfastNewLine(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'PREfastConverter.SetProbability(Defect, Result)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastConverter.cs"
                },
                "region": {
                  "startLine": 136,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 63,
                  "charOffset": 4676,
                  "charLength": 140,
                  "snippet": {
                    "text": "        private void SetProbability(Defect defect, Result result)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(defect.Probability))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.SetProbability(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'PREfastConverter.SetRank(Defect, Result)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastConverter.cs"
                },
                "region": {
                  "startLine": 128,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "endLine": 129,
                  "endColumn": 56,
                  "charOffset": 4454,
                  "charLength": 126,
                  "snippet": {
                    "text": "        private void SetRank(Defect defect, Result result)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(defect.Rank))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREfastConverter.SetRank(Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Pylint' in type name 'PylintConverter'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Pylint#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'PylintConverter.CreateResult(PylintLogEntry)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintConverter.cs"
                },
                "region": {
                  "startLine": 62,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 80,
                  "charOffset": 1860,
                  "charLength": 151,
                  "snippet": {
                    "text": "        internal Result CreateResult(PylintLogEntry defect)\r\n        {\r\n            defect = defect ?? throw new ArgumentNullException(nameof(defect));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'PylintConverter.CreateResult(PylintLogEntry)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintConverter.cs"
                },
                "region": {
                  "startLine": 87,
                  "snippet": {
                    "text": "            var region = new Region"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 14,
                  "charOffset": 2725,
                  "charLength": 52,
                  "snippet": {
                    "text": "\r\n            var region = new Region\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'PylintConverter.CreateResult(PylintLogEntry)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintConverter.cs"
                },
                "region": {
                  "startLine": 87,
                  "snippet": {
                    "text": "            var region = new Region"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 14,
                  "charOffset": 2725,
                  "charLength": 52,
                  "snippet": {
                    "text": "\r\n            var region = new Region\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'PylintConverter.CreateResult(PylintLogEntry)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintConverter.cs"
                },
                "region": {
                  "startLine": 93,
                  "snippet": {
                    "text": "            var fileUri = new Uri($\"{defect.FilePath}\", UriKind.RelativeOrAbsolute);"
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 164,
                  "charOffset": 2904,
                  "charLength": 251,
                  "snippet": {
                    "text": "\r\n            var fileUri = new Uri($\"{defect.FilePath}\", UriKind.RelativeOrAbsolute);\r\n            var physicalLocation = new PhysicalLocation(id: 0, fileLocation: new FileLocation(uri: fileUri, uriBaseId: null), region: region, contextRegion: null);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PylintConverter.CreateResult(PylintLogEntry)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintConverter.cs"
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "            Result result = new Result"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 66,
                  "endColumn": 14,
                  "charOffset": 2013,
                  "charLength": 55,
                  "snippet": {
                    "text": "\r\n            Result result = new Result\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Semmle' in type name 'SemmleQLConverter'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Semmle#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'reader' can be disposed more than once in method 'SemmleQLConverter.GetResultsFromStream(Stream)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 110"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 110,
                  "snippet": {
                    "text": "            }"
                  }
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 1,
                  "charOffset": 3450,
                  "charLength": 34,
                  "snippet": {
                    "text": "                }\r\n            }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.GetResultsFromStream(System.IO.Stream)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'this' can be disposed more than once in method 'SemmleQLConverter.GetResultsFromStream(Stream)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 110"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 110,
                  "snippet": {
                    "text": "            }"
                  }
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 1,
                  "charOffset": 3450,
                  "charLength": 34,
                  "snippet": {
                    "text": "                }\r\n            }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.GetResultsFromStream(System.IO.Stream)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SemmleQLConverter.NormalizeRawMessage(string, out string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 153,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 154,
                  "endColumn": 174,
                  "charOffset": 4934,
                  "charLength": 286,
                  "snippet": {
                    "text": "        private IList<Location> NormalizeRawMessage(string rawMessage, out string normalizedMessage)\r\n        {\r\n            // The rawMessage contains embedded related locations. We need to extract the related locations and reformat the rawMessage embedded links wrapped in [brackets]."
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 207,
                  "snippet": {
                    "text": "                        physicalLocation = new PhysicalLocation"
                  }
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 208,
                  "endColumn": 26,
                  "charOffset": 8084,
                  "charLength": 208,
                  "snippet": {
                    "text": "                        // \"IComparable\"|\"file://C:/Windows/Microsoft.NET/Framework/v2.0.50727/mscorlib.dll:0:0:0:0\"\r\n                        physicalLocation = new PhysicalLocation\r\n                        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 207,
                  "snippet": {
                    "text": "                        physicalLocation = new PhysicalLocation"
                  }
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 208,
                  "endColumn": 26,
                  "charOffset": 8084,
                  "charLength": 208,
                  "snippet": {
                    "text": "                        // \"IComparable\"|\"file://C:/Windows/Microsoft.NET/Framework/v2.0.50727/mscorlib.dll:0:0:0:0\"\r\n                        physicalLocation = new PhysicalLocation\r\n                        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 207,
                  "snippet": {
                    "text": "                        physicalLocation = new PhysicalLocation"
                  }
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 208,
                  "endColumn": 26,
                  "charOffset": 8084,
                  "charLength": 208,
                  "snippet": {
                    "text": "                        // \"IComparable\"|\"file://C:/Windows/Microsoft.NET/Framework/v2.0.50727/mscorlib.dll:0:0:0:0\"\r\n                        physicalLocation = new PhysicalLocation\r\n                        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 224,
                  "snippet": {
                    "text": "                        physicalLocation = new PhysicalLocation"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "endLine": 225,
                  "endColumn": 26,
                  "charOffset": 9010,
                  "charLength": 113,
                  "snippet": {
                    "text": "                    {\r\n                        physicalLocation = new PhysicalLocation\r\n                        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 224,
                  "snippet": {
                    "text": "                        physicalLocation = new PhysicalLocation"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "endLine": 225,
                  "endColumn": 26,
                  "charOffset": 9010,
                  "charLength": 113,
                  "snippet": {
                    "text": "                    {\r\n                        physicalLocation = new PhysicalLocation\r\n                        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 224,
                  "snippet": {
                    "text": "                        physicalLocation = new PhysicalLocation"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "endLine": 225,
                  "endColumn": 26,
                  "charOffset": 9010,
                  "charLength": 113,
                  "snippet": {
                    "text": "                    {\r\n                        physicalLocation = new PhysicalLocation\r\n                        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "                sb.Append($\"[{embeddedLinksText}]({relatedLocations[linkIndex++].PhysicalLocation.Id})\");"
                  }
                },
                "contextRegion": {
                  "startLine": 249,
                  "startColumn": 1,
                  "endLine": 251,
                  "endColumn": 1,
                  "charOffset": 10089,
                  "charLength": 228,
                  "snippet": {
                    "text": "                // Re-add the text portion of the link in brackets with the location id in parens, e.g. [link text](id)\r\n                sb.Append($\"[{embeddedLinksText}]({relatedLocations[linkIndex++].PhysicalLocation.Id})\");\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 207,
                  "snippet": {
                    "text": "                        physicalLocation = new PhysicalLocation"
                  }
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 208,
                  "endColumn": 26,
                  "charOffset": 8084,
                  "charLength": 208,
                  "snippet": {
                    "text": "                        // \"IComparable\"|\"file://C:/Windows/Microsoft.NET/Framework/v2.0.50727/mscorlib.dll:0:0:0:0\"\r\n                        physicalLocation = new PhysicalLocation\r\n                        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 170,
                  "snippet": {
                    "text": "            int index = rawMessage.IndexOf(\"[[\");"
                  }
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "endLine": 171,
                  "endColumn": 31,
                  "charOffset": 6203,
                  "charLength": 113,
                  "snippet": {
                    "text": "            int linkIndex = 0;\r\n            int index = rawMessage.IndexOf(\"[[\");\r\n            while (index > -1)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.IndexOf(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 177,
                  "snippet": {
                    "text": "                index = rawMessage.IndexOf(\"]]\");"
                  }
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 178,
                  "endColumn": 1,
                  "charOffset": 6458,
                  "charLength": 53,
                  "snippet": {
                    "text": "\r\n                index = rawMessage.IndexOf(\"]]\");\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.IndexOf(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'SemmleQLConverter.NormalizeRawMessage(string, out string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SemmleQlConverter.cs"
                },
                "region": {
                  "startLine": 253,
                  "snippet": {
                    "text": "                index = rawMessage.IndexOf(\"[[\");"
                  }
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 1,
                  "endLine": 254,
                  "endColumn": 14,
                  "charOffset": 10319,
                  "charLength": 137,
                  "snippet": {
                    "text": "                rawMessage = rawMessage.Substring(index + \"]]\".Length);\r\n                index = rawMessage.IndexOf(\"[[\");\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.NormalizeRawMessage(System.String,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.IndexOf(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1823",
          "level": "warning",
          "message": {
            "text": "It appears that field 'SemmleQLConverter.s_delimiters' is never used or is only ever assigned to. Use this field or remove it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.s_delimiters"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Semmle' in member name 'SemmleQLConverter.SemmleError' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.SemmleError"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Semmle#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Semmle' in member name 'SemmleQLConverter.SemmleRecommendation' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.SemmleRecommendation"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Semmle#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Semmle' in member name 'SemmleQLConverter.SemmleWarning' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SemmleQLConverter.SemmleWarning"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Semmle#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA3053",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReader.CreateFromStream(Microsoft.CodeAnalysis.Sarif.Converters.SparseReaderDispatchTable,System.IO.Stream,System.Xml.Schema.XmlSchemaSet)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1021",
          "level": "warning",
          "message": {
            "text": "Consider a design that does not require that 'innerText' be an out parameter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/SparseReader.cs"
                },
                "region": {
                  "startLine": 103,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 30,
                  "charOffset": 4682,
                  "charLength": 127,
                  "snippet": {
                    "text": "        public void ReadChildren(string tagName, object parent, out string innerText)\r\n        {\r\n            innerText = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReader.ReadChildren(System.String,System.Object,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "2#"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.SparseReaderDispatchTable"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1823",
          "level": "warning",
          "message": {
            "text": "It appears that field 'StaticDriverVerifierConverter._sb' is never used or is only ever assigned to. Use this field or remove it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter._sb"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'StaticDriverVerifierConverter.IsHarnessOrRulesFiles(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/StaticDriverVerifierConverter.cs"
                },
                "region": {
                  "startLine": 288,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 287,
                  "startColumn": 1,
                  "endLine": 289,
                  "endColumn": 82,
                  "charOffset": 10742,
                  "charLength": 153,
                  "snippet": {
                    "text": "        private bool IsHarnessOrRulesFiles(string fileName)\r\n        {\r\n            return fileName.EndsWith(\".slic\", StringComparison.OrdinalIgnoreCase)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter.IsHarnessOrRulesFiles(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1303",
          "level": "warning",
          "message": {
            "text": "Method 'StaticDriverVerifierConverter.ProcessLine(string, ref int, Result)' passes a literal string as parameter 'text' of a call to 'StaticDriverVerifierConverter.ExtractCallerAndCallee(string, out string, out string)'. Retrieve the following string(s) from a resource table instead: \" \".",
            "messageId": "KnownValue"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/StaticDriverVerifierConverter.cs"
                },
                "region": {
                  "startLine": 181,
                  "snippet": {
                    "text": "                    if (ExtractCallerAndCallee(extraMsg.Trim(), out caller, out callee))"
                  }
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "endLine": 182,
                  "endColumn": 22,
                  "charOffset": 6278,
                  "charLength": 113,
                  "snippet": {
                    "text": "\r\n                    if (ExtractCallerAndCallee(extraMsg.Trim(), out caller, out callee))\r\n                    {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter.ProcessLine(System.String,System.Int32&,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter.ExtractCallerAndCallee(System.String,System.String@,System.String@)#KnownValue"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'StaticDriverVerifierConverter.ProcessLine(string, ref int, Result)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/StaticDriverVerifierConverter.cs"
                },
                "region": {
                  "startLine": 136,
                  "snippet": {
                    "text": "                int line = int.Parse(tokens[LINE]);"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 1,
                  "charOffset": 4643,
                  "charLength": 131,
                  "snippet": {
                    "text": "                // We assume a valid line here. This code will throw if not.\r\n                int line = int.Parse(tokens[LINE]);\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter.ProcessLine(System.String,System.Int32&,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'StaticDriverVerifierConverter.ProcessLine(string, ref int, Result)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/StaticDriverVerifierConverter.cs"
                },
                "region": {
                  "startLine": 177,
                  "snippet": {
                    "text": "                    string extraMsg = $\"{tokens[KIND1]} {tokens[CALLER]} {tokens[CALLEE]}\";"
                  }
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 178,
                  "endColumn": 1,
                  "charOffset": 6120,
                  "charLength": 112,
                  "snippet": {
                    "text": "                {\r\n                    string extraMsg = $\"{tokens[KIND1]} {tokens[CALLER]} {tokens[CALLEE]}\";\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter.ProcessLine(System.String,System.Int32&,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'StaticDriverVerifierConverter.ProcessLine(string, ref int, Result)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/StaticDriverVerifierConverter.cs"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "                        if (stateTokens[0].StartsWith(separatorText))"
                  }
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "endLine": 236,
                  "endColumn": 26,
                  "charOffset": 8613,
                  "charLength": 160,
                  "snippet": {
                    "text": "                        Debug.Assert(stateTokens.Length == 1);\r\n                        if (stateTokens[0].StartsWith(separatorText))\r\n                        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StaticDriverVerifierConverter.ProcessLine(System.String,System.Int32&,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.StartsWith(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1801",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StringReference.Equals(System.Object,System.Object)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "unusedA"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1801",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.StringReference.Equals(System.Object,System.Object)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "unusedB"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ToolFileConverterBase.GetLogicalLocationName(string, string, string)' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ToolFileConverterBase.cs"
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "                index = !string.IsNullOrWhiteSpace(delimiter) ? fullyQualifiedLogicalName.LastIndexOf(delimiter) : -1;"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 14,
                  "charOffset": 3432,
                  "charLength": 148,
                  "snippet": {
                    "text": "            {\r\n                index = !string.IsNullOrWhiteSpace(delimiter) ? fullyQualifiedLogicalName.LastIndexOf(delimiter) : -1;\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFileConverterBase.GetLogicalLocationName(System.String,System.String,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.LastIndexOf(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Cpp' in member name 'ToolFormat.CppCheck' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.CppCheck"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Fpr' in member name 'ToolFormat.FortifyFpr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.FortifyFpr"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Fpr#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Efast' in member name 'ToolFormat.PREfast' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.PREfast"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Efast#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Pylint' in member name 'ToolFormat.Pylint' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.Pylint"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Pylint#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Semmle' in member name 'ToolFormat.SemmleQL' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormat.SemmleQL"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Semmle#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'ToolFormatConverter.ToolFormatConverter(AssemblyLoadFileDelegate)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ToolFormatConverter.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "        public ToolFormatConverter(AssemblyLoadFileDelegate assemblyLoadFileDelegate = null)"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 10,
                  "charOffset": 615,
                  "charLength": 105,
                  "snippet": {
                    "text": "\r\n        public ToolFormatConverter(AssemblyLoadFileDelegate assemblyLoadFileDelegate = null)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter..ctor(Microsoft.CodeAnalysis.Sarif.Converters.AssemblyLoadFileDelegate)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'ToolFormatConverter.ConvertToStandardFormat(string, Stream, IResultLogWriter, OptionallyEmittedData, string)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ToolFormatConverter.cs"
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 95,
                  "charOffset": 4722,
                  "charLength": 152,
                  "snippet": {
                    "text": "            string pluginAssemblyPath = null)\r\n        {\r\n            if (inputStream == null) { throw new ArgumentNullException(nameof(inputStream)); }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter.ConvertToStandardFormat(System.String,System.IO.Stream,Microsoft.CodeAnalysis.Sarif.IResultLogWriter,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'ToolFormatConverter.ConvertToStandardFormat(string, string, string, LoggingOptions, OptionallyEmittedData, string)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ToolFormatConverter.cs"
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 99,
                  "charOffset": 2075,
                  "charLength": 156,
                  "snippet": {
                    "text": "            string pluginAssemblyPath = null)\r\n        {\r\n            if (inputFileName == null) { throw new ArgumentNullException(nameof(inputFileName)); }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter.ConvertToStandardFormat(System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'outputTextStream' can be disposed more than once in method 'ToolFormatConverter.ConvertToStandardFormat(string, string, string, LoggingOptions, OptionallyEmittedData, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 72"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ToolFormatConverter.cs"
                },
                "region": {
                  "startLine": 72,
                  "snippet": {
                    "text": "            }"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 10,
                  "charOffset": 3692,
                  "charLength": 43,
                  "snippet": {
                    "text": "                }\r\n            }\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter.ConvertToStandardFormat(System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'outputTextWriter' can be disposed more than once in method 'ToolFormatConverter.ConvertToStandardFormat(string, string, string, LoggingOptions, OptionallyEmittedData, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 72"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/ToolFormatConverter.cs"
                },
                "region": {
                  "startLine": 72,
                  "snippet": {
                    "text": "            }"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 10,
                  "charOffset": 3692,
                  "charLength": 43,
                  "snippet": {
                    "text": "                }\r\n            }\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ToolFormatConverter.ConvertToStandardFormat(System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'TSLintConverter.CreateResult(TSLintLogEntry)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintConverter.cs"
                },
                "region": {
                  "startLine": 62,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 77,
                  "charOffset": 1899,
                  "charLength": 147,
                  "snippet": {
                    "text": "        internal Result CreateResult(TSLintLogEntry entry)\r\n        {\r\n            entry = entry ?? throw new ArgumentNullException(nameof(entry));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintConverter.CreateResult(Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLogEntry)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2201",
          "level": "error",
          "message": {
            "text": "'TSLintLogReader.NormalizeEntries(JArray)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.",
            "messageId": "TooGeneric"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintLogReader.cs"
                },
                "region": {
                  "startLine": 105,
                  "snippet": {
                    "text": "                    throw new Exception("
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 39,
                  "charOffset": 3976,
                  "charLength": 145,
                  "snippet": {
                    "text": "                    var lineInfo = entryToken as IJsonLineInfo;\r\n                    throw new Exception(\r\n                        string.Format("
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.NormalizeEntries(Newtonsoft.Json.Linq.JArray)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "TooGeneric"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'TSLintLogReader.NormalizeEntries(JArray)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintLogReader.cs"
                },
                "region": {
                  "startLine": 95,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 51,
                  "charOffset": 3670,
                  "charLength": 116,
                  "snippet": {
                    "text": "        private void NormalizeEntries(JArray entries)\r\n        {\r\n            foreach (JToken entryToken in entries)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.NormalizeEntries(Newtonsoft.Json.Linq.JArray)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2201",
          "level": "error",
          "message": {
            "text": "'TSLintLogReader.NormalizeFixProperty(JProperty)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.",
            "messageId": "TooGeneric"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintLogReader.cs"
                },
                "region": {
                  "startLine": 143,
                  "snippet": {
                    "text": "                throw new Exception("
                  }
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "endLine": 144,
                  "endColumn": 35,
                  "charOffset": 5495,
                  "charLength": 136,
                  "snippet": {
                    "text": "                var lineInfo = fixValueToken as IJsonLineInfo;\r\n                throw new Exception(\r\n                    string.Format("
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.NormalizeFixProperty(Newtonsoft.Json.Linq.JProperty)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "TooGeneric"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2201",
          "level": "error",
          "message": {
            "text": "'TSLintLogReader.NormalizeLog(JToken)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.",
            "messageId": "TooGeneric"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintLogReader.cs"
                },
                "region": {
                  "startLine": 84,
                  "snippet": {
                    "text": "                throw new Exception("
                  }
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 35,
                  "charOffset": 3330,
                  "charLength": 87,
                  "snippet": {
                    "text": "            {\r\n                throw new Exception(\r\n                    string.Format("
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.NormalizeLog(Newtonsoft.Json.Linq.JToken)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "TooGeneric"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'streamReader' can be disposed more than once in method 'TSLintLogReader.ReadLog(Stream)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 38"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintLogReader.cs"
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "                    return (TSLintLog)Serializer.ReadObject(normalizedLogStream);"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 18,
                  "charOffset": 1381,
                  "charLength": 119,
                  "snippet": {
                    "text": "                {\r\n                    return (TSLintLog)Serializer.ReadObject(normalizedLogStream);\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.ReadLog(System.IO.Stream)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'this' can be disposed more than once in method 'TSLintLogReader.ReadLog(Stream)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 38"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintLogReader.cs"
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "                    return (TSLintLog)Serializer.ReadObject(normalizedLogStream);"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 18,
                  "charOffset": 1381,
                  "charLength": 119,
                  "snippet": {
                    "text": "                {\r\n                    return (TSLintLog)Serializer.ReadObject(normalizedLogStream);\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.ReadLog(System.IO.Stream)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1002",
          "level": "error",
          "message": {
            "text": "Change 'TSLintLog' in 'TSLintLogReader.ReadLog(Stream)' to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintLogReader.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 77,
                  "charOffset": 770,
                  "charLength": 144,
                  "snippet": {
                    "text": "        public override TSLintLog ReadLog(Stream input)\r\n        {\r\n            input = input ?? throw new ArgumentNullException(nameof(input));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintLogReader.ReadLog(System.IO.Stream)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "level": "error",
          "message": {
            "text": "Rename 'Category' to end in 'Dictionary'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Category"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2237",
          "level": "warning",
          "message": {
            "text": "Add [Serializable] to 'Category' as this type implements ISerializable."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Category"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'Category.ReadXml(XmlReader)', validate parameter 'reader' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/Category.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "            bool wasEmpty = reader.IsEmptyElement;"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 27,
                  "charOffset": 505,
                  "charLength": 89,
                  "snippet": {
                    "text": "        {\r\n            bool wasEmpty = reader.IsEmptyElement;\r\n            reader.Read();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Category.ReadXml(System.Xml.XmlReader)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Defect.Category' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/Defect.cs"
                },
                "region": {
                  "startLine": 35,
                  "snippet": {
                    "text": "        public Category Category { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 6,
                  "charOffset": 872,
                  "charLength": 87,
                  "snippet": {
                    "text": "        [XmlElement(\"CATEGORY\")]\r\n        public Category Category { get; set; }\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect.Category"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Funcline' in member name 'Defect.Funcline' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/Defect.cs"
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "        public string Funcline { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 1,
                  "charOffset": 549,
                  "charLength": 80,
                  "snippet": {
                    "text": "        [XmlElement(\"FUNCLINE\")]\r\n        public string Funcline { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect.Funcline"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Funcline#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1709",
          "level": "error",
          "message": {
            "text": "Correct the casing of 'SFA' in member name 'Defect.SFA' by changing it to 'Sfa'.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/Defect.cs"
                },
                "region": {
                  "startLine": 8,
                  "snippet": {
                    "text": "        public SFA SFA { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 1,
                  "charOffset": 140,
                  "charLength": 67,
                  "snippet": {
                    "text": "        [XmlElement(\"SFA\")]\r\n        public SFA SFA { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.Defect.SFA"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "SFA#Member"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'DefectList.Defects' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/DefectList.cs"
                },
                "region": {
                  "startLine": 10,
                  "snippet": {
                    "text": "        public List<Defect> Defects { get; set; } = new List<Defect>();"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 6,
                  "charOffset": 205,
                  "charLength": 110,
                  "snippet": {
                    "text": "        [XmlElement(\"DEFECT\")]\r\n        public List<Defect> Defects { get; set; } = new List<Defect>();\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.DefectList.Defects"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1002",
          "level": "error",
          "message": {
            "text": "Change 'List<Defect>' in 'DefectList.Defects' to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/DefectList.cs"
                },
                "region": {
                  "startLine": 10,
                  "snippet": {
                    "text": "        public List<Defect> Defects { get; set; } = new List<Defect>();"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 6,
                  "charOffset": 205,
                  "charLength": 110,
                  "snippet": {
                    "text": "        [XmlElement(\"DEFECT\")]\r\n        public List<Defect> Defects { get; set; } = new List<Defect>();\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.DefectList.Defects"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1709",
          "level": "error",
          "message": {
            "text": "Correct the casing of 'PRE' in type name 'PREFastPath' by changing it to 'Pre'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.PREFastPath"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "PRE#Type"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'PREFastPath.SFAs' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/PREFastPath.cs"
                },
                "region": {
                  "startLine": 9,
                  "snippet": {
                    "text": "        public List<SFA> SFAs { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 6,
                  "charOffset": 180,
                  "charLength": 79,
                  "snippet": {
                    "text": "        [XmlElement(\"SFA\")]\r\n        public List<SFA> SFAs { get; set; }\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.PREFastPath.SFAs"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1002",
          "level": "error",
          "message": {
            "text": "Change 'List<SFA>' in 'PREFastPath.SFAs' to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/PREFastPath.cs"
                },
                "region": {
                  "startLine": 9,
                  "snippet": {
                    "text": "        public List<SFA> SFAs { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 6,
                  "charOffset": 180,
                  "charLength": 79,
                  "snippet": {
                    "text": "        [XmlElement(\"SFA\")]\r\n        public List<SFA> SFAs { get; set; }\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.PREFastPath.SFAs"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1709",
          "level": "error",
          "message": {
            "text": "Correct the casing of 'SFAs' in member name 'PREFastPath.SFAs' by changing it to 'Sfas'.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PREFastObjectModel/PREFastPath.cs"
                },
                "region": {
                  "startLine": 9,
                  "snippet": {
                    "text": "        public List<SFA> SFAs { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 6,
                  "charOffset": 180,
                  "charLength": 79,
                  "snippet": {
                    "text": "        [XmlElement(\"SFA\")]\r\n        public List<SFA> SFAs { get; set; }\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.PREFastPath.SFAs"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "SFAs#Member"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1709",
          "level": "error",
          "message": {
            "text": "Correct the casing of 'SFA' in type name 'SFA' by changing it to 'Sfa'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel.SFA"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "SFA#Type"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Pylint' in type name 'PylintLog'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLog"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Pylint#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "level": "error",
          "message": {
            "text": "Rename 'PylintLog' to end in 'Collection'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLog"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Pylint' in type name 'PylintLogEntry'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Pylint#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1721",
          "level": "error",
          "message": {
            "text": "The property name 'PylintLogEntry.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.",
            "messageId": "BaseType"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintObjectModel/PylintLogEntry.cs"
                },
                "region": {
                  "startLine": 11,
                  "snippet": {
                    "text": "        public string Type { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 1,
                  "charOffset": 293,
                  "charLength": 74,
                  "snippet": {
                    "text": "        [JsonProperty(\"type\")]\r\n        public string Type { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogEntry.Type"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "BaseType"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Pylint' in type name 'PylintLogReader'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogReader"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Pylint#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1002",
          "level": "error",
          "message": {
            "text": "Change 'PylintLog' in 'PylintLogReader.ReadLog(Stream)' to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/PylintObjectModel/PylintLogReader.cs"
                },
                "region": {
                  "startLine": 12,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 31,
                  "charOffset": 335,
                  "charLength": 98,
                  "snippet": {
                    "text": "        public override PylintLog ReadLog(Stream input)\r\n        {\r\n            string pylintText;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.PylintObjectModel.PylintLogReader.ReadLog(System.IO.Stream)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "level": "error",
          "message": {
            "text": "Rename 'TSLintLog' to end in 'Collection'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLog"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'TSLintLogEntry.Fixes' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Converters/TSLintObjectModel/TSLintLogEntry.cs"
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "        public IList<TSLintLogFix> Fixes { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 6,
                  "charOffset": 1198,
                  "charLength": 142,
                  "snippet": {
                    "text": "        [DataMember(Name = \"fix\", IsRequired = false, EmitDefaultValue = true)]\r\n        public IList<TSLintLogFix> Fixes { get; set; }\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.TSLintObjectModel.TSLintLogEntry.Fixes"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckCppCheckElementMissing', correct the spelling of 'Cpp' in string value 'CppCheck file did not start with \"results/cppcheck\" element with version information.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckElementNotError', correct the spelling of 'Cpp' in string value 'Could not parse CppCheck error node; element name was not error.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckErrorsElementMissing', correct the spelling of 'Cpp' in string value 'CppCheck file did not contain the errors element in the expected location.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckLocationElementNameIncorrect', correct the spelling of 'Cpp' in string value 'Could not parse CppCheck location node; element name was not 'location'.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckLocationMissingLine', correct the spelling of 'Cpp' in string value 'The `line` attribute for a CppCheck <location> was not set.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckLocationMissingName', correct the spelling of 'Cpp' in string value 'The `file` attribute for a CppCheck <location> was not set.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckLocationNameEmpty', correct the spelling of 'Cpp' in string value 'The `file` value for a CppCheckLocation was empty.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckLocationNegativeLine', correct the spelling of 'Cpp' in string value 'The `line` value for a CppCheckLocation must be positive.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckMissingLocation', correct the spelling of 'Cpp' in string value 'A CppCheck entry must have a nonzero number of locations.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1703",
          "level": "warning",
          "message": {
            "text": "In resource 'Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resx', referenced by name 'CppCheckCppCheckElementMissing', correct the spelling of 'cppcheck' in string value 'CppCheck file did not start with \"results/cppcheck\" element with version information.'.",
            "messageId": "StringResource"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Converters.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.converters.dll!Microsoft.CodeAnalysis.Sarif.Converters.ConverterResources.resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "cppcheck#StringResource"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2243",
          "level": "warning",
          "message": {
            "text": "In the constructor of 'AssemblyInformationalVersionAttribute', change the value of argument 'informationalVersion', which is currently \"2.0.0-csd.1.0.1\", to something that can be correctly parsed as 'Version'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in assembly name 'Sarif.dll'.",
            "messageId": "Assembly"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Assembly"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Attachment.Rectangles' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Attachment.cs"
                },
                "region": {
                  "startLine": 56,
                  "snippet": {
                    "text": "        public IList<Rectangle> Rectangles { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 1,
                  "charOffset": 2005,
                  "charLength": 147,
                  "snippet": {
                    "text": "        [DataMember(Name = \"rectangles\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Rectangle> Rectangles { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Attachment.Rectangles"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Attachment.Regions' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Attachment.cs"
                },
                "region": {
                  "startLine": 50,
                  "snippet": {
                    "text": "        public IList<Region> Regions { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 1,
                  "charOffset": 1735,
                  "charLength": 138,
                  "snippet": {
                    "text": "        [DataMember(Name = \"regions\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Region> Regions { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Attachment.Regions"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'CodeFlow.CodeFlow(CodeFlow)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nCodeFlow..ctor(CodeFlow)\r\nCodeFlow.Init(Message, IEnumerable<ThreadFlow>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/CodeFlow.cs"
                },
                "region": {
                  "startLine": 86,
                  "snippet": {
                    "text": "        public CodeFlow(CodeFlow other)"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 10,
                  "charOffset": 3488,
                  "charLength": 76,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public CodeFlow(CodeFlow other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow..ctor(Microsoft.CodeAnalysis.Sarif.CodeFlow)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'CodeFlow.CodeFlow(Message, IEnumerable<ThreadFlow>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nCodeFlow..ctor(Message, IEnumerable<ThreadFlow>, IDictionary<String,SerializedPropertyInfo>)\r\nCodeFlow.Init(Message, IEnumerable<ThreadFlow>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/CodeFlow.cs"
                },
                "region": {
                  "startLine": 72,
                  "snippet": {
                    "text": "        public CodeFlow(Message message, IEnumerable<ThreadFlow> threadFlows, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 10,
                  "charOffset": 2857,
                  "charLength": 166,
                  "snippet": {
                    "text": "        /// </param>\r\n        public CodeFlow(Message message, IEnumerable<ThreadFlow> threadFlows, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow..ctor(Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlow>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'CodeFlow.ThreadFlows' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/CodeFlow.cs"
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "        public IList<ThreadFlow> ThreadFlows { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1677,
                  "charLength": 123,
                  "snippet": {
                    "text": "        [DataMember(Name = \"threadFlows\", IsRequired = true)]\r\n        public IList<ThreadFlow> ThreadFlows { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.CodeFlow.ThreadFlows"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'ConsoleLogger.FormatNotificationMessage(Notification)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/ConsoleLogger.cs"
                },
                "region": {
                  "startLine": 257,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 256,
                  "startColumn": 1,
                  "endLine": 258,
                  "endColumn": 37,
                  "charOffset": 8264,
                  "charLength": 124,
                  "snippet": {
                    "text": "        private string FormatNotificationMessage(Notification notification)\r\n        {\r\n            string issueType = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ConsoleLogger.FormatNotificationMessage(Microsoft.CodeAnalysis.Sarif.Notification)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'ConsoleLogger.NormalizeMessage(string, bool)', correct the spelling of 'enquote' in parameter name 'enquote' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/ConsoleLogger.cs"
                },
                "region": {
                  "startLine": 212,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "endLine": 213,
                  "endColumn": 33,
                  "charOffset": 6816,
                  "charLength": 120,
                  "snippet": {
                    "text": "        public static string NormalizeMessage(string message, bool enquote)\r\n        {\r\n            if (message == null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ConsoleLogger.NormalizeMessage(System.String,System.Boolean)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "enquote#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Conversion.AnalysisToolLogFiles' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Conversion.cs"
                },
                "region": {
                  "startLine": 50,
                  "snippet": {
                    "text": "        public IList<FileLocation> AnalysisToolLogFiles { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 1,
                  "charOffset": 1829,
                  "charLength": 170,
                  "snippet": {
                    "text": "        [DataMember(Name = \"analysisToolLogFiles\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<FileLocation> AnalysisToolLogFiles { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Conversion.AnalysisToolLogFiles"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Edge.Edge(Edge)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nEdge..ctor(Edge)\r\nEdge.Init(String, Message, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Edge.cs"
                },
                "region": {
                  "startLine": 104,
                  "snippet": {
                    "text": "        public Edge(Edge other)"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 10,
                  "charOffset": 4054,
                  "charLength": 68,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Edge(Edge other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Edge..ctor(Microsoft.CodeAnalysis.Sarif.Edge)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Edge.Edge(string, Message, string, string, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nEdge..ctor(String, Message, String, String, IDictionary<String,SerializedPropertyInfo>)\r\nEdge.Init(String, Message, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Edge.cs"
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        public Edge(string id, Message label, string sourceNodeId, string targetNodeId, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 10,
                  "charOffset": 3400,
                  "charLength": 176,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Edge(string id, Message label, string sourceNodeId, string targetNodeId, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Edge..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'EdgeTraversal.EdgeTraversal(EdgeTraversal)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nEdgeTraversal..ctor(EdgeTraversal)\r\nEdgeTraversal.Init(String, Message, IDictionary<String,String>, Int32, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/EdgeTraversal.cs"
                },
                "region": {
                  "startLine": 104,
                  "snippet": {
                    "text": "        public EdgeTraversal(EdgeTraversal other)"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 10,
                  "charOffset": 4354,
                  "charLength": 86,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public EdgeTraversal(EdgeTraversal other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal..ctor(Microsoft.CodeAnalysis.Sarif.EdgeTraversal)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'EdgeTraversal.EdgeTraversal(string, Message, IDictionary<string, string>, int, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nEdgeTraversal..ctor(String, Message, IDictionary<String,String>, Int32, IDictionary<String,SerializedPropertyInfo>)\r\nEdgeTraversal.Init(String, Message, IDictionary<String,String>, Int32, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/EdgeTraversal.cs"
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        public EdgeTraversal(string edgeId, Message message, IDictionary<string, string> finalState, int stepOverEdgeCount, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 10,
                  "charOffset": 3646,
                  "charLength": 212,
                  "snippet": {
                    "text": "        /// </param>\r\n        public EdgeTraversal(string edgeId, Message message, IDictionary<string, string> finalState, int stepOverEdgeCount, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Int32,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'EdgeTraversal.FinalState' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/EdgeTraversal.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        public IDictionary<string, string> FinalState { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 1,
                  "charOffset": 1836,
                  "charLength": 158,
                  "snippet": {
                    "text": "        [DataMember(Name = \"finalState\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> FinalState { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.EdgeTraversal.FinalState"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ExceptionData.Create(Exception)', validate parameter 'exception' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/ExceptionData.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "            return new ExceptionData"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 14,
                  "charOffset": 529,
                  "charLength": 62,
                  "snippet": {
                    "text": "        {\r\n            return new ExceptionData\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExceptionData.Create(System.Exception)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ExceptionData.InnerExceptions' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ExceptionData.cs"
                },
                "region": {
                  "startLine": 53,
                  "snippet": {
                    "text": "        public IList<ExceptionData> InnerExceptions { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 1,
                  "charOffset": 2038,
                  "charLength": 161,
                  "snippet": {
                    "text": "        [DataMember(Name = \"innerExceptions\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<ExceptionData> InnerExceptions { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExceptionData.InnerExceptions"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ExtensionMethods.GetFileName(this Uri)', validate parameter 'uri' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/ExtensionMethods.cs"
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "            if (!uri.IsAbsoluteUri)"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 14,
                  "charOffset": 1580,
                  "charLength": 61,
                  "snippet": {
                    "text": "        {\r\n            if (!uri.IsAbsoluteUri)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExtensionMethods.GetFileName(System.Uri)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1726",
          "level": "error",
          "message": {
            "text": "Replace the term 'Flags' in member name 'ExtensionMethods.ToFlags(this IEnumerable<OptionallyEmittedData>)' with an appropriate alternate or remove it entirely.",
            "messageId": "MemberNoAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/ExtensionMethods.cs"
                },
                "region": {
                  "startLine": 24,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 81,
                  "charOffset": 604,
                  "charLength": 207,
                  "snippet": {
                    "text": "        public static OptionallyEmittedData ToFlags(this IEnumerable<OptionallyEmittedData> optionallyEmittedData)\r\n        {\r\n            OptionallyEmittedData convertedToFlags = OptionallyEmittedData.None;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ExtensionMethods.ToFlags(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Flags#MemberNoAlternate"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'FileChange.Replacements' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileChange.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "        public IList<Replacement> Replacements { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1574,
                  "charLength": 126,
                  "snippet": {
                    "text": "        [DataMember(Name = \"replacements\", IsRequired = true)]\r\n        public IList<Replacement> Replacements { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileChange.Replacements"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'FileData.FileData(FileData)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nFileData..ctor(FileData)\r\nFileData.Init(FileLocation, String, Int32, Int32, FileRoles, String, FileContent, String, IEnumerable<Hash>, DateTime, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileData.cs"
                },
                "region": {
                  "startLine": 158,
                  "snippet": {
                    "text": "        public FileData(FileData other)"
                  }
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "endLine": 159,
                  "endColumn": 10,
                  "charOffset": 6951,
                  "charLength": 76,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public FileData(FileData other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData..ctor(Microsoft.CodeAnalysis.Sarif.FileData)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'FileData.FileData(FileLocation, string, int, int, FileRoles, string, FileContent, string, IEnumerable<Hash>, DateTime, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nFileData..ctor(FileLocation, String, Int32, Int32, FileRoles, String, FileContent, String, IEnumerable<Hash>, DateTime, IDictionary<String,SerializedPropertyInfo>)\r\nFileData.Init(FileLocation, String, Int32, Int32, FileRoles, String, FileContent, String, IEnumerable<Hash>, DateTime, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileData.cs"
                },
                "region": {
                  "startLine": 144,
                  "snippet": {
                    "text": "        public FileData(FileLocation fileLocation, string parentKey, int offset, int length, FileRoles roles, string mimeType, FileContent contents, string encoding, IEnumerable<Hash> hashes, DateTime lastModifiedTime, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "endLine": 145,
                  "endColumn": 10,
                  "charOffset": 6097,
                  "charLength": 307,
                  "snippet": {
                    "text": "        /// </param>\r\n        public FileData(FileLocation fileLocation, string parentKey, int offset, int length, FileRoles roles, string mimeType, FileContent contents, string encoding, IEnumerable<Hash> hashes, DateTime lastModifiedTime, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData..ctor(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.FileRoles,System.String,Microsoft.CodeAnalysis.Sarif.FileContent,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Hash>,System.DateTime,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'FileData.Create(Uri, OptionallyEmittedData, string, Encoding, IFileSystem)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/FileData.cs"
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 79,
                  "charOffset": 759,
                  "charLength": 133,
                  "snippet": {
                    "text": "            IFileSystem fileSystem = null)\r\n        {\r\n            if (uri == null) { throw new ArgumentNullException(nameof(uri)); }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData.Create(System.Uri,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,System.String,System.Text.Encoding,Microsoft.CodeAnalysis.Sarif.IFileSystem)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'FileData.Hashes' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileData.cs"
                },
                "region": {
                  "startLine": 87,
                  "snippet": {
                    "text": "        public IList<Hash> Hashes { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 1,
                  "charOffset": 3432,
                  "charLength": 134,
                  "snippet": {
                    "text": "        [DataMember(Name = \"hashes\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Hash> Hashes { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileData.Hashes"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'FileDataEqualityComparer.Equals(FileData, FileData)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileDataEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 720,
                  "charLength": 115,
                  "snippet": {
                    "text": "        public bool Equals(FileData left, FileData right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileDataEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.FileData,Microsoft.CodeAnalysis.Sarif.FileData)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1054",
          "level": "error",
          "message": {
            "text": "Change the type of parameter 'uriBaseId' of method 'FileLocation.FileLocation(Uri, string)' from string to System.Uri, or provide an overload of 'FileLocation.FileLocation(Uri, string)', that allows 'uriBaseId' to be passed as a System.Uri object."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileLocation.cs"
                },
                "region": {
                  "startLine": 62,
                  "snippet": {
                    "text": "        public FileLocation(Uri uri, string uriBaseId)"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 10,
                  "charOffset": 2263,
                  "charLength": 87,
                  "snippet": {
                    "text": "        /// </param>\r\n        public FileLocation(Uri uri, string uriBaseId)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation..ctor(System.Uri,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1#"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileLocation.CreateFromFilesDictionaryKey(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/FileLocation.cs"
                },
                "region": {
                  "startLine": 53,
                  "snippet": {
                    "text": "            if (key.StartsWith(\"#\"))"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 14,
                  "charOffset": 2317,
                  "charLength": 53,
                  "snippet": {
                    "text": "\r\n            if (key.StartsWith(\"#\"))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation.CreateFromFilesDictionaryKey(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.StartsWith(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'FileLocation.CreateFromFilesDictionaryKey(string)', validate parameter 'key' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/FileLocation.cs"
                },
                "region": {
                  "startLine": 53,
                  "snippet": {
                    "text": "            if (key.StartsWith(\"#\"))"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 14,
                  "charOffset": 2317,
                  "charLength": 53,
                  "snippet": {
                    "text": "\r\n            if (key.StartsWith(\"#\"))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation.CreateFromFilesDictionaryKey(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2234",
          "level": "warning",
          "message": {
            "text": "Modify 'FileLocation.TryReconstructAbsoluteUri(IDictionary<string, Uri>, out Uri)' to call 'Uri.Uri(Uri, Uri)' instead of 'Uri.Uri(Uri, string)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/FileLocation.cs"
                },
                "region": {
                  "startLine": 22,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 68,
                  "charOffset": 1049,
                  "charLength": 191,
                  "snippet": {
                    "text": "        public bool TryReconstructAbsoluteUri(IDictionary<string, Uri> originalUriBaseIds, out Uri resolvedUri)\r\n        {\r\n            resolvedUri = this.Uri.IsAbsoluteUri ? this.Uri : null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation.TryReconstructAbsoluteUri(System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Uri&)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1056",
          "level": "error",
          "message": {
            "text": "Change the type of property 'FileLocation.UriBaseId' from string to System.Uri."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/FileLocation.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "        public string UriBaseId { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1536,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"uriBaseId\", IsRequired = false, EmitDefaultValue = false)]\r\n        public string UriBaseId { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileLocation.UriBaseId"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1823",
          "level": "warning",
          "message": {
            "text": "It appears that field 'FileRegionsCache._filePathToNewLineIndexMap' is never used or is only ever assigned to. Use this field or remove it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache._filePathToNewLineIndexMap"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1823",
          "level": "warning",
          "message": {
            "text": "It appears that field 'FileRegionsCache._run' is never used or is only ever assigned to. Use this field or remove it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache._run"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'FileRegionsCache.PopulateCharLength(NewLineIndex, Region)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/FileRegionsCache.cs"
                },
                "region": {
                  "startLine": 259,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 258,
                  "startColumn": 1,
                  "endLine": 260,
                  "endColumn": 95,
                  "charOffset": 11630,
                  "charLength": 185,
                  "snippet": {
                    "text": "        private void PopulateCharLength(NewLineIndex lineIndex, Region region)\r\n        {\r\n            // Populated at this point: StartLine, EndLine, StartColumn, EndColumn, CharOffset"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache.PopulateCharLength(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'FileRegionsCache.PopulateEndColumn(NewLineIndex, Region, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/FileRegionsCache.cs"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 212,
                  "startColumn": 1,
                  "endLine": 214,
                  "endColumn": 72,
                  "charOffset": 9732,
                  "charLength": 178,
                  "snippet": {
                    "text": "        private void PopulateEndColumn(NewLineIndex lineIndex, Region region, string fileText)\r\n        {\r\n            // Populated at this point: StartLine, EndLine, StartColumn"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache.PopulateEndColumn(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'FileRegionsCache.PopulatePropertiesFromCharOffsetAndLength(NewLineIndex, Region)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/FileRegionsCache.cs"
                },
                "region": {
                  "startLine": 129,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 130,
                  "endColumn": 50,
                  "charOffset": 5767,
                  "charLength": 166,
                  "snippet": {
                    "text": "        private void PopulatePropertiesFromCharOffsetAndLength(NewLineIndex newLineIndex, Region region)\r\n        {\r\n            Debug.Assert(!region.IsBinaryRegion);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.FileRegionsCache.PopulatePropertiesFromCharOffsetAndLength(Microsoft.CodeAnalysis.Sarif.NewLineIndex,Microsoft.CodeAnalysis.Sarif.Region)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Fix.FileChanges' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Fix.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "        public IList<FileChange> FileChanges { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1695,
                  "charLength": 123,
                  "snippet": {
                    "text": "        [DataMember(Name = \"fileChanges\", IsRequired = true)]\r\n        public IList<FileChange> FileChanges { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Fix.FileChanges"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Graph.Graph(Graph)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nGraph..ctor(Graph)\r\nGraph.Init(String, Message, IEnumerable<Node>, IEnumerable<Edge>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Graph.cs"
                },
                "region": {
                  "startLine": 104,
                  "snippet": {
                    "text": "        public Graph(Graph other)"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 10,
                  "charOffset": 4153,
                  "charLength": 70,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Graph(Graph other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph..ctor(Microsoft.CodeAnalysis.Sarif.Graph)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Graph.Graph(string, Message, IEnumerable<Node>, IEnumerable<Edge>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nGraph..ctor(String, Message, IEnumerable<Node>, IEnumerable<Edge>, IDictionary<String,SerializedPropertyInfo>)\r\nGraph.Init(String, Message, IEnumerable<Node>, IEnumerable<Edge>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Graph.cs"
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        public Graph(string id, Message description, IEnumerable<Node> nodes, IEnumerable<Edge> edges, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 10,
                  "charOffset": 3491,
                  "charLength": 191,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Graph(string id, Message description, IEnumerable<Node> nodes, IEnumerable<Edge> edges, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Node>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Edge>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Graph.Edges' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Graph.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        public IList<Edge> Edges { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 2082,
                  "charLength": 105,
                  "snippet": {
                    "text": "        [DataMember(Name = \"edges\", IsRequired = true)]\r\n        public IList<Edge> Edges { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph.Edges"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Graph.Nodes' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Graph.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        public IList<Node> Nodes { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 1,
                  "charOffset": 1853,
                  "charLength": 105,
                  "snippet": {
                    "text": "        [DataMember(Name = \"nodes\", IsRequired = true)]\r\n        public IList<Node> Nodes { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Graph.Nodes"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'GraphEqualityComparer.Equals(Graph, Graph)' has a cyclomatic complexity of 26. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 705,
                  "charLength": 109,
                  "snippet": {
                    "text": "        public bool Equals(Graph left, Graph right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Graph,Microsoft.CodeAnalysis.Sarif.Graph)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'GraphTraversal.GraphTraversal(GraphTraversal)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nGraphTraversal..ctor(GraphTraversal)\r\nGraphTraversal.Init(String, Message, IDictionary<String,String>, IEnumerable<EdgeTraversal>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphTraversal.cs"
                },
                "region": {
                  "startLine": 104,
                  "snippet": {
                    "text": "        public GraphTraversal(GraphTraversal other)"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 10,
                  "charOffset": 4349,
                  "charLength": 88,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public GraphTraversal(GraphTraversal other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal..ctor(Microsoft.CodeAnalysis.Sarif.GraphTraversal)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'GraphTraversal.GraphTraversal(string, Message, IDictionary<string, string>, IEnumerable<EdgeTraversal>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nGraphTraversal..ctor(String, Message, IDictionary<String,String>, IEnumerable<EdgeTraversal>, IDictionary<String,SerializedPropertyInfo>)\r\nGraphTraversal.Init(String, Message, IDictionary<String,String>, IEnumerable<EdgeTraversal>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphTraversal.cs"
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        public GraphTraversal(string graphId, Message description, IDictionary<string, string> initialState, IEnumerable<EdgeTraversal> edgeTraversals, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 10,
                  "charOffset": 3608,
                  "charLength": 240,
                  "snippet": {
                    "text": "        /// </param>\r\n        public GraphTraversal(string graphId, Message description, IDictionary<string, string> initialState, IEnumerable<EdgeTraversal> edgeTraversals, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.EdgeTraversal>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'GraphTraversal.EdgeTraversals' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphTraversal.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        public IList<EdgeTraversal> EdgeTraversals { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 2093,
                  "charLength": 132,
                  "snippet": {
                    "text": "        [DataMember(Name = \"edgeTraversals\", IsRequired = true)]\r\n        public IList<EdgeTraversal> EdgeTraversals { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal.EdgeTraversals"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'GraphTraversal.InitialState' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphTraversal.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        public IDictionary<string, string> InitialState { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 1,
                  "charOffset": 1811,
                  "charLength": 162,
                  "snippet": {
                    "text": "        [DataMember(Name = \"initialState\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> InitialState { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversal.InitialState"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'GraphTraversalEqualityComparer.Equals(GraphTraversal, GraphTraversal)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/GraphTraversalEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 750,
                  "charLength": 127,
                  "snippet": {
                    "text": "        public bool Equals(GraphTraversal left, GraphTraversal right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.GraphTraversalEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.GraphTraversal,Microsoft.CodeAnalysis.Sarif.GraphTraversal)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'HashData.HashData(string, string, string)', correct the spelling of 'sha' in parameter name 'sha1' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashData.cs"
                },
                "region": {
                  "startLine": 8,
                  "snippet": {
                    "text": "        public HashData(string md5, string sha1, string sha256)"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 10,
                  "charOffset": 225,
                  "charLength": 81,
                  "snippet": {
                    "text": "    {\r\n        public HashData(string md5, string sha1, string sha256)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData..ctor(System.String,System.String,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sha#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'HashData.HashData(string, string, string)', correct the spelling of 'sha' in parameter name 'sha256' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashData.cs"
                },
                "region": {
                  "startLine": 8,
                  "snippet": {
                    "text": "        public HashData(string md5, string sha1, string sha256)"
                  }
                },
                "contextRegion": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 10,
                  "charOffset": 225,
                  "charLength": 81,
                  "snippet": {
                    "text": "    {\r\n        public HashData(string md5, string sha1, string sha256)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData..ctor(System.String,System.String,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sha#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'HashData.Sha1' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashData.cs"
                },
                "region": {
                  "startLine": 17,
                  "snippet": {
                    "text": "        public string Sha1 { get; }"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 1,
                  "charOffset": 437,
                  "charLength": 39,
                  "snippet": {
                    "text": "\r\n        public string Sha1 { get; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData.Sha1"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'HashData.Sha256' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashData.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "        public string Sha256 { get; }"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 1,
                  "charOffset": 476,
                  "charLength": 41,
                  "snippet": {
                    "text": "\r\n        public string Sha256 { get; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashData.Sha256"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'stream' can be disposed more than once in method 'HashUtilities.ComputeHashes(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 50"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashUtilities.cs"
                },
                "region": {
                  "startLine": 50,
                  "snippet": {
                    "text": "                        return new HashData(md5, sha1, sha256);"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 22,
                  "charOffset": 2061,
                  "charLength": 88,
                  "snippet": {
                    "text": "\r\n                        return new HashData(md5, sha1, sha256);\r\n                    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeHashes(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA5350",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeHashes(System.String)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security.Cryptography",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA5354",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeHashes(System.String)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security.Cryptography",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'stream' can be disposed more than once in method 'HashUtilities.ComputeMD5Hash(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 124"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashUtilities.cs"
                },
                "region": {
                  "startLine": 124,
                  "snippet": {
                    "text": "                }"
                  }
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 125,
                  "endColumn": 14,
                  "charOffset": 4764,
                  "charLength": 55,
                  "snippet": {
                    "text": "                    }\r\n                }\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeMD5Hash(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA5350",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeMD5Hash(System.String)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security.Cryptography",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'stream' can be disposed more than once in method 'HashUtilities.ComputeSha1Hash(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 100"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashUtilities.cs"
                },
                "region": {
                  "startLine": 100,
                  "snippet": {
                    "text": "                }"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "endLine": 101,
                  "endColumn": 14,
                  "charOffset": 3867,
                  "charLength": 55,
                  "snippet": {
                    "text": "                    }\r\n                }\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeSha1Hash(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'HashUtilities.ComputeSha1Hash(string)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashUtilities.cs"
                },
                "region": {
                  "startLine": 85,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "endLine": 86,
                  "endColumn": 32,
                  "charOffset": 3240,
                  "charLength": 105,
                  "snippet": {
                    "text": "        public static string ComputeSha1Hash(string fileName)\r\n        {\r\n            string sha1 = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeSha1Hash(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA5354",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeSha1Hash(System.String)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security.Cryptography",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2202",
          "level": "warning",
          "message": {
            "text": "Object 'stream' can be disposed more than once in method 'HashUtilities.ComputeSha256Hash(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 76"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashUtilities.cs"
                },
                "region": {
                  "startLine": 76,
                  "snippet": {
                    "text": "                }"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 14,
                  "charOffset": 2959,
                  "charLength": 55,
                  "snippet": {
                    "text": "                    }\r\n                }\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeSha256Hash(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'HashUtilities.ComputeSha256Hash(string)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/HashUtilities.cs"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 38,
                  "charOffset": 2314,
                  "charLength": 113,
                  "snippet": {
                    "text": "        public static string ComputeSha256Hash(string fileName)\r\n        {\r\n            string sha256Hash = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.HashUtilities.ComputeSha256Hash(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.IAnalysisContext.Policy"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1720",
          "level": "error",
          "message": {
            "text": "In member 'IFileSystem.WriteAllBytes(string, byte[])', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.",
            "messageId": "LanguageIndependentMemberParameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.IFileSystem.WriteAllBytes(System.String,System.Byte[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "bytes#LanguageIndependentMemberParameter"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1040",
          "level": "warning",
          "message": {
            "text": "Define a custom attribute to replace 'IMarker'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.IMarker"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "level": "error",
          "message": {
            "text": "Rename 'IntegerSet' to end in 'Collection'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.IntegerSet"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Invocation.Invocation(Invocation)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nInvocation..ctor(Invocation)\r\nInvocation.Init(IEnumerable<Attachment>, String, IEnumerable<String>, IEnumerable<FileLocation>, DateTime, DateTime, Int32, IEnumerable<Notification>, IEnumerable<Notification>, String, String, Int32, String, Boolean, String, String, Int32, FileLocation, String, IDictionary<String,String>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 284,
                  "snippet": {
                    "text": "        public Invocation(Invocation other)"
                  }
                },
                "contextRegion": {
                  "startLine": 283,
                  "startColumn": 1,
                  "endLine": 285,
                  "endColumn": 10,
                  "charOffset": 13924,
                  "charLength": 80,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Invocation(Invocation other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(Microsoft.CodeAnalysis.Sarif.Invocation)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Invocation.Invocation(IEnumerable<Attachment>, string, IEnumerable<string>, IEnumerable<FileLocation>, DateTime, DateTime, int, IEnumerable<Notification>, IEnumerable<Notification>, string, string, int, string, bool, string, string, int, FileLocation, string, IDictionary<string, string>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nInvocation..ctor(IEnumerable<Attachment>, String, IEnumerable<String>, IEnumerable<FileLocation>, DateTime, DateTime, Int32, IEnumerable<Notification>, IEnumerable<Notification>, String, String, Int32, String, Boolean, String, String, Int32, FileLocation, String, IDictionary<String,String>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<String,SerializedPropertyInfo>)\r\nInvocation.Init(IEnumerable<Attachment>, String, IEnumerable<String>, IEnumerable<FileLocation>, DateTime, DateTime, Int32, IEnumerable<Notification>, IEnumerable<Notification>, String, String, Int32, String, Boolean, String, String, Int32, FileLocation, String, IDictionary<String,String>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 270,
                  "snippet": {
                    "text": "        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 10,
                  "charOffset": 12340,
                  "charLength": 776,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'Invocation.Invocation(IEnumerable<Attachment>, string, IEnumerable<string>, IEnumerable<FileLocation>, DateTime, DateTime, int, IEnumerable<Notification>, IEnumerable<Notification>, string, string, int, string, bool, string, string, int, FileLocation, string, IDictionary<string, string>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<string, SerializedPropertyInfo>)', correct the spelling of 'Stderr' in parameter name 'stdoutStderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 270,
                  "snippet": {
                    "text": "        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 10,
                  "charOffset": 12340,
                  "charLength": 776,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stderr#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'Invocation.Invocation(IEnumerable<Attachment>, string, IEnumerable<string>, IEnumerable<FileLocation>, DateTime, DateTime, int, IEnumerable<Notification>, IEnumerable<Notification>, string, string, int, string, bool, string, string, int, FileLocation, string, IDictionary<string, string>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<string, SerializedPropertyInfo>)', correct the spelling of 'stderr' in parameter name 'stderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 270,
                  "snippet": {
                    "text": "        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 10,
                  "charOffset": 12340,
                  "charLength": 776,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "stderr#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'Invocation.Invocation(IEnumerable<Attachment>, string, IEnumerable<string>, IEnumerable<FileLocation>, DateTime, DateTime, int, IEnumerable<Notification>, IEnumerable<Notification>, string, string, int, string, bool, string, string, int, FileLocation, string, IDictionary<string, string>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<string, SerializedPropertyInfo>)', correct the spelling of 'stdin' in parameter name 'stdin' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 270,
                  "snippet": {
                    "text": "        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 10,
                  "charOffset": 12340,
                  "charLength": 776,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "stdin#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'Invocation.Invocation(IEnumerable<Attachment>, string, IEnumerable<string>, IEnumerable<FileLocation>, DateTime, DateTime, int, IEnumerable<Notification>, IEnumerable<Notification>, string, string, int, string, bool, string, string, int, FileLocation, string, IDictionary<string, string>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<string, SerializedPropertyInfo>)', correct the spelling of 'stdout' in parameter name 'stdout' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 270,
                  "snippet": {
                    "text": "        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 10,
                  "charOffset": 12340,
                  "charLength": 776,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "stdout#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'Invocation.Invocation(IEnumerable<Attachment>, string, IEnumerable<string>, IEnumerable<FileLocation>, DateTime, DateTime, int, IEnumerable<Notification>, IEnumerable<Notification>, string, string, int, string, bool, string, string, int, FileLocation, string, IDictionary<string, string>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<string, SerializedPropertyInfo>)', correct the spelling of 'stdout' in parameter name 'stdoutStderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 270,
                  "snippet": {
                    "text": "        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 10,
                  "charOffset": 12340,
                  "charLength": 776,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Invocation(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "stdout#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Invocation.Arguments' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        public IList<string> Arguments { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 1,
                  "charOffset": 1893,
                  "charLength": 142,
                  "snippet": {
                    "text": "        [DataMember(Name = \"arguments\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<string> Arguments { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Arguments"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Invocation.Attachments' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "        public IList<Attachment> Attachments { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 1,
                  "charOffset": 1324,
                  "charLength": 150,
                  "snippet": {
                    "text": "        [DataMember(Name = \"attachments\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Attachment> Attachments { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Attachments"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Invocation.ConfigurationNotifications' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 87,
                  "snippet": {
                    "text": "        public IList<Notification> ConfigurationNotifications { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 1,
                  "charOffset": 3621,
                  "charLength": 182,
                  "snippet": {
                    "text": "        [DataMember(Name = \"configurationNotifications\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Notification> ConfigurationNotifications { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.ConfigurationNotifications"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'Invocation.Create(bool, IEnumerable<string>)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Invocation.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 44,
                  "charOffset": 528,
                  "charLength": 111,
                  "snippet": {
                    "text": "            IEnumerable<string> propertiesToLog = null)\r\n        {\r\n            var invocation = new Invocation"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Create(System.Boolean,System.Collections.Generic.IEnumerable`1<System.String>)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Invocation.EnvironmentVariables' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 153,
                  "snippet": {
                    "text": "        public IDictionary<string, string> EnvironmentVariables { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 154,
                  "endColumn": 1,
                  "charOffset": 6616,
                  "charLength": 178,
                  "snippet": {
                    "text": "        [DataMember(Name = \"environmentVariables\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> EnvironmentVariables { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.EnvironmentVariables"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'Invocation.Init(IEnumerable<Attachment>, string, IEnumerable<string>, IEnumerable<FileLocation>, DateTime, DateTime, int, IEnumerable<Notification>, IEnumerable<Notification>, string, string, int, string, bool, string, string, int, FileLocation, string, IDictionary<string, string>, FileLocation, FileLocation, FileLocation, FileLocation, IDictionary<string, SerializedPropertyInfo>)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 313,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 312,
                  "startColumn": 1,
                  "endLine": 314,
                  "endColumn": 37,
                  "charOffset": 15116,
                  "charLength": 792,
                  "snippet": {
                    "text": "        private void Init(IEnumerable<Attachment> attachments, string commandLine, IEnumerable<string> arguments, IEnumerable<FileLocation> responseFiles, DateTime startTime, DateTime endTime, int exitCode, IEnumerable<Notification> toolNotifications, IEnumerable<Notification> configurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool toolExecutionSuccessful, string machine, string account, int processId, FileLocation executableLocation, string workingDirectory, IDictionary<string, string> environmentVariables, FileLocation stdin, FileLocation stdout, FileLocation stderr, FileLocation stdoutStderr, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {\r\n            if (attachments != null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Init(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.FileLocation>,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Notification>,System.String,System.String,System.Int32,System.String,System.Boolean,System.String,System.String,System.Int32,Microsoft.CodeAnalysis.Sarif.FileLocation,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Invocation.ResponseFiles' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        public IList<FileLocation> ResponseFiles { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 2171,
                  "charLength": 156,
                  "snippet": {
                    "text": "        [DataMember(Name = \"responseFiles\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<FileLocation> ResponseFiles { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.ResponseFiles"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stderr' in member name 'Invocation.Stderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 171,
                  "snippet": {
                    "text": "        public FileLocation Stderr { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "endLine": 172,
                  "endColumn": 1,
                  "charOffset": 7484,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"stderr\", IsRequired = false, EmitDefaultValue = false)]\r\n        public FileLocation Stderr { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Stderr"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stderr#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stdin' in member name 'Invocation.Stdin' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 159,
                  "snippet": {
                    "text": "        public FileLocation Stdin { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 158,
                  "startColumn": 1,
                  "endLine": 160,
                  "endColumn": 1,
                  "charOffset": 6933,
                  "charLength": 133,
                  "snippet": {
                    "text": "        [DataMember(Name = \"stdin\", IsRequired = false, EmitDefaultValue = false)]\r\n        public FileLocation Stdin { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Stdin"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stdin#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stdout' in member name 'Invocation.Stdout' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 165,
                  "snippet": {
                    "text": "        public FileLocation Stdout { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "endLine": 166,
                  "endColumn": 1,
                  "charOffset": 7208,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"stdout\", IsRequired = false, EmitDefaultValue = false)]\r\n        public FileLocation Stdout { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.Stdout"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stdout#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stderr' in member name 'Invocation.StdoutStderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 177,
                  "snippet": {
                    "text": "        public FileLocation StdoutStderr { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 178,
                  "endColumn": 1,
                  "charOffset": 7792,
                  "charLength": 147,
                  "snippet": {
                    "text": "        [DataMember(Name = \"stdoutStderr\", IsRequired = false, EmitDefaultValue = false)]\r\n        public FileLocation StdoutStderr { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.StdoutStderr"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stderr#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stdout' in member name 'Invocation.StdoutStderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 177,
                  "snippet": {
                    "text": "        public FileLocation StdoutStderr { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 178,
                  "endColumn": 1,
                  "charOffset": 7792,
                  "charLength": 147,
                  "snippet": {
                    "text": "        [DataMember(Name = \"stdoutStderr\", IsRequired = false, EmitDefaultValue = false)]\r\n        public FileLocation StdoutStderr { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.StdoutStderr"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stdout#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Invocation.ToolNotifications' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Invocation.cs"
                },
                "region": {
                  "startLine": 81,
                  "snippet": {
                    "text": "        public IList<Notification> ToolNotifications { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 1,
                  "charOffset": 3306,
                  "charLength": 164,
                  "snippet": {
                    "text": "        [DataMember(Name = \"toolNotifications\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Notification> ToolNotifications { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Invocation.ToolNotifications"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'InvocationEqualityComparer.Equals(Invocation, Invocation)' has a cyclomatic complexity of 68. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/InvocationEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 730,
                  "charLength": 119,
                  "snippet": {
                    "text": "        public bool Equals(Invocation left, Invocation right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Invocation,Microsoft.CodeAnalysis.Sarif.Invocation)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1809",
          "level": "warning",
          "message": {
            "text": "'InvocationEqualityComparer.Equals(Invocation, Invocation)' has 65 local variables, 56 of which were generated by the compiler. Refactor 'InvocationEqualityComparer.Equals(Invocation, Invocation)' so that it uses fewer than 64 local variables.",
            "messageId": "Compiler"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/InvocationEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 730,
                  "charLength": 119,
                  "snippet": {
                    "text": "        public bool Equals(Invocation left, Invocation right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Invocation,Microsoft.CodeAnalysis.Sarif.Invocation)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Compiler"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'InvocationEqualityComparer.GetHashCode(Invocation)' has a cyclomatic complexity of 42. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/InvocationEqualityComparer.cs"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 273,
                  "startColumn": 1,
                  "endLine": 275,
                  "endColumn": 44,
                  "charOffset": 8864,
                  "charLength": 102,
                  "snippet": {
                    "text": "        public int GetHashCode(Invocation obj)\r\n        {\r\n            if (ReferenceEquals(obj, null))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.Invocation)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1024",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.IOptionsProvider.GetOptions()"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'ISarifNode'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ISarifNode"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'ISarifNode.SarifNodeKind' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ISarifNode.SarifNodeKind"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Location.Location(Location)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nLocation..ctor(Location)\r\nLocation.Init(PhysicalLocation, String, Message, IEnumerable<Region>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Location.cs"
                },
                "region": {
                  "startLine": 104,
                  "snippet": {
                    "text": "        public Location(Location other)"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 10,
                  "charOffset": 4436,
                  "charLength": 76,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Location(Location other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location..ctor(Microsoft.CodeAnalysis.Sarif.Location)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Location.Location(PhysicalLocation, string, Message, IEnumerable<Region>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nLocation..ctor(PhysicalLocation, String, Message, IEnumerable<Region>, IDictionary<String,SerializedPropertyInfo>)\r\nLocation.Init(PhysicalLocation, String, Message, IEnumerable<Region>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Location.cs"
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        public Location(PhysicalLocation physicalLocation, string fullyQualifiedLogicalName, Message message, IEnumerable<Region> annotations, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 10,
                  "charOffset": 3695,
                  "charLength": 231,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Location(PhysicalLocation physicalLocation, string fullyQualifiedLogicalName, Message message, IEnumerable<Region> annotations, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location..ctor(Microsoft.CodeAnalysis.Sarif.PhysicalLocation,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Region>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Location.Annotations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Location.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        public IList<Region> Annotations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 2161,
                  "charLength": 146,
                  "snippet": {
                    "text": "        [DataMember(Name = \"annotations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Region> Annotations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Location.Annotations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Message.Arguments' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Message.cs"
                },
                "region": {
                  "startLine": 62,
                  "snippet": {
                    "text": "        public IList<string> Arguments { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 1,
                  "charOffset": 2197,
                  "charLength": 142,
                  "snippet": {
                    "text": "        [DataMember(Name = \"arguments\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<string> Arguments { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Message.Arguments"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash.AddRange(System.Collections.Generic.IEnumerable`1<System.Int32>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash.AddRange(System.Collections.IEnumerable)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash.AddRange(System.Int32[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.NewLineIndex..ctor(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Node.Node(Node)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nNode..ctor(Node)\r\nNode.Init(String, Message, Location, IEnumerable<Node>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Node.cs"
                },
                "region": {
                  "startLine": 104,
                  "snippet": {
                    "text": "        public Node(Node other)"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 10,
                  "charOffset": 4009,
                  "charLength": 68,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Node(Node other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node..ctor(Microsoft.CodeAnalysis.Sarif.Node)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Node.Node(string, Message, Location, IEnumerable<Node>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nNode..ctor(String, Message, Location, IEnumerable<Node>, IDictionary<String,SerializedPropertyInfo>)\r\nNode.Init(String, Message, Location, IEnumerable<Node>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Node.cs"
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        public Node(string id, Message label, Location location, IEnumerable<Node> children, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 10,
                  "charOffset": 3358,
                  "charLength": 181,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Node(string id, Message label, Location location, IEnumerable<Node> children, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Location,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Node>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Node.Children' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Node.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        public IList<Node> Children { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 1920,
                  "charLength": 138,
                  "snippet": {
                    "text": "        [DataMember(Name = \"children\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Node> Children { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Node.Children"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Msg' in member name 'Notes.Msg001AnalyzingTarget' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notes.Msg001AnalyzingTarget"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Msg#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Notification.Notification(Notification)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nNotification..ctor(Notification)\r\nNotification.Init(String, String, PhysicalLocation, Message, FailureLevel, Int32, DateTime, ExceptionData, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Notification.cs"
                },
                "region": {
                  "startLine": 140,
                  "snippet": {
                    "text": "        public Notification(Notification other)"
                  }
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 10,
                  "charOffset": 6167,
                  "charLength": 84,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Notification(Notification other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notification..ctor(Microsoft.CodeAnalysis.Sarif.Notification)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Notification.Notification(string, string, PhysicalLocation, Message, FailureLevel, int, DateTime, ExceptionData, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nNotification..ctor(String, String, PhysicalLocation, Message, FailureLevel, Int32, DateTime, ExceptionData, IDictionary<String,SerializedPropertyInfo>)\r\nNotification.Init(String, String, PhysicalLocation, Message, FailureLevel, Int32, DateTime, ExceptionData, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Notification.cs"
                },
                "region": {
                  "startLine": 126,
                  "snippet": {
                    "text": "        public Notification(string id, string ruleId, PhysicalLocation physicalLocation, Message message, FailureLevel level, int threadId, DateTime time, ExceptionData exception, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 10,
                  "charOffset": 5374,
                  "charLength": 273,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Notification(string id, string ruleId, PhysicalLocation physicalLocation, Message message, FailureLevel level, int threadId, DateTime time, ExceptionData exception, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Notification..ctor(System.String,System.String,Microsoft.CodeAnalysis.Sarif.PhysicalLocation,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.FailureLevel,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.ExceptionData,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1028",
          "level": "warning",
          "message": {
            "text": "If possible, make the underlying type of 'OptionallyEmittedData' Int32 instead of 'uint'. Otherwise consider Byte, Int16, or Int64.",
            "messageId": "NotIntegral"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NotIntegral"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1714",
          "level": "error",
          "message": {
            "text": "If enumeration name 'OptionallyEmittedData' is singular, change it to a plural form."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2240",
          "level": "error",
          "message": {
            "text": "Add an implementation of GetObjectData to type 'PropertiesDictionary'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA3053",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary.LoadFromXml(System.IO.Stream)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security.Xml",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'PropertiesDictionary.SaveToJson(string, bool)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/PropertiesDictionary.cs"
                },
                "region": {
                  "startLine": 152,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "endLine": 153,
                  "endColumn": 1,
                  "charOffset": 5111,
                  "charLength": 85,
                  "snippet": {
                    "text": "        public void SaveToJson(string filePath, bool prettyPrint = true)\r\n        {\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary.SaveToJson(System.String,System.Boolean)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1800",
          "level": "warning",
          "message": {
            "text": "'result', a variable, is cast to type 'JToken' multiple times in method 'PropertiesDictionary.TryGetProperty<T>(string, out T)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.",
            "messageId": "Local"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/PropertiesDictionary.cs"
                },
                "region": {
                  "startLine": 111,
                  "snippet": {
                    "text": "                    value = ((JToken)result).ToObject<T>();"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 33,
                  "charOffset": 3620,
                  "charLength": 112,
                  "snippet": {
                    "text": "                {\r\n                    value = ((JToken)result).ToObject<T>();\r\n                    return true;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertiesDictionary.TryGetProperty`1(System.String,!!0&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Local"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'PropertyBagHolder.SetProperty<T>(string, T)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/PropertyBagHolder.cs"
                },
                "region": {
                  "startLine": 130,
                  "snippet": {
                    "text": "                    if (propertyName.StartsWith(\"sarifv2/\"))"
                  }
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "endLine": 131,
                  "endColumn": 22,
                  "charOffset": 4267,
                  "charLength": 85,
                  "snippet": {
                    "text": "\r\n                    if (propertyName.StartsWith(\"sarifv2/\"))\r\n                    {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertyBagHolder.SetProperty`1(System.String,!!0)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.StartsWith(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'PropertyBagHolder.SetProperty<T>(string, T)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/PropertyBagHolder.cs"
                },
                "region": {
                  "startLine": 134,
                  "snippet": {
                    "text": "                    else if (propertyName.StartsWith(\"sarifv1/\"))"
                  }
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "endLine": 135,
                  "endColumn": 22,
                  "charOffset": 4439,
                  "charLength": 111,
                  "snippet": {
                    "text": "                    }\r\n                    else if (propertyName.StartsWith(\"sarifv1/\"))\r\n                    {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertyBagHolder.SetProperty`1(System.String,!!0)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.StartsWith(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'PropertyBagHolder.SetProperty<T>(string, T)', validate parameter 'propertyName' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/PropertyBagHolder.cs"
                },
                "region": {
                  "startLine": 130,
                  "snippet": {
                    "text": "                    if (propertyName.StartsWith(\"sarifv2/\"))"
                  }
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "endLine": 131,
                  "endColumn": 22,
                  "charOffset": 4267,
                  "charLength": 85,
                  "snippet": {
                    "text": "\r\n                    if (propertyName.StartsWith(\"sarifv2/\"))\r\n                    {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.PropertyBagHolder.SetProperty`1(System.String,!!0)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1720",
          "level": "error",
          "message": {
            "text": "In member 'Region.Region(int, int, int, int, int, int, int, int, FileContent, Message)', consider replacing the data type identifier 'byte' in parameter name 'byteLength' with a more generic term, such as 'value'.",
            "messageId": "LanguageIndependentMemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Region.cs"
                },
                "region": {
                  "startLine": 134,
                  "snippet": {
                    "text": "        public Region(int startLine, int startColumn, int endLine, int endColumn, int charOffset, int charLength, int byteOffset, int byteLength, FileContent snippet, Message message)"
                  }
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "endLine": 135,
                  "endColumn": 10,
                  "charOffset": 5386,
                  "charLength": 216,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Region(int startLine, int startColumn, int endLine, int endColumn, int charOffset, int charLength, int byteOffset, int byteLength, FileContent snippet, Message message)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Region..ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.FileContent,Microsoft.CodeAnalysis.Sarif.Message)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "byte#LanguageIndependentMemberParameter"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1720",
          "level": "error",
          "message": {
            "text": "In member 'Region.Region(int, int, int, int, int, int, int, int, FileContent, Message)', consider replacing the data type identifier 'byte' in parameter name 'byteOffset' with a more generic term, such as 'value'.",
            "messageId": "LanguageIndependentMemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Region.cs"
                },
                "region": {
                  "startLine": 134,
                  "snippet": {
                    "text": "        public Region(int startLine, int startColumn, int endLine, int endColumn, int charOffset, int charLength, int byteOffset, int byteLength, FileContent snippet, Message message)"
                  }
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "endLine": 135,
                  "endColumn": 10,
                  "charOffset": 5386,
                  "charLength": 216,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Region(int startLine, int startColumn, int endLine, int endColumn, int charOffset, int charLength, int byteOffset, int byteLength, FileContent snippet, Message message)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Region..ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.FileContent,Microsoft.CodeAnalysis.Sarif.Message)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "byte#LanguageIndependentMemberParameter"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1724",
          "level": "error",
          "message": {
            "text": "The type name 'Resources' conflicts in whole or in part with the namespace name 'System.Resources' defined in the .NET Framework. Rename the type to eliminate the conflict.",
            "messageId": "System"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Resources"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Resources.MessageStrings' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Resources.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "        public IDictionary<string, string> MessageStrings { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 1,
                  "charOffset": 1359,
                  "charLength": 166,
                  "snippet": {
                    "text": "        [DataMember(Name = \"messageStrings\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> MessageStrings { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Resources.MessageStrings"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Resources.Rules' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Resources.cs"
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "        public IDictionary<string, Rule> Rules { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1773,
                  "charLength": 146,
                  "snippet": {
                    "text": "        [DataMember(Name = \"rules\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, Rule> Rules { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Resources.Rules"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Result.Result(Result)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nResult..ctor(Result)\r\nResult.Init(String, ResultLevel, Message, String, FileLocation, IEnumerable<Location>, String, String, IDictionary<String,String>, IDictionary<String,String>, IEnumerable<Stack>, IEnumerable<CodeFlow>, IEnumerable<Graph>, IEnumerable<GraphTraversal>, IEnumerable<Location>, SuppressionStates, BaselineState, IEnumerable<Attachment>, IEnumerable<Uri>, IEnumerable<PhysicalLocation>, IEnumerable<Fix>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 253,
                  "snippet": {
                    "text": "        public Result(Result other)"
                  }
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 1,
                  "endLine": 254,
                  "endColumn": 10,
                  "charOffset": 12743,
                  "charLength": 72,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Result(Result other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result..ctor(Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Result.Result(string, ResultLevel, Message, string, FileLocation, IEnumerable<Location>, string, string, IDictionary<string, string>, IDictionary<string, string>, IEnumerable<Stack>, IEnumerable<CodeFlow>, IEnumerable<Graph>, IEnumerable<GraphTraversal>, IEnumerable<Location>, SuppressionStates, BaselineState, IEnumerable<Attachment>, IEnumerable<Uri>, IEnumerable<PhysicalLocation>, IEnumerable<Fix>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nResult..ctor(String, ResultLevel, Message, String, FileLocation, IEnumerable<Location>, String, String, IDictionary<String,String>, IDictionary<String,String>, IEnumerable<Stack>, IEnumerable<CodeFlow>, IEnumerable<Graph>, IEnumerable<GraphTraversal>, IEnumerable<Location>, SuppressionStates, BaselineState, IEnumerable<Attachment>, IEnumerable<Uri>, IEnumerable<PhysicalLocation>, IEnumerable<Fix>, IDictionary<String,SerializedPropertyInfo>)\r\nResult.Init(String, ResultLevel, Message, String, FileLocation, IEnumerable<Location>, String, String, IDictionary<String,String>, IDictionary<String,String>, IEnumerable<Stack>, IEnumerable<CodeFlow>, IEnumerable<Graph>, IEnumerable<GraphTraversal>, IEnumerable<Location>, SuppressionStates, BaselineState, IEnumerable<Attachment>, IEnumerable<Uri>, IEnumerable<PhysicalLocation>, IEnumerable<Fix>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 239,
                  "snippet": {
                    "text": "        public Result(string ruleId, ResultLevel level, Message message, string ruleMessageId, FileLocation analysisTarget, IEnumerable<Location> locations, string instanceGuid, string correlationGuid, IDictionary<string, string> partialFingerprints, IDictionary<string, string> fingerprints, IEnumerable<Stack> stacks, IEnumerable<CodeFlow> codeFlows, IEnumerable<Graph> graphs, IEnumerable<GraphTraversal> graphTraversals, IEnumerable<Location> relatedLocations, SuppressionStates suppressionStates, BaselineState baselineState, IEnumerable<Attachment> attachments, IEnumerable<Uri> workItemUris, IEnumerable<PhysicalLocation> conversionProvenance, IEnumerable<Fix> fixes, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "endLine": 240,
                  "endColumn": 10,
                  "charOffset": 11255,
                  "charLength": 763,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Result(string ruleId, ResultLevel level, Message message, string ruleMessageId, FileLocation analysisTarget, IEnumerable<Location> locations, string instanceGuid, string correlationGuid, IDictionary<string, string> partialFingerprints, IDictionary<string, string> fingerprints, IEnumerable<Stack> stacks, IEnumerable<CodeFlow> codeFlows, IEnumerable<Graph> graphs, IEnumerable<GraphTraversal> graphTraversals, IEnumerable<Location> relatedLocations, SuppressionStates suppressionStates, BaselineState baselineState, IEnumerable<Attachment> attachments, IEnumerable<Uri> workItemUris, IEnumerable<PhysicalLocation> conversionProvenance, IEnumerable<Fix> fixes, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result..ctor(System.String,Microsoft.CodeAnalysis.Sarif.ResultLevel,Microsoft.CodeAnalysis.Sarif.Message,System.String,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Stack>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.CodeFlow>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.GraphTraversal>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,Microsoft.CodeAnalysis.Sarif.SuppressionStates,Microsoft.CodeAnalysis.Sarif.BaselineState,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.Collections.Generic.IEnumerable`1<System.Uri>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.PhysicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Fix>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.Attachments' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 137,
                  "snippet": {
                    "text": "        public IList<Attachment> Attachments { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "endLine": 138,
                  "endColumn": 1,
                  "charOffset": 6279,
                  "charLength": 150,
                  "snippet": {
                    "text": "        [DataMember(Name = \"attachments\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Attachment> Attachments { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Attachments"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.CodeFlows' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 105,
                  "snippet": {
                    "text": "        public IList<CodeFlow> CodeFlows { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 1,
                  "charOffset": 4806,
                  "charLength": 144,
                  "snippet": {
                    "text": "        [DataMember(Name = \"codeFlows\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<CodeFlow> CodeFlows { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.CodeFlows"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.ConversionProvenance' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 149,
                  "snippet": {
                    "text": "        public IList<PhysicalLocation> ConversionProvenance { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "endLine": 150,
                  "endColumn": 1,
                  "charOffset": 6910,
                  "charLength": 174,
                  "snippet": {
                    "text": "        [DataMember(Name = \"conversionProvenance\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<PhysicalLocation> ConversionProvenance { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.ConversionProvenance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.Fingerprints' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 93,
                  "snippet": {
                    "text": "        public IDictionary<string, string> Fingerprints { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 1,
                  "charOffset": 4278,
                  "charLength": 162,
                  "snippet": {
                    "text": "        [DataMember(Name = \"fingerprints\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> Fingerprints { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Fingerprints"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.Fixes' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 155,
                  "snippet": {
                    "text": "        public IList<Fix> Fixes { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "endLine": 156,
                  "endColumn": 1,
                  "charOffset": 7253,
                  "charLength": 131,
                  "snippet": {
                    "text": "        [DataMember(Name = \"fixes\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Fix> Fixes { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Fixes"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.Graphs' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 111,
                  "snippet": {
                    "text": "        public IList<Graph> Graphs { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 1,
                  "charOffset": 5060,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"graphs\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Graph> Graphs { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Graphs"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.GraphTraversals' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 117,
                  "snippet": {
                    "text": "        public IList<GraphTraversal> GraphTraversals { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "endLine": 118,
                  "endColumn": 1,
                  "charOffset": 5314,
                  "charLength": 162,
                  "snippet": {
                    "text": "        [DataMember(Name = \"graphTraversals\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<GraphTraversal> GraphTraversals { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.GraphTraversals"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'Result.Init(string, ResultLevel, Message, string, FileLocation, IEnumerable<Location>, string, string, IDictionary<string, string>, IDictionary<string, string>, IEnumerable<Stack>, IEnumerable<CodeFlow>, IEnumerable<Graph>, IEnumerable<GraphTraversal>, IEnumerable<Location>, SuppressionStates, BaselineState, IEnumerable<Attachment>, IEnumerable<Uri>, IEnumerable<PhysicalLocation>, IEnumerable<Fix>, IDictionary<string, SerializedPropertyInfo>)' has a cyclomatic complexity of 45. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "endLine": 283,
                  "endColumn": 29,
                  "charOffset": 13818,
                  "charLength": 775,
                  "snippet": {
                    "text": "        private void Init(string ruleId, ResultLevel level, Message message, string ruleMessageId, FileLocation analysisTarget, IEnumerable<Location> locations, string instanceGuid, string correlationGuid, IDictionary<string, string> partialFingerprints, IDictionary<string, string> fingerprints, IEnumerable<Stack> stacks, IEnumerable<CodeFlow> codeFlows, IEnumerable<Graph> graphs, IEnumerable<GraphTraversal> graphTraversals, IEnumerable<Location> relatedLocations, SuppressionStates suppressionStates, BaselineState baselineState, IEnumerable<Attachment> attachments, IEnumerable<Uri> workItemUris, IEnumerable<PhysicalLocation> conversionProvenance, IEnumerable<Fix> fixes, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {\r\n            RuleId = ruleId;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Init(System.String,Microsoft.CodeAnalysis.Sarif.ResultLevel,Microsoft.CodeAnalysis.Sarif.Message,System.String,Microsoft.CodeAnalysis.Sarif.FileLocation,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Stack>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.CodeFlow>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.GraphTraversal>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Location>,Microsoft.CodeAnalysis.Sarif.SuppressionStates,Microsoft.CodeAnalysis.Sarif.BaselineState,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Attachment>,System.Collections.Generic.IEnumerable`1<System.Uri>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.PhysicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Fix>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.Locations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public IList<Location> Locations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 1,
                  "charOffset": 3046,
                  "charLength": 144,
                  "snippet": {
                    "text": "        [DataMember(Name = \"locations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Location> Locations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Locations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.PartialFingerprints' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 87,
                  "snippet": {
                    "text": "        public IDictionary<string, string> PartialFingerprints { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 1,
                  "charOffset": 3946,
                  "charLength": 176,
                  "snippet": {
                    "text": "        [DataMember(Name = \"partialFingerprints\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> PartialFingerprints { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.PartialFingerprints"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.RelatedLocations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 123,
                  "snippet": {
                    "text": "        public IList<Location> RelatedLocations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "endLine": 124,
                  "endColumn": 95,
                  "charOffset": 5582,
                  "charLength": 252,
                  "snippet": {
                    "text": "        [DataMember(Name = \"relatedLocations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Location> RelatedLocations { get; set; }\r\n        [DataMember(Name = \"suppressionStates\", IsRequired = false, EmitDefaultValue = false)]"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.RelatedLocations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.Stacks' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 99,
                  "snippet": {
                    "text": "        public IList<Stack> Stacks { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 1,
                  "charOffset": 4554,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"stacks\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Stack> Stacks { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.Stacks"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Result.WorkItemUris' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Result.cs"
                },
                "region": {
                  "startLine": 143,
                  "snippet": {
                    "text": "        public IList<Uri> WorkItemUris { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "endLine": 144,
                  "endColumn": 1,
                  "charOffset": 6546,
                  "charLength": 145,
                  "snippet": {
                    "text": "        [DataMember(Name = \"workItemUris\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Uri> WorkItemUris { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Result.WorkItemUris"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "error",
          "message": {
            "text": "'ResultEqualityComparer.Equals(Result, Result)' has a cyclomatic complexity of 97. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ResultEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 710,
                  "charLength": 111,
                  "snippet": {
                    "text": "        public bool Equals(Result left, Result right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1809",
          "level": "warning",
          "message": {
            "text": "'ResultEqualityComparer.Equals(Result, Result)' has 93 local variables, 77 of which were generated by the compiler. Refactor 'ResultEqualityComparer.Equals(Result, Result)' so that it uses fewer than 64 local variables.",
            "messageId": "Compiler"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ResultEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 710,
                  "charLength": 111,
                  "snippet": {
                    "text": "        public bool Equals(Result left, Result right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Compiler"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1505",
          "level": "warning",
          "message": {
            "text": "'ResultEqualityComparer.Equals(Result, Result)' has a maintainability index of 14. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.",
            "messageId": "Method"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ResultEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 710,
                  "charLength": 111,
                  "snippet": {
                    "text": "        public bool Equals(Result left, Result right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Method"
          },
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'ResultEqualityComparer.GetHashCode(Result)' has a cyclomatic complexity of 60. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ResultEqualityComparer.cs"
                },
                "region": {
                  "startLine": 356,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 355,
                  "startColumn": 1,
                  "endLine": 357,
                  "endColumn": 44,
                  "charOffset": 11810,
                  "charLength": 98,
                  "snippet": {
                    "text": "        public int GetHashCode(Result obj)\r\n        {\r\n            if (ReferenceEquals(obj, null))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1809",
          "level": "warning",
          "message": {
            "text": "'ResultEqualityComparer.GetHashCode(Result)' has 67 local variables, 50 of which were generated by the compiler. Refactor 'ResultEqualityComparer.GetHashCode(Result)' so that it uses fewer than 64 local variables.",
            "messageId": "Compiler"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ResultEqualityComparer.cs"
                },
                "region": {
                  "startLine": 356,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 355,
                  "startColumn": 1,
                  "endLine": 357,
                  "endColumn": 44,
                  "charOffset": 11810,
                  "charLength": 98,
                  "snippet": {
                    "text": "        public int GetHashCode(Result obj)\r\n        {\r\n            if (ReferenceEquals(obj, null))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Compiler"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Rule.Rule(Rule)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nRule..ctor(Rule)\r\nRule.Init(String, Message, Message, Message, IDictionary<String,String>, IDictionary<String,String>, ReportingConfiguration, Uri, Message, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Rule.cs"
                },
                "region": {
                  "startLine": 149,
                  "snippet": {
                    "text": "        public Rule(Rule other)"
                  }
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "endLine": 150,
                  "endColumn": 10,
                  "charOffset": 7050,
                  "charLength": 68,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Rule(Rule other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule..ctor(Microsoft.CodeAnalysis.Sarif.Rule)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Rule.Rule(string, Message, Message, Message, IDictionary<string, string>, IDictionary<string, string>, ReportingConfiguration, Uri, Message, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nRule..ctor(String, Message, Message, Message, IDictionary<String,String>, IDictionary<String,String>, ReportingConfiguration, Uri, Message, IDictionary<String,SerializedPropertyInfo>)\r\nRule.Init(String, Message, Message, Message, IDictionary<String,String>, IDictionary<String,String>, ReportingConfiguration, Uri, Message, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Rule.cs"
                },
                "region": {
                  "startLine": 135,
                  "snippet": {
                    "text": "        public Rule(string id, Message name, Message shortDescription, Message fullDescription, IDictionary<string, string> messageStrings, IDictionary<string, string> richMessageStrings, ReportingConfiguration configuration, Uri helpUri, Message help, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 136,
                  "endColumn": 10,
                  "charOffset": 6164,
                  "charLength": 336,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Rule(string id, Message name, Message shortDescription, Message fullDescription, IDictionary<string, string> messageStrings, IDictionary<string, string> richMessageStrings, ReportingConfiguration configuration, Uri helpUri, Message help, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Message,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.ReportingConfiguration,System.Uri,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Rule.MessageStrings' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Rule.cs"
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "        public IDictionary<string, string> MessageStrings { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 1,
                  "charOffset": 2628,
                  "charLength": 166,
                  "snippet": {
                    "text": "        [DataMember(Name = \"messageStrings\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> MessageStrings { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule.MessageStrings"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Rule.RichMessageStrings' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Rule.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public IDictionary<string, string> RichMessageStrings { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 1,
                  "charOffset": 3109,
                  "charLength": 174,
                  "snippet": {
                    "text": "        [DataMember(Name = \"richMessageStrings\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> RichMessageStrings { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Rule.RichMessageStrings"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ReportingConfiguration.Parameters' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ReportingConfiguration.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        public IDictionary<string, SerializedPropertyInfo> Parameters { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 1,
                  "charOffset": 1884,
                  "charLength": 174,
                  "snippet": {
                    "text": "        [DataMember(Name = \"parameters\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, SerializedPropertyInfo> Parameters { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ReportingConfiguration.Parameters"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'RuleEqualityComparer.Equals(Rule, Rule)' has a cyclomatic complexity of 35. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/RuleEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 700,
                  "charLength": 107,
                  "snippet": {
                    "text": "        public bool Equals(Rule left, Rule right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Rule,Microsoft.CodeAnalysis.Sarif.Rule)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'RuleUtilities.BuildDictionary(ResourceManager, IEnumerable<string>, string, string)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/RuleUtilities.cs"
                },
                "region": {
                  "startLine": 74,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 75,
                  "endColumn": 25,
                  "charOffset": 2335,
                  "charLength": 70,
                  "snippet": {
                    "text": "            string prefix = null)\r\n        {\r\n            //validation"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleUtilities.BuildDictionary(System.Resources.ResourceManager,System.Collections.Generic.IEnumerable`1<System.String>,System.String,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'RuleUtilities.NormalizeRuleMessageId(string, string, string)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/RuleUtilities.cs"
                },
                "region": {
                  "startLine": 104,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 39,
                  "charOffset": 3504,
                  "charLength": 161,
                  "snippet": {
                    "text": "        public static string NormalizeRuleMessageId(string ruleMessageId, string ruleId, string prefix = null)\r\n        {\r\n            if (ruleMessageId == null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuleUtilities.NormalizeRuleMessageId(System.String,System.String,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Run.Run(Run)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nRun..ctor(Run)\r\nRun.Init(Tool, IEnumerable<Invocation>, Conversion, IEnumerable<VersionControlDetails>, IDictionary<String,Uri>, IDictionary<String,FileData>, IDictionary<String,LogicalLocation>, IEnumerable<Graph>, IEnumerable<Result>, Resources, String, String, Message, String, String, String, String, String, String, ColumnKind, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 248,
                  "snippet": {
                    "text": "        public Run(Run other)"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "startColumn": 1,
                  "endLine": 249,
                  "endColumn": 10,
                  "charOffset": 12650,
                  "charLength": 66,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Run(Run other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run..ctor(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Run.Run(Tool, IEnumerable<Invocation>, Conversion, IEnumerable<VersionControlDetails>, IDictionary<string, Uri>, IDictionary<string, FileData>, IDictionary<string, LogicalLocation>, IEnumerable<Graph>, IEnumerable<Result>, Resources, string, string, Message, string, string, string, string, string, string, ColumnKind, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nRun..ctor(Tool, IEnumerable<Invocation>, Conversion, IEnumerable<VersionControlDetails>, IDictionary<String,Uri>, IDictionary<String,FileData>, IDictionary<String,LogicalLocation>, IEnumerable<Graph>, IEnumerable<Result>, Resources, String, String, Message, String, String, String, String, String, String, ColumnKind, IDictionary<String,SerializedPropertyInfo>)\r\nRun.Init(Tool, IEnumerable<Invocation>, Conversion, IEnumerable<VersionControlDetails>, IDictionary<String,Uri>, IDictionary<String,FileData>, IDictionary<String,LogicalLocation>, IEnumerable<Graph>, IEnumerable<Result>, Resources, String, String, Message, String, String, String, String, String, String, ColumnKind, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 234,
                  "snippet": {
                    "text": "        public Run(Tool tool, IEnumerable<Invocation> invocations, Conversion conversion, IEnumerable<VersionControlDetails> versionControlProvenance, IDictionary<string, Uri> originalUriBaseIds, IDictionary<string, FileData> files, IDictionary<string, LogicalLocation> logicalLocations, IEnumerable<Graph> graphs, IEnumerable<Result> results, Resources resources, string instanceGuid, string logicalId, Message description, string automationLogicalId, string baselineInstanceGuid, string architecture, string markdownMessageMimeType, string redactionToken, string defaultFileEncoding, ColumnKind columnKind, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 233,
                  "startColumn": 1,
                  "endLine": 235,
                  "endColumn": 10,
                  "charOffset": 11224,
                  "charLength": 693,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Run(Tool tool, IEnumerable<Invocation> invocations, Conversion conversion, IEnumerable<VersionControlDetails> versionControlProvenance, IDictionary<string, Uri> originalUriBaseIds, IDictionary<string, FileData> files, IDictionary<string, LogicalLocation> logicalLocations, IEnumerable<Graph> graphs, IEnumerable<Result> results, Resources resources, string instanceGuid, string logicalId, Message description, string automationLogicalId, string baselineInstanceGuid, string architecture, string markdownMessageMimeType, string redactionToken, string defaultFileEncoding, ColumnKind columnKind, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run..ctor(Microsoft.CodeAnalysis.Sarif.Tool,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Invocation>,Microsoft.CodeAnalysis.Sarif.Conversion,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionControlDetails>,System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.FileData>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.LogicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Result>,Microsoft.CodeAnalysis.Sarif.Resources,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.ColumnKind,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Run.Files' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public IDictionary<string, FileData> Files { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 1,
                  "charOffset": 3082,
                  "charLength": 150,
                  "snippet": {
                    "text": "        [DataMember(Name = \"files\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, FileData> Files { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Files"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Run.Graphs' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 81,
                  "snippet": {
                    "text": "        public IList<Graph> Graphs { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 1,
                  "charOffset": 3684,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"graphs\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Graph> Graphs { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Graphs"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'Run.Init(Tool, IEnumerable<Invocation>, Conversion, IEnumerable<VersionControlDetails>, IDictionary<string, Uri>, IDictionary<string, FileData>, IDictionary<string, LogicalLocation>, IEnumerable<Graph>, IEnumerable<Result>, Resources, string, string, Message, string, string, string, string, string, string, ColumnKind, IDictionary<string, SerializedPropertyInfo>)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 277,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "startColumn": 1,
                  "endLine": 278,
                  "endColumn": 30,
                  "charOffset": 13715,
                  "charLength": 709,
                  "snippet": {
                    "text": "        private void Init(Tool tool, IEnumerable<Invocation> invocations, Conversion conversion, IEnumerable<VersionControlDetails> versionControlProvenance, IDictionary<string, Uri> originalUriBaseIds, IDictionary<string, FileData> files, IDictionary<string, LogicalLocation> logicalLocations, IEnumerable<Graph> graphs, IEnumerable<Result> results, Resources resources, string instanceGuid, string logicalId, Message description, string automationLogicalId, string baselineInstanceGuid, string architecture, string markdownMessageMimeType, string redactionToken, string defaultFileEncoding, ColumnKind columnKind, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {\r\n            if (tool != null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Init(Microsoft.CodeAnalysis.Sarif.Tool,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Invocation>,Microsoft.CodeAnalysis.Sarif.Conversion,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionControlDetails>,System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.FileData>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.LogicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Result>,Microsoft.CodeAnalysis.Sarif.Resources,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.ColumnKind,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1801",
          "level": "warning",
          "message": {
            "text": "Parameter 'originalUriBaseIds' of 'Run.Init(Tool, IEnumerable<Invocation>, Conversion, IEnumerable<VersionControlDetails>, IDictionary<string, Uri>, IDictionary<string, FileData>, IDictionary<string, LogicalLocation>, IEnumerable<Graph>, IEnumerable<Result>, Resources, string, string, Message, string, string, string, string, string, string, ColumnKind, IDictionary<string, SerializedPropertyInfo>)' is never used. Remove the parameter or use it in the method body."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 277,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "startColumn": 1,
                  "endLine": 278,
                  "endColumn": 30,
                  "charOffset": 13715,
                  "charLength": 709,
                  "snippet": {
                    "text": "        private void Init(Tool tool, IEnumerable<Invocation> invocations, Conversion conversion, IEnumerable<VersionControlDetails> versionControlProvenance, IDictionary<string, Uri> originalUriBaseIds, IDictionary<string, FileData> files, IDictionary<string, LogicalLocation> logicalLocations, IEnumerable<Graph> graphs, IEnumerable<Result> results, Resources resources, string instanceGuid, string logicalId, Message description, string automationLogicalId, string baselineInstanceGuid, string architecture, string markdownMessageMimeType, string redactionToken, string defaultFileEncoding, ColumnKind columnKind, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {\r\n            if (tool != null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Init(Microsoft.CodeAnalysis.Sarif.Tool,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Invocation>,Microsoft.CodeAnalysis.Sarif.Conversion,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionControlDetails>,System.Collections.Generic.IDictionary`2<System.String,System.Uri>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.FileData>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.LogicalLocation>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Graph>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Result>,Microsoft.CodeAnalysis.Sarif.Resources,System.String,System.String,Microsoft.CodeAnalysis.Sarif.Message,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.ColumnKind,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "originalUriBaseIds"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Run.Invocations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "        public IList<Invocation> Invocations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1803,
                  "charLength": 150,
                  "snippet": {
                    "text": "        [DataMember(Name = \"invocations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Invocation> Invocations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Invocations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Run.LogicalLocations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 75,
                  "snippet": {
                    "text": "        public IDictionary<string, LogicalLocation> LogicalLocations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 1,
                  "charOffset": 3395,
                  "charLength": 179,
                  "snippet": {
                    "text": "        [DataMember(Name = \"logicalLocations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, LogicalLocation> LogicalLocations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.LogicalLocations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Run.OriginalUriBaseIds' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "        public IDictionary<string, Uri> OriginalUriBaseIds { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 1,
                  "charOffset": 2765,
                  "charLength": 171,
                  "snippet": {
                    "text": "        [DataMember(Name = \"originalUriBaseIds\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, Uri> OriginalUriBaseIds { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.OriginalUriBaseIds"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Run.Results' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 87,
                  "snippet": {
                    "text": "        public IList<Result> Results { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 1,
                  "charOffset": 4101,
                  "charLength": 138,
                  "snippet": {
                    "text": "        [DataMember(Name = \"results\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<Result> Results { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.Results"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Run.VersionControlProvenance' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Run.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        public IList<VersionControlDetails> VersionControlProvenance { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 2418,
                  "charLength": 187,
                  "snippet": {
                    "text": "        [DataMember(Name = \"versionControlProvenance\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<VersionControlDetails> VersionControlProvenance { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Run.VersionControlProvenance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'RunEqualityComparer.Equals(Run, Run)' has a cyclomatic complexity of 73. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/RunEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 695,
                  "charLength": 105,
                  "snippet": {
                    "text": "        public bool Equals(Run left, Run right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RunEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1809",
          "level": "warning",
          "message": {
            "text": "'RunEqualityComparer.Equals(Run, Run)' has 68 local variables, 56 of which were generated by the compiler. Refactor 'RunEqualityComparer.Equals(Run, Run)' so that it uses fewer than 64 local variables.",
            "messageId": "Compiler"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/RunEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 695,
                  "charLength": 105,
                  "snippet": {
                    "text": "        public bool Equals(Run left, Run right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RunEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Compiler"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'RunEqualityComparer.GetHashCode(Run)' has a cyclomatic complexity of 46. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/RunEqualityComparer.cs"
                },
                "region": {
                  "startLine": 272,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "startColumn": 1,
                  "endLine": 273,
                  "endColumn": 44,
                  "charOffset": 8882,
                  "charLength": 95,
                  "snippet": {
                    "text": "        public int GetHashCode(Run obj)\r\n        {\r\n            if (ReferenceEquals(obj, null))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RunEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2217",
          "level": "error",
          "message": {
            "text": "'RuntimeConditions' is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: 0x100000, 0x200000, 0x400000, 0x800000, 0x1000000, 0x2000000"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuntimeConditions"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1028",
          "level": "warning",
          "message": {
            "text": "If possible, make the underlying type of 'RuntimeConditions' Int32 instead of 'uint'. Otherwise consider Byte, Int16, or Int64.",
            "messageId": "NotIntegral"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.RuntimeConditions"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NotIntegral"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifConstants'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifConstants"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLog'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifLog"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'SarifLog.Runs' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/SarifLog.cs"
                },
                "region": {
                  "startLine": 50,
                  "snippet": {
                    "text": "        public IList<Run> Runs { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 1,
                  "charOffset": 1788,
                  "charLength": 102,
                  "snippet": {
                    "text": "        [DataMember(Name = \"runs\", IsRequired = true)]\r\n        public IList<Run> Runs { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifLog.Runs"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifNodeKind'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifNodeKind"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifNodeKind.SarifLog' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifNodeKind.SarifLog"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifRewritingVisitor'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1506",
          "level": "warning",
          "message": {
            "text": "'SarifRewritingVisitor.VisitActual(ISarifNode)' is coupled with 39 different types from 2 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.",
            "messageId": "Method"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/SarifRewritingVisitor.cs"
                },
                "region": {
                  "startLine": 41,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 30,
                  "charOffset": 1244,
                  "charLength": 100,
                  "snippet": {
                    "text": "        public virtual object VisitActual(ISarifNode node)\r\n        {\r\n            if (node == null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor.VisitActual(Microsoft.CodeAnalysis.Sarif.ISarifNode)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Method"
          },
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'SarifRewritingVisitor.VisitActual(ISarifNode)' has a cyclomatic complexity of 38. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/SarifRewritingVisitor.cs"
                },
                "region": {
                  "startLine": 41,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 30,
                  "charOffset": 1244,
                  "charLength": 100,
                  "snippet": {
                    "text": "        public virtual object VisitActual(ISarifNode node)\r\n        {\r\n            if (node == null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor.VisitActual(Microsoft.CodeAnalysis.Sarif.ISarifNode)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifRewritingVisitor.VisitSarifLog(SarifLog)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/SarifRewritingVisitor.cs"
                },
                "region": {
                  "startLine": 697,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 696,
                  "startColumn": 1,
                  "endLine": 698,
                  "endColumn": 30,
                  "charOffset": 24581,
                  "charLength": 102,
                  "snippet": {
                    "text": "        public virtual SarifLog VisitSarifLog(SarifLog node)\r\n        {\r\n            if (node != null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor.VisitSarifLog(Microsoft.CodeAnalysis.Sarif.SarifLog)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifUtilities'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilities.AddOrUpdateDictionaryEntry<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 130,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "endLine": 131,
                  "endColumn": 45,
                  "charOffset": 5161,
                  "charLength": 184,
                  "snippet": {
                    "text": "        public static void AddOrUpdateDictionaryEntry<TKey, TValue>(IDictionary<TKey, TValue> dictionary, TKey key, TValue val)\r\n        {\r\n            if (dictionary.ContainsKey(key))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.AddOrUpdateDictionaryEntry`2(System.Collections.Generic.IDictionary`2<!!0,!!1>,!!0,!!1)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "val#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SarifUtilities.AddOrUpdateDictionaryEntry<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)', validate parameter 'dictionary' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 131,
                  "snippet": {
                    "text": "            if (dictionary.ContainsKey(key))"
                  }
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "endLine": 132,
                  "endColumn": 14,
                  "charOffset": 5290,
                  "charLength": 70,
                  "snippet": {
                    "text": "        {\r\n            if (dictionary.ContainsKey(key))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.AddOrUpdateDictionaryEntry`2(System.Collections.Generic.IDictionary`2<!!0,!!1>,!!0,!!1)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifUtilities.ConvertToSarifVersion(this string)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 40,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 38,
                  "charOffset": 1626,
                  "charLength": 136,
                  "snippet": {
                    "text": "        public static SarifVersion ConvertToSarifVersion(this string sarifVersionText)\r\n        {\r\n            switch (sarifVersionText)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.ConvertToSarifVersion(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilities.ConvertToSarifVersion(this string)', correct the spelling of 'sarif' in parameter name 'sarifVersionText' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 40,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 38,
                  "charOffset": 1626,
                  "charLength": 136,
                  "snippet": {
                    "text": "        public static SarifVersion ConvertToSarifVersion(this string sarifVersionText)\r\n        {\r\n            switch (sarifVersionText)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.ConvertToSarifVersion(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilities.ConvertToSchemaUri(this SarifVersion)', correct the spelling of 'sarif' in parameter name 'sarifVersion' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 115,
                  "charOffset": 2467,
                  "charLength": 203,
                  "snippet": {
                    "text": "        public static Uri ConvertToSchemaUri(this SarifVersion sarifVersion)\r\n        {\r\n            return new Uri(\"http://json.schemastore.org/sarif-\" + sarifVersion.ConvertToText(), UriKind.Absolute);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.ConvertToSchemaUri(Microsoft.CodeAnalysis.Sarif.SarifVersion)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilities.ConvertToText(this SarifVersion)', correct the spelling of 'sarif' in parameter name 'sarifVersion' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 34,
                  "charOffset": 2055,
                  "charLength": 120,
                  "snippet": {
                    "text": "        public static string ConvertToText(this SarifVersion sarifVersion)\r\n        {\r\n            switch (sarifVersion)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.ConvertToText(Microsoft.CodeAnalysis.Sarif.SarifVersion)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'SarifUtilities.CreateSingleThreadedCodeFlow(IEnumerable<ThreadFlowLocation>)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 142,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "endLine": 143,
                  "endColumn": 32,
                  "charOffset": 5521,
                  "charLength": 153,
                  "snippet": {
                    "text": "        public static CodeFlow CreateSingleThreadedCodeFlow(IEnumerable<ThreadFlowLocation> locations = null)\r\n        {\r\n            return new CodeFlow"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.CreateSingleThreadedCodeFlow(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation>)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'SarifUtilities.DecodeBase64String(string, Encoding)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 167,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "endLine": 168,
                  "endColumn": 50,
                  "charOffset": 6341,
                  "charLength": 145,
                  "snippet": {
                    "text": "        public static string DecodeBase64String(string s, Encoding encoding = null)\r\n        {\r\n            encoding = encoding ?? Encoding.UTF8;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.DecodeBase64String(System.String,System.Text.Encoding)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilities.DecodeBase64String(string, Encoding)', consider providing a more meaningful name than parameter name 's'.",
            "messageId": "MemberParameterMoreMeaningfulName"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 167,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "endLine": 168,
                  "endColumn": 50,
                  "charOffset": 6341,
                  "charLength": 145,
                  "snippet": {
                    "text": "        public static string DecodeBase64String(string s, Encoding encoding = null)\r\n        {\r\n            encoding = encoding ?? Encoding.UTF8;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.DecodeBase64String(System.String,System.Text.Encoding)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "s#MemberParameterMoreMeaningfulName"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilities.GetBase64String(string, Encoding)', consider providing a more meaningful name than parameter name 's'.",
            "messageId": "MemberParameterMoreMeaningfulName"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 161,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "endLine": 162,
                  "endColumn": 49,
                  "charOffset": 6141,
                  "charLength": 134,
                  "snippet": {
                    "text": "        public static string GetBase64String(string s, Encoding encoding)\r\n        {\r\n            byte[] bytes = encoding.GetBytes(s);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetBase64String(System.String,System.Text.Encoding)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "s#MemberParameterMoreMeaningfulName"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SarifUtilities.GetBase64String(string, Encoding)', validate parameter 'encoding' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 162,
                  "snippet": {
                    "text": "            byte[] bytes = encoding.GetBytes(s);"
                  }
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "endLine": 163,
                  "endColumn": 50,
                  "charOffset": 6216,
                  "charLength": 110,
                  "snippet": {
                    "text": "        {\r\n            byte[] bytes = encoding.GetBytes(s);\r\n            return Convert.ToBase64String(bytes);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetBase64String(System.String,System.Text.Encoding)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1720",
          "level": "error",
          "message": {
            "text": "In member 'SarifUtilities.GetByteLength(char[], Encoding)', consider replacing the data type identifier 'chars' in parameter name 'chars' with a more generic term, such as 'value'.",
            "messageId": "LanguageIndependentMemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 174,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "endLine": 175,
                  "endColumn": 77,
                  "charOffset": 6605,
                  "charLength": 161,
                  "snippet": {
                    "text": "        public static int GetByteLength(char[] chars, Encoding encoding)\r\n        {\r\n            chars = chars ?? throw new ArgumentNullException(nameof(chars));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetByteLength(System.Char[],System.Text.Encoding)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "chars#LanguageIndependentMemberParameter"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilities.GetByteLength(string, Encoding)', consider providing a more meaningful name than parameter name 's'.",
            "messageId": "MemberParameterMoreMeaningfulName"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 183,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "endLine": 184,
                  "endColumn": 65,
                  "charOffset": 6961,
                  "charLength": 145,
                  "snippet": {
                    "text": "        public static int GetByteLength(string s, Encoding encoding)\r\n        {\r\n            s = s ?? throw new ArgumentNullException(nameof(s));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetByteLength(System.String,System.Text.Encoding)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "s#MemberParameterMoreMeaningfulName"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilities.GetUtf8Base64String(string)', consider providing a more meaningful name than parameter name 's'.",
            "messageId": "MemberParameterMoreMeaningfulName"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/SarifUtilities.cs"
                },
                "region": {
                  "startLine": 156,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "endLine": 157,
                  "endColumn": 54,
                  "charOffset": 6002,
                  "charLength": 124,
                  "snippet": {
                    "text": "        public static string GetUtf8Base64String(string s)\r\n        {\r\n            return GetBase64String(s, Encoding.UTF8);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.GetUtf8Base64String(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "s#MemberParameterMoreMeaningfulName"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifUtilities.SarifDateTimeFormatMillisecondsPrecision' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.SarifDateTimeFormatMillisecondsPrecision"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifUtilities.SarifDateTimeFormatSecondsPrecision' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilities.SarifDateTimeFormatSecondsPrecision"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifUtilitiesVersionOne'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilitiesVersionOne.ConvertToSchemaUri(this SarifVersionVersionOne)', correct the spelling of 'sarif' in parameter name 'sarifVersion' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/SarifUtilitiesVersionOne.cs"
                },
                "region": {
                  "startLine": 25,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 115,
                  "charOffset": 766,
                  "charLength": 213,
                  "snippet": {
                    "text": "        public static Uri ConvertToSchemaUri(this SarifVersionVersionOne sarifVersion)\r\n        {\r\n            return new Uri(\"http://json.schemastore.org/sarif-\" + sarifVersion.ConvertToText(), UriKind.Absolute);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne.ConvertToSchemaUri(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifUtilitiesVersionOne.ConvertToText(this SarifVersionVersionOne)', correct the spelling of 'sarif' in parameter name 'sarifVersion' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/SarifUtilitiesVersionOne.cs"
                },
                "region": {
                  "startLine": 14,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 34,
                  "charOffset": 370,
                  "charLength": 130,
                  "snippet": {
                    "text": "        public static string ConvertToText(this SarifVersionVersionOne sarifVersion)\r\n        {\r\n            switch (sarifVersion)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne.ConvertToText(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifVersion'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SarifVersion"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1811",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SdkResources..ctor()"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1711",
          "level": "error",
          "message": {
            "text": "Rename type name 'Stack' so that it does not end in 'Stack'.",
            "messageId": "TypeNoAlternate"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "TypeNoAlternate"
          },
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Stack.Stack(Message, IEnumerable<StackFrame>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nStack..ctor(Message, IEnumerable<StackFrame>, IDictionary<String,SerializedPropertyInfo>)\r\nStack.Init(Message, IEnumerable<StackFrame>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Stack.cs"
                },
                "region": {
                  "startLine": 72,
                  "snippet": {
                    "text": "        public Stack(Message message, IEnumerable<StackFrame> frames, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 10,
                  "charOffset": 2749,
                  "charLength": 158,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Stack(Message message, IEnumerable<StackFrame> frames, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack..ctor(Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.StackFrame>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Stack.Stack(Stack)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nStack..ctor(Stack)\r\nStack.Init(Message, IEnumerable<StackFrame>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Stack.cs"
                },
                "region": {
                  "startLine": 86,
                  "snippet": {
                    "text": "        public Stack(Stack other)"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 10,
                  "charOffset": 3364,
                  "charLength": 70,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Stack(Stack other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack..ctor(Microsoft.CodeAnalysis.Sarif.Stack)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'Stack.Stack(StackTrace)', validate parameter 'stackTrace' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Stack.cs"
                },
                "region": {
                  "startLine": 79,
                  "snippet": {
                    "text": "            if (stackTrace.FrameCount == 0)"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 80,
                  "endColumn": 14,
                  "charOffset": 2548,
                  "charLength": 69,
                  "snippet": {
                    "text": "        {\r\n            if (stackTrace.FrameCount == 0)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack..ctor(System.Diagnostics.StackTrace)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1804",
          "level": "warning",
          "message": {
            "text": "'Stack.Create(string)' declares a variable, 'current', of type 'string', which is never used or is only assigned to. Use this variable or remove it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Stack.cs"
                },
                "region": {
                  "startLine": 113,
                  "snippet": {
                    "text": "                string current = line;"
                  }
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 1,
                  "charOffset": 3738,
                  "charLength": 97,
                  "snippet": {
                    "text": "                // at Type.Method() in File.cs : line X\r\n                string current = line;\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack.Create(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "current"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Stack.Create(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Stack.cs"
                },
                "region": {
                  "startLine": 129,
                  "snippet": {
                    "text": "                        int lineNumber = int.Parse(match.Groups[4].Value);"
                  }
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 130,
                  "endColumn": 1,
                  "charOffset": 4272,
                  "charLength": 142,
                  "snippet": {
                    "text": "                        string fileName = match.Groups[3].Value;\r\n                        int lineNumber = int.Parse(match.Groups[4].Value);\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack.Create(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'Stack.Frames' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Stack.cs"
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "        public IList<StackFrame> Frames { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1602,
                  "charLength": 113,
                  "snippet": {
                    "text": "        [DataMember(Name = \"frames\", IsRequired = true)]\r\n        public IList<StackFrame> Frames { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Stack.Frames"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'StackFrame.StackFrame(Location, string, int, int, int, IEnumerable<string>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nStackFrame..ctor(Location, String, Int32, Int32, Int32, IEnumerable<String>, IDictionary<String,SerializedPropertyInfo>)\r\nStackFrame.Init(Location, String, Int32, Int32, Int32, IEnumerable<String>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/StackFrame.cs"
                },
                "region": {
                  "startLine": 108,
                  "snippet": {
                    "text": "        public StackFrame(Location location, string module, int threadId, int address, int offset, IEnumerable<string> parameters, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "endLine": 109,
                  "endColumn": 10,
                  "charOffset": 4295,
                  "charLength": 219,
                  "snippet": {
                    "text": "        /// </param>\r\n        public StackFrame(Location location, string module, int threadId, int address, int offset, IEnumerable<string> parameters, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame..ctor(Microsoft.CodeAnalysis.Sarif.Location,System.String,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'StackFrame.StackFrame(StackFrame)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nStackFrame..ctor(StackFrame)\r\nStackFrame.Init(Location, String, Int32, Int32, Int32, IEnumerable<String>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/StackFrame.cs"
                },
                "region": {
                  "startLine": 122,
                  "snippet": {
                    "text": "        public StackFrame(StackFrame other)"
                  }
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "endLine": 123,
                  "endColumn": 10,
                  "charOffset": 5016,
                  "charLength": 80,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public StackFrame(StackFrame other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame..ctor(Microsoft.CodeAnalysis.Sarif.StackFrame)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'StackFrame.Create(StackFrame)', validate parameter 'dotNetStackFrame' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/StackFrame.cs"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "            int ilOffset = dotNetStackFrame.GetILOffset();"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 62,
                  "charOffset": 862,
                  "charLength": 169,
                  "snippet": {
                    "text": "            // This value is -1 if not present\r\n            int ilOffset = dotNetStackFrame.GetILOffset();\r\n            string fileName = dotNetStackFrame.GetFileName();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame.Create(System.Diagnostics.StackFrame)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1800",
          "level": "warning",
          "message": {
            "text": "'methodBase', a parameter, is cast to type 'MethodInfo' multiple times in method 'StackFrame.CreateFullyQualifiedName(MethodBase)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.",
            "messageId": "Parameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/StackFrame.cs"
                },
                "region": {
                  "startLine": 111,
                  "snippet": {
                    "text": "            if (methodBase is MethodInfo && ((MethodInfo)methodBase).IsGenericMethod)"
                  }
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 14,
                  "charOffset": 3846,
                  "charLength": 160,
                  "snippet": {
                    "text": "            // deal with the generic portion of the method\r\n            if (methodBase is MethodInfo && ((MethodInfo)methodBase).IsGenericMethod)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame.CreateFullyQualifiedName(System.Reflection.MethodBase)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Parameter"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1800",
          "level": "warning",
          "message": {
            "text": "'methodBase', a parameter, is cast to type 'MethodInfo' multiple times in method 'StackFrame.CreateFullyQualifiedName(MethodBase)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.",
            "messageId": "Parameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/StackFrame.cs"
                },
                "region": {
                  "startLine": 113,
                  "snippet": {
                    "text": "                Type[] typeArguments = ((MethodInfo)methodBase).GetGenericArguments();"
                  }
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 32,
                  "charOffset": 3993,
                  "charLength": 134,
                  "snippet": {
                    "text": "            {\r\n                Type[] typeArguments = ((MethodInfo)methodBase).GetGenericArguments();\r\n                sb.Append(\"[\");"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame.CreateFullyQualifiedName(System.Reflection.MethodBase)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Parameter"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'StackFrame.Parameters' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/StackFrame.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public IList<string> Parameters { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 1,
                  "charOffset": 2532,
                  "charLength": 144,
                  "snippet": {
                    "text": "        [DataMember(Name = \"parameters\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<string> Parameters { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StackFrame.Parameters"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "level": "error",
          "message": {
            "text": "Rename 'StringSet' to end in 'Collection'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StringSet"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "level": "error",
          "message": {
            "text": "Rename 'StringToVersionMap' to end in 'Dictionary'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StringToVersionMap"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2237",
          "level": "warning",
          "message": {
            "text": "Add [Serializable] to 'StringToVersionMap' as this type implements ISerializable."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.StringToVersionMap"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1008",
          "level": "error",
          "message": {
            "text": "In enum 'SupportedPlatform', change the name of 'SupportedPlatform.Unknown' to 'None'.",
            "messageId": "FlagsRename"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SupportedPlatform"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "FlagsRename"
          },
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1714",
          "level": "error",
          "message": {
            "text": "If enumeration name 'SupportedPlatform' is singular, change it to a plural form."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SupportedPlatform"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1709",
          "level": "error",
          "message": {
            "text": "Correct the casing of 'OSX' in member name 'SupportedPlatform.OSX' by changing it to 'Osx'.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.SupportedPlatform.OSX"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "OSX#Member"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ThreadFlow.ThreadFlow(ThreadFlow)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nThreadFlow..ctor(ThreadFlow)\r\nThreadFlow.Init(String, Message, IEnumerable<ThreadFlowLocation>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlow.cs"
                },
                "region": {
                  "startLine": 92,
                  "snippet": {
                    "text": "        public ThreadFlow(ThreadFlow other)"
                  }
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "endLine": 93,
                  "endColumn": 10,
                  "charOffset": 3787,
                  "charLength": 80,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public ThreadFlow(ThreadFlow other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow..ctor(Microsoft.CodeAnalysis.Sarif.ThreadFlow)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ThreadFlow.ThreadFlow(string, Message, IEnumerable<ThreadFlowLocation>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nThreadFlow..ctor(String, Message, IEnumerable<ThreadFlowLocation>, IDictionary<String,SerializedPropertyInfo>)\r\nThreadFlow.Init(String, Message, IEnumerable<ThreadFlowLocation>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlow.cs"
                },
                "region": {
                  "startLine": 78,
                  "snippet": {
                    "text": "        public ThreadFlow(string id, Message message, IEnumerable<ThreadFlowLocation> locations, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 10,
                  "charOffset": 3133,
                  "charLength": 185,
                  "snippet": {
                    "text": "        /// </param>\r\n        public ThreadFlow(string id, Message message, IEnumerable<ThreadFlowLocation> locations, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Message,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ThreadFlow.Locations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlow.cs"
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "        public IList<ThreadFlowLocation> Locations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 1,
                  "charOffset": 1818,
                  "charLength": 127,
                  "snippet": {
                    "text": "        [DataMember(Name = \"locations\", IsRequired = true)]\r\n        public IList<ThreadFlowLocation> Locations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlow.Locations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ThreadFlowLocation.ThreadFlowLocation(ThreadFlowLocation)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nThreadFlowLocation..ctor(ThreadFlowLocation)\r\nThreadFlowLocation.Init(Int32, Location, Stack, String, String, IDictionary<String,String>, Int32, Int32, DateTime, ThreadFlowLocationImportance, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlowLocation.cs"
                },
                "region": {
                  "startLine": 158,
                  "snippet": {
                    "text": "        public ThreadFlowLocation(ThreadFlowLocation other)"
                  }
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "endLine": 159,
                  "endColumn": 10,
                  "charOffset": 7312,
                  "charLength": 96,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public ThreadFlowLocation(ThreadFlowLocation other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation..ctor(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ThreadFlowLocation.ThreadFlowLocation(int, Location, Stack, string, string, IDictionary<string, string>, int, int, DateTime, ThreadFlowLocationImportance, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nThreadFlowLocation..ctor(Int32, Location, Stack, String, String, IDictionary<String,String>, Int32, Int32, DateTime, ThreadFlowLocationImportance, IDictionary<String,SerializedPropertyInfo>)\r\nThreadFlowLocation.Init(Int32, Location, Stack, String, String, IDictionary<String,String>, Int32, Int32, DateTime, ThreadFlowLocationImportance, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlowLocation.cs"
                },
                "region": {
                  "startLine": 144,
                  "snippet": {
                    "text": "        public ThreadFlowLocation(int step, Location location, Stack stack, string kind, string module, IDictionary<string, string> state, int nestingLevel, int executionOrder, DateTime timestamp, ThreadFlowLocationImportance importance, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "endLine": 145,
                  "endColumn": 10,
                  "charOffset": 6436,
                  "charLength": 326,
                  "snippet": {
                    "text": "        /// </param>\r\n        public ThreadFlowLocation(int step, Location location, Stack stack, string kind, string module, IDictionary<string, string> state, int nestingLevel, int executionOrder, DateTime timestamp, ThreadFlowLocationImportance importance, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation..ctor(System.Int32,Microsoft.CodeAnalysis.Sarif.Location,Microsoft.CodeAnalysis.Sarif.Stack,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Int32,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationImportance,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ThreadFlowLocation.State' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlowLocation.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public IDictionary<string, string> State { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 1,
                  "charOffset": 2855,
                  "charLength": 148,
                  "snippet": {
                    "text": "        [DataMember(Name = \"state\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> State { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation.State"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'ThreadFlowLocationEqualityComparer.Equals(ThreadFlowLocation, ThreadFlowLocation)' has a cyclomatic complexity of 29. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/ThreadFlowLocationEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 770,
                  "charLength": 135,
                  "snippet": {
                    "text": "        public bool Equals(ThreadFlowLocation left, ThreadFlowLocation right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Tool.Tool(Tool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nTool..ctor(Tool)\r\nTool.Init(String, String, String, String, String, Uri, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Tool.cs"
                },
                "region": {
                  "startLine": 140,
                  "snippet": {
                    "text": "        public Tool(Tool other)"
                  }
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 10,
                  "charOffset": 6213,
                  "charLength": 68,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public Tool(Tool other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool..ctor(Microsoft.CodeAnalysis.Sarif.Tool)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'Tool.Tool(string, string, string, string, string, Uri, string, string, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nTool..ctor(String, String, String, String, String, Uri, String, String, IDictionary<String,SerializedPropertyInfo>)\r\nTool.Init(String, String, String, String, String, Uri, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Tool.cs"
                },
                "region": {
                  "startLine": 126,
                  "snippet": {
                    "text": "        public Tool(string name, string fullName, string version, string semanticVersion, string fileVersion, Uri downloadUri, string sarifLoggerVersion, string language, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 10,
                  "charOffset": 5417,
                  "charLength": 259,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Tool(string name, string fullName, string version, string semanticVersion, string fileVersion, Uri downloadUri, string sarifLoggerVersion, string language, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool..ctor(System.String,System.String,System.String,System.String,System.String,System.Uri,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'Tool.Tool(string, string, string, string, string, Uri, string, string, IDictionary<string, SerializedPropertyInfo>)', correct the spelling of 'sarif' in parameter name 'sarifLoggerVersion' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Tool.cs"
                },
                "region": {
                  "startLine": 126,
                  "snippet": {
                    "text": "        public Tool(string name, string fullName, string version, string semanticVersion, string fileVersion, Uri downloadUri, string sarifLoggerVersion, string language, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 10,
                  "charOffset": 5417,
                  "charLength": 259,
                  "snippet": {
                    "text": "        /// </param>\r\n        public Tool(string name, string fullName, string version, string semanticVersion, string fileVersion, Uri downloadUri, string sarifLoggerVersion, string language, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool..ctor(System.String,System.String,System.String,System.String,System.String,System.Uri,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'Tool.CreateFromAssemblyData(string)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Tool.cs"
                },
                "region": {
                  "startLine": 18,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 96,
                  "charOffset": 435,
                  "charLength": 187,
                  "snippet": {
                    "text": "        public static Tool CreateFromAssemblyData(string prereleaseInfo = null)\r\n        {\r\n            Assembly assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool.CreateFromAssemblyData(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Tool.CreateFromAssemblyData(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Tool.cs"
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "            tool.SemanticVersion = version.Major.ToString() + \".\" + version.Minor.ToString() + \".\" + version.Build.ToString();"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 1,
                  "charOffset": 960,
                  "charLength": 192,
                  "snippet": {
                    "text": "            // Synthesized semver 2.0 version required by spec\r\n            tool.SemanticVersion = version.Major.ToString() + \".\" + version.Minor.ToString() + \".\" + version.Build.ToString();\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool.CreateFromAssemblyData(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.ToString#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Tool.CreateFromAssemblyData(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Tool.cs"
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "            tool.SemanticVersion = version.Major.ToString() + \".\" + version.Minor.ToString() + \".\" + version.Build.ToString();"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 1,
                  "charOffset": 960,
                  "charLength": 192,
                  "snippet": {
                    "text": "            // Synthesized semver 2.0 version required by spec\r\n            tool.SemanticVersion = version.Major.ToString() + \".\" + version.Minor.ToString() + \".\" + version.Build.ToString();\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool.CreateFromAssemblyData(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.ToString#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Tool.CreateFromAssemblyData(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Core/Tool.cs"
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "            tool.SemanticVersion = version.Major.ToString() + \".\" + version.Minor.ToString() + \".\" + version.Build.ToString();"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 1,
                  "charOffset": 960,
                  "charLength": 192,
                  "snippet": {
                    "text": "            // Synthesized semver 2.0 version required by spec\r\n            tool.SemanticVersion = version.Major.ToString() + \".\" + version.Minor.ToString() + \".\" + version.Build.ToString();\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool.CreateFromAssemblyData(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.ToString#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'Tool.SarifLoggerVersion' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/Tool.cs"
                },
                "region": {
                  "startLine": 75,
                  "snippet": {
                    "text": "        public string SarifLoggerVersion { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 1,
                  "charOffset": 2961,
                  "charLength": 153,
                  "snippet": {
                    "text": "        [DataMember(Name = \"sarifLoggerVersion\", IsRequired = false, EmitDefaultValue = false)]\r\n        public string SarifLoggerVersion { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Tool.SarifLoggerVersion"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2240",
          "level": "error",
          "message": {
            "text": "Add an implementation of GetObjectData to type 'TypedPropertiesDictionary<T>'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionary`1"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionary`1.SettingNameToDescriptionsMap"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TypedPropertiesDictionaryConverter.ReadJson(JsonReader, Type, object, JsonSerializer)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs"
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "                return new IntegerSet(ja.Values().Select(token => Int32.Parse(token.ToString())));"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 14,
                  "charOffset": 1399,
                  "charLength": 156,
                  "snippet": {
                    "text": "                ja = JArray.Load(reader);\r\n                return new IntegerSet(ja.Values().Select(token => Int32.Parse(token.ToString())));\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'TypedPropertiesDictionaryConverter.ReadJson(JsonReader, Type, object, JsonSerializer)', validate parameter 'reader' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs"
                },
                "region": {
                  "startLine": 47,
                  "snippet": {
                    "text": "                return JsonConvert.DeserializeObject<Version>(reader.ReadAsString(), _versionConverter);"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 14,
                  "charOffset": 1610,
                  "charLength": 134,
                  "snippet": {
                    "text": "            {\r\n                return JsonConvert.DeserializeObject<Version>(reader.ReadAsString(), _versionConverter);\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1800",
          "level": "warning",
          "message": {
            "text": "'value', a parameter, is cast to type 'IntegerSet' multiple times in method 'TypedPropertiesDictionaryConverter.WriteJson(JsonWriter, object, JsonSerializer)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.",
            "messageId": "Parameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs"
                },
                "region": {
                  "startLine": 112,
                  "snippet": {
                    "text": "                IntegerSet hashSet = (IntegerSet)value;"
                  }
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "endLine": 113,
                  "endColumn": 69,
                  "charOffset": 4027,
                  "charLength": 140,
                  "snippet": {
                    "text": "            {\r\n                IntegerSet hashSet = (IntegerSet)value;\r\n                ja = new JArray(hashSet.Select(i => new JValue(i)));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Parameter"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1800",
          "level": "warning",
          "message": {
            "text": "'value', a parameter, is cast to type 'StringSet' multiple times in method 'TypedPropertiesDictionaryConverter.WriteJson(JsonWriter, object, JsonSerializer)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.",
            "messageId": "Parameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs"
                },
                "region": {
                  "startLine": 106,
                  "snippet": {
                    "text": "                StringSet hashSet = (StringSet)value;"
                  }
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 69,
                  "charOffset": 3792,
                  "charLength": 138,
                  "snippet": {
                    "text": "            {\r\n                StringSet hashSet = (StringSet)value;\r\n                ja = new JArray(hashSet.Select(i => new JValue(i)));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Parameter"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1804",
          "level": "warning",
          "message": {
            "text": "'TypedPropertiesDictionaryConverter.WriteJson(JsonWriter, object, JsonSerializer)' declares a variable, 't', of type 'Type', which is never used or is only assigned to. Use this variable or remove it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs"
                },
                "region": {
                  "startLine": 127,
                  "snippet": {
                    "text": "                    Type t = typeof(object);"
                  }
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 58,
                  "charOffset": 4547,
                  "charLength": 105,
                  "snippet": {
                    "text": "\r\n                    Type t = typeof(object);\r\n                    if (dictionaryValue is IDictionary ||"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "t"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'TypedPropertiesDictionaryConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'writer' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs"
                },
                "region": {
                  "startLine": 119,
                  "snippet": {
                    "text": "                writer.WriteStartObject();"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "endLine": 120,
                  "endColumn": 1,
                  "charOffset": 4254,
                  "charLength": 98,
                  "snippet": {
                    "text": "                var dictionary = (IDictionary)value;\r\n                writer.WriteStartObject();\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'TypedPropertiesDictionaryConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'serializer' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs"
                },
                "region": {
                  "startLine": 136,
                  "snippet": {
                    "text": "                        serializer.Serialize(writer, dictionaryValue.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 22,
                  "charOffset": 4945,
                  "charLength": 127,
                  "snippet": {
                    "text": "                    {\r\n                        serializer.Serialize(writer, dictionaryValue.ToString());\r\n                    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "2"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TypedPropertiesDictionaryConverter.ReadJson(JsonReader, Type, object, JsonSerializer)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/TypedPropertiesDictionaryConverter.cs"
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "                return new IntegerSet(ja.Values().Select(token => Int32.Parse(token.ToString())));"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 14,
                  "charOffset": 1399,
                  "charLength": 156,
                  "snippet": {
                    "text": "                ja = JArray.Load(reader);\r\n                return new IntegerSet(ja.Values().Select(token => Int32.Parse(token.ToString())));\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter+<>c.<ReadJson>b__3_1(Newtonsoft.Json.Linq.JToken)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1055",
          "level": "error",
          "message": {
            "text": "Change the return type of 'UriHelper.MakeValidUri(string)' from string to System.Uri."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/UriHelper.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 44,
                  "charOffset": 2229,
                  "charLength": 110,
                  "snippet": {
                    "text": "        public static string MakeValidUri(string path)\r\n        {\r\n            if (string.IsNullOrEmpty(path))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.UriHelper.MakeValidUri(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'VersionControlDetails.VersionControlDetails(VersionControlDetails)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nVersionControlDetails..ctor(VersionControlDetails)\r\nVersionControlDetails.Init(Uri, String, String, String, DateTime, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/VersionControlDetails.cs"
                },
                "region": {
                  "startLine": 110,
                  "snippet": {
                    "text": "        public VersionControlDetails(VersionControlDetails other)"
                  }
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 10,
                  "charOffset": 4552,
                  "charLength": 102,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public VersionControlDetails(VersionControlDetails other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionControlDetails..ctor(Microsoft.CodeAnalysis.Sarif.VersionControlDetails)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'VersionControlDetails.VersionControlDetails(Uri, string, string, string, DateTime, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nVersionControlDetails..ctor(Uri, String, String, String, DateTime, IDictionary<String,SerializedPropertyInfo>)\r\nVersionControlDetails.Init(Uri, String, String, String, DateTime, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Autogenerated/VersionControlDetails.cs"
                },
                "region": {
                  "startLine": 96,
                  "snippet": {
                    "text": "        public VersionControlDetails(Uri uri, string revisionId, string branch, string tag, DateTime timestamp, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 97,
                  "endColumn": 10,
                  "charOffset": 3855,
                  "charLength": 200,
                  "snippet": {
                    "text": "        /// </param>\r\n        public VersionControlDetails(Uri uri, string revisionId, string branch, string tag, DateTime timestamp, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionControlDetails..ctor(System.Uri,System.String,System.String,System.String,System.DateTime,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Wrn' in member name 'Warnings.Wrn997_InvalidTarget' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn997_InvalidTarget"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Wrn#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1707",
          "level": "error",
          "message": {
            "text": "Remove the underscores from member name 'Warnings.Wrn997_InvalidTarget'.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn997_InvalidTarget"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Member"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Wrn' in member name 'Warnings.Wrn998_UnsupportedPlatform' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn998_UnsupportedPlatform"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Wrn#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1707",
          "level": "error",
          "message": {
            "text": "Remove the underscores from member name 'Warnings.Wrn998_UnsupportedPlatform'.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn998_UnsupportedPlatform"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Member"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Wrn' in member name 'Warnings.Wrn999_RuleExplicitlyDisabled' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn999_RuleExplicitlyDisabled"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Wrn#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1707",
          "level": "error",
          "message": {
            "text": "Remove the underscores from member name 'Warnings.Wrn999_RuleExplicitlyDisabled'.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Warnings.Wrn999_RuleExplicitlyDisabled"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Member"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'ISarifLogBaseliner'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.ISarifLogBaseliner"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1702",
          "level": "error",
          "message": {
            "text": "In member 'ISarifLogBaseliner.CreateBaselinedRun(Run, Run)', the compound word 'baseLine' in parameter name 'baseLine' exists as a discrete term. If your usage is intended to be single word, case it as 'baseline' or strip the first token entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameterShouldBeDiscreteTerm"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.ISarifLogBaseliner.CreateBaselinedRun(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "baseLine#MemberParameterShouldBeDiscreteTerm"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Baselined' in member name 'ISarifLogBaseliner.CreateBaselinedRun(Run, Run)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.ISarifLogBaseliner.CreateBaselinedRun(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Baselined#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifBaselineType'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifBaselineType"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SarifLogBaseliner.CreateBaselinedRun(Run, Run)', validate parameter 'baseLine' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/SarifLogBaseliner.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "                newResult.BaselineState = "
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 118,
                  "charOffset": 853,
                  "charLength": 163,
                  "snippet": {
                    "text": "\r\n                newResult.BaselineState = \r\n                    baseLine.Results.Contains(result, ResultComparator) ? BaselineState.Existing : BaselineState.New;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaseliner.CreateBaselinedRun(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SarifLogBaseliner.CreateBaselinedRun(Run, Run)', validate parameter 'nextLog' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/SarifLogBaseliner.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "            Run differencedRun = nextLog.DeepClone();"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 57,
                  "charOffset": 591,
                  "charLength": 122,
                  "snippet": {
                    "text": "        {\r\n            Run differencedRun = nextLog.DeepClone();\r\n            differencedRun.Results = new List<Result>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaseliner.CreateBaselinedRun(Microsoft.CodeAnalysis.Sarif.Run,Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLogBaselinerFactory'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaselinerFactory"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1053",
          "level": "error",
          "message": {
            "text": "Because type 'SarifLogBaselinerFactory' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.",
            "messageId": "CSharp2_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaselinerFactory"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "CSharp2_0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifLogBaselinerFactory.CreateSarifLogBaseliner(SarifBaselineType)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/SarifLogBaselinerFactory.cs"
                },
                "region": {
                  "startLine": 9,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 38,
                  "charOffset": 257,
                  "charLength": 150,
                  "snippet": {
                    "text": "        public static ISarifLogBaseliner CreateSarifLogBaseliner(SarifBaselineType logBaselinerType)\r\n        {\r\n            switch (logBaselinerType)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaselinerFactory.CreateSarifLogBaseliner(Microsoft.CodeAnalysis.Sarif.Baseline.SarifBaselineType)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'CodeFlowBaselineEqualityComparator.Equals(CodeFlow, CodeFlow)', validate parameter 'x' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/CodeFlowBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (!ListComparisonHelpers.CompareListsOrdered(x.ThreadFlows, y.ThreadFlows, ThreadFlowBaselineEqualityComparator.Instance))"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 587,
                  "charLength": 174,
                  "snippet": {
                    "text": "            {\r\n                if (!ListComparisonHelpers.CompareListsOrdered(x.ThreadFlows, y.ThreadFlows, ThreadFlowBaselineEqualityComparator.Instance))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.CodeFlowBaselineEqualityComparator.Equals(Microsoft.CodeAnalysis.Sarif.CodeFlow,Microsoft.CodeAnalysis.Sarif.CodeFlow)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'CodeFlowBaselineEqualityComparator.Equals(CodeFlow, CodeFlow)', validate parameter 'y' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/CodeFlowBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (!ListComparisonHelpers.CompareListsOrdered(x.ThreadFlows, y.ThreadFlows, ThreadFlowBaselineEqualityComparator.Instance))"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 587,
                  "charLength": 174,
                  "snippet": {
                    "text": "            {\r\n                if (!ListComparisonHelpers.CompareListsOrdered(x.ThreadFlows, y.ThreadFlows, ThreadFlowBaselineEqualityComparator.Instance))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.CodeFlowBaselineEqualityComparator.Equals(Microsoft.CodeAnalysis.Sarif.CodeFlow,Microsoft.CodeAnalysis.Sarif.CodeFlow)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1720",
          "level": "error",
          "message": {
            "text": "In member 'DefaultBaselineExtensions.GetNullCheckedHashCode(this object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.",
            "messageId": "LanguageIndependentMemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/DefaultBaselineExtensions.cs"
                },
                "region": {
                  "startLine": 9,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 29,
                  "charOffset": 281,
                  "charLength": 106,
                  "snippet": {
                    "text": "        public static int GetNullCheckedHashCode(this object obj)\r\n        {\r\n            if (obj == null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.DefaultBaselineExtensions.GetNullCheckedHashCode(System.Object)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "obj#LanguageIndependentMemberParameter"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'LocationBaselineEquals.Equals(Location, Location)', validate parameter 'x' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/LocationBaselineEquals.cs"
                },
                "region": {
                  "startLine": 17,
                  "snippet": {
                    "text": "                if (!PhysicalLocationBaselineEquals.Instance.Equals(x.PhysicalLocation, y.PhysicalLocation))"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 18,
                  "charOffset": 564,
                  "charLength": 174,
                  "snippet": {
                    "text": "                // Result files should match.\r\n                if (!PhysicalLocationBaselineEquals.Instance.Equals(x.PhysicalLocation, y.PhysicalLocation))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.LocationBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Location,Microsoft.CodeAnalysis.Sarif.Location)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'LocationBaselineEquals.Equals(Location, Location)', validate parameter 'y' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/LocationBaselineEquals.cs"
                },
                "region": {
                  "startLine": 17,
                  "snippet": {
                    "text": "                if (!PhysicalLocationBaselineEquals.Instance.Equals(x.PhysicalLocation, y.PhysicalLocation))"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 18,
                  "charOffset": 564,
                  "charLength": 174,
                  "snippet": {
                    "text": "                // Result files should match.\r\n                if (!PhysicalLocationBaselineEquals.Instance.Equals(x.PhysicalLocation, y.PhysicalLocation))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.LocationBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Location,Microsoft.CodeAnalysis.Sarif.Location)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ResultBaselineEquals.Equals(Result, Result)', validate parameter 'x' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ResultBaselineEquals.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                if (x.RuleId != y.RuleId)"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 18,
                  "charOffset": 604,
                  "charLength": 101,
                  "snippet": {
                    "text": "                // Rule ID should match\r\n                if (x.RuleId != y.RuleId)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ResultBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ResultBaselineEquals.Equals(Result, Result)', validate parameter 'y' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ResultBaselineEquals.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                if (x.RuleId != y.RuleId)"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 18,
                  "charOffset": 604,
                  "charLength": 101,
                  "snippet": {
                    "text": "                // Rule ID should match\r\n                if (x.RuleId != y.RuleId)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ResultBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Result,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'StackBaselineEquals.Equals(Stack, Stack)', validate parameter 'x' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/StackBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (!ListComparisonHelpers.CompareListsOrdered(x.Frames, y.Frames))"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 531,
                  "charLength": 117,
                  "snippet": {
                    "text": "            {\r\n                if (!ListComparisonHelpers.CompareListsOrdered(x.Frames, y.Frames))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Stack,Microsoft.CodeAnalysis.Sarif.Stack)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'StackBaselineEquals.Equals(Stack, Stack)', validate parameter 'y' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/StackBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (!ListComparisonHelpers.CompareListsOrdered(x.Frames, y.Frames))"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 531,
                  "charLength": 117,
                  "snippet": {
                    "text": "            {\r\n                if (!ListComparisonHelpers.CompareListsOrdered(x.Frames, y.Frames))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.Stack,Microsoft.CodeAnalysis.Sarif.Stack)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'StackFrameBaselineEquals.Equals(StackFrame, StackFrame)', validate parameter 'x' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/StackFrameBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (x.Location?.PhysicalLocation?.FileLocation?.Uri != y.Location?.PhysicalLocation?.FileLocation?.Uri)"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 561,
                  "charLength": 153,
                  "snippet": {
                    "text": "            {\r\n                if (x.Location?.PhysicalLocation?.FileLocation?.Uri != y.Location?.PhysicalLocation?.FileLocation?.Uri)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackFrameBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.StackFrame,Microsoft.CodeAnalysis.Sarif.StackFrame)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'StackFrameBaselineEquals.Equals(StackFrame, StackFrame)', validate parameter 'y' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/StackFrameBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (x.Location?.PhysicalLocation?.FileLocation?.Uri != y.Location?.PhysicalLocation?.FileLocation?.Uri)"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 561,
                  "charLength": 153,
                  "snippet": {
                    "text": "            {\r\n                if (x.Location?.PhysicalLocation?.FileLocation?.Uri != y.Location?.PhysicalLocation?.FileLocation?.Uri)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackFrameBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.StackFrame,Microsoft.CodeAnalysis.Sarif.StackFrame)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ThreadFlowBaselineEqualityComparator.Equals(ThreadFlow, ThreadFlow)', validate parameter 'x' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ThreadFlowBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (!ListComparisonHelpers.CompareListsOrdered(x.Locations, y.Locations, ThreadFlowLocationBaselineEquals.DefaultInstance))"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 599,
                  "charLength": 173,
                  "snippet": {
                    "text": "            {\r\n                if (!ListComparisonHelpers.CompareListsOrdered(x.Locations, y.Locations, ThreadFlowLocationBaselineEquals.DefaultInstance))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowBaselineEqualityComparator.Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlow,Microsoft.CodeAnalysis.Sarif.ThreadFlow)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ThreadFlowBaselineEqualityComparator.Equals(ThreadFlow, ThreadFlow)', validate parameter 'y' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ThreadFlowBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (!ListComparisonHelpers.CompareListsOrdered(x.Locations, y.Locations, ThreadFlowLocationBaselineEquals.DefaultInstance))"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 599,
                  "charLength": 173,
                  "snippet": {
                    "text": "            {\r\n                if (!ListComparisonHelpers.CompareListsOrdered(x.Locations, y.Locations, ThreadFlowLocationBaselineEquals.DefaultInstance))\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowBaselineEqualityComparator.Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlow,Microsoft.CodeAnalysis.Sarif.ThreadFlow)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ThreadFlowLocationBaselineEquals.Equals(ThreadFlowLocation, ThreadFlowLocation)', validate parameter 'x' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ThreadFlowLocationBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (x.Importance != y.Importance)"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 626,
                  "charLength": 83,
                  "snippet": {
                    "text": "            {\r\n                if (x.Importance != y.Importance)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowLocationBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ThreadFlowLocationBaselineEquals.Equals(ThreadFlowLocation, ThreadFlowLocation)', validate parameter 'y' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Baseline/DefaultBaseline/ThreadFlowLocationBaselineEquals.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "                if (x.Importance != y.Importance)"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 18,
                  "charOffset": 626,
                  "charLength": 83,
                  "snippet": {
                    "text": "            {\r\n                if (x.Importance != y.Importance)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowLocationBaselineEquals.Equals(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation,Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1006",
          "level": "error",
          "message": {
            "text": "Consider a design where 'GenericActionPipeline<T>.GenericActionPipeline(IEnumerable<IActionWrapper<T>>)' doesn't nest generic type 'IEnumerable<IActionWrapper<T>>'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Generic/GenericActionPipeline.cs"
                },
                "region": {
                  "startLine": 12,
                  "snippet": {
                    "text": "        public GenericActionPipeline(IEnumerable<IActionWrapper<T>> stages)"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 10,
                  "charOffset": 365,
                  "charLength": 88,
                  "snippet": {
                    "text": "\r\n        public GenericActionPipeline(IEnumerable<IActionWrapper<T>> stages)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericActionPipeline`1..ctor(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Processors.IActionWrapper`1<!0>>)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1725",
          "level": "error",
          "message": {
            "text": "In member 'GenericMappingAction<T>.Act(IEnumerable<T>)', change parameter name 'list' to 'collection' in order to match the identifier as it has been declared in 'IActionWrapper<T>.Act(IEnumerable<T>)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Generic/GenericMappingAction.cs"
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 30,
                  "charOffset": 759,
                  "charLength": 96,
                  "snippet": {
                    "text": "        public IEnumerable<T> Act(IEnumerable<T> list)\r\n        {\r\n            return Map(list);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1.Act(System.Collections.Generic.IEnumerable`1<!0>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1051",
          "level": "error",
          "message": {
            "text": "Because field 'GenericMappingAction<T>.Action' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1.Action"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'GenericMappingAction<T>.Map(IEnumerable<T>)', validate parameter 'collection' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Generic/GenericMappingAction.cs"
                },
                "region": {
                  "startLine": 21,
                  "snippet": {
                    "text": "            foreach(var value in collection)"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 14,
                  "charOffset": 546,
                  "charLength": 104,
                  "snippet": {
                    "text": "            List<T> output = new List<T>();\r\n            foreach(var value in collection)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1.Map(System.Collections.Generic.IEnumerable`1<!0>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLogAction'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogAction"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLogActionTuple'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1051",
          "level": "error",
          "message": {
            "text": "Because field 'SarifLogActionTuple.Action' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple.Action"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1051",
          "level": "error",
          "message": {
            "text": "Because field 'SarifLogActionTuple.Parameters' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple.Parameters"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLogExtensionMethods'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifLogExtensionMethods.MakeUrisAbsolute(this SarifLog)', correct the spelling of 'sarif' in parameter name 'sarifLog' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogExtensionMethods.cs"
                },
                "region": {
                  "startLine": 36,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 84,
                  "charOffset": 1527,
                  "charLength": 167,
                  "snippet": {
                    "text": "        public static SarifLog MakeUrisAbsolute(this SarifLog sarifLog)\r\n        {\r\n            return (new List<SarifLog>() { sarifLog }).MakeUrisAbsolute().Single();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.MakeUrisAbsolute(Microsoft.CodeAnalysis.Sarif.SarifLog)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifLogExtensionMethods.MakeUrisAbsolute(this IEnumerable<SarifLog>)', correct the spelling of 'sarif' in parameter name 'sarifLogs' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogExtensionMethods.cs"
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 108,
                  "charOffset": 1294,
                  "charLength": 218,
                  "snippet": {
                    "text": "        public static IEnumerable<SarifLog> MakeUrisAbsolute(this IEnumerable<SarifLog> sarifLogs)\r\n        {\r\n            return SarifLogProcessorFactory.GetActionStage(SarifLogAction.MakeUrisAbsolute).Act(sarifLogs);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.MakeUrisAbsolute(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifLogExtensionMethods.Merge(this IEnumerable<SarifLog>)', correct the spelling of 'sarif' in parameter name 'sarifLog' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogExtensionMethods.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 128,
                  "charOffset": 468,
                  "charLength": 213,
                  "snippet": {
                    "text": "        public static SarifLog Merge(this IEnumerable<SarifLog> sarifLog)\r\n        {\r\n            return ((GenericFoldAction<SarifLog>)SarifLogProcessorFactory.GetActionStage(SarifLogAction.Merge)).Fold(sarifLog);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.Merge(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifLogExtensionMethods.RebaseUri(this SarifLog, string, bool, Uri)', correct the spelling of 'sarif' in parameter name 'sarifLog' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogExtensionMethods.cs"
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 115,
                  "charOffset": 1032,
                  "charLength": 247,
                  "snippet": {
                    "text": "        public static SarifLog RebaseUri(this SarifLog sarifLog, string basePathToken, bool rebaseRelativeUris, Uri uri)\r\n        {\r\n            return (new List<SarifLog>() { sarifLog }).RebaseUri(basePathToken, rebaseRelativeUris, uri).Single();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.RebaseUri(Microsoft.CodeAnalysis.Sarif.SarifLog,System.String,System.Boolean,System.Uri)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifLogExtensionMethods.RebaseUri(this IEnumerable<SarifLog>, string, bool, Uri)', correct the spelling of 'sarif' in parameter name 'sarifLog' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogExtensionMethods.cs"
                },
                "region": {
                  "startLine": 21,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 163,
                  "charOffset": 696,
                  "charLength": 321,
                  "snippet": {
                    "text": "        public static IEnumerable<SarifLog> RebaseUri(this IEnumerable<SarifLog> sarifLog, string basePathToken, bool rebaseRelativeUris, Uri uri)\r\n        {\r\n            return SarifLogProcessorFactory.GetActionStage(SarifLogAction.RebaseUri, basePathToken, rebaseRelativeUris.ToString(), uri.AbsoluteUri).Act(sarifLog);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.RebaseUri(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>,System.String,System.Boolean,System.Uri)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SarifLogExtensionMethods.RebaseUri(this IEnumerable<SarifLog>, string, bool, Uri)', validate parameter 'uri' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogExtensionMethods.cs"
                },
                "region": {
                  "startLine": 22,
                  "snippet": {
                    "text": "            return SarifLogProcessorFactory.GetActionStage(SarifLogAction.RebaseUri, basePathToken, rebaseRelativeUris.ToString(), uri.AbsoluteUri).Act(sarifLog);"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 10,
                  "charOffset": 844,
                  "charLength": 184,
                  "snippet": {
                    "text": "        {\r\n            return SarifLogProcessorFactory.GetActionStage(SarifLogAction.RebaseUri, basePathToken, rebaseRelativeUris.ToString(), uri.AbsoluteUri).Act(sarifLog);\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods.RebaseUri(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.SarifLog>,System.String,System.Boolean,System.Uri)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "3"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLogPipeline'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1002",
          "level": "error",
          "message": {
            "text": "Change 'List<SarifLogActionTuple>' in 'SarifLogPipeline.SarifLogPipeline(List<SarifLogActionTuple>)' to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogPipeline.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "        public SarifLogPipeline(List<SarifLogActionTuple> actions)"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 10,
                  "charOffset": 753,
                  "charLength": 104,
                  "snippet": {
                    "text": "        [JsonConstructor]\r\n        public SarifLogPipeline(List<SarifLogActionTuple> actions)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline..ctor(System.Collections.Generic.List`1<Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple>)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2235",
          "level": "error",
          "message": {
            "text": "Field 'SarifLogPipeline._pipeline' is a member of type 'SarifLogPipeline', which is serializable, but is of type 'GenericActionPipeline<SarifLog>', which is not serializable. Add the NonSerializedAttribute to 'SarifLogPipeline._pipeline'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline._pipeline"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1002",
          "level": "error",
          "message": {
            "text": "Change 'List<SarifLogActionTuple>' in 'SarifLogPipeline.Actions' to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogPipeline.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "            get;"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 25,
                  "charOffset": 615,
                  "charLength": 53,
                  "snippet": {
                    "text": "        {\r\n            get;\r\n            private set;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline.Actions"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLogProcessorFactory'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogProcessorFactory"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1053",
          "level": "error",
          "message": {
            "text": "Because type 'SarifLogProcessorFactory' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.",
            "messageId": "CSharp2_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogProcessorFactory"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "CSharp2_0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SarifLogProcessorFactory.GetActionStage(SarifLogAction, params string[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Processors/Log/SarifLogStageFactory.cs"
                },
                "region": {
                  "startLine": 55,
                  "snippet": {
                    "text": "                    throw new ArgumentException($\"Unknown/Not Supported Action {action}.\", nameof(action));"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 14,
                  "charOffset": 2118,
                  "charLength": 148,
                  "snippet": {
                    "text": "                default:\r\n                    throw new ArgumentException($\"Unknown/Not Supported Action {action}.\", nameof(action));\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Processors.SarifLogProcessorFactory.GetActionStage(Microsoft.CodeAnalysis.Sarif.Processors.SarifLogAction,System.String[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'DateTimeConverter.Instance' or change the field to one that is an immutable reference type. If the reference type 'DateTimeConverter' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1308",
          "level": "error",
          "message": {
            "text": "In method 'EnumConverter.ConvertToCamelCase(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().",
            "messageId": "ToUpperInvariant"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/EnumConverter.cs"
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "                return upperCaseName.ToLowerInvariant();"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 14,
                  "charOffset": 1631,
                  "charLength": 86,
                  "snippet": {
                    "text": "            {\r\n                return upperCaseName.ToLowerInvariant();\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter.ConvertToCamelCase(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ToUpperInvariant"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1308",
          "level": "error",
          "message": {
            "text": "In method 'EnumConverter.ConvertToCamelCase(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().",
            "messageId": "ToUpperInvariant"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/EnumConverter.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "            return upperCaseName.Substring(0, prefixCount).ToLowerInvariant() + upperCaseName.Substring(prefixCount);"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 10,
                  "charOffset": 1804,
                  "charLength": 130,
                  "snippet": {
                    "text": "\r\n            return upperCaseName.Substring(0, prefixCount).ToLowerInvariant() + upperCaseName.Substring(prefixCount);\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter.ConvertToCamelCase(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ToUpperInvariant"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'EnumConverter.Instance' or change the field to one that is an immutable reference type. If the reference type 'EnumConverter' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1726",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Flags"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'FlagsEnumConverter.Instance' or change the field to one that is an immutable reference type. If the reference type 'FlagsEnumConverter' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'FlagsEnumConverter.WriteJson(JsonWriter, object, JsonSerializer)', validate parameter 'value' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/FlagsEnumConverter.cs"
                },
                "region": {
                  "startLine": 62,
                  "snippet": {
                    "text": "            string flagsEnumValue = value.ToString();"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 1,
                  "charOffset": 2248,
                  "charLength": 57,
                  "snippet": {
                    "text": "\r\n            string flagsEnumValue = value.ToString();\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1308",
          "level": "error",
          "message": {
            "text": "In method 'PropertyBagConverter.ReadJson(JsonReader, Type, object, JsonSerializer)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().",
            "messageId": "ToUpperInvariant"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/PropertyBagConverter.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "                    serializedValue = serializedValue.ToLowerInvariant();"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 18,
                  "charOffset": 1743,
                  "charLength": 111,
                  "snippet": {
                    "text": "                {\r\n                    serializedValue = serializedValue.ToLowerInvariant();\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.PropertyBagConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ToUpperInvariant"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ResultDiffingVisitor.ResultDiffingVisitor(SarifLog)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nResultDiffingVisitor..ctor(SarifLog)\r\nSarifRewritingVisitor.VisitSarifLog(SarifLog):SarifLog"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/ResultDiffingVisitor.cs"
                },
                "region": {
                  "startLine": 10,
                  "snippet": {
                    "text": "        public ResultDiffingVisitor(SarifLog sarifLog)"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 10,
                  "charOffset": 306,
                  "charLength": 72,
                  "snippet": {
                    "text": "    {\r\n        public ResultDiffingVisitor(SarifLog sarifLog)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor..ctor(Microsoft.CodeAnalysis.Sarif.SarifLog)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'ResultDiffingVisitor.ResultDiffingVisitor(SarifLog)', correct the spelling of 'sarif' in parameter name 'sarifLog' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Readers/ResultDiffingVisitor.cs"
                },
                "region": {
                  "startLine": 10,
                  "snippet": {
                    "text": "        public ResultDiffingVisitor(SarifLog sarifLog)"
                  }
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 10,
                  "charOffset": 306,
                  "charLength": 72,
                  "snippet": {
                    "text": "    {\r\n        public ResultDiffingVisitor(SarifLog sarifLog)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor..ctor(Microsoft.CodeAnalysis.Sarif.SarifLog)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor.AbsentResults"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor.NewResults"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor.SharedResults"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'RuleDictionaryConverter.Instance' or change the field to one that is an immutable reference type. If the reference type 'RuleDictionaryConverter' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.RuleDictionaryConverter.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifContractResolver'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolver"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifContractResolver.Instance' or change the field to one that is an immutable reference type. If the reference type 'SarifContractResolver' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolver.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifContractResolverVersionOne'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolverVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifContractResolverVersionOne.Instance' or change the field to one that is an immutable reference type. If the reference type 'SarifContractResolverVersionOne' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolverVersionOne.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifVersionConverter'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifVersionConverter"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifVersionConverter.Instance' or change the field to one that is an immutable reference type. If the reference type 'SarifVersionConverter' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.SarifVersionConverter.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'UriConverter.Instance' or change the field to one that is an immutable reference type. If the reference type 'UriConverter' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.UriConverter.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'VersionConverter.Instance' or change the field to one that is an immutable reference type. If the reference type 'VersionConverter' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Readers.VersionConverter.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Authentihash' in member name 'AlgorithmKindVersionOne.Authentihash' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Authentihash"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Authentihash#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Ecoh' in member name 'AlgorithmKindVersionOne.Ecoh' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Ecoh"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Ecoh#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Fsb' in member name 'AlgorithmKindVersionOne.Fsb' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Fsb"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Fsb#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Gost' in member name 'AlgorithmKindVersionOne.Gost' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Gost"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Gost#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Groestl' in member name 'AlgorithmKindVersionOne.Groestl' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Groestl"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Groestl#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Haval' in member name 'AlgorithmKindVersionOne.Haval' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Haval"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Haval#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sdhash' in member name 'AlgorithmKindVersionOne.Sdhash' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sdhash"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sdhash#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'AlgorithmKindVersionOne.Sha1' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha1"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'AlgorithmKindVersionOne.Sha224' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha224"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'AlgorithmKindVersionOne.Sha256' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha256"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'AlgorithmKindVersionOne.Sha3' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha3"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'AlgorithmKindVersionOne.Sha384' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha384"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sha' in member name 'AlgorithmKindVersionOne.Sha512' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Sha512"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sha#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Snefru' in member name 'AlgorithmKindVersionOne.Snefru' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Snefru"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Snefru#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Ssdeep' in member name 'AlgorithmKindVersionOne.Ssdeep' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Ssdeep"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Ssdeep#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Swifft' in member name 'AlgorithmKindVersionOne.Swifft' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Swifft"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Swifft#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Tlsh' in member name 'AlgorithmKindVersionOne.Tlsh' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne.Tlsh"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Tlsh#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'AnnotatedCodeLocationVersionOne.AnnotatedCodeLocationVersionOne(AnnotatedCodeLocationVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nAnnotatedCodeLocationVersionOne..ctor(AnnotatedCodeLocationVersionOne)\r\nAnnotatedCodeLocationVersionOne.Init(Int32, Int32, PhysicalLocationVersionOne, String, String, String, Int32, String, AnnotatedCodeLocationKindVersionOne, TaintKindVersionOne, String, IEnumerable<String>, IDictionary<String,String>, String, Boolean, AnnotatedCodeLocationImportanceVersionOne, String, IEnumerable<AnnotationVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOne.cs"
                },
                "region": {
                  "startLine": 234,
                  "snippet": {
                    "text": "        public AnnotatedCodeLocationVersionOne(AnnotatedCodeLocationVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 233,
                  "startColumn": 1,
                  "endLine": 235,
                  "endColumn": 10,
                  "charOffset": 12048,
                  "charLength": 122,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public AnnotatedCodeLocationVersionOne(AnnotatedCodeLocationVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'AnnotatedCodeLocationVersionOne.AnnotatedCodeLocationVersionOne(int, int, PhysicalLocationVersionOne, string, string, string, int, string, AnnotatedCodeLocationKindVersionOne, TaintKindVersionOne, string, IEnumerable<string>, IDictionary<string, string>, string, bool, AnnotatedCodeLocationImportanceVersionOne, string, IEnumerable<AnnotationVersionOne>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nAnnotatedCodeLocationVersionOne..ctor(Int32, Int32, PhysicalLocationVersionOne, String, String, String, Int32, String, AnnotatedCodeLocationKindVersionOne, TaintKindVersionOne, String, IEnumerable<String>, IDictionary<String,String>, String, Boolean, AnnotatedCodeLocationImportanceVersionOne, String, IEnumerable<AnnotationVersionOne>, IDictionary<String,SerializedPropertyInfo>)\r\nAnnotatedCodeLocationVersionOne.Init(Int32, Int32, PhysicalLocationVersionOne, String, String, String, Int32, String, AnnotatedCodeLocationKindVersionOne, TaintKindVersionOne, String, IEnumerable<String>, IDictionary<String,String>, String, Boolean, AnnotatedCodeLocationImportanceVersionOne, String, IEnumerable<AnnotationVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOne.cs"
                },
                "region": {
                  "startLine": 220,
                  "snippet": {
                    "text": "        public AnnotatedCodeLocationVersionOne(int id, int step, PhysicalLocationVersionOne physicalLocation, string fullyQualifiedLogicalName, string logicalLocationKey, string module, int threadId, string message, AnnotatedCodeLocationKindVersionOne kind, TaintKindVersionOne taintKind, string target, IEnumerable<string> values, IDictionary<string, string> state, string targetKey, bool essential, AnnotatedCodeLocationImportanceVersionOne importance, string snippet, IEnumerable<AnnotationVersionOne> annotations, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "endLine": 221,
                  "endColumn": 10,
                  "charOffset": 10778,
                  "charLength": 606,
                  "snippet": {
                    "text": "        /// </param>\r\n        public AnnotatedCodeLocationVersionOne(int id, int step, PhysicalLocationVersionOne physicalLocation, string fullyQualifiedLogicalName, string logicalLocationKey, string module, int threadId, string message, AnnotatedCodeLocationKindVersionOne kind, TaintKindVersionOne taintKind, string target, IEnumerable<string> values, IDictionary<string, string> state, string targetKey, bool essential, AnnotatedCodeLocationImportanceVersionOne importance, string snippet, IEnumerable<AnnotationVersionOne> annotations, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne..ctor(System.Int32,System.Int32,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,System.String,System.String,System.Int32,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationKindVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.TaintKindVersionOne,System.String,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.String,System.Boolean,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationImportanceVersionOne,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'AnnotatedCodeLocationVersionOne.Annotations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOne.cs"
                },
                "region": {
                  "startLine": 145,
                  "snippet": {
                    "text": "        public IList<AnnotationVersionOne> Annotations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "endLine": 146,
                  "endColumn": 1,
                  "charOffset": 7200,
                  "charLength": 160,
                  "snippet": {
                    "text": "        [DataMember(Name = \"annotations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<AnnotationVersionOne> Annotations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne.Annotations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'AnnotatedCodeLocationVersionOne.State' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOne.cs"
                },
                "region": {
                  "startLine": 114,
                  "snippet": {
                    "text": "        public IDictionary<string, string> State { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "endLine": 115,
                  "endColumn": 1,
                  "charOffset": 5561,
                  "charLength": 148,
                  "snippet": {
                    "text": "        [DataMember(Name = \"state\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> State { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne.State"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'AnnotatedCodeLocationVersionOne.Values' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOne.cs"
                },
                "region": {
                  "startLine": 108,
                  "snippet": {
                    "text": "        public IList<string> Values { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "endLine": 109,
                  "endColumn": 1,
                  "charOffset": 5080,
                  "charLength": 136,
                  "snippet": {
                    "text": "        [DataMember(Name = \"values\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<string> Values { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne.Values"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'AnnotatedCodeLocationVersionOneEqualityComparer.Equals(AnnotatedCodeLocationVersionOne, AnnotatedCodeLocationVersionOne)' has a cyclomatic complexity of 47. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 846,
                  "charLength": 161,
                  "snippet": {
                    "text": "        public bool Equals(AnnotatedCodeLocationVersionOne left, AnnotatedCodeLocationVersionOne right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'AnnotatedCodeLocationVersionOneEqualityComparer.GetHashCode(AnnotatedCodeLocationVersionOne)' has a cyclomatic complexity of 26. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 196,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 195,
                  "startColumn": 1,
                  "endLine": 197,
                  "endColumn": 44,
                  "charOffset": 5911,
                  "charLength": 123,
                  "snippet": {
                    "text": "        public int GetHashCode(AnnotatedCodeLocationVersionOne obj)\r\n        {\r\n            if (ReferenceEquals(obj, null))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOneEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'AnnotationVersionOne.Locations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/AnnotationVersionOne.cs"
                },
                "region": {
                  "startLine": 41,
                  "snippet": {
                    "text": "        public IList<PhysicalLocationVersionOne> Locations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 1,
                  "charOffset": 1493,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"locations\", IsRequired = true)]\r\n        public IList<PhysicalLocationVersionOne> Locations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOne.Locations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'CodeFlowVersionOne.CodeFlowVersionOne(CodeFlowVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nCodeFlowVersionOne..ctor(CodeFlowVersionOne)\r\nCodeFlowVersionOne.Init(String, IEnumerable<AnnotatedCodeLocationVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/CodeFlowVersionOne.cs"
                },
                "region": {
                  "startLine": 83,
                  "snippet": {
                    "text": "        public CodeFlowVersionOne(CodeFlowVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "endLine": 84,
                  "endColumn": 10,
                  "charOffset": 3537,
                  "charLength": 96,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public CodeFlowVersionOne(CodeFlowVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'CodeFlowVersionOne.CodeFlowVersionOne(string, IEnumerable<AnnotatedCodeLocationVersionOne>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nCodeFlowVersionOne..ctor(String, IEnumerable<AnnotatedCodeLocationVersionOne>, IDictionary<String,SerializedPropertyInfo>)\r\nCodeFlowVersionOne.Init(String, IEnumerable<AnnotatedCodeLocationVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/CodeFlowVersionOne.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public CodeFlowVersionOne(string message, IEnumerable<AnnotatedCodeLocationVersionOne> locations, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 10,
                  "charOffset": 2870,
                  "charLength": 194,
                  "snippet": {
                    "text": "        /// </param>\r\n        public CodeFlowVersionOne(string message, IEnumerable<AnnotatedCodeLocationVersionOne> locations, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne..ctor(System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'CodeFlowVersionOne.Locations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/CodeFlowVersionOne.cs"
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "        public IList<AnnotatedCodeLocationVersionOne> Locations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 1,
                  "charOffset": 1647,
                  "charLength": 140,
                  "snippet": {
                    "text": "        [DataMember(Name = \"locations\", IsRequired = true)]\r\n        public IList<AnnotatedCodeLocationVersionOne> Locations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne.Locations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ExceptionDataVersionOne.InnerExceptions' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ExceptionDataVersionOne.cs"
                },
                "region": {
                  "startLine": 53,
                  "snippet": {
                    "text": "        public IList<ExceptionDataVersionOne> InnerExceptions { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 1,
                  "charOffset": 2147,
                  "charLength": 171,
                  "snippet": {
                    "text": "        [DataMember(Name = \"innerExceptions\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<ExceptionDataVersionOne> InnerExceptions { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOne.InnerExceptions"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1054",
          "level": "error",
          "message": {
            "text": "Change the type of parameter 'uriBaseId' of method 'FileChangeVersionOne.FileChangeVersionOne(Uri, string, IEnumerable<ReplacementVersionOne>)' from string to System.Uri, or provide an overload of 'FileChangeVersionOne.FileChangeVersionOne(Uri, string, IEnumerable<ReplacementVersionOne>)', that allows 'uriBaseId' to be passed as a System.Uri object."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileChangeVersionOne.cs"
                },
                "region": {
                  "startLine": 71,
                  "snippet": {
                    "text": "        public FileChangeVersionOne(Uri uri, string uriBaseId, IEnumerable<ReplacementVersionOne> replacements)"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 10,
                  "charOffset": 2887,
                  "charLength": 144,
                  "snippet": {
                    "text": "        /// </param>\r\n        public FileChangeVersionOne(Uri uri, string uriBaseId, IEnumerable<ReplacementVersionOne> replacements)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne..ctor(System.Uri,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.ReplacementVersionOne>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1#"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'FileChangeVersionOne.Replacements' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileChangeVersionOne.cs"
                },
                "region": {
                  "startLine": 50,
                  "snippet": {
                    "text": "        public IList<ReplacementVersionOne> Replacements { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 1,
                  "charOffset": 1986,
                  "charLength": 136,
                  "snippet": {
                    "text": "        [DataMember(Name = \"replacements\", IsRequired = true)]\r\n        public IList<ReplacementVersionOne> Replacements { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne.Replacements"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1056",
          "level": "error",
          "message": {
            "text": "Change the type of property 'FileChangeVersionOne.UriBaseId' from string to System.Uri."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileChangeVersionOne.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "        public string UriBaseId { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1651,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"uriBaseId\", IsRequired = false, EmitDefaultValue = false)]\r\n        public string UriBaseId { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne.UriBaseId"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'FileDataVersionOne.FileDataVersionOne(FileDataVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nFileDataVersionOne..ctor(FileDataVersionOne)\r\nFileDataVersionOne.Init(Uri, String, String, Int32, Int32, String, String, IEnumerable<HashVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileDataVersionOne.cs"
                },
                "region": {
                  "startLine": 140,
                  "snippet": {
                    "text": "        public FileDataVersionOne(FileDataVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 10,
                  "charOffset": 6179,
                  "charLength": 96,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public FileDataVersionOne(FileDataVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'FileDataVersionOne.FileDataVersionOne(Uri, string, string, int, int, string, string, IEnumerable<HashVersionOne>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nFileDataVersionOne..ctor(Uri, String, String, Int32, Int32, String, String, IEnumerable<HashVersionOne>, IDictionary<String,SerializedPropertyInfo>)\r\nFileDataVersionOne.Init(Uri, String, String, Int32, Int32, String, String, IEnumerable<HashVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileDataVersionOne.cs"
                },
                "region": {
                  "startLine": 126,
                  "snippet": {
                    "text": "        public FileDataVersionOne(Uri uri, string uriBaseId, string parentKey, int offset, int length, string mimeType, string contents, IEnumerable<HashVersionOne> hashes, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 10,
                  "charOffset": 5394,
                  "charLength": 261,
                  "snippet": {
                    "text": "        /// </param>\r\n        public FileDataVersionOne(Uri uri, string uriBaseId, string parentKey, int offset, int length, string mimeType, string contents, IEnumerable<HashVersionOne> hashes, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne..ctor(System.Uri,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1054",
          "level": "error",
          "message": {
            "text": "Change the type of parameter 'uriBaseId' of method 'FileDataVersionOne.FileDataVersionOne(Uri, string, string, int, int, string, string, IEnumerable<HashVersionOne>, IDictionary<string, SerializedPropertyInfo>)' from string to System.Uri, or provide an overload of 'FileDataVersionOne.FileDataVersionOne(Uri, string, string, int, int, string, string, IEnumerable<HashVersionOne>, IDictionary<string, SerializedPropertyInfo>)', that allows 'uriBaseId' to be passed as a System.Uri object."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileDataVersionOne.cs"
                },
                "region": {
                  "startLine": 126,
                  "snippet": {
                    "text": "        public FileDataVersionOne(Uri uri, string uriBaseId, string parentKey, int offset, int length, string mimeType, string contents, IEnumerable<HashVersionOne> hashes, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 10,
                  "charOffset": 5394,
                  "charLength": 261,
                  "snippet": {
                    "text": "        /// </param>\r\n        public FileDataVersionOne(Uri uri, string uriBaseId, string parentKey, int offset, int length, string mimeType, string contents, IEnumerable<HashVersionOne> hashes, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne..ctor(System.Uri,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1#"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'FileDataVersionOne.Hashes' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileDataVersionOne.cs"
                },
                "region": {
                  "startLine": 81,
                  "snippet": {
                    "text": "        public IList<HashVersionOne> Hashes { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 1,
                  "charOffset": 3344,
                  "charLength": 144,
                  "snippet": {
                    "text": "        [DataMember(Name = \"hashes\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<HashVersionOne> Hashes { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne.Hashes"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1056",
          "level": "error",
          "message": {
            "text": "Change the type of property 'FileDataVersionOne.UriBaseId' from string to System.Uri."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FileDataVersionOne.cs"
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "        public string UriBaseId { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1755,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"uriBaseId\", IsRequired = false, EmitDefaultValue = false)]\r\n        public string UriBaseId { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne.UriBaseId"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'FixVersionOne.FileChanges' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FixVersionOne.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "        public IList<FileChangeVersionOne> FileChanges { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1802,
                  "charLength": 133,
                  "snippet": {
                    "text": "        [DataMember(Name = \"fileChanges\", IsRequired = true)]\r\n        public IList<FileChangeVersionOne> FileChanges { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOne.FileChanges"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'FormattedRuleMessageVersionOne.Arguments' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/FormattedRuleMessageVersionOne.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "        public IList<string> Arguments { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 2004,
                  "charLength": 142,
                  "snippet": {
                    "text": "        [DataMember(Name = \"arguments\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<string> Arguments { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOne.Arguments"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'InvocationVersionOne.InvocationVersionOne(InvocationVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nInvocationVersionOne..ctor(InvocationVersionOne)\r\nInvocationVersionOne.Init(String, IDictionary<String,String>, DateTime, DateTime, String, String, Int32, String, String, IDictionary<String,String>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/InvocationVersionOne.cs"
                },
                "region": {
                  "startLine": 158,
                  "snippet": {
                    "text": "        public InvocationVersionOne(InvocationVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "endLine": 159,
                  "endColumn": 10,
                  "charOffset": 7242,
                  "charLength": 100,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public InvocationVersionOne(InvocationVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'InvocationVersionOne.InvocationVersionOne(string, IDictionary<string, string>, DateTime, DateTime, string, string, int, string, string, IDictionary<string, string>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nInvocationVersionOne..ctor(String, IDictionary<String,String>, DateTime, DateTime, String, String, Int32, String, String, IDictionary<String,String>, IDictionary<String,SerializedPropertyInfo>)\r\nInvocationVersionOne.Init(String, IDictionary<String,String>, DateTime, DateTime, String, String, Int32, String, String, IDictionary<String,String>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/InvocationVersionOne.cs"
                },
                "region": {
                  "startLine": 144,
                  "snippet": {
                    "text": "        public InvocationVersionOne(string commandLine, IDictionary<string, string> responseFiles, DateTime startTime, DateTime endTime, string machine, string account, int processId, string fileName, string workingDirectory, IDictionary<string, string> environmentVariables, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "endLine": 145,
                  "endColumn": 10,
                  "charOffset": 6296,
                  "charLength": 364,
                  "snippet": {
                    "text": "        /// </param>\r\n        public InvocationVersionOne(string commandLine, IDictionary<string, string> responseFiles, DateTime startTime, DateTime endTime, string machine, string account, int processId, string fileName, string workingDirectory, IDictionary<string, string> environmentVariables, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne..ctor(System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.DateTime,System.DateTime,System.String,System.String,System.Int32,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'InvocationVersionOne.EnvironmentVariables' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/InvocationVersionOne.cs"
                },
                "region": {
                  "startLine": 93,
                  "snippet": {
                    "text": "        public IDictionary<string, string> EnvironmentVariables { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 1,
                  "charOffset": 3853,
                  "charLength": 178,
                  "snippet": {
                    "text": "        [DataMember(Name = \"environmentVariables\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> EnvironmentVariables { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne.EnvironmentVariables"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'InvocationVersionOne.ResponseFiles' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/InvocationVersionOne.cs"
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "        public IDictionary<string, string> ResponseFiles { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1696,
                  "charLength": 164,
                  "snippet": {
                    "text": "        [DataMember(Name = \"responseFiles\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> ResponseFiles { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne.ResponseFiles"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'InvocationVersionOneEqualityComparer.Equals(InvocationVersionOne, InvocationVersionOne)' has a cyclomatic complexity of 36. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/InvocationVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 791,
                  "charLength": 139,
                  "snippet": {
                    "text": "        public bool Equals(InvocationVersionOne left, InvocationVersionOne right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1040",
          "level": "warning",
          "message": {
            "text": "Define a custom attribute to replace 'IRuleVersionOne'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.IRuleVersionOne"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'ISarifNodeVersionOne'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'ISarifNodeVersionOne.SarifNodeKindVersionOne' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.SarifNodeKindVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'LocationVersionOne.LocationVersionOne(LocationVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nLocationVersionOne..ctor(LocationVersionOne)\r\nLocationVersionOne.Init(PhysicalLocationVersionOne, PhysicalLocationVersionOne, String, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/LocationVersionOne.cs"
                },
                "region": {
                  "startLine": 113,
                  "snippet": {
                    "text": "        public LocationVersionOne(LocationVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 10,
                  "charOffset": 5726,
                  "charLength": 96,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public LocationVersionOne(LocationVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'LocationVersionOne.LocationVersionOne(PhysicalLocationVersionOne, PhysicalLocationVersionOne, string, string, string, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nLocationVersionOne..ctor(PhysicalLocationVersionOne, PhysicalLocationVersionOne, String, String, String, IDictionary<String,SerializedPropertyInfo>)\r\nLocationVersionOne.Init(PhysicalLocationVersionOne, PhysicalLocationVersionOne, String, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/LocationVersionOne.cs"
                },
                "region": {
                  "startLine": 99,
                  "snippet": {
                    "text": "        public LocationVersionOne(PhysicalLocationVersionOne analysisTarget, PhysicalLocationVersionOne resultFile, string fullyQualifiedLogicalName, string logicalLocationKey, string decoratedName, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 10,
                  "charOffset": 4896,
                  "charLength": 287,
                  "snippet": {
                    "text": "        /// </param>\r\n        public LocationVersionOne(PhysicalLocationVersionOne analysisTarget, PhysicalLocationVersionOne resultFile, string fullyQualifiedLogicalName, string logicalLocationKey, string decoratedName, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'NotificationVersionOne.NotificationVersionOne(NotificationVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nNotificationVersionOne..ctor(NotificationVersionOne)\r\nNotificationVersionOne.Init(String, String, String, PhysicalLocationVersionOne, String, NotificationLevelVersionOne, Int32, DateTime, ExceptionDataVersionOne, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/NotificationVersionOne.cs"
                },
                "region": {
                  "startLine": 149,
                  "snippet": {
                    "text": "        public NotificationVersionOne(NotificationVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "endLine": 150,
                  "endColumn": 10,
                  "charOffset": 6848,
                  "charLength": 104,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public NotificationVersionOne(NotificationVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'NotificationVersionOne.NotificationVersionOne(string, string, string, PhysicalLocationVersionOne, string, NotificationLevelVersionOne, int, DateTime, ExceptionDataVersionOne, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nNotificationVersionOne..ctor(String, String, String, PhysicalLocationVersionOne, String, NotificationLevelVersionOne, Int32, DateTime, ExceptionDataVersionOne, IDictionary<String,SerializedPropertyInfo>)\r\nNotificationVersionOne.Init(String, String, String, PhysicalLocationVersionOne, String, NotificationLevelVersionOne, Int32, DateTime, ExceptionDataVersionOne, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/NotificationVersionOne.cs"
                },
                "region": {
                  "startLine": 135,
                  "snippet": {
                    "text": "        public NotificationVersionOne(string id, string ruleId, string ruleKey, PhysicalLocationVersionOne physicalLocation, string message, NotificationLevelVersionOne level, int threadId, DateTime time, ExceptionDataVersionOne exception, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 136,
                  "endColumn": 10,
                  "charOffset": 5981,
                  "charLength": 328,
                  "snippet": {
                    "text": "        /// </param>\r\n        public NotificationVersionOne(string id, string ruleId, string ruleKey, PhysicalLocationVersionOne physicalLocation, string message, NotificationLevelVersionOne level, int threadId, DateTime time, ExceptionDataVersionOne exception, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne..ctor(System.String,System.String,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationLevelVersionOne,System.Int32,System.DateTime,Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOne,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1054",
          "level": "error",
          "message": {
            "text": "Change the type of parameter 'uriBaseId' of method 'PhysicalLocationVersionOne.PhysicalLocationVersionOne(Uri, string, RegionVersionOne)' from string to System.Uri, or provide an overload of 'PhysicalLocationVersionOne.PhysicalLocationVersionOne(Uri, string, RegionVersionOne)', that allows 'uriBaseId' to be passed as a System.Uri object."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/PhysicalLocationVersionOne.cs"
                },
                "region": {
                  "startLine": 71,
                  "snippet": {
                    "text": "        public PhysicalLocationVersionOne(Uri uri, string uriBaseId, RegionVersionOne region)"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 10,
                  "charOffset": 2968,
                  "charLength": 126,
                  "snippet": {
                    "text": "        /// </param>\r\n        public PhysicalLocationVersionOne(Uri uri, string uriBaseId, RegionVersionOne region)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne..ctor(System.Uri,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.RegionVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1#"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1056",
          "level": "error",
          "message": {
            "text": "Change the type of property 'PhysicalLocationVersionOne.UriBaseId' from string to System.Uri."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/PhysicalLocationVersionOne.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "        public string UriBaseId { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 1,
                  "charOffset": 1803,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"uriBaseId\", IsRequired = false, EmitDefaultValue = false)]\r\n        public string UriBaseId { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne.UriBaseId"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ResultVersionOne.ResultVersionOne(ResultVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nResultVersionOne..ctor(ResultVersionOne)\r\nResultVersionOne.Init(String, String, ResultLevelVersionOne, String, FormattedRuleMessageVersionOne, IEnumerable<LocationVersionOne>, String, String, String, IEnumerable<StackVersionOne>, IEnumerable<CodeFlowVersionOne>, IEnumerable<AnnotatedCodeLocationVersionOne>, SuppressionStatesVersionOne, BaselineStateVersionOne, IEnumerable<FixVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs"
                },
                "region": {
                  "startLine": 199,
                  "snippet": {
                    "text": "        public ResultVersionOne(ResultVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "endLine": 200,
                  "endColumn": 10,
                  "charOffset": 10264,
                  "charLength": 92,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public ResultVersionOne(ResultVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ResultVersionOne.ResultVersionOne(string, string, ResultLevelVersionOne, string, FormattedRuleMessageVersionOne, IEnumerable<LocationVersionOne>, string, string, string, IEnumerable<StackVersionOne>, IEnumerable<CodeFlowVersionOne>, IEnumerable<AnnotatedCodeLocationVersionOne>, SuppressionStatesVersionOne, BaselineStateVersionOne, IEnumerable<FixVersionOne>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nResultVersionOne..ctor(String, String, ResultLevelVersionOne, String, FormattedRuleMessageVersionOne, IEnumerable<LocationVersionOne>, String, String, String, IEnumerable<StackVersionOne>, IEnumerable<CodeFlowVersionOne>, IEnumerable<AnnotatedCodeLocationVersionOne>, SuppressionStatesVersionOne, BaselineStateVersionOne, IEnumerable<FixVersionOne>, IDictionary<String,SerializedPropertyInfo>)\r\nResultVersionOne.Init(String, String, ResultLevelVersionOne, String, FormattedRuleMessageVersionOne, IEnumerable<LocationVersionOne>, String, String, String, IEnumerable<StackVersionOne>, IEnumerable<CodeFlowVersionOne>, IEnumerable<AnnotatedCodeLocationVersionOne>, SuppressionStatesVersionOne, BaselineStateVersionOne, IEnumerable<FixVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs"
                },
                "region": {
                  "startLine": 185,
                  "snippet": {
                    "text": "        public ResultVersionOne(string ruleId, string ruleKey, ResultLevelVersionOne level, string message, FormattedRuleMessageVersionOne formattedRuleMessage, IEnumerable<LocationVersionOne> locations, string snippet, string id, string toolFingerprintContribution, IEnumerable<StackVersionOne> stacks, IEnumerable<CodeFlowVersionOne> codeFlows, IEnumerable<AnnotatedCodeLocationVersionOne> relatedLocations, SuppressionStatesVersionOne suppressionStates, BaselineStateVersionOne baselineState, IEnumerable<FixVersionOne> fixes, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "endLine": 186,
                  "endColumn": 10,
                  "charOffset": 9009,
                  "charLength": 618,
                  "snippet": {
                    "text": "        /// </param>\r\n        public ResultVersionOne(string ruleId, string ruleKey, ResultLevelVersionOne level, string message, FormattedRuleMessageVersionOne formattedRuleMessage, IEnumerable<LocationVersionOne> locations, string snippet, string id, string toolFingerprintContribution, IEnumerable<StackVersionOne> stacks, IEnumerable<CodeFlowVersionOne> codeFlows, IEnumerable<AnnotatedCodeLocationVersionOne> relatedLocations, SuppressionStatesVersionOne suppressionStates, BaselineStateVersionOne baselineState, IEnumerable<FixVersionOne> fixes, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne..ctor(System.String,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne,System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOne,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne>,System.String,System.String,System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne>,Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.BaselineStateVersionOne,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ResultVersionOne.CodeFlows' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs"
                },
                "region": {
                  "startLine": 99,
                  "snippet": {
                    "text": "        public IList<CodeFlowVersionOne> CodeFlows { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 1,
                  "charOffset": 4751,
                  "charLength": 154,
                  "snippet": {
                    "text": "        [DataMember(Name = \"codeFlows\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<CodeFlowVersionOne> CodeFlows { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.CodeFlows"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ResultVersionOne.Fixes' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs"
                },
                "region": {
                  "startLine": 119,
                  "snippet": {
                    "text": "        public IList<FixVersionOne> Fixes { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "endLine": 120,
                  "endColumn": 1,
                  "charOffset": 5889,
                  "charLength": 141,
                  "snippet": {
                    "text": "        [DataMember(Name = \"fixes\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<FixVersionOne> Fixes { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.Fixes"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ResultVersionOne.Locations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public IList<LocationVersionOne> Locations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 1,
                  "charOffset": 3447,
                  "charLength": 154,
                  "snippet": {
                    "text": "        [DataMember(Name = \"locations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<LocationVersionOne> Locations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.Locations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ResultVersionOne.RelatedLocations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs"
                },
                "region": {
                  "startLine": 105,
                  "snippet": {
                    "text": "        public IList<AnnotatedCodeLocationVersionOne> RelatedLocations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 95,
                  "charOffset": 5081,
                  "charLength": 275,
                  "snippet": {
                    "text": "        [DataMember(Name = \"relatedLocations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<AnnotatedCodeLocationVersionOne> RelatedLocations { get; set; }\r\n        [DataMember(Name = \"suppressionStates\", IsRequired = false, EmitDefaultValue = false)]"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.RelatedLocations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'ResultVersionOne.Stacks' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs"
                },
                "region": {
                  "startLine": 93,
                  "snippet": {
                    "text": "        public IList<StackVersionOne> Stacks { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 1,
                  "charOffset": 4489,
                  "charLength": 145,
                  "snippet": {
                    "text": "        [DataMember(Name = \"stacks\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<StackVersionOne> Stacks { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne.Stacks"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'ResultVersionOneEqualityComparer.Equals(ResultVersionOne, ResultVersionOne)' has a cyclomatic complexity of 52. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 771,
                  "charLength": 131,
                  "snippet": {
                    "text": "        public bool Equals(ResultVersionOne left, ResultVersionOne right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'ResultVersionOneEqualityComparer.GetHashCode(ResultVersionOne)' has a cyclomatic complexity of 33. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ResultVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 212,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "endLine": 213,
                  "endColumn": 44,
                  "charOffset": 6772,
                  "charLength": 108,
                  "snippet": {
                    "text": "        public int GetHashCode(ResultVersionOne obj)\r\n        {\r\n            if (ReferenceEquals(obj, null))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOneEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'RuleVersionOne.RuleVersionOne(RuleVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nRuleVersionOne..ctor(RuleVersionOne)\r\nRuleVersionOne.Init(String, String, String, String, IDictionary<String,String>, reportingConfigurationVersionOne, ResultLevelVersionOne, Uri, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolderVersionOne.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RuleVersionOne.cs"
                },
                "region": {
                  "startLine": 140,
                  "snippet": {
                    "text": "        public RuleVersionOne(RuleVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 10,
                  "charOffset": 6562,
                  "charLength": 88,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public RuleVersionOne(RuleVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'RuleVersionOne.RuleVersionOne(string, string, string, string, IDictionary<string, string>, reportingConfigurationVersionOne, ResultLevelVersionOne, Uri, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nRuleVersionOne..ctor(String, String, String, String, IDictionary<String,String>, reportingConfigurationVersionOne, ResultLevelVersionOne, Uri, IDictionary<String,SerializedPropertyInfo>)\r\nRuleVersionOne.Init(String, String, String, String, IDictionary<String,String>, reportingConfigurationVersionOne, ResultLevelVersionOne, Uri, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolderVersionOne.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RuleVersionOne.cs"
                },
                "region": {
                  "startLine": 126,
                  "snippet": {
                    "text": "        public RuleVersionOne(string id, string name, string shortDescription, string fullDescription, IDictionary<string, string> messageFormats, reportingConfigurationVersionOne configuration, ResultLevelVersionOne defaultLevel, Uri helpUri, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 10,
                  "charOffset": 5687,
                  "charLength": 327,
                  "snippet": {
                    "text": "        /// </param>\r\n        public RuleVersionOne(string id, string name, string shortDescription, string fullDescription, IDictionary<string, string> messageFormats, reportingConfigurationVersionOne configuration, ResultLevelVersionOne defaultLevel, Uri helpUri, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne..ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,System.String>,Microsoft.CodeAnalysis.Sarif.VersionOne.reportingConfigurationVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne,System.Uri,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'RuleVersionOne.MessageFormats' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RuleVersionOne.cs"
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "        public IDictionary<string, string> MessageFormats { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 1,
                  "charOffset": 2765,
                  "charLength": 166,
                  "snippet": {
                    "text": "        [DataMember(Name = \"messageFormats\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, string> MessageFormats { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne.MessageFormats"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'RuleVersionOneEqualityComparer.Equals(RuleVersionOne, RuleVersionOne)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RuleVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 761,
                  "charLength": 127,
                  "snippet": {
                    "text": "        public bool Equals(RuleVersionOne left, RuleVersionOne right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'RunVersionOne.RunVersionOne(RunVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nRunVersionOne..ctor(RunVersionOne)\r\nRunVersionOne.Init(ToolVersionOne, InvocationVersionOne, IDictionary<String,FileDataVersionOne>, IDictionary<String,LogicalLocationVersionOne>, IEnumerable<ResultVersionOne>, IEnumerable<NotificationVersionOne>, IEnumerable<NotificationVersionOne>, IDictionary<String,RuleVersionOne>, String, String, String, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs"
                },
                "region": {
                  "startLine": 185,
                  "snippet": {
                    "text": "        public RunVersionOne(RunVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "endLine": 186,
                  "endColumn": 10,
                  "charOffset": 9697,
                  "charLength": 86,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public RunVersionOne(RunVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'RunVersionOne.RunVersionOne(ToolVersionOne, InvocationVersionOne, IDictionary<string, FileDataVersionOne>, IDictionary<string, LogicalLocationVersionOne>, IEnumerable<ResultVersionOne>, IEnumerable<NotificationVersionOne>, IEnumerable<NotificationVersionOne>, IDictionary<string, RuleVersionOne>, string, string, string, string, string, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nRunVersionOne..ctor(ToolVersionOne, InvocationVersionOne, IDictionary<String,FileDataVersionOne>, IDictionary<String,LogicalLocationVersionOne>, IEnumerable<ResultVersionOne>, IEnumerable<NotificationVersionOne>, IEnumerable<NotificationVersionOne>, IDictionary<String,RuleVersionOne>, String, String, String, String, String, IDictionary<String,SerializedPropertyInfo>)\r\nRunVersionOne.Init(ToolVersionOne, InvocationVersionOne, IDictionary<String,FileDataVersionOne>, IDictionary<String,LogicalLocationVersionOne>, IEnumerable<ResultVersionOne>, IEnumerable<NotificationVersionOne>, IEnumerable<NotificationVersionOne>, IDictionary<String,RuleVersionOne>, String, String, String, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs"
                },
                "region": {
                  "startLine": 171,
                  "snippet": {
                    "text": "        public RunVersionOne(ToolVersionOne tool, InvocationVersionOne invocation, IDictionary<string, FileDataVersionOne> files, IDictionary<string, LogicalLocationVersionOne> logicalLocations, IEnumerable<ResultVersionOne> results, IEnumerable<NotificationVersionOne> toolNotifications, IEnumerable<NotificationVersionOne> configurationNotifications, IDictionary<string, RuleVersionOne> rules, string id, string stableId, string automationId, string baselineId, string architecture, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "endLine": 172,
                  "endColumn": 10,
                  "charOffset": 8516,
                  "charLength": 573,
                  "snippet": {
                    "text": "        /// </param>\r\n        public RunVersionOne(ToolVersionOne tool, InvocationVersionOne invocation, IDictionary<string, FileDataVersionOne> files, IDictionary<string, LogicalLocationVersionOne> logicalLocations, IEnumerable<ResultVersionOne> results, IEnumerable<NotificationVersionOne> toolNotifications, IEnumerable<NotificationVersionOne> configurationNotifications, IDictionary<string, RuleVersionOne> rules, string id, string stableId, string automationId, string baselineId, string architecture, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.LogicalLocationVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne>,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne>,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'RunVersionOne.ConfigurationNotifications' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs"
                },
                "region": {
                  "startLine": 75,
                  "snippet": {
                    "text": "        public IList<NotificationVersionOne> ConfigurationNotifications { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 1,
                  "charOffset": 3751,
                  "charLength": 192,
                  "snippet": {
                    "text": "        [DataMember(Name = \"configurationNotifications\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<NotificationVersionOne> ConfigurationNotifications { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.ConfigurationNotifications"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'RunVersionOne.Files' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        public IDictionary<string, FileDataVersionOne> Files { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 1,
                  "charOffset": 2341,
                  "charLength": 160,
                  "snippet": {
                    "text": "        [DataMember(Name = \"files\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, FileDataVersionOne> Files { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.Files"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'RunVersionOne.LogicalLocations' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        public IDictionary<string, LogicalLocationVersionOne> LogicalLocations { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 1,
                  "charOffset": 2664,
                  "charLength": 189,
                  "snippet": {
                    "text": "        [DataMember(Name = \"logicalLocations\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, LogicalLocationVersionOne> LogicalLocations { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.LogicalLocations"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'RunVersionOne.Results' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs"
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "        public IList<ResultVersionOne> Results { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 1,
                  "charOffset": 3135,
                  "charLength": 148,
                  "snippet": {
                    "text": "        [DataMember(Name = \"results\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<ResultVersionOne> Results { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.Results"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'RunVersionOne.Rules' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs"
                },
                "region": {
                  "startLine": 81,
                  "snippet": {
                    "text": "        public IDictionary<string, RuleVersionOne> Rules { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 1,
                  "charOffset": 4191,
                  "charLength": 156,
                  "snippet": {
                    "text": "        [DataMember(Name = \"rules\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IDictionary<string, RuleVersionOne> Rules { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.Rules"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'RunVersionOne.ToolNotifications' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public IList<NotificationVersionOne> ToolNotifications { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 1,
                  "charOffset": 3426,
                  "charLength": 174,
                  "snippet": {
                    "text": "        [DataMember(Name = \"toolNotifications\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<NotificationVersionOne> ToolNotifications { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne.ToolNotifications"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'RunVersionOneEqualityComparer.Equals(RunVersionOne, RunVersionOne)' has a cyclomatic complexity of 61. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 756,
                  "charLength": 125,
                  "snippet": {
                    "text": "        public bool Equals(RunVersionOne left, RunVersionOne right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'RunVersionOneEqualityComparer.GetHashCode(RunVersionOne)' has a cyclomatic complexity of 37. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/RunVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 221,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "endLine": 222,
                  "endColumn": 44,
                  "charOffset": 7519,
                  "charLength": 105,
                  "snippet": {
                    "text": "        public int GetHashCode(RunVersionOne obj)\r\n        {\r\n            if (ReferenceEquals(obj, null))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOneEqualityComparer.GetHashCode(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLogVersionOne'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'SarifLogVersionOne.Runs' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/SarifLogVersionOne.cs"
                },
                "region": {
                  "startLine": 50,
                  "snippet": {
                    "text": "        public IList<RunVersionOne> Runs { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 1,
                  "charOffset": 1909,
                  "charLength": 112,
                  "snippet": {
                    "text": "        [DataMember(Name = \"runs\", IsRequired = true)]\r\n        public IList<RunVersionOne> Runs { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne.Runs"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifNodeKindVersionOne'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifNodeKindVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifNodeKindVersionOne.SarifLogVersionOne' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifNodeKindVersionOne.SarifLogVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifRewritingVisitorVersionOne'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifRewritingVisitorVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifRewritingVisitorVersionOne.VisitSarifLogVersionOne(SarifLogVersionOne)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/SarifRewritingVisitorVersionOne.cs"
                },
                "region": {
                  "startLine": 442,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 441,
                  "startColumn": 1,
                  "endLine": 443,
                  "endColumn": 30,
                  "charOffset": 16214,
                  "charLength": 132,
                  "snippet": {
                    "text": "        public virtual SarifLogVersionOne VisitSarifLogVersionOne(SarifLogVersionOne node)\r\n        {\r\n            if (node != null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifRewritingVisitorVersionOne.VisitSarifLogVersionOne(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifVersionVersionOne'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'StackFrameVersionOne.StackFrameVersionOne(StackFrameVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nStackFrameVersionOne..ctor(StackFrameVersionOne)\r\nStackFrameVersionOne.Init(String, Uri, String, Int32, Int32, String, Int32, String, String, Int32, Int32, IEnumerable<String>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOne.cs"
                },
                "region": {
                  "startLine": 176,
                  "snippet": {
                    "text": "        public StackFrameVersionOne(StackFrameVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "endLine": 177,
                  "endColumn": 10,
                  "charOffset": 7921,
                  "charLength": 100,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public StackFrameVersionOne(StackFrameVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'StackFrameVersionOne.StackFrameVersionOne(string, Uri, string, int, int, string, int, string, string, int, int, IEnumerable<string>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nStackFrameVersionOne..ctor(String, Uri, String, Int32, Int32, String, Int32, String, String, Int32, Int32, IEnumerable<String>, IDictionary<String,SerializedPropertyInfo>)\r\nStackFrameVersionOne.Init(String, Uri, String, Int32, Int32, String, Int32, String, String, Int32, Int32, IEnumerable<String>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOne.cs"
                },
                "region": {
                  "startLine": 162,
                  "snippet": {
                    "text": "        public StackFrameVersionOne(string message, Uri uri, string uriBaseId, int line, int column, string module, int threadId, string fullyQualifiedLogicalName, string logicalLocationKey, int address, int offset, IEnumerable<string> parameters, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "endLine": 163,
                  "endColumn": 10,
                  "charOffset": 6997,
                  "charLength": 336,
                  "snippet": {
                    "text": "        /// </param>\r\n        public StackFrameVersionOne(string message, Uri uri, string uriBaseId, int line, int column, string module, int threadId, string fullyQualifiedLogicalName, string logicalLocationKey, int address, int offset, IEnumerable<string> parameters, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne..ctor(System.String,System.Uri,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1054",
          "level": "error",
          "message": {
            "text": "Change the type of parameter 'uriBaseId' of method 'StackFrameVersionOne.StackFrameVersionOne(string, Uri, string, int, int, string, int, string, string, int, int, IEnumerable<string>, IDictionary<string, SerializedPropertyInfo>)' from string to System.Uri, or provide an overload of 'StackFrameVersionOne.StackFrameVersionOne(string, Uri, string, int, int, string, int, string, string, int, int, IEnumerable<string>, IDictionary<string, SerializedPropertyInfo>)', that allows 'uriBaseId' to be passed as a System.Uri object."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOne.cs"
                },
                "region": {
                  "startLine": 162,
                  "snippet": {
                    "text": "        public StackFrameVersionOne(string message, Uri uri, string uriBaseId, int line, int column, string module, int threadId, string fullyQualifiedLogicalName, string logicalLocationKey, int address, int offset, IEnumerable<string> parameters, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "endLine": 163,
                  "endColumn": 10,
                  "charOffset": 6997,
                  "charLength": 336,
                  "snippet": {
                    "text": "        /// </param>\r\n        public StackFrameVersionOne(string message, Uri uri, string uriBaseId, int line, int column, string module, int threadId, string fullyQualifiedLogicalName, string logicalLocationKey, int address, int offset, IEnumerable<string> parameters, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne..ctor(System.String,System.Uri,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "2#"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'StackFrameVersionOne.Parameters' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOne.cs"
                },
                "region": {
                  "startLine": 105,
                  "snippet": {
                    "text": "        public IList<string> Parameters { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 1,
                  "charOffset": 4326,
                  "charLength": 144,
                  "snippet": {
                    "text": "        [DataMember(Name = \"parameters\", IsRequired = false, EmitDefaultValue = false)]\r\n        public IList<string> Parameters { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne.Parameters"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1056",
          "level": "error",
          "message": {
            "text": "Change the type of property 'StackFrameVersionOne.UriBaseId' from string to System.Uri."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOne.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        public string UriBaseId { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 1,
                  "charOffset": 1976,
                  "charLength": 135,
                  "snippet": {
                    "text": "        [DataMember(Name = \"uriBaseId\", IsRequired = false, EmitDefaultValue = false)]\r\n        public string UriBaseId { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne.UriBaseId"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'StackFrameVersionOneEqualityComparer.Equals(StackFrameVersionOne, StackFrameVersionOne)' has a cyclomatic complexity of 29. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOneEqualityComparer.cs"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 46,
                  "charOffset": 791,
                  "charLength": 139,
                  "snippet": {
                    "text": "        public bool Equals(StackFrameVersionOne left, StackFrameVersionOne right)\r\n        {\r\n            if (ReferenceEquals(left, right))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOneEqualityComparer.Equals(Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne,Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'StackVersionOne.StackVersionOne(StackVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nStackVersionOne..ctor(StackVersionOne)\r\nStackVersionOne.Init(String, IEnumerable<StackFrameVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackVersionOne.cs"
                },
                "region": {
                  "startLine": 86,
                  "snippet": {
                    "text": "        public StackVersionOne(StackVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 10,
                  "charOffset": 3543,
                  "charLength": 90,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public StackVersionOne(StackVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'StackVersionOne.StackVersionOne(string, IEnumerable<StackFrameVersionOne>, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nStackVersionOne..ctor(String, IEnumerable<StackFrameVersionOne>, IDictionary<String,SerializedPropertyInfo>)\r\nStackVersionOne.Init(String, IEnumerable<StackFrameVersionOne>, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackVersionOne.cs"
                },
                "region": {
                  "startLine": 72,
                  "snippet": {
                    "text": "        public StackVersionOne(string message, IEnumerable<StackFrameVersionOne> frames, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 10,
                  "charOffset": 2899,
                  "charLength": 177,
                  "snippet": {
                    "text": "        /// </param>\r\n        public StackVersionOne(string message, IEnumerable<StackFrameVersionOne> frames, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne..ctor(System.String,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne>,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'StackVersionOne.Frames' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/StackVersionOne.cs"
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "        public IList<StackFrameVersionOne> Frames { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 1,
                  "charOffset": 1712,
                  "charLength": 123,
                  "snippet": {
                    "text": "        [DataMember(Name = \"frames\", IsRequired = true)]\r\n        public IList<StackFrameVersionOne> Frames { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne.Frames"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1714",
          "level": "error",
          "message": {
            "text": "If enumeration name 'SuppressionStatesVersionOne' is singular, change it to a plural form."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "level": "error",
          "message": {
            "text": "Rename 'TagsCollectionVersionOne' to end in 'Collection'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.TagsCollectionVersionOne"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ToolVersionOne.ToolVersionOne(ToolVersionOne)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nToolVersionOne..ctor(ToolVersionOne)\r\nToolVersionOne.Init(String, String, String, String, String, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ToolVersionOne.cs"
                },
                "region": {
                  "startLine": 131,
                  "snippet": {
                    "text": "        public ToolVersionOne(ToolVersionOne other)"
                  }
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "endLine": 132,
                  "endColumn": 10,
                  "charOffset": 5943,
                  "charLength": 88,
                  "snippet": {
                    "text": "        /// </exception>\r\n        public ToolVersionOne(ToolVersionOne other)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne..ctor(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2214",
          "level": "warning",
          "message": {
            "text": "'ToolVersionOne.ToolVersionOne(string, string, string, string, string, string, string, IDictionary<string, SerializedPropertyInfo>)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: \r\n\r\nToolVersionOne..ctor(String, String, String, String, String, String, String, IDictionary<String,SerializedPropertyInfo>)\r\nToolVersionOne.Init(String, String, String, String, String, String, String, IDictionary<String,SerializedPropertyInfo>):Void\r\nPropertyBagHolder.set_Properties(IDictionary<String,SerializedPropertyInfo>):Void"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ToolVersionOne.cs"
                },
                "region": {
                  "startLine": 117,
                  "snippet": {
                    "text": "        public ToolVersionOne(string name, string fullName, string version, string semanticVersion, string fileVersion, string sarifLoggerVersion, string language, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "endLine": 118,
                  "endColumn": 10,
                  "charOffset": 5157,
                  "charLength": 252,
                  "snippet": {
                    "text": "        /// </param>\r\n        public ToolVersionOne(string name, string fullName, string version, string semanticVersion, string fileVersion, string sarifLoggerVersion, string language, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne..ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'ToolVersionOne.ToolVersionOne(string, string, string, string, string, string, string, IDictionary<string, SerializedPropertyInfo>)', correct the spelling of 'sarif' in parameter name 'sarifLoggerVersion' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ToolVersionOne.cs"
                },
                "region": {
                  "startLine": 117,
                  "snippet": {
                    "text": "        public ToolVersionOne(string name, string fullName, string version, string semanticVersion, string fileVersion, string sarifLoggerVersion, string language, IDictionary<string, SerializedPropertyInfo> properties)"
                  }
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "endLine": 118,
                  "endColumn": 10,
                  "charOffset": 5157,
                  "charLength": 252,
                  "snippet": {
                    "text": "        /// </param>\r\n        public ToolVersionOne(string name, string fullName, string version, string semanticVersion, string fileVersion, string sarifLoggerVersion, string language, IDictionary<string, SerializedPropertyInfo> properties)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne..ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary`2<System.String,Microsoft.CodeAnalysis.Sarif.Readers.SerializedPropertyInfo>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "sarif#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'ToolVersionOne.SarifLoggerVersion' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/VersionOne/Autogenerated/ToolVersionOne.cs"
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "        public string SarifLoggerVersion { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 1,
                  "charOffset": 2818,
                  "charLength": 153,
                  "snippet": {
                    "text": "        [DataMember(Name = \"sarifLoggerVersion\", IsRequired = false, EmitDefaultValue = false)]\r\n        public string SarifLoggerVersion { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne.SarifLoggerVersion"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1307",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'AbsoluteUrisVisitor.CombineUris(Uri, Uri)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/AbsoluteUrisVisitor.cs"
                },
                "region": {
                  "startLine": 103,
                  "snippet": {
                    "text": "            if(relativeUri.OriginalString.StartsWith(\"/\"))"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 14,
                  "charOffset": 4251,
                  "charLength": 118,
                  "snippet": {
                    "text": "            Uri relativePart = relativeUri;\r\n            if(relativeUri.OriginalString.StartsWith(\"/\"))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor.CombineUris(System.Uri,System.Uri)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.StartsWith(System.String)"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2204",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of the unrecognized token 'originalUriBaseIds' in the literal '\"originalUriBaseIds\"'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/AbsoluteUrisVisitor.cs"
                },
                "region": {
                  "startLine": 47,
                  "snippet": {
                    "text": "                    throw new InvalidOperationException($\"Base URI Dictionary incorrectly formatted, we expect a string->uri dictionary in the Run Properties with name {RebaseUriVisitor.BaseUriDictionaryName}\");"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 18,
                  "charOffset": 1910,
                  "charLength": 249,
                  "snippet": {
                    "text": "                {\r\n                    throw new InvalidOperationException($\"Base URI Dictionary incorrectly formatted, we expect a string->uri dictionary in the Run Properties with name {RebaseUriVisitor.BaseUriDictionaryName}\");\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor.VisitRun(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "originalUriBaseIds"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'AbsoluteUrisVisitor.VisitRun(Run)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/AbsoluteUrisVisitor.cs"
                },
                "region": {
                  "startLine": 47,
                  "snippet": {
                    "text": "                    throw new InvalidOperationException($\"Base URI Dictionary incorrectly formatted, we expect a string->uri dictionary in the Run Properties with name {RebaseUriVisitor.BaseUriDictionaryName}\");"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 18,
                  "charOffset": 1910,
                  "charLength": 249,
                  "snippet": {
                    "text": "                {\r\n                    throw new InvalidOperationException($\"Base URI Dictionary incorrectly formatted, we expect a string->uri dictionary in the Run Properties with name {RebaseUriVisitor.BaseUriDictionaryName}\");\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor.VisitRun(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AbsoluteUrisVisitor.VisitRun(Run)', validate parameter 'node' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/AbsoluteUrisVisitor.cs"
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "            if (node.Properties != null && node.Properties.ContainsKey(RebaseUriVisitor.BaseUriDictionaryName))"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 14,
                  "charOffset": 1473,
                  "charLength": 193,
                  "snippet": {
                    "text": "            // Try to get the uri mappings dictionary out of the \r\n            if (node.Properties != null && node.Properties.ContainsKey(RebaseUriVisitor.BaseUriDictionaryName))\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AbsoluteUrisVisitor.VisitRun(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AddFileReferencesVisitor.VisitPhysicalLocation(PhysicalLocation)', validate parameter 'node' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/AddFileReferencesVisitor.cs"
                },
                "region": {
                  "startLine": 35,
                  "snippet": {
                    "text": "            FileLocation fileLocation = node.FileLocation;"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 1,
                  "charOffset": 1389,
                  "charLength": 62,
                  "snippet": {
                    "text": "\r\n            FileLocation fileLocation = node.FileLocation;\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AddFileReferencesVisitor.VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AddFileReferencesVisitor.VisitRun(Run)', validate parameter 'node' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/AddFileReferencesVisitor.cs"
                },
                "region": {
                  "startLine": 14,
                  "snippet": {
                    "text": "            _files = node.Files;"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 1,
                  "charOffset": 441,
                  "charLength": 45,
                  "snippet": {
                    "text": "        {\r\n            _files = node.Files;\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.AddFileReferencesVisitor.VisitRun(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1504",
          "level": "warning",
          "message": {
            "text": "The field name 'InsertOptionalDataVisitor.s_fileSystem' suggests that it is static (Shared in Visual Basic) data but it is declared as an instance member. Review this member to verify that it should be instance, or consider changing the field name.",
            "messageId": "Instance"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor.s_fileSystem"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Instance"
          },
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'InsertOptionalDataVisitor.VisitMessage(Message)', validate parameter 'node' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/InsertOptionalDataVisitor.cs"
                },
                "region": {
                  "startLine": 164,
                  "snippet": {
                    "text": "            if ((node.Text == null || _dataToInsert.Includes(OptionallyEmittedData.OverwriteExistingData)) &&"
                  }
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "endLine": 165,
                  "endColumn": 81,
                  "charOffset": 6397,
                  "charLength": 202,
                  "snippet": {
                    "text": "        {\r\n            if ((node.Text == null || _dataToInsert.Includes(OptionallyEmittedData.OverwriteExistingData)) &&\r\n                _dataToInsert.Includes(OptionallyEmittedData.FlattenedMessages))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor.VisitMessage(Microsoft.CodeAnalysis.Sarif.Message)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'InsertOptionalDataVisitor.VisitPhysicalLocation(PhysicalLocation)', validate parameter 'node' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/InsertOptionalDataVisitor.cs"
                },
                "region": {
                  "startLine": 64,
                  "snippet": {
                    "text": "            if (node.Region == null || node.Region.IsBinaryRegion)"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 14,
                  "charOffset": 2277,
                  "charLength": 92,
                  "snippet": {
                    "text": "        {\r\n            if (node.Region == null || node.Region.IsBinaryRegion)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor.VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'InsertOptionalDataVisitor.VisitResult(Result)', validate parameter 'node' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/InsertOptionalDataVisitor.cs"
                },
                "region": {
                  "startLine": 155,
                  "snippet": {
                    "text": "            _ruleId = node.RuleId;"
                  }
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "endLine": 156,
                  "endColumn": 43,
                  "charOffset": 6176,
                  "charLength": 89,
                  "snippet": {
                    "text": "        {\r\n            _ruleId = node.RuleId;\r\n            node = base.VisitResult(node);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor.VisitResult(Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'RebaseUriVisitor.RebaseUriVisitor(string, bool, Uri)', validate parameter 'baseUri' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/RebaseUriVisitor.cs"
                },
                "region": {
                  "startLine": 59,
                  "snippet": {
                    "text": "            Debug.Assert(_baseUri.IsAbsoluteUri);"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 1,
                  "charOffset": 2159,
                  "charLength": 86,
                  "snippet": {
                    "text": "            _baseName = baseName;\r\n            Debug.Assert(_baseUri.IsAbsoluteUri);\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor..ctor(System.String,System.Boolean,System.Uri)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "2"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'RebaseUriVisitor.RebaseUriVisitor(string, Uri)', validate parameter 'baseUri' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/RebaseUriVisitor.cs"
                },
                "region": {
                  "startLine": 49,
                  "snippet": {
                    "text": "            Debug.Assert(_baseUri.IsAbsoluteUri);"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 10,
                  "charOffset": 1769,
                  "charLength": 102,
                  "snippet": {
                    "text": "            _rebaseRelativeUris = false;\r\n            Debug.Assert(_baseUri.IsAbsoluteUri);\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor..ctor(System.String,System.Uri)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'RebaseUriVisitor.VisitPhysicalLocation(PhysicalLocation)', validate parameter 'node' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/RebaseUriVisitor.cs"
                },
                "region": {
                  "startLine": 73,
                  "snippet": {
                    "text": "                    newNode.FileLocation.Uri = _baseUri.MakeRelativeUri(node.FileLocation.Uri);"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 52,
                  "charOffset": 2715,
                  "charLength": 213,
                  "snippet": {
                    "text": "                    newNode.FileLocation.UriBaseId = _baseName;\r\n                    newNode.FileLocation.Uri = _baseUri.MakeRelativeUri(node.FileLocation.Uri);\r\n                    RebaseFilesDictionary(newNode);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor.VisitPhysicalLocation(Microsoft.CodeAnalysis.Sarif.PhysicalLocation)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'RebaseUriVisitor.VisitRun(Run)', validate parameter 'node' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/RebaseUriVisitor.cs"
                },
                "region": {
                  "startLine": 88,
                  "snippet": {
                    "text": "            _files = node.Files;"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 1,
                  "charOffset": 3302,
                  "charLength": 45,
                  "snippet": {
                    "text": "        {\r\n            _files = node.Files;\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor.VisitRun(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1506",
          "level": "warning",
          "message": {
            "text": "'SarifCurrentToVersionOneVisitor' is coupled with 86 different types from 12 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Type"
          },
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifCurrentToVersionOneVisitor'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2200",
          "level": "error",
          "message": {
            "text": "'SarifCurrentToVersionOneVisitor.CreateFileChange(FileChange)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 135,
                  "snippet": {
                    "text": "                catch (UnknownEncodingException ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 136,
                  "endColumn": 18,
                  "charOffset": 5501,
                  "charLength": 89,
                  "snippet": {
                    "text": "                }\r\n                catch (UnknownEncodingException ex)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateFileChange(Microsoft.CodeAnalysis.Sarif.FileChange)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifCurrentToVersionOneVisitor.CreateLogicalLocation(LogicalLocation)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 322,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 321,
                  "startColumn": 1,
                  "endLine": 323,
                  "endColumn": 62,
                  "charOffset": 12439,
                  "charLength": 173,
                  "snippet": {
                    "text": "        internal LogicalLocationVersionOne CreateLogicalLocation(LogicalLocation v2LogicalLocation)\r\n        {\r\n            LogicalLocationVersionOne logicalLocation = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateLogicalLocation(Microsoft.CodeAnalysis.Sarif.LogicalLocation)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifCurrentToVersionOneVisitor.CreatePhysicalLocation(FileLocation)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 379,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 378,
                  "startColumn": 1,
                  "endLine": 380,
                  "endColumn": 64,
                  "charOffset": 14653,
                  "charLength": 171,
                  "snippet": {
                    "text": "        internal PhysicalLocationVersionOne CreatePhysicalLocation(FileLocation v2FileLocation)\r\n        {\r\n            PhysicalLocationVersionOne physicalLocation = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreatePhysicalLocation(Microsoft.CodeAnalysis.Sarif.FileLocation)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifCurrentToVersionOneVisitor.CreateReplacement(Replacement, Encoding)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 680,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 679,
                  "startColumn": 1,
                  "endLine": 681,
                  "endColumn": 54,
                  "charOffset": 26899,
                  "charLength": 168,
                  "snippet": {
                    "text": "        internal ReplacementVersionOne CreateReplacement(Replacement v2Replacement, Encoding encoding)\r\n        {\r\n            ReplacementVersionOne replacement = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateReplacement(Microsoft.CodeAnalysis.Sarif.Replacement,System.Text.Encoding)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1506",
          "level": "warning",
          "message": {
            "text": "'SarifCurrentToVersionOneVisitor.CreateResult(Result)' is coupled with 31 different types from 8 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.",
            "messageId": "Method"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 742,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 741,
                  "startColumn": 1,
                  "endLine": 743,
                  "endColumn": 44,
                  "charOffset": 29278,
                  "charLength": 119,
                  "snippet": {
                    "text": "        internal ResultVersionOne CreateResult(Result v2Result)\r\n        {\r\n            ResultVersionOne result = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateResult(Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Method"
          },
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'SarifCurrentToVersionOneVisitor.CreateResult(Result)' has a cyclomatic complexity of 26. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 742,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 741,
                  "startColumn": 1,
                  "endLine": 743,
                  "endColumn": 44,
                  "charOffset": 29278,
                  "charLength": 119,
                  "snippet": {
                    "text": "        internal ResultVersionOne CreateResult(Result v2Result)\r\n        {\r\n            ResultVersionOne result = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateResult(Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifCurrentToVersionOneVisitor.CreateRule(Rule)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 817,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 816,
                  "startColumn": 1,
                  "endLine": 818,
                  "endColumn": 40,
                  "charOffset": 32394,
                  "charLength": 107,
                  "snippet": {
                    "text": "        internal RuleVersionOne CreateRule(Rule v2Rule)\r\n        {\r\n            RuleVersionOne rule = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateRule(Microsoft.CodeAnalysis.Sarif.Rule)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SarifCurrentToVersionOneVisitor.CreateRun(Run)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 883,
                  "snippet": {
                    "text": "                    run.SetProperty($\"{FromPropertyBagPrefix}/run\", v2Run);"
                  }
                },
                "contextRegion": {
                  "startLine": 882,
                  "startColumn": 1,
                  "endLine": 884,
                  "endColumn": 18,
                  "charOffset": 35194,
                  "charLength": 172,
                  "snippet": {
                    "text": "                    // Stash the entire v2 run in this v1 run's property bag\r\n                    run.SetProperty($\"{FromPropertyBagPrefix}/run\", v2Run);\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateRun(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifCurrentToVersionOneVisitor.CreateTool(Tool)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 957,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 956,
                  "startColumn": 1,
                  "endLine": 958,
                  "endColumn": 40,
                  "charOffset": 38031,
                  "charLength": 107,
                  "snippet": {
                    "text": "        internal ToolVersionOne CreateTool(Tool v2Tool)\r\n        {\r\n            ToolVersionOne tool = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.CreateTool(Microsoft.CodeAnalysis.Sarif.Tool)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SarifCurrentToVersionOneVisitor.GetContentStream(Uri, out Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 647,
                  "snippet": {
                    "text": "                        failureReason = $\"Encoding for file '{uri.OriginalString}' could not be determined\";"
                  }
                },
                "contextRegion": {
                  "startLine": 646,
                  "startColumn": 1,
                  "endLine": 648,
                  "endColumn": 22,
                  "charOffset": 25801,
                  "charLength": 154,
                  "snippet": {
                    "text": "                    {\r\n                        failureReason = $\"Encoding for file '{uri.OriginalString}' could not be determined\";\r\n                    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.GetContentStream(System.Uri,System.Text.Encoding&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SarifCurrentToVersionOneVisitor.GetContentStream(Uri, out Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 654,
                  "snippet": {
                    "text": "                failureReason = $\"File '{uri.LocalPath}' could not be opened\";"
                  }
                },
                "contextRegion": {
                  "startLine": 653,
                  "startColumn": 1,
                  "endLine": 655,
                  "endColumn": 14,
                  "charOffset": 26051,
                  "charLength": 108,
                  "snippet": {
                    "text": "            {\r\n                failureReason = $\"File '{uri.LocalPath}' could not be opened\";\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.GetContentStream(System.Uri,System.Text.Encoding&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SarifCurrentToVersionOneVisitor.GetContentStream(Uri, out Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 633,
                  "snippet": {
                    "text": "                                failureReason = $\"File '{uri.LocalPath}' could not be found: {ex.ToString()}\";"
                  }
                },
                "contextRegion": {
                  "startLine": 632,
                  "startColumn": 1,
                  "endLine": 634,
                  "endColumn": 30,
                  "charOffset": 25091,
                  "charLength": 172,
                  "snippet": {
                    "text": "                            {\r\n                                failureReason = $\"File '{uri.LocalPath}' could not be found: {ex.ToString()}\";\r\n                            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.GetContentStream(System.Uri,System.Text.Encoding&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SarifCurrentToVersionOneVisitor.GetContentStream(Uri, out Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 637,
                  "snippet": {
                    "text": "                                failureReason = $\"File '{uri.LocalPath}' could not be read: {ex.ToString()}\";"
                  }
                },
                "contextRegion": {
                  "startLine": 636,
                  "startColumn": 1,
                  "endLine": 638,
                  "endColumn": 30,
                  "charOffset": 25317,
                  "charLength": 171,
                  "snippet": {
                    "text": "                            {\r\n                                failureReason = $\"File '{uri.LocalPath}' could not be read: {ex.ToString()}\";\r\n                            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.GetContentStream(System.Uri,System.Text.Encoding&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SarifCurrentToVersionOneVisitor.GetContentStream(Uri, out Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 641,
                  "snippet": {
                    "text": "                                failureReason = $\"File '{uri.LocalPath}' could not be accessed: {ex.ToString()}\";"
                  }
                },
                "contextRegion": {
                  "startLine": 640,
                  "startColumn": 1,
                  "endLine": 642,
                  "endColumn": 30,
                  "charOffset": 25548,
                  "charLength": 175,
                  "snippet": {
                    "text": "                            {\r\n                                failureReason = $\"File '{uri.LocalPath}' could not be accessed: {ex.ToString()}\";\r\n                            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.GetContentStream(System.Uri,System.Text.Encoding&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifCurrentToVersionOneVisitor.GetFileEncoding(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 163,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 38,
                  "charOffset": 6361,
                  "charLength": 111,
                  "snippet": {
                    "text": "        private Encoding GetFileEncoding(string encodingName)\r\n        {\r\n            Encoding encoding = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.GetFileEncoding(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifCurrentToVersionOneVisitor.SarifLogVersionOne' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 25,
                  "snippet": {
                    "text": "        public SarifLogVersionOne SarifLogVersionOne { get; private set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 1,
                  "charOffset": 927,
                  "charLength": 78,
                  "snippet": {
                    "text": "\r\n        public SarifLogVersionOne SarifLogVersionOne { get; private set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.SarifLogVersionOne"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1725",
          "level": "error",
          "message": {
            "text": "In member 'SarifCurrentToVersionOneVisitor.VisitSarifLog(SarifLog)', change parameter name 'v2SarifLog' to 'node' in order to match the identifier as it has been declared in 'SarifRewritingVisitor.VisitSarifLog(SarifLog)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 113,
                  "charOffset": 1007,
                  "charLength": 192,
                  "snippet": {
                    "text": "        public override SarifLog VisitSarifLog(SarifLog v2SarifLog)\r\n        {\r\n            SarifLogVersionOne = new SarifLogVersionOne(SarifVersionVersionOne.OneZeroZero.ConvertToSchemaUri(),"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.VisitSarifLog(Microsoft.CodeAnalysis.Sarif.SarifLog)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SarifCurrentToVersionOneVisitor.VisitSarifLog(SarifLog)', validate parameter 'v2SarifLog' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs"
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "            foreach (Run v2Run in v2SarifLog.Runs)"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 14,
                  "charOffset": 1379,
                  "charLength": 67,
                  "snippet": {
                    "text": "\r\n            foreach (Run v2Run in v2SarifLog.Runs)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor.VisitSarifLog(Microsoft.CodeAnalysis.Sarif.SarifLog)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifTransformerUtilities'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifTransformerUtilities.AlgorithmKindNameMap' or change the field to one that is an immutable reference type. If the reference type 'Dictionary<AlgorithmKindVersionOne, string>' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.AlgorithmKindNameMap"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifTransformerUtilities.AlgorithmNameKindMap' or change the field to one that is an immutable reference type. If the reference type 'Dictionary<string, AlgorithmKindVersionOne>' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.AlgorithmNameKindMap"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateAnnotatedCodeLocationImportance(ThreadFlowLocationImportance)', correct the spelling of 'v' in parameter name 'v2ThreadFlowLocationImportance' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "endLine": 236,
                  "endColumn": 52,
                  "charOffset": 9950,
                  "charLength": 226,
                  "snippet": {
                    "text": "        public static AnnotatedCodeLocationImportanceVersionOne CreateAnnotatedCodeLocationImportance(ThreadFlowLocationImportance v2ThreadFlowLocationImportance)\r\n        {\r\n            switch (v2ThreadFlowLocationImportance)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateAnnotatedCodeLocationImportance(Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationImportance)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateBaselineState(BaselineStateVersionOne)', correct the spelling of 'v' in parameter name 'v1BaselineState' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 191,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "endLine": 192,
                  "endColumn": 37,
                  "charOffset": 7983,
                  "charLength": 145,
                  "snippet": {
                    "text": "        public static BaselineState CreateBaselineState(BaselineStateVersionOne v1BaselineState)\r\n        {\r\n            switch (v1BaselineState)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateBaselineState(Microsoft.CodeAnalysis.Sarif.VersionOne.BaselineStateVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateBaselineStateVersionOne(BaselineState)', correct the spelling of 'v' in parameter name 'v2BaselineState' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 205,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 1,
                  "endLine": 206,
                  "endColumn": 37,
                  "charOffset": 8555,
                  "charLength": 155,
                  "snippet": {
                    "text": "        public static BaselineStateVersionOne CreateBaselineStateVersionOne(BaselineState v2BaselineState)\r\n        {\r\n            switch (v2BaselineState)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateBaselineStateVersionOne(Microsoft.CodeAnalysis.Sarif.BaselineState)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SarifTransformerUtilities.CreateDisambiguatedName(string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "            return $\"{baseName}-{index.ToString(CultureInfo.InvariantCulture)}\";"
                  }
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "endLine": 68,
                  "endColumn": 10,
                  "charOffset": 2845,
                  "charLength": 102,
                  "snippet": {
                    "text": "        {\r\n            return $\"{baseName}-{index.ToString(CultureInfo.InvariantCulture)}\";\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateDisambiguatedName(System.String,System.Int32)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateNotificationLevel(NotificationLevelVersionOne)', correct the spelling of 'v' in parameter name 'v1NotificationLevel' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 71,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 41,
                  "charOffset": 2951,
                  "charLength": 165,
                  "snippet": {
                    "text": "        public static FailureLevel CreateNotificationLevel(NotificationLevelVersionOne v1NotificationLevel)\r\n        {\r\n            switch (v1NotificationLevel)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateNotificationLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationLevelVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateNotificationLevelVersionOne(FailureLevel)', correct the spelling of 'v' in parameter name 'v2NotificationLevel' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 84,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 41,
                  "charOffset": 3460,
                  "charLength": 175,
                  "snippet": {
                    "text": "        public static NotificationLevelVersionOne CreateNotificationLevelVersionOne(FailureLevel v2NotificationLevel)\r\n        {\r\n            switch (v2NotificationLevel)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateNotificationLevelVersionOne(Microsoft.CodeAnalysis.Sarif.FailureLevel)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateResultLevel(ResultLevelVersionOne)', correct the spelling of 'v' in parameter name 'v1ResultLevel' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 112,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "endLine": 113,
                  "endColumn": 35,
                  "charOffset": 4648,
                  "charLength": 135,
                  "snippet": {
                    "text": "        public static ResultLevel CreateResultLevel(ResultLevelVersionOne v1ResultLevel)\r\n        {\r\n            switch (v1ResultLevel)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateResultLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateResultLevelVersionOne(ResultLevel)', correct the spelling of 'v' in parameter name 'v2ResultLevel' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 146,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "endLine": 147,
                  "endColumn": 35,
                  "charOffset": 6054,
                  "charLength": 145,
                  "snippet": {
                    "text": "        public static ResultLevelVersionOne CreateResultLevelVersionOne(ResultLevel v2ResultLevel)\r\n        {\r\n            switch (v2ResultLevel)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateResultLevelVersionOne(Microsoft.CodeAnalysis.Sarif.ResultLevel)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateResultLevelVersionOne(reportingConfigurationDefaultLevel)', correct the spelling of 'v' in parameter name 'v2DefaultLevel' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 131,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "endLine": 132,
                  "endColumn": 36,
                  "charOffset": 5409,
                  "charLength": 165,
                  "snippet": {
                    "text": "        public static ResultLevelVersionOne CreateResultLevelVersionOne(reportingConfigurationDefaultLevel v2DefaultLevel)\r\n        {\r\n            switch (v2DefaultLevel)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateResultLevelVersionOne(Microsoft.CodeAnalysis.Sarif.reportingConfigurationDefaultLevel)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreatereportingConfigurationDefaultLevel(ResultLevelVersionOne)', correct the spelling of 'v' in parameter name 'v1ResultLevel' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 97,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 35,
                  "charOffset": 3989,
                  "charLength": 171,
                  "snippet": {
                    "text": "        public static reportingConfigurationDefaultLevel CreatereportingConfigurationDefaultLevel(ResultLevelVersionOne v1ResultLevel)\r\n        {\r\n            switch (v1ResultLevel)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreatereportingConfigurationDefaultLevel(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateSuppressionStates(SuppressionStatesVersionOne)', correct the spelling of 'v' in parameter name 'v1SuppressionStates' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 165,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "endLine": 166,
                  "endColumn": 41,
                  "charOffset": 6835,
                  "charLength": 165,
                  "snippet": {
                    "text": "        public static SuppressionStates CreateSuppressionStates(SuppressionStatesVersionOne v1SuppressionStates)\r\n        {\r\n            switch (v1SuppressionStates)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateSuppressionStates(Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateSuppressionStatesVersionOne(SuppressionStates)', correct the spelling of 'v' in parameter name 'v2SuppressionStates' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 178,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "endLine": 179,
                  "endColumn": 41,
                  "charOffset": 7399,
                  "charLength": 175,
                  "snippet": {
                    "text": "        public static SuppressionStatesVersionOne CreateSuppressionStatesVersionOne(SuppressionStates v2SuppressionStates)\r\n        {\r\n            switch (v2SuppressionStates)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateSuppressionStatesVersionOne(Microsoft.CodeAnalysis.Sarif.SuppressionStates)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifTransformerUtilities.CreateThreadFlowLocationImportance(AnnotatedCodeLocationImportanceVersionOne)', correct the spelling of 'v' in parameter name 'v1AnnotatedCodeLocationImportance' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifTransformerUtilities.cs"
                },
                "region": {
                  "startLine": 220,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "endLine": 221,
                  "endColumn": 55,
                  "charOffset": 9149,
                  "charLength": 229,
                  "snippet": {
                    "text": "        public static ThreadFlowLocationImportance CreateThreadFlowLocationImportance(AnnotatedCodeLocationImportanceVersionOne v1AnnotatedCodeLocationImportance)\r\n        {\r\n            switch (v1AnnotatedCodeLocationImportance)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.CreateThreadFlowLocationImportance(Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationImportanceVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "v#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2105",
          "level": "warning",
          "message": {
            "text": "Either replace 'SarifTransformerUtilities.DefaultFullyQualifiedNameDelimiters' with a strongly typed collection that cannot be changed, or replace the public field with a method that returns a clone of a private array."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.DefaultFullyQualifiedNameDelimiters"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Security",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifTransformerUtilities.JsonSettingsV1' or change the field to one that is an immutable reference type. If the reference type 'JsonSerializerSettings' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.JsonSettingsV1"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifTransformerUtilities.JsonSettingsV1Compact' or change the field to one that is an immutable reference type. If the reference type 'JsonSerializerSettings' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.JsonSettingsV1Compact"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifTransformerUtilities.JsonSettingsV2' or change the field to one that is an immutable reference type. If the reference type 'JsonSerializerSettings' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.JsonSettingsV2"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifTransformerUtilities.JsonSettingsV2Compact' or change the field to one that is an immutable reference type. If the reference type 'JsonSerializerSettings' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.JsonSettingsV2Compact"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2104",
          "level": "error",
          "message": {
            "text": "Remove the read-only designation from 'SarifTransformerUtilities.PropertyBagTransformerItemPrefixes' or change the field to one that is an immutable reference type. If the reference type 'Dictionary<SarifVersion, string>' is, in fact, immutable, exclude this message."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities.PropertyBagTransformerItemPrefixes"
            }
          ],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifVersionOneToCurrentVisitor'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1823",
          "level": "warning",
          "message": {
            "text": "It appears that field 'SarifVersionOneToCurrentVisitor._currentV1Run' is never used or is only ever assigned to. Use this field or remove it."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor._currentV1Run"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifVersionOneToCurrentVisitor.CreateFileLocation(Uri, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 194,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "endLine": 195,
                  "endColumn": 46,
                  "charOffset": 7359,
                  "charLength": 133,
                  "snippet": {
                    "text": "        internal FileLocation CreateFileLocation(Uri uri, string uriBaseId)\r\n        {\r\n            FileLocation fileLocation = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateFileLocation(System.Uri,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1308",
          "level": "error",
          "message": {
            "text": "In method 'SarifVersionOneToCurrentVisitor.CreateHash(HashVersionOne)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().",
            "messageId": "ToUpperInvariant"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 244,
                  "snippet": {
                    "text": "                    algorithm = v1Hash.Algorithm.ToString().ToLowerInvariant();"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "endLine": 245,
                  "endColumn": 18,
                  "charOffset": 8887,
                  "charLength": 117,
                  "snippet": {
                    "text": "                {\r\n                    algorithm = v1Hash.Algorithm.ToString().ToLowerInvariant();\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateHash(Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ToUpperInvariant"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifVersionOneToCurrentVisitor.CreateLogicalLocation(LogicalLocationVersionOne)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 429,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 428,
                  "startColumn": 1,
                  "endLine": 430,
                  "endColumn": 52,
                  "charOffset": 16942,
                  "charLength": 163,
                  "snippet": {
                    "text": "        internal LogicalLocation CreateLogicalLocation(LogicalLocationVersionOne v1LogicalLocation)\r\n        {\r\n            LogicalLocation logicalLocation = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateLogicalLocation(Microsoft.CodeAnalysis.Sarif.VersionOne.LogicalLocationVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifVersionOneToCurrentVisitor.CreateMessage(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 530,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 529,
                  "startColumn": 1,
                  "endLine": 531,
                  "endColumn": 36,
                  "charOffset": 20901,
                  "charLength": 99,
                  "snippet": {
                    "text": "        internal Message CreateMessage(string text)\r\n        {\r\n            Message message = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateMessage(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifVersionOneToCurrentVisitor.CreateRegion(RegionVersionOne)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 653,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 652,
                  "startColumn": 1,
                  "endLine": 654,
                  "endColumn": 34,
                  "charOffset": 25250,
                  "charLength": 109,
                  "snippet": {
                    "text": "        internal Region CreateRegion(RegionVersionOne v1Region)\r\n        {\r\n            Region region = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateRegion(Microsoft.CodeAnalysis.Sarif.VersionOne.RegionVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifVersionOneToCurrentVisitor.CreateRegion(int, int, int, int, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 697,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 696,
                  "startColumn": 1,
                  "endLine": 698,
                  "endColumn": 34,
                  "charOffset": 27023,
                  "charLength": 182,
                  "snippet": {
                    "text": "        internal Region CreateRegion(int startColumn, int startLine, int endColumn = 0, int endLine = 0, int length = 0, int offset = 0)\r\n        {\r\n            Region region = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'SarifVersionOneToCurrentVisitor.CreateResult(ResultVersionOne)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 717,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 716,
                  "startColumn": 1,
                  "endLine": 718,
                  "endColumn": 34,
                  "charOffset": 27758,
                  "charLength": 109,
                  "snippet": {
                    "text": "        internal Result CreateResult(ResultVersionOne v1Result)\r\n        {\r\n            Result result = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateResult(Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SarifVersionOneToCurrentVisitor.CreateRun(RunVersionOne)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 953,
                  "snippet": {
                    "text": "                    run.SetProperty($\"{FromPropertyBagPrefix}/run\", v1Run);"
                  }
                },
                "contextRegion": {
                  "startLine": 952,
                  "startColumn": 1,
                  "endLine": 954,
                  "endColumn": 18,
                  "charOffset": 37089,
                  "charLength": 172,
                  "snippet": {
                    "text": "                    // Stash the entire v1 run in this v2 run's property bag\r\n                    run.SetProperty($\"{FromPropertyBagPrefix}/run\", v1Run);\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateRun(Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifVersionOneToCurrentVisitor.CreateTool(ToolVersionOne)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 1006,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 1005,
                  "startColumn": 1,
                  "endLine": 1007,
                  "endColumn": 30,
                  "charOffset": 38996,
                  "charLength": 97,
                  "snippet": {
                    "text": "        internal Tool CreateTool(ToolVersionOne v1Tool)\r\n        {\r\n            Tool tool = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.CreateTool(Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'SarifVersionOneToCurrentVisitor.GetLogicalLocationName(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 496,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 495,
                  "startColumn": 1,
                  "endLine": 497,
                  "endColumn": 70,
                  "charOffset": 19726,
                  "charLength": 162,
                  "snippet": {
                    "text": "        internal string GetLogicalLocationName(string fullyQualifiedLogicalName)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(fullyQualifiedLogicalName))"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.GetLogicalLocationName(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'SarifVersionOneToCurrentVisitor.SarifLog' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 24,
                  "snippet": {
                    "text": "        public SarifLog SarifLog { get; private set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 1,
                  "charOffset": 958,
                  "charLength": 58,
                  "snippet": {
                    "text": "\r\n        public SarifLog SarifLog { get; private set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.SarifLog"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1725",
          "level": "error",
          "message": {
            "text": "In member 'SarifVersionOneToCurrentVisitor.VisitSarifLogVersionOne(SarifLogVersionOne)', change parameter name 'v1SarifLog' to 'node' in order to match the identifier as it has been declared in 'SarifRewritingVisitorVersionOne.VisitSarifLogVersionOne(SarifLogVersionOne)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 83,
                  "charOffset": 1018,
                  "charLength": 192,
                  "snippet": {
                    "text": "        public override SarifLogVersionOne VisitSarifLogVersionOne(SarifLogVersionOne v1SarifLog)\r\n        {\r\n            SarifLog = new SarifLog(SarifVersion.TwoZeroZero.ConvertToSchemaUri(),"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.VisitSarifLogVersionOne(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SarifVersionOneToCurrentVisitor.VisitSarifLogVersionOne(SarifLogVersionOne)', validate parameter 'v1SarifLog' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs"
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "            foreach (RunVersionOne v1Run in v1SarifLog.Runs)"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 14,
                  "charOffset": 1330,
                  "charLength": 77,
                  "snippet": {
                    "text": "\r\n            foreach (RunVersionOne v1Run in v1SarifLog.Runs)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor.VisitSarifLogVersionOne(Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1064",
          "level": "warning",
          "message": {
            "text": "Make exception class 'UnknownEncodingException' public."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.UnknownEncodingException"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1032",
          "level": "error",
          "message": {
            "text": "Add the following constructor to 'UnknownEncodingException': protected UnknownEncodingException(SerializationInfo, StreamingContext).",
            "messageId": "MissingConstructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.UnknownEncodingException"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "MissingConstructor"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2237",
          "level": "error",
          "message": {
            "text": "Add [Serializable] to 'UnknownEncodingException' as this type implements ISerializable."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Visitors.UnknownEncodingException"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Cpp' in member name 'MimeType.Cpp' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType.Cpp"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Cpp#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1057",
          "level": "error",
          "message": {
            "text": "Refactor 'MimeType.DetermineFromFileExtension(string)' so that it builds a System.Uri object from 'path', and then calls 'MimeType.DetermineFromFileExtension(Uri)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/MimeType.cs"
                },
                "region": {
                  "startLine": 17,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 30,
                  "charOffset": 724,
                  "charLength": 110,
                  "snippet": {
                    "text": "        public static string DetermineFromFileExtension(string path)\r\n        {\r\n            if (path == null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType.DetermineFromFileExtension(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in member name 'MimeType.Sarif' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.MimeType.Sarif"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2208",
          "level": "error",
          "message": {
            "text": "Method 'ResultLogJsonWriter.Initialize(Run)' passes 'Tool' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.",
            "messageId": "IncorrectParameterName"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/ResultLogJsonWriter.cs"
                },
                "region": {
                  "startLine": 64,
                  "snippet": {
                    "text": "                throw new ArgumentNullException(nameof(run.Tool));"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 14,
                  "charOffset": 2484,
                  "charLength": 96,
                  "snippet": {
                    "text": "            {\r\n                throw new ArgumentNullException(nameof(run.Tool));\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.ResultLogJsonWriter.Initialize(Microsoft.CodeAnalysis.Sarif.Run)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "IncorrectParameterName"
          },
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifLogger'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'SarifLogger.SarifLogger(TextWriter, LoggingOptions, OptionallyEmittedData, Tool, Run, IEnumerable<string>, IEnumerable<string>, IEnumerable<string>, string)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/SarifLogger.cs"
                },
                "region": {
                  "startLine": 124,
                  "snippet": {
                    "text": "            string defaultFileEncoding = null) : this(textWriter, loggingOptions)"
                  }
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 125,
                  "endColumn": 10,
                  "charOffset": 4927,
                  "charLength": 159,
                  "snippet": {
                    "text": "            IEnumerable<string> invocationPropertiesToLog = null,\r\n            string defaultFileEncoding = null) : this(textWriter, loggingOptions)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger..ctor(System.IO.TextWriter,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'SarifLogger.SarifLogger(string, LoggingOptions, OptionallyEmittedData, Tool, Run, IEnumerable<string>, IEnumerable<string>, IEnumerable<string>, string)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/SarifLogger.cs"
                },
                "region": {
                  "startLine": 105,
                  "snippet": {
                    "text": "            : this(new StreamWriter(new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)),"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 34,
                  "charOffset": 4127,
                  "charLength": 202,
                  "snippet": {
                    "text": "            string defaultFileEncoding = null)\r\n            : this(new StreamWriter(new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)),\r\n                  loggingOptions,"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2000",
          "level": "warning",
          "message": {
            "text": "In method 'SarifLogger.SarifLogger(string, LoggingOptions, OptionallyEmittedData, Tool, Run, IEnumerable<string>, IEnumerable<string>, IEnumerable<string>, string)', call System.IDisposable.Dispose on object 'new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)' before all references to it are out of scope.",
            "messageId": "NonExceptionEdge"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/SarifLogger.cs"
                },
                "region": {
                  "startLine": 105,
                  "snippet": {
                    "text": "            : this(new StreamWriter(new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)),"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 34,
                  "charOffset": 4127,
                  "charLength": 202,
                  "snippet": {
                    "text": "            string defaultFileEncoding = null)\r\n            : this(new StreamWriter(new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)),\r\n                  loggingOptions,"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NonExceptionEdge"
          },
          "properties": {
            "Category": "Microsoft.Reliability",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1801",
          "level": "warning",
          "message": {
            "text": "Parameter 'analysisTargets' of 'SarifLogger.SarifLogger(string, LoggingOptions, OptionallyEmittedData, Tool, Run, IEnumerable<string>, IEnumerable<string>, IEnumerable<string>, string)' is never used. Remove the parameter or use it in the method body."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/SarifLogger.cs"
                },
                "region": {
                  "startLine": 105,
                  "snippet": {
                    "text": "            : this(new StreamWriter(new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)),"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 34,
                  "charOffset": 4127,
                  "charLength": 202,
                  "snippet": {
                    "text": "            string defaultFileEncoding = null)\r\n            : this(new StreamWriter(new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)),\r\n                  loggingOptions,"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "analysisTargets"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1801",
          "level": "warning",
          "message": {
            "text": "Parameter 'defaultFileEncoding' of 'SarifLogger.SarifLogger(string, LoggingOptions, OptionallyEmittedData, Tool, Run, IEnumerable<string>, IEnumerable<string>, IEnumerable<string>, string)' is never used. Remove the parameter or use it in the method body."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/SarifLogger.cs"
                },
                "region": {
                  "startLine": 105,
                  "snippet": {
                    "text": "            : this(new StreamWriter(new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)),"
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 34,
                  "charOffset": 4127,
                  "charLength": 202,
                  "snippet": {
                    "text": "            string defaultFileEncoding = null)\r\n            : this(new StreamWriter(new FileStream(outputFilePath, FileMode.Create, FileAccess.Write, FileShare.None)),\r\n                  loggingOptions,"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger..ctor(System.String,Microsoft.CodeAnalysis.Sarif.Writers.LoggingOptions,Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData,Microsoft.CodeAnalysis.Sarif.Tool,Microsoft.CodeAnalysis.Sarif.Run,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.Collections.Generic.IEnumerable`1<System.String>,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "defaultFileEncoding"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1502",
          "level": "warning",
          "message": {
            "text": "'SarifLogger.CaptureFilesInResult(Result)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif/Writers/SarifLogger.cs"
                },
                "region": {
                  "startLine": 289,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "endLine": 290,
                  "endColumn": 47,
                  "charOffset": 10722,
                  "charLength": 115,
                  "snippet": {
                    "text": "        private void CaptureFilesInResult(Result result)\r\n        {\r\n            if (result.AnalysisTarget != null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.dll!Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger.CaptureFilesInResult(Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2243",
          "level": "warning",
          "message": {
            "text": "In the constructor of 'AssemblyInformationalVersionAttribute', change the value of argument 'informationalVersion', which is currently \"2.0.0-csd.1.0.1\", to something that can be correctly parsed as 'Version'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in assembly name 'Sarif.Driver.dll'.",
            "messageId": "Assembly"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Assembly"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1014",
          "level": "error",
          "message": {
            "text": "Mark 'Sarif.Driver.dll' with CLSCompliant(true) because it exposes externally visible types."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1824",
          "level": "warning",
          "message": {
            "text": "Because assembly 'Sarif.Driver.dll' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1063",
          "level": "error",
          "message": {
            "text": "Provide an overridable implementation of Dispose(bool) on 'AggregatingLogger' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.",
            "messageId": "ProvideDisposeBool"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ProvideDisposeBool"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1816",
          "level": "warning",
          "message": {
            "text": "Change 'AggregatingLogger.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.",
            "messageId": "NotCalled"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AggregatingLogger.cs"
                },
                "region": {
                  "startLine": 25,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 56,
                  "charOffset": 709,
                  "charLength": 97,
                  "snippet": {
                    "text": "        public void Dispose()\r\n        {\r\n            foreach (IAnalysisLogger logger in Loggers)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger.Dispose()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NotCalled"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1063",
          "level": "error",
          "message": {
            "text": "Modify 'AggregatingLogger.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.",
            "messageId": "DisposeImplementation"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AggregatingLogger.cs"
                },
                "region": {
                  "startLine": 25,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 56,
                  "charOffset": 709,
                  "charLength": 97,
                  "snippet": {
                    "text": "        public void Dispose()\r\n        {\r\n            foreach (IAnalysisLogger logger in Loggers)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger.Dispose()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "DisposeImplementation"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'AggregatingLogger.Loggers' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AggregatingLogger.cs"
                },
                "region": {
                  "startLine": 22,
                  "snippet": {
                    "text": "        public IList<IAnalysisLogger> Loggers { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 1,
                  "charOffset": 644,
                  "charLength": 63,
                  "snippet": {
                    "text": "\r\n        public IList<IAnalysisLogger> Loggers { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AggregatingLogger.Loggers"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1063",
          "level": "error",
          "message": {
            "text": "Provide an overridable implementation of Dispose(bool) on 'AnalysisContext' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.",
            "messageId": "ProvideDisposeBool"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ProvideDisposeBool"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1816",
          "level": "warning",
          "message": {
            "text": "Change 'AnalysisContext.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.",
            "messageId": "NotCalled"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalysisContext.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "        public void Dispose() { }"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 6,
                  "charOffset": 719,
                  "charLength": 42,
                  "snippet": {
                    "text": "\r\n        public void Dispose() { }\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext.Dispose()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NotCalled"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1063",
          "level": "error",
          "message": {
            "text": "Modify 'AnalysisContext.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.",
            "messageId": "DisposeImplementation"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalysisContext.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "        public void Dispose() { }"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 6,
                  "charOffset": 719,
                  "charLength": 42,
                  "snippet": {
                    "text": "\r\n        public void Dispose() { }\r\n    }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext.Dispose()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "DisposeImplementation"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'AnalysisContext.Policy' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalysisContext.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "        public PropertiesDictionary Policy { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 1,
                  "charOffset": 501,
                  "charLength": 60,
                  "snippet": {
                    "text": "\r\n        public PropertiesDictionary Policy { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalysisContext.Policy"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'AnalyzeCommandBase<TContext, TOptions>.AnalyzeTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 554,
                  "snippet": {
                    "text": "                catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 553,
                  "startColumn": 1,
                  "endLine": 555,
                  "endColumn": 18,
                  "charOffset": 21419,
                  "charLength": 74,
                  "snippet": {
                    "text": "                }\r\n                catch (Exception ex)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1006",
          "level": "error",
          "message": {
            "text": "Consider a design where 'AnalyzeCommandBase<TContext, TOptions>.AnalyzeTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)' doesn't nest generic type 'IEnumerable<ISkimmer<TContext>>'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 543,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 542,
                  "startColumn": 1,
                  "endLine": 544,
                  "endColumn": 61,
                  "charOffset": 20985,
                  "charLength": 211,
                  "snippet": {
                    "text": "        protected virtual void AnalyzeTarget(IEnumerable<ISkimmer<TContext>> skimmers, TContext context, HashSet<string> disabledSkimmers)\r\n        {\r\n            foreach (ISkimmer<TContext> skimmer in skimmers)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.AnalyzeTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)', validate parameter 'skimmers' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 544,
                  "snippet": {
                    "text": "            foreach (ISkimmer<TContext> skimmer in skimmers)"
                  }
                },
                "contextRegion": {
                  "startLine": 543,
                  "startColumn": 1,
                  "endLine": 545,
                  "endColumn": 14,
                  "charOffset": 21125,
                  "charLength": 86,
                  "snippet": {
                    "text": "        {\r\n            foreach (ISkimmer<TContext> skimmer in skimmers)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.AnalyzeTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)', validate parameter 'disabledSkimmers' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 546,
                  "snippet": {
                    "text": "                if (disabledSkimmers.Contains(skimmer.Id)) { continue; }"
                  }
                },
                "contextRegion": {
                  "startLine": 545,
                  "startColumn": 1,
                  "endLine": 547,
                  "endColumn": 1,
                  "charOffset": 21198,
                  "charLength": 89,
                  "snippet": {
                    "text": "            {\r\n                if (disabledSkimmers.Contains(skimmer.Id)) { continue; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "2"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1006",
          "level": "error",
          "message": {
            "text": "Consider a design where 'AnalyzeCommandBase<TContext, TOptions>.AnalyzeTargets(TOptions, IEnumerable<ISkimmer<TContext>>, TContext, IEnumerable<string>)' doesn't nest generic type 'IEnumerable<ISkimmer<TContext>>'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 476,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 475,
                  "startColumn": 1,
                  "endLine": 477,
                  "endColumn": 70,
                  "charOffset": 18350,
                  "charLength": 122,
                  "snippet": {
                    "text": "            IEnumerable<string> targets)\r\n        {\r\n            HashSet<string> disabledSkimmers = new HashSet<string>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTargets(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.IEnumerable`1<System.String>)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.AnalyzeTargets(TOptions, IEnumerable<ISkimmer<TContext>>, TContext, IEnumerable<string>)', validate parameter 'skimmers' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 479,
                  "snippet": {
                    "text": "            foreach (ISkimmer<TContext> skimmer in skimmers)"
                  }
                },
                "contextRegion": {
                  "startLine": 478,
                  "startColumn": 1,
                  "endLine": 480,
                  "endColumn": 14,
                  "charOffset": 18474,
                  "charLength": 77,
                  "snippet": {
                    "text": "\r\n            foreach (ISkimmer<TContext> skimmer in skimmers)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTargets(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.IEnumerable`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.AnalyzeTargets(TOptions, IEnumerable<ISkimmer<TContext>>, TContext, IEnumerable<string>)', validate parameter 'targets' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            foreach (string target in targets)"
                  }
                },
                "contextRegion": {
                  "startLine": 499,
                  "startColumn": 1,
                  "endLine": 501,
                  "endColumn": 14,
                  "charOffset": 19445,
                  "charLength": 63,
                  "snippet": {
                    "text": "\r\n            foreach (string target in targets)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTargets(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.IEnumerable`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "3"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1500",
          "level": "error",
          "message": {
            "text": "'rootContext', a parameter declared in 'AnalyzeCommandBase<TContext, TOptions>.AnalyzeTargets(TOptions, IEnumerable<ISkimmer<TContext>>, TContext, IEnumerable<string>)', has the same name as an instance field on the type. Change the name of one of these items.",
            "messageId": "Parameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 476,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 475,
                  "startColumn": 1,
                  "endLine": 477,
                  "endColumn": 70,
                  "charOffset": 18350,
                  "charLength": 122,
                  "snippet": {
                    "text": "            IEnumerable<string> targets)\r\n        {\r\n            HashSet<string> disabledSkimmers = new HashSet<string>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.AnalyzeTargets(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.IEnumerable`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "rootContext#Parameter"
          },
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'AnalyzeCommandBase<TContext, TOptions>.CreateContext(TOptions, IAnalysisLogger, RuntimeConditions, string)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 1,
                  "endLine": 268,
                  "endColumn": 42,
                  "charOffset": 10260,
                  "charLength": 89,
                  "snippet": {
                    "text": "            string filePath = null)\r\n        {\r\n            var context = new TContext();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.CreateContext(!1,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,Microsoft.CodeAnalysis.Sarif.RuntimeConditions,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'AnalyzeCommandBase<TContext, TOptions>.CreateSkimmers(TContext)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 432,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 431,
                  "startColumn": 1,
                  "endLine": 433,
                  "endColumn": 14,
                  "charOffset": 16883,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.CreateSkimmers(!0)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1000",
          "level": "error",
          "message": {
            "text": "Remove 'AnalyzeCommandBase<TContext, TOptions>.DefaultPolicyName' from 'AnalyzeCommandBase<TContext, TOptions>' or make it an instance member."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DefaultPolicyName"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1006",
          "level": "error",
          "message": {
            "text": "Consider a design where 'AnalyzeCommandBase<TContext, TOptions>.DetermineApplicabilityAndAnalyze(TOptions, IEnumerable<ISkimmer<TContext>>, TContext, string, HashSet<string>)' doesn't nest generic type 'IEnumerable<ISkimmer<TContext>>'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 515,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 514,
                  "startColumn": 1,
                  "endLine": 516,
                  "endColumn": 105,
                  "charOffset": 19991,
                  "charLength": 162,
                  "snippet": {
                    "text": "            HashSet<string> disabledSkimmers)\r\n        {\r\n            var context = CreateContext(options, rootContext.Logger, rootContext.RuntimeErrors, target);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityAndAnalyze(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.String,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1500",
          "level": "error",
          "message": {
            "text": "'rootContext', a parameter declared in 'AnalyzeCommandBase<TContext, TOptions>.DetermineApplicabilityAndAnalyze(TOptions, IEnumerable<ISkimmer<TContext>>, TContext, string, HashSet<string>)', has the same name as an instance field on the type. Change the name of one of these items.",
            "messageId": "Parameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 515,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 514,
                  "startColumn": 1,
                  "endLine": 516,
                  "endColumn": 105,
                  "charOffset": 19991,
                  "charLength": 162,
                  "snippet": {
                    "text": "            HashSet<string> disabledSkimmers)\r\n        {\r\n            var context = CreateContext(options, rootContext.Logger, rootContext.RuntimeErrors, target);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityAndAnalyze(!1,System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.String,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "rootContext#Parameter"
          },
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'AnalyzeCommandBase<TContext, TOptions>.DetermineApplicabilityForTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 581,
                  "snippet": {
                    "text": "                catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 580,
                  "startColumn": 1,
                  "endLine": 582,
                  "endColumn": 18,
                  "charOffset": 22438,
                  "charLength": 74,
                  "snippet": {
                    "text": "                }\r\n                catch (Exception ex)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityForTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1006",
          "level": "error",
          "message": {
            "text": "Consider a design where 'AnalyzeCommandBase<TContext, TOptions>.DetermineApplicabilityForTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)' doesn't nest generic type 'IEnumerable<ISkimmer<TContext>>'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 565,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 564,
                  "startColumn": 1,
                  "endLine": 566,
                  "endColumn": 68,
                  "charOffset": 21838,
                  "charLength": 125,
                  "snippet": {
                    "text": "            HashSet<string> disabledSkimmers)\r\n        {\r\n            var candidateSkimmers = new List<ISkimmer<TContext>>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityForTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1006",
          "level": "error",
          "message": {
            "text": "Consider a design where 'AnalyzeCommandBase<TContext, TOptions>.DetermineApplicabilityForTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)' doesn't nest generic type 'IEnumerable<ISkimmer<TContext>>'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 565,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 564,
                  "startColumn": 1,
                  "endLine": 566,
                  "endColumn": 68,
                  "charOffset": 21838,
                  "charLength": 125,
                  "snippet": {
                    "text": "            HashSet<string> disabledSkimmers)\r\n        {\r\n            var candidateSkimmers = new List<ISkimmer<TContext>>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityForTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.DetermineApplicabilityForTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)', validate parameter 'skimmers' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 568,
                  "snippet": {
                    "text": "            foreach (ISkimmer<TContext> skimmer in skimmers)"
                  }
                },
                "contextRegion": {
                  "startLine": 567,
                  "startColumn": 1,
                  "endLine": 569,
                  "endColumn": 14,
                  "charOffset": 21965,
                  "charLength": 77,
                  "snippet": {
                    "text": "\r\n            foreach (ISkimmer<TContext> skimmer in skimmers)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityForTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.DetermineApplicabilityForTarget(IEnumerable<ISkimmer<TContext>>, TContext, HashSet<string>)', validate parameter 'disabledSkimmers' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 570,
                  "snippet": {
                    "text": "                if (disabledSkimmers.Contains(skimmer.Id)) { continue; }"
                  }
                },
                "contextRegion": {
                  "startLine": 569,
                  "startColumn": 1,
                  "endLine": 571,
                  "endColumn": 1,
                  "charOffset": 22029,
                  "charLength": 89,
                  "snippet": {
                    "text": "            {\r\n                if (disabledSkimmers.Contains(skimmer.Id)) { continue; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.DetermineApplicabilityForTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "2"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'AnalyzeCommandBase<TContext, TOptions>.GenerateSensitiveTokensList()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 378,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 377,
                  "startColumn": 1,
                  "endLine": 379,
                  "endColumn": 45,
                  "charOffset": 14880,
                  "charLength": 122,
                  "snippet": {
                    "text": "        private IEnumerable<string> GenerateSensitiveTokensList()\r\n        {\r\n            var result = new List<String>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.GenerateSensitiveTokensList()"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'AnalyzeCommandBase<TContext, TOptions>.GetCurrentRunningOS()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 447,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "startColumn": 1,
                  "endLine": 448,
                  "endColumn": 60,
                  "charOffset": 17415,
                  "charLength": 127,
                  "snippet": {
                    "text": "        private SupportedPlatform GetCurrentRunningOS()\r\n        {\r\n            // RuntimeInformation is not present in NET452."
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.GetCurrentRunningOS()"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2000",
          "level": "warning",
          "message": {
            "text": "In method 'AnalyzeCommandBase<TContext, TOptions>.InitializeLogger(AnalyzeOptionsBase)', object 'logger' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'logger' before all references to it are out of scope.",
            "messageId": "ExceptionEdge"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "            var logger = new AggregatingLogger();"
                  }
                },
                "contextRegion": {
                  "startLine": 212,
                  "startColumn": 1,
                  "endLine": 214,
                  "endColumn": 1,
                  "charOffset": 8296,
                  "charLength": 62,
                  "snippet": {
                    "text": "        {\r\n            var logger = new AggregatingLogger();\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeLogger(Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeOptionsBase)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ExceptionEdge"
          },
          "properties": {
            "Category": "Microsoft.Reliability",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'AnalyzeCommandBase<TContext, TOptions>.InitializeLogger(AnalyzeOptionsBase)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 212,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "endLine": 213,
                  "endColumn": 50,
                  "charOffset": 8208,
                  "charLength": 148,
                  "snippet": {
                    "text": "        internal AggregatingLogger InitializeLogger(AnalyzeOptionsBase analyzeOptions)\r\n        {\r\n            var logger = new AggregatingLogger();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeLogger(Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeOptionsBase)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2000",
          "level": "warning",
          "message": {
            "text": "In method 'AnalyzeCommandBase<TContext, TOptions>.InitializeOutputFile(TOptions, TContext, HashSet<string>)', object 'sarifLogger' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sarifLogger' before all references to it are out of scope.",
            "messageId": "ExceptionEdge"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 356,
                  "snippet": {
                    "text": "                        var sarifLogger = new SarifLogger("
                  }
                },
                "contextRegion": {
                  "startLine": 355,
                  "startColumn": 1,
                  "endLine": 357,
                  "endColumn": 67,
                  "charOffset": 13822,
                  "charLength": 128,
                  "snippet": {
                    "text": "\r\n                        var sarifLogger = new SarifLogger(\r\n                                    analyzeOptions.OutputFilePath,"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeOutputFile(!1,!0,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ExceptionEdge"
          },
          "properties": {
            "Category": "Microsoft.Reliability",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'AnalyzeCommandBase<TContext, TOptions>.InitializeSkimmers(HashSet<ISkimmer<TContext>>, TContext)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 632,
                  "snippet": {
                    "text": "                catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 631,
                  "startColumn": 1,
                  "endLine": 633,
                  "endColumn": 18,
                  "charOffset": 24437,
                  "charLength": 74,
                  "snippet": {
                    "text": "                }\r\n                catch (Exception ex)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeSkimmers(System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1006",
          "level": "error",
          "message": {
            "text": "Consider a design where 'AnalyzeCommandBase<TContext, TOptions>.InitializeSkimmers(HashSet<ISkimmer<TContext>>, TContext)' doesn't nest generic type 'HashSet<ISkimmer<TContext>>'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 620,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 619,
                  "startColumn": 1,
                  "endLine": 621,
                  "endColumn": 94,
                  "charOffset": 23853,
                  "charLength": 234,
                  "snippet": {
                    "text": "        protected virtual HashSet<ISkimmer<TContext>> InitializeSkimmers(HashSet<ISkimmer<TContext>> skimmers, TContext context)\r\n        {\r\n            HashSet<ISkimmer<TContext>> disabledSkimmers = new HashSet<ISkimmer<TContext>>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeSkimmers(System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1006",
          "level": "error",
          "message": {
            "text": "Consider a design where 'AnalyzeCommandBase<TContext, TOptions>.InitializeSkimmers(HashSet<ISkimmer<TContext>>, TContext)' doesn't nest generic type 'HashSet<ISkimmer<TContext>>'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 620,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 619,
                  "startColumn": 1,
                  "endLine": 621,
                  "endColumn": 94,
                  "charOffset": 23853,
                  "charLength": 234,
                  "snippet": {
                    "text": "        protected virtual HashSet<ISkimmer<TContext>> InitializeSkimmers(HashSet<ISkimmer<TContext>> skimmers, TContext context)\r\n        {\r\n            HashSet<ISkimmer<TContext>> disabledSkimmers = new HashSet<ISkimmer<TContext>>();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeSkimmers(System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.InitializeSkimmers(HashSet<ISkimmer<TContext>>, TContext)', validate parameter 'skimmers' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 625,
                  "snippet": {
                    "text": "            foreach (ISkimmer<TContext> skimmer in skimmers)"
                  }
                },
                "contextRegion": {
                  "startLine": 624,
                  "startColumn": 1,
                  "endLine": 626,
                  "endColumn": 14,
                  "charOffset": 24157,
                  "charLength": 143,
                  "snippet": {
                    "text": "            // Initialize more than once per skimmer instantiation\r\n            foreach (ISkimmer<TContext> skimmer in skimmers)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InitializeSkimmers(System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<!0>>,!0)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.InvokeCatchingRelevantIOExceptions(Action, Action<Exception>)', validate parameter 'action' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 398,
                  "snippet": {
                    "text": "                action();"
                  }
                },
                "contextRegion": {
                  "startLine": 397,
                  "startColumn": 1,
                  "endLine": 399,
                  "endColumn": 14,
                  "charOffset": 15680,
                  "charLength": 55,
                  "snippet": {
                    "text": "            {\r\n                action();\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InvokeCatchingRelevantIOExceptions(System.Action,System.Action`1<System.Exception>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.InvokeCatchingRelevantIOExceptions(Action, Action<Exception>)', validate parameter 'exceptionHandler' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 402,
                  "snippet": {
                    "text": "                exceptionHandler(ex);"
                  }
                },
                "contextRegion": {
                  "startLine": 401,
                  "startColumn": 1,
                  "endLine": 403,
                  "endColumn": 14,
                  "charOffset": 15789,
                  "charLength": 67,
                  "snippet": {
                    "text": "            {\r\n                exceptionHandler(ex);\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.InvokeCatchingRelevantIOExceptions(System.Action,System.Action`1<System.Exception>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'AnalyzeCommandBase<TContext, TOptions>.LogToolNotification(IAnalysisLogger, string, FailureLevel, Exception)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 653,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 652,
                  "startColumn": 1,
                  "endLine": 654,
                  "endColumn": 48,
                  "charOffset": 25152,
                  "charLength": 92,
                  "snippet": {
                    "text": "            Exception ex = null)\r\n        {\r\n            ExceptionData exceptionData = null;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.LogToolNotification(Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,System.String,Microsoft.CodeAnalysis.Sarif.FailureLevel,System.Exception)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'AnalyzeCommandBase<TContext, TOptions>.LogToolNotification(IAnalysisLogger, string, FailureLevel, Exception)', validate parameter 'logger' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 668,
                  "snippet": {
                    "text": "            logger.LogToolNotification(new Notification"
                  }
                },
                "contextRegion": {
                  "startLine": 667,
                  "startColumn": 1,
                  "endLine": 669,
                  "endColumn": 14,
                  "charOffset": 25697,
                  "charLength": 72,
                  "snippet": {
                    "text": "\r\n            logger.LogToolNotification(new Notification\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.LogToolNotification(Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,System.String,Microsoft.CodeAnalysis.Sarif.FailureLevel,System.Exception)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1000",
          "level": "error",
          "message": {
            "text": "Remove 'AnalyzeCommandBase<TContext, TOptions>.RaiseUnhandledExceptionInDriverCode' from 'AnalyzeCommandBase<TContext, TOptions>' or make it an instance member."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "        public static bool RaiseUnhandledExceptionInDriverCode { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 1,
                  "charOffset": 884,
                  "charLength": 80,
                  "snippet": {
                    "text": "\r\n        public static bool RaiseUnhandledExceptionInDriverCode { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.RaiseUnhandledExceptionInDriverCode"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'AnalyzeCommandBase<TContext, TOptions>.Run(TOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 58,
                  "snippet": {
                    "text": "                catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 18,
                  "charOffset": 2030,
                  "charLength": 74,
                  "snippet": {
                    "text": "                }\r\n                catch (Exception ex)\r\n                {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.Run(!1)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1725",
          "level": "error",
          "message": {
            "text": "In member 'AnalyzeCommandBase<TContext, TOptions>.Run(TOptions)', change parameter name 'analyzeOptions' to 'options' in order to match the identifier as it has been declared in 'DriverCommand<TOptions>.Run(TOptions)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 76,
                  "charOffset": 1371,
                  "charLength": 144,
                  "snippet": {
                    "text": "        public override int Run(TOptions analyzeOptions)\r\n        {\r\n            // 0. Initialize an common logger that drives all outputs. This"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.Run(!1)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'AnalyzeCommandBase<TContext, TOptions>.ThrowExitApplicationException(TContext, ExitReason, Exception)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 610,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 609,
                  "startColumn": 1,
                  "endLine": 611,
                  "endColumn": 52,
                  "charOffset": 23451,
                  "charLength": 190,
                  "snippet": {
                    "text": "        protected void ThrowExitApplicationException(TContext context, ExitReason exitReason, Exception innerException = null)\r\n        {\r\n            RuntimeErrors |= context.RuntimeErrors;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.ThrowExitApplicationException(!0,Microsoft.CodeAnalysis.Sarif.Driver.ExitReason,System.Exception)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'AnalyzeCommandBase<TContext, TOptions>.ValidateFile(TContext, string, bool?)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs"
                },
                "region": {
                  "startLine": 160,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "endLine": 161,
                  "endColumn": 84,
                  "charOffset": 6385,
                  "charLength": 183,
                  "snippet": {
                    "text": "        private bool ValidateFile(TContext context, string filePath, bool? shouldExist)\r\n        {\r\n            if (filePath == null || filePath == DefaultPolicyName) { return true; }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeCommandBase`2.ValidateFile(!0,System.String,System.Nullable`1<System.Boolean>)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1002",
          "level": "error",
          "message": {
            "text": "Change 'List<string>' in 'ArgumentSplitter.CommandLineToArgvW(string)' to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/ArgumentSplitter.cs"
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 93,
                  "charOffset": 843,
                  "charLength": 172,
                  "snippet": {
                    "text": "        public static List<string> CommandLineToArgvW(string input)\r\n        {\r\n            // This function mimics CommandLineToArgvW's escaping behavior, documented here:"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ArgumentSplitter.CommandLineToArgvW(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Argv' in member name 'ArgumentSplitter.CommandLineToArgvW(string)' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/ArgumentSplitter.cs"
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 93,
                  "charOffset": 843,
                  "charLength": 172,
                  "snippet": {
                    "text": "        public static List<string> CommandLineToArgvW(string input)\r\n        {\r\n            // This function mimics CommandLineToArgvW's escaping behavior, documented here:"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ArgumentSplitter.CommandLineToArgvW(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Argv#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'DefaultDriverOptions.CreateRuleSpecificOption<T>(IRule, PerLanguageOption<T>)', validate parameter 'rule' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/DefaultDriverOptions.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            return new PerLanguageOption<T>("
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 57,
                  "charOffset": 1815,
                  "charLength": 203,
                  "snippet": {
                    "text": "            // that is further qualified (by feature name) to be associated with a different check.\r\n            return new PerLanguageOption<T>(\r\n                feature: rule.Id + \".\" + rule.Name.Text,"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DefaultDriverOptions.CreateRuleSpecificOption`1(Microsoft.CodeAnalysis.Sarif.IRule,Microsoft.CodeAnalysis.Sarif.PerLanguageOption`1<!!0>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'DefaultDriverOptions.CreateRuleSpecificOption<T>(IRule, PerLanguageOption<T>)', validate parameter 'option' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/DefaultDriverOptions.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            return new PerLanguageOption<T>("
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 57,
                  "charOffset": 1815,
                  "charLength": 203,
                  "snippet": {
                    "text": "            // that is further qualified (by feature name) to be associated with a different check.\r\n            return new PerLanguageOption<T>(\r\n                feature: rule.Id + \".\" + rule.Name.Text,"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DefaultDriverOptions.CreateRuleSpecificOption`1(Microsoft.CodeAnalysis.Sarif.IRule,Microsoft.CodeAnalysis.Sarif.PerLanguageOption`1<!!0>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2211",
          "level": "warning",
          "message": {
            "text": "Consider making 'DefaultDriverOptions.Instance' non-public or a constant."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DefaultDriverOptions.Instance"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1710",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DisposableEnumerable`1"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1000",
          "level": "error",
          "message": {
            "text": "Remove 'DriverCommand<T>.FAILURE' from 'DriverCommand<T>' or make it an instance member."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1.FAILURE"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1709",
          "level": "error",
          "message": {
            "text": "Correct the casing of 'FAILURE' in member name 'DriverCommand<T>.FAILURE' by changing it to 'Failure'.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1.FAILURE"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "FAILURE#Member"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1000",
          "level": "error",
          "message": {
            "text": "Remove 'DriverCommand<T>.SUCCESS' from 'DriverCommand<T>' or make it an instance member."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1.SUCCESS"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1709",
          "level": "error",
          "message": {
            "text": "Correct the casing of 'SUCCESS' in member name 'DriverCommand<T>.SUCCESS' by changing it to 'Success'.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverCommand`1.SUCCESS"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "SUCCESS#Member"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'DriverExtensionMethods.ConvertToLoggingOptions(this AnalyzeOptionsBase)', validate parameter 'analyzeOptions' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/DriverExtensionMethods.cs"
                },
                "region": {
                  "startLine": 14,
                  "snippet": {
                    "text": "            if (analyzeOptions.Verbose) { loggingOptions |= LoggingOptions.Verbose; }"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 94,
                  "charOffset": 499,
                  "charLength": 182,
                  "snippet": {
                    "text": "\r\n            if (analyzeOptions.Verbose) { loggingOptions |= LoggingOptions.Verbose; }\r\n            if (analyzeOptions.PrettyPrint) { loggingOptions |= LoggingOptions.PrettyPrint; }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverExtensionMethods.ConvertToLoggingOptions(Microsoft.CodeAnalysis.Sarif.Driver.AnalyzeOptionsBase)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1811",

          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverResources..ctor()"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2000",
          "level": "warning",
          "message": {
            "text": "In method 'DriverUtilities.GetExports<T>(IEnumerable<Assembly>)', call System.IDisposable.Dispose on object 'container' before all references to it are out of scope.",
            "messageId": "NonExceptionEdge"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/CompositionUtilities.cs"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "            var container = CreateCompositionContainer<T>(assemblies);"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 65,
                  "charOffset": 517,
                  "charLength": 147,
                  "snippet": {
                    "text": "        {\r\n            var container = CreateCompositionContainer<T>(assemblies);\r\n            return container.GetExports<T>().ToImmutableArray();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.DriverUtilities.GetExports`1(System.Collections.Generic.IEnumerable`1<System.Reflection.Assembly>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NonExceptionEdge"
          },
          "properties": {
            "Category": "Microsoft.Reliability",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1060",
          "level": "warning",
          "message": {
            "text": "Because it is a P/Invoke method, 'EntryPointUtilities.CommandLineToArgvW(string, out int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities.CommandLineToArgvW(System.String,System.Int32&)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'EntryPointUtilities.GenerateArguments(string[], IFileSystem, IEnvironmentVariables)', validate parameter 'args' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/EntryPointUtilities.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "            foreach (string argument in args)"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 14,
                  "charOffset": 598,
                  "charLength": 62,
                  "snippet": {
                    "text": "\r\n            foreach (string argument in args)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities.GenerateArguments(System.String[],Microsoft.CodeAnalysis.Sarif.IFileSystem,Microsoft.CodeAnalysis.Sarif.Driver.IEnvironmentVariables)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'EntryPointUtilities.GenerateArguments(string[], IFileSystem, IEnvironmentVariables)', validate parameter 'fileSystem' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/EntryPointUtilities.cs"
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "                responseFile = fileSystem.GetFullPath(responseFile);"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 1,
                  "charOffset": 919,
                  "charLength": 165,
                  "snippet": {
                    "text": "                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);\r\n                responseFile = fileSystem.GetFullPath(responseFile);\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities.GenerateArguments(System.String[],Microsoft.CodeAnalysis.Sarif.IFileSystem,Microsoft.CodeAnalysis.Sarif.Driver.IEnvironmentVariables)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'EntryPointUtilities.GenerateArguments(string[], IFileSystem, IEnvironmentVariables)', validate parameter 'environmentVariables' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/EntryPointUtilities.cs"
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 69,
                  "charOffset": 917,
                  "charLength": 165,
                  "snippet": {
                    "text": "\r\n                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);\r\n                responseFile = fileSystem.GetFullPath(responseFile);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities.GenerateArguments(System.String[],Microsoft.CodeAnalysis.Sarif.IFileSystem,Microsoft.CodeAnalysis.Sarif.Driver.IEnvironmentVariables)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "2"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1060",
          "level": "warning",
          "message": {
            "text": "Because it is a P/Invoke method, 'EntryPointUtilities.LocalFree(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EntryPointUtilities.LocalFree(System.IntPtr)"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions.LexicographicalCompare`1(System.Collections.Generic.IEnumerable`1<!!0>,System.Collections.Generic.IEnumerable`1<!!0>,System.Collections.Generic.IComparer`1<!!0>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions.LexicographicalCompare`1(System.Collections.Generic.IEnumerable`1<!!0>,System.Collections.Generic.IEnumerable`1<!!0>,System.Collections.Generic.IComparer`1<!!0>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1045",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions.RemoveIf`1(!!0[]&,System.Func`2<!!0,System.Boolean>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.EnumerableExtensions.RemoveIf`1(!!0[]&,System.Func`2<!!0,System.Boolean>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1811",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExceptionStrings..ctor()"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1032",
          "level": "error",
          "message": {
            "text": "Add the following constructor to 'ExitApplicationException<T>': protected ExitApplicationException`1(SerializationInfo, StreamingContext).",
            "messageId": "MissingConstructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExitApplicationException`1"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "MissingConstructor"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2237",
          "level": "error",
          "message": {
            "text": "Add [Serializable] to 'ExitApplicationException<T>' as this type implements ISerializable."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExitApplicationException`1"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1303",
          "level": "warning",
          "message": {
            "text": "Method 'ExportConfigurationCommandBase.Run(ExportConfigurationOptions)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: \"Configuration file saved to: \".",
            "messageId": "KnownValue"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportConfigurationCommandBase.cs"
                },
                "region": {
                  "startLine": 78,
                  "snippet": {
                    "text": "                Console.WriteLine(\"Configuration file saved to: \" + Path.GetFullPath(exportOptions.OutputFilePath));"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 1,
                  "charOffset": 3420,
                  "charLength": 120,
                  "snippet": {
                    "text": "\r\n                Console.WriteLine(\"Configuration file saved to: \" + Path.GetFullPath(exportOptions.OutputFilePath));\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Console.WriteLine(System.String)#KnownValue"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'ExportConfigurationCommandBase.Run(ExportConfigurationOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportConfigurationCommandBase.cs"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "endLine": 83,
                  "endColumn": 14,
                  "charOffset": 3577,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1725",
          "level": "error",
          "message": {
            "text": "In member 'ExportConfigurationCommandBase.Run(ExportConfigurationOptions)', change parameter name 'exportOptions' to 'options' in order to match the identifier as it has been declared in 'DriverCommand<ExportConfigurationOptions>.Run(ExportConfigurationOptions)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportConfigurationCommandBase.cs"
                },
                "region": {
                  "startLine": 14,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 34,
                  "charOffset": 427,
                  "charLength": 119,
                  "snippet": {
                    "text": "        public override int Run(ExportConfigurationOptions exportOptions)\r\n        {\r\n            int result = FAILURE;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ExportConfigurationCommandBase.Run(ExportConfigurationOptions)', validate parameter 'exportOptions' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportConfigurationCommandBase.cs"
                },
                "region": {
                  "startLine": 59,
                  "snippet": {
                    "text": "                string extension = Path.GetExtension(exportOptions.OutputFilePath);"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 1,
                  "charOffset": 2621,
                  "charLength": 87,
                  "snippet": {
                    "text": "\r\n                string extension = Path.GetExtension(exportOptions.OutputFilePath);\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportConfigurationOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'ExportRulesMetadataCommandBase.GetIdIntegerSuffix(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs"
                },
                "region": {
                  "startLine": 166,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "endLine": 167,
                  "endColumn": 32,
                  "charOffset": 6053,
                  "charLength": 93,
                  "snippet": {
                    "text": "        private int GetIdIntegerSuffix(string id)\r\n        {\r\n            int alphaCount = 0;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.GetIdIntegerSuffix(System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExportRulesMetadataCommandBase.GetIdIntegerSuffix(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternate"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs"
                },
                "region": {
                  "startLine": 178,
                  "snippet": {
                    "text": "            return Int32.Parse(id.Substring(alphaCount));"
                  }
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "endLine": 179,
                  "endColumn": 10,
                  "charOffset": 6370,
                  "charLength": 83,
                  "snippet": {
                    "text": "            }\r\n            return Int32.Parse(id.Substring(alphaCount));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.GetIdIntegerSuffix(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int32.Parse(System.String)#IFormatProviderAlternate"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1506",
          "level": "warning",
          "message": {
            "text": "'ExportRulesMetadataCommandBase.OutputSarifRulesMetada(string, ImmutableArray<IRule>)' is coupled with 31 different types from 10 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.",
            "messageId": "Method"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs"
                },
                "region": {
                  "startLine": 103,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 38,
                  "charOffset": 3802,
                  "charLength": 148,
                  "snippet": {
                    "text": "        private void OutputSarifRulesMetada(string outputFilePath, ImmutableArray<IRule> skimmers)\r\n        {\r\n            var log = new SarifLog();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.OutputSarifRulesMetada(System.String,System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Sarif.IRule>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Method"
          },
          "properties": {
            "Category": "Microsoft.Maintainability",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1303",
          "level": "warning",
          "message": {
            "text": "Method 'ExportRulesMetadataCommandBase.Run(ExportRulesMetadataOptions)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: \"SARIF, SonarQube,  rules metadata exported to: \".",
            "messageId": "KnownValue"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs"
                },
                "region": {
                  "startLine": 54,
                  "snippet": {
                    "text": "                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 14,
                  "charOffset": 1765,
                  "charLength": 161,
                  "snippet": {
                    "text": "                result = SUCCESS;\r\n                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Console.WriteLine(System.String)#KnownValue"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'ExportRulesMetadataCommandBase.Run(ExportRulesMetadataOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs"
                },
                "region": {
                  "startLine": 56,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 14,
                  "charOffset": 1913,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA2204",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of the unrecognized token 'SonarQube' in the literal '\"SonarQube\"'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs"
                },
                "region": {
                  "startLine": 54,
                  "snippet": {
                    "text": "                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));"
                  }
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 14,
                  "charOffset": 1765,
                  "charLength": 161,
                  "snippet": {
                    "text": "                result = SUCCESS;\r\n                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));\r\n            }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "SonarQube"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1725",
          "level": "error",
          "message": {
            "text": "In member 'ExportRulesMetadataCommandBase.Run(ExportRulesMetadataOptions)', change parameter name 'exportOptions' to 'options' in order to match the identifier as it has been declared in 'DriverCommand<ExportRulesMetadataOptions>.Run(ExportRulesMetadataOptions)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 34,
                  "charOffset": 520,
                  "charLength": 119,
                  "snippet": {
                    "text": "        public override int Run(ExportRulesMetadataOptions exportOptions)\r\n        {\r\n            int result = FAILURE;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0#"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ExportRulesMetadataCommandBase.Run(ExportRulesMetadataOptions)', validate parameter 'exportOptions' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "                string outputFilePath = exportOptions.OutputFilePath;"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 70,
                  "charOffset": 787,
                  "charLength": 177,
                  "snippet": {
                    "text": "                string format = \"\";\r\n                string outputFilePath = exportOptions.OutputFilePath;\r\n                string extension = Path.GetExtension(outputFilePath);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataCommandBase.Run(Microsoft.CodeAnalysis.Sarif.Driver.ExportRulesMetadataOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1026",
          "level": "error",
          "message": {
            "text": "Replace method 'FileSpecifier.FileSpecifier(string, bool)' with an overload that supplies all default arguments."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/FileSpecifier.cs"
                },
                "region": {
                  "startLine": 12,
                  "snippet": {
                    "text": "        public FileSpecifier(string specifier, bool recurse = false)"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 10,
                  "charOffset": 307,
                  "charLength": 86,
                  "snippet": {
                    "text": "    {\r\n        public FileSpecifier(string specifier, bool recurse = false)\r\n        {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.FileSpecifier..ctor(System.String,System.Boolean)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1021",
          "level": "warning",
          "message": {
            "text": "Consider a design that does not require that 'reasonIfNotApplicable' be an out parameter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1.CanAnalyze(!0,System.String&)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1#"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash.AddRange(System.Collections.Generic.IEnumerable`1<System.Int32>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash.AddRange(System.Collections.IEnumerable)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.MurmurHash.AddRange(System.Int32[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1702",
          "level": "error",
          "message": {
            "text": "The compound word 'PlugIn' in type name 'PlugInDriverCommand<T>' exists as a discrete term. If your usage is intended to be single word, case it as 'Plugin'.",
            "messageId": "TypeShouldBeDiscreteTerm"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.PlugInDriverCommand`1"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "PlugIn#TypeShouldBeDiscreteTerm"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1702",
          "level": "error",
          "message": {
            "text": "The compound word 'PlugIn' in member name 'PlugInDriverCommand<T>.DefaultPlugInAssemblies' exists as a discrete term. If your usage is intended to be single word, case it as 'Plugin' or strip the first token entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberShouldBeDiscreteTerm"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/PlugInDriverCommand.cs"
                },
                "region": {
                  "startLine": 14,
                  "snippet": {
                    "text": "            get { return null; }"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 59,
                  "charOffset": 429,
                  "charLength": 103,
                  "snippet": {
                    "text": "        {\r\n            get { return null; }\r\n            set { throw new InvalidOperationException(); }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.PlugInDriverCommand`1.DefaultPlugInAssemblies"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "PlugIn#MemberShouldBeDiscreteTerm"
          },
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2104",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ReferenceEqualityComparer`1.Instance"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Security",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1000",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.ReferenceEqualityComparer`1.Instance"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2215",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.RentalStream.Dispose(System.Boolean)"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1008",
          "level": "error",
          "message": {
            "text": "In enum 'RuleEnabledState', change the name of 'RuleEnabledState.Default' to 'None'.",
            "messageId": "FlagsRename"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.RuleEnabledState"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "FlagsRename"
          },
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1714",
          "level": "error",
          "message": {
            "text": "If enumeration name 'RuleEnabledState' is singular, change it to a plural form."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.RuleEnabledState"
            }
          ],
          "properties": {
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1012",
          "level": "warning",
          "message": {
            "text": "Change the accessibility of all public constructors in 'SkimmerBase<TContext>' to protected."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.SkimmerBase`1"
            }
          ],
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1303",
          "level": "warning",
          "message": {
            "text": "Method 'StatisticsLogger.AnalysisStopped(RuntimeConditions)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: \"# invalid targets: \".",
            "messageId": "KnownValue"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 81,
                  "charOffset": 720,
                  "charLength": 249,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\r\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\r\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.AnalysisStopped(Microsoft.CodeAnalysis.Sarif.RuntimeConditions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Console.WriteLine(System.String)#KnownValue"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1303",
          "level": "warning",
          "message": {
            "text": "Method 'StatisticsLogger.AnalysisStopped(RuntimeConditions)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: \"# valid targets: \".",
            "messageId": "KnownValue"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 88,
                  "charOffset": 686,
                  "charLength": 201,
                  "snippet": {
                    "text": "            Console.WriteLine();\r\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\r\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.AnalysisStopped(Microsoft.CodeAnalysis.Sarif.RuntimeConditions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Console.WriteLine(System.String)#KnownValue"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1303",
          "level": "warning",
          "message": {
            "text": "Method 'StatisticsLogger.AnalysisStopped(RuntimeConditions)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: \"Time elapsed: \".",
            "messageId": "KnownValue"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 10,
                  "charOffset": 800,
                  "charLength": 180,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\r\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.AnalysisStopped(Microsoft.CodeAnalysis.Sarif.RuntimeConditions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Console.WriteLine(System.String)#KnownValue"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'StatisticsLogger.AnalysisStopped(RuntimeConditions)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 88,
                  "charOffset": 686,
                  "charLength": 201,
                  "snippet": {
                    "text": "            Console.WriteLine();\r\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\r\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.AnalysisStopped(Microsoft.CodeAnalysis.Sarif.RuntimeConditions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int64.ToString#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'StatisticsLogger.AnalysisStopped(RuntimeConditions)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 81,
                  "charOffset": 720,
                  "charLength": 249,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\r\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\r\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.AnalysisStopped(Microsoft.CodeAnalysis.Sarif.RuntimeConditions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.Int64.ToString#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'StatisticsLogger.Dispose()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 80,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 10,
                  "charOffset": 2161,
                  "charLength": 51,
                  "snippet": {
                    "text": "        public void Dispose()\r\n        {\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.Dispose()"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'StatisticsLogger.Log(IRule, Result)', validate parameter 'result' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            Log(result.Level, result.RuleId);"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 10,
                  "charOffset": 1153,
                  "charLength": 67,
                  "snippet": {
                    "text": "        {\r\n            Log(result.Level, result.RuleId);\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.Log(Microsoft.CodeAnalysis.Sarif.IRule,Microsoft.CodeAnalysis.Sarif.Result)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'StatisticsLogger.Log(ResultLevel, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 59,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 27,
                  "charOffset": 1641,
                  "charLength": 96,
                  "snippet": {
                    "text": "        public void Log(ResultLevel level, string ruleId)\r\n        {\r\n            switch (level)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.Log(Microsoft.CodeAnalysis.Sarif.ResultLevel,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1801",
          "level": "warning",
          "message": {
            "text": "Parameter 'ruleId' of 'StatisticsLogger.Log(ResultLevel, string)' is never used. Remove the parameter or use it in the method body."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 59,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 27,
                  "charOffset": 1641,
                  "charLength": 96,
                  "snippet": {
                    "text": "        public void Log(ResultLevel level, string ruleId)\r\n        {\r\n            switch (level)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.Log(Microsoft.CodeAnalysis.Sarif.ResultLevel,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ruleId"
          },
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'StatisticsLogger.LogConfigurationNotification(Notification)', validate parameter 'notification' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/Sdk/StatisticsLogger.cs"
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "            if (notification.Id == Warnings.Wrn997_InvalidTarget)"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 14,
                  "charOffset": 1393,
                  "charLength": 91,
                  "snippet": {
                    "text": "        {\r\n            if (notification.Id == Warnings.Wrn997_InvalidTarget)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.StatisticsLogger.LogConfigurationNotification(Microsoft.CodeAnalysis.Sarif.Notification)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.TempFile..ctor(System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysis.Sarif.Driver.XmlWriterExtensions.WriteElementInt(System.Xml.XmlWriter,System.String,System.Int32)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1804",
          "level": "warning",
          "message": {
            "text": "'FileStreamExtensionMethods.ReadString(this FileStream, int)' declares a variable, 'byteRead', of type 'int', which is never used or is only assigned to. Use this variable or remove it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/FileStreamExtensionMethods.cs"
                },
                "region": {
                  "startLine": 18,
                  "snippet": {
                    "text": "            while ((byteRead = stream.ReadByte()) > 0)"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 14,
                  "charOffset": 491,
                  "charLength": 71,
                  "snippet": {
                    "text": "\r\n            while ((byteRead = stream.ReadByte()) > 0)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods.ReadString(System.IO.FileStream,System.Int32)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "byteRead"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'FileStreamExtensionMethods.ReadString(this FileStream, int)', validate parameter 'stream' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/FileStreamExtensionMethods.cs"
                },
                "region": {
                  "startLine": 13,
                  "snippet": {
                    "text": "            long startPosition = stream.Position;"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 1,
                  "charOffset": 368,
                  "charLength": 62,
                  "snippet": {
                    "text": "        {\r\n            long startPosition = stream.Position;\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods.ReadString(System.IO.FileStream,System.Int32)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1011",
          "level": "error",
          "message": {
            "text": "Consider changing the type of parameter 'stream' in 'FileStreamExtensionMethods.ReadToArray(this FileStream, int)' from 'FileStream' to its base type 'Stream'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/FileStreamExtensionMethods.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 45,
                  "charOffset": 1468,
                  "charLength": 133,
                  "snippet": {
                    "text": "        public static byte[] ReadToArray(this FileStream stream, int length)\r\n        {\r\n            byte[] bytes = new byte[length];"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods.ReadToArray(System.IO.FileStream,System.Int32)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'FileStreamExtensionMethods.ReadToArray(this FileStream, int)', validate parameter 'stream' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Driver.dll",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Driver/FileStreamExtensionMethods.cs"
                },
                "region": {
                  "startLine": 53,
                  "snippet": {
                    "text": "            int dataRead = stream.Read(bytes, 0, length);"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 36,
                  "charOffset": 1557,
                  "charLength": 140,
                  "snippet": {
                    "text": "            byte[] bytes = new byte[length];\r\n            int dataRead = stream.Read(bytes, 0, length);\r\n            if (dataRead != length)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.driver.dll!Microsoft.CodeAnalysisDriver.FileStreamExtensionMethods.ReadToArray(System.IO.FileStream,System.Int32)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2243",
          "level": "warning",
          "message": {
            "text": "In the constructor of 'AssemblyInformationalVersionAttribute', change the value of argument 'informationalVersion', which is currently \"2.0.0-csd.1.0.1\", to something that can be correctly parsed as 'Version'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Multitool' in assembly name 'Sarif.Multitool.exe'.",
            "messageId": "Assembly"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Multitool#Assembly"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in assembly name 'Sarif.Multitool.exe'.",
            "messageId": "Assembly"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Assembly"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1014",
          "level": "error",
          "message": {
            "text": "Mark 'Sarif.Multitool.exe' with CLSCompliant(true) because it exposes externally visible types."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe"
            }
          ],
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1824",
          "level": "warning",
          "message": {
            "text": "Because assembly 'Sarif.Multitool.exe' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1811",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.MultitoolResources..ctor()"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'AbsoluteUriCommand.Run(AbsoluteUriOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/AbsoluteUriCommand.cs"
                },
                "region": {
                  "startLine": 34,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 14,
                  "charOffset": 1224,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.AbsoluteUriCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.AbsoluteUriOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'BaselineCommand.Run(BaselineOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/BaselineCommand.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 14,
                  "charOffset": 1675,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.BaselineCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.BaselineOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'ConvertCommand.Run(ConvertOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/ConvertCommand.cs"
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 14,
                  "charOffset": 1687,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ConvertCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.ConvertOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'JTokenExtensions.HasProperty(this JToken, string)', validate parameter 'token' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/JTokenExtensions.cs"
                },
                "region": {
                  "startLine": 14,
                  "snippet": {
                    "text": "            return token.Children<JProperty>()"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 84,
                  "charOffset": 403,
                  "charLength": 142,
                  "snippet": {
                    "text": "        {\r\n            return token.Children<JProperty>()\r\n                .Any(jp => jp.Name.Equals(propertyName, StringComparison.Ordinal));"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.JTokenExtensions.HasProperty(Newtonsoft.Json.Linq.JToken,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'MergeCommand.Run(MergeOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/MergeCommand.cs"
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 14,
                  "charOffset": 1788,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.MergeCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.MergeOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Multitool' in type name 'MultitoolOptionsBase'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.MultitoolOptionsBase"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Multitool#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'RebaseUriCommand.Run(RebaseUriOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/RebaseUriCommand.cs"
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 14,
                  "charOffset": 1907,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1305",
          "level": "error",
          "message": {
            "text": "Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'RebaseUriCommand.Run(RebaseUriOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
            "messageId": "IFormatProviderAlternateString"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/RebaseUriCommand.cs"
                },
                "region": {
                  "startLine": 21,
                  "snippet": {
                    "text": "                    throw new ArgumentException($\"BasePath {rebaseOptions.BasePath} was not an absolute URI.  It must be.\");"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 18,
                  "charOffset": 629,
                  "charLength": 162,
                  "snippet": {
                    "text": "                {\r\n                    throw new ArgumentException($\"BasePath {rebaseOptions.BasePath} was not an absolute URI.  It must be.\");\r\n                }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.RebaseUriOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "System.String.Format(System.String,System.Object)#IFormatProviderAlternateString"
          },
          "properties": {
            "Category": "Microsoft.Globalization",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'RewriteCommand.Run(RewriteOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/RewriteCommand.cs"
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "            catch(Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 14,
                  "charOffset": 1234,
                  "charLength": 61,
                  "snippet": {
                    "text": "            }\r\n            catch(Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.RewriteCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.RewriteOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifPropertyName'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stderr' in member name 'SarifPropertyName.Stderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.Stderr"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stderr#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stdin' in member name 'SarifPropertyName.Stdin' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.Stdin"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stdin#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stdout' in member name 'SarifPropertyName.Stdout' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.Stdout"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stdout#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stderr' in member name 'SarifPropertyName.StdoutStderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.StdoutStderr"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stderr#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Stdout' in member name 'SarifPropertyName.StdoutStderr' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "Member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifPropertyName.StdoutStderr"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Stdout#Member"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifValidationContext'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1063",
          "level": "error",
          "message": {
            "text": "Provide an overridable implementation of Dispose(bool) on 'SarifValidationContext' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.",
            "messageId": "ProvideDisposeBool"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "ProvideDisposeBool"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1816",
          "level": "warning",
          "message": {
            "text": "Change 'SarifValidationContext.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.",
            "messageId": "NotCalled"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/SarifValidationContext.cs"
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 66,
                  "endColumn": 35,
                  "charOffset": 1691,
                  "charLength": 76,
                  "snippet": {
                    "text": "        public void Dispose()\r\n        {\r\n            // Nothing to dispose."
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext.Dispose()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "NotCalled"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1063",
          "level": "error",
          "message": {
            "text": "Modify 'SarifValidationContext.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.",
            "messageId": "DisposeImplementation"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/SarifValidationContext.cs"
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 66,
                  "endColumn": 35,
                  "charOffset": 1691,
                  "charLength": 76,
                  "snippet": {
                    "text": "        public void Dispose()\r\n        {\r\n            // Nothing to dispose."
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext.Dispose()"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "DisposeImplementation"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA2227",
          "level": "warning",
          "message": {
            "text": "Change 'SarifValidationContext.Policy' to be read-only by removing the property setter."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/SarifValidationContext.cs"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "        public PropertiesDictionary Policy { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 1,
                  "charOffset": 793,
                  "charLength": 60,
                  "snippet": {
                    "text": "\r\n        public PropertiesDictionary Policy { get; set; }\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext.Policy"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1031",
          "level": "error",
          "message": {
            "text": "Modify 'TransformCommand.Run(TransformOptions)' to catch a more specific exception than 'Exception' or rethrow the exception."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/TransformCommand.cs"
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "            catch (Exception ex)"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 14,
                  "charOffset": 2234,
                  "charLength": 62,
                  "snippet": {
                    "text": "            }\r\n            catch (Exception ex)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.TransformCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.TransformOptions)"
            }
          ],
          "properties": {
            "Level": "CriticalError",
            "Category": "Microsoft.Design",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1804",
          "level": "warning",
          "message": {
            "text": "'TransformCommand.Run(TransformOptions)' declares a variable, 'dataToInsert', of type 'OptionallyEmittedData', which is never used or is only assigned to. Use this variable or remove it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/TransformCommand.cs"
                },
                "region": {
                  "startLine": 24,
                  "snippet": {
                    "text": "                OptionallyEmittedData dataToInsert = transformOptions.DataToInsert.ToFlags();"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 1,
                  "charOffset": 795,
                  "charLength": 97,
                  "snippet": {
                    "text": "\r\n                OptionallyEmittedData dataToInsert = transformOptions.DataToInsert.ToFlags();\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.TransformCommand.Run(Microsoft.CodeAnalysis.Sarif.Multitool.TransformOptions)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "dataToInsert"
          },
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ValidateCommand.AnalyzeTarget(IEnumerable<ISkimmer<SarifValidationContext>>, SarifValidationContext, HashSet<string>)', validate parameter 'context' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/ValidateCommand.cs"
                },
                "region": {
                  "startLine": 55,
                  "snippet": {
                    "text": "            bool ok = Validate(context.TargetUri.LocalPath, context.SchemaFilePath, context.Logger);"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 1,
                  "charOffset": 2127,
                  "charLength": 148,
                  "snippet": {
                    "text": "            // there's no point in going on.\r\n            bool ok = Validate(context.TargetUri.LocalPath, context.SchemaFilePath, context.Logger);\r\n"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.AnalyzeTarget(System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.Sarif.Driver.ISkimmer`1<Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext>>,Microsoft.CodeAnalysis.Sarif.Multitool.SarifValidationContext,System.Collections.Generic.HashSet`1<System.String>)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "1"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'ValidateCommand.CreateContext(ValidateOptions, IAnalysisLogger, RuntimeConditions, string)', validate parameter 'options' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/ValidateCommand.cs"
                },
                "region": {
                  "startLine": 40,
                  "snippet": {
                    "text": "            context.SchemaFilePath = options.SchemaFilePath;"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 28,
                  "charOffset": 1347,
                  "charLength": 197,
                  "snippet": {
                    "text": "            SarifValidationContext context = base.CreateContext(options, logger, runtimeErrors, filePath);\r\n            context.SchemaFilePath = options.SchemaFilePath;\r\n            return context;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.CreateContext(Microsoft.CodeAnalysis.Sarif.Multitool.ValidateOptions,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger,Microsoft.CodeAnalysis.Sarif.RuntimeConditions,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'ValidateCommand.Validate(string, string, IAnalysisLogger)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/ValidateCommand.cs"
                },
                "region": {
                  "startLine": 95,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 28,
                  "charOffset": 3676,
                  "charLength": 141,
                  "snippet": {
                    "text": "        private bool Validate(string instanceFilePath, string schemaFilePath, IAnalysisLogger logger)\r\n        {\r\n            bool ok = true;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidateCommand.Validate(System.String,System.String,Microsoft.CodeAnalysis.Sarif.IAnalysisLogger)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1811",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.ValidatorResources..ctor()"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'DoNotUseFriendlyNameAsRuleId.Analyze(Rule, string)', validate parameter 'rule' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/DoNotUseFriendlyNameAsRuleId.cs"
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "            if (rule.Id != null &&"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 37,
                  "charOffset": 1158,
                  "charLength": 83,
                  "snippet": {
                    "text": "        {\r\n            if (rule.Id != null &&\r\n                rule.Name != null &&"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.DoNotUseFriendlyNameAsRuleId.Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'EndColumnMustNotBeLessThanStartColumn.Analyze(Region, string)', validate parameter 'region' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/EndColumnMustNotBeLessThanStartColumn.cs"
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "            if (RegionIsOnOneLine(region, regionToken) &&"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 72,
                  "charOffset": 1382,
                  "charLength": 132,
                  "snippet": {
                    "text": "\r\n            if (RegionIsOnOneLine(region, regionToken) &&\r\n                regionToken.HasProperty(SarifPropertyName.EndColumn) &&"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndColumnMustNotBeLessThanStartColumn.Analyze(Microsoft.CodeAnalysis.Sarif.Region,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'EndLineMustNotBeLessThanStartLine.Analyze(Region, string)', validate parameter 'region' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/EndLineMustNotBeLessThanStartLine.cs"
                },
                "region": {
                  "startLine": 41,
                  "snippet": {
                    "text": "            if (regionToken.HasProperty(SarifPropertyName.EndLine) &&"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 51,
                  "charOffset": 1341,
                  "charLength": 123,
                  "snippet": {
                    "text": "\r\n            if (regionToken.HasProperty(SarifPropertyName.EndLine) &&\r\n                region.EndLine < region.StartLine)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndLineMustNotBeLessThanStartLine.Analyze(Microsoft.CodeAnalysis.Sarif.Region,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'EndTimeMustBeAfterStartTime.Analyze(Invocation, string)', validate parameter 'invocation' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/EndTimeMustBeAfterStartTime.cs"
                },
                "region": {
                  "startLine": 40,
                  "snippet": {
                    "text": "            if (invocation.StartTime > invocation.EndTime)"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 14,
                  "charOffset": 1220,
                  "charLength": 84,
                  "snippet": {
                    "text": "        {\r\n            if (invocation.StartTime > invocation.EndTime)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.EndTimeMustBeAfterStartTime.Analyze(Microsoft.CodeAnalysis.Sarif.Invocation,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'HashAlgorithmsMustBeUnique.Analyze(FileData, string, string)', validate parameter 'fileData' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/HashAlgorithmsMustBeUnique.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            if (fileData.Hashes != null)"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 14,
                  "charOffset": 1199,
                  "charLength": 66,
                  "snippet": {
                    "text": "        {\r\n            if (fileData.Hashes != null)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.HashAlgorithmsMustBeUnique.Analyze(Microsoft.CodeAnalysis.Sarif.FileData,System.String,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'MessagesShouldEndWithPeriod.Analyze(Message, string)', validate parameter 'message' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/MessagesShouldEndWithPeriod.cs"
                },
                "region": {
                  "startLine": 70,
                  "snippet": {
                    "text": "            AnalyzeMessageString(message.Text, messagePointer, SarifPropertyName.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 96,
                  "charOffset": 2442,
                  "charLength": 195,
                  "snippet": {
                    "text": "        {\r\n            AnalyzeMessageString(message.Text, messagePointer, SarifPropertyName.Text);\r\n            AnalyzeMessageString(message.RichText, messagePointer, SarifPropertyName.RichText);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.MessagesShouldEndWithPeriod.Analyze(Microsoft.CodeAnalysis.Sarif.Message,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'MessagesShouldEndWithPeriod.Analyze(Rule, string)', validate parameter 'rule' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/MessagesShouldEndWithPeriod.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            AnalyzeMessageStrings(rule.MessageStrings, rulePointer, SarifPropertyName.MessageStrings);"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 111,
                  "charOffset": 1184,
                  "charLength": 225,
                  "snippet": {
                    "text": "        {\r\n            AnalyzeMessageStrings(rule.MessageStrings, rulePointer, SarifPropertyName.MessageStrings);\r\n            AnalyzeMessageStrings(rule.RichMessageStrings, rulePointer, SarifPropertyName.RichMessageStrings);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.MessagesShouldEndWithPeriod.Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1811",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.RuleResources..ctor()"
            }
          ],
          "suppressionStates": ["suppressedInSource"],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "Correct the spelling of 'Sarif' in type name 'SarifValidationSkimmerBase'.",
            "messageId": "Type"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
                  "uriBaseId": "$(ProjectDir)"
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.SarifValidationSkimmerBase"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "Sarif#Type"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1704",
          "level": "warning",
          "message": {
            "text": "In method 'SarifValidationSkimmerBase.LogResult(string, string, params string[])', correct the spelling of 'j' in parameter name 'jPointer' or remove it entirely if it represents any sort of Hungarian notation.",
            "messageId": "MemberParameter"
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/SarifValidationSkimmerBase.cs"
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 61,
                  "charOffset": 1631,
                  "charLength": 161,
                  "snippet": {
                    "text": "        protected void LogResult(string jPointer, string formatId, params string[] args)\r\n        {\r\n            Region region = GetRegionFromJPointer(jPointer);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.SarifValidationSkimmerBase.LogResult(System.String,System.String,System.String[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "j#MemberParameter"
          },
          "properties": {
            "Level": "CriticalWarning",
            "Category": "Microsoft.Naming",
            "FixCategory": "Breaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'SarifValidationSkimmerBase.LogResult(string, string, params string[])', validate parameter 'args' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/SarifValidationSkimmerBase.cs"
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "            string[] argsWithPointer = new string[args.Length + 1];"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 66,
                  "charOffset": 1796,
                  "charLength": 241,
                  "snippet": {
                    "text": "            // All messages start with \"In {file}, at {jPointer}, ...\". Prepend the jPointer to the args.\r\n            string[] argsWithPointer = new string[args.Length + 1];\r\n            Array.Copy(args, 0, argsWithPointer, 1, args.Length);"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.SarifValidationSkimmerBase.LogResult(System.String,System.String,System.String[])"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "2"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'StepValuesMustFormOneBasedSequence.Analyze(ThreadFlow, string)', validate parameter 'threadFlow' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/StepValuesMustFormOneBasedSequence.cs"
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "                ReportInvalidStepValues("
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 52,
                  "charOffset": 2140,
                  "charLength": 95,
                  "snippet": {
                    "text": "\r\n                ReportInvalidStepValues(\r\n                    threadFlow.Locations.ToArray(),"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.StepValuesMustFormOneBasedSequence.Analyze(Microsoft.CodeAnalysis.Sarif.ThreadFlow,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'StepValuesMustFormOneBasedSequence.FindFirstLocationWithMissingStep(JObject[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/StepValuesMustFormOneBasedSequence.cs"
                },
                "region": {
                  "startLine": 117,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "endLine": 118,
                  "endColumn": 28,
                  "charOffset": 4875,
                  "charLength": 129,
                  "snippet": {
                    "text": "        private int FindFirstLocationWithMissingStep(JObject[] threadFlowLocationObjects)\r\n        {\r\n            int index = -1;"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.StepValuesMustFormOneBasedSequence.FindFirstLocationWithMissingStep(Newtonsoft.Json.Linq.JObject[])"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UriBaseIdRequiresRelativeUri.Analyze(FileLocation, string)', validate parameter 'fileLocation' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UriBaseIdRequiresRelativeUri.cs"
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "            if (fileLocation.UriBaseId != null && fileLocation.Uri.IsAbsoluteUri)"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 14,
                  "charOffset": 1185,
                  "charLength": 107,
                  "snippet": {
                    "text": "        {\r\n            if (fileLocation.UriBaseId != null && fileLocation.Uri.IsAbsoluteUri)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UriBaseIdRequiresRelativeUri.Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA2234",
          "level": "warning",
          "message": {
            "text": "Modify 'UrisMustBeValid.Analyze(FileData, string, string)' to call 'UrisMustBeValid.AnalyzeUri(Uri, string)' instead of 'UrisMustBeValid.AnalyzeUri(string, string)'."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs"
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 69,
                  "charOffset": 1272,
                  "charLength": 175,
                  "snippet": {
                    "text": "        protected override void Analyze(FileData fileData, string fileKey, string filePointer)\r\n        {\r\n            string fileUriReference = fileKey.UnescapeJsonPointer();"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.FileData,System.String,System.String)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Usage",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UrisMustBeValid.Analyze(FileLocation, string)', validate parameter 'fileLocation' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs"
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "            AnalyzeUri(fileLocation.Uri, fileLocationPointer.AtProperty(SarifPropertyName.Uri));"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 10,
                  "charOffset": 1614,
                  "charLength": 118,
                  "snippet": {
                    "text": "        {\r\n            AnalyzeUri(fileLocation.Uri, fileLocationPointer.AtProperty(SarifPropertyName.Uri));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UrisMustBeValid.Analyze(Result, string)', validate parameter 'result' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs"
                },
                "region": {
                  "startLine": 56,
                  "snippet": {
                    "text": "            if (result.WorkItemUris != null)"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 14,
                  "charOffset": 1814,
                  "charLength": 70,
                  "snippet": {
                    "text": "        {\r\n            if (result.WorkItemUris != null)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.Result,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UrisMustBeValid.Analyze(Rule, string)', validate parameter 'rule' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs"
                },
                "region": {
                  "startLine": 70,
                  "snippet": {
                    "text": "            AnalyzeUri(rule.HelpUri, rulePointer.AtProperty(SarifPropertyName.HelpUri));"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 10,
                  "charOffset": 2344,
                  "charLength": 110,
                  "snippet": {
                    "text": "        {\r\n            AnalyzeUri(rule.HelpUri, rulePointer.AtProperty(SarifPropertyName.HelpUri));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.Rule,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UrisMustBeValid.Analyze(Run, string)', validate parameter 'run' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs"
                },
                "region": {
                  "startLine": 75,
                  "snippet": {
                    "text": "            if (run.OriginalUriBaseIds != null)"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 14,
                  "charOffset": 2527,
                  "charLength": 73,
                  "snippet": {
                    "text": "        {\r\n            if (run.OriginalUriBaseIds != null)\r\n            {"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.Run,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UrisMustBeValid.Analyze(SarifLog, string)', validate parameter 'log' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs"
                },
                "region": {
                  "startLine": 40,
                  "snippet": {
                    "text": "            AnalyzeUri(log.SchemaUri, logPointer.AtProperty(SarifPropertyName.Schema));"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 10,
                  "charOffset": 1159,
                  "charLength": 109,
                  "snippet": {
                    "text": "        {\r\n            AnalyzeUri(log.SchemaUri, logPointer.AtProperty(SarifPropertyName.Schema));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.SarifLog,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UrisMustBeValid.Analyze(Tool, string)', validate parameter 'tool' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs"
                },
                "region": {
                  "startLine": 88,
                  "snippet": {
                    "text": "            AnalyzeUri(tool.DownloadUri, toolPointer.AtProperty(SarifPropertyName.DownloadUri));"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 10,
                  "charOffset": 3029,
                  "charLength": 118,
                  "snippet": {
                    "text": "        {\r\n            AnalyzeUri(tool.DownloadUri, toolPointer.AtProperty(SarifPropertyName.DownloadUri));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.Tool,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UrisMustBeValid.Analyze(VersionControlDetails, string)', validate parameter 'versionControlDetails' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UrisMustBeValid.cs"
                },
                "region": {
                  "startLine": 93,
                  "snippet": {
                    "text": "            AnalyzeUri(versionControlDetails.Uri, versionControlDetailsPointer.AtProperty(SarifPropertyName.Uri));"
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 10,
                  "charOffset": 3274,
                  "charLength": 136,
                  "snippet": {
                    "text": "        {\r\n            AnalyzeUri(versionControlDetails.Uri, versionControlDetailsPointer.AtProperty(SarifPropertyName.Uri));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UrisMustBeValid.Analyze(Microsoft.CodeAnalysis.Sarif.VersionControlDetails,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1062",
          "level": "warning",
          "message": {
            "text": "In externally visible method 'UseAbsolutePathsForNestedFileUriFragments.Analyze(FileLocation, string)', validate parameter 'fileLocation' before using it."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UseAbsolutePathsForNestedFileUriFragments.cs"
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            AnalyzeUri(fileLocation.Uri, fileLocationPointer.AtProperty(SarifPropertyName.Uri));"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 10,
                  "charOffset": 1250,
                  "charLength": 118,
                  "snippet": {
                    "text": "        {\r\n            AnalyzeUri(fileLocation.Uri, fileLocationPointer.AtProperty(SarifPropertyName.Uri));\r\n        }"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UseAbsolutePathsForNestedFileUriFragments.Analyze(Microsoft.CodeAnalysis.Sarif.FileLocation,System.String)"
            }
          ],
          "partialFingerprints": {
            "UniqueId": "0"
          },
          "properties": {
            "Category": "Microsoft.Design",
            "FixCategory": "DependsOnFix"
          }
        },
        {
          "ruleId": "CA1822",
          "level": "warning",
          "message": {
            "text": "The 'this' parameter (or 'Me' in Visual Basic) of 'UseAbsolutePathsForNestedFileUriFragments.UriHasNonAbsoluteFragment(Uri)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
          },
          "analysisTarget": {
            "uri": "../../../../../../sarif-sdk-test/bld/bin/AnyCPU_Debug/Sarif.Multitool/net461/Sarif.Multitool.exe",
            "uriBaseId": "$(ProjectDir)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///E:/src/sarif-sdk-test/src/Sarif.Multitool/Rules/UseAbsolutePathsForNestedFileUriFragments.cs"
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "        {"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 66,
                  "endColumn": 29,
                  "charOffset": 2271,
                  "charLength": 96,
                  "snippet": {
                    "text": "        private bool UriHasNonAbsoluteFragment(Uri uri)\r\n        {\r\n            if (uri == null)"
                  }
                }
              },
              "fullyQualifiedLogicalName": "sarif.multitool.exe!Microsoft.CodeAnalysis.Sarif.Multitool.Rules.UseAbsolutePathsForNestedFileUriFragments.UriHasNonAbsoluteFragment(System.Uri)"
            }
          ],
          "properties": {
            "Category": "Microsoft.Performance",
            "FixCategory": "NonBreaking"
          }
        },
        {
          "ruleId": "CA0053",
          "message": {
            "text": "AssemblyLoad exception: Microsoft.FxCop.Common.AssemblyLoadException: Unable to load rule assembly 'c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\DataflowRules.dll': The assembly contains no FxCop rules. ."
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Common.AssemblyLoadException"
          }
        },
        {
          "ruleId": "CA0053",
          "message": {
            "text": "AssemblyLoad exception: Microsoft.FxCop.Common.AssemblyLoadException: Unable to load rule assembly 'c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\SecurityWebConfigurationRules.dll': The assembly contains no FxCop rules. ."
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Common.AssemblyLoadException"
          }
        },
        {
          "ruleId": "CA0053",
          "message": {
            "text": "AssemblyLoad exception: Microsoft.FxCop.Common.AssemblyLoadException: Unable to load rule assembly 'c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\SecurityWebDataflowRules.dll': The assembly contains no FxCop rules. ."
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Common.AssemblyLoadException"
          }
        },
        {
          "ruleId": "CA0001",
          "message": {
            "text": "ProjectLoad exception: Microsoft.FxCop.Sdk.FxCopException: Failed to add rule assembly: c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\DataflowRules.dll. . Inner Exception: Microsoft.FxCop.Common.AssemblyLoadException: Unable to load rule assembly 'c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\DataflowRules.dll': The assembly contains no FxCop rules. "
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Sdk.FxCopException"
          }
        },
        {
          "ruleId": "CA0001",
          "message": {
            "text": "ProjectLoad exception: Microsoft.FxCop.Sdk.FxCopException: Failed to add rule assembly: c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\SecurityWebConfigurationRules.dll. . Inner Exception: Microsoft.FxCop.Common.AssemblyLoadException: Unable to load rule assembly 'c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\SecurityWebConfigurationRules.dll': The assembly contains no FxCop rules. "
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Sdk.FxCopException"
          }
        },
        {
          "ruleId": "CA0001",
          "message": {
            "text": "ProjectLoad exception: Microsoft.FxCop.Sdk.FxCopException: Failed to add rule assembly: c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\SecurityWebDataflowRules.dll. . Inner Exception: Microsoft.FxCop.Common.AssemblyLoadException: Unable to load rule assembly 'c:\\program files (x86)\\microsoft\\fxcop 14.0 for sdl\\Rules\\SecurityWebDataflowRules.dll': The assembly contains no FxCop rules. "
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Sdk.FxCopException"
          }
        },
        {
          "ruleId": "CA0068",
          "message": {
            "text": "Engine exception: Microsoft.FxCop.Sdk.FxCopException: Debug information could not be found for target assembly 'Microsoft.Json.Schema.Validation.dll'. For best analysis results, include the .pdb file with debug information for 'Microsoft.Json.Schema.Validation.dll' in the same directory as the target assembly. ."
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Sdk.FxCopException"
          }
        },
        {
          "ruleId": "CA0068",
          "message": {
            "text": "Engine exception: Microsoft.FxCop.Sdk.FxCopException: Debug information could not be found for target assembly 'Microsoft.Json.Pointer.dll'. For best analysis results, include the .pdb file with debug information for 'Microsoft.Json.Pointer.dll' in the same directory as the target assembly. ."
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Sdk.FxCopException"
          }
        },
        {
          "ruleId": "CA0068",
          "message": {
            "text": "Engine exception: Microsoft.FxCop.Sdk.FxCopException: Debug information could not be found for target assembly 'Microsoft.Json.Schema.dll'. For best analysis results, include the .pdb file with debug information for 'Microsoft.Json.Schema.dll' in the same directory as the target assembly. ."
          },
          "locations": [
            {}
          ],
          "partialFingerprints": {
            "UniqueId": "Microsoft.FxCop.Sdk.FxCopException"
          }
        }
      ],
      "resources": {
        "rules": {
          "CA1012": {
            "id": "CA1012",
            "name": {
              "text": "AbstractTypesShouldNotHaveConstructors"
            },
            "messageStrings": {
              "Default": "Change the accessibility of all public constructors in {0} to protected."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA2105": {
            "id": "CA2105",
            "name": {
              "text": "ArrayFieldsShouldNotBeReadOnly"
            },
            "messageStrings": {
              "Default": "Either replace {0} with a strongly typed collection that cannot be changed, or replace the public field with a method that returns a clone of a private array."
            },
            "properties": {
              "Category": "Microsoft.Security"
            }
          },
          "CA2243": {
            "id": "CA2243",
            "name": {
              "text": "AttributeStringLiteralsShouldParseCorrectly"
            },
            "messageStrings": {
              "Default": "In the constructor of {0}, change the value of argument {1}, which is currently \"{2}\", to something that can be correctly parsed as {3}."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1040": {
            "id": "CA1040",
            "name": {
              "text": "AvoidEmptyInterfaces"
            },
            "messageStrings": {
              "Default": "Define a custom attribute to replace {0}."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1506": {
            "id": "CA1506",
            "name": {
              "text": "AvoidExcessiveClassCoupling"
            },
            "messageStrings": {
              "Method": "{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.",
              "Type": "{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability."
            },
            "properties": {
              "Category": "Microsoft.Maintainability"
            }
          },
          "CA1502": {
            "id": "CA1502",
            "name": {
              "text": "AvoidExcessiveComplexity"
            },
            "messageStrings": {
              "Default": "{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}."
            },
            "properties": {
              "Category": "Microsoft.Maintainability"
            }
          },
          "CA1809": {
            "id": "CA1809",
            "name": {
              "text": "AvoidExcessiveLocals"
            },
            "messageStrings": {
              "Compiler": "{0} has {1} local variables, {2} of which were generated by the compiler. Refactor {0} so that it uses fewer than 64 local variables."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1020": {
            "id": "CA1020",
            "name": {
              "text": "AvoidNamespacesWithFewTypes"
            },
            "messageStrings": {
              "Default": "Consider merging the types defined in '{0}' with another namespace."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1021": {
            "id": "CA1021",
            "name": {
              "text": "AvoidOutParameters"
            },
            "messageStrings": {
              "Default": "Consider a design that does not require that {0} be an out parameter."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1811": {
            "id": "CA1811",
            "name": {
              "text": "AvoidUncalledPrivateCode"
            },
            "messageStrings": {
              "Default": "{0} appears to have no upstream public or protected callers."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1812": {
            "id": "CA1812",
            "name": {
              "text": "AvoidUninstantiatedInternalClasses"
            },
            "messageStrings": {
              "Default": "{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1505": {
            "id": "CA1505",
            "name": {
              "text": "AvoidUnmaintainableCode"
            },
            "messageStrings": {
              "Method": "{0} has a maintainability index of {1}. Rewrite or refactor the method to increase its maintainability index (MI). An MI below {2} indicates poor maintainability, an MI between {2} and {3} indicates moderate maintainability, and an MI above {3} indicates good maintainability."
            },
            "properties": {
              "Category": "Microsoft.Maintainability"
            }
          },
          "CA1823": {
            "id": "CA1823",
            "name": {
              "text": "AvoidUnusedPrivateFields"
            },
            "messageStrings": {
              "Default": "It appears that field {0} is never used or is only ever assigned to. Use this field or remove it."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1816": {
            "id": "CA1816",
            "name": {
              "text": "CallGCSuppressFinalizeCorrectly"
            },
            "messageStrings": {
              "NotCalled": "Change {0} to call {1}. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA2227": {
            "id": "CA2227",
            "name": {
              "text": "CollectionPropertiesShouldBeReadOnly"
            },
            "messageStrings": {
              "Default": "Change {0} to be read-only by removing the property setter."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1702": {
            "id": "CA1702",
            "name": {
              "text": "CompoundWordsShouldBeCasedCorrectly"
            },
            "messageStrings": {
              "MemberParameterShouldBeDiscreteTerm": "In member {0}, the compound word '{1}' in parameter name {2} exists as a discrete term. If your usage is intended to be single word, case it as '{3}' or strip the first token entirely if it represents any sort of Hungarian notation.",
              "MemberShouldBeDiscreteTerm": "The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.",
              "TypeShouldBeDiscreteTerm": "The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1011": {
            "id": "CA1011",
            "name": {
              "text": "ConsiderPassingBaseTypesAsParameters"
            },
            "messageStrings": {
              "Default": "Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1026": {
            "id": "CA1026",
            "name": {
              "text": "DefaultParametersShouldNotBeUsed"
            },
            "messageStrings": {
              "Default": "Replace method {0} with an overload that supplies all default arguments."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA2215": {
            "id": "CA2215",
            "name": {
              "text": "Dispose methods should call base class dispose"
            },
            "messageStrings": {
              "Default": "Ensure that method {0} calls base.{0} in all possible control flow paths."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA2000": {
            "id": "CA2000",
            "name": {
              "text": "Dispose objects before losing scope"
            },
            "messageStrings": {
              "ExceptionEdge": "In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.",
              "NonExceptionEdge": "In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope."
            },
            "properties": {
              "Category": "Microsoft.Reliability"
            }
          },
          "CA2202": {
            "id": "CA2202",
            "name": {
              "text": "Do not dispose objects multiple times"
            },
            "messageStrings": {
              "Default": "Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 38"
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1303": {
            "id": "CA1303",
            "name": {
              "text": "Do not pass literals as localized parameters"
            },
            "messageStrings": {
              "KnownValue": "Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}."
            },
            "properties": {
              "Category": "Microsoft.Globalization"
            }
          },
          "CA2214": {
            "id": "CA2214",
            "name": {
              "text": "DoNotCallOverridableMethodsInConstructors"
            },
            "messageStrings": {
              "Default": "{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}"
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1800": {
            "id": "CA1800",
            "name": {
              "text": "DoNotCastUnnecessarily"
            },
            "messageStrings": {
              "Local": "{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.",
              "Parameter": "{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1031": {
            "id": "CA1031",
            "name": {
              "text": "DoNotCatchGeneralExceptionTypes"
            },
            "messageStrings": {
              "Default": "Modify {0} to catch a more specific exception than {1} or rethrow the exception."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA2104": {
            "id": "CA2104",
            "name": {
              "text": "DoNotDeclareReadOnlyMutableReferenceTypes"
            },
            "messageStrings": {
              "Default": "Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message."
            },
            "properties": {
              "Category": "Microsoft.Security"
            }
          },
          "CA1000": {
            "id": "CA1000",
            "name": {
              "text": "DoNotDeclareStaticMembersOnGenericTypes"
            },
            "messageStrings": {
              "Default": "Remove {0} from {1} or make it an instance member."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1051": {
            "id": "CA1051",
            "name": {
              "text": "DoNotDeclareVisibleInstanceFields"
            },
            "messageStrings": {
              "Default": "Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1002": {
            "id": "CA1002",
            "name": {
              "text": "DoNotExposeGenericLists"
            },
            "messageStrings": {
              "Default": "Change {0} in {1} to use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V>"
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1806": {
            "id": "CA1806",
            "name": {
              "text": "DoNotIgnoreMethodResults"
            },
            "messageStrings": {
              "TryParse": "{0} calls {1} but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA2217": {
            "id": "CA2217",
            "name": {
              "text": "DoNotMarkEnumsWithFlags"
            },
            "messageStrings": {
              "Default": "{0} is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: {1}"
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1006": {
            "id": "CA1006",
            "name": {
              "text": "DoNotNestGenericTypesInMemberSignatures"
            },
            "messageStrings": {
              "Default": "Consider a design where {0} doesn't nest generic type {1}."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1045": {
            "id": "CA1045",
            "name": {
              "text": "DoNotPassTypesByReference"
            },
            "messageStrings": {
              "Default": "Consider a design that does not require that {0} be a reference parameter."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA2201": {
            "id": "CA2201",
            "name": {
              "text": "DoNotRaiseReservedExceptionTypes"
            },
            "messageStrings": {
              "TooGeneric": "{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1028": {
            "id": "CA1028",
            "name": {
              "text": "EnumStorageShouldBeInt32"
            },
            "messageStrings": {
              "NotIntegral": "If possible, make the underlying type of {0} Int32 instead of {1}. Otherwise consider Byte, Int16, or Int64."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1008": {
            "id": "CA1008",
            "name": {
              "text": "EnumsShouldHaveZeroValue"
            },
            "messageStrings": {
              "FlagsRename": "In enum {0}, change the name of {1} to 'None'."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1064": {
            "id": "CA1064",
            "name": {
              "text": "ExceptionsShouldBePublic"
            },
            "messageStrings": {
              "Default": "Make exception class {0} public."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1714": {
            "id": "CA1714",
            "name": {
              "text": "FlagsEnumsShouldHavePluralNames"
            },
            "messageStrings": {
              "Default": "If enumeration name {0} is singular, change it to a plural form."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1709": {
            "id": "CA1709",
            "name": {
              "text": "IdentifiersShouldBeCasedCorrectly"
            },
            "messageStrings": {
              "Member": "Correct the casing of '{0}' in member name {1} by changing it to '{2}'.",
              "Namespace": "Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.",
              "Type": "Correct the casing of '{0}' in type name {1} by changing it to '{2}'."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1704": {
            "id": "CA1704",
            "name": {
              "text": "IdentifiersShouldBeSpelledCorrectly"
            },
            "messageStrings": {
              "Assembly": "Correct the spelling of '{0}' in assembly name {1}.",
              "Member": "Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.",
              "MemberParameter": "In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.",
              "MemberParameterMoreMeaningfulName": "In method {0}, consider providing a more meaningful name than parameter name {1}.",
              "Namespace": "Correct the spelling of '{0}' in namespace name '{1}'.",
              "Type": "Correct the spelling of '{0}' in type name {1}."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1710": {
            "id": "CA1710",
            "name": {
              "text": "IdentifiersShouldHaveCorrectSuffix"
            },
            "messageStrings": {
              "Default": "Rename {0} to end in '{1}'."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1720": {
            "id": "CA1720",
            "name": {
              "text": "IdentifiersShouldNotContainTypeNames"
            },
            "messageStrings": {
              "LanguageIndependentMemberParameter": "In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1707": {
            "id": "CA1707",
            "name": {
              "text": "IdentifiersShouldNotContainUnderscores"
            },
            "messageStrings": {
              "Member": "Remove the underscores from member name {0}."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1711": {
            "id": "CA1711",
            "name": {
              "text": "IdentifiersShouldNotHaveIncorrectSuffix"
            },
            "messageStrings": {
              "TypeNoAlternate": "Rename type name {0} so that it does not end in '{1}'."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1716": {
            "id": "CA1716",
            "name": {
              "text": "IdentifiersShouldNotMatchKeywords"
            },
            "messageStrings": {
              "Type": "Rename type {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1063": {
            "id": "CA1063",
            "name": {
              "text": "ImplementIDisposableCorrectly"
            },
            "messageStrings": {
              "DisposeImplementation": "Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.",
              "ProvideDisposeBool": "Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA2240": {
            "id": "CA2240",
            "name": {
              "text": "ImplementISerializableCorrectly"
            },
            "messageStrings": {
              "Default": "Add an implementation of GetObjectData to type {0}."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1032": {
            "id": "CA1032",
            "name": {
              "text": "ImplementStandardExceptionConstructors"
            },
            "messageStrings": {
              "Accessibility": "Change the accessibility of {0} to {1}.",
              "MissingConstructor": "Add the following constructor to {0}: {1}."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA2208": {
            "id": "CA2208",
            "name": {
              "text": "InstantiateArgumentExceptionsCorrectly"
            },
            "messageStrings": {
              "IncorrectParameterName": "Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1033": {
            "id": "CA1033",
            "name": {
              "text": "InterfaceMethodsShouldBeCallableByChildTypes"
            },
            "messageStrings": {
              "Default": "Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA2204": {
            "id": "CA2204",
            "name": {
              "text": "Literals should be spelled correctly"
            },
            "messageStrings": {
              "Default": "Correct the spelling of the unrecognized token '{0}' in the literal '{1}'."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA5350": {
            "id": "CA5350",
            "name": {
              "text": "MD5CannotBeUsed"
            },
            "messageStrings": {
              "Default": "{0} calls into an instance of the {1} type, which implements a cryptographically insecure hashing function. Hash collisions are computationally feasible for the MD5 and HMACMD5 algorithms and are banned by the SDL. Replace this usage with a SHA-2 family hash algorithm (SHA512, SHA384, SHA256)."
            },
            "properties": {
              "Category": "Microsoft.Security.Cryptography"
            }
          },
          "CA2235": {
            "id": "CA2235",
            "name": {
              "text": "MarkAllNonSerializableFields"
            },
            "messageStrings": {
              "Default": "Field {0} is a member of type {1}, which is serializable, but is of type {2}, which is not serializable. Add the NonSerializedAttribute to {0}."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1014": {
            "id": "CA1014",
            "name": {
              "text": "MarkAssembliesWithClsCompliant"
            },
            "messageStrings": {
              "Default": "Mark {0} with CLSCompliant(true) because it exposes externally visible types."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1824": {
            "id": "CA1824",
            "name": {
              "text": "MarkAssembliesWithNeutralResourcesLanguage"
            },
            "messageStrings": {
              "Default": "Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA2237": {
            "id": "CA2237",
            "name": {
              "text": "MarkISerializableTypesWithSerializable"
            },
            "messageStrings": {
              "Default": "Add [Serializable] to {0} as this type implements ISerializable."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1822": {
            "id": "CA1822",
            "name": {
              "text": "MarkMembersAsStatic"
            },
            "messageStrings": {
              "Default": "The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1060": {
            "id": "CA1060",
            "name": {
              "text": "MovePInvokesToNativeMethodsClass"
            },
            "messageStrings": {
              "Default": "Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA2211": {
            "id": "CA2211",
            "name": {
              "text": "NonConstantFieldsShouldNotBeVisible"
            },
            "messageStrings": {
              "Default": "Consider making {0} non-public or a constant."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1308": {
            "id": "CA1308",
            "name": {
              "text": "NormalizeStringsToUppercase"
            },
            "messageStrings": {
              "ToUpperInvariant": "In method {0}, replace the call to {1} with String.ToUpperInvariant()."
            },
            "properties": {
              "Category": "Microsoft.Globalization"
            }
          },
          "CA1725": {
            "id": "CA1725",
            "name": {
              "text": "ParameterNamesShouldMatchBaseDeclaration"
            },
            "messageStrings": {
              "Default": "In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA2234": {
            "id": "CA2234",
            "name": {
              "text": "PassSystemUriObjectsInsteadOfStrings"
            },
            "messageStrings": {
              "Default": "Modify {0} to call {1} instead of {2}."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1819": {
            "id": "CA1819",
            "name": {
              "text": "PropertiesShouldNotReturnArrays"
            },
            "messageStrings": {
              "Default": "Change {0} to return a collection or make it a method."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1721": {
            "id": "CA1721",
            "name": {
              "text": "PropertyNamesShouldNotMatchGetMethods"
            },
            "messageStrings": {
              "BaseType": "The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1804": {
            "id": "CA1804",
            "name": {
              "text": "RemoveUnusedLocals"
            },
            "messageStrings": {
              "Default": "{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1703": {
            "id": "CA1703",
            "name": {
              "text": "ResourceStringsShouldBeSpelledCorrectly"
            },
            "messageStrings": {
              "StringResource": "In resource {0}, referenced by name '{1}', correct the spelling of '{2}' in string value '{3}'."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA2200": {
            "id": "CA2200",
            "name": {
              "text": "RethrowToPreserveStackDetails"
            },
            "messageStrings": {
              "Default": "{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA1504": {
            "id": "CA1504",
            "name": {
              "text": "ReviewMisleadingFieldNames"
            },
            "messageStrings": {
              "Instance": "The field name {0} suggests that it is static (Shared in Visual Basic) data but it is declared as an instance member. Review this member to verify that it should be instance, or consider changing the field name."
            },
            "properties": {
              "Category": "Microsoft.Maintainability"
            }
          },
          "CA1801": {
            "id": "CA1801",
            "name": {
              "text": "ReviewUnusedParameters"
            },
            "messageStrings": {
              "Default": "Parameter {0} of {1} is never used. Remove the parameter or use it in the method body."
            },
            "properties": {
              "Category": "Microsoft.Usage"
            }
          },
          "CA5354": {
            "id": "CA5354",
            "name": {
              "text": "SHA1CannotBeUsed"
            },
            "messageStrings": {
              "Default": "{0} calls into an instance of the {1} type, which implements a cryptographically insecure hashing function. Hash collisions are computationally feasible for the SHA-1 and SHA-0 algorithms and are banned by the SDL. Replace this usage with a SHA-2 family hash algorithm (SHA512, SHA384, SHA256)."
            },
            "properties": {
              "Category": "Microsoft.Security.Cryptography"
            }
          },
          "CA1305": {
            "id": "CA1305",
            "name": {
              "text": "SpecifyIFormatProvider"
            },
            "messageStrings": {
              "IFormatProviderAlternate": "Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.",
              "IFormatProviderAlternateString": "Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}."
            },
            "properties": {
              "Category": "Microsoft.Globalization"
            }
          },
          "CA1307": {
            "id": "CA1307",
            "name": {
              "text": "SpecifyStringComparison"
            },
            "messageStrings": {
              "Default": "Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'."
            },
            "properties": {
              "Category": "Microsoft.Globalization"
            }
          },
          "CA1053": {
            "id": "CA1053",
            "name": {
              "text": "StaticHolderTypesShouldNotHaveConstructors"
            },
            "messageStrings": {
              "CSharp2_0": "Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.",
              "Default": "Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1057": {
            "id": "CA1057",
            "name": {
              "text": "StringUriOverloadsCallSystemUriOverloads"
            },
            "messageStrings": {
              "Default": "Refactor {0} so that it builds a System.Uri object from {1}, and then calls {2}."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1724": {
            "id": "CA1724",
            "name": {
              "text": "TypeNamesShouldNotMatchNamespaces"
            },
            "messageStrings": {
              "System": "The type name {0} conflicts in whole or in part with the namespace name '{1}' defined in the .NET Framework. Rename the type to eliminate the conflict."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1054": {
            "id": "CA1054",
            "name": {
              "text": "UriParametersShouldNotBeStrings"
            },
            "messageStrings": {
              "Default": "Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload of {1}, that allows {0} to be passed as a System.Uri object."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1056": {
            "id": "CA1056",
            "name": {
              "text": "UriPropertiesShouldNotBeStrings"
            },
            "messageStrings": {
              "Default": "Change the type of property {0} from string to System.Uri."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1055": {
            "id": "CA1055",
            "name": {
              "text": "UriReturnValuesShouldNotBeStrings"
            },
            "messageStrings": {
              "Default": "Change the return type of {0} from string to System.Uri."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1802": {
            "id": "CA1802",
            "name": {
              "text": "UseLiteralsWhereAppropriate"
            },
            "messageStrings": {
              "Default": "Field {0} is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead."
            },
            "properties": {
              "Category": "Microsoft.Performance"
            }
          },
          "CA1726": {
            "id": "CA1726",
            "name": {
              "text": "UsePreferredTerms"
            },
            "messageStrings": {
              "MemberNoAlternate": "Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.",
              "TypeNoAlternate": "Replace the term '{0}' in type name {1} with an appropriate alternate or remove it entirely."
            },
            "properties": {
              "Category": "Microsoft.Naming"
            }
          },
          "CA1024": {
            "id": "CA1024",
            "name": {
              "text": "UsePropertiesWhereAppropriate"
            },
            "messageStrings": {
              "Default": "Change {0} to a property if appropriate."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA3053": {
            "id": "CA3053",
            "name": {
              "text": "UseXmlSecureResolver"
            },
            "messageStrings": {
              "XmlReaderCreateInsecureXmlResolver": "{0} instantiates an XmlReader instance by calling {1} and provided an XmlReaderSettings instance with an insecure XmlResolver property value. This usage is potentially unsafe as untrusted external resources may be resolved during read operations. Provide a XmlReaderSettings instance and set the XmlResolver property to null or an instance of XmlSecureResolver."
            },
            "properties": {
              "Category": "Microsoft.Security.Xml"
            }
          },
          "CA1062": {
            "id": "CA1062",
            "name": {
              "text": "Validate arguments of public methods"
            },
            "messageStrings": {
              "Default": "In externally visible method {0}, validate parameter '{1}' before using it.",
              "Reassigned": "In externally visible method {0}, validate local variable '{1}', which was reassigned from parameter '{2}', before using it."
            },
            "properties": {
              "Category": "Microsoft.Design"
            }
          },
          "CA1500": {
            "id": "CA1500",
            "name": {
              "text": "VariableNamesShouldNotMatchFieldNames"
            },
            "messageStrings": {
              "Parameter": "{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items."
            },
            "properties": {
              "Category": "Microsoft.Maintainability"
            }
          }
        }
      }
    }
  ]
}