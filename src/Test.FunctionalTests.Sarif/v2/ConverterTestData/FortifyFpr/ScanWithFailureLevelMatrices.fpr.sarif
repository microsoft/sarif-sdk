{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "results": [
        {
          "ruleIndex": 37,
          "message": {
            "text": "Attackers are able to control the file system path argument to GetDirectories() at [FileSystem.cs](1) line [60](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            return Directory.GetDirectories(path);"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 5
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 60,
                            "snippet": {
                              "text": "            return Directory.GetDirectories(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 57,
                            "endLine": 63,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetDirectories(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 5
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 60,
                            "snippet": {
                              "text": "            return Directory.GetDirectories(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 57,
                            "endLine": 63,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetDirectories(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 5
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 60,
                            "snippet": {
                              "text": "            return Directory.GetDirectories(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 57,
                            "endLine": 63,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetDirectories(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 60
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "endLine": 51,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 48,
                            "snippet": {
                              "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 45,
                            "endLine": 51,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 42
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method GetFileEncoding() in [SarifCurrentToVersionOneVisitor.cs](1) ignores an exception on line [179](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 179,
                  "snippet": {
                    "text": "            catch (ArgumentException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 176,
                  "endLine": 182,
                  "snippet": {
                    "text": "            {\n                encoding = Encoding.GetEncoding(encodingName);\n            }\n            catch (ArgumentException) { }\n\n            return encoding;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 179,
                            "snippet": {
                              "text": "            catch (ArgumentException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 176,
                            "endLine": 182,
                            "snippet": {
                              "text": "            {\n                encoding = Encoding.GetEncoding(encodingName);\n            }\n            catch (ArgumentException) { }\n\n            return encoding;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 179
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 25,
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 94,
                  "snippet": {
                    "text": "                        using (var sha = SHA1.Create())"
                  }
                },
                "contextRegion": {
                  "startLine": 91,
                  "endLine": 97,
                  "snippet": {
                    "text": "                {\n                    using (var bufferedStream = new BufferedStream(stream, 1024 * 32))\n                    {\n                        using (var sha = SHA1.Create())\n                        {\n                            byte[] checksum = sha.ComputeHash(bufferedStream);\n                            sha1 = BitConverter.ToString(checksum).Replace(\"-\", string.Empty);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 94,
                            "snippet": {
                              "text": "                        using (var sha = SHA1.Create())"
                            }
                          },
                          "contextRegion": {
                            "startLine": 91,
                            "endLine": 97,
                            "snippet": {
                              "text": "                {\n                    using (var bufferedStream = new BufferedStream(stream, 1024 * 32))\n                    {\n                        using (var sha = SHA1.Create())\n                        {\n                            byte[] checksum = sha.ComputeHash(bufferedStream);\n                            sha1 = BitConverter.ToString(checksum).Replace(\"-\", string.Empty);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 94
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextFloat() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 34,
                  "snippet": {
                    "text": "            || rg0.nextFloat() != rg1.nextFloat()"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "endLine": 37,
                  "snippet": {
                    "text": "            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 34,
                            "snippet": {
                              "text": "            || rg0.nextFloat() != rg1.nextFloat()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 31,
                            "endLine": 37,
                            "snippet": {
                              "text": "            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextFloat()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextFloat() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 34,
                  "snippet": {
                    "text": "            || rg0.nextFloat() != rg1.nextFloat()"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "endLine": 37,
                  "snippet": {
                    "text": "            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 34,
                            "snippet": {
                              "text": "            || rg0.nextFloat() != rg1.nextFloat()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 31,
                            "endLine": 37,
                            "snippet": {
                              "text": "            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextFloat()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method ParseVulnerability() in [FortifyFprConverter.cs](1) can dereference a null pointer on line [450](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 450,
                  "snippet": {
                    "text": "                    rule.SetProperty(_strings.Subtype, _reader.ReadElementContentAsString());"
                  }
                },
                "contextRegion": {
                  "startLine": 447,
                  "endLine": 453,
                  "snippet": {
                    "text": "                }\n                else if (AtStartOfNonEmpty(_strings.Subtype))\n                {\n                    rule.SetProperty(_strings.Subtype, _reader.ReadElementContentAsString());\n                }\n                else if (AtStartOfNonEmpty(_strings.InstanceSeverity))\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 427,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = null;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 424,
                            "endLine": 430,
                            "snippet": {
                              "text": "\n            var result = new Result();\n            _reader.Read();\n            ReportingDescriptor rule = null;\n            int ruleIndex;\n\n            while (!AtEndOf(_strings.Vulnerability))\n"
                            }
                          }
                        },
                        "message": {
                          "text": "rule = null : rule is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 430,
                            "snippet": {
                              "text": "            while (!AtEndOf(_strings.Vulnerability))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 427,
                            "endLine": 433,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = null;\n            int ruleIndex;\n\n            while (!AtEndOf(_strings.Vulnerability))\n            {\n                if (AtStartOfNonEmpty(_strings.ClassId))\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 432,
                            "snippet": {
                              "text": "                if (AtStartOfNonEmpty(_strings.ClassId))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 429,
                            "endLine": 435,
                            "snippet": {
                              "text": "\n            while (!AtEndOf(_strings.Vulnerability))\n            {\n                if (AtStartOfNonEmpty(_strings.ClassId))\n                {\n                    // Get the rule GUID from the ClassId element.\n                    string ruleId = _reader.ReadElementContentAsString();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 440,
                            "snippet": {
                              "text": "                else if (AtStartOfNonEmpty(_strings.Kingdom))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 437,
                            "endLine": 443,
                            "snippet": {
                              "text": "\n                    result.RuleIndex = ruleIndex;\n                }\n                else if (AtStartOfNonEmpty(_strings.Kingdom))\n                {\n                    rule.SetProperty(_strings.Kingdom, _reader.ReadElementContentAsString());\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 444,
                            "snippet": {
                              "text": "                else if (AtStartOfNonEmpty(_strings.Type))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 441,
                            "endLine": 447,
                            "snippet": {
                              "text": "                {\n                    rule.SetProperty(_strings.Kingdom, _reader.ReadElementContentAsString());\n                }\n                else if (AtStartOfNonEmpty(_strings.Type))\n                {\n                    rule.SetProperty(_strings.Type, _reader.ReadElementContentAsString());\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 450,
                            "snippet": {
                              "text": "                    rule.SetProperty(_strings.Subtype, _reader.ReadElementContentAsString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 447,
                            "endLine": 453,
                            "snippet": {
                              "text": "                }\n                else if (AtStartOfNonEmpty(_strings.Subtype))\n                {\n                    rule.SetProperty(_strings.Subtype, _reader.ReadElementContentAsString());\n                }\n                else if (AtStartOfNonEmpty(_strings.InstanceSeverity))\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "rule.SetProperty(...) : rule is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 450
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by next() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "endLine": 48,
                  "snippet": {
                    "text": "        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 45,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 42,
                            "endLine": 48,
                            "snippet": {
                              "text": "        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "next()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by next() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "endLine": 48,
                  "snippet": {
                    "text": "        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 45,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 42,
                            "endLine": 48,
                            "snippet": {
                              "text": "        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "next()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "The function Run() in [ExportConfigurationCommandBase.cs](1) reveals system data or debugging information by calling WriteLine() on line [84](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 824
                },
                "region": {
                  "startLine": 84,
                  "snippet": {
                    "text": "                Console.Error.WriteLine(ex.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "endLine": 87,
                  "snippet": {
                    "text": "            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 13
                    },
                    {
                      "index": 14
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 824
                          },
                          "region": {
                            "startLine": 84,
                            "snippet": {
                              "text": "                Console.Error.WriteLine(ex.ToString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 81,
                            "endLine": 87,
                            "snippet": {
                              "text": "            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 824
                },
                "region": {
                  "startLine": 84
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 233,
                  "endLine": 266,
                  "snippet": {
                    "text": "        private void Visit(Attachment attachment, string attachmentPointer)\r\n        {\r\n            Analyze(attachment, attachmentPointer);\r\n\r\n            if (attachment.ArtifactLocation != null)\r\n            {\r\n                Visit(attachment.ArtifactLocation, attachmentPointer.AtProperty(SarifPropertyName.ArtifactLocation));\r\n            }\r\n\r\n            if (attachment.Description != null)\r\n            {\r\n                Visit(attachment.Description, attachmentPointer.AtProperty(SarifPropertyName.Description));\r\n            }\r\n\r\n            if (attachment.Regions != null)\r\n            {\r\n                string regionsPointer = attachmentPointer.AtProperty(SarifPropertyName.Regions);\r\n\r\n                for (int i = 0; i < attachment.Regions.Count; ++i)\r\n                {\r\n                    Visit(attachment.Regions[i], regionsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (attachment.Rectangles != null)\r\n            {\r\n                string rectangesPointer = attachmentPointer.AtProperty(SarifPropertyName.Rectangles);\r\n\r\n                for (int i = 0; i < attachment.Rectangles.Count; ++i)\r\n                {\r\n                    Visit(attachment.Rectangles[i], rectangesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 230,
                  "endLine": 269,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Attachment attachment, string attachmentPointer)\n        {\n            Analyze(attachment, attachmentPointer);\n\n            if (attachment.ArtifactLocation != null)\n            {\n                Visit(attachment.ArtifactLocation, attachmentPointer.AtProperty(SarifPropertyName.ArtifactLocation));\n            }\n\n            if (attachment.Description != null)\n            {\n                Visit(attachment.Description, attachmentPointer.AtProperty(SarifPropertyName.Description));\n            }\n\n            if (attachment.Regions != null)\n            {\n                string regionsPointer = attachmentPointer.AtProperty(SarifPropertyName.Regions);\n\n                for (int i = 0; i < attachment.Regions.Count; ++i)\n                {\n                    Visit(attachment.Regions[i], regionsPointer.AtIndex(i));\n                }\n            }\n\n            if (attachment.Rectangles != null)\n            {\n                string rectangesPointer = attachmentPointer.AtProperty(SarifPropertyName.Rectangles);\n\n                for (int i = 0; i < attachment.Rectangles.Count; ++i)\n                {\n                    Visit(attachment.Rectangles[i], rectangesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(CodeFlow codeFlow, string codeFlowPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 266,
                            "snippet": {
                              "text": "        private void Visit(Attachment attachment, string attachmentPointer)\r\n        {\r\n            Analyze(attachment, attachmentPointer);\r\n\r\n            if (attachment.ArtifactLocation != null)\r\n            {\r\n                Visit(attachment.ArtifactLocation, attachmentPointer.AtProperty(SarifPropertyName.ArtifactLocation));\r\n            }\r\n\r\n            if (attachment.Description != null)\r\n            {\r\n                Visit(attachment.Description, attachmentPointer.AtProperty(SarifPropertyName.Description));\r\n            }\r\n\r\n            if (attachment.Regions != null)\r\n            {\r\n                string regionsPointer = attachmentPointer.AtProperty(SarifPropertyName.Regions);\r\n\r\n                for (int i = 0; i < attachment.Regions.Count; ++i)\r\n                {\r\n                    Visit(attachment.Regions[i], regionsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (attachment.Rectangles != null)\r\n            {\r\n                string rectangesPointer = attachmentPointer.AtProperty(SarifPropertyName.Rectangles);\r\n\r\n                for (int i = 0; i < attachment.Rectangles.Count; ++i)\r\n                {\r\n                    Visit(attachment.Rectangles[i], rectangesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 230,
                            "endLine": 269,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Attachment attachment, string attachmentPointer)\n        {\n            Analyze(attachment, attachmentPointer);\n\n            if (attachment.ArtifactLocation != null)\n            {\n                Visit(attachment.ArtifactLocation, attachmentPointer.AtProperty(SarifPropertyName.ArtifactLocation));\n            }\n\n            if (attachment.Description != null)\n            {\n                Visit(attachment.Description, attachmentPointer.AtProperty(SarifPropertyName.Description));\n            }\n\n            if (attachment.Regions != null)\n            {\n                string regionsPointer = attachmentPointer.AtProperty(SarifPropertyName.Regions);\n\n                for (int i = 0; i < attachment.Regions.Count; ++i)\n                {\n                    Visit(attachment.Regions[i], regionsPointer.AtIndex(i));\n                }\n            }\n\n            if (attachment.Rectangles != null)\n            {\n                string rectangesPointer = attachmentPointer.AtProperty(SarifPropertyName.Rectangles);\n\n                for (int i = 0; i < attachment.Rectangles.Count; ++i)\n                {\n                    Visit(attachment.Rectangles[i], rectangesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(CodeFlow codeFlow, string codeFlowPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 233,
                  "endLine": 266
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 70,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable!!!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 67,
                  "endLine": 73,
                  "snippet": {
                    "text": "        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 70,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable!!!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 67,
                            "endLine": 73,
                            "snippet": {
                              "text": "        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 70,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable!!!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 67,
                  "endLine": 73,
                  "snippet": {
                    "text": "        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 70,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable!!!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 67,
                            "endLine": 73,
                            "snippet": {
                              "text": "        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 0,
          "message": {
            "text": "Storing passwords or password details in plaintext anywhere in the system or system code may compromise system security in a way that cannot be easily remedied."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 852,
                  "snippet": {
                    "text": "            // default : The configuration in the {0} section of '{1}' has 'UseCookies' set to a value other than 'cookieless'. As a result, the session ID (which is as good as a username and password) is logged to browser history, server logs and proxy logs. More serious, session rewriting can enable session fixcation attacks, in which an attacker causes a victim to use a well-known session id. If the victim authenticates under the attacker's chosen session ID, the attacker can present that session ID to the server and be recognized as the victim."
                  }
                },
                "contextRegion": {
                  "startLine": 849,
                  "endLine": 855,
                  "snippet": {
                    "text": "        {\n            // session-rewriting : Session Rewriting\n\n            // default : The configuration in the {0} section of '{1}' has 'UseCookies' set to a value other than 'cookieless'. As a result, the session ID (which is as good as a username and password) is logged to browser history, server logs and proxy logs. More serious, session rewriting can enable session fixcation attacks, in which an attacker causes a victim to use a well-known session id. If the victim authenticates under the attacker's chosen session ID, the attacker can present that session ID to the server and be recognized as the victim.\n\n            // <properties name=\"path\">\\web.config</properties>\n            // <properties name=\"section\">forms</properties>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 714
                          },
                          "region": {
                            "startLine": 852,
                            "snippet": {
                              "text": "            // default : The configuration in the {0} section of '{1}' has 'UseCookies' set to a value other than 'cookieless'. As a result, the session ID (which is as good as a username and password) is logged to browser history, server logs and proxy logs. More serious, session rewriting can enable session fixcation attacks, in which an attacker causes a victim to use a well-known session id. If the victim authenticates under the attacker's chosen session ID, the attacker can present that session ID to the server and be recognized as the victim."
                            }
                          },
                          "contextRegion": {
                            "startLine": 849,
                            "endLine": 855,
                            "snippet": {
                              "text": "        {\n            // session-rewriting : Session Rewriting\n\n            // default : The configuration in the {0} section of '{1}' has 'UseCookies' set to a value other than 'cookieless'. As a result, the session ID (which is as good as a username and password) is logged to browser history, server logs and proxy logs. More serious, session rewriting can enable session fixcation attacks, in which an attacker causes a victim to use a well-known session id. If the victim authenticates under the attacker's chosen session ID, the attacker can present that session ID to the server and be recognized as the victim.\n\n            // <properties name=\"path\">\\web.config</properties>\n            // <properties name=\"section\">forms</properties>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Comment"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 13
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "endLine": 51,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 48,
                            "snippet": {
                              "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 45,
                            "endLine": 51,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 42
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method AddElementToList() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 416,
                  "endLine": 421,
                  "snippet": {
                    "text": "        private void AddElementToList(object list, object listElement)\r\n        {\r\n            var listType = list.GetType();\r\n            MethodInfo method = listType.GetMethod(\"Add\");\r\n            method.Invoke(list, new [] { listElement});\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 413,
                  "endLine": 424,
                  "snippet": {
                    "text": "            method.Invoke(dictionary, new[] { \"key\", dictionaryValue });\n        }\n\n        private void AddElementToList(object list, object listElement)\n        {\n            var listType = list.GetType();\n            MethodInfo method = listType.GetMethod(\"Add\");\n            method.Invoke(list, new [] { listElement});\n        }\n\n        private object CreateEmptyList(Type propertyType)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 416,
                            "endLine": 421,
                            "snippet": {
                              "text": "        private void AddElementToList(object list, object listElement)\r\n        {\r\n            var listType = list.GetType();\r\n            MethodInfo method = listType.GetMethod(\"Add\");\r\n            method.Invoke(list, new [] { listElement});\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 413,
                            "endLine": 424,
                            "snippet": {
                              "text": "            method.Invoke(dictionary, new[] { \"key\", dictionaryValue });\n        }\n\n        private void AddElementToList(object list, object listElement)\n        {\n            var listType = list.GetType();\n            MethodInfo method = listType.GetMethod(\"Add\");\n            method.Invoke(list, new [] { listElement});\n        }\n\n        private object CreateEmptyList(Type propertyType)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: AddElementToList"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 416,
                  "endLine": 421
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function Main() in [Program.cs](1) reveals system data or debugging information by calling WriteLine() on line [74](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 74,
                  "snippet": {
                    "text": "                Console.WriteLine($\"Error: {ex}\");"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "endLine": 77,
                  "snippet": {
                    "text": "            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 15
                    },
                    {
                      "index": 16
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 74,
                            "snippet": {
                              "text": "                Console.WriteLine($\"Error: {ex}\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 71,
                            "endLine": 77,
                            "snippet": {
                              "text": "            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 74
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method SetPropertiesFrom() in [PropertyBagHolder.cs](1) can dereference a null pointer on line [168](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 614
                },
                "region": {
                  "startLine": 168,
                  "snippet": {
                    "text": "                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];"
                  }
                },
                "contextRegion": {
                  "startLine": 165,
                  "endLine": 171,
                  "snippet": {
                    "text": "\n            foreach (string propertyName in other.PropertyNames)\n            {\n                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];\n                Properties[propertyName] = new SerializedPropertyInfo(otherInfo.SerializedValue, otherInfo.IsString);\n            }\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 614
                          },
                          "region": {
                            "startLine": 154,
                            "snippet": {
                              "text": "            if (other == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 151,
                            "endLine": 157,
                            "snippet": {
                              "text": "\n        public void SetPropertiesFrom(IPropertyBagHolder other)\n        {\n            if (other == null)\n            {\n                throw new ArgumentNullException(nameof(other));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 614
                          },
                          "region": {
                            "startLine": 161,
                            "snippet": {
                              "text": "            PropertyBagHolder otherHolder = other as PropertyBagHolder;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 158,
                            "endLine": 164,
                            "snippet": {
                              "text": "\n            // We need the concrete class because the IPropertyBagHolder interface\n            // doesn't expose the raw Properties array.\n            PropertyBagHolder otherHolder = other as PropertyBagHolder;\n            Debug.Assert(otherHolder != null);\n\n            Properties = other.PropertyNames.Count > 0 ? new Dictionary<string, SerializedPropertyInfo>() : null;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "otherHolder = null : otherHolder is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 614
                          },
                          "region": {
                            "startLine": 161,
                            "snippet": {
                              "text": "            PropertyBagHolder otherHolder = other as PropertyBagHolder;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 158,
                            "endLine": 164,
                            "snippet": {
                              "text": "\n            // We need the concrete class because the IPropertyBagHolder interface\n            // doesn't expose the raw Properties array.\n            PropertyBagHolder otherHolder = other as PropertyBagHolder;\n            Debug.Assert(otherHolder != null);\n\n            Properties = other.PropertyNames.Count > 0 ? new Dictionary<string, SerializedPropertyInfo>() : null;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 614
                          },
                          "region": {
                            "startLine": 166,
                            "snippet": {
                              "text": "            foreach (string propertyName in other.PropertyNames)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 163,
                            "endLine": 169,
                            "snippet": {
                              "text": "\n            Properties = other.PropertyNames.Count > 0 ? new Dictionary<string, SerializedPropertyInfo>() : null;\n\n            foreach (string propertyName in other.PropertyNames)\n            {\n                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];\n                Properties[propertyName] = new SerializedPropertyInfo(otherInfo.SerializedValue, otherInfo.IsString);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 614
                          },
                          "region": {
                            "startLine": 168,
                            "snippet": {
                              "text": "                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];"
                            }
                          },
                          "contextRegion": {
                            "startLine": 165,
                            "endLine": 171,
                            "snippet": {
                              "text": "\n            foreach (string propertyName in other.PropertyNames)\n            {\n                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];\n                Properties[propertyName] = new SerializedPropertyInfo(otherInfo.SerializedValue, otherInfo.IsString);\n            }\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "otherHolder.get_Properties() : otherHolder is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 614
                },
                "region": {
                  "startLine": 168
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "endLine": 47,
                  "snippet": {
                    "text": "        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 44,
                            "snippet": {
                              "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 41,
                            "endLine": 47,
                            "snippet": {
                              "text": "        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 42
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "endLine": 47,
                  "snippet": {
                    "text": "        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 44,
                            "snippet": {
                              "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 41,
                            "endLine": 47,
                            "snippet": {
                              "text": "        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 42
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 7,
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) might reveal system data or debugging information by calling printStackTrace() on line [88](1). The information revealed by printStackTrace() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 88,
                  "snippet": {
                    "text": "            ex.printStackTrace();"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "endLine": 91,
                  "snippet": {
                    "text": "            }\n        }\n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 88,
                            "snippet": {
                              "text": "            ex.printStackTrace();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 85,
                            "endLine": 91,
                            "snippet": {
                              "text": "            }\n        }\n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "printStackTrace()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 16
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 7,
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) might reveal system data or debugging information by calling printStackTrace() on line [88](1). The information revealed by printStackTrace() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 88,
                  "snippet": {
                    "text": "            ex.printStackTrace();"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "endLine": 91,
                  "snippet": {
                    "text": "            }\n        }\n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 88,
                            "snippet": {
                              "text": "            ex.printStackTrace();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 85,
                            "endLine": 91,
                            "snippet": {
                              "text": "            }\n        }\n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "printStackTrace()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 16
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1089
                },
                "region": {
                  "startLine": 53,
                  "snippet": {
                    "text": "                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "endLine": 56,
                  "snippet": {
                    "text": "                }\n\n                result = SUCCESS;\n                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));\n            }\n            catch (Exception ex)\n            {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1089
                          },
                          "region": {
                            "startLine": 53,
                            "snippet": {
                              "text": "                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 50,
                            "endLine": 56,
                            "snippet": {
                              "text": "                }\n\n                result = SUCCESS;\n                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));\n            }\n            catch (Exception ex)\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1089
                },
                "region": {
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method AssertEqual() in [DeferredCollectionsTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 932
                },
                "region": {
                  "startLine": 126,
                  "endLine": 152,
                  "snippet": {
                    "text": "        private static void AssertEqual(Log expected, Log actual)\r\n        {\r\n            // Validate top level properties (which shouldn't have been read any differently)\r\n            Assert.Equal(expected.ID, actual.ID);\r\n            Assert.Equal(expected.StartTimeUtc, actual.StartTimeUtc);\r\n            Assert.Equal(expected.ApplicationContext, actual.ApplicationContext);\r\n\r\n            // Validate DeferredDictionary has the right keys and all equal values\r\n            foreach(KeyValuePair<string, CodeContext> item in actual.CodeContexts)\r\n            {\r\n                Assert.Equal(expected.CodeContexts[item.Key], item.Value);\r\n            }\r\n            Assert.Equal(expected.CodeContexts.Count, actual.CodeContexts.Count);\r\n\r\n            // Verify DeferredList has the right count and reconstructs identical messages\r\n            int count = 0;\r\n            foreach(LogMessage message in actual.Messages)\r\n            {\r\n                Assert.Equal(expected.Messages[count++], message);\r\n            }\r\n\r\n            // Enumerate list again via indexer\r\n            for (int i = 0; i < actual.Messages.Count; ++i)\r\n            {\r\n                Assert.Equal(expected.Messages[i], actual.Messages[i]);\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 123,
                  "endLine": 154,
                  "snippet": {
                    "text": "            Assert.Equal(contextsCopy.Count, valueCount);\n        }\n\n        private static void AssertEqual(Log expected, Log actual)\n        {\n            // Validate top level properties (which shouldn't have been read any differently)\n            Assert.Equal(expected.ID, actual.ID);\n            Assert.Equal(expected.StartTimeUtc, actual.StartTimeUtc);\n            Assert.Equal(expected.ApplicationContext, actual.ApplicationContext);\n\n            // Validate DeferredDictionary has the right keys and all equal values\n            foreach(KeyValuePair<string, CodeContext> item in actual.CodeContexts)\n            {\n                Assert.Equal(expected.CodeContexts[item.Key], item.Value);\n            }\n            Assert.Equal(expected.CodeContexts.Count, actual.CodeContexts.Count);\n\n            // Verify DeferredList has the right count and reconstructs identical messages\n            int count = 0;\n            foreach(LogMessage message in actual.Messages)\n            {\n                Assert.Equal(expected.Messages[count++], message);\n            }\n\n            // Enumerate list again via indexer\n            for (int i = 0; i < actual.Messages.Count; ++i)\n            {\n                Assert.Equal(expected.Messages[i], actual.Messages[i]);\n            }\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 932
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 152,
                            "snippet": {
                              "text": "        private static void AssertEqual(Log expected, Log actual)\r\n        {\r\n            // Validate top level properties (which shouldn't have been read any differently)\r\n            Assert.Equal(expected.ID, actual.ID);\r\n            Assert.Equal(expected.StartTimeUtc, actual.StartTimeUtc);\r\n            Assert.Equal(expected.ApplicationContext, actual.ApplicationContext);\r\n\r\n            // Validate DeferredDictionary has the right keys and all equal values\r\n            foreach(KeyValuePair<string, CodeContext> item in actual.CodeContexts)\r\n            {\r\n                Assert.Equal(expected.CodeContexts[item.Key], item.Value);\r\n            }\r\n            Assert.Equal(expected.CodeContexts.Count, actual.CodeContexts.Count);\r\n\r\n            // Verify DeferredList has the right count and reconstructs identical messages\r\n            int count = 0;\r\n            foreach(LogMessage message in actual.Messages)\r\n            {\r\n                Assert.Equal(expected.Messages[count++], message);\r\n            }\r\n\r\n            // Enumerate list again via indexer\r\n            for (int i = 0; i < actual.Messages.Count; ++i)\r\n            {\r\n                Assert.Equal(expected.Messages[i], actual.Messages[i]);\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 123,
                            "endLine": 154,
                            "snippet": {
                              "text": "            Assert.Equal(contextsCopy.Count, valueCount);\n        }\n\n        private static void AssertEqual(Log expected, Log actual)\n        {\n            // Validate top level properties (which shouldn't have been read any differently)\n            Assert.Equal(expected.ID, actual.ID);\n            Assert.Equal(expected.StartTimeUtc, actual.StartTimeUtc);\n            Assert.Equal(expected.ApplicationContext, actual.ApplicationContext);\n\n            // Validate DeferredDictionary has the right keys and all equal values\n            foreach(KeyValuePair<string, CodeContext> item in actual.CodeContexts)\n            {\n                Assert.Equal(expected.CodeContexts[item.Key], item.Value);\n            }\n            Assert.Equal(expected.CodeContexts.Count, actual.CodeContexts.Count);\n\n            // Verify DeferredList has the right count and reconstructs identical messages\n            int count = 0;\n            foreach(LogMessage message in actual.Messages)\n            {\n                Assert.Equal(expected.Messages[count++], message);\n            }\n\n            // Enumerate list again via indexer\n            for (int i = 0; i < actual.Messages.Count; ++i)\n            {\n                Assert.Equal(expected.Messages[i], actual.Messages[i]);\n            }\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: AssertEqual"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 932
                },
                "region": {
                  "startLine": 126,
                  "endLine": 152
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 16,
          "message": {
            "text": "Attackers are able to control the file system path argument to Exists() at [StaticDriverVerifierConverter.cs](1) line [111](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 311
                },
                "region": {
                  "startLine": 111,
                  "snippet": {
                    "text": "                    if (File.Exists(uriText))"
                  }
                },
                "contextRegion": {
                  "startLine": 108,
                  "endLine": 114,
                  "snippet": {
                    "text": "\n                if (!uriText.Equals(\"?\", StringComparison.Ordinal))\n                {\n                    if (File.Exists(uriText))\n                    {\n                        uriText = Path.GetFullPath(uriText);\n                    }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 31
                    },
                    {
                      "index": 32
                    },
                    {
                      "index": 33
                    },
                    {
                      "index": 34
                    },
                    {
                      "index": 35
                    },
                    {
                      "index": 36
                    },
                    {
                      "index": 37
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 311
                          },
                          "region": {
                            "startLine": 111,
                            "snippet": {
                              "text": "                    if (File.Exists(uriText))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 108,
                            "endLine": 114,
                            "snippet": {
                              "text": "\n                if (!uriText.Equals(\"?\", StringComparison.Ordinal))\n                {\n                    if (File.Exists(uriText))\n                    {\n                        uriText = Path.GetFullPath(uriText);\n                    }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Exists(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 311
                },
                "region": {
                  "startLine": 111
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method AssertThatProblemHasDefaultProblemProperties() in [AndroidStudioProblemTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 966
                },
                "region": {
                  "startLine": 581,
                  "endLine": 594,
                  "snippet": {
                    "text": "        private static void AssertThatProblemHasDefaultProblemProperties(AndroidStudioProblem uut)\r\n        {\r\n            Assert.Equal(\"file://$PROJECT_DIR$/file.java\", uut.File);\r\n            Assert.Equal(42, uut.Line);\r\n            Assert.Equal(\"mod\", uut.Module);\r\n            Assert.Equal(\"pack\", uut.Package);\r\n            Assert.Equal(\"file\", uut.EntryPointType);\r\n            Assert.Equal(\"fqname\", uut.EntryPointName);\r\n            Assert.Equal(\"WARNING\", uut.Severity);\r\n            Assert.Equal(\"WARNING_ATTRIBUTES\", uut.AttributeKey);\r\n            Assert.Equal(\"Assertions\", uut.ProblemClass);\r\n            uut.Hints.Should().Equal(new[] { \"some hint content\" });\r\n            Assert.Equal(\"Method is never used.\", uut.Description);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 578,
                  "endLine": 597,
                  "snippet": {
                    "text": "                );\n        }\n\n        private static void AssertThatProblemHasDefaultProblemProperties(AndroidStudioProblem uut)\n        {\n            Assert.Equal(\"file://$PROJECT_DIR$/file.java\", uut.File);\n            Assert.Equal(42, uut.Line);\n            Assert.Equal(\"mod\", uut.Module);\n            Assert.Equal(\"pack\", uut.Package);\n            Assert.Equal(\"file\", uut.EntryPointType);\n            Assert.Equal(\"fqname\", uut.EntryPointName);\n            Assert.Equal(\"WARNING\", uut.Severity);\n            Assert.Equal(\"WARNING_ATTRIBUTES\", uut.AttributeKey);\n            Assert.Equal(\"Assertions\", uut.ProblemClass);\n            uut.Hints.Should().Equal(new[] { \"some hint content\" });\n            Assert.Equal(\"Method is never used.\", uut.Description);\n        }\n\n        private static AndroidStudioProblem Parse(XmlReader reader)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 966
                          },
                          "region": {
                            "startLine": 581,
                            "endLine": 594,
                            "snippet": {
                              "text": "        private static void AssertThatProblemHasDefaultProblemProperties(AndroidStudioProblem uut)\r\n        {\r\n            Assert.Equal(\"file://$PROJECT_DIR$/file.java\", uut.File);\r\n            Assert.Equal(42, uut.Line);\r\n            Assert.Equal(\"mod\", uut.Module);\r\n            Assert.Equal(\"pack\", uut.Package);\r\n            Assert.Equal(\"file\", uut.EntryPointType);\r\n            Assert.Equal(\"fqname\", uut.EntryPointName);\r\n            Assert.Equal(\"WARNING\", uut.Severity);\r\n            Assert.Equal(\"WARNING_ATTRIBUTES\", uut.AttributeKey);\r\n            Assert.Equal(\"Assertions\", uut.ProblemClass);\r\n            uut.Hints.Should().Equal(new[] { \"some hint content\" });\r\n            Assert.Equal(\"Method is never used.\", uut.Description);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 578,
                            "endLine": 597,
                            "snippet": {
                              "text": "                );\n        }\n\n        private static void AssertThatProblemHasDefaultProblemProperties(AndroidStudioProblem uut)\n        {\n            Assert.Equal(\"file://$PROJECT_DIR$/file.java\", uut.File);\n            Assert.Equal(42, uut.Line);\n            Assert.Equal(\"mod\", uut.Module);\n            Assert.Equal(\"pack\", uut.Package);\n            Assert.Equal(\"file\", uut.EntryPointType);\n            Assert.Equal(\"fqname\", uut.EntryPointName);\n            Assert.Equal(\"WARNING\", uut.Severity);\n            Assert.Equal(\"WARNING_ATTRIBUTES\", uut.AttributeKey);\n            Assert.Equal(\"Assertions\", uut.ProblemClass);\n            uut.Hints.Should().Equal(new[] { \"some hint content\" });\n            Assert.Equal(\"Method is never used.\", uut.Description);\n        }\n\n        private static AndroidStudioProblem Parse(XmlReader reader)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: AssertThatProblemHasDefaultProblemProperties"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 966
                },
                "region": {
                  "startLine": 581,
                  "endLine": 594
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Interior_Characters is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 107,
                  "snippet": {
                    "text": "        private readonly static Region s_Interior_Characters = "
                  }
                },
                "contextRegion": {
                  "startLine": 104,
                  "endLine": 110,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = LINES_2_AND_3 },\n                           StartLine = 2, StartColumn = 1, EndLine = 3, EndColumn = 5, CharOffset = 6, CharLength = 9 };\n\n        private readonly static Region s_Interior_Characters = \n            new Region() { Snippet = new ArtifactContent() { Text = INTERIOR_CHARACTERS },\n                           StartLine = 3, StartColumn = 2, EndLine = 3, EndColumn = 4, CharOffset = 12, CharLength = 2 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 107,
                            "snippet": {
                              "text": "        private readonly static Region s_Interior_Characters = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 104,
                            "endLine": 110,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = LINES_2_AND_3 },\n                           StartLine = 2, StartColumn = 1, EndLine = 3, EndColumn = 5, CharOffset = 6, CharLength = 9 };\n\n        private readonly static Region s_Interior_Characters = \n            new Region() { Snippet = new ArtifactContent() { Text = INTERIOR_CHARACTERS },\n                           StartLine = 3, StartColumn = 2, EndLine = 3, EndColumn = 4, CharOffset = 12, CharLength = 2 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Interior_Characters"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 107
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 27,
          "message": {
            "text": "The call to ReadLine() at [StaticDriverVerifierConverter.cs](1) line [69](1) might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.\r\nAn attacker could cause the program to crash or otherwise become unavailable to legitimate users."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 311
                },
                "region": {
                  "startLine": 69,
                  "snippet": {
                    "text": "                while (!string.IsNullOrEmpty(line = reader.ReadLine()))"
                  }
                },
                "contextRegion": {
                  "startLine": 66,
                  "endLine": 72,
                  "snippet": {
                    "text": "                int nestingLevel = 0;\n                string line;\n\n                while (!string.IsNullOrEmpty(line = reader.ReadLine()))\n                {\n                    ProcessLine(line, ref nestingLevel, result);\n                }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 311
                          },
                          "region": {
                            "startLine": 69,
                            "snippet": {
                              "text": "                while (!string.IsNullOrEmpty(line = reader.ReadLine()))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 66,
                            "endLine": 72,
                            "snippet": {
                              "text": "                int nestingLevel = 0;\n                string line;\n\n                while (!string.IsNullOrEmpty(line = reader.ReadLine()))\n                {\n                    ProcessLine(line, ref nestingLevel, result);\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "ReadLine()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 311
                },
                "region": {
                  "startLine": 69
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field SET_ID is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 168
                },
                "region": {
                  "startLine": 332,
                  "snippet": {
                    "text": "        private const string SET_ID = \"Set\";"
                  }
                },
                "contextRegion": {
                  "startLine": 329,
                  "endLine": 335,
                  "snippet": {
                    "text": "        #endregion\n\n        private const string KEY_ID = \"Key\";\n        private const string SET_ID = \"Set\";\n        private const string ITEM_ID = \"Item\";\n        private const string TYPE_ID = \"Type\";\n        private const string VALUE_ID = \"Value\";\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 168
                          },
                          "region": {
                            "startLine": 332,
                            "snippet": {
                              "text": "        private const string SET_ID = \"Set\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 329,
                            "endLine": 335,
                            "snippet": {
                              "text": "        #endregion\n\n        private const string KEY_ID = \"Key\";\n        private const string SET_ID = \"Set\";\n        private const string ITEM_ID = \"Item\";\n        private const string TYPE_ID = \"Type\";\n        private const string VALUE_ID = \"Value\";\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: SET_ID"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 168
                },
                "region": {
                  "startLine": 332
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 38
                    },
                    {
                      "index": 39
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 38
                    },
                    {
                      "index": 39
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 38
                    },
                    {
                      "index": 39
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 38
                    },
                    {
                      "index": 39
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "endLine": 35,
                  "snippet": {
                    "text": "            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n                return;\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 32,
                            "snippet": {
                              "text": "                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 29,
                            "endLine": 35,
                            "snippet": {
                              "text": "            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n                return;\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 32
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field simpleXmlDoc is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 455
                },
                "region": {
                  "startLine": 137,
                  "snippet": {
                    "text": "        private const string simpleXmlDoc = \"<xml><skip_this>expected child content</skip_this><following/></xml>\";"
                  }
                },
                "contextRegion": {
                  "startLine": 134,
                  "endLine": 140,
                  "snippet": {
                    "text": "            }\n        }\n\n        private const string simpleXmlDoc = \"<xml><skip_this>expected child content</skip_this><following/></xml>\";\n\n        [Fact]\n        public void Extensions_XmlIgnoreElementContent_Required_Success()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 455
                          },
                          "region": {
                            "startLine": 137,
                            "snippet": {
                              "text": "        private const string simpleXmlDoc = \"<xml><skip_this>expected child content</skip_this><following/></xml>\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 134,
                            "endLine": 140,
                            "snippet": {
                              "text": "            }\n        }\n\n        private const string simpleXmlDoc = \"<xml><skip_this>expected child content</skip_this><following/></xml>\";\n\n        [Fact]\n        public void Extensions_XmlIgnoreElementContent_Required_Success()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: simpleXmlDoc"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 455
                },
                "region": {
                  "startLine": 137
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "        System.out.println(\"Got \" + rd + \" from Math.random()\");"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "endLine": 26,
                  "snippet": {
                    "text": "        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 23,
                            "snippet": {
                              "text": "        System.out.println(\"Got \" + rd + \" from Math.random()\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 20,
                            "endLine": 26,
                            "snippet": {
                              "text": "        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "        System.out.println(\"Got \" + rd + \" from Math.random()\");"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "endLine": 26,
                  "snippet": {
                    "text": "        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 23,
                            "snippet": {
                              "text": "        System.out.println(\"Got \" + rd + \" from Math.random()\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 20,
                            "endLine": 26,
                            "snippet": {
                              "text": "        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ComputeMD5Hash() in [HashUtilities.cs](1) ignores an exception on line [126](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 126,
                  "snippet": {
                    "text": "            catch (IOException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 123,
                  "endLine": 129,
                  "snippet": {
                    "text": "                    }\n                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return md5;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 126,
                            "snippet": {
                              "text": "            catch (IOException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 123,
                            "endLine": 129,
                            "snippet": {
                              "text": "                    }\n                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return md5;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 126
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ComputeMD5Hash() in [HashUtilities.cs](1) ignores an exception on line [127](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 127,
                  "snippet": {
                    "text": "            catch (UnauthorizedAccessException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "endLine": 130,
                  "snippet": {
                    "text": "                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return md5;\n        }\n    }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 127,
                            "snippet": {
                              "text": "            catch (UnauthorizedAccessException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 124,
                            "endLine": 130,
                            "snippet": {
                              "text": "                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return md5;\n        }\n    }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 127
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method SetPropertiesFrom() in [PropertyBagHolderVersionOne.cs](1) can dereference a null pointer on line [144](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 492
                },
                "region": {
                  "startLine": 144,
                  "snippet": {
                    "text": "                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];"
                  }
                },
                "contextRegion": {
                  "startLine": 141,
                  "endLine": 147,
                  "snippet": {
                    "text": "\n            foreach (string propertyName in other.PropertyNames)\n            {\n                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];\n                Properties[propertyName] = new SerializedPropertyInfo(otherInfo.SerializedValue, otherInfo.IsString);\n            }\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 492
                          },
                          "region": {
                            "startLine": 130,
                            "snippet": {
                              "text": "            if (other == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 127,
                            "endLine": 133,
                            "snippet": {
                              "text": "\n        public void SetPropertiesFrom(IPropertyBagHolderVersionOne other)\n        {\n            if (other == null)\n            {\n                throw new ArgumentNullException(nameof(other));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 492
                          },
                          "region": {
                            "startLine": 137,
                            "snippet": {
                              "text": "            PropertyBagHolderVersionOne otherHolder = other as PropertyBagHolderVersionOne;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 134,
                            "endLine": 140,
                            "snippet": {
                              "text": "            \n            // We need the concrete class because the IPropertyBagHolderVersionOne interface\n            // doesn't expose the raw Properties array.\n            PropertyBagHolderVersionOne otherHolder = other as PropertyBagHolderVersionOne;\n            Debug.Assert(otherHolder != null);\n\n            Properties = other.PropertyNames.Count > 0 ? new Dictionary<string, SerializedPropertyInfo>() : null;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "otherHolder = null : otherHolder is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 492
                          },
                          "region": {
                            "startLine": 137,
                            "snippet": {
                              "text": "            PropertyBagHolderVersionOne otherHolder = other as PropertyBagHolderVersionOne;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 134,
                            "endLine": 140,
                            "snippet": {
                              "text": "            \n            // We need the concrete class because the IPropertyBagHolderVersionOne interface\n            // doesn't expose the raw Properties array.\n            PropertyBagHolderVersionOne otherHolder = other as PropertyBagHolderVersionOne;\n            Debug.Assert(otherHolder != null);\n\n            Properties = other.PropertyNames.Count > 0 ? new Dictionary<string, SerializedPropertyInfo>() : null;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 492
                          },
                          "region": {
                            "startLine": 142,
                            "snippet": {
                              "text": "            foreach (string propertyName in other.PropertyNames)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 139,
                            "endLine": 145,
                            "snippet": {
                              "text": "\n            Properties = other.PropertyNames.Count > 0 ? new Dictionary<string, SerializedPropertyInfo>() : null;\n\n            foreach (string propertyName in other.PropertyNames)\n            {\n                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];\n                Properties[propertyName] = new SerializedPropertyInfo(otherInfo.SerializedValue, otherInfo.IsString);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 492
                          },
                          "region": {
                            "startLine": 144,
                            "snippet": {
                              "text": "                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];"
                            }
                          },
                          "contextRegion": {
                            "startLine": 141,
                            "endLine": 147,
                            "snippet": {
                              "text": "\n            foreach (string propertyName in other.PropertyNames)\n            {\n                SerializedPropertyInfo otherInfo = otherHolder.Properties[propertyName];\n                Properties[propertyName] = new SerializedPropertyInfo(otherInfo.SerializedValue, otherInfo.IsString);\n            }\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "otherHolder.get_Properties() : otherHolder is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 492
                },
                "region": {
                  "startLine": 144
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method CreateWhitespaceSkippingXmlReaderFromString() in [Utilities.cs](1) fails to enable validation before parsing XML on line [49](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 951
                },
                "region": {
                  "startLine": 49,
                  "snippet": {
                    "text": "            return CreateXmlReader(data, xmlSettings);"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "endLine": 52,
                  "snippet": {
                    "text": "                IgnoreWhitespace = true\n            };\n\n            return CreateXmlReader(data, xmlSettings);\n        }\n\n        private static XmlReader CreateXmlReader(string data, XmlReaderSettings xmlSettings)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 951
                          },
                          "region": {
                            "startLine": 41,
                            "snippet": {
                              "text": "            var xmlSettings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 38,
                            "endLine": 44,
                            "snippet": {
                              "text": "\n        public static XmlReader CreateWhitespaceSkippingXmlReaderFromString(string data)\n        {\n            var xmlSettings = new XmlReaderSettings\n            {\n                CloseInput = true,\n                DtdProcessing = DtdProcessing.Ignore,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "xmlSettings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 951
                          },
                          "region": {
                            "startLine": 49,
                            "snippet": {
                              "text": "            return CreateXmlReader(data, xmlSettings);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 46,
                            "endLine": 52,
                            "snippet": {
                              "text": "                IgnoreWhitespace = true\n            };\n\n            return CreateXmlReader(data, xmlSettings);\n        }\n\n        private static XmlReader CreateXmlReader(string data, XmlReaderSettings xmlSettings)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CreateXmlReader(?, xmlSettings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function",
                        "return"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 951
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field EmptyFile is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 404
                },
                "region": {
                  "startLine": 14,
                  "snippet": {
                    "text": "        private static Artifact EmptyFile = new Artifact();"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "endLine": 17,
                  "snippet": {
                    "text": "    public partial class Run\n    {\n        private static Graph EmptyGraph = new Graph();\n        private static Artifact EmptyFile = new Artifact();\n        private static Invocation EmptyInvocation = new Invocation();\n        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 404
                          },
                          "region": {
                            "startLine": 14,
                            "snippet": {
                              "text": "        private static Artifact EmptyFile = new Artifact();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 11,
                            "endLine": 17,
                            "snippet": {
                              "text": "    public partial class Run\n    {\n        private static Graph EmptyGraph = new Graph();\n        private static Artifact EmptyFile = new Artifact();\n        private static Invocation EmptyInvocation = new Invocation();\n        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: EmptyFile"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 404
                },
                "region": {
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 847,
                  "endLine": 868,
                  "snippet": {
                    "text": "        private void Visit(ToolComponent toolComponent, string toolComponentPointer)\r\n        {\r\n            Analyze(toolComponent, toolComponentPointer);\r\n\r\n            if (toolComponent.Notifications != null)\r\n            {\r\n                string notificationsPointer = toolComponentPointer.AtProperty(SarifPropertyName.Notifications);\r\n                for (int i = 0; i < toolComponent.Notifications.Count; ++i)\r\n                {\r\n                    Visit(toolComponent.Notifications[i], notificationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (toolComponent.Rules != null)\r\n            {\r\n                string rulesPointer = toolComponentPointer.AtProperty(SarifPropertyName.Rules);\r\n                for (int i = 0; i < toolComponent.Rules.Count; ++i)\r\n                {\r\n                    Visit(toolComponent.Rules[i], rulesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 844,
                  "endLine": 871,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(ToolComponent toolComponent, string toolComponentPointer)\n        {\n            Analyze(toolComponent, toolComponentPointer);\n\n            if (toolComponent.Notifications != null)\n            {\n                string notificationsPointer = toolComponentPointer.AtProperty(SarifPropertyName.Notifications);\n                for (int i = 0; i < toolComponent.Notifications.Count; ++i)\n                {\n                    Visit(toolComponent.Notifications[i], notificationsPointer.AtIndex(i));\n                }\n            }\n\n            if (toolComponent.Rules != null)\n            {\n                string rulesPointer = toolComponentPointer.AtProperty(SarifPropertyName.Rules);\n                for (int i = 0; i < toolComponent.Rules.Count; ++i)\n                {\n                    Visit(toolComponent.Rules[i], rulesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(VersionControlDetails versionControlDetails, string versionControlDetailsPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 847,
                            "endLine": 868,
                            "snippet": {
                              "text": "        private void Visit(ToolComponent toolComponent, string toolComponentPointer)\r\n        {\r\n            Analyze(toolComponent, toolComponentPointer);\r\n\r\n            if (toolComponent.Notifications != null)\r\n            {\r\n                string notificationsPointer = toolComponentPointer.AtProperty(SarifPropertyName.Notifications);\r\n                for (int i = 0; i < toolComponent.Notifications.Count; ++i)\r\n                {\r\n                    Visit(toolComponent.Notifications[i], notificationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (toolComponent.Rules != null)\r\n            {\r\n                string rulesPointer = toolComponentPointer.AtProperty(SarifPropertyName.Rules);\r\n                for (int i = 0; i < toolComponent.Rules.Count; ++i)\r\n                {\r\n                    Visit(toolComponent.Rules[i], rulesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 844,
                            "endLine": 871,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(ToolComponent toolComponent, string toolComponentPointer)\n        {\n            Analyze(toolComponent, toolComponentPointer);\n\n            if (toolComponent.Notifications != null)\n            {\n                string notificationsPointer = toolComponentPointer.AtProperty(SarifPropertyName.Notifications);\n                for (int i = 0; i < toolComponent.Notifications.Count; ++i)\n                {\n                    Visit(toolComponent.Notifications[i], notificationsPointer.AtIndex(i));\n                }\n            }\n\n            if (toolComponent.Rules != null)\n            {\n                string rulesPointer = toolComponentPointer.AtProperty(SarifPropertyName.Rules);\n                for (int i = 0; i < toolComponent.Rules.Count; ++i)\n                {\n                    Visit(toolComponent.Rules[i], rulesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(VersionControlDetails versionControlDetails, string versionControlDetailsPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 847,
                  "endLine": 868
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method Convert() in [FortifyConverter.cs](1) fails to enable validation before parsing XML on line [58](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 103
                },
                "region": {
                  "startLine": 58,
                  "snippet": {
                    "text": "            using (XmlReader reader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 55,
                  "endLine": 61,
                  "snippet": {
                    "text": "            string runDescription = null;\n            var results = new List<Result>();\n\n            using (XmlReader reader = XmlReader.Create(input, settings))\n            {\n                while (reader.Read())\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 103
                          },
                          "region": {
                            "startLine": 37,
                            "snippet": {
                              "text": "            if (input == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 34,
                            "endLine": 40,
                            "snippet": {
                              "text": "        /// <param name=\"dataToInsert\">Optionally emitted properties that should be written to log.</param>\n        public override void Convert(Stream input, IResultLogWriter output, OptionallyEmittedData dataToInsert)\n        {\n            if (input == null)\n            {\n                throw new ArgumentNullException(nameof(input));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 103
                          },
                          "region": {
                            "startLine": 42,
                            "snippet": {
                              "text": "            if (output == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 39,
                            "endLine": 45,
                            "snippet": {
                              "text": "                throw new ArgumentNullException(nameof(input));\n            }\n\n            if (output == null)\n            {\n                throw new ArgumentNullException(nameof(output));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 103
                          },
                          "region": {
                            "startLine": 47,
                            "snippet": {
                              "text": "            var settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 44,
                            "endLine": 50,
                            "snippet": {
                              "text": "                throw new ArgumentNullException(nameof(output));\n            }\n\n            var settings = new XmlReaderSettings\n            {\n                DtdProcessing = DtdProcessing.Ignore,\n                IgnoreWhitespace = true,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 103
                          },
                          "region": {
                            "startLine": 58,
                            "snippet": {
                              "text": "            using (XmlReader reader = XmlReader.Create(input, settings))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 55,
                            "endLine": 61,
                            "snippet": {
                              "text": "            string runDescription = null;\n            var results = new List<Result>();\n\n            using (XmlReader reader = XmlReader.Create(input, settings))\n            {\n                while (reader.Read())\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 103
                },
                "region": {
                  "startLine": 58
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "                Console.WriteLine(SdkResources.MSG_AnalysisCompletedSuccessfully);"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "endLine": 35,
                  "snippet": {
                    "text": "\n            if (fatalConditions == RuntimeConditions.None)\n            {\n                Console.WriteLine(SdkResources.MSG_AnalysisCompletedSuccessfully);\n            }\n\n            Console.WriteLine();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 32,
                            "snippet": {
                              "text": "                Console.WriteLine(SdkResources.MSG_AnalysisCompletedSuccessfully);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 29,
                            "endLine": 35,
                            "snippet": {
                              "text": "\n            if (fatalConditions == RuntimeConditions.None)\n            {\n                Console.WriteLine(SdkResources.MSG_AnalysisCompletedSuccessfully);\n            }\n\n            Console.WriteLine();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 32
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field INTERIOR_NEWLINES is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "        private const string INTERIOR_NEWLINES = \"\\nefg\\r\";"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "endLine": 54,
                  "snippet": {
                    "text": "        private const string CARRIAGE_RETURN = \"\\r\";\n        private const string LINE1_NO_NEWLINES = \"abcd\";\n        private const string INTERIOR_CHARACTERS = \"ij\";\n        private const string INTERIOR_NEWLINES = \"\\nefg\\r\";\n        private const string LINES_2_AND_3 = \"efg\\r\\nhijk\";\n        private const string CARRIAGE_RETURN_NEW_LINE = \"\\r\\n\";\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 51,
                            "snippet": {
                              "text": "        private const string INTERIOR_NEWLINES = \"\\nefg\\r\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 48,
                            "endLine": 54,
                            "snippet": {
                              "text": "        private const string CARRIAGE_RETURN = \"\\r\";\n        private const string LINE1_NO_NEWLINES = \"abcd\";\n        private const string INTERIOR_CHARACTERS = \"ij\";\n        private const string INTERIOR_NEWLINES = \"\\nefg\\r\";\n        private const string LINES_2_AND_3 = \"efg\\r\\nhijk\";\n        private const string CARRIAGE_RETURN_NEW_LINE = \"\\r\\n\";\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: INTERIOR_NEWLINES"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 51
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 459,
                  "endLine": 470,
                  "snippet": {
                    "text": "        private void Visit(Location location, string locationPointer)\r\n        {\r\n            if (location.Message != null)\r\n            {\r\n                Visit(location.Message, locationPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (location.PhysicalLocation != null)\r\n            {\r\n                Visit(location.PhysicalLocation, locationPointer.AtProperty(SarifPropertyName.PhysicalLocation));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 456,
                  "endLine": 473,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Location location, string locationPointer)\n        {\n            if (location.Message != null)\n            {\n                Visit(location.Message, locationPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (location.PhysicalLocation != null)\n            {\n                Visit(location.PhysicalLocation, locationPointer.AtProperty(SarifPropertyName.PhysicalLocation));\n            }\n        }\n\n        private void Visit(LogicalLocation logicalLocation, string logicalLocationPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 459,
                            "endLine": 470,
                            "snippet": {
                              "text": "        private void Visit(Location location, string locationPointer)\r\n        {\r\n            if (location.Message != null)\r\n            {\r\n                Visit(location.Message, locationPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (location.PhysicalLocation != null)\r\n            {\r\n                Visit(location.PhysicalLocation, locationPointer.AtProperty(SarifPropertyName.PhysicalLocation));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 456,
                            "endLine": 473,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Location location, string locationPointer)\n        {\n            if (location.Message != null)\n            {\n                Visit(location.Message, locationPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (location.PhysicalLocation != null)\n            {\n                Visit(location.PhysicalLocation, locationPointer.AtProperty(SarifPropertyName.PhysicalLocation));\n            }\n        }\n\n        private void Visit(LogicalLocation logicalLocation, string logicalLocationPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 459,
                  "endLine": 470
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 16,
          "message": {
            "text": "Attackers are able to control the file system path argument to Exists() at [FileSystem.cs](1) line [30](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "            return Directory.Exists(path);"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "        /// </returns>\n        public bool DirectoryExists(string path)\n        {\n            return Directory.Exists(path);\n        }\n\n        /// <summary>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 63
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 30,
                            "snippet": {
                              "text": "            return Directory.Exists(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 27,
                            "endLine": 33,
                            "snippet": {
                              "text": "        /// </returns>\n        public bool DirectoryExists(string path)\n        {\n            return Directory.Exists(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Exists(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 63
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 30,
                            "snippet": {
                              "text": "            return Directory.Exists(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 27,
                            "endLine": 33,
                            "snippet": {
                              "text": "        /// </returns>\n        public bool DirectoryExists(string path)\n        {\n            return Directory.Exists(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Exists(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 63
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 30,
                            "snippet": {
                              "text": "            return Directory.Exists(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 27,
                            "endLine": 33,
                            "snippet": {
                              "text": "        /// </returns>\n        public bool DirectoryExists(string path)\n        {\n            return Directory.Exists(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Exists(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 30
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Complete_File_Carriage_Returns_Only is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 125,
                  "snippet": {
                    "text": "        private readonly static Region s_Complete_File_Carriage_Returns_Only = "
                  }
                },
                "contextRegion": {
                  "startLine": 122,
                  "endLine": 128,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = FRAGMENT_NEW_LINES_ONLY },\n                           StartLine = 1, StartColumn = 4, EndLine = 4, EndColumn = 1, CharOffset = 3, CharLength = 9 };\n\n        private readonly static Region s_Complete_File_Carriage_Returns_Only = \n            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE_CARRIAGE_RETURNS_ONLY },\n                           StartLine = 1, StartColumn = 1, EndLine = 6, EndColumn = 1, CharOffset = 0, CharLength = 10 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 125,
                            "snippet": {
                              "text": "        private readonly static Region s_Complete_File_Carriage_Returns_Only = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 122,
                            "endLine": 128,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = FRAGMENT_NEW_LINES_ONLY },\n                           StartLine = 1, StartColumn = 4, EndLine = 4, EndColumn = 1, CharOffset = 3, CharLength = 9 };\n\n        private readonly static Region s_Complete_File_Carriage_Returns_Only = \n            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE_CARRIAGE_RETURNS_ONLY },\n                           StartLine = 1, StartColumn = 1, EndLine = 6, EndColumn = 1, CharOffset = 0, CharLength = 10 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Complete_File_Carriage_Returns_Only"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 125
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "        Random rg1 = new Random(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 29,
                            "snippet": {
                              "text": "        Random rg1 = new Random(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 26,
                            "endLine": 32,
                            "snippet": {
                              "text": "        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Random()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 22
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "        Random rg1 = new Random(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 29,
                            "snippet": {
                              "text": "        Random rg1 = new Random(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 26,
                            "endLine": 32,
                            "snippet": {
                              "text": "        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Random()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 22
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 27,
          "message": {
            "text": "The call to ReadToEnd() at [ResourceExtractor.cs](1) line [46](1) might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.\r\nAn attacker could cause the program to crash or otherwise become unavailable to legitimate users."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 991
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "                    text = reader.ReadToEnd();"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "endLine": 49,
                  "snippet": {
                    "text": "\n                using (StreamReader reader = new StreamReader(stream))\n                {\n                    text = reader.ReadToEnd();\n                }\n            }\n            return text;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 991
                          },
                          "region": {
                            "startLine": 46,
                            "snippet": {
                              "text": "                    text = reader.ReadToEnd();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 43,
                            "endLine": 49,
                            "snippet": {
                              "text": "\n                using (StreamReader reader = new StreamReader(stream))\n                {\n                    text = reader.ReadToEnd();\n                }\n            }\n            return text;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "ReadToEnd()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 991
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method Deserialize() in [ValidateCommand.cs](1) ignores an exception on line [84](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 105
                },
                "region": {
                  "startLine": 84,
                  "snippet": {
                    "text": "            catch (JsonSerializationException)"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "endLine": 87,
                  "snippet": {
                    "text": "            {\n                return JsonConvert.DeserializeObject<SarifLog>(logContents);\n            }\n            catch (JsonSerializationException)\n            {\n                // This exception can happen, for example, if a property required by the schema is\n                // missing.\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 105
                          },
                          "region": {
                            "startLine": 84,
                            "snippet": {
                              "text": "            catch (JsonSerializationException)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 81,
                            "endLine": 87,
                            "snippet": {
                              "text": "            {\n                return JsonConvert.DeserializeObject<SarifLog>(logContents);\n            }\n            catch (JsonSerializationException)\n            {\n                // This exception can happen, for example, if a property required by the schema is\n                // missing.\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 105
                },
                "region": {
                  "startLine": 84
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 32,
          "message": {
            "text": "The declaration of GetHashCode() in DefaultObjectComparer@1 looks like an effort to override a common .NET method, but it does not have the intended effect.\r\nThis looks like an effort to override a common .NET method, but it probably does not have the intended effect."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 502
                },
                "region": {
                  "startLine": 28,
                  "endLine": 32,
                  "snippet": {
                    "text": "        public int GetHashCode(T obj)\r\n        {\r\n            if (obj == null) { return 0; }\r\n            return obj.GetHashCode();\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "endLine": 35,
                  "snippet": {
                    "text": "            return Object.Equals(x, y);\n        }\n\n        public int GetHashCode(T obj)\n        {\n            if (obj == null) { return 0; }\n            return obj.GetHashCode();\n        }\n    }\n\n    public class OrderSensitiveValueComparisonListTests\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 502
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 32,
                            "snippet": {
                              "text": "        public int GetHashCode(T obj)\r\n        {\r\n            if (obj == null) { return 0; }\r\n            return obj.GetHashCode();\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 25,
                            "endLine": 35,
                            "snippet": {
                              "text": "            return Object.Equals(x, y);\n        }\n\n        public int GetHashCode(T obj)\n        {\n            if (obj == null) { return 0; }\n            return obj.GetHashCode();\n        }\n    }\n\n    public class OrderSensitiveValueComparisonListTests\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: GetHashCode"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 502
                },
                "region": {
                  "startLine": 28,
                  "endLine": 32
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method PopulatePropertyWithGeneratedDefaultValue() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 253,
                  "endLine": 359,
                  "snippet": {
                    "text": "        private void PopulatePropertyWithGeneratedDefaultValue(ISarifNode node, PropertyInfo property)\r\n        {\r\n            // If we can't set this property, it is not of interest\r\n            if (property.GetAccessors().Length != 2) { return; }\r\n\r\n            // This special-casing is required to account for the fact that an \r\n            // exception instance itself contains an array of exceptions\r\n            // (exception.innerExceptions). We don't want to hydrate \r\n            // the innerExceptions of any innerExceptions, which results\r\n            // in re-entrancy that ends up consuming all stack space.\r\n            //\r\n            // Once we have populated a single exceptions.innerExceptions array, \r\n            // we have accomplished all the testing we need in any case.\r\n            if (node.SarifNodeKind == SarifNodeKind.ExceptionData &&\r\n                property.Name == \"InnerExceptions\" &&\r\n                _visitingExceptionData) { return; }\r\n\r\n            // Similar approach applies for graph node.children\r\n            if (node.SarifNodeKind == SarifNodeKind.Node &&\r\n                property.Name == \"Children\" &&\r\n                _visitingGraphNode) { return; }\r\n\r\n            object propertyValue = null;\r\n            Type propertyType = property.PropertyType;\r\n\r\n            // isRequired flag ensures we don't end up generating a SARIF file that's missing a required property or an anyOf required property,\r\n            // because such a file wouldn't validate.\r\n            bool isRequired = PropertyIsRequiredBySchema(node.GetType().Name, property.Name) || \r\n                PropertyIsAnyOfRequiredBySchema(node.GetType().Name, property.Name);\r\n\r\n            if (GetPropertyFormatPattern(node.GetType().Name, property.Name) is string propertyFormatPattern)\r\n            {\r\n                propertyValue = GetFormattedStringValue(propertyFormatPattern);\r\n            }\r\n            else if (_typeToPropertyValueConstructorMap.TryGetValue(propertyType, out PrimitiveValueBuilder propertyValueBuilder))\r\n            {\r\n                propertyValue = propertyValueBuilder(isRequired);\r\n            }\r\n            else if (HasParameterlessConstructor(propertyType))\r\n            {\r\n                propertyValue = Activator.CreateInstance(propertyType);\r\n            }\r\n            else if (IsList(propertyType))\r\n            {\r\n                propertyValue = CreateEmptyList(propertyType);\r\n\r\n                Type genericTypeArgument = propertyType.GenericTypeArguments[0];\r\n                object listElement = null;\r\n\r\n                // For arrays that are populated with SARIF types, we will instantiate a \r\n                // single object instance and put it into the array. This allows the \r\n                // default populating visitor to continue to explore the object model and\r\n                // exercise nested types. This approach prevents comprehensive testing of\r\n                // the arrays populated in this way (because they are non-empty\r\n                if (genericTypeArgument.FullName.StartsWith(\"Microsoft.CodeAnalysis.Sarif.\"))\r\n                {\r\n                    listElement = Activator.CreateInstance(propertyType.GenericTypeArguments[0]);\r\n                }\r\n                else if (_typeToPropertyValueConstructorMap.TryGetValue(genericTypeArgument, out propertyValueBuilder))\r\n                {\r\n                    listElement = propertyValueBuilder(isRequired);\r\n                }\r\n\r\n                AddElementToList(propertyValue, listElement);\r\n            }\r\n            else if (IsDictionary(propertyType))\r\n            {\r\n                Type genericTypeArgument = propertyType.GenericTypeArguments[1];\r\n\r\n                // We do not populate any propert bags directly. Instead, we will use the\r\n                // IPropertyBagHolder API to instantiate and then empty these constructs\r\n                if (genericTypeArgument != typeof(SerializedPropertyInfo))\r\n                {\r\n                    propertyValue = CreateEmptyDictionary(propertyType);\r\n\r\n                    // For dictionaries that are populated with SARIF types, we will instantiate a \r\n                    // single object instance and store it using an arbitrary key. This approach\r\n                    // ensures we populate the SARIF sample with all possible object types\r\n                    if (genericTypeArgument.FullName.StartsWith(\"Microsoft.CodeAnalysis.Sarif.\"))\r\n                    {\r\n                        object dictionaryValue = Activator.CreateInstance(genericTypeArgument);\r\n                        AddElementToDictionary(propertyValue, dictionaryValue);\r\n                    }\r\n                }\r\n            }\r\n            else if ((property.PropertyType.BaseType == typeof(Enum)))\r\n            {\r\n                // This code sets any enum to the first non-zero value we encounter\r\n                foreach (var enumValue in Enum.GetValues(property.PropertyType))\r\n                {\r\n                    if ((int)enumValue != 0)\r\n                    {\r\n                        propertyValue = enumValue;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                // This code ensures both that we encounter an enum value that is non-zero,\r\n                // and that no enum definitions skips the value of one in its definition\r\n                if ((int)propertyValue != 1)\r\n                {\r\n                    throw new InvalidOperationException();\r\n                }\r\n            }\r\n\r\n            property.SetValue(node, propertyValue);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 250,
                  "endLine": 362,
                  "snippet": {
                    "text": "            return 0;\n        }\n\n        private void PopulatePropertyWithGeneratedDefaultValue(ISarifNode node, PropertyInfo property)\n        {\n            // If we can't set this property, it is not of interest\n            if (property.GetAccessors().Length != 2) { return; }\n\n            // This special-casing is required to account for the fact that an \n            // exception instance itself contains an array of exceptions\n            // (exception.innerExceptions). We don't want to hydrate \n            // the innerExceptions of any innerExceptions, which results\n            // in re-entrancy that ends up consuming all stack space.\n            //\n            // Once we have populated a single exceptions.innerExceptions array, \n            // we have accomplished all the testing we need in any case.\n            if (node.SarifNodeKind == SarifNodeKind.ExceptionData &&\n                property.Name == \"InnerExceptions\" &&\n                _visitingExceptionData) { return; }\n\n            // Similar approach applies for graph node.children\n            if (node.SarifNodeKind == SarifNodeKind.Node &&\n                property.Name == \"Children\" &&\n                _visitingGraphNode) { return; }\n\n            object propertyValue = null;\n            Type propertyType = property.PropertyType;\n\n            // isRequired flag ensures we don't end up generating a SARIF file that's missing a required property or an anyOf required property,\n            // because such a file wouldn't validate.\n            bool isRequired = PropertyIsRequiredBySchema(node.GetType().Name, property.Name) || \n                PropertyIsAnyOfRequiredBySchema(node.GetType().Name, property.Name);\n\n            if (GetPropertyFormatPattern(node.GetType().Name, property.Name) is string propertyFormatPattern)\n            {\n                propertyValue = GetFormattedStringValue(propertyFormatPattern);\n            }\n            else if (_typeToPropertyValueConstructorMap.TryGetValue(propertyType, out PrimitiveValueBuilder propertyValueBuilder))\n            {\n                propertyValue = propertyValueBuilder(isRequired);\n            }\n            else if (HasParameterlessConstructor(propertyType))\n            {\n                propertyValue = Activator.CreateInstance(propertyType);\n            }\n            else if (IsList(propertyType))\n            {\n                propertyValue = CreateEmptyList(propertyType);\n\n                Type genericTypeArgument = propertyType.GenericTypeArguments[0];\n                object listElement = null;\n\n                // For arrays that are populated with SARIF types, we will instantiate a \n                // single object instance and put it into the array. This allows the \n                // default populating visitor to continue to explore the object model and\n                // exercise nested types. This approach prevents comprehensive testing of\n                // the arrays populated in this way (because they are non-empty\n                if (genericTypeArgument.FullName.StartsWith(\"Microsoft.CodeAnalysis.Sarif.\"))\n                {\n                    listElement = Activator.CreateInstance(propertyType.GenericTypeArguments[0]);\n                }\n                else if (_typeToPropertyValueConstructorMap.TryGetValue(genericTypeArgument, out propertyValueBuilder))\n                {\n                    listElement = propertyValueBuilder(isRequired);\n                }\n\n                AddElementToList(propertyValue, listElement);\n            }\n            else if (IsDictionary(propertyType))\n            {\n                Type genericTypeArgument = propertyType.GenericTypeArguments[1];\n\n                // We do not populate any propert bags directly. Instead, we will use the\n                // IPropertyBagHolder API to instantiate and then empty these constructs\n                if (genericTypeArgument != typeof(SerializedPropertyInfo))\n                {\n                    propertyValue = CreateEmptyDictionary(propertyType);\n\n                    // For dictionaries that are populated with SARIF types, we will instantiate a \n                    // single object instance and store it using an arbitrary key. This approach\n                    // ensures we populate the SARIF sample with all possible object types\n                    if (genericTypeArgument.FullName.StartsWith(\"Microsoft.CodeAnalysis.Sarif.\"))\n                    {\n                        object dictionaryValue = Activator.CreateInstance(genericTypeArgument);\n                        AddElementToDictionary(propertyValue, dictionaryValue);\n                    }\n                }\n            }\n            else if ((property.PropertyType.BaseType == typeof(Enum)))\n            {\n                // This code sets any enum to the first non-zero value we encounter\n                foreach (var enumValue in Enum.GetValues(property.PropertyType))\n                {\n                    if ((int)enumValue != 0)\n                    {\n                        propertyValue = enumValue;\n                        break;\n                    }\n                }\n                \n                // This code ensures both that we encounter an enum value that is non-zero,\n                // and that no enum definitions skips the value of one in its definition\n                if ((int)propertyValue != 1)\n                {\n                    throw new InvalidOperationException();\n                }\n            }\n\n            property.SetValue(node, propertyValue);\n        }\n\n        // Converts a .NET object + property name to their JSON equivalents and \n        // determines whether that property is required according to the schema.\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 253,
                            "endLine": 359,
                            "snippet": {
                              "text": "        private void PopulatePropertyWithGeneratedDefaultValue(ISarifNode node, PropertyInfo property)\r\n        {\r\n            // If we can't set this property, it is not of interest\r\n            if (property.GetAccessors().Length != 2) { return; }\r\n\r\n            // This special-casing is required to account for the fact that an \r\n            // exception instance itself contains an array of exceptions\r\n            // (exception.innerExceptions). We don't want to hydrate \r\n            // the innerExceptions of any innerExceptions, which results\r\n            // in re-entrancy that ends up consuming all stack space.\r\n            //\r\n            // Once we have populated a single exceptions.innerExceptions array, \r\n            // we have accomplished all the testing we need in any case.\r\n            if (node.SarifNodeKind == SarifNodeKind.ExceptionData &&\r\n                property.Name == \"InnerExceptions\" &&\r\n                _visitingExceptionData) { return; }\r\n\r\n            // Similar approach applies for graph node.children\r\n            if (node.SarifNodeKind == SarifNodeKind.Node &&\r\n                property.Name == \"Children\" &&\r\n                _visitingGraphNode) { return; }\r\n\r\n            object propertyValue = null;\r\n            Type propertyType = property.PropertyType;\r\n\r\n            // isRequired flag ensures we don't end up generating a SARIF file that's missing a required property or an anyOf required property,\r\n            // because such a file wouldn't validate.\r\n            bool isRequired = PropertyIsRequiredBySchema(node.GetType().Name, property.Name) || \r\n                PropertyIsAnyOfRequiredBySchema(node.GetType().Name, property.Name);\r\n\r\n            if (GetPropertyFormatPattern(node.GetType().Name, property.Name) is string propertyFormatPattern)\r\n            {\r\n                propertyValue = GetFormattedStringValue(propertyFormatPattern);\r\n            }\r\n            else if (_typeToPropertyValueConstructorMap.TryGetValue(propertyType, out PrimitiveValueBuilder propertyValueBuilder))\r\n            {\r\n                propertyValue = propertyValueBuilder(isRequired);\r\n            }\r\n            else if (HasParameterlessConstructor(propertyType))\r\n            {\r\n                propertyValue = Activator.CreateInstance(propertyType);\r\n            }\r\n            else if (IsList(propertyType))\r\n            {\r\n                propertyValue = CreateEmptyList(propertyType);\r\n\r\n                Type genericTypeArgument = propertyType.GenericTypeArguments[0];\r\n                object listElement = null;\r\n\r\n                // For arrays that are populated with SARIF types, we will instantiate a \r\n                // single object instance and put it into the array. This allows the \r\n                // default populating visitor to continue to explore the object model and\r\n                // exercise nested types. This approach prevents comprehensive testing of\r\n                // the arrays populated in this way (because they are non-empty\r\n                if (genericTypeArgument.FullName.StartsWith(\"Microsoft.CodeAnalysis.Sarif.\"))\r\n                {\r\n                    listElement = Activator.CreateInstance(propertyType.GenericTypeArguments[0]);\r\n                }\r\n                else if (_typeToPropertyValueConstructorMap.TryGetValue(genericTypeArgument, out propertyValueBuilder))\r\n                {\r\n                    listElement = propertyValueBuilder(isRequired);\r\n                }\r\n\r\n                AddElementToList(propertyValue, listElement);\r\n            }\r\n            else if (IsDictionary(propertyType))\r\n            {\r\n                Type genericTypeArgument = propertyType.GenericTypeArguments[1];\r\n\r\n                // We do not populate any propert bags directly. Instead, we will use the\r\n                // IPropertyBagHolder API to instantiate and then empty these constructs\r\n                if (genericTypeArgument != typeof(SerializedPropertyInfo))\r\n                {\r\n                    propertyValue = CreateEmptyDictionary(propertyType);\r\n\r\n                    // For dictionaries that are populated with SARIF types, we will instantiate a \r\n                    // single object instance and store it using an arbitrary key. This approach\r\n                    // ensures we populate the SARIF sample with all possible object types\r\n                    if (genericTypeArgument.FullName.StartsWith(\"Microsoft.CodeAnalysis.Sarif.\"))\r\n                    {\r\n                        object dictionaryValue = Activator.CreateInstance(genericTypeArgument);\r\n                        AddElementToDictionary(propertyValue, dictionaryValue);\r\n                    }\r\n                }\r\n            }\r\n            else if ((property.PropertyType.BaseType == typeof(Enum)))\r\n            {\r\n                // This code sets any enum to the first non-zero value we encounter\r\n                foreach (var enumValue in Enum.GetValues(property.PropertyType))\r\n                {\r\n                    if ((int)enumValue != 0)\r\n                    {\r\n                        propertyValue = enumValue;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                // This code ensures both that we encounter an enum value that is non-zero,\r\n                // and that no enum definitions skips the value of one in its definition\r\n                if ((int)propertyValue != 1)\r\n                {\r\n                    throw new InvalidOperationException();\r\n                }\r\n            }\r\n\r\n            property.SetValue(node, propertyValue);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 250,
                            "endLine": 362,
                            "snippet": {
                              "text": "            return 0;\n        }\n\n        private void PopulatePropertyWithGeneratedDefaultValue(ISarifNode node, PropertyInfo property)\n        {\n            // If we can't set this property, it is not of interest\n            if (property.GetAccessors().Length != 2) { return; }\n\n            // This special-casing is required to account for the fact that an \n            // exception instance itself contains an array of exceptions\n            // (exception.innerExceptions). We don't want to hydrate \n            // the innerExceptions of any innerExceptions, which results\n            // in re-entrancy that ends up consuming all stack space.\n            //\n            // Once we have populated a single exceptions.innerExceptions array, \n            // we have accomplished all the testing we need in any case.\n            if (node.SarifNodeKind == SarifNodeKind.ExceptionData &&\n                property.Name == \"InnerExceptions\" &&\n                _visitingExceptionData) { return; }\n\n            // Similar approach applies for graph node.children\n            if (node.SarifNodeKind == SarifNodeKind.Node &&\n                property.Name == \"Children\" &&\n                _visitingGraphNode) { return; }\n\n            object propertyValue = null;\n            Type propertyType = property.PropertyType;\n\n            // isRequired flag ensures we don't end up generating a SARIF file that's missing a required property or an anyOf required property,\n            // because such a file wouldn't validate.\n            bool isRequired = PropertyIsRequiredBySchema(node.GetType().Name, property.Name) || \n                PropertyIsAnyOfRequiredBySchema(node.GetType().Name, property.Name);\n\n            if (GetPropertyFormatPattern(node.GetType().Name, property.Name) is string propertyFormatPattern)\n            {\n                propertyValue = GetFormattedStringValue(propertyFormatPattern);\n            }\n            else if (_typeToPropertyValueConstructorMap.TryGetValue(propertyType, out PrimitiveValueBuilder propertyValueBuilder))\n            {\n                propertyValue = propertyValueBuilder(isRequired);\n            }\n            else if (HasParameterlessConstructor(propertyType))\n            {\n                propertyValue = Activator.CreateInstance(propertyType);\n            }\n            else if (IsList(propertyType))\n            {\n                propertyValue = CreateEmptyList(propertyType);\n\n                Type genericTypeArgument = propertyType.GenericTypeArguments[0];\n                object listElement = null;\n\n                // For arrays that are populated with SARIF types, we will instantiate a \n                // single object instance and put it into the array. This allows the \n                // default populating visitor to continue to explore the object model and\n                // exercise nested types. This approach prevents comprehensive testing of\n                // the arrays populated in this way (because they are non-empty\n                if (genericTypeArgument.FullName.StartsWith(\"Microsoft.CodeAnalysis.Sarif.\"))\n                {\n                    listElement = Activator.CreateInstance(propertyType.GenericTypeArguments[0]);\n                }\n                else if (_typeToPropertyValueConstructorMap.TryGetValue(genericTypeArgument, out propertyValueBuilder))\n                {\n                    listElement = propertyValueBuilder(isRequired);\n                }\n\n                AddElementToList(propertyValue, listElement);\n            }\n            else if (IsDictionary(propertyType))\n            {\n                Type genericTypeArgument = propertyType.GenericTypeArguments[1];\n\n                // We do not populate any propert bags directly. Instead, we will use the\n                // IPropertyBagHolder API to instantiate and then empty these constructs\n                if (genericTypeArgument != typeof(SerializedPropertyInfo))\n                {\n                    propertyValue = CreateEmptyDictionary(propertyType);\n\n                    // For dictionaries that are populated with SARIF types, we will instantiate a \n                    // single object instance and store it using an arbitrary key. This approach\n                    // ensures we populate the SARIF sample with all possible object types\n                    if (genericTypeArgument.FullName.StartsWith(\"Microsoft.CodeAnalysis.Sarif.\"))\n                    {\n                        object dictionaryValue = Activator.CreateInstance(genericTypeArgument);\n                        AddElementToDictionary(propertyValue, dictionaryValue);\n                    }\n                }\n            }\n            else if ((property.PropertyType.BaseType == typeof(Enum)))\n            {\n                // This code sets any enum to the first non-zero value we encounter\n                foreach (var enumValue in Enum.GetValues(property.PropertyType))\n                {\n                    if ((int)enumValue != 0)\n                    {\n                        propertyValue = enumValue;\n                        break;\n                    }\n                }\n                \n                // This code ensures both that we encounter an enum value that is non-zero,\n                // and that no enum definitions skips the value of one in its definition\n                if ((int)propertyValue != 1)\n                {\n                    throw new InvalidOperationException();\n                }\n            }\n\n            property.SetValue(node, propertyValue);\n        }\n\n        // Converts a .NET object + property name to their JSON equivalents and \n        // determines whether that property is required according to the schema.\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: PopulatePropertyWithGeneratedDefaultValue"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 253,
                  "endLine": 359
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method GetRuleFromResources() in [SarifLogMatcher.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 730
                },
                "region": {
                  "startLine": 186,
                  "endLine": 196,
                  "snippet": {
                    "text": "        private ReportingDescriptor GetRuleFromResources(Result result, IDictionary<string, ReportingDescriptor> rules)\r\n        {\r\n            if (!string.IsNullOrEmpty(result.RuleId))\r\n            {\r\n                if (rules.ContainsKey(result.RuleId))\r\n                {\r\n                    return rules[result.RuleId];\r\n                }\r\n            }\r\n            return null;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 199,
                  "snippet": {
                    "text": "            return results;\n        }\n        \n        private ReportingDescriptor GetRuleFromResources(Result result, IDictionary<string, ReportingDescriptor> rules)\n        {\n            if (!string.IsNullOrEmpty(result.RuleId))\n            {\n                if (rules.ContainsKey(result.RuleId))\n                {\n                    return rules[result.RuleId];\n                }\n            }\n            return null;\n        }\n\n        private SarifLog ConstructSarifLogFromMatchedResults(\n            IEnumerable<MatchedResults> results, \n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 730
                          },
                          "region": {
                            "startLine": 186,
                            "endLine": 196,
                            "snippet": {
                              "text": "        private ReportingDescriptor GetRuleFromResources(Result result, IDictionary<string, ReportingDescriptor> rules)\r\n        {\r\n            if (!string.IsNullOrEmpty(result.RuleId))\r\n            {\r\n                if (rules.ContainsKey(result.RuleId))\r\n                {\r\n                    return rules[result.RuleId];\r\n                }\r\n            }\r\n            return null;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 183,
                            "endLine": 199,
                            "snippet": {
                              "text": "            return results;\n        }\n        \n        private ReportingDescriptor GetRuleFromResources(Result result, IDictionary<string, ReportingDescriptor> rules)\n        {\n            if (!string.IsNullOrEmpty(result.RuleId))\n            {\n                if (rules.ContainsKey(result.RuleId))\n                {\n                    return rules[result.RuleId];\n                }\n            }\n            return null;\n        }\n\n        private SarifLog ConstructSarifLogFromMatchedResults(\n            IEnumerable<MatchedResults> results, \n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: GetRuleFromResources"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 730
                },
                "region": {
                  "startLine": 186,
                  "endLine": 196
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method AssertLocationIsTestLocation() in [CppCheckLocationTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 813
                },
                "region": {
                  "startLine": 129,
                  "endLine": 134,
                  "snippet": {
                    "text": "        private static CppCheckLocation AssertLocationIsTestLocation(CppCheckLocation result)\r\n        {\r\n            Assert.Equal(ExampleFileName, result.File);\r\n            Assert.Equal(1234, result.Line);\r\n            return result;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 126,
                  "endLine": 137,
                  "snippet": {
                    "text": "\n        private const string testLocationXml = \"<location file=\\\"\" + ExampleFileName + \"\\\" line=\\\"1234\\\" />\";\n\n        private static CppCheckLocation AssertLocationIsTestLocation(CppCheckLocation result)\n        {\n            Assert.Equal(ExampleFileName, result.File);\n            Assert.Equal(1234, result.Line);\n            return result;\n        }\n\n        private static void AssertParsesAsTestLocation(XmlReader xml)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 813
                          },
                          "region": {
                            "startLine": 129,
                            "endLine": 134,
                            "snippet": {
                              "text": "        private static CppCheckLocation AssertLocationIsTestLocation(CppCheckLocation result)\r\n        {\r\n            Assert.Equal(ExampleFileName, result.File);\r\n            Assert.Equal(1234, result.Line);\r\n            return result;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 126,
                            "endLine": 137,
                            "snippet": {
                              "text": "\n        private const string testLocationXml = \"<location file=\\\"\" + ExampleFileName + \"\\\" line=\\\"1234\\\" />\";\n\n        private static CppCheckLocation AssertLocationIsTestLocation(CppCheckLocation result)\n        {\n            Assert.Equal(ExampleFileName, result.File);\n            Assert.Equal(1234, result.Line);\n            return result;\n        }\n\n        private static void AssertParsesAsTestLocation(XmlReader xml)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: AssertLocationIsTestLocation"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 813
                },
                "region": {
                  "startLine": 129,
                  "endLine": 134
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Storing a plaintext password in a configuration file may result in a system compromise."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 385,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/WebGoatCoins/ChangePassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>"
                  }
                },
                "contextRegion": {
                  "startLine": 382,
                  "endLine": 388,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/Content/StoredXSS.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"webforms-page\">OWASP.WebGoat.NET.SQLInjection</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Catalog.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ChangePassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/UploadPathManipulation.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Autocomplete.ashx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/MessageDigest.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 30
                          },
                          "region": {
                            "startLine": 385,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/WebGoatCoins/ChangePassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 382,
                            "endLine": 388,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/Content/StoredXSS.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"webforms-page\">OWASP.WebGoat.NET.SQLInjection</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Catalog.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ChangePassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/UploadPathManipulation.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Autocomplete.ashx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/MessageDigest.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 385
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Storing a plaintext password in a configuration file may result in a system compromise."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 389,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>"
                  }
                },
                "contextRegion": {
                  "startLine": 386,
                  "endLine": 392,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/Content/UploadPathManipulation.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Autocomplete.ashx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/MessageDigest.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Orders.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/ExploitDebug.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 30
                          },
                          "region": {
                            "startLine": 389,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 386,
                            "endLine": 392,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/Content/UploadPathManipulation.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Autocomplete.ashx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/MessageDigest.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Orders.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/ExploitDebug.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 389
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Storing a plaintext password in a configuration file may result in a system compromise."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 391,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>"
                  }
                },
                "contextRegion": {
                  "startLine": 388,
                  "endLine": 394,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/Content/MessageDigest.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Orders.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/ExploitDebug.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"route-signature\">OWASP.WebGoat.NET.SQLInjection</properties>\n            <properties name=\"/webgoat/Content/SQLInjectionDiscovery.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 30
                          },
                          "region": {
                            "startLine": 391,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 388,
                            "endLine": 394,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/Content/MessageDigest.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Orders.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"/webgoat/Content/ExploitDebug.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n            <properties name=\"route-signature\">OWASP.WebGoat.NET.SQLInjection</properties>\n            <properties name=\"/webgoat/Content/SQLInjectionDiscovery.aspx\">{\"Header:Cache-Control\":\"private\"}</properties>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 391
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Storing a plaintext password in a configuration file may result in a system compromise."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 498,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/WebGoatCoins/ChangePassword.aspx\">1536704186015</properties>"
                  }
                },
                "contextRegion": {
                  "startLine": 495,
                  "endLine": 501,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/Content/StoredXSS.aspx\">1536704226648</properties>\n            <properties name=\"webforms-page\">OWASP.WebGoat.NET.SQLInjection</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Catalog.aspx\">1536704187560</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ChangePassword.aspx\">1536704186015</properties>\n            <properties name=\"/webgoat/Content/UploadPathManipulation.aspx\">1536704200924</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Autocomplete.ashx\">1536703896668</properties>\n            <properties name=\"/webgoat/Content/MessageDigest.aspx\">1536704264930</properties>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 30
                          },
                          "region": {
                            "startLine": 498,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/WebGoatCoins/ChangePassword.aspx\">1536704186015</properties>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 495,
                            "endLine": 501,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/Content/StoredXSS.aspx\">1536704226648</properties>\n            <properties name=\"webforms-page\">OWASP.WebGoat.NET.SQLInjection</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Catalog.aspx\">1536704187560</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ChangePassword.aspx\">1536704186015</properties>\n            <properties name=\"/webgoat/Content/UploadPathManipulation.aspx\">1536704200924</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Autocomplete.ashx\">1536703896668</properties>\n            <properties name=\"/webgoat/Content/MessageDigest.aspx\">1536704264930</properties>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 498
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Storing a plaintext password in a configuration file may result in a system compromise."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 502,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">1536704184510</properties>"
                  }
                },
                "contextRegion": {
                  "startLine": 499,
                  "endLine": 505,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/Content/UploadPathManipulation.aspx\">1536704200924</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Autocomplete.ashx\">1536703896668</properties>\n            <properties name=\"/webgoat/Content/MessageDigest.aspx\">1536704264930</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">1536704184510</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Orders.aspx\">1536704189424</properties>\n            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">1536704240638</properties>\n            <properties name=\"/webgoat/Content/ExploitDebug.aspx\">1536704248443</properties>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 30
                          },
                          "region": {
                            "startLine": 502,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">1536704184510</properties>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 499,
                            "endLine": 505,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/Content/UploadPathManipulation.aspx\">1536704200924</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Autocomplete.ashx\">1536703896668</properties>\n            <properties name=\"/webgoat/Content/MessageDigest.aspx\">1536704264930</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">1536704184510</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Orders.aspx\">1536704189424</properties>\n            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">1536704240638</properties>\n            <properties name=\"/webgoat/Content/ExploitDebug.aspx\">1536704248443</properties>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 502
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Storing a plaintext password in a configuration file may result in a system compromise."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 504,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">1536704240638</properties>"
                  }
                },
                "contextRegion": {
                  "startLine": 501,
                  "endLine": 507,
                  "snippet": {
                    "text": "            <properties name=\"/webgoat/Content/MessageDigest.aspx\">1536704264930</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">1536704184510</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Orders.aspx\">1536704189424</properties>\n            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">1536704240638</properties>\n            <properties name=\"/webgoat/Content/ExploitDebug.aspx\">1536704248443</properties>\n            <properties name=\"route-signature\">OWASP.WebGoat.NET.SQLInjection</properties>\n            <properties name=\"/webgoat/Content/SQLInjectionDiscovery.aspx\">1536704190875</properties>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 30
                          },
                          "region": {
                            "startLine": 504,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">1536704240638</properties>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 501,
                            "endLine": 507,
                            "snippet": {
                              "text": "            <properties name=\"/webgoat/Content/MessageDigest.aspx\">1536704264930</properties>\n            <properties name=\"/webgoat/WebGoatCoins/ForgotPassword.aspx\">1536704184510</properties>\n            <properties name=\"/webgoat/WebGoatCoins/Orders.aspx\">1536704189424</properties>\n            <properties name=\"/webgoat/Content/ForgotPassword.aspx\">1536704240638</properties>\n            <properties name=\"/webgoat/Content/ExploitDebug.aspx\">1536704248443</properties>\n            <properties name=\"route-signature\">OWASP.WebGoat.NET.SQLInjection</properties>\n            <properties name=\"/webgoat/Content/SQLInjectionDiscovery.aspx\">1536704190875</properties>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 30
                },
                "region": {
                  "startLine": 504
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 12,
          "message": {
            "text": "The class ExitApplicationException@1 implements the `ISerializable` interface but does not declare the `[Serializable]` attribute, so it will not be serialized.\r\nClasses that implement the `ISerializable` interface but do not declare the `[Serializable]` attribute will not be serialized."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 142
                },
                "region": {
                  "startLine": 8,
                  "endLine": 14,
                  "snippet": {
                    "text": "    public class ExitApplicationException<T> : Exception where T : struct\r\n    {\r\n        public ExitApplicationException() : base() { }\r\n        public ExitApplicationException(string message) : base(message) { }\r\n        public ExitApplicationException(string message, Exception innerException) : base(message, innerException) { }\r\n\r\n        public T ExitReason { get; set; }"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "endLine": 16,
                  "snippet": {
                    "text": "\nnamespace Microsoft.CodeAnalysis.Sarif.Driver\n{\n    public class ExitApplicationException<T> : Exception where T : struct\n    {\n        public ExitApplicationException() : base() { }\n        public ExitApplicationException(string message) : base(message) { }\n        public ExitApplicationException(string message, Exception innerException) : base(message, innerException) { }\n\n        public T ExitReason { get; set; }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 142
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 14,
                            "snippet": {
                              "text": "    public class ExitApplicationException<T> : Exception where T : struct\r\n    {\r\n        public ExitApplicationException() : base() { }\r\n        public ExitApplicationException(string message) : base(message) { }\r\n        public ExitApplicationException(string message, Exception innerException) : base(message, innerException) { }\r\n\r\n        public T ExitReason { get; set; }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 5,
                            "endLine": 16,
                            "snippet": {
                              "text": "\nnamespace Microsoft.CodeAnalysis.Sarif.Driver\n{\n    public class ExitApplicationException<T> : Exception where T : struct\n    {\n        public ExitApplicationException() : base() { }\n        public ExitApplicationException(string message) : base(message) { }\n        public ExitApplicationException(string message, Exception innerException) : base(message, innerException) { }\n\n        public T ExitReason { get; set; }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Class: ExitApplicationException@1"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 142
                },
                "region": {
                  "startLine": 8,
                  "endLine": 14
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 13,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls sleep()  on line [80](1). Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 80,
                  "snippet": {
                    "text": "            Thread.sleep(3000);"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "endLine": 83,
                  "snippet": {
                    "text": "\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 80,
                            "snippet": {
                              "text": "            Thread.sleep(3000);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 77,
                            "endLine": 83,
                            "snippet": {
                              "text": "\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "sleep()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 13,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls sleep()  on line [80](1). Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 80,
                  "snippet": {
                    "text": "            Thread.sleep(3000);"
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "endLine": 83,
                  "snippet": {
                    "text": "\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 80,
                            "snippet": {
                              "text": "            Thread.sleep(3000);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 77,
                            "endLine": 83,
                            "snippet": {
                              "text": "\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "sleep()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 366
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "            Console.WriteLine();"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "endLine": 29,
                  "snippet": {
                    "text": "\n        public void AnalysisStopped(RuntimeConditions runtimeConditions)\n        {\n            Console.WriteLine();\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 366
                          },
                          "region": {
                            "startLine": 26,
                            "snippet": {
                              "text": "            Console.WriteLine();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 23,
                            "endLine": 29,
                            "snippet": {
                              "text": "\n        public void AnalysisStopped(RuntimeConditions runtimeConditions)\n        {\n            Console.WriteLine();\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 366
                },
                "region": {
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "        if (mrg0.nextInt() != mrg1.nextInt()"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "endLine": 46,
                  "snippet": {
                    "text": "\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 43,
                            "snippet": {
                              "text": "        if (mrg0.nextInt() != mrg1.nextInt()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 40,
                            "endLine": 46,
                            "snippet": {
                              "text": "\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 36
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "        if (mrg0.nextInt() != mrg1.nextInt()"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "endLine": 46,
                  "snippet": {
                    "text": "\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 43,
                            "snippet": {
                              "text": "        if (mrg0.nextInt() != mrg1.nextInt()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 40,
                            "endLine": 46,
                            "snippet": {
                              "text": "\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 36
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 32,
          "message": {
            "text": "The declaration of Equals() in DefaultObjectComparer@1 looks like an effort to override a common .NET method, but it does not have the intended effect.\r\nThis looks like an effort to override a common .NET method, but it probably does not have the intended effect."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 502
                },
                "region": {
                  "startLine": 23,
                  "endLine": 26,
                  "snippet": {
                    "text": "        public bool Equals(T x, T y)\r\n        {\r\n            return Object.Equals(x, y);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "endLine": 29,
                  "snippet": {
                    "text": "    /// <typeparam name=\"T\"></typeparam>\n    internal class DefaultObjectComparer<T> : IEqualityComparer<T>\n    {\n        public bool Equals(T x, T y)\n        {\n            return Object.Equals(x, y);\n        }\n\n        public int GetHashCode(T obj)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 502
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 26,
                            "snippet": {
                              "text": "        public bool Equals(T x, T y)\r\n        {\r\n            return Object.Equals(x, y);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 20,
                            "endLine": 29,
                            "snippet": {
                              "text": "    /// <typeparam name=\"T\"></typeparam>\n    internal class DefaultObjectComparer<T> : IEqualityComparer<T>\n    {\n        public bool Equals(T x, T y)\n        {\n            return Object.Equals(x, y);\n        }\n\n        public int GetHashCode(T obj)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Equals"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 502
                },
                "region": {
                  "startLine": 23,
                  "endLine": 26
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method Convert() in [CppCheckConverter.cs](1) fails to enable validation before parsing XML on line [52](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 244
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "            using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "endLine": 55,
                  "snippet": {
                    "text": "                XmlResolver = null\n            };\n\n            using (XmlReader xmlReader = XmlReader.Create(input, settings))\n            {\n                ProcessCppCheckLog(xmlReader, output, dataToInsert);\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 244
                          },
                          "region": {
                            "startLine": 34,
                            "snippet": {
                              "text": "            if (input == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 31,
                            "endLine": 37,
                            "snippet": {
                              "text": "        /// <param name=\"dataToInsert\">Optionally emitted properties that should be written to log.</param>\n        public override void Convert(Stream input, IResultLogWriter output, OptionallyEmittedData dataToInsert)\n        {\n            if (input == null)\n            {\n                throw new ArgumentNullException(nameof(input));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 244
                          },
                          "region": {
                            "startLine": 39,
                            "snippet": {
                              "text": "            if (output == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 36,
                            "endLine": 42,
                            "snippet": {
                              "text": "                throw new ArgumentNullException(nameof(input));\n            }\n\n            if (output == null)\n            {\n                throw new ArgumentNullException(nameof(output));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 244
                          },
                          "region": {
                            "startLine": 44,
                            "snippet": {
                              "text": "            XmlReaderSettings settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 41,
                            "endLine": 47,
                            "snippet": {
                              "text": "                throw new ArgumentNullException(nameof(output));\n            }\n\n            XmlReaderSettings settings = new XmlReaderSettings\n            {\n                IgnoreWhitespace = true,\n                DtdProcessing = DtdProcessing.Ignore,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 244
                          },
                          "region": {
                            "startLine": 52,
                            "snippet": {
                              "text": "            using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 49,
                            "endLine": 55,
                            "snippet": {
                              "text": "                XmlResolver = null\n            };\n\n            using (XmlReader xmlReader = XmlReader.Create(input, settings))\n            {\n                ProcessCppCheckLog(xmlReader, output, dataToInsert);\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 244
                },
                "region": {
                  "startLine": 52
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 37,
          "message": {
            "text": "Attackers are able to control the file system path argument to CreateDirectory() at [CsvWriter.cs](1) line [68](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1010
                },
                "region": {
                  "startLine": 68,
                  "snippet": {
                    "text": "            if (!String.IsNullOrEmpty(directoryPath)) { Directory.CreateDirectory(directoryPath); }"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "endLine": 71,
                  "snippet": {
                    "text": "        private static string EnsureDirectoryCreated(string filePath)\n        {\n            string directoryPath = Path.GetDirectoryName(filePath);\n            if (!String.IsNullOrEmpty(directoryPath)) { Directory.CreateDirectory(directoryPath); }\n\n            return filePath;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 64
                    },
                    {
                      "index": 65
                    },
                    {
                      "index": 66
                    },
                    {
                      "index": 67
                    },
                    {
                      "index": 68
                    },
                    {
                      "index": 69
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1010
                          },
                          "region": {
                            "startLine": 68,
                            "snippet": {
                              "text": "            if (!String.IsNullOrEmpty(directoryPath)) { Directory.CreateDirectory(directoryPath); }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 65,
                            "endLine": 71,
                            "snippet": {
                              "text": "        private static string EnsureDirectoryCreated(string filePath)\n        {\n            string directoryPath = Path.GetDirectoryName(filePath);\n            if (!String.IsNullOrEmpty(directoryPath)) { Directory.CreateDirectory(directoryPath); }\n\n            return filePath;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CreateDirectory(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1010
                },
                "region": {
                  "startLine": 68
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Interior_Carriage_Return_New_Line_V2 is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 85,
                  "snippet": {
                    "text": "        private readonly static Region s_Interior_Carriage_Return_New_Line_V2 = "
                  }
                },
                "contextRegion": {
                  "startLine": 82,
                  "endLine": 88,
                  "snippet": {
                    "text": "                           StartLine = 3, StartColumn = 5, EndLine = 4, EndColumn = 1, CharOffset = 15, CharLength = 2 };\n\n        // Version 2 of this region defines it by using an endColumn value that extends past the actual line ending\n        private readonly static Region s_Interior_Carriage_Return_New_Line_V2 = \n            new Region() { Snippet = new ArtifactContent() { Text = CARRIAGE_RETURN_NEW_LINE },\n                           StartLine = 3, StartColumn = 5, EndLine = 3, EndColumn = 7, CharOffset = 15, CharLength = 2 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 85,
                            "snippet": {
                              "text": "        private readonly static Region s_Interior_Carriage_Return_New_Line_V2 = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 82,
                            "endLine": 88,
                            "snippet": {
                              "text": "                           StartLine = 3, StartColumn = 5, EndLine = 4, EndColumn = 1, CharOffset = 15, CharLength = 2 };\n\n        // Version 2 of this region defines it by using an endColumn value that extends past the actual line ending\n        private readonly static Region s_Interior_Carriage_Return_New_Line_V2 = \n            new Region() { Snippet = new ArtifactContent() { Text = CARRIAGE_RETURN_NEW_LINE },\n                           StartLine = 3, StartColumn = 5, EndLine = 3, EndColumn = 7, CharOffset = 15, CharLength = 2 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Interior_Carriage_Return_New_Line_V2"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 85
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method ValidateLoggerForExclusiveOption() in [SarifLoggerTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 541
                },
                "region": {
                  "startLine": 690,
                  "endLine": 734,
                  "snippet": {
                    "text": "        private void ValidateLoggerForExclusiveOption(SarifLogger logger, LoggingOptions loggingOptions)\r\n        {\r\n            switch (loggingOptions)\r\n            {\r\n                case LoggingOptions.None:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\r\n                    logger.PrettyPrint.Should().BeFalse();\r\n                    logger.Verbose.Should().BeFalse();\r\n                    break;\r\n                }\r\n                case LoggingOptions.OverwriteExistingOutputFile:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeTrue();\r\n                    logger.PrettyPrint.Should().BeFalse();\r\n                    logger.Verbose.Should().BeFalse();\r\n                    break;\r\n                }\r\n                case LoggingOptions.PrettyPrint:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\r\n                    logger.PrettyPrint.Should().BeTrue();\r\n                    logger.Verbose.Should().BeFalse();\r\n                    break;\r\n                }\r\n                case LoggingOptions.Verbose:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\r\n                    logger.PrettyPrint.Should().BeFalse();\r\n                    logger.Verbose.Should().BeTrue();\r\n                    break;\r\n                }\r\n                case LoggingOptions.All:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeTrue();\r\n                    logger.PrettyPrint.Should().BeTrue();\r\n                    logger.Verbose.Should().BeTrue();\r\n                    break;\r\n                }\r\n                default:\r\n                {\r\n                    throw new ArgumentException();\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 687,
                  "endLine": 736,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void ValidateLoggerForExclusiveOption(SarifLogger logger, LoggingOptions loggingOptions)\n        {\n            switch (loggingOptions)\n            {\n                case LoggingOptions.None:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\n                    logger.PrettyPrint.Should().BeFalse();\n                    logger.Verbose.Should().BeFalse();\n                    break;\n                }\n                case LoggingOptions.OverwriteExistingOutputFile:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeTrue();\n                    logger.PrettyPrint.Should().BeFalse();\n                    logger.Verbose.Should().BeFalse();\n                    break;\n                }\n                case LoggingOptions.PrettyPrint:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\n                    logger.PrettyPrint.Should().BeTrue();\n                    logger.Verbose.Should().BeFalse();\n                    break;\n                }\n                case LoggingOptions.Verbose:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\n                    logger.PrettyPrint.Should().BeFalse();\n                    logger.Verbose.Should().BeTrue();\n                    break;\n                }\n                case LoggingOptions.All:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeTrue();\n                    logger.PrettyPrint.Should().BeTrue();\n                    logger.Verbose.Should().BeTrue();\n                    break;\n                }\n                default:\n                {\n                    throw new ArgumentException();\n                }\n            }\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 541
                          },
                          "region": {
                            "startLine": 690,
                            "endLine": 734,
                            "snippet": {
                              "text": "        private void ValidateLoggerForExclusiveOption(SarifLogger logger, LoggingOptions loggingOptions)\r\n        {\r\n            switch (loggingOptions)\r\n            {\r\n                case LoggingOptions.None:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\r\n                    logger.PrettyPrint.Should().BeFalse();\r\n                    logger.Verbose.Should().BeFalse();\r\n                    break;\r\n                }\r\n                case LoggingOptions.OverwriteExistingOutputFile:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeTrue();\r\n                    logger.PrettyPrint.Should().BeFalse();\r\n                    logger.Verbose.Should().BeFalse();\r\n                    break;\r\n                }\r\n                case LoggingOptions.PrettyPrint:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\r\n                    logger.PrettyPrint.Should().BeTrue();\r\n                    logger.Verbose.Should().BeFalse();\r\n                    break;\r\n                }\r\n                case LoggingOptions.Verbose:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\r\n                    logger.PrettyPrint.Should().BeFalse();\r\n                    logger.Verbose.Should().BeTrue();\r\n                    break;\r\n                }\r\n                case LoggingOptions.All:\r\n                {\r\n                    logger.OverwriteExistingOutputFile.Should().BeTrue();\r\n                    logger.PrettyPrint.Should().BeTrue();\r\n                    logger.Verbose.Should().BeTrue();\r\n                    break;\r\n                }\r\n                default:\r\n                {\r\n                    throw new ArgumentException();\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 687,
                            "endLine": 736,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void ValidateLoggerForExclusiveOption(SarifLogger logger, LoggingOptions loggingOptions)\n        {\n            switch (loggingOptions)\n            {\n                case LoggingOptions.None:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\n                    logger.PrettyPrint.Should().BeFalse();\n                    logger.Verbose.Should().BeFalse();\n                    break;\n                }\n                case LoggingOptions.OverwriteExistingOutputFile:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeTrue();\n                    logger.PrettyPrint.Should().BeFalse();\n                    logger.Verbose.Should().BeFalse();\n                    break;\n                }\n                case LoggingOptions.PrettyPrint:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\n                    logger.PrettyPrint.Should().BeTrue();\n                    logger.Verbose.Should().BeFalse();\n                    break;\n                }\n                case LoggingOptions.Verbose:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeFalse();\n                    logger.PrettyPrint.Should().BeFalse();\n                    logger.Verbose.Should().BeTrue();\n                    break;\n                }\n                case LoggingOptions.All:\n                {\n                    logger.OverwriteExistingOutputFile.Should().BeTrue();\n                    logger.PrettyPrint.Should().BeTrue();\n                    logger.Verbose.Should().BeTrue();\n                    break;\n                }\n                default:\n                {\n                    throw new ArgumentException();\n                }\n            }\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: ValidateLoggerForExclusiveOption"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 541
                },
                "region": {
                  "startLine": 690,
                  "endLine": 734
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method actionOnLeafNode() in [PrereleaseCompatibilityTransformer.cs](1) can dereference a null pointer on line [378](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 835
                },
                "region": {
                  "startLine": 378,
                  "snippet": {
                    "text": "                                role.Value = roleValue.TrimEnd((\"File\").ToCharArray());"
                  }
                },
                "contextRegion": {
                  "startLine": 375,
                  "endLine": 381,
                  "snippet": {
                    "text": "                            case \"renamedFile\":\n                            case \"uncontrolledFile\":\n                            {\n                                role.Value = roleValue.TrimEnd((\"File\").ToCharArray());\n                                isModified = true;\n                                break;\n                            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 362,
                            "snippet": {
                              "text": "                if (artifact[\"roles\"] is JArray roles)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 359,
                            "endLine": 365,
                            "snippet": {
                              "text": "\n            bool actionOnLeafNode(JObject artifact)\n            {\n                if (artifact[\"roles\"] is JArray roles)\n                {\n                    bool isModified = false;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 366,
                            "snippet": {
                              "text": "                    foreach (JValue role in roles)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 363,
                            "endLine": 369,
                            "snippet": {
                              "text": "                {\n                    bool isModified = false;\n\n                    foreach (JValue role in roles)\n                    {\n                        string roleValue = role.Value as string;\n                        switch (roleValue)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 368,
                            "snippet": {
                              "text": "                        string roleValue = role.Value as string;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 365,
                            "endLine": 371,
                            "snippet": {
                              "text": "\n                    foreach (JValue role in roles)\n                    {\n                        string roleValue = role.Value as string;\n                        switch (roleValue)\n                        {\n                            case \"unmodifiedFile\":\n"
                            }
                          }
                        },
                        "message": {
                          "text": "roleValue = null : roleValue is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 368,
                            "snippet": {
                              "text": "                        string roleValue = role.Value as string;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 365,
                            "endLine": 371,
                            "snippet": {
                              "text": "\n                    foreach (JValue role in roles)\n                    {\n                        string roleValue = role.Value as string;\n                        switch (roleValue)\n                        {\n                            case \"unmodifiedFile\":\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 371,
                            "snippet": {
                              "text": "                            case \"unmodifiedFile\":"
                            }
                          },
                          "contextRegion": {
                            "startLine": 368,
                            "endLine": 374,
                            "snippet": {
                              "text": "                        string roleValue = role.Value as string;\n                        switch (roleValue)\n                        {\n                            case \"unmodifiedFile\":\n                            case \"modifiedFile\":\n                            case \"addedFile\":\n                            case \"deletedFile\":\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 371,
                            "snippet": {
                              "text": "                            case \"unmodifiedFile\":"
                            }
                          },
                          "contextRegion": {
                            "startLine": 368,
                            "endLine": 374,
                            "snippet": {
                              "text": "                        string roleValue = role.Value as string;\n                        switch (roleValue)\n                        {\n                            case \"unmodifiedFile\":\n                            case \"modifiedFile\":\n                            case \"addedFile\":\n                            case \"deletedFile\":\n"
                            }
                          }
                        },
                        "message": {
                          "text": "goto"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 378,
                            "snippet": {
                              "text": "                                role.Value = roleValue.TrimEnd((\"File\").ToCharArray());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 375,
                            "endLine": 381,
                            "snippet": {
                              "text": "                            case \"renamedFile\":\n                            case \"uncontrolledFile\":\n                            {\n                                role.Value = roleValue.TrimEnd((\"File\").ToCharArray());\n                                isModified = true;\n                                break;\n                            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "roleValue.TrimEnd(...) : roleValue is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 835
                },
                "region": {
                  "startLine": 378
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "        if (mrg0.nextInt() != mrg1.nextInt()"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "endLine": 46,
                  "snippet": {
                    "text": "\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 43,
                            "snippet": {
                              "text": "        if (mrg0.nextInt() != mrg1.nextInt()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 40,
                            "endLine": 46,
                            "snippet": {
                              "text": "\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 18
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "        if (mrg0.nextInt() != mrg1.nextInt()"
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "endLine": 46,
                  "snippet": {
                    "text": "\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 43,
                            "snippet": {
                              "text": "        if (mrg0.nextInt() != mrg1.nextInt()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 40,
                            "endLine": 46,
                            "snippet": {
                              "text": "\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 18
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method GetFormattedStringValue() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 462,
                  "endLine": 484,
                  "snippet": {
                    "text": "        private string GetFormattedStringValue(string propertyFormatPattern)\r\n        {\r\n            switch (propertyFormatPattern)\r\n            {\r\n                case \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$\":\r\n                    {\r\n                        return \"0DB2CD87-8185-49F8-8EEA-CE07A0E95241\";\r\n                    }\r\n                case \"[^/]+/.+\":\r\n                    {\r\n                        return \"text/x-csharp\";\r\n                    }\r\n                case \"^[a-z]{2}-[A-Z]{2}$\":\r\n                    {\r\n                        return \"en-ZA\";\r\n                    }\r\n                case \"[0-9]+(\\\\.[0-9]+){3}\":\r\n                    {\r\n                        return \"2.7.1500.12\";\r\n                    }\r\n            }\r\n            return null;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 459,
                  "endLine": 487,
                  "snippet": {
                    "text": "            return propertyType.GetConstructor(new Type[] { }) != null;\n        }\n\n        private string GetFormattedStringValue(string propertyFormatPattern)\n        {\n            switch (propertyFormatPattern)\n            {\n                case \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$\":\n                    {\n                        return \"0DB2CD87-8185-49F8-8EEA-CE07A0E95241\";\n                    }\n                case \"[^/]+/.+\":\n                    {\n                        return \"text/x-csharp\";\n                    }\n                case \"^[a-z]{2}-[A-Z]{2}$\":\n                    {\n                        return \"en-ZA\";\n                    }\n                case \"[0-9]+(\\\\.[0-9]+){3}\":\n                    {\n                        return \"2.7.1500.12\";\n                    }\n            }\n            return null;\n        }\n\n        private string GetPropertyFormatPattern(string objectTypeName, string propertyName)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 462,
                            "endLine": 484,
                            "snippet": {
                              "text": "        private string GetFormattedStringValue(string propertyFormatPattern)\r\n        {\r\n            switch (propertyFormatPattern)\r\n            {\r\n                case \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$\":\r\n                    {\r\n                        return \"0DB2CD87-8185-49F8-8EEA-CE07A0E95241\";\r\n                    }\r\n                case \"[^/]+/.+\":\r\n                    {\r\n                        return \"text/x-csharp\";\r\n                    }\r\n                case \"^[a-z]{2}-[A-Z]{2}$\":\r\n                    {\r\n                        return \"en-ZA\";\r\n                    }\r\n                case \"[0-9]+(\\\\.[0-9]+){3}\":\r\n                    {\r\n                        return \"2.7.1500.12\";\r\n                    }\r\n            }\r\n            return null;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 459,
                            "endLine": 487,
                            "snippet": {
                              "text": "            return propertyType.GetConstructor(new Type[] { }) != null;\n        }\n\n        private string GetFormattedStringValue(string propertyFormatPattern)\n        {\n            switch (propertyFormatPattern)\n            {\n                case \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$\":\n                    {\n                        return \"0DB2CD87-8185-49F8-8EEA-CE07A0E95241\";\n                    }\n                case \"[^/]+/.+\":\n                    {\n                        return \"text/x-csharp\";\n                    }\n                case \"^[a-z]{2}-[A-Z]{2}$\":\n                    {\n                        return \"en-ZA\";\n                    }\n                case \"[0-9]+(\\\\.[0-9]+){3}\":\n                    {\n                        return \"2.7.1500.12\";\n                    }\n            }\n            return null;\n        }\n\n        private string GetPropertyFormatPattern(string objectTypeName, string propertyName)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: GetFormattedStringValue"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 462,
                  "endLine": 484
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 37,
          "message": {
            "text": "Attackers are able to control the file system path argument to GetFiles() at [FileSystem.cs](1) line [81](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 81,
                  "snippet": {
                    "text": "            return Directory.GetFiles(path, searchPattern);"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "endLine": 84,
                  "snippet": {
                    "text": "        /// </returns>\n        public IEnumerable<string> GetFilesInDirectory(string path, string searchPattern)\n        {\n            return Directory.GetFiles(path, searchPattern);\n        }\n\n        /// <summary>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 70
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 81,
                            "snippet": {
                              "text": "            return Directory.GetFiles(path, searchPattern);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 78,
                            "endLine": 84,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetFilesInDirectory(string path, string searchPattern)\n        {\n            return Directory.GetFiles(path, searchPattern);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetFiles(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 70
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 81,
                            "snippet": {
                              "text": "            return Directory.GetFiles(path, searchPattern);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 78,
                            "endLine": 84,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetFilesInDirectory(string path, string searchPattern)\n        {\n            return Directory.GetFiles(path, searchPattern);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetFiles(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 70
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 81,
                            "snippet": {
                              "text": "            return Directory.GetFiles(path, searchPattern);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 78,
                            "endLine": 84,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetFilesInDirectory(string path, string searchPattern)\n        {\n            return Directory.GetFiles(path, searchPattern);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetFiles(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 81
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method GetJsonNameFor() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 403,
                  "endLine": 407,
                  "snippet": {
                    "text": "        private string GetJsonNameFor(string name)\r\n        {\r\n            // E.g.: SarifLog.Version will be converted to sarifLog.version\r\n            return name.Substring(0, 1).ToLowerInvariant() + name.Substring(1);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 400,
                  "endLine": 410,
                  "snippet": {
                    "text": "            return propertySchema;\n        }\n\n        private string GetJsonNameFor(string name)\n        {\n            // E.g.: SarifLog.Version will be converted to sarifLog.version\n            return name.Substring(0, 1).ToLowerInvariant() + name.Substring(1);\n        }\n\n        private void AddElementToDictionary(object dictionary, object dictionaryValue)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 403,
                            "endLine": 407,
                            "snippet": {
                              "text": "        private string GetJsonNameFor(string name)\r\n        {\r\n            // E.g.: SarifLog.Version will be converted to sarifLog.version\r\n            return name.Substring(0, 1).ToLowerInvariant() + name.Substring(1);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 400,
                            "endLine": 410,
                            "snippet": {
                              "text": "            return propertySchema;\n        }\n\n        private string GetJsonNameFor(string name)\n        {\n            // E.g.: SarifLog.Version will be converted to sarifLog.version\n            return name.Substring(0, 1).ToLowerInvariant() + name.Substring(1);\n        }\n\n        private void AddElementToDictionary(object dictionary, object dictionaryValue)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: GetJsonNameFor"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 403,
                  "endLine": 407
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 12,
          "message": {
            "text": "The class StringToVersionMap implements the `ISerializable` interface but does not declare the `[Serializable]` attribute, so it will not be serialized.\r\nClasses that implement the `ISerializable` interface but do not declare the `[Serializable]` attribute will not be serialized."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 508
                },
                "region": {
                  "startLine": 8,
                  "snippet": {
                    "text": "    public class StringToVersionMap : TypedPropertiesDictionary<Version>"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "endLine": 11,
                  "snippet": {
                    "text": "\nnamespace Microsoft.CodeAnalysis.Sarif\n{\n    public class StringToVersionMap : TypedPropertiesDictionary<Version>\n    {\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 508
                          },
                          "region": {
                            "startLine": 8,
                            "snippet": {
                              "text": "    public class StringToVersionMap : TypedPropertiesDictionary<Version>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 5,
                            "endLine": 11,
                            "snippet": {
                              "text": "\nnamespace Microsoft.CodeAnalysis.Sarif\n{\n    public class StringToVersionMap : TypedPropertiesDictionary<Version>\n    {\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Class: StringToVersionMap"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 508
                },
                "region": {
                  "startLine": 8
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "        MyRandom mrg1 = new MyRandom(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "endLine": 45,
                  "snippet": {
                    "text": "        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 42,
                            "snippet": {
                              "text": "        MyRandom mrg1 = new MyRandom(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 39,
                            "endLine": 45,
                            "snippet": {
                              "text": "        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "1MyRandom()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 25
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "        MyRandom mrg1 = new MyRandom(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "endLine": 45,
                  "snippet": {
                    "text": "        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 42,
                            "snippet": {
                              "text": "        MyRandom mrg1 = new MyRandom(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 39,
                            "endLine": 45,
                            "snippet": {
                              "text": "        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "1MyRandom()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 25
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 657,
                  "endLine": 665,
                  "snippet": {
                    "text": "        private void Visit(IList<Notification> notifications, string parentPointer, string propertyName)\r\n        {\r\n            string notificationsPointer = parentPointer.AtProperty(propertyName);\r\n\r\n            for (int i = 0; i < notifications.Count; ++i)\r\n            {\r\n                Visit(notifications[i], notificationsPointer.AtIndex(i));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 654,
                  "endLine": 668,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(IList<Notification> notifications, string parentPointer, string propertyName)\n        {\n            string notificationsPointer = parentPointer.AtProperty(propertyName);\n\n            for (int i = 0; i < notifications.Count; ++i)\n            {\n                Visit(notifications[i], notificationsPointer.AtIndex(i));\n            }\n        }\n\n        private void Visit(ResultProvenance resultProvenance, string resultProvenancePointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 657,
                            "endLine": 665,
                            "snippet": {
                              "text": "        private void Visit(IList<Notification> notifications, string parentPointer, string propertyName)\r\n        {\r\n            string notificationsPointer = parentPointer.AtProperty(propertyName);\r\n\r\n            for (int i = 0; i < notifications.Count; ++i)\r\n            {\r\n                Visit(notifications[i], notificationsPointer.AtIndex(i));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 654,
                            "endLine": 668,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(IList<Notification> notifications, string parentPointer, string propertyName)\n        {\n            string notificationsPointer = parentPointer.AtProperty(propertyName);\n\n            for (int i = 0; i < notifications.Count; ++i)\n            {\n                Visit(notifications[i], notificationsPointer.AtIndex(i));\n            }\n        }\n\n        private void Visit(ResultProvenance resultProvenance, string resultProvenancePointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 657,
                  "endLine": 665
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 340
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            Console.WriteLine($\"The log file \\\"{options.InputFilePath}\\\" contains {log.Runs[0]?.Results.Count} results.\");"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "endLine": 42,
                  "snippet": {
                    "text": "            string logText = File.ReadAllText(options.InputFilePath);\n            SarifLog log = JsonConvert.DeserializeObject<SarifLog>(logText);\n\n            Console.WriteLine($\"The log file \\\"{options.InputFilePath}\\\" contains {log.Runs[0]?.Results.Count} results.\");\n\n            return 0;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 340
                          },
                          "region": {
                            "startLine": 39,
                            "snippet": {
                              "text": "            Console.WriteLine($\"The log file \\\"{options.InputFilePath}\\\" contains {log.Runs[0]?.Results.Count} results.\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 36,
                            "endLine": 42,
                            "snippet": {
                              "text": "            string logText = File.ReadAllText(options.InputFilePath);\n            SarifLog log = JsonConvert.DeserializeObject<SarifLog>(logText);\n\n            Console.WriteLine($\"The log file \\\"{options.InputFilePath}\\\" contains {log.Runs[0]?.Results.Count} results.\");\n\n            return 0;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 340
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field SarifSpecUri is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 18,
                  "snippet": {
                    "text": "        private const string SarifSpecUri ="
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "endLine": 21,
                  "snippet": {
                    "text": "{\n    public abstract class SarifValidationSkimmerBase : Skimmer<SarifValidationContext>\n    {\n        private const string SarifSpecUri =\n            \"http://docs.oasis-open.org/sarif/sarif/v2.0/csprd01/sarif-v2.0-csprd01.html\";\n\n        private readonly Uri _defaultHelpUri = new Uri(SarifSpecUri);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 18,
                            "snippet": {
                              "text": "        private const string SarifSpecUri ="
                            }
                          },
                          "contextRegion": {
                            "startLine": 15,
                            "endLine": 21,
                            "snippet": {
                              "text": "{\n    public abstract class SarifValidationSkimmerBase : Skimmer<SarifValidationContext>\n    {\n        private const string SarifSpecUri =\n            \"http://docs.oasis-open.org/sarif/sarif/v2.0/csprd01/sarif-v2.0-csprd01.html\";\n\n        private readonly Uri _defaultHelpUri = new Uri(SarifSpecUri);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: SarifSpecUri"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method GetNewLineIndex() in [FileRegionsCache.cs](1) ignores an exception on line [291](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 424
                },
                "region": {
                  "startLine": 291,
                  "snippet": {
                    "text": "            catch (IOException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 288,
                  "endLine": 294,
                  "snippet": {
                    "text": "            {\n                fileText = _fileSystem.ReadAllText(uri.LocalPath);\n            }\n            catch (IOException) { }\n\n            return fileText != null ? new NewLineIndex(fileText) : null;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 424
                          },
                          "region": {
                            "startLine": 291,
                            "snippet": {
                              "text": "            catch (IOException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 288,
                            "endLine": 294,
                            "snippet": {
                              "text": "            {\n                fileText = _fileSystem.ReadAllText(uri.LocalPath);\n            }\n            catch (IOException) { }\n\n            return fileText != null ? new NewLineIndex(fileText) : null;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 424
                },
                "region": {
                  "startLine": 291
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method TryGetDirectory() in [PathExtensions.cs](1) ignores an exception on line [57](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1076
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "            catch (ArgumentException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "endLine": 60,
                  "snippet": {
                    "text": "                    return result;\n                }\n            }\n            catch (ArgumentException) { }\n            // GetDirectoryName path parameter contains invalid characters, is empty, or contains only white spaces.\n            // We can't determine a directory so fall through.\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1076
                          },
                          "region": {
                            "startLine": 57,
                            "snippet": {
                              "text": "            catch (ArgumentException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 54,
                            "endLine": 60,
                            "snippet": {
                              "text": "                    return result;\n                }\n            }\n            catch (ArgumentException) { }\n            // GetDirectoryName path parameter contains invalid characters, is empty, or contains only white spaces.\n            // We can't determine a directory so fall through.\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1076
                },
                "region": {
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method TryGetDirectory() in [PathExtensions.cs](1) ignores an exception on line [61](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1076
                },
                "region": {
                  "startLine": 61,
                  "snippet": {
                    "text": "            catch (PathTooLongException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 58,
                  "endLine": 64,
                  "snippet": {
                    "text": "            // GetDirectoryName path parameter contains invalid characters, is empty, or contains only white spaces.\n            // We can't determine a directory so fall through.\n\n            catch (PathTooLongException) { }\n            // GetDirectoryName path parameter is longer than the system-defined maximum length.\n            // We can't determine a directory so fall through.\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1076
                          },
                          "region": {
                            "startLine": 61,
                            "snippet": {
                              "text": "            catch (PathTooLongException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 58,
                            "endLine": 64,
                            "snippet": {
                              "text": "            // GetDirectoryName path parameter contains invalid characters, is empty, or contains only white spaces.\n            // We can't determine a directory so fall through.\n\n            catch (PathTooLongException) { }\n            // GetDirectoryName path parameter is longer than the system-defined maximum length.\n            // We can't determine a directory so fall through.\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1076
                },
                "region": {
                  "startLine": 61
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method TryGetDirectory() in [PathExtensions.cs](1) ignores an exception on line [65](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1076
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "            catch (IOException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "endLine": 68,
                  "snippet": {
                    "text": "            // GetDirectoryName path parameter is longer than the system-defined maximum length.\n            // We can't determine a directory so fall through.\n\n            catch (IOException) { }\n            // GetDirectoryName (or File.Exists, Directory.Exists) failed for some other reason.  There aren't any others documented in .Net 4.0 but 4.5 has \n            // IOException.\n            // We can't determine a directory so fall through.\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1076
                          },
                          "region": {
                            "startLine": 65,
                            "snippet": {
                              "text": "            catch (IOException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 62,
                            "endLine": 68,
                            "snippet": {
                              "text": "            // GetDirectoryName path parameter is longer than the system-defined maximum length.\n            // We can't determine a directory so fall through.\n\n            catch (IOException) { }\n            // GetDirectoryName (or File.Exists, Directory.Exists) failed for some other reason.  There aren't any others documented in .Net 4.0 but 4.5 has \n            // IOException.\n            // We can't determine a directory so fall through.\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1076
                },
                "region": {
                  "startLine": 65
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method DisposeImpl() in [TempDirectory.cs](1) ignores an exception on line [98](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 823
                },
                "region": {
                  "startLine": 98,
                  "snippet": {
                    "text": "            catch (DirectoryNotFoundException)"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "endLine": 101,
                  "snippet": {
                    "text": "            {\n                Directory.Delete(this.Name, true);\n            }\n            catch (DirectoryNotFoundException)\n            {\n                // Not found; doesn't matter because this delete is best-effort.\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 823
                          },
                          "region": {
                            "startLine": 98,
                            "snippet": {
                              "text": "            catch (DirectoryNotFoundException)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 95,
                            "endLine": 101,
                            "snippet": {
                              "text": "            {\n                Directory.Delete(this.Name, true);\n            }\n            catch (DirectoryNotFoundException)\n            {\n                // Not found; doesn't matter because this delete is best-effort.\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 823
                },
                "region": {
                  "startLine": 98
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method DisposeImpl() in [TempDirectory.cs](1) ignores an exception on line [102](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 823
                },
                "region": {
                  "startLine": 102,
                  "snippet": {
                    "text": "            catch (IOException)"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "endLine": 105,
                  "snippet": {
                    "text": "            {\n                // Not found; doesn't matter because this delete is best-effort.\n            }\n            catch (IOException)\n            {\n                // Lock violation; doesn't matter because this delete is best-effort.\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 823
                          },
                          "region": {
                            "startLine": 102,
                            "snippet": {
                              "text": "            catch (IOException)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 99,
                            "endLine": 105,
                            "snippet": {
                              "text": "            {\n                // Not found; doesn't matter because this delete is best-effort.\n            }\n            catch (IOException)\n            {\n                // Lock violation; doesn't matter because this delete is best-effort.\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 823
                },
                "region": {
                  "startLine": 102
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method DisposeImpl() in [TempDirectory.cs](1) ignores an exception on line [106](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 823
                },
                "region": {
                  "startLine": 106,
                  "snippet": {
                    "text": "            catch (UnauthorizedAccessException)"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "endLine": 109,
                  "snippet": {
                    "text": "            {\n                // Lock violation; doesn't matter because this delete is best-effort.\n            }\n            catch (UnauthorizedAccessException)\n            {\n                // Access denied; doesn't matter because this delete is best-effort.\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 823
                          },
                          "region": {
                            "startLine": 106,
                            "snippet": {
                              "text": "            catch (UnauthorizedAccessException)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 103,
                            "endLine": 109,
                            "snippet": {
                              "text": "            {\n                // Lock violation; doesn't matter because this delete is best-effort.\n            }\n            catch (UnauthorizedAccessException)\n            {\n                // Access denied; doesn't matter because this delete is best-effort.\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 823
                },
                "region": {
                  "startLine": 106
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 25,
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 118,
                  "snippet": {
                    "text": "                        using (var sha = MD5.Create())"
                  }
                },
                "contextRegion": {
                  "startLine": 115,
                  "endLine": 121,
                  "snippet": {
                    "text": "                {\n                    using (var bufferedStream = new BufferedStream(stream, 1024 * 32))\n                    {\n                        using (var sha = MD5.Create())\n                        {\n                            byte[] checksum = sha.ComputeHash(bufferedStream);\n                            md5 = BitConverter.ToString(checksum).Replace(\"-\", string.Empty);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 118,
                            "snippet": {
                              "text": "                        using (var sha = MD5.Create())"
                            }
                          },
                          "contextRegion": {
                            "startLine": 115,
                            "endLine": 121,
                            "snippet": {
                              "text": "                {\n                    using (var bufferedStream = new BufferedStream(stream, 1024 * 32))\n                    {\n                        using (var sha = MD5.Create())\n                        {\n                            byte[] checksum = sha.ComputeHash(bufferedStream);\n                            md5 = BitConverter.ToString(checksum).Replace(\"-\", string.Empty);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 118
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 54,
                  "snippet": {
                    "text": "                Console.WriteLine(SdkResources.UnexpectedFatalRuntimeConditions + fatalConditions.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "endLine": 57,
                  "snippet": {
                    "text": "                // One or more fatal conditions observed at runtime,\n                // so we'll report a catastrophic exit.\n                Console.WriteLine(SdkResources.MSG_UnexpectedApplicationExit);\n                Console.WriteLine(SdkResources.UnexpectedFatalRuntimeConditions + fatalConditions.ToString());\n                Console.WriteLine();\n            }\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 54,
                            "snippet": {
                              "text": "                Console.WriteLine(SdkResources.UnexpectedFatalRuntimeConditions + fatalConditions.ToString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 51,
                            "endLine": 57,
                            "snippet": {
                              "text": "                // One or more fatal conditions observed at runtime,\n                // so we'll report a catastrophic exit.\n                Console.WriteLine(SdkResources.MSG_UnexpectedApplicationExit);\n                Console.WriteLine(SdkResources.UnexpectedFatalRuntimeConditions + fatalConditions.ToString());\n                Console.WriteLine();\n            }\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextGaussian() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 36,
                  "snippet": {
                    "text": "            || rg0.nextGaussian() != rg1.nextGaussian()"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "endLine": 39,
                  "snippet": {
                    "text": "            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 36,
                            "snippet": {
                              "text": "            || rg0.nextGaussian() != rg1.nextGaussian()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 39,
                            "snippet": {
                              "text": "            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextGaussian()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 42
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextGaussian() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 36,
                  "snippet": {
                    "text": "            || rg0.nextGaussian() != rg1.nextGaussian()"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "endLine": 39,
                  "snippet": {
                    "text": "            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 36,
                            "snippet": {
                              "text": "            || rg0.nextGaussian() != rg1.nextGaussian()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 39,
                            "snippet": {
                              "text": "            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextGaussian()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 42
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 3,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls runFinalizersOnExit()  on line [19](1). Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "        Runtime.runFinalizersOnExit(true);"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            }\n        }\n\n        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 19,
                            "snippet": {
                              "text": "        Runtime.runFinalizersOnExit(true);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 16,
                            "endLine": 22,
                            "snippet": {
                              "text": "            }\n        }\n\n        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "runFinalizersOnExit()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 3,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls runFinalizersOnExit()  on line [19](1). Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "        Runtime.runFinalizersOnExit(true);"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            }\n        }\n\n        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 19,
                            "snippet": {
                              "text": "        Runtime.runFinalizersOnExit(true);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 16,
                            "endLine": 22,
                            "snippet": {
                              "text": "            }\n        }\n\n        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "runFinalizersOnExit()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 409,
                  "endLine": 457,
                  "snippet": {
                    "text": "        private void Visit(Invocation invocation, string invocationPointer)\r\n        {\r\n            Analyze(invocation, invocationPointer);\r\n\r\n            if (invocation.ExecutableLocation != null)\r\n            {\r\n                Visit(invocation.ExecutableLocation, invocationPointer.AtProperty(SarifPropertyName.ExecutableLocation));\r\n            }\r\n\r\n            if (invocation.ResponseFiles != null)\r\n            {\r\n                string responseFilesPointer = invocationPointer.AtProperty(SarifPropertyName.ResponseFiles);\r\n\r\n                for (int i = 0; i < invocation.ResponseFiles.Count; ++i)\r\n                {\r\n                    Visit(invocation.ResponseFiles[i], responseFilesPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (invocation.Stdin != null)\r\n            {\r\n                Visit(invocation.Stdin, invocationPointer.AtProperty(SarifPropertyName.Stdin));\r\n            }\r\n\r\n            if (invocation.Stdout != null)\r\n            {\r\n                Visit(invocation.Stdout, invocationPointer.AtProperty(SarifPropertyName.Stdout));\r\n            }\r\n\r\n            if (invocation.Stderr != null)\r\n            {\r\n                Visit(invocation.Stderr, invocationPointer.AtProperty(SarifPropertyName.Stderr));\r\n            }\r\n\r\n            if (invocation.StdoutStderr != null)\r\n            {\r\n                Visit(invocation.StdoutStderr, invocationPointer.AtProperty(SarifPropertyName.StdoutStderr));\r\n            }\r\n\r\n            if (invocation.ToolExecutionNotifications != null)\r\n            {\r\n                Visit(invocation.ToolExecutionNotifications, invocationPointer, SarifPropertyName.ToolExecutionNotifications);\r\n            }\r\n\r\n            if (invocation.ToolConfigurationNotifications != null)\r\n            {\r\n                Visit(invocation.ToolConfigurationNotifications, invocationPointer, SarifPropertyName.ToolConfigurationNotifications);\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 406,
                  "endLine": 460,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Invocation invocation, string invocationPointer)\n        {\n            Analyze(invocation, invocationPointer);\n\n            if (invocation.ExecutableLocation != null)\n            {\n                Visit(invocation.ExecutableLocation, invocationPointer.AtProperty(SarifPropertyName.ExecutableLocation));\n            }\n\n            if (invocation.ResponseFiles != null)\n            {\n                string responseFilesPointer = invocationPointer.AtProperty(SarifPropertyName.ResponseFiles);\n\n                for (int i = 0; i < invocation.ResponseFiles.Count; ++i)\n                {\n                    Visit(invocation.ResponseFiles[i], responseFilesPointer.AtIndex(i));\n                }\n            }\n\n            if (invocation.Stdin != null)\n            {\n                Visit(invocation.Stdin, invocationPointer.AtProperty(SarifPropertyName.Stdin));\n            }\n\n            if (invocation.Stdout != null)\n            {\n                Visit(invocation.Stdout, invocationPointer.AtProperty(SarifPropertyName.Stdout));\n            }\n\n            if (invocation.Stderr != null)\n            {\n                Visit(invocation.Stderr, invocationPointer.AtProperty(SarifPropertyName.Stderr));\n            }\n\n            if (invocation.StdoutStderr != null)\n            {\n                Visit(invocation.StdoutStderr, invocationPointer.AtProperty(SarifPropertyName.StdoutStderr));\n            }\n\n            if (invocation.ToolExecutionNotifications != null)\n            {\n                Visit(invocation.ToolExecutionNotifications, invocationPointer, SarifPropertyName.ToolExecutionNotifications);\n            }\n\n            if (invocation.ToolConfigurationNotifications != null)\n            {\n                Visit(invocation.ToolConfigurationNotifications, invocationPointer, SarifPropertyName.ToolConfigurationNotifications);\n            }\n        }\n\n        private void Visit(Location location, string locationPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 409,
                            "endLine": 457,
                            "snippet": {
                              "text": "        private void Visit(Invocation invocation, string invocationPointer)\r\n        {\r\n            Analyze(invocation, invocationPointer);\r\n\r\n            if (invocation.ExecutableLocation != null)\r\n            {\r\n                Visit(invocation.ExecutableLocation, invocationPointer.AtProperty(SarifPropertyName.ExecutableLocation));\r\n            }\r\n\r\n            if (invocation.ResponseFiles != null)\r\n            {\r\n                string responseFilesPointer = invocationPointer.AtProperty(SarifPropertyName.ResponseFiles);\r\n\r\n                for (int i = 0; i < invocation.ResponseFiles.Count; ++i)\r\n                {\r\n                    Visit(invocation.ResponseFiles[i], responseFilesPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (invocation.Stdin != null)\r\n            {\r\n                Visit(invocation.Stdin, invocationPointer.AtProperty(SarifPropertyName.Stdin));\r\n            }\r\n\r\n            if (invocation.Stdout != null)\r\n            {\r\n                Visit(invocation.Stdout, invocationPointer.AtProperty(SarifPropertyName.Stdout));\r\n            }\r\n\r\n            if (invocation.Stderr != null)\r\n            {\r\n                Visit(invocation.Stderr, invocationPointer.AtProperty(SarifPropertyName.Stderr));\r\n            }\r\n\r\n            if (invocation.StdoutStderr != null)\r\n            {\r\n                Visit(invocation.StdoutStderr, invocationPointer.AtProperty(SarifPropertyName.StdoutStderr));\r\n            }\r\n\r\n            if (invocation.ToolExecutionNotifications != null)\r\n            {\r\n                Visit(invocation.ToolExecutionNotifications, invocationPointer, SarifPropertyName.ToolExecutionNotifications);\r\n            }\r\n\r\n            if (invocation.ToolConfigurationNotifications != null)\r\n            {\r\n                Visit(invocation.ToolConfigurationNotifications, invocationPointer, SarifPropertyName.ToolConfigurationNotifications);\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 406,
                            "endLine": 460,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Invocation invocation, string invocationPointer)\n        {\n            Analyze(invocation, invocationPointer);\n\n            if (invocation.ExecutableLocation != null)\n            {\n                Visit(invocation.ExecutableLocation, invocationPointer.AtProperty(SarifPropertyName.ExecutableLocation));\n            }\n\n            if (invocation.ResponseFiles != null)\n            {\n                string responseFilesPointer = invocationPointer.AtProperty(SarifPropertyName.ResponseFiles);\n\n                for (int i = 0; i < invocation.ResponseFiles.Count; ++i)\n                {\n                    Visit(invocation.ResponseFiles[i], responseFilesPointer.AtIndex(i));\n                }\n            }\n\n            if (invocation.Stdin != null)\n            {\n                Visit(invocation.Stdin, invocationPointer.AtProperty(SarifPropertyName.Stdin));\n            }\n\n            if (invocation.Stdout != null)\n            {\n                Visit(invocation.Stdout, invocationPointer.AtProperty(SarifPropertyName.Stdout));\n            }\n\n            if (invocation.Stderr != null)\n            {\n                Visit(invocation.Stderr, invocationPointer.AtProperty(SarifPropertyName.Stderr));\n            }\n\n            if (invocation.StdoutStderr != null)\n            {\n                Visit(invocation.StdoutStderr, invocationPointer.AtProperty(SarifPropertyName.StdoutStderr));\n            }\n\n            if (invocation.ToolExecutionNotifications != null)\n            {\n                Visit(invocation.ToolExecutionNotifications, invocationPointer, SarifPropertyName.ToolExecutionNotifications);\n            }\n\n            if (invocation.ToolConfigurationNotifications != null)\n            {\n                Visit(invocation.ToolConfigurationNotifications, invocationPointer, SarifPropertyName.ToolConfigurationNotifications);\n            }\n        }\n\n        private void Visit(Location location, string locationPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 409,
                  "endLine": 457
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 106,
                  "snippet": {
                    "text": "            Console.WriteLine($\"{message} in {w.ElapsedMilliseconds:n0}ms and {(ramAfter - ramBefore) / (BytesPerMB):n1}MB RAM.\");"
                  }
                },
                "contextRegion": {
                  "startLine": 103,
                  "endLine": 109,
                  "snippet": {
                    "text": "            w.Stop();\n            long ramAfter = GC.GetTotalMemory(true);\n\n            Console.WriteLine($\"{message} in {w.ElapsedMilliseconds:n0}ms and {(ramAfter - ramBefore) / (BytesPerMB):n1}MB RAM.\");\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 877
                          },
                          "region": {
                            "startLine": 106,
                            "snippet": {
                              "text": "            Console.WriteLine($\"{message} in {w.ElapsedMilliseconds:n0}ms and {(ramAfter - ramBefore) / (BytesPerMB):n1}MB RAM.\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 103,
                            "endLine": 109,
                            "snippet": {
                              "text": "            w.Stop();\n            long ramAfter = GC.GetTotalMemory(true);\n\n            Console.WriteLine($\"{message} in {w.ElapsedMilliseconds:n0}ms and {(ramAfter - ramBefore) / (BytesPerMB):n1}MB RAM.\");\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 106
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "            || rg0.nextInt(360) != rg1.nextInt(360)"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 31,
                            "snippet": {
                              "text": "            || rg0.nextInt(360) != rg1.nextInt(360)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 28,
                            "endLine": 34,
                            "snippet": {
                              "text": "        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 40
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "            || rg0.nextInt(360) != rg1.nextInt(360)"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 31,
                            "snippet": {
                              "text": "            || rg0.nextInt(360) != rg1.nextInt(360)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 28,
                            "endLine": 34,
                            "snippet": {
                              "text": "        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 40
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 71
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 71
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 71
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 71
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 71
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 71
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "endLine": 47,
                  "snippet": {
                    "text": "                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\n\n                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");\n                Stopwatch w = Stopwatch.StartNew();\n\n                JsonSerializer serializer = new JsonSerializer();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 44,
                            "snippet": {
                              "text": "                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 41,
                            "endLine": 47,
                            "snippet": {
                              "text": "                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\n\n                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");\n                Stopwatch w = Stopwatch.StartNew();\n\n                JsonSerializer serializer = new JsonSerializer();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method FormatFailureReason() in [SarifConverterTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 231
                },
                "region": {
                  "startLine": 134,
                  "endLine": 141,
                  "snippet": {
                    "text": "        private static string FormatFailureReason(StringBuilder sb, string toolName)\r\n        {\r\n            sb.Insert(0, \"the converted tool file should have matched the supplied SARIF file. \");\r\n\r\n            string rebaselineMessage = \"If the actual output is expected, generate new baselines for {0} by executing `UpdateBaselines.ps1 {0}` from a developer command prompt, or `UpdateBaselines.ps1` to update baselines for all tools.\";\r\n            sb.AppendLine(string.Format(CultureInfo.CurrentCulture, rebaselineMessage, toolName));\r\n            return sb.ToString();\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 131,
                  "endLine": 144,
                  "snippet": {
                    "text": "            File.WriteAllText(actualFilePath, JsonConvert.SerializeObject(reformattedLog, settings));\n        }\n\n        private static string FormatFailureReason(StringBuilder sb, string toolName)\n        {\n            sb.Insert(0, \"the converted tool file should have matched the supplied SARIF file. \");\n\n            string rebaselineMessage = \"If the actual output is expected, generate new baselines for {0} by executing `UpdateBaselines.ps1 {0}` from a developer command prompt, or `UpdateBaselines.ps1` to update baselines for all tools.\";\n            sb.AppendLine(string.Format(CultureInfo.CurrentCulture, rebaselineMessage, toolName));\n            return sb.ToString();\n        }\n\n        private string RunConverter(StringBuilder sb, string toolFormat, string inputFileName)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 231
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 141,
                            "snippet": {
                              "text": "        private static string FormatFailureReason(StringBuilder sb, string toolName)\r\n        {\r\n            sb.Insert(0, \"the converted tool file should have matched the supplied SARIF file. \");\r\n\r\n            string rebaselineMessage = \"If the actual output is expected, generate new baselines for {0} by executing `UpdateBaselines.ps1 {0}` from a developer command prompt, or `UpdateBaselines.ps1` to update baselines for all tools.\";\r\n            sb.AppendLine(string.Format(CultureInfo.CurrentCulture, rebaselineMessage, toolName));\r\n            return sb.ToString();\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 131,
                            "endLine": 144,
                            "snippet": {
                              "text": "            File.WriteAllText(actualFilePath, JsonConvert.SerializeObject(reformattedLog, settings));\n        }\n\n        private static string FormatFailureReason(StringBuilder sb, string toolName)\n        {\n            sb.Insert(0, \"the converted tool file should have matched the supplied SARIF file. \");\n\n            string rebaselineMessage = \"If the actual output is expected, generate new baselines for {0} by executing `UpdateBaselines.ps1 {0}` from a developer command prompt, or `UpdateBaselines.ps1` to update baselines for all tools.\";\n            sb.AppendLine(string.Format(CultureInfo.CurrentCulture, rebaselineMessage, toolName));\n            return sb.ToString();\n        }\n\n        private string RunConverter(StringBuilder sb, string toolFormat, string inputFileName)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: FormatFailureReason"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 231
                },
                "region": {
                  "startLine": 134,
                  "endLine": 141
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field baseliner is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 820
                },
                "region": {
                  "startLine": 17,
                  "snippet": {
                    "text": "        private readonly SarifLogResultMatcher baseliner = "
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "endLine": 20,
                  "snippet": {
                    "text": "    {\n        private readonly ITestOutputHelper output;\n\n        private readonly SarifLogResultMatcher baseliner = \n            new SarifLogResultMatcher(\n                exactResultMatchers: new [] { ExactMatchers.ExactResultMatcherFactory.GetIdenticalResultMatcher(considerPropertyBagsWhenComparing: true) }, \n                heuristicMatchers: null,\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 820
                          },
                          "region": {
                            "startLine": 17,
                            "snippet": {
                              "text": "        private readonly SarifLogResultMatcher baseliner = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 14,
                            "endLine": 20,
                            "snippet": {
                              "text": "    {\n        private readonly ITestOutputHelper output;\n\n        private readonly SarifLogResultMatcher baseliner = \n            new SarifLogResultMatcher(\n                exactResultMatchers: new [] { ExactMatchers.ExactResultMatcherFactory.GetIdenticalResultMatcher(considerPropertyBagsWhenComparing: true) }, \n                heuristicMatchers: null,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: baseliner"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 820
                },
                "region": {
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 78
                    },
                    {
                      "index": 79
                    },
                    {
                      "index": 80
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 78
                    },
                    {
                      "index": 79
                    },
                    {
                      "index": 80
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 78
                    },
                    {
                      "index": 79
                    },
                    {
                      "index": 80
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 78
                    },
                    {
                      "index": 79
                    },
                    {
                      "index": 80
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 78
                    },
                    {
                      "index": 79
                    },
                    {
                      "index": 80
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 78
                    },
                    {
                      "index": 79
                    },
                    {
                      "index": 80
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextGaussian() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 49,
                  "snippet": {
                    "text": "            || mrg0.nextGaussian() != mrg1.nextGaussian()"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "endLine": 52,
                  "snippet": {
                    "text": "            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 49,
                            "snippet": {
                              "text": "            || mrg0.nextGaussian() != mrg1.nextGaussian()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 46,
                            "endLine": 52,
                            "snippet": {
                              "text": "            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextGaussian()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 44
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextGaussian() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 49,
                  "snippet": {
                    "text": "            || mrg0.nextGaussian() != mrg1.nextGaussian()"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "endLine": 52,
                  "snippet": {
                    "text": "            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 49,
                            "snippet": {
                              "text": "            || mrg0.nextGaussian() != mrg1.nextGaussian()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 46,
                            "endLine": 52,
                            "snippet": {
                              "text": "            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextGaussian()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 44
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method GetCurrentAssemblyPath() in [ToolFormatConverterTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 202
                },
                "region": {
                  "startLine": 394,
                  "endLine": 405,
                  "snippet": {
                    "text": "        private static string GetCurrentAssemblyPath()\r\n        {\r\n            string codeBase = Assembly.GetExecutingAssembly().CodeBase;\r\n            var uriBuilder = new UriBuilder(new Uri(codeBase));\r\n            string path = Uri.UnescapeDataString(uriBuilder.Path);\r\n\r\n            // The returned path has forward slashes, since it comes from a URI.\r\n            // Calling Path.GetDirectoryName changes them to backslashes.\r\n            string fileName = Path.GetFileName(path);\r\n            string directory = Path.GetDirectoryName(path);\r\n            return Path.Combine(directory, fileName);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 391,
                  "endLine": 408,
                  "snippet": {
                    "text": "            factory.Should().BeNull();\n        }\n\n        private static string GetCurrentAssemblyPath()\n        {\n            string codeBase = Assembly.GetExecutingAssembly().CodeBase;\n            var uriBuilder = new UriBuilder(new Uri(codeBase));\n            string path = Uri.UnescapeDataString(uriBuilder.Path);\n\n            // The returned path has forward slashes, since it comes from a URI.\n            // Calling Path.GetDirectoryName changes them to backslashes.\n            string fileName = Path.GetFileName(path);\n            string directory = Path.GetDirectoryName(path);\n            return Path.Combine(directory, fileName);\n        }\n    }\n\n    namespace TestConverters\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 202
                          },
                          "region": {
                            "startLine": 394,
                            "endLine": 405,
                            "snippet": {
                              "text": "        private static string GetCurrentAssemblyPath()\r\n        {\r\n            string codeBase = Assembly.GetExecutingAssembly().CodeBase;\r\n            var uriBuilder = new UriBuilder(new Uri(codeBase));\r\n            string path = Uri.UnescapeDataString(uriBuilder.Path);\r\n\r\n            // The returned path has forward slashes, since it comes from a URI.\r\n            // Calling Path.GetDirectoryName changes them to backslashes.\r\n            string fileName = Path.GetFileName(path);\r\n            string directory = Path.GetDirectoryName(path);\r\n            return Path.Combine(directory, fileName);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 391,
                            "endLine": 408,
                            "snippet": {
                              "text": "            factory.Should().BeNull();\n        }\n\n        private static string GetCurrentAssemblyPath()\n        {\n            string codeBase = Assembly.GetExecutingAssembly().CodeBase;\n            var uriBuilder = new UriBuilder(new Uri(codeBase));\n            string path = Uri.UnescapeDataString(uriBuilder.Path);\n\n            // The returned path has forward slashes, since it comes from a URI.\n            // Calling Path.GetDirectoryName changes them to backslashes.\n            string fileName = Path.GetFileName(path);\n            string directory = Path.GetDirectoryName(path);\n            return Path.Combine(directory, fileName);\n        }\n    }\n\n    namespace TestConverters\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: GetCurrentAssemblyPath"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 202
                },
                "region": {
                  "startLine": 394,
                  "endLine": 405
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method PropertyIsAnyOfRequiredBySchema() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 371,
                  "endLine": 391,
                  "snippet": {
                    "text": "        private bool PropertyIsAnyOfRequiredBySchema(string objectTypeName, string propertyName)\r\n        {\r\n            string jsonPropertyName = GetJsonNameFor(propertyName);\r\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\r\n\r\n            if (propertySchema.AnyOf?.Count > 0 == true)\r\n            {\r\n                // TODO: Add additional logic to randomly select one or more required subsets and populate only those.\r\n\r\n                // As a quick fix, we will populate all properties which are in any required subset.\r\n                // This means this method must return true for all properties in any required subset in the list.\r\n                foreach (JsonSchema item in propertySchema.AnyOf)\r\n                {\r\n                    if (item.Required != null && item.Required.Contains(jsonPropertyName))\r\n                    {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 368,
                  "endLine": 394,
                  "snippet": {
                    "text": "            return propertySchema.Required != null && propertySchema.Required.Contains(jsonPropertyName);\n        }\n\n        private bool PropertyIsAnyOfRequiredBySchema(string objectTypeName, string propertyName)\n        {\n            string jsonPropertyName = GetJsonNameFor(propertyName);\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\n\n            if (propertySchema.AnyOf?.Count > 0 == true)\n            {\n                // TODO: Add additional logic to randomly select one or more required subsets and populate only those.\n\n                // As a quick fix, we will populate all properties which are in any required subset.\n                // This means this method must return true for all properties in any required subset in the list.\n                foreach (JsonSchema item in propertySchema.AnyOf)\n                {\n                    if (item.Required != null && item.Required.Contains(jsonPropertyName))\n                    {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        private JsonSchema GetJsonSchemaForObject(string objectTypeName)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 371,
                            "endLine": 391,
                            "snippet": {
                              "text": "        private bool PropertyIsAnyOfRequiredBySchema(string objectTypeName, string propertyName)\r\n        {\r\n            string jsonPropertyName = GetJsonNameFor(propertyName);\r\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\r\n\r\n            if (propertySchema.AnyOf?.Count > 0 == true)\r\n            {\r\n                // TODO: Add additional logic to randomly select one or more required subsets and populate only those.\r\n\r\n                // As a quick fix, we will populate all properties which are in any required subset.\r\n                // This means this method must return true for all properties in any required subset in the list.\r\n                foreach (JsonSchema item in propertySchema.AnyOf)\r\n                {\r\n                    if (item.Required != null && item.Required.Contains(jsonPropertyName))\r\n                    {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 368,
                            "endLine": 394,
                            "snippet": {
                              "text": "            return propertySchema.Required != null && propertySchema.Required.Contains(jsonPropertyName);\n        }\n\n        private bool PropertyIsAnyOfRequiredBySchema(string objectTypeName, string propertyName)\n        {\n            string jsonPropertyName = GetJsonNameFor(propertyName);\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\n\n            if (propertySchema.AnyOf?.Count > 0 == true)\n            {\n                // TODO: Add additional logic to randomly select one or more required subsets and populate only those.\n\n                // As a quick fix, we will populate all properties which are in any required subset.\n                // This means this method must return true for all properties in any required subset in the list.\n                foreach (JsonSchema item in propertySchema.AnyOf)\n                {\n                    if (item.Required != null && item.Required.Contains(jsonPropertyName))\n                    {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        private JsonSchema GetJsonSchemaForObject(string objectTypeName)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: PropertyIsAnyOfRequiredBySchema"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 371,
                  "endLine": 391
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method AnalyzeUri() in [SARIF1003.UrisMustBeValid.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1125
                },
                "region": {
                  "startLine": 89,
                  "endLine": 98,
                  "snippet": {
                    "text": "        private void AnalyzeUri(string uri, string pointer)\r\n        {\r\n            if (uri != null)\r\n            {\r\n                if (!Uri.IsWellFormedUriString(uri, UriKind.RelativeOrAbsolute))\r\n                {\r\n                    LogResult(pointer, nameof(RuleResources.SARIF1003_Default), uri);\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 86,
                  "endLine": 100,
                  "snippet": {
                    "text": "            AnalyzeUri(uri?.OriginalString, pointer);\n        }\n\n        private void AnalyzeUri(string uri, string pointer)\n        {\n            if (uri != null)\n            {\n                if (!Uri.IsWellFormedUriString(uri, UriKind.RelativeOrAbsolute))\n                {\n                    LogResult(pointer, nameof(RuleResources.SARIF1003_Default), uri);\n                }\n            }\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1125
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 98,
                            "snippet": {
                              "text": "        private void AnalyzeUri(string uri, string pointer)\r\n        {\r\n            if (uri != null)\r\n            {\r\n                if (!Uri.IsWellFormedUriString(uri, UriKind.RelativeOrAbsolute))\r\n                {\r\n                    LogResult(pointer, nameof(RuleResources.SARIF1003_Default), uri);\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 86,
                            "endLine": 100,
                            "snippet": {
                              "text": "            AnalyzeUri(uri?.OriginalString, pointer);\n        }\n\n        private void AnalyzeUri(string uri, string pointer)\n        {\n            if (uri != null)\n            {\n                if (!Uri.IsWellFormedUriString(uri, UriKind.RelativeOrAbsolute))\n                {\n                    LogResult(pointer, nameof(RuleResources.SARIF1003_Default), uri);\n                }\n            }\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: AnalyzeUri"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1125
                },
                "region": {
                  "startLine": 89,
                  "endLine": 98
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "                Console.WriteLine(SdkResources.MSG_OneOrMoreNotApplicable);"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "endLine": 42,
                  "snippet": {
                    "text": "\n            if ((runtimeConditions & RuntimeConditions.RuleNotApplicableToTarget) != 0)\n            {\n                Console.WriteLine(SdkResources.MSG_OneOrMoreNotApplicable);\n                Console.WriteLine();\n            }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 39,
                            "snippet": {
                              "text": "                Console.WriteLine(SdkResources.MSG_OneOrMoreNotApplicable);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 36,
                            "endLine": 42,
                            "snippet": {
                              "text": "\n            if ((runtimeConditions & RuntimeConditions.RuleNotApplicableToTarget) != 0)\n            {\n                Console.WriteLine(SdkResources.MSG_OneOrMoreNotApplicable);\n                Console.WriteLine();\n            }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field simpleXmlMulitDoc is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 455
                },
                "region": {
                  "startLine": 229,
                  "snippet": {
                    "text": "        private const string simpleXmlMulitDoc = \"<xml><xml>child <unused /> content</xml><xml>following</xml></xml>\";"
                  }
                },
                "contextRegion": {
                  "startLine": 226,
                  "endLine": 232,
                  "snippet": {
                    "text": "            }\n        }\n\n        private const string simpleXmlMulitDoc = \"<xml><xml>child <unused /> content</xml><xml>following</xml></xml>\";\n\n        [Fact]\n        public void Extensions_XmlIgnoreElement_Singular_DoesNotOverread()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 455
                          },
                          "region": {
                            "startLine": 229,
                            "snippet": {
                              "text": "        private const string simpleXmlMulitDoc = \"<xml><xml>child <unused /> content</xml><xml>following</xml></xml>\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 226,
                            "endLine": 232,
                            "snippet": {
                              "text": "            }\n        }\n\n        private const string simpleXmlMulitDoc = \"<xml><xml>child <unused /> content</xml><xml>following</xml></xml>\";\n\n        [Fact]\n        public void Extensions_XmlIgnoreElement_Singular_DoesNotOverread()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: simpleXmlMulitDoc"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 455
                },
                "region": {
                  "startLine": 229
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 117,
                  "snippet": {
                    "text": "      <xs:element name=\"Note\" type=\"NoteIdentifier\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 114,
                  "endLine": 120,
                  "snippet": {
                    "text": "  </xs:complexType>\n  <xs:complexType name=\"NoteIdentifiers\">\n    <xs:sequence>\n      <xs:element name=\"Note\" type=\"NoteIdentifier\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n    </xs:sequence>\n  </xs:complexType>\n  <!-- Message & Result definitions -->\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 117,
                            "snippet": {
                              "text": "      <xs:element name=\"Note\" type=\"NoteIdentifier\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 114,
                            "endLine": 120,
                            "snippet": {
                              "text": "  </xs:complexType>\n  <xs:complexType name=\"NoteIdentifiers\">\n    <xs:sequence>\n      <xs:element name=\"Note\" type=\"NoteIdentifier\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n    </xs:sequence>\n  </xs:complexType>\n  <!-- Message & Result definitions -->\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 117
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 133,
                  "snippet": {
                    "text": "        <xs:element ref=\"Result\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 130,
                  "endLine": 136,
                  "snippet": {
                    "text": "  <xs:element name=\"Message\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Result\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n        <xs:element name=\"Notes\" type=\"NoteIdentifiers\" minOccurs=\"0\" maxOccurs=\"1\" />\n      </xs:sequence>\n      <xs:attribute name=\"Status\" type=\"MessageStatus\" use=\"required\" />\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 133,
                            "snippet": {
                              "text": "        <xs:element ref=\"Result\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 130,
                            "endLine": 136,
                            "snippet": {
                              "text": "  <xs:element name=\"Message\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Result\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n        <xs:element name=\"Notes\" type=\"NoteIdentifiers\" minOccurs=\"0\" maxOccurs=\"1\" />\n      </xs:sequence>\n      <xs:attribute name=\"Status\" type=\"MessageStatus\" use=\"required\" />\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 133
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 148,
                  "snippet": {
                    "text": "        <xs:element ref=\"Message\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 145,
                  "endLine": 151,
                  "snippet": {
                    "text": "  <xs:element name=\"Messages\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Message\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 148,
                            "snippet": {
                              "text": "        <xs:element ref=\"Message\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 145,
                            "endLine": 151,
                            "snippet": {
                              "text": "  <xs:element name=\"Messages\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Message\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 148
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 166,
                  "snippet": {
                    "text": "        <xs:element ref=\"Note\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 163,
                  "endLine": 169,
                  "snippet": {
                    "text": "  <xs:element name=\"Notes\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Note\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 166,
                            "snippet": {
                              "text": "        <xs:element ref=\"Note\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 163,
                            "endLine": 169,
                            "snippet": {
                              "text": "  <xs:element name=\"Notes\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Note\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 166
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "        <xs:element ref=\"Rule\" minOccurs=\"0\" maxOccurs=\"unbounded\"></xs:element>"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "  <xs:element name=\"Rules\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Rule\" minOccurs=\"0\" maxOccurs=\"unbounded\"></xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 213,
                            "snippet": {
                              "text": "        <xs:element ref=\"Rule\" minOccurs=\"0\" maxOccurs=\"unbounded\"></xs:element>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 210,
                            "endLine": 216,
                            "snippet": {
                              "text": "  <xs:element name=\"Rules\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Rule\" minOccurs=\"0\" maxOccurs=\"unbounded\"></xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 213
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 233,
                  "snippet": {
                    "text": "      <xs:element name=\"Accessor\" type=\"Member\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 230,
                  "endLine": 236,
                  "snippet": {
                    "text": "  </xs:complexType>\n  <xs:complexType name=\"Accessors\">\n    <xs:sequence>\n      <xs:element name=\"Accessor\" type=\"Member\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n    </xs:sequence>\n  </xs:complexType>\n  <!-- Target types -->\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 233,
                            "snippet": {
                              "text": "      <xs:element name=\"Accessor\" type=\"Member\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 230,
                            "endLine": 236,
                            "snippet": {
                              "text": "  </xs:complexType>\n  <xs:complexType name=\"Accessors\">\n    <xs:sequence>\n      <xs:element name=\"Accessor\" type=\"Member\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n    </xs:sequence>\n  </xs:complexType>\n  <!-- Target types -->\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 233
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 281,
                  "snippet": {
                    "text": "      <xs:element name=\"Member\" type=\"Member\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 278,
                  "endLine": 284,
                  "snippet": {
                    "text": "  <!-- Plural target groups -->\n  <xs:complexType name=\"Members\">\n    <xs:sequence>\n      <xs:element name=\"Member\" type=\"Member\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n    </xs:sequence>\n  </xs:complexType>\n  <xs:element name=\"Members\" type=\"Members\">\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 281,
                            "snippet": {
                              "text": "      <xs:element name=\"Member\" type=\"Member\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 278,
                            "endLine": 284,
                            "snippet": {
                              "text": "  <!-- Plural target groups -->\n  <xs:complexType name=\"Members\">\n    <xs:sequence>\n      <xs:element name=\"Member\" type=\"Member\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n    </xs:sequence>\n  </xs:complexType>\n  <xs:element name=\"Members\" type=\"Members\">\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 281
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 289,
                  "snippet": {
                    "text": "        <xs:element name=\"Type\" type=\"Type\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 286,
                  "endLine": 292,
                  "snippet": {
                    "text": "  <xs:element name=\"Types\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Type\" type=\"Type\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 289,
                            "snippet": {
                              "text": "        <xs:element name=\"Type\" type=\"Type\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 286,
                            "endLine": 292,
                            "snippet": {
                              "text": "  <xs:element name=\"Types\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Type\" type=\"Type\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 289
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 296,
                  "snippet": {
                    "text": "        <xs:element name=\"Namespace\" type=\"Namespace\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 293,
                  "endLine": 299,
                  "snippet": {
                    "text": "  <xs:element name=\"Namespaces\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Namespace\" type=\"Namespace\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 296,
                            "snippet": {
                              "text": "        <xs:element name=\"Namespace\" type=\"Namespace\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 293,
                            "endLine": 299,
                            "snippet": {
                              "text": "  <xs:element name=\"Namespaces\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Namespace\" type=\"Namespace\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 296
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 303,
                  "snippet": {
                    "text": "        <xs:element name=\"Module\" type=\"Module\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 300,
                  "endLine": 306,
                  "snippet": {
                    "text": "  <xs:element name=\"Modules\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Module\" type=\"Module\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 303,
                            "snippet": {
                              "text": "        <xs:element name=\"Module\" type=\"Module\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 300,
                            "endLine": 306,
                            "snippet": {
                              "text": "  <xs:element name=\"Modules\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Module\" type=\"Module\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 303
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 310,
                  "snippet": {
                    "text": "        <xs:element name=\"Resource\" type=\"Resource\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 307,
                  "endLine": 313,
                  "snippet": {
                    "text": "  <xs:element name=\"Resources\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Resource\" type=\"Resource\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 310,
                            "snippet": {
                              "text": "        <xs:element name=\"Resource\" type=\"Resource\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 307,
                            "endLine": 313,
                            "snippet": {
                              "text": "  <xs:element name=\"Resources\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Resource\" type=\"Resource\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 310
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 317,
                  "snippet": {
                    "text": "        <xs:element name=\"Target\" type=\"Target\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                  }
                },
                "contextRegion": {
                  "startLine": 314,
                  "endLine": 320,
                  "snippet": {
                    "text": "  <xs:element name=\"Targets\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Target\" type=\"Target\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 317,
                            "snippet": {
                              "text": "        <xs:element name=\"Target\" type=\"Target\" minOccurs=\"0\" maxOccurs=\"unbounded\" />"
                            }
                          },
                          "contextRegion": {
                            "startLine": 314,
                            "endLine": 320,
                            "snippet": {
                              "text": "  <xs:element name=\"Targets\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"Target\" type=\"Target\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 317
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 330,
                  "snippet": {
                    "text": "        <xs:element ref=\"String\" minOccurs=\"0\" maxOccurs=\"unbounded\"></xs:element>"
                  }
                },
                "contextRegion": {
                  "startLine": 327,
                  "endLine": 333,
                  "snippet": {
                    "text": "  <xs:element name=\"Localized\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"String\" minOccurs=\"0\" maxOccurs=\"unbounded\"></xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 330,
                            "snippet": {
                              "text": "        <xs:element ref=\"String\" minOccurs=\"0\" maxOccurs=\"unbounded\"></xs:element>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 327,
                            "endLine": 333,
                            "snippet": {
                              "text": "  <xs:element name=\"Localized\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"String\" minOccurs=\"0\" maxOccurs=\"unbounded\"></xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 330
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 339,
                  "snippet": {
                    "text": "        <xs:element ref =\"SearchPath\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>"
                  }
                },
                "contextRegion": {
                  "startLine": 336,
                  "endLine": 342,
                  "snippet": {
                    "text": "  <xs:element name=\"SearchPaths\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref =\"SearchPath\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 339,
                            "snippet": {
                              "text": "        <xs:element ref =\"SearchPath\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 336,
                            "endLine": 342,
                            "snippet": {
                              "text": "  <xs:element name=\"SearchPaths\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref =\"SearchPath\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 339
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 352,
                  "snippet": {
                    "text": "        <xs:element ref =\"ResolvedAssembly\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>"
                  }
                },
                "contextRegion": {
                  "startLine": 349,
                  "endLine": 355,
                  "snippet": {
                    "text": "  <xs:element name=\"ResolvedAssemblies\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref =\"ResolvedAssembly\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 352,
                            "snippet": {
                              "text": "        <xs:element ref =\"ResolvedAssembly\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 349,
                            "endLine": 355,
                            "snippet": {
                              "text": "  <xs:element name=\"ResolvedAssemblies\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref =\"ResolvedAssembly\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 352
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 380,
                  "snippet": {
                    "text": "        <xs:element ref=\"InnerExceptionInfo\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>"
                  }
                },
                "contextRegion": {
                  "startLine": 377,
                  "endLine": 383,
                  "snippet": {
                    "text": "        <xs:element name=\"Type\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"/>\n        <xs:element name=\"ExceptionMessage\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"/>\n        <xs:element name=\"StackTrace\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\"/>\n        <xs:element ref=\"InnerExceptionInfo\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n      <xs:attribute name=\"Keyword\" type=\"xs:string\" use=\"required\" />\n      <xs:attribute name=\"Kind\" type=\"xs:string\" use=\"required\" />\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 380,
                            "snippet": {
                              "text": "        <xs:element ref=\"InnerExceptionInfo\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 377,
                            "endLine": 383,
                            "snippet": {
                              "text": "        <xs:element name=\"Type\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"/>\n        <xs:element name=\"ExceptionMessage\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"/>\n        <xs:element name=\"StackTrace\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\"/>\n        <xs:element ref=\"InnerExceptionInfo\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n      <xs:attribute name=\"Keyword\" type=\"xs:string\" use=\"required\" />\n      <xs:attribute name=\"Kind\" type=\"xs:string\" use=\"required\" />\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 380
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 6,
          "message": {
            "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 394,
                  "snippet": {
                    "text": "        <xs:element ref=\"Exception\" minOccurs=\"1\" maxOccurs=\"unbounded\"></xs:element>"
                  }
                },
                "contextRegion": {
                  "startLine": 391,
                  "endLine": 397,
                  "snippet": {
                    "text": "  <xs:element name=\"Exceptions\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Exception\" minOccurs=\"1\" maxOccurs=\"unbounded\"></xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 605
                          },
                          "region": {
                            "startLine": 394,
                            "snippet": {
                              "text": "        <xs:element ref=\"Exception\" minOccurs=\"1\" maxOccurs=\"unbounded\"></xs:element>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 391,
                            "endLine": 397,
                            "snippet": {
                              "text": "  <xs:element name=\"Exceptions\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element ref=\"Exception\" minOccurs=\"1\" maxOccurs=\"unbounded\"></xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n"
                            }
                          }
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 605
                },
                "region": {
                  "startLine": 394
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method GetInnerExceptions() in [ExceptionData.cs](1) can dereference a null pointer on line [29](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 56
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "        {\n            var innerExceptions = new List<ExceptionData>();\n\n            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;\n            if (aggregateInnerExceptions != null)\n            {\n                foreach (Exception innerException in aggregateInnerExceptions)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 56
                          },
                          "region": {
                            "startLine": 29,
                            "snippet": {
                              "text": "            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 26,
                            "endLine": 32,
                            "snippet": {
                              "text": "        {\n            var innerExceptions = new List<ExceptionData>();\n\n            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;\n            if (aggregateInnerExceptions != null)\n            {\n                foreach (Exception innerException in aggregateInnerExceptions)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 56
                          },
                          "region": {
                            "startLine": 29,
                            "snippet": {
                              "text": "            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 26,
                            "endLine": 32,
                            "snippet": {
                              "text": "        {\n            var innerExceptions = new List<ExceptionData>();\n\n            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;\n            if (aggregateInnerExceptions != null)\n            {\n                foreach (Exception innerException in aggregateInnerExceptions)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "null : <inline expression> is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 56
                          },
                          "region": {
                            "startLine": 29,
                            "snippet": {
                              "text": "            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 26,
                            "endLine": 32,
                            "snippet": {
                              "text": "        {\n            var innerExceptions = new List<ExceptionData>();\n\n            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;\n            if (aggregateInnerExceptions != null)\n            {\n                foreach (Exception innerException in aggregateInnerExceptions)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 56
                          },
                          "region": {
                            "startLine": 29,
                            "snippet": {
                              "text": "            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 26,
                            "endLine": 32,
                            "snippet": {
                              "text": "        {\n            var innerExceptions = new List<ExceptionData>();\n\n            IReadOnlyCollection<Exception> aggregateInnerExceptions = (exception as AggregateException)?.InnerExceptions;\n            if (aggregateInnerExceptions != null)\n            {\n                foreach (Exception innerException in aggregateInnerExceptions)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "<inline expression>.get_InnerExceptions() : <inline expression> is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 56
                },
                "region": {
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method ReadHints() in [AndroidStudioProblemTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 966
                },
                "region": {
                  "startLine": 601,
                  "endLine": 604,
                  "snippet": {
                    "text": "        private static ImmutableArray<string> ReadHints(XmlReader reader)\r\n        {\r\n            return AndroidStudioProblem.ReadHints(reader, new AndroidStudioStrings(reader.NameTable));\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 598,
                  "endLine": 607,
                  "snippet": {
                    "text": "            return AndroidStudioProblem.Parse(reader, new AndroidStudioStrings(reader.NameTable));\n        }\n\n        private static ImmutableArray<string> ReadHints(XmlReader reader)\n        {\n            return AndroidStudioProblem.ReadHints(reader, new AndroidStudioStrings(reader.NameTable));\n        }\n\n        internal static AndroidStudioProblem.Builder GetDefaultProblemBuilder()\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 966
                          },
                          "region": {
                            "startLine": 601,
                            "endLine": 604,
                            "snippet": {
                              "text": "        private static ImmutableArray<string> ReadHints(XmlReader reader)\r\n        {\r\n            return AndroidStudioProblem.ReadHints(reader, new AndroidStudioStrings(reader.NameTable));\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 598,
                            "endLine": 607,
                            "snippet": {
                              "text": "            return AndroidStudioProblem.Parse(reader, new AndroidStudioStrings(reader.NameTable));\n        }\n\n        private static ImmutableArray<string> ReadHints(XmlReader reader)\n        {\n            return AndroidStudioProblem.ReadHints(reader, new AndroidStudioStrings(reader.NameTable));\n        }\n\n        internal static AndroidStudioProblem.Builder GetDefaultProblemBuilder()\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: ReadHints"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 966
                },
                "region": {
                  "startLine": 601,
                  "endLine": 604
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field EmptyLogicalLocation is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 404
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "endLine": 19,
                  "snippet": {
                    "text": "        private static Graph EmptyGraph = new Graph();\n        private static Artifact EmptyFile = new Artifact();\n        private static Invocation EmptyInvocation = new Invocation();\n        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();\n\n        private IDictionary<ArtifactLocation, int> _fileToIndexMap;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 404
                          },
                          "region": {
                            "startLine": 16,
                            "snippet": {
                              "text": "        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 13,
                            "endLine": 19,
                            "snippet": {
                              "text": "        private static Graph EmptyGraph = new Graph();\n        private static Artifact EmptyFile = new Artifact();\n        private static Invocation EmptyInvocation = new Invocation();\n        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();\n\n        private IDictionary<ArtifactLocation, int> _fileToIndexMap;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: EmptyLogicalLocation"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 404
                },
                "region": {
                  "startLine": 16
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field OPTIONS is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 263
                },
                "region": {
                  "startLine": 15,
                  "snippet": {
                    "text": "        private const string OPTIONS = FEATURE + \".Options\";"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "endLine": 18,
                  "snippet": {
                    "text": "    public class PropertiesDictionaryTests\n    {\n        private const string FEATURE = \"Sarif.Sdk\";\n        private const string OPTIONS = FEATURE + \".Options\";\n\n        private static bool BOOL_DEFAULT = true;\n        private static StringSet STRINGSET_DEFAULT = new StringSet(new string[] { \"a\", \"b\", \"c\" });\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 263
                          },
                          "region": {
                            "startLine": 15,
                            "snippet": {
                              "text": "        private const string OPTIONS = FEATURE + \".Options\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 12,
                            "endLine": 18,
                            "snippet": {
                              "text": "    public class PropertiesDictionaryTests\n    {\n        private const string FEATURE = \"Sarif.Sdk\";\n        private const string OPTIONS = FEATURE + \".Options\";\n\n        private static bool BOOL_DEFAULT = true;\n        private static StringSet STRINGSET_DEFAULT = new StringSet(new string[] { \"a\", \"b\", \"c\" });\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: OPTIONS"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 263
                },
                "region": {
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method CreateResultVersionOne() in [SarifCurrentToVersionOneVisitor.cs](1) can dereference a null pointer on line [781](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 781,
                  "snippet": {
                    "text": "                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);"
                  }
                },
                "contextRegion": {
                  "startLine": 778,
                  "endLine": 784,
                  "snippet": {
                    "text": "                if (result.Fixes != null)\n                {\n                    // Null Fixes will be present in the case of unsupported encoding\n                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);\n\n                    if (result.Fixes.Count == 0)\n                    {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 761,
                            "snippet": {
                              "text": "            if (v2Result != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 758,
                            "endLine": 764,
                            "snippet": {
                              "text": "        {\n            ResultVersionOne result = null;\n\n            if (v2Result != null)\n            {\n                result = new ResultVersionOne\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 778,
                            "snippet": {
                              "text": "                if (result.Fixes != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 775,
                            "endLine": 781,
                            "snippet": {
                              "text": "                    SuppressionStates = Utilities.CreateSuppressionStatesVersionOne(v2Result.Suppressions)\n                };\n\n                if (result.Fixes != null)\n                {\n                    // Null Fixes will be present in the case of unsupported encoding\n                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 781,
                            "snippet": {
                              "text": "                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 778,
                            "endLine": 784,
                            "snippet": {
                              "text": "                if (result.Fixes != null)\n                {\n                    // Null Fixes will be present in the case of unsupported encoding\n                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);\n\n                    if (result.Fixes.Count == 0)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "null : <inline expression> is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 781,
                            "snippet": {
                              "text": "                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 778,
                            "endLine": 784,
                            "snippet": {
                              "text": "                if (result.Fixes != null)\n                {\n                    // Null Fixes will be present in the case of unsupported encoding\n                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);\n\n                    if (result.Fixes.Count == 0)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 781,
                            "snippet": {
                              "text": "                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 778,
                            "endLine": 784,
                            "snippet": {
                              "text": "                if (result.Fixes != null)\n                {\n                    // Null Fixes will be present in the case of unsupported encoding\n                    (result.Fixes as List<FixVersionOne>).RemoveAll(f => f == null);\n\n                    if (result.Fixes.Count == 0)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "<inline expression>.RemoveAll(...) : <inline expression> is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 781
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 35,
                  "snippet": {
                    "text": "            Console.WriteLine();"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "endLine": 38,
                  "snippet": {
                    "text": "                Console.WriteLine(SdkResources.MSG_AnalysisCompletedSuccessfully);\n            }\n\n            Console.WriteLine();\n\n            if ((runtimeConditions & RuntimeConditions.RuleNotApplicableToTarget) != 0)\n            {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 35,
                            "snippet": {
                              "text": "            Console.WriteLine();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 32,
                            "endLine": 38,
                            "snippet": {
                              "text": "                Console.WriteLine(SdkResources.MSG_AnalysisCompletedSuccessfully);\n            }\n\n            Console.WriteLine();\n\n            if ((runtimeConditions & RuntimeConditions.RuleNotApplicableToTarget) != 0)\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 35
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 40,
                  "snippet": {
                    "text": "                Console.WriteLine();"
                  }
                },
                "contextRegion": {
                  "startLine": 37,
                  "endLine": 43,
                  "snippet": {
                    "text": "            if ((runtimeConditions & RuntimeConditions.RuleNotApplicableToTarget) != 0)\n            {\n                Console.WriteLine(SdkResources.MSG_OneOrMoreNotApplicable);\n                Console.WriteLine();\n            }\n\n            if ((runtimeConditions & RuntimeConditions.TargetNotValidToAnalyze) != 0)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 40,
                            "snippet": {
                              "text": "                Console.WriteLine();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 37,
                            "endLine": 43,
                            "snippet": {
                              "text": "            if ((runtimeConditions & RuntimeConditions.RuleNotApplicableToTarget) != 0)\n            {\n                Console.WriteLine(SdkResources.MSG_OneOrMoreNotApplicable);\n                Console.WriteLine();\n            }\n\n            if ((runtimeConditions & RuntimeConditions.TargetNotValidToAnalyze) != 0)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "                Console.WriteLine();"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "endLine": 49,
                  "snippet": {
                    "text": "            if ((runtimeConditions & RuntimeConditions.TargetNotValidToAnalyze) != 0)\n            {\n                Console.WriteLine(SdkResources.MSG_OneOrMoreInvalidTargets);\n                Console.WriteLine();\n            }\n\n            if (fatalConditions != 0)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 46,
                            "snippet": {
                              "text": "                Console.WriteLine();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 43,
                            "endLine": 49,
                            "snippet": {
                              "text": "            if ((runtimeConditions & RuntimeConditions.TargetNotValidToAnalyze) != 0)\n            {\n                Console.WriteLine(SdkResources.MSG_OneOrMoreInvalidTargets);\n                Console.WriteLine();\n            }\n\n            if (fatalConditions != 0)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 55,
                  "snippet": {
                    "text": "                Console.WriteLine();"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "endLine": 58,
                  "snippet": {
                    "text": "                // so we'll report a catastrophic exit.\n                Console.WriteLine(SdkResources.MSG_UnexpectedApplicationExit);\n                Console.WriteLine(SdkResources.UnexpectedFatalRuntimeConditions + fatalConditions.ToString());\n                Console.WriteLine();\n            }\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 55,
                            "snippet": {
                              "text": "                Console.WriteLine();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 52,
                            "endLine": 58,
                            "snippet": {
                              "text": "                // so we'll report a catastrophic exit.\n                Console.WriteLine(SdkResources.MSG_UnexpectedApplicationExit);\n                Console.WriteLine(SdkResources.UnexpectedFatalRuntimeConditions + fatalConditions.ToString());\n                Console.WriteLine();\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 55
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method TestForLoggingOption() in [SarifLoggerTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 541
                },
                "region": {
                  "startLine": 660,
                  "endLine": 688,
                  "snippet": {
                    "text": "        private void TestForLoggingOption(LoggingOptions loggingOption)\r\n        {\r\n            string fileName = Path.GetTempFileName();\r\n\r\n            try\r\n            {\r\n                SarifLogger logger;\r\n\r\n                // Validates overload that accept a path argument.\r\n                using (logger = new SarifLogger(fileName, loggingOption))\r\n                {\r\n                    ValidateLoggerForExclusiveOption(logger, loggingOption);\r\n                };\r\n\r\n                // Validates overload that accepts any \r\n                // TextWriter (for example, one instantiated over a\r\n                // StringBuilder instance).\r\n                var sb = new StringBuilder();\r\n                var stringWriter = new StringWriter(sb);\r\n                using (logger = new SarifLogger(stringWriter, loggingOption))\r\n                {\r\n                    ValidateLoggerForExclusiveOption(logger, loggingOption);\r\n                };\r\n            }            \r\n            finally\r\n            {\r\n                if (File.Exists(fileName)) { File.Delete(fileName); }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 657,
                  "endLine": 691,
                  "snippet": {
                    "text": "        // This helper is intended to validate a single enum member only\n        // and not arbitrary combinations of bits. One defined member,\n        // All, contains all bits.\n        private void TestForLoggingOption(LoggingOptions loggingOption)\n        {\n            string fileName = Path.GetTempFileName();\n\n            try\n            {\n                SarifLogger logger;\n\n                // Validates overload that accept a path argument.\n                using (logger = new SarifLogger(fileName, loggingOption))\n                {\n                    ValidateLoggerForExclusiveOption(logger, loggingOption);\n                };\n\n                // Validates overload that accepts any \n                // TextWriter (for example, one instantiated over a\n                // StringBuilder instance).\n                var sb = new StringBuilder();\n                var stringWriter = new StringWriter(sb);\n                using (logger = new SarifLogger(stringWriter, loggingOption))\n                {\n                    ValidateLoggerForExclusiveOption(logger, loggingOption);\n                };\n            }            \n            finally\n            {\n                if (File.Exists(fileName)) { File.Delete(fileName); }\n            }\n        }\n\n        private void ValidateLoggerForExclusiveOption(SarifLogger logger, LoggingOptions loggingOptions)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 541
                          },
                          "region": {
                            "startLine": 660,
                            "endLine": 688,
                            "snippet": {
                              "text": "        private void TestForLoggingOption(LoggingOptions loggingOption)\r\n        {\r\n            string fileName = Path.GetTempFileName();\r\n\r\n            try\r\n            {\r\n                SarifLogger logger;\r\n\r\n                // Validates overload that accept a path argument.\r\n                using (logger = new SarifLogger(fileName, loggingOption))\r\n                {\r\n                    ValidateLoggerForExclusiveOption(logger, loggingOption);\r\n                };\r\n\r\n                // Validates overload that accepts any \r\n                // TextWriter (for example, one instantiated over a\r\n                // StringBuilder instance).\r\n                var sb = new StringBuilder();\r\n                var stringWriter = new StringWriter(sb);\r\n                using (logger = new SarifLogger(stringWriter, loggingOption))\r\n                {\r\n                    ValidateLoggerForExclusiveOption(logger, loggingOption);\r\n                };\r\n            }            \r\n            finally\r\n            {\r\n                if (File.Exists(fileName)) { File.Delete(fileName); }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 657,
                            "endLine": 691,
                            "snippet": {
                              "text": "        // This helper is intended to validate a single enum member only\n        // and not arbitrary combinations of bits. One defined member,\n        // All, contains all bits.\n        private void TestForLoggingOption(LoggingOptions loggingOption)\n        {\n            string fileName = Path.GetTempFileName();\n\n            try\n            {\n                SarifLogger logger;\n\n                // Validates overload that accept a path argument.\n                using (logger = new SarifLogger(fileName, loggingOption))\n                {\n                    ValidateLoggerForExclusiveOption(logger, loggingOption);\n                };\n\n                // Validates overload that accepts any \n                // TextWriter (for example, one instantiated over a\n                // StringBuilder instance).\n                var sb = new StringBuilder();\n                var stringWriter = new StringWriter(sb);\n                using (logger = new SarifLogger(stringWriter, loggingOption))\n                {\n                    ValidateLoggerForExclusiveOption(logger, loggingOption);\n                };\n            }            \n            finally\n            {\n                if (File.Exists(fileName)) { File.Delete(fileName); }\n            }\n        }\n\n        private void ValidateLoggerForExclusiveOption(SarifLogger logger, LoggingOptions loggingOptions)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: TestForLoggingOption"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 541
                },
                "region": {
                  "startLine": 660,
                  "endLine": 688
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 818,
                  "endLine": 826,
                  "snippet": {
                    "text": "        private void Visit(ThreadFlowLocation threadFlowLocation, string threadFlowLocationPointer)\r\n        {\r\n            Analyze(threadFlowLocation, threadFlowLocationPointer);\r\n\r\n            if (threadFlowLocation.Location != null)\r\n            {\r\n                Visit(threadFlowLocation.Location, threadFlowLocationPointer.AtProperty(SarifPropertyName.Location));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 815,
                  "endLine": 829,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(ThreadFlowLocation threadFlowLocation, string threadFlowLocationPointer)\n        {\n            Analyze(threadFlowLocation, threadFlowLocationPointer);\n\n            if (threadFlowLocation.Location != null)\n            {\n                Visit(threadFlowLocation.Location, threadFlowLocationPointer.AtProperty(SarifPropertyName.Location));\n            }\n        }\n\n        private void Visit(Tool tool, string toolPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 818,
                            "endLine": 826,
                            "snippet": {
                              "text": "        private void Visit(ThreadFlowLocation threadFlowLocation, string threadFlowLocationPointer)\r\n        {\r\n            Analyze(threadFlowLocation, threadFlowLocationPointer);\r\n\r\n            if (threadFlowLocation.Location != null)\r\n            {\r\n                Visit(threadFlowLocation.Location, threadFlowLocationPointer.AtProperty(SarifPropertyName.Location));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 815,
                            "endLine": 829,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(ThreadFlowLocation threadFlowLocation, string threadFlowLocationPointer)\n        {\n            Analyze(threadFlowLocation, threadFlowLocationPointer);\n\n            if (threadFlowLocation.Location != null)\n            {\n                Visit(threadFlowLocation.Location, threadFlowLocationPointer.AtProperty(SarifPropertyName.Location));\n            }\n        }\n\n        private void Visit(Tool tool, string toolPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 818,
                  "endLine": 826
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method ReportError() in [ContrastSecurityConverter.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 1431,
                  "endLine": 1434,
                  "snippet": {
                    "text": "        private static void ReportError(object sender, EventArgs e)\r\n        {\r\n            throw new XmlException(e.ToString());\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 1428,
                  "endLine": 1437,
                  "snippet": {
                    "text": "            }\n        }\n\n        private static void ReportError(object sender, EventArgs e)\n        {\n            throw new XmlException(e.ToString());\n        }\n\n        private static void ReadFindings(SparseReader reader, object parent)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 714
                          },
                          "region": {
                            "startLine": 1431,
                            "endLine": 1434,
                            "snippet": {
                              "text": "        private static void ReportError(object sender, EventArgs e)\r\n        {\r\n            throw new XmlException(e.ToString());\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1428,
                            "endLine": 1437,
                            "snippet": {
                              "text": "            }\n        }\n\n        private static void ReportError(object sender, EventArgs e)\n        {\n            throw new XmlException(e.ToString());\n        }\n\n        private static void ReadFindings(SparseReader reader, object parent)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: ReportError"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 1431,
                  "endLine": 1434
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextLong() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "            || mrg0.nextLong() != mrg1.nextLong()"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "endLine": 49,
                  "snippet": {
                    "text": "        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 46,
                            "snippet": {
                              "text": "            || mrg0.nextLong() != mrg1.nextLong()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 43,
                            "endLine": 49,
                            "snippet": {
                              "text": "        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextLong()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextLong() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "            || mrg0.nextLong() != mrg1.nextLong()"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "endLine": 49,
                  "snippet": {
                    "text": "        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 46,
                            "snippet": {
                              "text": "            || mrg0.nextLong() != mrg1.nextLong()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 43,
                            "endLine": 49,
                            "snippet": {
                              "text": "        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextLong()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 547,
                  "endLine": 555,
                  "snippet": {
                    "text": "        private void Visit(Region region, string regionPointer)\r\n        {\r\n            if (region.Message != null)\r\n            {\r\n                Visit(region.Message, regionPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            Analyze(region, regionPointer);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 544,
                  "endLine": 558,
                  "snippet": {
                    "text": "            Analyze(rectangle, rectanglePointer);\n        }\n\n        private void Visit(Region region, string regionPointer)\n        {\n            if (region.Message != null)\n            {\n                Visit(region.Message, regionPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            Analyze(region, regionPointer);\n        }\n\n        private void Visit(Result result, string resultPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 547,
                            "endLine": 555,
                            "snippet": {
                              "text": "        private void Visit(Region region, string regionPointer)\r\n        {\r\n            if (region.Message != null)\r\n            {\r\n                Visit(region.Message, regionPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            Analyze(region, regionPointer);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 544,
                            "endLine": 558,
                            "snippet": {
                              "text": "            Analyze(rectangle, rectanglePointer);\n        }\n\n        private void Visit(Region region, string regionPointer)\n        {\n            if (region.Message != null)\n            {\n                Visit(region.Message, regionPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            Analyze(region, regionPointer);\n        }\n\n        private void Visit(Result result, string resultPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 547,
                  "endLine": 555
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Insertion_Between_New_Line_Chars is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "        private readonly static Region s_Insertion_Between_New_Line_Chars = "
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 4, StartColumn = 4, EndLine = 4, EndColumn = 4, CharOffset = 20, CharLength = 0 };\n\n        private readonly static Region s_Insertion_Between_New_Line_Chars = \n            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 2, StartColumn = 5, EndLine = 2, EndColumn = 5, CharOffset = 10, CharLength = 0 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 67,
                            "snippet": {
                              "text": "        private readonly static Region s_Insertion_Between_New_Line_Chars = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 64,
                            "endLine": 70,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 4, StartColumn = 4, EndLine = 4, EndColumn = 4, CharOffset = 20, CharLength = 0 };\n\n        private readonly static Region s_Insertion_Between_New_Line_Chars = \n            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 2, StartColumn = 5, EndLine = 2, EndColumn = 5, CharOffset = 10, CharLength = 0 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Insertion_Between_New_Line_Chars"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 67
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method PageManual() in [PageCommandTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 678
                },
                "region": {
                  "startLine": 160,
                  "endLine": 205,
                  "snippet": {
                    "text": "        private static void PageManual(string sourceFilePath, string outputPath, int index, int count)\r\n        {\r\n            using (JsonTextReader reader = new JsonTextReader(new StreamReader(sourceFilePath)))\r\n            using (JsonTextWriter writer = new JsonTextWriter(File.CreateText(outputPath)))\r\n            {\r\n                writer.Formatting = Newtonsoft.Json.Formatting.Indented;\r\n\r\n                // Copy file up to \"results\" array\r\n                while (reader.Read())\r\n                {\r\n                    writer.WriteToken(reader, false);\r\n                    if (reader.TokenType == JsonToken.PropertyName && \"results\" == reader.Value.ToString()) { break; }\r\n                }\r\n\r\n                // StartArray\r\n                reader.Read();\r\n                writer.WriteToken(reader, false);\r\n\r\n                // Copy results only between [index, index + count)\r\n                int currentIndex = 0;\r\n                while (reader.TokenType != JsonToken.EndArray)\r\n                {\r\n                    reader.Read();\r\n\r\n                    if (currentIndex >= index && currentIndex < (index + count))\r\n                    {\r\n                        writer.WriteToken(reader, true);\r\n                    }\r\n                    else\r\n                    {\r\n                        reader.Skip();\r\n                    }\r\n\r\n                    currentIndex++;\r\n                }\r\n\r\n                // EndArray\r\n                writer.WriteToken(reader, false);\r\n\r\n                // Copy after results array \r\n                while (reader.Read())\r\n                {\r\n                    writer.WriteToken(reader, false);\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 157,
                  "endLine": 207,
                  "snippet": {
                    "text": "            }\n        }\n\n        private static void PageManual(string sourceFilePath, string outputPath, int index, int count)\n        {\n            using (JsonTextReader reader = new JsonTextReader(new StreamReader(sourceFilePath)))\n            using (JsonTextWriter writer = new JsonTextWriter(File.CreateText(outputPath)))\n            {\n                writer.Formatting = Newtonsoft.Json.Formatting.Indented;\n\n                // Copy file up to \"results\" array\n                while (reader.Read())\n                {\n                    writer.WriteToken(reader, false);\n                    if (reader.TokenType == JsonToken.PropertyName && \"results\" == reader.Value.ToString()) { break; }\n                }\n\n                // StartArray\n                reader.Read();\n                writer.WriteToken(reader, false);\n\n                // Copy results only between [index, index + count)\n                int currentIndex = 0;\n                while (reader.TokenType != JsonToken.EndArray)\n                {\n                    reader.Read();\n\n                    if (currentIndex >= index && currentIndex < (index + count))\n                    {\n                        writer.WriteToken(reader, true);\n                    }\n                    else\n                    {\n                        reader.Skip();\n                    }\n\n                    currentIndex++;\n                }\n\n                // EndArray\n                writer.WriteToken(reader, false);\n\n                // Copy after results array \n                while (reader.Read())\n                {\n                    writer.WriteToken(reader, false);\n                }\n            }\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 678
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 205,
                            "snippet": {
                              "text": "        private static void PageManual(string sourceFilePath, string outputPath, int index, int count)\r\n        {\r\n            using (JsonTextReader reader = new JsonTextReader(new StreamReader(sourceFilePath)))\r\n            using (JsonTextWriter writer = new JsonTextWriter(File.CreateText(outputPath)))\r\n            {\r\n                writer.Formatting = Newtonsoft.Json.Formatting.Indented;\r\n\r\n                // Copy file up to \"results\" array\r\n                while (reader.Read())\r\n                {\r\n                    writer.WriteToken(reader, false);\r\n                    if (reader.TokenType == JsonToken.PropertyName && \"results\" == reader.Value.ToString()) { break; }\r\n                }\r\n\r\n                // StartArray\r\n                reader.Read();\r\n                writer.WriteToken(reader, false);\r\n\r\n                // Copy results only between [index, index + count)\r\n                int currentIndex = 0;\r\n                while (reader.TokenType != JsonToken.EndArray)\r\n                {\r\n                    reader.Read();\r\n\r\n                    if (currentIndex >= index && currentIndex < (index + count))\r\n                    {\r\n                        writer.WriteToken(reader, true);\r\n                    }\r\n                    else\r\n                    {\r\n                        reader.Skip();\r\n                    }\r\n\r\n                    currentIndex++;\r\n                }\r\n\r\n                // EndArray\r\n                writer.WriteToken(reader, false);\r\n\r\n                // Copy after results array \r\n                while (reader.Read())\r\n                {\r\n                    writer.WriteToken(reader, false);\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 157,
                            "endLine": 207,
                            "snippet": {
                              "text": "            }\n        }\n\n        private static void PageManual(string sourceFilePath, string outputPath, int index, int count)\n        {\n            using (JsonTextReader reader = new JsonTextReader(new StreamReader(sourceFilePath)))\n            using (JsonTextWriter writer = new JsonTextWriter(File.CreateText(outputPath)))\n            {\n                writer.Formatting = Newtonsoft.Json.Formatting.Indented;\n\n                // Copy file up to \"results\" array\n                while (reader.Read())\n                {\n                    writer.WriteToken(reader, false);\n                    if (reader.TokenType == JsonToken.PropertyName && \"results\" == reader.Value.ToString()) { break; }\n                }\n\n                // StartArray\n                reader.Read();\n                writer.WriteToken(reader, false);\n\n                // Copy results only between [index, index + count)\n                int currentIndex = 0;\n                while (reader.TokenType != JsonToken.EndArray)\n                {\n                    reader.Read();\n\n                    if (currentIndex >= index && currentIndex < (index + count))\n                    {\n                        writer.WriteToken(reader, true);\n                    }\n                    else\n                    {\n                        reader.Skip();\n                    }\n\n                    currentIndex++;\n                }\n\n                // EndArray\n                writer.WriteToken(reader, false);\n\n                // Copy after results array \n                while (reader.Read())\n                {\n                    writer.WriteToken(reader, false);\n                }\n            }\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: PageManual"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 678
                },
                "region": {
                  "startLine": 160,
                  "endLine": 205
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 81
                    },
                    {
                      "index": 82
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 81
                    },
                    {
                      "index": 82
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 81
                    },
                    {
                      "index": 82
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 81
                    },
                    {
                      "index": 82
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field exampleErrorXmlSelfClosed is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 185
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "        private const string exampleErrorXmlSelfClosed = exampleErrorXmlBase + \" />\";"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "        private const string exampleErrorXmlBase = \"<error id=\\\"id\\\" msg=\\\"message\\\" verbose=\\\"verbose\\\" severity=\\\"style\\\"\";\n        private const string exampleErrorXmlOpen = exampleErrorXmlBase + \">\";\n        private const string exampleErrorClose = \"</error>\";\n        private const string exampleErrorXmlSelfClosed = exampleErrorXmlBase + \" />\";\n        private static void AssertOuterPropertiesAreExampleError(CppCheckError uut)\n        {\n            Assert.Equal(\"id\", uut.Id);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 185
                          },
                          "region": {
                            "startLine": 201,
                            "snippet": {
                              "text": "        private const string exampleErrorXmlSelfClosed = exampleErrorXmlBase + \" />\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 198,
                            "endLine": 204,
                            "snippet": {
                              "text": "        private const string exampleErrorXmlBase = \"<error id=\\\"id\\\" msg=\\\"message\\\" verbose=\\\"verbose\\\" severity=\\\"style\\\"\";\n        private const string exampleErrorXmlOpen = exampleErrorXmlBase + \">\";\n        private const string exampleErrorClose = \"</error>\";\n        private const string exampleErrorXmlSelfClosed = exampleErrorXmlBase + \" />\";\n        private static void AssertOuterPropertiesAreExampleError(CppCheckError uut)\n        {\n            Assert.Equal(\"id\", uut.Id);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: exampleErrorXmlSelfClosed"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 185
                },
                "region": {
                  "startLine": 201
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextLong() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "            || rg0.nextLong() != rg1.nextLong()"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "endLine": 36,
                  "snippet": {
                    "text": "        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 33,
                            "snippet": {
                              "text": "            || rg0.nextLong() != rg1.nextLong()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 30,
                            "endLine": 36,
                            "snippet": {
                              "text": "        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextLong()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextLong() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "            || rg0.nextLong() != rg1.nextLong()"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "endLine": 36,
                  "snippet": {
                    "text": "        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 33,
                            "snippet": {
                              "text": "            || rg0.nextLong() != rg1.nextLong()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 30,
                            "endLine": 36,
                            "snippet": {
                              "text": "        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextLong()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 12,
          "message": {
            "text": "The class Category implements the `ISerializable` interface but does not declare the `[Serializable]` attribute, so it will not be serialized.\r\nClasses that implement the `ISerializable` interface but do not declare the `[Serializable]` attribute will not be serialized."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 670
                },
                "region": {
                  "startLine": 9,
                  "snippet": {
                    "text": "    public class Category : Dictionary<string, string>, IXmlSerializable"
                  }
                },
                "contextRegion": {
                  "startLine": 6,
                  "endLine": 12,
                  "snippet": {
                    "text": "\nnamespace Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel\n{\n    public class Category : Dictionary<string, string>, IXmlSerializable\n    {\n        public XmlSchema GetSchema()\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 670
                          },
                          "region": {
                            "startLine": 9,
                            "snippet": {
                              "text": "    public class Category : Dictionary<string, string>, IXmlSerializable"
                            }
                          },
                          "contextRegion": {
                            "startLine": 6,
                            "endLine": 12,
                            "snippet": {
                              "text": "\nnamespace Microsoft.CodeAnalysis.Sarif.Converters.PREFastObjectModel\n{\n    public class Category : Dictionary<string, string>, IXmlSerializable\n    {\n        public XmlSchema GetSchema()\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Class: Category"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 670
                },
                "region": {
                  "startLine": 9
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method IsList() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 447,
                  "endLine": 450,
                  "snippet": {
                    "text": "        private static bool IsList(Type propertyType)\r\n        {\r\n            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(IList<>);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 444,
                  "endLine": 453,
                  "snippet": {
                    "text": "            return Activator.CreateInstance(constructedType);\n        }\n\n        private static bool IsList(Type propertyType)\n        {\n            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(IList<>);\n        }\n\n        private bool IsDictionary(Type propertyType)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 447,
                            "endLine": 450,
                            "snippet": {
                              "text": "        private static bool IsList(Type propertyType)\r\n        {\r\n            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(IList<>);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 444,
                            "endLine": 453,
                            "snippet": {
                              "text": "            return Activator.CreateInstance(constructedType);\n        }\n\n        private static bool IsList(Type propertyType)\n        {\n            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(IList<>);\n        }\n\n        private bool IsDictionary(Type propertyType)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: IsList"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 447,
                  "endLine": 450
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Insertion_End_Of_File is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "        private readonly static Region s_Insertion_End_Of_File ="
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "endLine": 66,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 1, StartColumn = 1, EndLine = 1, EndColumn = 1, CharOffset = 0, CharLength = 0 };\n\n        private readonly static Region s_Insertion_End_Of_File =\n            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 4, StartColumn = 4, EndLine = 4, EndColumn = 4, CharOffset = 20, CharLength = 0 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 63,
                            "snippet": {
                              "text": "        private readonly static Region s_Insertion_End_Of_File ="
                            }
                          },
                          "contextRegion": {
                            "startLine": 60,
                            "endLine": 66,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 1, StartColumn = 1, EndLine = 1, EndColumn = 1, CharOffset = 0, CharLength = 0 };\n\n        private readonly static Region s_Insertion_End_Of_File =\n            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 4, StartColumn = 4, EndLine = 4, EndColumn = 4, CharOffset = 20, CharLength = 0 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Insertion_End_Of_File"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 63
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "            if (args.Length < 2)\n            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n                return;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 31,
                            "snippet": {
                              "text": "                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 28,
                            "endLine": 34,
                            "snippet": {
                              "text": "            if (args.Length < 2)\n            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n                return;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 31
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 333,
                  "endLine": 349,
                  "snippet": {
                    "text": "        private void Visit(Fix fix, string fixPointer)\r\n        {\r\n            if (fix.Description != null)\r\n            {\r\n                Visit(fix.Description, fixPointer.AtProperty(SarifPropertyName.Description));\r\n            }\r\n\r\n            if (fix.ArtifactChanges != null)\r\n            {\r\n                string fileChangesPointer = fixPointer.AtProperty(SarifPropertyName.ArtifactChanges);\r\n\r\n                for (int i = 0; i < fix.ArtifactChanges.Count; ++i)\r\n                {\r\n                    Visit(fix.ArtifactChanges[i], fileChangesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 330,
                  "endLine": 352,
                  "snippet": {
                    "text": "            Analyze(fileLocation, fileLocationPointer);\n        }\n\n        private void Visit(Fix fix, string fixPointer)\n        {\n            if (fix.Description != null)\n            {\n                Visit(fix.Description, fixPointer.AtProperty(SarifPropertyName.Description));\n            }\n\n            if (fix.ArtifactChanges != null)\n            {\n                string fileChangesPointer = fixPointer.AtProperty(SarifPropertyName.ArtifactChanges);\n\n                for (int i = 0; i < fix.ArtifactChanges.Count; ++i)\n                {\n                    Visit(fix.ArtifactChanges[i], fileChangesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(ArtifactChange fileChange, string fileChangePointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 333,
                            "endLine": 349,
                            "snippet": {
                              "text": "        private void Visit(Fix fix, string fixPointer)\r\n        {\r\n            if (fix.Description != null)\r\n            {\r\n                Visit(fix.Description, fixPointer.AtProperty(SarifPropertyName.Description));\r\n            }\r\n\r\n            if (fix.ArtifactChanges != null)\r\n            {\r\n                string fileChangesPointer = fixPointer.AtProperty(SarifPropertyName.ArtifactChanges);\r\n\r\n                for (int i = 0; i < fix.ArtifactChanges.Count; ++i)\r\n                {\r\n                    Visit(fix.ArtifactChanges[i], fileChangesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 330,
                            "endLine": 352,
                            "snippet": {
                              "text": "            Analyze(fileLocation, fileLocationPointer);\n        }\n\n        private void Visit(Fix fix, string fixPointer)\n        {\n            if (fix.Description != null)\n            {\n                Visit(fix.Description, fixPointer.AtProperty(SarifPropertyName.Description));\n            }\n\n            if (fix.ArtifactChanges != null)\n            {\n                string fileChangesPointer = fixPointer.AtProperty(SarifPropertyName.ArtifactChanges);\n\n                for (int i = 0; i < fix.ArtifactChanges.Count; ++i)\n                {\n                    Visit(fix.ArtifactChanges[i], fileChangesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(ArtifactChange fileChange, string fileChangePointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 333,
                  "endLine": 349
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method ShouldThisOneOfPropertyPopulate() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 217,
                  "endLine": 244,
                  "snippet": {
                    "text": "        private bool ShouldThisOneOfPropertyPopulate(JsonSchema propertySchema, string jsonPropertyName)\r\n        {\r\n            // Only one of the subsets in 'OneOf' list must be present to validate successfully.\r\n            // ex:\r\n            //  OneOf : [\r\n            //      {\r\n            //          \"required\" : [\"p1\", \"p2\"]\r\n            //      },\r\n            //      {\r\n            //          \"required\": [ \"q1\", \"q2\", \"q3\" ]\r\n            //      },\r\n            //  ]\r\n            //  Either (p1 & p2) should be populated or (q1, q2, q3) should be populated, but NEVER both.\r\n\r\n            // We should populate only the first property in the list and ignore others.\r\n            // This means this method must return true only for first property and false for others.\r\n\r\n            int indexToPopulate = GenerateIndexToPopulateForOneOfProperties();\r\n\r\n            if (propertySchema.OneOf[indexToPopulate].Required != null && propertySchema.OneOf[indexToPopulate].Required.Contains(jsonPropertyName))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            // if we reach here, this must be a property in a oneOf.required subset but which is not at indexToPopulate.\r\n            // return false to ensure this property is not populated.\r\n            return false;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 214,
                  "endLine": 247,
                  "snippet": {
                    "text": "            return !ShouldThisOneOfPropertyPopulate(propertySchema, jsonPropertyName);\n        }\n\n        private bool ShouldThisOneOfPropertyPopulate(JsonSchema propertySchema, string jsonPropertyName)\n        {\n            // Only one of the subsets in 'OneOf' list must be present to validate successfully.\n            // ex:\n            //  OneOf : [\n            //      {\n            //          \"required\" : [\"p1\", \"p2\"]\n            //      },\n            //      {\n            //          \"required\": [ \"q1\", \"q2\", \"q3\" ]\n            //      },\n            //  ]\n            //  Either (p1 & p2) should be populated or (q1, q2, q3) should be populated, but NEVER both.\n\n            // We should populate only the first property in the list and ignore others.\n            // This means this method must return true only for first property and false for others.\n\n            int indexToPopulate = GenerateIndexToPopulateForOneOfProperties();\n\n            if (propertySchema.OneOf[indexToPopulate].Required != null && propertySchema.OneOf[indexToPopulate].Required.Contains(jsonPropertyName))\n            {\n                return true;\n            }\n\n            // if we reach here, this must be a property in a oneOf.required subset but which is not at indexToPopulate.\n            // return false to ensure this property is not populated.\n            return false;\n        }\n\n        private int GenerateIndexToPopulateForOneOfProperties()\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 217,
                            "endLine": 244,
                            "snippet": {
                              "text": "        private bool ShouldThisOneOfPropertyPopulate(JsonSchema propertySchema, string jsonPropertyName)\r\n        {\r\n            // Only one of the subsets in 'OneOf' list must be present to validate successfully.\r\n            // ex:\r\n            //  OneOf : [\r\n            //      {\r\n            //          \"required\" : [\"p1\", \"p2\"]\r\n            //      },\r\n            //      {\r\n            //          \"required\": [ \"q1\", \"q2\", \"q3\" ]\r\n            //      },\r\n            //  ]\r\n            //  Either (p1 & p2) should be populated or (q1, q2, q3) should be populated, but NEVER both.\r\n\r\n            // We should populate only the first property in the list and ignore others.\r\n            // This means this method must return true only for first property and false for others.\r\n\r\n            int indexToPopulate = GenerateIndexToPopulateForOneOfProperties();\r\n\r\n            if (propertySchema.OneOf[indexToPopulate].Required != null && propertySchema.OneOf[indexToPopulate].Required.Contains(jsonPropertyName))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            // if we reach here, this must be a property in a oneOf.required subset but which is not at indexToPopulate.\r\n            // return false to ensure this property is not populated.\r\n            return false;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 214,
                            "endLine": 247,
                            "snippet": {
                              "text": "            return !ShouldThisOneOfPropertyPopulate(propertySchema, jsonPropertyName);\n        }\n\n        private bool ShouldThisOneOfPropertyPopulate(JsonSchema propertySchema, string jsonPropertyName)\n        {\n            // Only one of the subsets in 'OneOf' list must be present to validate successfully.\n            // ex:\n            //  OneOf : [\n            //      {\n            //          \"required\" : [\"p1\", \"p2\"]\n            //      },\n            //      {\n            //          \"required\": [ \"q1\", \"q2\", \"q3\" ]\n            //      },\n            //  ]\n            //  Either (p1 & p2) should be populated or (q1, q2, q3) should be populated, but NEVER both.\n\n            // We should populate only the first property in the list and ignore others.\n            // This means this method must return true only for first property and false for others.\n\n            int indexToPopulate = GenerateIndexToPopulateForOneOfProperties();\n\n            if (propertySchema.OneOf[indexToPopulate].Required != null && propertySchema.OneOf[indexToPopulate].Required.Contains(jsonPropertyName))\n            {\n                return true;\n            }\n\n            // if we reach here, this must be a property in a oneOf.required subset but which is not at indexToPopulate.\n            // return false to ensure this property is not populated.\n            return false;\n        }\n\n        private int GenerateIndexToPopulateForOneOfProperties()\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: ShouldThisOneOfPropertyPopulate"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 217,
                  "endLine": 244
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method AddElementToDictionary() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 409,
                  "endLine": 414,
                  "snippet": {
                    "text": "        private void AddElementToDictionary(object dictionary, object dictionaryValue)\r\n        {\r\n            var dictionaryType = dictionary.GetType();\r\n            MethodInfo method = dictionaryType.GetMethod(\"Add\");\r\n            method.Invoke(dictionary, new[] { \"key\", dictionaryValue });\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 406,
                  "endLine": 417,
                  "snippet": {
                    "text": "            return name.Substring(0, 1).ToLowerInvariant() + name.Substring(1);\n        }\n\n        private void AddElementToDictionary(object dictionary, object dictionaryValue)\n        {\n            var dictionaryType = dictionary.GetType();\n            MethodInfo method = dictionaryType.GetMethod(\"Add\");\n            method.Invoke(dictionary, new[] { \"key\", dictionaryValue });\n        }\n\n        private void AddElementToList(object list, object listElement)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 409,
                            "endLine": 414,
                            "snippet": {
                              "text": "        private void AddElementToDictionary(object dictionary, object dictionaryValue)\r\n        {\r\n            var dictionaryType = dictionary.GetType();\r\n            MethodInfo method = dictionaryType.GetMethod(\"Add\");\r\n            method.Invoke(dictionary, new[] { \"key\", dictionaryValue });\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 406,
                            "endLine": 417,
                            "snippet": {
                              "text": "            return name.Substring(0, 1).ToLowerInvariant() + name.Substring(1);\n        }\n\n        private void AddElementToDictionary(object dictionary, object dictionaryValue)\n        {\n            var dictionaryType = dictionary.GetType();\n            MethodInfo method = dictionaryType.GetMethod(\"Add\");\n            method.Invoke(dictionary, new[] { \"key\", dictionaryValue });\n        }\n\n        private void AddElementToList(object list, object listElement)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: AddElementToDictionary"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 409,
                  "endLine": 414
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method GetJsonSchemaForObject() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 393,
                  "endLine": 401,
                  "snippet": {
                    "text": "        private JsonSchema GetJsonSchemaForObject(string objectTypeName)\r\n        {\r\n            string jsonTypeName = GetJsonNameFor(objectTypeName);\r\n\r\n            // If _schema.Definitions does not contain the jsonTypeName, we are operating\r\n            // against the root sarifLog schema, which is what's stored in _schema\r\n            JsonSchema propertySchema = _schema.Definitions.ContainsKey(jsonTypeName) ? _schema.Definitions[jsonTypeName] : _schema;\r\n            return propertySchema;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 390,
                  "endLine": 404,
                  "snippet": {
                    "text": "            return false;\n        }\n\n        private JsonSchema GetJsonSchemaForObject(string objectTypeName)\n        {\n            string jsonTypeName = GetJsonNameFor(objectTypeName);\n\n            // If _schema.Definitions does not contain the jsonTypeName, we are operating\n            // against the root sarifLog schema, which is what's stored in _schema\n            JsonSchema propertySchema = _schema.Definitions.ContainsKey(jsonTypeName) ? _schema.Definitions[jsonTypeName] : _schema;\n            return propertySchema;\n        }\n\n        private string GetJsonNameFor(string name)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 393,
                            "endLine": 401,
                            "snippet": {
                              "text": "        private JsonSchema GetJsonSchemaForObject(string objectTypeName)\r\n        {\r\n            string jsonTypeName = GetJsonNameFor(objectTypeName);\r\n\r\n            // If _schema.Definitions does not contain the jsonTypeName, we are operating\r\n            // against the root sarifLog schema, which is what's stored in _schema\r\n            JsonSchema propertySchema = _schema.Definitions.ContainsKey(jsonTypeName) ? _schema.Definitions[jsonTypeName] : _schema;\r\n            return propertySchema;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 390,
                            "endLine": 404,
                            "snippet": {
                              "text": "            return false;\n        }\n\n        private JsonSchema GetJsonSchemaForObject(string objectTypeName)\n        {\n            string jsonTypeName = GetJsonNameFor(objectTypeName);\n\n            // If _schema.Definitions does not contain the jsonTypeName, we are operating\n            // against the root sarifLog schema, which is what's stored in _schema\n            JsonSchema propertySchema = _schema.Definitions.ContainsKey(jsonTypeName) ? _schema.Definitions[jsonTypeName] : _schema;\n            return propertySchema;\n        }\n\n        private string GetJsonNameFor(string name)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: GetJsonSchemaForObject"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 393,
                  "endLine": 401
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "        srg.setSeed(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 67,
                            "snippet": {
                              "text": "        srg.setSeed(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 64,
                            "endLine": 70,
                            "snippet": {
                              "text": "            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "setSeed()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "        srg.setSeed(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 67,
                            "snippet": {
                              "text": "        srg.setSeed(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 64,
                            "endLine": 70,
                            "snippet": {
                              "text": "            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "setSeed()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method CaptureFile() in [SarifLogger.cs](1) ignores an exception on line [393](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 570
                },
                "region": {
                  "startLine": 393,
                  "snippet": {
                    "text": "                catch (ArgumentException) { } // Unrecognized encoding name"
                  }
                },
                "contextRegion": {
                  "startLine": 390,
                  "endLine": 396,
                  "snippet": {
                    "text": "                {\n                    encoding = Encoding.GetEncoding(_run.DefaultEncoding);\n                }\n                catch (ArgumentException) { } // Unrecognized encoding name\n            }\n\n            _run.GetFileIndex(\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 570
                          },
                          "region": {
                            "startLine": 393,
                            "snippet": {
                              "text": "                catch (ArgumentException) { } // Unrecognized encoding name"
                            }
                          },
                          "contextRegion": {
                            "startLine": 390,
                            "endLine": 396,
                            "snippet": {
                              "text": "                {\n                    encoding = Encoding.GetEncoding(_run.DefaultEncoding);\n                }\n                catch (ArgumentException) { } // Unrecognized encoding name\n            }\n\n            _run.GetFileIndex(\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 570
                },
                "region": {
                  "startLine": 393
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 10,
          "message": {
            "text": "The catch block at [ExportConfigurationCommandBase.cs](1) line [82](1) handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 824
                },
                "region": {
                  "startLine": 82,
                  "endLine": 84,
                  "snippet": {
                    "text": "            catch (Exception ex)\r\n            {\r\n                Console.Error.WriteLine(ex.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 87,
                  "snippet": {
                    "text": "\n                result = SUCCESS;\n            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 824
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 84,
                            "snippet": {
                              "text": "            catch (Exception ex)\r\n            {\r\n                Console.Error.WriteLine(ex.ToString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 79,
                            "endLine": 87,
                            "snippet": {
                              "text": "\n                result = SUCCESS;\n            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 824
                },
                "region": {
                  "startLine": 82,
                  "endLine": 84
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 798,
                  "endLine": 816,
                  "snippet": {
                    "text": "        private void Visit(ThreadFlow threadFlow, string threadFlowPointer)\r\n        {\r\n            Analyze(threadFlow, threadFlowPointer);\r\n\r\n            if (threadFlow.Message != null)\r\n            {\r\n                Visit(threadFlow.Message, threadFlowPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (threadFlow.Locations != null)\r\n            {\r\n                string threadFlowLocationsPointer = threadFlowPointer.AtProperty(SarifPropertyName.Locations);\r\n\r\n                for (int i = 0; i < threadFlow.Locations.Count; ++i)\r\n                {\r\n                    Visit(threadFlow.Locations[i], threadFlowLocationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 795,
                  "endLine": 819,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(ThreadFlow threadFlow, string threadFlowPointer)\n        {\n            Analyze(threadFlow, threadFlowPointer);\n\n            if (threadFlow.Message != null)\n            {\n                Visit(threadFlow.Message, threadFlowPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (threadFlow.Locations != null)\n            {\n                string threadFlowLocationsPointer = threadFlowPointer.AtProperty(SarifPropertyName.Locations);\n\n                for (int i = 0; i < threadFlow.Locations.Count; ++i)\n                {\n                    Visit(threadFlow.Locations[i], threadFlowLocationsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(ThreadFlowLocation threadFlowLocation, string threadFlowLocationPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 798,
                            "endLine": 816,
                            "snippet": {
                              "text": "        private void Visit(ThreadFlow threadFlow, string threadFlowPointer)\r\n        {\r\n            Analyze(threadFlow, threadFlowPointer);\r\n\r\n            if (threadFlow.Message != null)\r\n            {\r\n                Visit(threadFlow.Message, threadFlowPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (threadFlow.Locations != null)\r\n            {\r\n                string threadFlowLocationsPointer = threadFlowPointer.AtProperty(SarifPropertyName.Locations);\r\n\r\n                for (int i = 0; i < threadFlow.Locations.Count; ++i)\r\n                {\r\n                    Visit(threadFlow.Locations[i], threadFlowLocationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 795,
                            "endLine": 819,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(ThreadFlow threadFlow, string threadFlowPointer)\n        {\n            Analyze(threadFlow, threadFlowPointer);\n\n            if (threadFlow.Message != null)\n            {\n                Visit(threadFlow.Message, threadFlowPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (threadFlow.Locations != null)\n            {\n                string threadFlowLocationsPointer = threadFlowPointer.AtProperty(SarifPropertyName.Locations);\n\n                for (int i = 0; i < threadFlow.Locations.Count; ++i)\n                {\n                    Visit(threadFlow.Locations[i], threadFlowLocationsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(ThreadFlowLocation threadFlowLocation, string threadFlowLocationPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 798,
                  "endLine": 816
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 10,
          "message": {
            "text": "The catch block at [AnalyzeCommandBase.cs](1) line [604](1) handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 604,
                  "endLine": 607,
                  "snippet": {
                    "text": "                catch (Exception ex)\r\n                {\r\n                    Errors.LogUnhandledRuleExceptionAssessingTargetApplicability(disabledSkimmers, context, ex);\r\n                    continue;"
                  }
                },
                "contextRegion": {
                  "startLine": 601,
                  "endLine": 610,
                  "snippet": {
                    "text": "                {\n                    applicability = skimmer.CanAnalyze(context, out reasonForNotAnalyzing);\n                }\n                catch (Exception ex)\n                {\n                    Errors.LogUnhandledRuleExceptionAssessingTargetApplicability(disabledSkimmers, context, ex);\n                    continue;\n                }\n                finally\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 190
                          },
                          "region": {
                            "startLine": 604,
                            "endLine": 607,
                            "snippet": {
                              "text": "                catch (Exception ex)\r\n                {\r\n                    Errors.LogUnhandledRuleExceptionAssessingTargetApplicability(disabledSkimmers, context, ex);\r\n                    continue;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 601,
                            "endLine": 610,
                            "snippet": {
                              "text": "                {\n                    applicability = skimmer.CanAnalyze(context, out reasonForNotAnalyzing);\n                }\n                catch (Exception ex)\n                {\n                    Errors.LogUnhandledRuleExceptionAssessingTargetApplicability(disabledSkimmers, context, ex);\n                    continue;\n                }\n                finally\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 604,
                  "endLine": 607
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 26,
          "message": {
            "text": "The class Program contains debug code, which can create unintended entry points in a deployed web application.\r\nDebug code can create unintended entry points in a deployed web application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 26,
                  "endLine": 76,
                  "snippet": {
                    "text": "        public static void Main(string[] args)\r\n        {\r\n            if (args.Length < 2)\r\n            {\r\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\r\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\r\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\r\n\r\n                return;\r\n            }\r\n\r\n            try\r\n            {\r\n                string sarifFilePath = args[0];\r\n                string csvFilePath = args[1];\r\n                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\r\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\r\n\r\n                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");\r\n                Stopwatch w = Stopwatch.StartNew();\r\n\r\n                JsonSerializer serializer = new JsonSerializer();\r\n                serializer.ContractResolver = new SarifDeferredContractResolver();\r\n\r\n                using (CsvWriter writer = new CsvWriter(csvFilePath))\r\n                {\r\n                    writer.SetColumns(columnNames);\r\n\r\n                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\r\n                    if (Directory.Exists(sarifFilePath))\r\n                    {\r\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\r\n                        {\r\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        ConvertSarifLog(serializer, sarifFilePath, writer, selectedWriters);\r\n                    }\r\n\r\n                    Console.WriteLine();\r\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\r\n                }\r\n            }\r\n            catch (Exception ex) when (!Debugger.IsAttached)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine($\"Error: {ex}\");\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "endLine": 79,
                  "snippet": {
                    "text": "    /// </summary>\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            if (args.Length < 2)\n            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n                return;\n            }\n\n            try\n            {\n                string sarifFilePath = args[0];\n                string csvFilePath = args[1];\n                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\n\n                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");\n                Stopwatch w = Stopwatch.StartNew();\n\n                JsonSerializer serializer = new JsonSerializer();\n                serializer.ContractResolver = new SarifDeferredContractResolver();\n\n                using (CsvWriter writer = new CsvWriter(csvFilePath))\n                {\n                    writer.SetColumns(columnNames);\n\n                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\n                        }\n                    }\n                    else\n                    {\n                        ConvertSarifLog(serializer, sarifFilePath, writer, selectedWriters);\n                    }\n\n                    Console.WriteLine();\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\n                }\n            }\n            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n        public static void ConvertSarifLog(JsonSerializer serializer, string sarifFilePath, CsvWriter writer, IEnumerable<Action<WriteContext>> selectedWriters)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 76,
                            "snippet": {
                              "text": "        public static void Main(string[] args)\r\n        {\r\n            if (args.Length < 2)\r\n            {\r\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\r\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\r\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\r\n\r\n                return;\r\n            }\r\n\r\n            try\r\n            {\r\n                string sarifFilePath = args[0];\r\n                string csvFilePath = args[1];\r\n                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\r\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\r\n\r\n                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");\r\n                Stopwatch w = Stopwatch.StartNew();\r\n\r\n                JsonSerializer serializer = new JsonSerializer();\r\n                serializer.ContractResolver = new SarifDeferredContractResolver();\r\n\r\n                using (CsvWriter writer = new CsvWriter(csvFilePath))\r\n                {\r\n                    writer.SetColumns(columnNames);\r\n\r\n                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\r\n                    if (Directory.Exists(sarifFilePath))\r\n                    {\r\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\r\n                        {\r\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        ConvertSarifLog(serializer, sarifFilePath, writer, selectedWriters);\r\n                    }\r\n\r\n                    Console.WriteLine();\r\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\r\n                }\r\n            }\r\n            catch (Exception ex) when (!Debugger.IsAttached)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine($\"Error: {ex}\");\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 23,
                            "endLine": 79,
                            "snippet": {
                              "text": "    /// </summary>\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            if (args.Length < 2)\n            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n                return;\n            }\n\n            try\n            {\n                string sarifFilePath = args[0];\n                string csvFilePath = args[1];\n                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\n\n                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");\n                Stopwatch w = Stopwatch.StartNew();\n\n                JsonSerializer serializer = new JsonSerializer();\n                serializer.ContractResolver = new SarifDeferredContractResolver();\n\n                using (CsvWriter writer = new CsvWriter(csvFilePath))\n                {\n                    writer.SetColumns(columnNames);\n\n                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\n                        }\n                    }\n                    else\n                    {\n                        ConvertSarifLog(serializer, sarifFilePath, writer, selectedWriters);\n                    }\n\n                    Console.WriteLine();\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\n                }\n            }\n            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n        public static void ConvertSarifLog(JsonSerializer serializer, string sarifFilePath, CsvWriter writer, IEnumerable<Action<WriteContext>> selectedWriters)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Main"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 26,
                  "endLine": 76
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "The function Run() in [ExportRulesMetadataCommandBase.cs](1) reveals system data or debugging information by calling WriteLine() on line [57](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1089
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "                Console.Error.WriteLine(ex.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "endLine": 60,
                  "snippet": {
                    "text": "            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 85
                    },
                    {
                      "index": 86
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1089
                          },
                          "region": {
                            "startLine": 57,
                            "snippet": {
                              "text": "                Console.Error.WriteLine(ex.ToString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 54,
                            "endLine": 60,
                            "snippet": {
                              "text": "            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1089
                },
                "region": {
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextLong() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "            || mrg0.nextLong() != mrg1.nextLong()"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "endLine": 49,
                  "snippet": {
                    "text": "        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 46,
                            "snippet": {
                              "text": "            || mrg0.nextLong() != mrg1.nextLong()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 43,
                            "endLine": 49,
                            "snippet": {
                              "text": "        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextLong()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 40
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextLong() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "            || mrg0.nextLong() != mrg1.nextLong()"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "endLine": 49,
                  "snippet": {
                    "text": "        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 46,
                            "snippet": {
                              "text": "            || mrg0.nextLong() != mrg1.nextLong()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 43,
                            "endLine": 49,
                            "snippet": {
                              "text": "        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextLong()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 40
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 27,
          "message": {
            "text": "The call to ReadToEnd() at [PylintLogReader.cs](1) line [17](1) might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.\r\nAn attacker could cause the program to crash or otherwise become unavailable to legitimate users."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 913
                },
                "region": {
                  "startLine": 17,
                  "snippet": {
                    "text": "                pylintText = streamReader.ReadToEnd();"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "endLine": 20,
                  "snippet": {
                    "text": "\n            using (TextReader streamReader = new StreamReader(input))\n            {\n                pylintText = streamReader.ReadToEnd();\n            }\n\n            return JsonConvert.DeserializeObject<PylintLog>(pylintText);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 913
                          },
                          "region": {
                            "startLine": 17,
                            "snippet": {
                              "text": "                pylintText = streamReader.ReadToEnd();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 14,
                            "endLine": 20,
                            "snippet": {
                              "text": "\n            using (TextReader streamReader = new StreamReader(input))\n            {\n                pylintText = streamReader.ReadToEnd();\n            }\n\n            return JsonConvert.DeserializeObject<PylintLog>(pylintText);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "ReadToEnd()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 913
                },
                "region": {
                  "startLine": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 68,
                  "snippet": {
                    "text": "                Console.WriteLine(string.Format(CultureInfo.CurrentCulture,"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "endLine": 71,
                  "snippet": {
                    "text": "\n            if (Verbose)\n            {\n                Console.WriteLine(string.Format(CultureInfo.CurrentCulture,\n                    SdkResources.MSG001_AnalyzingTarget,\n                        context.TargetUri.GetFileName()));\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 68,
                            "snippet": {
                              "text": "                Console.WriteLine(string.Format(CultureInfo.CurrentCulture,"
                            }
                          },
                          "contextRegion": {
                            "startLine": 65,
                            "endLine": 71,
                            "snippet": {
                              "text": "\n            if (Verbose)\n            {\n                Console.WriteLine(string.Format(CultureInfo.CurrentCulture,\n                    SdkResources.MSG001_AnalyzingTarget,\n                        context.TargetUri.GetFileName()));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 68
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 366
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "endLine": 31,
                  "snippet": {
                    "text": "        {\n            Console.WriteLine();\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 366
                          },
                          "region": {
                            "startLine": 28,
                            "snippet": {
                              "text": "            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 25,
                            "endLine": 31,
                            "snippet": {
                              "text": "        {\n            Console.WriteLine();\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 366
                },
                "region": {
                  "startLine": 28
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "endLine": 41,
                  "snippet": {
                    "text": "            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 38,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 35,
                            "endLine": 41,
                            "snippet": {
                              "text": "            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "endLine": 41,
                  "snippet": {
                    "text": "            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 38,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 35,
                            "endLine": 41,
                            "snippet": {
                              "text": "            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 308,
                  "endLine": 316,
                  "snippet": {
                    "text": "        private void Visit(EdgeTraversal edgeTraversal, string edgeTraversalPointer)\r\n        {\r\n            Analyze(edgeTraversal, edgeTraversalPointer);\r\n\r\n            if (edgeTraversal.Message != null)\r\n            {\r\n                Visit(edgeTraversal.Message, edgeTraversalPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 305,
                  "endLine": 319,
                  "snippet": {
                    "text": "            Analyze(edge, edgePointer);\n        }\n\n        private void Visit(EdgeTraversal edgeTraversal, string edgeTraversalPointer)\n        {\n            Analyze(edgeTraversal, edgeTraversalPointer);\n\n            if (edgeTraversal.Message != null)\n            {\n                Visit(edgeTraversal.Message, edgeTraversalPointer.AtProperty(SarifPropertyName.Message));\n            }\n        }\n\n        private void Visit(Artifact fileData, string filePointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 308,
                            "endLine": 316,
                            "snippet": {
                              "text": "        private void Visit(EdgeTraversal edgeTraversal, string edgeTraversalPointer)\r\n        {\r\n            Analyze(edgeTraversal, edgeTraversalPointer);\r\n\r\n            if (edgeTraversal.Message != null)\r\n            {\r\n                Visit(edgeTraversal.Message, edgeTraversalPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 305,
                            "endLine": 319,
                            "snippet": {
                              "text": "            Analyze(edge, edgePointer);\n        }\n\n        private void Visit(EdgeTraversal edgeTraversal, string edgeTraversalPointer)\n        {\n            Analyze(edgeTraversal, edgeTraversalPointer);\n\n            if (edgeTraversal.Message != null)\n            {\n                Visit(edgeTraversal.Message, edgeTraversalPointer.AtProperty(SarifPropertyName.Message));\n            }\n        }\n\n        private void Visit(Artifact fileData, string filePointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 308,
                  "endLine": 316
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by random() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 22,
                  "snippet": {
                    "text": "        double rd = Math.random();"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "endLine": 25,
                  "snippet": {
                    "text": "        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 22,
                            "snippet": {
                              "text": "        double rd = Math.random();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 19,
                            "endLine": 25,
                            "snippet": {
                              "text": "        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "random()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 26
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by random() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 22,
                  "snippet": {
                    "text": "        double rd = Math.random();"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "endLine": 25,
                  "snippet": {
                    "text": "        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 22,
                            "snippet": {
                              "text": "        double rd = Math.random();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 19,
                            "endLine": 25,
                            "snippet": {
                              "text": "        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "random()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 26
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 522,
                  "endLine": 535,
                  "snippet": {
                    "text": "        private void Visit(PhysicalLocation physicalLocation, string physicalLocationPointer)\r\n        {\r\n            Analyze(physicalLocation, physicalLocationPointer);\r\n\r\n            if (physicalLocation.ArtifactLocation != null)\r\n            {\r\n                Visit(physicalLocation.ArtifactLocation, physicalLocationPointer.AtProperty(SarifPropertyName.ArtifactLocation));\r\n            }\r\n\r\n            if (physicalLocation.Region != null)\r\n            {\r\n                Visit(physicalLocation.Region, physicalLocationPointer.AtProperty(SarifPropertyName.Region));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 519,
                  "endLine": 538,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(PhysicalLocation physicalLocation, string physicalLocationPointer)\n        {\n            Analyze(physicalLocation, physicalLocationPointer);\n\n            if (physicalLocation.ArtifactLocation != null)\n            {\n                Visit(physicalLocation.ArtifactLocation, physicalLocationPointer.AtProperty(SarifPropertyName.ArtifactLocation));\n            }\n\n            if (physicalLocation.Region != null)\n            {\n                Visit(physicalLocation.Region, physicalLocationPointer.AtProperty(SarifPropertyName.Region));\n            }\n        }\n\n        private void Visit(Rectangle rectangle, string rectanglePointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 522,
                            "endLine": 535,
                            "snippet": {
                              "text": "        private void Visit(PhysicalLocation physicalLocation, string physicalLocationPointer)\r\n        {\r\n            Analyze(physicalLocation, physicalLocationPointer);\r\n\r\n            if (physicalLocation.ArtifactLocation != null)\r\n            {\r\n                Visit(physicalLocation.ArtifactLocation, physicalLocationPointer.AtProperty(SarifPropertyName.ArtifactLocation));\r\n            }\r\n\r\n            if (physicalLocation.Region != null)\r\n            {\r\n                Visit(physicalLocation.Region, physicalLocationPointer.AtProperty(SarifPropertyName.Region));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 519,
                            "endLine": 538,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(PhysicalLocation physicalLocation, string physicalLocationPointer)\n        {\n            Analyze(physicalLocation, physicalLocationPointer);\n\n            if (physicalLocation.ArtifactLocation != null)\n            {\n                Visit(physicalLocation.ArtifactLocation, physicalLocationPointer.AtProperty(SarifPropertyName.ArtifactLocation));\n            }\n\n            if (physicalLocation.Region != null)\n            {\n                Visit(physicalLocation.Region, physicalLocationPointer.AtProperty(SarifPropertyName.Region));\n            }\n        }\n\n        private void Visit(Rectangle rectangle, string rectanglePointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 522,
                  "endLine": 535
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextGaussian() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 49,
                  "snippet": {
                    "text": "            || mrg0.nextGaussian() != mrg1.nextGaussian()"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "endLine": 52,
                  "snippet": {
                    "text": "            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 49,
                            "snippet": {
                              "text": "            || mrg0.nextGaussian() != mrg1.nextGaussian()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 46,
                            "endLine": 52,
                            "snippet": {
                              "text": "            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextGaussian()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextGaussian() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 49,
                  "snippet": {
                    "text": "            || mrg0.nextGaussian() != mrg1.nextGaussian()"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "endLine": 52,
                  "snippet": {
                    "text": "            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 49,
                            "snippet": {
                              "text": "            || mrg0.nextGaussian() != mrg1.nextGaussian()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 46,
                            "endLine": 52,
                            "snippet": {
                              "text": "            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextGaussian()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 303,
                  "endLine": 306,
                  "snippet": {
                    "text": "        private void Visit(Edge edge, string edgePointer)\r\n        {\r\n            Analyze(edge, edgePointer);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 300,
                  "endLine": 309,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Edge edge, string edgePointer)\n        {\n            Analyze(edge, edgePointer);\n        }\n\n        private void Visit(EdgeTraversal edgeTraversal, string edgeTraversalPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 303,
                            "endLine": 306,
                            "snippet": {
                              "text": "        private void Visit(Edge edge, string edgePointer)\r\n        {\r\n            Analyze(edge, edgePointer);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 300,
                            "endLine": 309,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Edge edge, string edgePointer)\n        {\n            Analyze(edge, edgePointer);\n        }\n\n        private void Visit(EdgeTraversal edgeTraversal, string edgeTraversalPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 303,
                  "endLine": 306
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method LoadFromXml() in [PropertiesDictionary.cs](1) fails to enable validation before parsing XML on line [211](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 684
                },
                "region": {
                  "startLine": 211,
                  "snippet": {
                    "text": "            using (XmlReader reader = XmlReader.Create(stream, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 208,
                  "endLine": 214,
                  "snippet": {
                    "text": "                XmlResolver = null\n            };\n\n            using (XmlReader reader = XmlReader.Create(stream, settings))\n            {\n                if (reader.IsStartElement(PropertiesDictionaryExtensionMethods.PROPERTIES_ID))\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 684
                          },
                          "region": {
                            "startLine": 205,
                            "snippet": {
                              "text": "            var settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 202,
                            "endLine": 208,
                            "snippet": {
                              "text": "        \n        public void LoadFromXml(Stream stream)\n        {\n            var settings = new XmlReaderSettings\n            {\n                DtdProcessing = DtdProcessing.Ignore,\n                XmlResolver = null\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 684
                          },
                          "region": {
                            "startLine": 211,
                            "snippet": {
                              "text": "            using (XmlReader reader = XmlReader.Create(stream, settings))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 208,
                            "endLine": 214,
                            "snippet": {
                              "text": "                XmlResolver = null\n            };\n\n            using (XmlReader reader = XmlReader.Create(stream, settings))\n            {\n                if (reader.IsStartElement(PropertiesDictionaryExtensionMethods.PROPERTIES_ID))\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 684
                },
                "region": {
                  "startLine": 211
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_SchemaRegex is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 835
                },
                "region": {
                  "startLine": 24,
                  "snippet": {
                    "text": "        private static readonly Regex s_SchemaRegex = new Regex(SchemaPropertyPattern, RegexOptions.Compiled);"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "endLine": 27,
                  "snippet": {
                    "text": "        private static readonly Regex s_VersionRegex = new Regex(VersionPropertyPattern, RegexOptions.Compiled);\n\n        private const string SchemaPropertyPattern = @\"\"\"\\$schema\"\"\\s*:\\s*\"\"[^\"\"]+\"\"\";\n        private static readonly Regex s_SchemaRegex = new Regex(SchemaPropertyPattern, RegexOptions.Compiled);\n\n        private delegate bool ActionOnJObject(JObject jObject);\n        private const string ArrayIndicatorSymbol = \"[]\";\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 24,
                            "snippet": {
                              "text": "        private static readonly Regex s_SchemaRegex = new Regex(SchemaPropertyPattern, RegexOptions.Compiled);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 21,
                            "endLine": 27,
                            "snippet": {
                              "text": "        private static readonly Regex s_VersionRegex = new Regex(VersionPropertyPattern, RegexOptions.Compiled);\n\n        private const string SchemaPropertyPattern = @\"\"\"\\$schema\"\"\\s*:\\s*\"\"[^\"\"]+\"\"\";\n        private static readonly Regex s_SchemaRegex = new Regex(SchemaPropertyPattern, RegexOptions.Compiled);\n\n        private delegate bool ActionOnJObject(JObject jObject);\n        private const string ArrayIndicatorSymbol = \"[]\";\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_SchemaRegex"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 835
                },
                "region": {
                  "startLine": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by next() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 15,
                  "snippet": {
                    "text": "                return super.next(bits);"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "endLine": 18,
                  "snippet": {
                    "text": "            }\n\n            public int next(int bits) {\n                return super.next(bits);\n            }\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 15,
                            "snippet": {
                              "text": "                return super.next(bits);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 12,
                            "endLine": 18,
                            "snippet": {
                              "text": "            }\n\n            public int next(int bits) {\n                return super.next(bits);\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "next()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 30
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by next() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 15,
                  "snippet": {
                    "text": "                return super.next(bits);"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "endLine": 18,
                  "snippet": {
                    "text": "            }\n\n            public int next(int bits) {\n                return super.next(bits);\n            }\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 15,
                            "snippet": {
                              "text": "                return super.next(bits);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 12,
                            "endLine": 18,
                            "snippet": {
                              "text": "            }\n\n            public int next(int bits) {\n                return super.next(bits);\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "next()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 30
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 24,
                  "snippet": {
                    "text": "            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");"
                  }
                },
                "contextRegion": {
                  "startLine": 21,
                  "endLine": 27,
                  "snippet": {
                    "text": "            \n            SarifLog log = null;\n\n            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");\n\n            Measure(() =>\n            {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 877
                          },
                          "region": {
                            "startLine": 24,
                            "snippet": {
                              "text": "            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 21,
                            "endLine": 27,
                            "snippet": {
                              "text": "            \n            SarifLog log = null;\n\n            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");\n\n            Measure(() =>\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 0,
          "message": {
            "text": "Storing passwords or password details in plaintext anywhere in the system or system code may compromise system security in a way that cannot be easily remedied."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 892,
                  "snippet": {
                    "text": "            // <properties name=\"webforms-page\">OWASP.WebGoat.NET.ForgotPassword</properties>"
                  }
                },
                "contextRegion": {
                  "startLine": 889,
                  "endLine": 895,
                  "snippet": {
                    "text": "            // sql-injection : SQL Injection\n\n            // <properties name=\"platform\">ASP.NET Web Forms</properties>\n            // <properties name=\"webforms-page\">OWASP.WebGoat.NET.ForgotPassword</properties>\n            // <properties name=\"route-signature\">OWASP.WebGoat.NET.ForgotPassword</properties>\n\n            string untrustedData = BuildSourcesString(context.Sources);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 714
                          },
                          "region": {
                            "startLine": 892,
                            "snippet": {
                              "text": "            // <properties name=\"webforms-page\">OWASP.WebGoat.NET.ForgotPassword</properties>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 889,
                            "endLine": 895,
                            "snippet": {
                              "text": "            // sql-injection : SQL Injection\n\n            // <properties name=\"platform\">ASP.NET Web Forms</properties>\n            // <properties name=\"webforms-page\">OWASP.WebGoat.NET.ForgotPassword</properties>\n            // <properties name=\"route-signature\">OWASP.WebGoat.NET.ForgotPassword</properties>\n\n            string untrustedData = BuildSourcesString(context.Sources);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Comment"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 13
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 318,
                  "endLine": 326,
                  "snippet": {
                    "text": "        private void Visit(Artifact fileData, string filePointer)\r\n        {\r\n            Analyze(fileData, filePointer);\r\n\r\n            if (fileData.Location != null)\r\n            {\r\n                Visit(fileData.Location, filePointer.AtProperty(SarifPropertyName.Location));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 315,
                  "endLine": 329,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Artifact fileData, string filePointer)\n        {\n            Analyze(fileData, filePointer);\n\n            if (fileData.Location != null)\n            {\n                Visit(fileData.Location, filePointer.AtProperty(SarifPropertyName.Location));\n            }\n        }\n\n        private void Visit(ArtifactLocation fileLocation, string fileLocationPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 318,
                            "endLine": 326,
                            "snippet": {
                              "text": "        private void Visit(Artifact fileData, string filePointer)\r\n        {\r\n            Analyze(fileData, filePointer);\r\n\r\n            if (fileData.Location != null)\r\n            {\r\n                Visit(fileData.Location, filePointer.AtProperty(SarifPropertyName.Location));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 315,
                            "endLine": 329,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Artifact fileData, string filePointer)\n        {\n            Analyze(fileData, filePointer);\n\n            if (fileData.Location != null)\n            {\n                Visit(fileData.Location, filePointer.AtProperty(SarifPropertyName.Location));\n            }\n        }\n\n        private void Visit(ArtifactLocation fileLocation, string fileLocationPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 318,
                  "endLine": 326
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Complete_File_New_Lines_Only is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 117,
                  "snippet": {
                    "text": "        private readonly static Region s_Complete_File_New_Lines_Only = "
                  }
                },
                "contextRegion": {
                  "startLine": 114,
                  "endLine": 120,
                  "snippet": {
                    "text": "        private const string COMPLETE_FILE_CARRIAGE_RETURNS_ONLY = \"\\r\\r\\r12\\r345\\r\";\n        private const string FRAGMENT_CARRIAGE_RETURNS_ONLY = \"2\\r345\\r\";\n\n        private readonly static Region s_Complete_File_New_Lines_Only = \n            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE_NEW_LINES_ONLY },\n                           StartLine = 1, StartColumn = 1, EndLine = 4, EndColumn = 1, CharOffset = 0, CharLength = 12 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 117,
                            "snippet": {
                              "text": "        private readonly static Region s_Complete_File_New_Lines_Only = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 114,
                            "endLine": 120,
                            "snippet": {
                              "text": "        private const string COMPLETE_FILE_CARRIAGE_RETURNS_ONLY = \"\\r\\r\\r12\\r345\\r\";\n        private const string FRAGMENT_CARRIAGE_RETURNS_ONLY = \"2\\r345\\r\";\n\n        private readonly static Region s_Complete_File_New_Lines_Only = \n            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE_NEW_LINES_ONLY },\n                           StartLine = 1, StartColumn = 1, EndLine = 4, EndColumn = 1, CharOffset = 0, CharLength = 12 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Complete_File_New_Lines_Only"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 117
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "            System.err.println(Arrays.toString(seed));"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "endLine": 66,
                  "snippet": {
                    "text": "        srg.setSeed(seed);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 63,
                            "snippet": {
                              "text": "            System.err.println(Arrays.toString(seed));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 60,
                            "endLine": 66,
                            "snippet": {
                              "text": "        srg.setSeed(seed);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "            System.err.println(Arrays.toString(seed));"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "endLine": 66,
                  "snippet": {
                    "text": "        srg.setSeed(seed);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 63,
                            "snippet": {
                              "text": "            System.err.println(Arrays.toString(seed));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 60,
                            "endLine": 66,
                            "snippet": {
                              "text": "        srg.setSeed(seed);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method HasParameterlessConstructor() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 457,
                  "endLine": 460,
                  "snippet": {
                    "text": "        private bool HasParameterlessConstructor(Type propertyType)\r\n        {\r\n            return propertyType.GetConstructor(new Type[] { }) != null;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 454,
                  "endLine": 463,
                  "snippet": {
                    "text": "            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Dictionary<,>);\n        }\n\n        private bool HasParameterlessConstructor(Type propertyType)\n        {\n            return propertyType.GetConstructor(new Type[] { }) != null;\n        }\n\n        private string GetFormattedStringValue(string propertyFormatPattern)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 457,
                            "endLine": 460,
                            "snippet": {
                              "text": "        private bool HasParameterlessConstructor(Type propertyType)\r\n        {\r\n            return propertyType.GetConstructor(new Type[] { }) != null;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 454,
                            "endLine": 463,
                            "snippet": {
                              "text": "            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Dictionary<,>);\n        }\n\n        private bool HasParameterlessConstructor(Type propertyType)\n        {\n            return propertyType.GetConstructor(new Type[] { }) != null;\n        }\n\n        private string GetFormattedStringValue(string propertyFormatPattern)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: HasParameterlessConstructor"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 457,
                  "endLine": 460
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "            System.err.println(\"Not that secure and random!!!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "endLine": 68,
                  "snippet": {
                    "text": "        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 65,
                            "snippet": {
                              "text": "            System.err.println(\"Not that secure and random!!!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 62,
                            "endLine": 68,
                            "snippet": {
                              "text": "        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "            System.err.println(\"Not that secure and random!!!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "endLine": 68,
                  "snippet": {
                    "text": "        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 65,
                            "snippet": {
                              "text": "            System.err.println(\"Not that secure and random!!!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 62,
                            "endLine": 68,
                            "snippet": {
                              "text": "        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field ITEMTYPE_ID is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 168
                },
                "region": {
                  "startLine": 337,
                  "snippet": {
                    "text": "        private const string ITEMTYPE_ID = \"ItemType\";"
                  }
                },
                "contextRegion": {
                  "startLine": 334,
                  "endLine": 340,
                  "snippet": {
                    "text": "        private const string TYPE_ID = \"Type\";\n        private const string VALUE_ID = \"Value\";\n        private const string PROPERTY_ID = \"Property\";\n        private const string ITEMTYPE_ID = \"ItemType\";\n        private const string STRING_SET_ID = \"StringSet\";\n        private const string INTEGER_SET_ID = \"IntegerSet\";\n        internal const string PROPERTIES_ID = \"Properties\";\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 168
                          },
                          "region": {
                            "startLine": 337,
                            "snippet": {
                              "text": "        private const string ITEMTYPE_ID = \"ItemType\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 334,
                            "endLine": 340,
                            "snippet": {
                              "text": "        private const string TYPE_ID = \"Type\";\n        private const string VALUE_ID = \"Value\";\n        private const string PROPERTY_ID = \"Property\";\n        private const string ITEMTYPE_ID = \"ItemType\";\n        private const string STRING_SET_ID = \"StringSet\";\n        private const string INTEGER_SET_ID = \"IntegerSet\";\n        internal const string PROPERTIES_ID = \"Properties\";\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: ITEMTYPE_ID"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 168
                },
                "region": {
                  "startLine": 337
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 477,
                  "endLine": 480,
                  "snippet": {
                    "text": "        private void Visit(Message message, string messagePointer)\r\n        {\r\n            Analyze(message, messagePointer);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 474,
                  "endLine": 483,
                  "snippet": {
                    "text": "            Analyze(logicalLocation, logicalLocationPointer);\n        }\n\n        private void Visit(Message message, string messagePointer)\n        {\n            Analyze(message, messagePointer);\n        }\n\n        private void Visit(MultiformatMessageString multiformatMessageString, string multiformatMessageStringPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 477,
                            "endLine": 480,
                            "snippet": {
                              "text": "        private void Visit(Message message, string messagePointer)\r\n        {\r\n            Analyze(message, messagePointer);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 474,
                            "endLine": 483,
                            "snippet": {
                              "text": "            Analyze(logicalLocation, logicalLocationPointer);\n        }\n\n        private void Visit(Message message, string messagePointer)\n        {\n            Analyze(message, messagePointer);\n        }\n\n        private void Visit(MultiformatMessageString multiformatMessageString, string multiformatMessageStringPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 477,
                  "endLine": 480
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextGaussian() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 36,
                  "snippet": {
                    "text": "            || rg0.nextGaussian() != rg1.nextGaussian()"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "endLine": 39,
                  "snippet": {
                    "text": "            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 36,
                            "snippet": {
                              "text": "            || rg0.nextGaussian() != rg1.nextGaussian()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 39,
                            "snippet": {
                              "text": "            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextGaussian()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextGaussian() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 36,
                  "snippet": {
                    "text": "            || rg0.nextGaussian() != rg1.nextGaussian()"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "endLine": 39,
                  "snippet": {
                    "text": "            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 36,
                            "snippet": {
                              "text": "            || rg0.nextGaussian() != rg1.nextGaussian()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 39,
                            "snippet": {
                              "text": "            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextGaussian()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method VisitMessage() in [InsertOptionalDataVisitor.cs](1) can dereference a null pointer on line [185](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 346
                },
                "region": {
                  "startLine": 185,
                  "snippet": {
                    "text": "                        ? string.Format(CultureInfo.CurrentCulture, formatString.Text, node.Arguments.ToArray())"
                  }
                },
                "contextRegion": {
                  "startLine": 182,
                  "endLine": 188,
                  "snippet": {
                    "text": "                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)\n                {\n                    node.Text = node.Arguments?.Count > 0\n                        ? string.Format(CultureInfo.CurrentCulture, formatString.Text, node.Arguments.ToArray())\n                        : formatString?.Text;\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 166,
                            "snippet": {
                              "text": "            if ((node.Text == null || _dataToInsert.HasFlag(OptionallyEmittedData.OverwriteExistingData)) &&"
                            }
                          },
                          "contextRegion": {
                            "startLine": 163,
                            "endLine": 169,
                            "snippet": {
                              "text": "\n        public override Message VisitMessage(Message node)\n        {\n            if ((node.Text == null || _dataToInsert.HasFlag(OptionallyEmittedData.OverwriteExistingData)) &&\n                _dataToInsert.HasFlag(OptionallyEmittedData.FlattenedMessages))\n            {\n                MultiformatMessageString formatString = null;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 166,
                            "snippet": {
                              "text": "            if ((node.Text == null || _dataToInsert.HasFlag(OptionallyEmittedData.OverwriteExistingData)) &&"
                            }
                          },
                          "contextRegion": {
                            "startLine": 163,
                            "endLine": 169,
                            "snippet": {
                              "text": "\n        public override Message VisitMessage(Message node)\n        {\n            if ((node.Text == null || _dataToInsert.HasFlag(OptionallyEmittedData.OverwriteExistingData)) &&\n                _dataToInsert.HasFlag(OptionallyEmittedData.FlattenedMessages))\n            {\n                MultiformatMessageString formatString = null;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "goto"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 169,
                            "snippet": {
                              "text": "                MultiformatMessageString formatString = null;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 166,
                            "endLine": 172,
                            "snippet": {
                              "text": "            if ((node.Text == null || _dataToInsert.HasFlag(OptionallyEmittedData.OverwriteExistingData)) &&\n                _dataToInsert.HasFlag(OptionallyEmittedData.FlattenedMessages))\n            {\n                MultiformatMessageString formatString = null;\n                ReportingDescriptor rule = _ruleIndex != -1 ? _run.Tool.Driver.Rules[_ruleIndex] : null;\n            \n                if (rule != null &&\n"
                            }
                          }
                        },
                        "message": {
                          "text": "formatString = null : formatString is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 172,
                            "snippet": {
                              "text": "                if (rule != null &&"
                            }
                          },
                          "contextRegion": {
                            "startLine": 169,
                            "endLine": 175,
                            "snippet": {
                              "text": "                MultiformatMessageString formatString = null;\n                ReportingDescriptor rule = _ruleIndex != -1 ? _run.Tool.Driver.Rules[_ruleIndex] : null;\n            \n                if (rule != null &&\n                    rule.MessageStrings != null &&\n                    rule.MessageStrings.TryGetValue(node.Id, out formatString))\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 173,
                            "snippet": {
                              "text": "                    rule.MessageStrings != null &&"
                            }
                          },
                          "contextRegion": {
                            "startLine": 170,
                            "endLine": 176,
                            "snippet": {
                              "text": "                ReportingDescriptor rule = _ruleIndex != -1 ? _run.Tool.Driver.Rules[_ruleIndex] : null;\n            \n                if (rule != null &&\n                    rule.MessageStrings != null &&\n                    rule.MessageStrings.TryGetValue(node.Id, out formatString))\n                {\n                    node.Text = node.Arguments?.Count > 0 \n"
                            }
                          }
                        },
                        "message": {
                          "text": "goto"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 181,
                            "snippet": {
                              "text": "                if (node.Text == null &&"
                            }
                          },
                          "contextRegion": {
                            "startLine": 178,
                            "endLine": 184,
                            "snippet": {
                              "text": "                        : formatString?.Text;\n                }\n\n                if (node.Text == null &&\n                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)\n                {\n                    node.Text = node.Arguments?.Count > 0\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 182,
                            "snippet": {
                              "text": "                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 179,
                            "endLine": 185,
                            "snippet": {
                              "text": "                }\n\n                if (node.Text == null &&\n                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)\n                {\n                    node.Text = node.Arguments?.Count > 0\n                        ? string.Format(CultureInfo.CurrentCulture, formatString.Text, node.Arguments.ToArray())\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 182,
                            "snippet": {
                              "text": "                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 179,
                            "endLine": 185,
                            "snippet": {
                              "text": "                }\n\n                if (node.Text == null &&\n                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)\n                {\n                    node.Text = node.Arguments?.Count > 0\n                        ? string.Format(CultureInfo.CurrentCulture, formatString.Text, node.Arguments.ToArray())\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 182,
                            "snippet": {
                              "text": "                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 179,
                            "endLine": 185,
                            "snippet": {
                              "text": "                }\n\n                if (node.Text == null &&\n                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)\n                {\n                    node.Text = node.Arguments?.Count > 0\n                        ? string.Format(CultureInfo.CurrentCulture, formatString.Text, node.Arguments.ToArray())\n"
                            }
                          }
                        },
                        "message": {
                          "text": "goto"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 184,
                            "snippet": {
                              "text": "                    node.Text = node.Arguments?.Count > 0"
                            }
                          },
                          "contextRegion": {
                            "startLine": 181,
                            "endLine": 187,
                            "snippet": {
                              "text": "                if (node.Text == null &&\n                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)\n                {\n                    node.Text = node.Arguments?.Count > 0\n                        ? string.Format(CultureInfo.CurrentCulture, formatString.Text, node.Arguments.ToArray())\n                        : formatString?.Text;\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 185,
                            "snippet": {
                              "text": "                        ? string.Format(CultureInfo.CurrentCulture, formatString.Text, node.Arguments.ToArray())"
                            }
                          },
                          "contextRegion": {
                            "startLine": 182,
                            "endLine": 188,
                            "snippet": {
                              "text": "                    _run.Tool.Driver.GlobalMessageStrings?.TryGetValue(node.Id, out formatString) == true)\n                {\n                    node.Text = node.Arguments?.Count > 0\n                        ? string.Format(CultureInfo.CurrentCulture, formatString.Text, node.Arguments.ToArray())\n                        : formatString?.Text;\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "formatString.get_Text() : formatString is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 346
                },
                "region": {
                  "startLine": 185
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method CreateXmlReaderFromString() in [Utilities.cs](1) fails to enable validation before parsing XML on line [36](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 951
                },
                "region": {
                  "startLine": 36,
                  "snippet": {
                    "text": "            return CreateXmlReader(data, xmlSettings);"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "endLine": 39,
                  "snippet": {
                    "text": "                ConformanceLevel = ConformanceLevel.Fragment\n            };\n\n            return CreateXmlReader(data, xmlSettings);\n        }\n\n        public static XmlReader CreateWhitespaceSkippingXmlReaderFromString(string data)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 951
                          },
                          "region": {
                            "startLine": 29,
                            "snippet": {
                              "text": "            var xmlSettings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 26,
                            "endLine": 32,
                            "snippet": {
                              "text": "\n        public static XmlReader CreateXmlReaderFromString(string data)\n        {\n            var xmlSettings = new XmlReaderSettings\n            {\n                CloseInput = true,\n                DtdProcessing = DtdProcessing.Ignore,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "xmlSettings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 951
                          },
                          "region": {
                            "startLine": 36,
                            "snippet": {
                              "text": "            return CreateXmlReader(data, xmlSettings);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 39,
                            "snippet": {
                              "text": "                ConformanceLevel = ConformanceLevel.Fragment\n            };\n\n            return CreateXmlReader(data, xmlSettings);\n        }\n\n        public static XmlReader CreateWhitespaceSkippingXmlReaderFromString(string data)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CreateXmlReader(?, xmlSettings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function",
                        "return"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 951
                },
                "region": {
                  "startLine": 36
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Insertion_Beginning_Of_Text_File is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 59,
                  "snippet": {
                    "text": "        private readonly static Region s_Insertion_Beginning_Of_Text_File = "
                  }
                },
                "contextRegion": {
                  "startLine": 56,
                  "endLine": 62,
                  "snippet": {
                    "text": "            new Region() { Snippet = null,\n                           StartLine = 0, StartColumn = 0, EndLine = 0, EndColumn = 0, CharOffset = 0, CharLength = 0 };\n\n        private readonly static Region s_Insertion_Beginning_Of_Text_File = \n            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 1, StartColumn = 1, EndLine = 1, EndColumn = 1, CharOffset = 0, CharLength = 0 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 59,
                            "snippet": {
                              "text": "        private readonly static Region s_Insertion_Beginning_Of_Text_File = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 56,
                            "endLine": 62,
                            "snippet": {
                              "text": "            new Region() { Snippet = null,\n                           StartLine = 0, StartColumn = 0, EndLine = 0, EndColumn = 0, CharOffset = 0, CharLength = 0 };\n\n        private readonly static Region s_Insertion_Beginning_Of_Text_File = \n            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 1, StartColumn = 1, EndLine = 1, EndColumn = 1, CharOffset = 0, CharLength = 0 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Insertion_Beginning_Of_Text_File"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 59
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_testArray is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 455
                },
                "region": {
                  "startLine": 70,
                  "snippet": {
                    "text": "        private static readonly char[] s_testArray = \"  match   \".ToCharArray();"
                  }
                },
                "contextRegion": {
                  "startLine": 67,
                  "endLine": 73,
                  "snippet": {
                    "text": "            'E'.IsNewline().Should().BeFalse();\n        }\n\n        private static readonly char[] s_testArray = \"  match   \".ToCharArray();\n        // 0123456789\n\n        [Fact]\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 455
                          },
                          "region": {
                            "startLine": 70,
                            "snippet": {
                              "text": "        private static readonly char[] s_testArray = \"  match   \".ToCharArray();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 67,
                            "endLine": 73,
                            "snippet": {
                              "text": "            'E'.IsNewline().Should().BeFalse();\n        }\n\n        private static readonly char[] s_testArray = \"  match   \".ToCharArray();\n        // 0123456789\n\n        [Fact]\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_testArray"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 455
                },
                "region": {
                  "startLine": 70
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field environmentVariableReferenceRegEx is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 604
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "        private static readonly Regex environmentVariableReferenceRegEx = new Regex(@\"%(?<variable>\\w+)%\");"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "endLine": 35,
                  "snippet": {
                    "text": "\n        // This regex is only approximate (environment variable names can contain\n        // non-\"word\" characters), but good enough for these tests.\n        private static readonly Regex environmentVariableReferenceRegEx = new Regex(@\"%(?<variable>\\w+)%\");\n\n        public static IEnvironmentVariables MakeMockEnvironmentVariables(IDictionary<string, string> environmentVariableDictionary)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 604
                          },
                          "region": {
                            "startLine": 32,
                            "snippet": {
                              "text": "        private static readonly Regex environmentVariableReferenceRegEx = new Regex(@\"%(?<variable>\\w+)%\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 29,
                            "endLine": 35,
                            "snippet": {
                              "text": "\n        // This regex is only approximate (environment variable names can contain\n        // non-\"word\" characters), but good enough for these tests.\n        private static readonly Regex environmentVariableReferenceRegEx = new Regex(@\"%(?<variable>\\w+)%\");\n\n        public static IEnvironmentVariables MakeMockEnvironmentVariables(IDictionary<string, string> environmentVariableDictionary)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: environmentVariableReferenceRegEx"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 604
                },
                "region": {
                  "startLine": 32
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 502,
                  "endLine": 520,
                  "snippet": {
                    "text": "        private void Visit(Notification notification, string notificationPointer)\r\n        {\r\n            Analyze(notification, notificationPointer);\r\n\r\n            if (notification.Message != null)\r\n            {\r\n                Visit(notification.Message, notificationPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (notification.Locations != null)\r\n            {\r\n                string locationsPointer = notificationPointer.AtProperty(SarifPropertyName.Locations);\r\n\r\n                for (int i = 0; i < notification.Locations.Count; ++i)\r\n                {\r\n                    Visit(notification.Locations[i], locationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 499,
                  "endLine": 523,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Notification notification, string notificationPointer)\n        {\n            Analyze(notification, notificationPointer);\n\n            if (notification.Message != null)\n            {\n                Visit(notification.Message, notificationPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (notification.Locations != null)\n            {\n                string locationsPointer = notificationPointer.AtProperty(SarifPropertyName.Locations);\n\n                for (int i = 0; i < notification.Locations.Count; ++i)\n                {\n                    Visit(notification.Locations[i], locationsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(PhysicalLocation physicalLocation, string physicalLocationPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 502,
                            "endLine": 520,
                            "snippet": {
                              "text": "        private void Visit(Notification notification, string notificationPointer)\r\n        {\r\n            Analyze(notification, notificationPointer);\r\n\r\n            if (notification.Message != null)\r\n            {\r\n                Visit(notification.Message, notificationPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (notification.Locations != null)\r\n            {\r\n                string locationsPointer = notificationPointer.AtProperty(SarifPropertyName.Locations);\r\n\r\n                for (int i = 0; i < notification.Locations.Count; ++i)\r\n                {\r\n                    Visit(notification.Locations[i], locationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 499,
                            "endLine": 523,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Notification notification, string notificationPointer)\n        {\n            Analyze(notification, notificationPointer);\n\n            if (notification.Message != null)\n            {\n                Visit(notification.Message, notificationPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (notification.Locations != null)\n            {\n                string locationsPointer = notificationPointer.AtProperty(SarifPropertyName.Locations);\n\n                for (int i = 0; i < notification.Locations.Count; ++i)\n                {\n                    Visit(notification.Locations[i], locationsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(PhysicalLocation physicalLocation, string physicalLocationPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 502,
                  "endLine": 520
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method EnrichSarifLog() in [SarifConverterTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 231
                },
                "region": {
                  "startLine": 112,
                  "endLine": 132,
                  "snippet": {
                    "text": "        private static void EnrichSarifLog(string actualFilePath)\r\n        {\r\n            JsonSerializerSettings settings = new JsonSerializerSettings()\r\n            {\r\n                Formatting = Formatting.Indented,\r\n            };\r\n\r\n            string logText = File.ReadAllText(actualFilePath);\r\n\r\n            SarifLog actualLog = JsonConvert.DeserializeObject<SarifLog>(logText, settings);\r\n\r\n            OptionallyEmittedData dataToInsert =\r\n                OptionallyEmittedData.Hashes |\r\n                OptionallyEmittedData.RegionSnippets |\r\n                OptionallyEmittedData.ContextRegionSnippets |\r\n                OptionallyEmittedData.ComprehensiveRegionProperties;\r\n\r\n            SarifLog reformattedLog = new InsertOptionalDataVisitor(dataToInsert).VisitSarifLog(actualLog);\r\n\r\n            File.WriteAllText(actualFilePath, JsonConvert.SerializeObject(reformattedLog, settings));\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 109,
                  "endLine": 135,
                  "snippet": {
                    "text": "            sb.Length.Should().Be(0, FormatFailureReason(sb, tool));\n        }\n\n        private static void EnrichSarifLog(string actualFilePath)\n        {\n            JsonSerializerSettings settings = new JsonSerializerSettings()\n            {\n                Formatting = Formatting.Indented,\n            };\n\n            string logText = File.ReadAllText(actualFilePath);\n\n            SarifLog actualLog = JsonConvert.DeserializeObject<SarifLog>(logText, settings);\n\n            OptionallyEmittedData dataToInsert =\n                OptionallyEmittedData.Hashes |\n                OptionallyEmittedData.RegionSnippets |\n                OptionallyEmittedData.ContextRegionSnippets |\n                OptionallyEmittedData.ComprehensiveRegionProperties;\n\n            SarifLog reformattedLog = new InsertOptionalDataVisitor(dataToInsert).VisitSarifLog(actualLog);\n\n            File.WriteAllText(actualFilePath, JsonConvert.SerializeObject(reformattedLog, settings));\n        }\n\n        private static string FormatFailureReason(StringBuilder sb, string toolName)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 231
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 132,
                            "snippet": {
                              "text": "        private static void EnrichSarifLog(string actualFilePath)\r\n        {\r\n            JsonSerializerSettings settings = new JsonSerializerSettings()\r\n            {\r\n                Formatting = Formatting.Indented,\r\n            };\r\n\r\n            string logText = File.ReadAllText(actualFilePath);\r\n\r\n            SarifLog actualLog = JsonConvert.DeserializeObject<SarifLog>(logText, settings);\r\n\r\n            OptionallyEmittedData dataToInsert =\r\n                OptionallyEmittedData.Hashes |\r\n                OptionallyEmittedData.RegionSnippets |\r\n                OptionallyEmittedData.ContextRegionSnippets |\r\n                OptionallyEmittedData.ComprehensiveRegionProperties;\r\n\r\n            SarifLog reformattedLog = new InsertOptionalDataVisitor(dataToInsert).VisitSarifLog(actualLog);\r\n\r\n            File.WriteAllText(actualFilePath, JsonConvert.SerializeObject(reformattedLog, settings));\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 109,
                            "endLine": 135,
                            "snippet": {
                              "text": "            sb.Length.Should().Be(0, FormatFailureReason(sb, tool));\n        }\n\n        private static void EnrichSarifLog(string actualFilePath)\n        {\n            JsonSerializerSettings settings = new JsonSerializerSettings()\n            {\n                Formatting = Formatting.Indented,\n            };\n\n            string logText = File.ReadAllText(actualFilePath);\n\n            SarifLog actualLog = JsonConvert.DeserializeObject<SarifLog>(logText, settings);\n\n            OptionallyEmittedData dataToInsert =\n                OptionallyEmittedData.Hashes |\n                OptionallyEmittedData.RegionSnippets |\n                OptionallyEmittedData.ContextRegionSnippets |\n                OptionallyEmittedData.ComprehensiveRegionProperties;\n\n            SarifLog reformattedLog = new InsertOptionalDataVisitor(dataToInsert).VisitSarifLog(actualLog);\n\n            File.WriteAllText(actualFilePath, JsonConvert.SerializeObject(reformattedLog, settings));\n        }\n\n        private static string FormatFailureReason(StringBuilder sb, string toolName)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: EnrichSarifLog"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 231
                },
                "region": {
                  "startLine": 112,
                  "endLine": 132
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 41,
                  "snippet": {
                    "text": "        MyRandom mrg0 = new MyRandom(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "endLine": 44,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 41,
                            "snippet": {
                              "text": "        MyRandom mrg0 = new MyRandom(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 38,
                            "endLine": 44,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "1MyRandom()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 25
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 41,
                  "snippet": {
                    "text": "        MyRandom mrg0 = new MyRandom(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "endLine": 44,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 41,
                            "snippet": {
                              "text": "        MyRandom mrg0 = new MyRandom(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 38,
                            "endLine": 44,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "1MyRandom()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 25
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 7,
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) might reveal system data or debugging information by calling printStackTrace() on line [91](1). The information revealed by printStackTrace() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 91,
                  "snippet": {
                    "text": "            t.printStackTrace();"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "endLine": 94,
                  "snippet": {
                    "text": "            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 91,
                            "snippet": {
                              "text": "            t.printStackTrace();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 88,
                            "endLine": 94,
                            "snippet": {
                              "text": "            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "printStackTrace()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 15
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 7,
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) might reveal system data or debugging information by calling printStackTrace() on line [91](1). The information revealed by printStackTrace() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 91,
                  "snippet": {
                    "text": "            t.printStackTrace();"
                  }
                },
                "contextRegion": {
                  "startLine": 88,
                  "endLine": 94,
                  "snippet": {
                    "text": "            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 91,
                            "snippet": {
                              "text": "            t.printStackTrace();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 88,
                            "endLine": 94,
                            "snippet": {
                              "text": "            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "printStackTrace()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 15
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 11,
          "message": {
            "text": "An attacker is able to control one of the arguments to set_Position() at [RentalStream.cs](1) line [118](1), which can lead to a disruption of service or unexpected application behavior.\r\nAllowing external control of system settings can disrupt service or cause an application to behave in unexpected ways."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 505
                },
                "region": {
                  "startLine": 118,
                  "snippet": {
                    "text": "                _innerStream.Position = value;"
                  }
                },
                "contextRegion": {
                  "startLine": 115,
                  "endLine": 121,
                  "snippet": {
                    "text": "\n            set\n            {\n                _innerStream.Position = value;\n            }\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 17
                    },
                    {
                      "index": 18
                    },
                    {
                      "index": 19
                    },
                    {
                      "index": 20
                    },
                    {
                      "index": 21
                    },
                    {
                      "index": 22
                    },
                    {
                      "index": 23
                    },
                    {
                      "index": 24
                    },
                    {
                      "index": 25
                    },
                    {
                      "index": 26
                    },
                    {
                      "index": 27
                    },
                    {
                      "index": 28
                    },
                    {
                      "index": 29
                    },
                    {
                      "index": 30
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 505
                          },
                          "region": {
                            "startLine": 118,
                            "snippet": {
                              "text": "                _innerStream.Position = value;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 115,
                            "endLine": 121,
                            "snippet": {
                              "text": "\n            set\n            {\n                _innerStream.Position = value;\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "set_Position(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 17
                    },
                    {
                      "index": 18
                    },
                    {
                      "index": 19
                    },
                    {
                      "index": 20
                    },
                    {
                      "index": 21
                    },
                    {
                      "index": 22
                    },
                    {
                      "index": 23
                    },
                    {
                      "index": 24
                    },
                    {
                      "index": 25
                    },
                    {
                      "index": 26
                    },
                    {
                      "index": 27
                    },
                    {
                      "index": 28
                    },
                    {
                      "index": 29
                    },
                    {
                      "index": 30
                    },
                    {
                      "index": 87
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 505
                          },
                          "region": {
                            "startLine": 118,
                            "snippet": {
                              "text": "                _innerStream.Position = value;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 115,
                            "endLine": 121,
                            "snippet": {
                              "text": "\n            set\n            {\n                _innerStream.Position = value;\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "set_Position(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 17
                    },
                    {
                      "index": 18
                    },
                    {
                      "index": 19
                    },
                    {
                      "index": 20
                    },
                    {
                      "index": 21
                    },
                    {
                      "index": 22
                    },
                    {
                      "index": 23
                    },
                    {
                      "index": 24
                    },
                    {
                      "index": 25
                    },
                    {
                      "index": 26
                    },
                    {
                      "index": 27
                    },
                    {
                      "index": 28
                    },
                    {
                      "index": 29
                    },
                    {
                      "index": 30
                    },
                    {
                      "index": 87
                    },
                    {
                      "index": 87
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 505
                          },
                          "region": {
                            "startLine": 118,
                            "snippet": {
                              "text": "                _innerStream.Position = value;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 115,
                            "endLine": 121,
                            "snippet": {
                              "text": "\n            set\n            {\n                _innerStream.Position = value;\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "set_Position(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 17
                    },
                    {
                      "index": 18
                    },
                    {
                      "index": 19
                    },
                    {
                      "index": 20
                    },
                    {
                      "index": 21
                    },
                    {
                      "index": 22
                    },
                    {
                      "index": 23
                    },
                    {
                      "index": 24
                    },
                    {
                      "index": 25
                    },
                    {
                      "index": 26
                    },
                    {
                      "index": 27
                    },
                    {
                      "index": 28
                    },
                    {
                      "index": 29
                    },
                    {
                      "index": 30
                    },
                    {
                      "index": 87
                    },
                    {
                      "index": 87
                    },
                    {
                      "index": 87
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 505
                          },
                          "region": {
                            "startLine": 118,
                            "snippet": {
                              "text": "                _innerStream.Position = value;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 115,
                            "endLine": 121,
                            "snippet": {
                              "text": "\n            set\n            {\n                _innerStream.Position = value;\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "set_Position(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 505
                },
                "region": {
                  "startLine": 118
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "4.7999997"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method RemoveLineEndings() in [AssertionExtensions.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                },
                "region": {
                  "startLine": 36,
                  "endLine": 39,
                  "snippet": {
                    "text": "        private static string RemoveLineEndings(string input)\r\n        {\r\n            return Regex.Replace(input, @\"\\s+\", \"\");\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "endLine": 42,
                  "snippet": {
                    "text": "            return new AndConstraint<StringAssertions>(assertion);\n        }\n\n        private static string RemoveLineEndings(string input)\n        {\n            return Regex.Replace(input, @\"\\s+\", \"\");\n        }\n\n        public static AndConstraint<StringAssertions> BeCrossPlatformEquivalent<T>(\n            this StringAssertions assertion,\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 8
                          },
                          "region": {
                            "startLine": 36,
                            "endLine": 39,
                            "snippet": {
                              "text": "        private static string RemoveLineEndings(string input)\r\n        {\r\n            return Regex.Replace(input, @\"\\s+\", \"\");\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 42,
                            "snippet": {
                              "text": "            return new AndConstraint<StringAssertions>(assertion);\n        }\n\n        private static string RemoveLineEndings(string input)\n        {\n            return Regex.Replace(input, @\"\\s+\", \"\");\n        }\n\n        public static AndConstraint<StringAssertions> BeCrossPlatformEquivalent<T>(\n            this StringAssertions assertion,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: RemoveLineEndings"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 8
                },
                "region": {
                  "startLine": 36,
                  "endLine": 39
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method Convert() in [PREFastConverter.cs](1) fails to enable validation before parsing XML on line [39](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 435
                },
                "region": {
                  "startLine": 39,
                  "snippet": {
                    "text": "            using (var reader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 36,
                  "endLine": 42,
                  "snippet": {
                    "text": "\n            var serializer = new XmlSerializer(typeof(DefectList));\n\n            using (var reader = XmlReader.Create(input, settings))\n            {\n                var defectList = (DefectList)serializer.Deserialize(reader);\n                var results = new List<Result>();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 435
                          },
                          "region": {
                            "startLine": 25,
                            "snippet": {
                              "text": "            input = input ?? throw new ArgumentNullException(nameof(input));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 22,
                            "endLine": 28,
                            "snippet": {
                              "text": "\n        public override void Convert(Stream input, IResultLogWriter output, OptionallyEmittedData dataToInsert)\n        {\n            input = input ?? throw new ArgumentNullException(nameof(input));\n            output = output ?? throw new ArgumentNullException(nameof(output));\n\n            LogicalLocations.Clear();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 435
                          },
                          "region": {
                            "startLine": 26,
                            "snippet": {
                              "text": "            output = output ?? throw new ArgumentNullException(nameof(output));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 23,
                            "endLine": 29,
                            "snippet": {
                              "text": "        public override void Convert(Stream input, IResultLogWriter output, OptionallyEmittedData dataToInsert)\n        {\n            input = input ?? throw new ArgumentNullException(nameof(input));\n            output = output ?? throw new ArgumentNullException(nameof(output));\n\n            LogicalLocations.Clear();\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 435
                          },
                          "region": {
                            "startLine": 31,
                            "snippet": {
                              "text": "            XmlReaderSettings settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 28,
                            "endLine": 34,
                            "snippet": {
                              "text": "            LogicalLocations.Clear();\n\n\n            XmlReaderSettings settings = new XmlReaderSettings\n            {\n                DtdProcessing = DtdProcessing.Ignore,\n                XmlResolver = null\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 435
                          },
                          "region": {
                            "startLine": 39,
                            "snippet": {
                              "text": "            using (var reader = XmlReader.Create(input, settings))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 36,
                            "endLine": 42,
                            "snippet": {
                              "text": "\n            var serializer = new XmlSerializer(typeof(DefectList));\n\n            using (var reader = XmlReader.Create(input, settings))\n            {\n                var defectList = (DefectList)serializer.Deserialize(reader);\n                var results = new List<Result>();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 435
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 29,
          "message": {
            "text": "The call to GetFiles() on line [81](1) causes portability problems because it uses a hardcoded file separator.\r\nThe use of hardcoded file separators causes portability problems."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 81,
                  "snippet": {
                    "text": "            return Directory.GetFiles(path, searchPattern);"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "endLine": 84,
                  "snippet": {
                    "text": "        /// </returns>\n        public IEnumerable<string> GetFilesInDirectory(string path, string searchPattern)\n        {\n            return Directory.GetFiles(path, searchPattern);\n        }\n\n        /// <summary>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 88
                    },
                    {
                      "index": 89
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 70
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 81,
                            "snippet": {
                              "text": "            return Directory.GetFiles(path, searchPattern);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 78,
                            "endLine": 84,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetFilesInDirectory(string path, string searchPattern)\n        {\n            return Directory.GetFiles(path, searchPattern);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetFiles(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 88
                    },
                    {
                      "index": 89
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 70
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 81,
                            "snippet": {
                              "text": "            return Directory.GetFiles(path, searchPattern);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 78,
                            "endLine": 84,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetFilesInDirectory(string path, string searchPattern)\n        {\n            return Directory.GetFiles(path, searchPattern);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetFiles(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 88
                    },
                    {
                      "index": 89
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 70
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 81,
                            "snippet": {
                              "text": "            return Directory.GetFiles(path, searchPattern);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 78,
                            "endLine": 84,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetFilesInDirectory(string path, string searchPattern)\n        {\n            return Directory.GetFiles(path, searchPattern);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetFiles(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 81
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Indent() in [PageCommandTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 678
                },
                "region": {
                  "startLine": 149,
                  "endLine": 158,
                  "snippet": {
                    "text": "        private static void Indent(string sourceFilePath, string outputPath)\r\n        {\r\n            using (JsonTextReader reader = new JsonTextReader(new StreamReader(sourceFilePath)))\r\n            using (JsonTextWriter writer = new JsonTextWriter(File.CreateText(outputPath)))\r\n            {\r\n                writer.Formatting = Newtonsoft.Json.Formatting.Indented;\r\n                reader.Read();\r\n                writer.WriteToken(reader, true);\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 146,
                  "endLine": 161,
                  "snippet": {
                    "text": "            //Assert.Equal(expectedText, actualText);\n        }\n\n        private static void Indent(string sourceFilePath, string outputPath)\n        {\n            using (JsonTextReader reader = new JsonTextReader(new StreamReader(sourceFilePath)))\n            using (JsonTextWriter writer = new JsonTextWriter(File.CreateText(outputPath)))\n            {\n                writer.Formatting = Newtonsoft.Json.Formatting.Indented;\n                reader.Read();\n                writer.WriteToken(reader, true);\n            }\n        }\n\n        private static void PageManual(string sourceFilePath, string outputPath, int index, int count)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 678
                          },
                          "region": {
                            "startLine": 149,
                            "endLine": 158,
                            "snippet": {
                              "text": "        private static void Indent(string sourceFilePath, string outputPath)\r\n        {\r\n            using (JsonTextReader reader = new JsonTextReader(new StreamReader(sourceFilePath)))\r\n            using (JsonTextWriter writer = new JsonTextWriter(File.CreateText(outputPath)))\r\n            {\r\n                writer.Formatting = Newtonsoft.Json.Formatting.Indented;\r\n                reader.Read();\r\n                writer.WriteToken(reader, true);\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 146,
                            "endLine": 161,
                            "snippet": {
                              "text": "            //Assert.Equal(expectedText, actualText);\n        }\n\n        private static void Indent(string sourceFilePath, string outputPath)\n        {\n            using (JsonTextReader reader = new JsonTextReader(new StreamReader(sourceFilePath)))\n            using (JsonTextWriter writer = new JsonTextWriter(File.CreateText(outputPath)))\n            {\n                writer.Formatting = Newtonsoft.Json.Formatting.Indented;\n                reader.Read();\n                writer.WriteToken(reader, true);\n            }\n        }\n\n        private static void PageManual(string sourceFilePath, string outputPath, int index, int count)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Indent"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 678
                },
                "region": {
                  "startLine": 149,
                  "endLine": 158
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method FormatFailureReason() in [InsertOptionalDataVisitorTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 873
                },
                "region": {
                  "startLine": 429,
                  "endLine": 436,
                  "snippet": {
                    "text": "        private static string FormatFailureReason(string failureOutput)\r\n        {\r\n            string message = \"the rewritten file should matched the supplied SARIF. \";\r\n            message += failureOutput + Environment.NewLine;\r\n\r\n            message = \"If the actual output is expected, generate new baselines by setting s_rebaseline == true in the test code and rerunning.\";\r\n            return message;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 426,
                  "endLine": 439,
                  "snippet": {
                    "text": "            run.Artifacts[0].Contents.Text.Should().Be(File.ReadAllText(Path.Combine(testDirectory, inputFileName)));\n        }\n\n        private static string FormatFailureReason(string failureOutput)\n        {\n            string message = \"the rewritten file should matched the supplied SARIF. \";\n            message += failureOutput + Environment.NewLine;\n\n            message = \"If the actual output is expected, generate new baselines by setting s_rebaseline == true in the test code and rerunning.\";\n            return message;\n        }\n    \n        private string NormalizeOptionallyEmittedDataToString(OptionallyEmittedData optionallyEmittedData)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 873
                          },
                          "region": {
                            "startLine": 429,
                            "endLine": 436,
                            "snippet": {
                              "text": "        private static string FormatFailureReason(string failureOutput)\r\n        {\r\n            string message = \"the rewritten file should matched the supplied SARIF. \";\r\n            message += failureOutput + Environment.NewLine;\r\n\r\n            message = \"If the actual output is expected, generate new baselines by setting s_rebaseline == true in the test code and rerunning.\";\r\n            return message;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 426,
                            "endLine": 439,
                            "snippet": {
                              "text": "            run.Artifacts[0].Contents.Text.Should().Be(File.ReadAllText(Path.Combine(testDirectory, inputFileName)));\n        }\n\n        private static string FormatFailureReason(string failureOutput)\n        {\n            string message = \"the rewritten file should matched the supplied SARIF. \";\n            message += failureOutput + Environment.NewLine;\n\n            message = \"If the actual output is expected, generate new baselines by setting s_rebaseline == true in the test code and rerunning.\";\n            return message;\n        }\n    \n        private string NormalizeOptionallyEmittedDataToString(OptionallyEmittedData optionallyEmittedData)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: FormatFailureReason"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 873
                },
                "region": {
                  "startLine": 429,
                  "endLine": 436
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 90
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 90
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 90
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 90
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "        Random rg0 = new Random(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "endLine": 31,
                  "snippet": {
                    "text": "        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 28,
                            "snippet": {
                              "text": "        Random rg0 = new Random(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 25,
                            "endLine": 31,
                            "snippet": {
                              "text": "        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Random()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 22
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "        Random rg0 = new Random(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "endLine": 31,
                  "snippet": {
                    "text": "        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 28,
                            "snippet": {
                              "text": "        Random rg0 = new Random(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 25,
                            "endLine": 31,
                            "snippet": {
                              "text": "        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Random()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 22
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 116,
                  "snippet": {
                    "text": "                        Console.WriteLine(GetMessageText(uri, region, ruleId, message, kind, level));"
                  }
                },
                "contextRegion": {
                  "startLine": 113,
                  "endLine": 119,
                  "snippet": {
                    "text": "                {\n                    if (Verbose)\n                    {\n                        Console.WriteLine(GetMessageText(uri, region, ruleId, message, kind, level));\n                    }\n                    break;\n                }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 116,
                            "snippet": {
                              "text": "                        Console.WriteLine(GetMessageText(uri, region, ruleId, message, kind, level));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 113,
                            "endLine": 119,
                            "snippet": {
                              "text": "                {\n                    if (Verbose)\n                    {\n                        Console.WriteLine(GetMessageText(uri, region, ruleId, message, kind, level));\n                    }\n                    break;\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 116
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 125,
                  "snippet": {
                    "text": "                    Console.WriteLine(GetMessageText(uri, region, ruleId, message, kind, level));"
                  }
                },
                "contextRegion": {
                  "startLine": 122,
                  "endLine": 128,
                  "snippet": {
                    "text": "                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                {\n                    Console.WriteLine(GetMessageText(uri, region, ruleId, message, kind, level));\n                    break;\n                }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 125,
                            "snippet": {
                              "text": "                    Console.WriteLine(GetMessageText(uri, region, ruleId, message, kind, level));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 122,
                            "endLine": 128,
                            "snippet": {
                              "text": "                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                {\n                    Console.WriteLine(GetMessageText(uri, region, ruleId, message, kind, level));\n                    break;\n                }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 125
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 94
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 94
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 94
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 94
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 94
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 94
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable!!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "endLine": 54,
                  "snippet": {
                    "text": "            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n\n        byte[] seed = SecureRandom.getSeed(13);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 51,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable!!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 48,
                            "endLine": 54,
                            "snippet": {
                              "text": "            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n\n        byte[] seed = SecureRandom.getSeed(13);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 51,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable!!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 48,
                  "endLine": 54,
                  "snippet": {
                    "text": "            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n\n        byte[] seed = SecureRandom.getSeed(13);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 51,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable!!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 48,
                            "endLine": 54,
                            "snippet": {
                              "text": "            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n\n        byte[] seed = SecureRandom.getSeed(13);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method ConstructTestOutputFromInputResource() in [InsertOptionalDataVisitorTests.cs](1) can dereference a null pointer on line [41](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 873
                },
                "region": {
                  "startLine": 41,
                  "snippet": {
                    "text": "            currentDirectory = currentDirectory.Substring(0, currentDirectory.IndexOf(@\"\\bld\\\"));"
                  }
                },
                "contextRegion": {
                  "startLine": 38,
                  "endLine": 44,
                  "snippet": {
                    "text": "\n            // This code rewrites the log persisted URI to match the test environment\n            string currentDirectory = Environment.CurrentDirectory;\n            currentDirectory = currentDirectory.Substring(0, currentDirectory.IndexOf(@\"\\bld\\\"));\n            uriString = uriString.Replace(\"REPLACED_AT_TEST_RUNTIME\", currentDirectory);\n\n            actualLog.Runs[0].OriginalUriBaseIds[\"TESTROOT\"] = new ArtifactLocation { Uri = new Uri(uriString, UriKind.Absolute) };\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 873
                          },
                          "region": {
                            "startLine": 41,
                            "snippet": {
                              "text": "            currentDirectory = currentDirectory.Substring(0, currentDirectory.IndexOf(@\"\\bld\\\"));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 38,
                            "endLine": 44,
                            "snippet": {
                              "text": "\n            // This code rewrites the log persisted URI to match the test environment\n            string currentDirectory = Environment.CurrentDirectory;\n            currentDirectory = currentDirectory.Substring(0, currentDirectory.IndexOf(@\"\\bld\\\"));\n            uriString = uriString.Replace(\"REPLACED_AT_TEST_RUNTIME\", currentDirectory);\n\n            actualLog.Runs[0].OriginalUriBaseIds[\"TESTROOT\"] = new ArtifactLocation { Uri = new Uri(uriString, UriKind.Absolute) };\n"
                            }
                          }
                        },
                        "message": {
                          "text": "0 : <inline expression> is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 873
                          },
                          "region": {
                            "startLine": 41,
                            "snippet": {
                              "text": "            currentDirectory = currentDirectory.Substring(0, currentDirectory.IndexOf(@\"\\bld\\\"));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 38,
                            "endLine": 44,
                            "snippet": {
                              "text": "\n            // This code rewrites the log persisted URI to match the test environment\n            string currentDirectory = Environment.CurrentDirectory;\n            currentDirectory = currentDirectory.Substring(0, currentDirectory.IndexOf(@\"\\bld\\\"));\n            uriString = uriString.Replace(\"REPLACED_AT_TEST_RUNTIME\", currentDirectory);\n\n            actualLog.Runs[0].OriginalUriBaseIds[\"TESTROOT\"] = new ArtifactLocation { Uri = new Uri(uriString, UriKind.Absolute) };\n"
                            }
                          }
                        },
                        "message": {
                          "text": "0.Substring(...) : <inline expression> is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 873
                },
                "region": {
                  "startLine": 41
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method DisposeImplementation() in [TempFile.cs](1) ignores an exception on line [90](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 239
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "            catch (DirectoryNotFoundException)"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "endLine": 93,
                  "snippet": {
                    "text": "            {\n                File.Delete(this.Name);\n            }\n            catch (DirectoryNotFoundException)\n            {\n                // Not found; doesn't matter because this delete is best-effort.\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 239
                          },
                          "region": {
                            "startLine": 90,
                            "snippet": {
                              "text": "            catch (DirectoryNotFoundException)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 87,
                            "endLine": 93,
                            "snippet": {
                              "text": "            {\n                File.Delete(this.Name);\n            }\n            catch (DirectoryNotFoundException)\n            {\n                // Not found; doesn't matter because this delete is best-effort.\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 239
                },
                "region": {
                  "startLine": 90
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method DisposeImplementation() in [TempFile.cs](1) ignores an exception on line [94](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 239
                },
                "region": {
                  "startLine": 94,
                  "snippet": {
                    "text": "            catch (IOException)"
                  }
                },
                "contextRegion": {
                  "startLine": 91,
                  "endLine": 97,
                  "snippet": {
                    "text": "            {\n                // Not found; doesn't matter because this delete is best-effort.\n            }\n            catch (IOException)\n            {\n                // Lock violation; doesn't matter because this delete is best-effort.\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 239
                          },
                          "region": {
                            "startLine": 94,
                            "snippet": {
                              "text": "            catch (IOException)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 91,
                            "endLine": 97,
                            "snippet": {
                              "text": "            {\n                // Not found; doesn't matter because this delete is best-effort.\n            }\n            catch (IOException)\n            {\n                // Lock violation; doesn't matter because this delete is best-effort.\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 239
                },
                "region": {
                  "startLine": 94
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method DisposeImplementation() in [TempFile.cs](1) ignores an exception on line [98](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 239
                },
                "region": {
                  "startLine": 98,
                  "snippet": {
                    "text": "            catch (SecurityException)"
                  }
                },
                "contextRegion": {
                  "startLine": 95,
                  "endLine": 101,
                  "snippet": {
                    "text": "            {\n                // Lock violation; doesn't matter because this delete is best-effort.\n            }\n            catch (SecurityException)\n            {\n                // Other access issue; doesn't matter because this delete is best-effort.\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 239
                          },
                          "region": {
                            "startLine": 98,
                            "snippet": {
                              "text": "            catch (SecurityException)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 95,
                            "endLine": 101,
                            "snippet": {
                              "text": "            {\n                // Lock violation; doesn't matter because this delete is best-effort.\n            }\n            catch (SecurityException)\n            {\n                // Other access issue; doesn't matter because this delete is best-effort.\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 239
                },
                "region": {
                  "startLine": 98
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method DisposeImplementation() in [TempFile.cs](1) ignores an exception on line [102](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 239
                },
                "region": {
                  "startLine": 102,
                  "snippet": {
                    "text": "            catch (UnauthorizedAccessException)"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "endLine": 105,
                  "snippet": {
                    "text": "            {\n                // Other access issue; doesn't matter because this delete is best-effort.\n            }\n            catch (UnauthorizedAccessException)\n            {\n                // Access denied; doesn't matter because this delete is best-effort.\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 239
                          },
                          "region": {
                            "startLine": 102,
                            "snippet": {
                              "text": "            catch (UnauthorizedAccessException)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 99,
                            "endLine": 105,
                            "snippet": {
                              "text": "            {\n                // Other access issue; doesn't matter because this delete is best-effort.\n            }\n            catch (UnauthorizedAccessException)\n            {\n                // Access denied; doesn't matter because this delete is best-effort.\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 239
                },
                "region": {
                  "startLine": 102
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 37,
          "message": {
            "text": "Attackers are able to control the file system path argument to GetFiles() at [Program.cs](1) line [57](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "endLine": 60,
                  "snippet": {
                    "text": "                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\n                        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 64
                    },
                    {
                      "index": 97
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 57,
                            "snippet": {
                              "text": "                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 54,
                            "endLine": 60,
                            "snippet": {
                              "text": "                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\n                        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetFiles(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 37,
          "message": {
            "text": "Attackers are able to control the file system path argument to GetFiles() at [Program.cs](1) line [57](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "endLine": 60,
                  "snippet": {
                    "text": "                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\n                        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 64
                    },
                    {
                      "index": 97
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 57,
                            "snippet": {
                              "text": "                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 54,
                            "endLine": 60,
                            "snippet": {
                              "text": "                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\n                        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetFiles(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 98
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 98
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 98
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 98
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 98
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 98
                    },
                    {
                      "index": 83
                    },
                    {
                      "index": 84
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function init^() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 11,
                  "snippet": {
                    "text": "                super(seed);"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "endLine": 14,
                  "snippet": {
                    "text": "    public static void main(String[] args) {\n        class MyRandom extends Random {\n            public MyRandom(long seed) {\n                super(seed);\n            }\n\n            public int next(int bits) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 11,
                            "snippet": {
                              "text": "                super(seed);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 8,
                            "endLine": 14,
                            "snippet": {
                              "text": "    public static void main(String[] args) {\n        class MyRandom extends Random {\n            public MyRandom(long seed) {\n                super(seed);\n            }\n\n            public int next(int bits) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Random()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method HugeFileCompare() in [PageCommandTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 678
                },
                "region": {
                  "startLine": 124,
                  "endLine": 147,
                  "snippet": {
                    "text": "        private static void HugeFileCompare(string sourceFilePath, int index, int count)\r\n        {\r\n            string expectPath = Path.ChangeExtension(sourceFilePath, \".Paged.Expect.sarif\");\r\n            string actualPath = Path.ChangeExtension(sourceFilePath, \".Paged.Actual.sarif\");\r\n            string actualUnindentedPath = Path.ChangeExtension(sourceFilePath, \".Paged.Actual.Unformatted.sarif\");\r\n\r\n            // Page with the Command\r\n            PageCommand command = new PageCommand();\r\n            command.RunWithoutCatch(new PageOptions() { InputFilePath = sourceFilePath, OutputFilePath = actualUnindentedPath, Index = index, Count = count });\r\n\r\n            // Indent the Paged output\r\n            Indent(actualUnindentedPath, actualPath);\r\n\r\n            // Page with JsonTextReader/Writer\r\n            PageManual(sourceFilePath, expectPath, index, count);\r\n\r\n            // Compare files\r\n            string actualText = File.ReadAllText(actualPath);\r\n            string expectedText = File.ReadAllText(expectPath);\r\n            string diffCommand = $\"windiff \\\"{Path.GetFullPath(expectPath)}\\\" \\\"{Path.GetFullPath(actualPath)}\\\"\";\r\n\r\n            Assert.True(actualText == expectedText, $\"Sarif Page result ({index}, {count}) didn't match.\\r\\nSee: {diffCommand}\");\r\n            //Assert.Equal(expectedText, actualText);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 121,
                  "endLine": 150,
                  "snippet": {
                    "text": "        //}\n\n        // Use for manual verification of files over 2GB and other real life examples which can't be checked in.\n        private static void HugeFileCompare(string sourceFilePath, int index, int count)\n        {\n            string expectPath = Path.ChangeExtension(sourceFilePath, \".Paged.Expect.sarif\");\n            string actualPath = Path.ChangeExtension(sourceFilePath, \".Paged.Actual.sarif\");\n            string actualUnindentedPath = Path.ChangeExtension(sourceFilePath, \".Paged.Actual.Unformatted.sarif\");\n\n            // Page with the Command\n            PageCommand command = new PageCommand();\n            command.RunWithoutCatch(new PageOptions() { InputFilePath = sourceFilePath, OutputFilePath = actualUnindentedPath, Index = index, Count = count });\n\n            // Indent the Paged output\n            Indent(actualUnindentedPath, actualPath);\n\n            // Page with JsonTextReader/Writer\n            PageManual(sourceFilePath, expectPath, index, count);\n\n            // Compare files\n            string actualText = File.ReadAllText(actualPath);\n            string expectedText = File.ReadAllText(expectPath);\n            string diffCommand = $\"windiff \\\"{Path.GetFullPath(expectPath)}\\\" \\\"{Path.GetFullPath(actualPath)}\\\"\";\n\n            Assert.True(actualText == expectedText, $\"Sarif Page result ({index}, {count}) didn't match.\\r\\nSee: {diffCommand}\");\n            //Assert.Equal(expectedText, actualText);\n        }\n\n        private static void Indent(string sourceFilePath, string outputPath)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 678
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 147,
                            "snippet": {
                              "text": "        private static void HugeFileCompare(string sourceFilePath, int index, int count)\r\n        {\r\n            string expectPath = Path.ChangeExtension(sourceFilePath, \".Paged.Expect.sarif\");\r\n            string actualPath = Path.ChangeExtension(sourceFilePath, \".Paged.Actual.sarif\");\r\n            string actualUnindentedPath = Path.ChangeExtension(sourceFilePath, \".Paged.Actual.Unformatted.sarif\");\r\n\r\n            // Page with the Command\r\n            PageCommand command = new PageCommand();\r\n            command.RunWithoutCatch(new PageOptions() { InputFilePath = sourceFilePath, OutputFilePath = actualUnindentedPath, Index = index, Count = count });\r\n\r\n            // Indent the Paged output\r\n            Indent(actualUnindentedPath, actualPath);\r\n\r\n            // Page with JsonTextReader/Writer\r\n            PageManual(sourceFilePath, expectPath, index, count);\r\n\r\n            // Compare files\r\n            string actualText = File.ReadAllText(actualPath);\r\n            string expectedText = File.ReadAllText(expectPath);\r\n            string diffCommand = $\"windiff \\\"{Path.GetFullPath(expectPath)}\\\" \\\"{Path.GetFullPath(actualPath)}\\\"\";\r\n\r\n            Assert.True(actualText == expectedText, $\"Sarif Page result ({index}, {count}) didn't match.\\r\\nSee: {diffCommand}\");\r\n            //Assert.Equal(expectedText, actualText);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 121,
                            "endLine": 150,
                            "snippet": {
                              "text": "        //}\n\n        // Use for manual verification of files over 2GB and other real life examples which can't be checked in.\n        private static void HugeFileCompare(string sourceFilePath, int index, int count)\n        {\n            string expectPath = Path.ChangeExtension(sourceFilePath, \".Paged.Expect.sarif\");\n            string actualPath = Path.ChangeExtension(sourceFilePath, \".Paged.Actual.sarif\");\n            string actualUnindentedPath = Path.ChangeExtension(sourceFilePath, \".Paged.Actual.Unformatted.sarif\");\n\n            // Page with the Command\n            PageCommand command = new PageCommand();\n            command.RunWithoutCatch(new PageOptions() { InputFilePath = sourceFilePath, OutputFilePath = actualUnindentedPath, Index = index, Count = count });\n\n            // Indent the Paged output\n            Indent(actualUnindentedPath, actualPath);\n\n            // Page with JsonTextReader/Writer\n            PageManual(sourceFilePath, expectPath, index, count);\n\n            // Compare files\n            string actualText = File.ReadAllText(actualPath);\n            string expectedText = File.ReadAllText(expectPath);\n            string diffCommand = $\"windiff \\\"{Path.GetFullPath(expectPath)}\\\" \\\"{Path.GetFullPath(actualPath)}\\\"\";\n\n            Assert.True(actualText == expectedText, $\"Sarif Page result ({index}, {count}) didn't match.\\r\\nSee: {diffCommand}\");\n            //Assert.Equal(expectedText, actualText);\n        }\n\n        private static void Indent(string sourceFilePath, string outputPath)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: HugeFileCompare"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 678
                },
                "region": {
                  "startLine": 124,
                  "endLine": 147
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 25,
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 35,
                  "snippet": {
                    "text": "                        using (var sha1Cng = SHA1.Create())"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "endLine": 38,
                  "snippet": {
                    "text": "                        stream.Seek(0, SeekOrigin.Begin);\n                        bufferedStream.Seek(0, SeekOrigin.Begin);\n\n                        using (var sha1Cng = SHA1.Create())\n                        {\n                            checksum = sha1Cng.ComputeHash(bufferedStream);\n                            sha1 = BitConverter.ToString(checksum).Replace(\"-\", string.Empty);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 35,
                            "snippet": {
                              "text": "                        using (var sha1Cng = SHA1.Create())"
                            }
                          },
                          "contextRegion": {
                            "startLine": 32,
                            "endLine": 38,
                            "snippet": {
                              "text": "                        stream.Seek(0, SeekOrigin.Begin);\n                        bufferedStream.Seek(0, SeekOrigin.Begin);\n\n                        using (var sha1Cng = SHA1.Create())\n                        {\n                            checksum = sha1Cng.ComputeHash(bufferedStream);\n                            sha1 = BitConverter.ToString(checksum).Replace(\"-\", string.Empty);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 35
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method CreateEmptyDictionary() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 435,
                  "endLine": 445,
                  "snippet": {
                    "text": "        private object CreateEmptyDictionary(Type propertyType)\r\n        {\r\n            // The SARIF OM defines various properties as IDictionary<string, T>. This abstract\r\n            // type cannot be instantiated directly. We will construct an instance of the \r\n            // concrete Dictionary<string, T> class, using the generic type argument from the OM.\r\n            // These constructed types are creatable via a parameterless constructor\r\n            // (which is what is ultimately invoked by Activator.CreateInstance).\r\n            var listType = typeof(Dictionary<,>);\r\n            var constructedType = listType.MakeGenericType(propertyType.GenericTypeArguments[0], propertyType.GenericTypeArguments[1]);\r\n            return Activator.CreateInstance(constructedType);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 432,
                  "endLine": 448,
                  "snippet": {
                    "text": "            return Activator.CreateInstance(constructedType);\n        }\n\n        private object CreateEmptyDictionary(Type propertyType)\n        {\n            // The SARIF OM defines various properties as IDictionary<string, T>. This abstract\n            // type cannot be instantiated directly. We will construct an instance of the \n            // concrete Dictionary<string, T> class, using the generic type argument from the OM.\n            // These constructed types are creatable via a parameterless constructor\n            // (which is what is ultimately invoked by Activator.CreateInstance).\n            var listType = typeof(Dictionary<,>);\n            var constructedType = listType.MakeGenericType(propertyType.GenericTypeArguments[0], propertyType.GenericTypeArguments[1]);\n            return Activator.CreateInstance(constructedType);\n        }\n\n        private static bool IsList(Type propertyType)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 435,
                            "endLine": 445,
                            "snippet": {
                              "text": "        private object CreateEmptyDictionary(Type propertyType)\r\n        {\r\n            // The SARIF OM defines various properties as IDictionary<string, T>. This abstract\r\n            // type cannot be instantiated directly. We will construct an instance of the \r\n            // concrete Dictionary<string, T> class, using the generic type argument from the OM.\r\n            // These constructed types are creatable via a parameterless constructor\r\n            // (which is what is ultimately invoked by Activator.CreateInstance).\r\n            var listType = typeof(Dictionary<,>);\r\n            var constructedType = listType.MakeGenericType(propertyType.GenericTypeArguments[0], propertyType.GenericTypeArguments[1]);\r\n            return Activator.CreateInstance(constructedType);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 432,
                            "endLine": 448,
                            "snippet": {
                              "text": "            return Activator.CreateInstance(constructedType);\n        }\n\n        private object CreateEmptyDictionary(Type propertyType)\n        {\n            // The SARIF OM defines various properties as IDictionary<string, T>. This abstract\n            // type cannot be instantiated directly. We will construct an instance of the \n            // concrete Dictionary<string, T> class, using the generic type argument from the OM.\n            // These constructed types are creatable via a parameterless constructor\n            // (which is what is ultimately invoked by Activator.CreateInstance).\n            var listType = typeof(Dictionary<,>);\n            var constructedType = listType.MakeGenericType(propertyType.GenericTypeArguments[0], propertyType.GenericTypeArguments[1]);\n            return Activator.CreateInstance(constructedType);\n        }\n\n        private static bool IsList(Type propertyType)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: CreateEmptyDictionary"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 435,
                  "endLine": 445
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method VisitArtifact() in [InsertOptionalDataVisitor.cs](1) ignores an exception on line [140](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 346
                },
                "region": {
                  "startLine": 140,
                  "snippet": {
                    "text": "                            catch (ArgumentException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 137,
                  "endLine": 143,
                  "snippet": {
                    "text": "                            {\n                                encoding = Encoding.GetEncoding(encodingText);\n                            }\n                            catch (ArgumentException) { }\n                        }\n\n                        int length = node.Length;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 346
                          },
                          "region": {
                            "startLine": 140,
                            "snippet": {
                              "text": "                            catch (ArgumentException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 137,
                            "endLine": 143,
                            "snippet": {
                              "text": "                            {\n                                encoding = Encoding.GetEncoding(encodingText);\n                            }\n                            catch (ArgumentException) { }\n                        }\n\n                        int length = node.Length;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 346
                },
                "region": {
                  "startLine": 140
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 824
                },
                "region": {
                  "startLine": 78,
                  "snippet": {
                    "text": "                Console.WriteLine(\"Configuration file saved to: \" + Path.GetFullPath(exportOptions.OutputFilePath));"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "endLine": 81,
                  "snippet": {
                    "text": "                    allOptions.SaveToJson(exportOptions.OutputFilePath);\n                }\n\n                Console.WriteLine(\"Configuration file saved to: \" + Path.GetFullPath(exportOptions.OutputFilePath));\n\n                result = SUCCESS;\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 824
                          },
                          "region": {
                            "startLine": 78,
                            "snippet": {
                              "text": "                Console.WriteLine(\"Configuration file saved to: \" + Path.GetFullPath(exportOptions.OutputFilePath));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 75,
                            "endLine": 81,
                            "snippet": {
                              "text": "                    allOptions.SaveToJson(exportOptions.OutputFilePath);\n                }\n\n                Console.WriteLine(\"Configuration file saved to: \" + Path.GetFullPath(exportOptions.OutputFilePath));\n\n                result = SUCCESS;\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 824
                },
                "region": {
                  "startLine": 78
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method AddMessagesToResult() in [FortifyFprConverter.cs](1) can dereference a null pointer on line [1129](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 1129,
                  "snippet": {
                    "text": "                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),"
                  }
                },
                "contextRegion": {
                  "startLine": 1126,
                  "endLine": 1132,
                  "snippet": {
                    "text": "                    if (SupportedReplacementTokens.Contains(key))\n                    {\n                        // Replace the token with an embedded hyperlink.\n                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),\n                                                            string.Format(EmbeddedLinkFormat, value));\n                    }\n                    else\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1118,
                            "snippet": {
                              "text": "            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1115,
                            "endLine": 1121,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = _rules[result.RuleIndex];\n            Message message = new Message();\n\n            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;\n\n            if (_currentResultReplacementDictionary != null)\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1118,
                            "snippet": {
                              "text": "            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1115,
                            "endLine": 1121,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = _rules[result.RuleIndex];\n            Message message = new Message();\n\n            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;\n\n            if (_currentResultReplacementDictionary != null)\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "messageText = null : messageText is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1120,
                            "snippet": {
                              "text": "            if (_currentResultReplacementDictionary != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1117,
                            "endLine": 1123,
                            "snippet": {
                              "text": "\n            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;\n\n            if (_currentResultReplacementDictionary != null)\n            {\n                foreach (string key in _currentResultReplacementDictionary.Keys)\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1122,
                            "snippet": {
                              "text": "                foreach (string key in _currentResultReplacementDictionary.Keys)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1119,
                            "endLine": 1125,
                            "snippet": {
                              "text": "\n            if (_currentResultReplacementDictionary != null)\n            {\n                foreach (string key in _currentResultReplacementDictionary.Keys)\n                {\n                    string value = _currentResultReplacementDictionary[key];\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1126,
                            "snippet": {
                              "text": "                    if (SupportedReplacementTokens.Contains(key))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1123,
                            "endLine": 1129,
                            "snippet": {
                              "text": "                {\n                    string value = _currentResultReplacementDictionary[key];\n\n                    if (SupportedReplacementTokens.Contains(key))\n                    {\n                        // Replace the token with an embedded hyperlink.\n                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1129,
                            "snippet": {
                              "text": "                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1126,
                            "endLine": 1132,
                            "snippet": {
                              "text": "                    if (SupportedReplacementTokens.Contains(key))\n                    {\n                        // Replace the token with an embedded hyperlink.\n                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),\n                                                            string.Format(EmbeddedLinkFormat, value));\n                    }\n                    else\n"
                            }
                          }
                        },
                        "message": {
                          "text": "messageText.Replace(...) : messageText is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 1129
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 14,
          "message": {
            "text": "The method GetRegionByteLength() in [SarifCurrentToVersionOneVisitor.cs](1) can dereference a null pointer because it does not check the return value of ReadLine(), which might return null.\r\nThe program might dereference a null pointer because it does not check the return value of a function that might return null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 541,
                  "snippet": {
                    "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 538,
                  "endLine": 544,
                  "snippet": {
                    "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 534,
                            "snippet": {
                              "text": "                if (reader != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 531,
                            "endLine": 537,
                            "snippet": {
                              "text": "\n            using (StreamReader reader = GetFileStreamReader(uri, out Encoding encoding))\n            {\n                if (reader != null)\n                {\n                    if (v2Region.StartLine > 0) // Use line and column \n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 536,
                            "snippet": {
                              "text": "                    if (v2Region.StartLine > 0) // Use line and column "
                            }
                          },
                          "contextRegion": {
                            "startLine": 533,
                            "endLine": 539,
                            "snippet": {
                              "text": "            {\n                if (reader != null)\n                {\n                    if (v2Region.StartLine > 0) // Use line and column \n                    {\n                        string sourceLine = string.Empty;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 541,
                            "snippet": {
                              "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 538,
                            "endLine": 544,
                            "snippet": {
                              "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 541,
                            "snippet": {
                              "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 538,
                            "endLine": 544,
                            "snippet": {
                              "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 541,
                            "snippet": {
                              "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 538,
                            "endLine": 544,
                            "snippet": {
                              "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "sourceLine = ReadLine() : StreamReader.ReadLine may return NULL"
                        },
                        "annotations": [
                          {
                            "startLine": 541,
                            "message": {
                              "text": "sourceLine may be NULL"
                            }
                          }
                        ]
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 541,
                            "snippet": {
                              "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 538,
                            "endLine": 544,
                            "snippet": {
                              "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "goto"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 541,
                            "snippet": {
                              "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 538,
                            "endLine": 544,
                            "snippet": {
                              "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 541,
                            "snippet": {
                              "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 538,
                            "endLine": 544,
                            "snippet": {
                              "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 543,
                            "snippet": {
                              "text": "                        if (sourceLine != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 540,
                            "endLine": 546,
                            "snippet": {
                              "text": "                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n                            int startColumn = v2Region.StartColumn > 0\n                                                ? v2Region.StartColumn\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 549,
                            "snippet": {
                              "text": "                            if (sourceLine.Length > startColumn)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 546,
                            "endLine": 552,
                            "snippet": {
                              "text": "                                                ? v2Region.StartColumn\n                                                : 1;\n\n                            if (sourceLine.Length > startColumn)\n                            {\n                                // Since we read past startColumn, we need to back up using the base stream\n                                Stream stream = reader.BaseStream;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "sourceLine.get_Length() : sourceLine used without null check"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 541
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method OpenAuditFvdlReader() in [FortifyFprConverter.cs](1) fails to enable validation before parsing XML on line [230](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 230,
                  "snippet": {
                    "text": "            return XmlReader.Create(auditEntry.Open(), settings);"
                  }
                },
                "contextRegion": {
                  "startLine": 227,
                  "endLine": 233,
                  "snippet": {
                    "text": "                XmlResolver = null\n            };\n\n            return XmlReader.Create(auditEntry.Open(), settings);\n        }\n\n        private void ParseAuditStream_PassOne(XmlReader reader)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 222,
                            "snippet": {
                              "text": "            var settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 219,
                            "endLine": 225,
                            "snippet": {
                              "text": "            ZipArchive fprArchive = new ZipArchive(fprFileStream);\n            ZipArchiveEntry auditEntry = fprArchive.Entries.Single(e => e.FullName.Equals(\"audit.fvdl\"));\n\n            var settings = new XmlReaderSettings\n            {\n                DtdProcessing = DtdProcessing.Ignore,\n                IgnoreWhitespace = true,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 230,
                            "snippet": {
                              "text": "            return XmlReader.Create(auditEntry.Open(), settings);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 227,
                            "endLine": 233,
                            "snippet": {
                              "text": "                XmlResolver = null\n            };\n\n            return XmlReader.Create(auditEntry.Open(), settings);\n        }\n\n        private void ParseAuditStream_PassOne(XmlReader reader)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 230
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 288,
                  "endLine": 301,
                  "snippet": {
                    "text": "        private void Visit(Conversion conversion, string conversionPointer)\r\n        {\r\n            Analyze(conversion, conversionPointer);\r\n\r\n            if (conversion.AnalysisToolLogFiles != null)\r\n            {\r\n                string analysisToolLogFilesPointer = conversionPointer.AtProperty(SarifPropertyName.AnalysisToolLogFiles);\r\n\r\n                for (int i = 0; i < conversion.AnalysisToolLogFiles.Count; ++i)\r\n                {\r\n                    Visit(conversion.AnalysisToolLogFiles[i], analysisToolLogFilesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 285,
                  "endLine": 304,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Conversion conversion, string conversionPointer)\n        {\n            Analyze(conversion, conversionPointer);\n\n            if (conversion.AnalysisToolLogFiles != null)\n            {\n                string analysisToolLogFilesPointer = conversionPointer.AtProperty(SarifPropertyName.AnalysisToolLogFiles);\n\n                for (int i = 0; i < conversion.AnalysisToolLogFiles.Count; ++i)\n                {\n                    Visit(conversion.AnalysisToolLogFiles[i], analysisToolLogFilesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(Edge edge, string edgePointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 288,
                            "endLine": 301,
                            "snippet": {
                              "text": "        private void Visit(Conversion conversion, string conversionPointer)\r\n        {\r\n            Analyze(conversion, conversionPointer);\r\n\r\n            if (conversion.AnalysisToolLogFiles != null)\r\n            {\r\n                string analysisToolLogFilesPointer = conversionPointer.AtProperty(SarifPropertyName.AnalysisToolLogFiles);\r\n\r\n                for (int i = 0; i < conversion.AnalysisToolLogFiles.Count; ++i)\r\n                {\r\n                    Visit(conversion.AnalysisToolLogFiles[i], analysisToolLogFilesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 285,
                            "endLine": 304,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Conversion conversion, string conversionPointer)\n        {\n            Analyze(conversion, conversionPointer);\n\n            if (conversion.AnalysisToolLogFiles != null)\n            {\n                string analysisToolLogFilesPointer = conversionPointer.AtProperty(SarifPropertyName.AnalysisToolLogFiles);\n\n                for (int i = 0; i < conversion.AnalysisToolLogFiles.Count; ++i)\n                {\n                    Visit(conversion.AnalysisToolLogFiles[i], analysisToolLogFilesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(Edge edge, string edgePointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 288,
                  "endLine": 301
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method ReadAtPosition() in [LineMappingStreamReaderTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 822
                },
                "region": {
                  "startLine": 101,
                  "endLine": 109,
                  "snippet": {
                    "text": "        private static JObject ReadAtPosition(JsonSerializer serializer, Stream stream, long position)\r\n        {\r\n            stream.Seek(position, SeekOrigin.Begin);\r\n            using (JsonTextReader jsonReader = new JsonTextReader(new StreamReader(stream)))\r\n            {\r\n                jsonReader.CloseInput = false;\r\n                return (JObject)serializer.Deserialize(jsonReader);\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 98,
                  "endLine": 111,
                  "snippet": {
                    "text": "            }\n        }\n\n        private static JObject ReadAtPosition(JsonSerializer serializer, Stream stream, long position)\n        {\n            stream.Seek(position, SeekOrigin.Begin);\n            using (JsonTextReader jsonReader = new JsonTextReader(new StreamReader(stream)))\n            {\n                jsonReader.CloseInput = false;\n                return (JObject)serializer.Deserialize(jsonReader);\n            }\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 822
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 109,
                            "snippet": {
                              "text": "        private static JObject ReadAtPosition(JsonSerializer serializer, Stream stream, long position)\r\n        {\r\n            stream.Seek(position, SeekOrigin.Begin);\r\n            using (JsonTextReader jsonReader = new JsonTextReader(new StreamReader(stream)))\r\n            {\r\n                jsonReader.CloseInput = false;\r\n                return (JObject)serializer.Deserialize(jsonReader);\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 98,
                            "endLine": 111,
                            "snippet": {
                              "text": "            }\n        }\n\n        private static JObject ReadAtPosition(JsonSerializer serializer, Stream stream, long position)\n        {\n            stream.Seek(position, SeekOrigin.Begin);\n            using (JsonTextReader jsonReader = new JsonTextReader(new StreamReader(stream)))\n            {\n                jsonReader.CloseInput = false;\n                return (JObject)serializer.Deserialize(jsonReader);\n            }\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: ReadAtPosition"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 822
                },
                "region": {
                  "startLine": 101,
                  "endLine": 109
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method AssertParsesAsTestLocation() in [CppCheckLocationTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 813
                },
                "region": {
                  "startLine": 136,
                  "endLine": 139,
                  "snippet": {
                    "text": "        private static void AssertParsesAsTestLocation(XmlReader xml)\r\n        {\r\n            AssertLocationIsTestLocation(Parse(xml));\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 133,
                  "endLine": 142,
                  "snippet": {
                    "text": "            return result;\n        }\n\n        private static void AssertParsesAsTestLocation(XmlReader xml)\n        {\n            AssertLocationIsTestLocation(Parse(xml));\n        }\n\n        [Fact]\n        public void CppCheckLocation_Invalid_ThrowsXmlExceptionForNonLocationNode()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 813
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 139,
                            "snippet": {
                              "text": "        private static void AssertParsesAsTestLocation(XmlReader xml)\r\n        {\r\n            AssertLocationIsTestLocation(Parse(xml));\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 133,
                            "endLine": 142,
                            "snippet": {
                              "text": "            return result;\n        }\n\n        private static void AssertParsesAsTestLocation(XmlReader xml)\n        {\n            AssertLocationIsTestLocation(Parse(xml));\n        }\n\n        [Fact]\n        public void CppCheckLocation_Invalid_ThrowsXmlExceptionForNonLocationNode()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: AssertParsesAsTestLocation"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 813
                },
                "region": {
                  "startLine": 136,
                  "endLine": 139
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 29,
          "message": {
            "text": "The call to CreateDirectory() on line [123](1) causes portability problems because it uses a hardcoded file separator.\r\nThe use of hardcoded file separators causes portability problems."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 732
                },
                "region": {
                  "startLine": 123,
                  "snippet": {
                    "text": "                        Directory.CreateDirectory(testDirectory);"
                  }
                },
                "contextRegion": {
                  "startLine": 120,
                  "endLine": 126,
                  "snippet": {
                    "text": "                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n                        // We retrieve all test strings from embedded resources. To rebaseline, we need to\n                        // compute the enlistment location from which these resources are compiled.\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 99
                    },
                    {
                      "index": 100
                    },
                    {
                      "index": 101
                    },
                    {
                      "index": 102
                    },
                    {
                      "index": 103
                    },
                    {
                      "index": 107
                    },
                    {
                      "index": 108
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 732
                          },
                          "region": {
                            "startLine": 123,
                            "snippet": {
                              "text": "                        Directory.CreateDirectory(testDirectory);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 120,
                            "endLine": 126,
                            "snippet": {
                              "text": "                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n                        // We retrieve all test strings from embedded resources. To rebaseline, we need to\n                        // compute the enlistment location from which these resources are compiled.\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CreateDirectory(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 732
                },
                "region": {
                  "startLine": 123
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method ParseVulnerability() in [FortifyFprConverter.cs](1) can dereference a null pointer on line [446](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 446,
                  "snippet": {
                    "text": "                    rule.SetProperty(_strings.Type, _reader.ReadElementContentAsString());"
                  }
                },
                "contextRegion": {
                  "startLine": 443,
                  "endLine": 449,
                  "snippet": {
                    "text": "                }\n                else if (AtStartOfNonEmpty(_strings.Type))\n                {\n                    rule.SetProperty(_strings.Type, _reader.ReadElementContentAsString());\n                }\n                else if (AtStartOfNonEmpty(_strings.Subtype))\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 427,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = null;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 424,
                            "endLine": 430,
                            "snippet": {
                              "text": "\n            var result = new Result();\n            _reader.Read();\n            ReportingDescriptor rule = null;\n            int ruleIndex;\n\n            while (!AtEndOf(_strings.Vulnerability))\n"
                            }
                          }
                        },
                        "message": {
                          "text": "rule = null : rule is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 430,
                            "snippet": {
                              "text": "            while (!AtEndOf(_strings.Vulnerability))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 427,
                            "endLine": 433,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = null;\n            int ruleIndex;\n\n            while (!AtEndOf(_strings.Vulnerability))\n            {\n                if (AtStartOfNonEmpty(_strings.ClassId))\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 432,
                            "snippet": {
                              "text": "                if (AtStartOfNonEmpty(_strings.ClassId))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 429,
                            "endLine": 435,
                            "snippet": {
                              "text": "\n            while (!AtEndOf(_strings.Vulnerability))\n            {\n                if (AtStartOfNonEmpty(_strings.ClassId))\n                {\n                    // Get the rule GUID from the ClassId element.\n                    string ruleId = _reader.ReadElementContentAsString();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 440,
                            "snippet": {
                              "text": "                else if (AtStartOfNonEmpty(_strings.Kingdom))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 437,
                            "endLine": 443,
                            "snippet": {
                              "text": "\n                    result.RuleIndex = ruleIndex;\n                }\n                else if (AtStartOfNonEmpty(_strings.Kingdom))\n                {\n                    rule.SetProperty(_strings.Kingdom, _reader.ReadElementContentAsString());\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 446,
                            "snippet": {
                              "text": "                    rule.SetProperty(_strings.Type, _reader.ReadElementContentAsString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 443,
                            "endLine": 449,
                            "snippet": {
                              "text": "                }\n                else if (AtStartOfNonEmpty(_strings.Type))\n                {\n                    rule.SetProperty(_strings.Type, _reader.ReadElementContentAsString());\n                }\n                else if (AtStartOfNonEmpty(_strings.Subtype))\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "rule.SetProperty(...) : rule is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 446
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 109
                    },
                    {
                      "index": 110
                    },
                    {
                      "index": 111
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 109
                    },
                    {
                      "index": 110
                    },
                    {
                      "index": 111
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 109
                    },
                    {
                      "index": 110
                    },
                    {
                      "index": 111
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 109
                    },
                    {
                      "index": 110
                    },
                    {
                      "index": 111
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 109
                    },
                    {
                      "index": 110
                    },
                    {
                      "index": 111
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 109
                    },
                    {
                      "index": 110
                    },
                    {
                      "index": 111
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 328,
                  "endLine": 331,
                  "snippet": {
                    "text": "        private void Visit(ArtifactLocation fileLocation, string fileLocationPointer)\r\n        {\r\n            Analyze(fileLocation, fileLocationPointer);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 325,
                  "endLine": 334,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(ArtifactLocation fileLocation, string fileLocationPointer)\n        {\n            Analyze(fileLocation, fileLocationPointer);\n        }\n\n        private void Visit(Fix fix, string fixPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 328,
                            "endLine": 331,
                            "snippet": {
                              "text": "        private void Visit(ArtifactLocation fileLocation, string fileLocationPointer)\r\n        {\r\n            Analyze(fileLocation, fileLocationPointer);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 325,
                            "endLine": 334,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(ArtifactLocation fileLocation, string fileLocationPointer)\n        {\n            Analyze(fileLocation, fileLocationPointer);\n        }\n\n        private void Visit(Fix fix, string fixPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 328,
                  "endLine": 331
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method LogSimpleResult() in [SarifLoggerTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 541
                },
                "region": {
                  "startLine": 609,
                  "endLine": 613,
                  "snippet": {
                    "text": "        private void LogSimpleResult(SarifLogger sarifLogger)\r\n        {\r\n            ReportingDescriptor rule = new ReportingDescriptor { Id = \"RuleId\" };\r\n            sarifLogger.Log(rule, CreateSimpleResult(rule));\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 606,
                  "endLine": 616,
                  "snippet": {
                    "text": "            invocation.ProcessId.Should().NotBe(0);\n        }\n\n        private void LogSimpleResult(SarifLogger sarifLogger)\n        {\n            ReportingDescriptor rule = new ReportingDescriptor { Id = \"RuleId\" };\n            sarifLogger.Log(rule, CreateSimpleResult(rule));\n        }\n\n        private Result CreateSimpleResult(ReportingDescriptor rule)\n        {           \n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 541
                          },
                          "region": {
                            "startLine": 609,
                            "endLine": 613,
                            "snippet": {
                              "text": "        private void LogSimpleResult(SarifLogger sarifLogger)\r\n        {\r\n            ReportingDescriptor rule = new ReportingDescriptor { Id = \"RuleId\" };\r\n            sarifLogger.Log(rule, CreateSimpleResult(rule));\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 606,
                            "endLine": 616,
                            "snippet": {
                              "text": "            invocation.ProcessId.Should().NotBe(0);\n        }\n\n        private void LogSimpleResult(SarifLogger sarifLogger)\n        {\n            ReportingDescriptor rule = new ReportingDescriptor { Id = \"RuleId\" };\n            sarifLogger.Log(rule, CreateSimpleResult(rule));\n        }\n\n        private Result CreateSimpleResult(ReportingDescriptor rule)\n        {           \n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: LogSimpleResult"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 541
                },
                "region": {
                  "startLine": 609,
                  "endLine": 613
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method ContainsProperty() in [PropertyBagHolderTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 750
                },
                "region": {
                  "startLine": 291,
                  "endLine": 294,
                  "snippet": {
                    "text": "        private static bool ContainsProperty(this TestClass testObject, string propertyName)\r\n        {\r\n            return testObject.PropertyNames.Contains(propertyName);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 288,
                  "endLine": 296,
                  "snippet": {
                    "text": "            testObject.ContainsProperty(propertyName).Should().BeFalse();\n        }\n\n        private static bool ContainsProperty(this TestClass testObject, string propertyName)\n        {\n            return testObject.PropertyNames.Contains(propertyName);\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 750
                          },
                          "region": {
                            "startLine": 291,
                            "endLine": 294,
                            "snippet": {
                              "text": "        private static bool ContainsProperty(this TestClass testObject, string propertyName)\r\n        {\r\n            return testObject.PropertyNames.Contains(propertyName);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 288,
                            "endLine": 296,
                            "snippet": {
                              "text": "            testObject.ContainsProperty(propertyName).Should().BeFalse();\n        }\n\n        private static bool ContainsProperty(this TestClass testObject, string propertyName)\n        {\n            return testObject.PropertyNames.Contains(propertyName);\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: ContainsProperty"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 750
                },
                "region": {
                  "startLine": 291,
                  "endLine": 294
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method PropertyIsRequiredBySchema() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 363,
                  "endLine": 369,
                  "snippet": {
                    "text": "        private bool PropertyIsRequiredBySchema(string objectTypeName, string propertyName)\r\n        {\r\n            string jsonPropertyName = GetJsonNameFor(propertyName);\r\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\r\n     \r\n            return propertySchema.Required != null && propertySchema.Required.Contains(jsonPropertyName);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 360,
                  "endLine": 372,
                  "snippet": {
                    "text": "\n        // Converts a .NET object + property name to their JSON equivalents and \n        // determines whether that property is required according to the schema.\n        private bool PropertyIsRequiredBySchema(string objectTypeName, string propertyName)\n        {\n            string jsonPropertyName = GetJsonNameFor(propertyName);\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\n     \n            return propertySchema.Required != null && propertySchema.Required.Contains(jsonPropertyName);\n        }\n\n        private bool PropertyIsAnyOfRequiredBySchema(string objectTypeName, string propertyName)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 363,
                            "endLine": 369,
                            "snippet": {
                              "text": "        private bool PropertyIsRequiredBySchema(string objectTypeName, string propertyName)\r\n        {\r\n            string jsonPropertyName = GetJsonNameFor(propertyName);\r\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\r\n     \r\n            return propertySchema.Required != null && propertySchema.Required.Contains(jsonPropertyName);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 360,
                            "endLine": 372,
                            "snippet": {
                              "text": "\n        // Converts a .NET object + property name to their JSON equivalents and \n        // determines whether that property is required according to the schema.\n        private bool PropertyIsRequiredBySchema(string objectTypeName, string propertyName)\n        {\n            string jsonPropertyName = GetJsonNameFor(propertyName);\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\n     \n            return propertySchema.Required != null && propertySchema.Required.Contains(jsonPropertyName);\n        }\n\n        private bool PropertyIsAnyOfRequiredBySchema(string objectTypeName, string propertyName)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: PropertyIsRequiredBySchema"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 363,
                  "endLine": 369
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Lines_2_And_3 is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 103,
                  "snippet": {
                    "text": "        private readonly static Region s_Lines_2_And_3 = "
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "endLine": 106,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = LINE3 },\n                           StartLine = 3, StartColumn = 1, EndLine = 3, EndColumn = 5, CharOffset = 11, CharLength = 4 };\n\n        private readonly static Region s_Lines_2_And_3 = \n            new Region() { Snippet = new ArtifactContent() { Text = LINES_2_AND_3 },\n                           StartLine = 2, StartColumn = 1, EndLine = 3, EndColumn = 5, CharOffset = 6, CharLength = 9 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 103,
                            "snippet": {
                              "text": "        private readonly static Region s_Lines_2_And_3 = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 100,
                            "endLine": 106,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = LINE3 },\n                           StartLine = 3, StartColumn = 1, EndLine = 3, EndColumn = 5, CharOffset = 11, CharLength = 4 };\n\n        private readonly static Region s_Lines_2_And_3 = \n            new Region() { Snippet = new ArtifactContent() { Text = LINES_2_AND_3 },\n                           StartLine = 2, StartColumn = 1, EndLine = 3, EndColumn = 5, CharOffset = 6, CharLength = 9 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Lines_2_And_3"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 103
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ComputeSha1Hash() in [HashUtilities.cs](1) ignores an exception on line [102](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 102,
                  "snippet": {
                    "text": "            catch (IOException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 99,
                  "endLine": 105,
                  "snippet": {
                    "text": "                    }\n                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return sha1;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 102,
                            "snippet": {
                              "text": "            catch (IOException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 99,
                            "endLine": 105,
                            "snippet": {
                              "text": "                    }\n                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return sha1;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 102
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ComputeSha1Hash() in [HashUtilities.cs](1) ignores an exception on line [103](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 103,
                  "snippet": {
                    "text": "            catch (UnauthorizedAccessException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 100,
                  "endLine": 106,
                  "snippet": {
                    "text": "                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return sha1;\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 103,
                            "snippet": {
                              "text": "            catch (UnauthorizedAccessException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 100,
                            "endLine": 106,
                            "snippet": {
                              "text": "                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return sha1;\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 103
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method IsDictionary() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 452,
                  "endLine": 455,
                  "snippet": {
                    "text": "        private bool IsDictionary(Type propertyType)\r\n        {\r\n            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Dictionary<,>);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 449,
                  "endLine": 458,
                  "snippet": {
                    "text": "            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(IList<>);\n        }\n\n        private bool IsDictionary(Type propertyType)\n        {\n            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Dictionary<,>);\n        }\n\n        private bool HasParameterlessConstructor(Type propertyType)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 452,
                            "endLine": 455,
                            "snippet": {
                              "text": "        private bool IsDictionary(Type propertyType)\r\n        {\r\n            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Dictionary<,>);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 449,
                            "endLine": 458,
                            "snippet": {
                              "text": "            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(IList<>);\n        }\n\n        private bool IsDictionary(Type propertyType)\n        {\n            return propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Dictionary<,>);\n        }\n\n        private bool HasParameterlessConstructor(Type propertyType)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: IsDictionary"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 452,
                  "endLine": 455
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method Convert() in [AndroidStudioConverter.cs](1) fails to enable validation before parsing XML on line [64](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 64
                },
                "region": {
                  "startLine": 64,
                  "snippet": {
                    "text": "            using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "endLine": 67,
                  "snippet": {
                    "text": "            };\n\n            IList<Result> results;\n            using (XmlReader xmlReader = XmlReader.Create(input, settings))\n            {\n                results = ProcessAndroidStudioLog(xmlReader);\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 64
                          },
                          "region": {
                            "startLine": 41,
                            "snippet": {
                              "text": "            if (input == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 38,
                            "endLine": 44,
                            "snippet": {
                              "text": "        /// <param name=\"dataToInsert\">Optionally emitted properties that should be written to log.</param>\n        public override void Convert(Stream input, IResultLogWriter output, OptionallyEmittedData dataToInsert)\n        {\n            if (input == null)\n            {\n                throw new ArgumentNullException(nameof(input));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 64
                          },
                          "region": {
                            "startLine": 46,
                            "snippet": {
                              "text": "            if (output == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 43,
                            "endLine": 49,
                            "snippet": {
                              "text": "                throw new ArgumentNullException(nameof(input));\n            }\n\n            if (output == null)\n            {\n                throw new ArgumentNullException(nameof(output));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 64
                          },
                          "region": {
                            "startLine": 53,
                            "snippet": {
                              "text": "            XmlReaderSettings settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 50,
                            "endLine": 56,
                            "snippet": {
                              "text": "\n            LogicalLocations.Clear();\n\n            XmlReaderSettings settings = new XmlReaderSettings\n            {\n                IgnoreWhitespace = true,\n                IgnoreComments = true,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 64
                          },
                          "region": {
                            "startLine": 64,
                            "snippet": {
                              "text": "            using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 61,
                            "endLine": 67,
                            "snippet": {
                              "text": "            };\n\n            IList<Result> results;\n            using (XmlReader xmlReader = XmlReader.Create(input, settings))\n            {\n                results = ProcessAndroidStudioLog(xmlReader);\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 64
                },
                "region": {
                  "startLine": 64
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 788,
                  "endLine": 796,
                  "snippet": {
                    "text": "        private void Visit(StackFrame frame, string framePointer)\r\n        {\r\n            Analyze(frame, framePointer);\r\n\r\n            if (frame.Location != null)\r\n            {\r\n                Visit(frame.Location, framePointer.AtProperty(SarifPropertyName.Location));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 785,
                  "endLine": 799,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(StackFrame frame, string framePointer)\n        {\n            Analyze(frame, framePointer);\n\n            if (frame.Location != null)\n            {\n                Visit(frame.Location, framePointer.AtProperty(SarifPropertyName.Location));\n            }\n        }\n\n        private void Visit(ThreadFlow threadFlow, string threadFlowPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 788,
                            "endLine": 796,
                            "snippet": {
                              "text": "        private void Visit(StackFrame frame, string framePointer)\r\n        {\r\n            Analyze(frame, framePointer);\r\n\r\n            if (frame.Location != null)\r\n            {\r\n                Visit(frame.Location, framePointer.AtProperty(SarifPropertyName.Location));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 785,
                            "endLine": 799,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(StackFrame frame, string framePointer)\n        {\n            Analyze(frame, framePointer);\n\n            if (frame.Location != null)\n            {\n                Visit(frame.Location, framePointer.AtProperty(SarifPropertyName.Location));\n            }\n        }\n\n        private void Visit(ThreadFlow threadFlow, string threadFlowPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 788,
                  "endLine": 796
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 79,
                  "snippet": {
                    "text": "            System.out.println(\"There may be more coming.  See if you can hunt them all.\");"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "endLine": 82,
                  "snippet": {
                    "text": "        }\n\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 79,
                            "snippet": {
                              "text": "            System.out.println(\"There may be more coming.  See if you can hunt them all.\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 76,
                            "endLine": 82,
                            "snippet": {
                              "text": "        }\n\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 79,
                  "snippet": {
                    "text": "            System.out.println(\"There may be more coming.  See if you can hunt them all.\");"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "endLine": 82,
                  "snippet": {
                    "text": "        }\n\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 79,
                            "snippet": {
                              "text": "            System.out.println(\"There may be more coming.  See if you can hunt them all.\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 76,
                            "endLine": 82,
                            "snippet": {
                              "text": "        }\n\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_javaScriptIdentifierPattern is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 210,
                  "snippet": {
                    "text": "        private static readonly string s_javaScriptIdentifierPattern = @\"^[$_\\p{L}][$_\\p{L}0-9]*$\";"
                  }
                },
                "contextRegion": {
                  "startLine": 207,
                  "endLine": 213,
                  "snippet": {
                    "text": "            return sb.ToString();\n        }\n\n        private static readonly string s_javaScriptIdentifierPattern = @\"^[$_\\p{L}][$_\\p{L}0-9]*$\";\n        private static readonly Regex s_javaScriptIdentifierRegex = new Regex(s_javaScriptIdentifierPattern, RegexOptions.Compiled);\n\n        private static bool TokenIsJavascriptIdentifier(string token)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 210,
                            "snippet": {
                              "text": "        private static readonly string s_javaScriptIdentifierPattern = @\"^[$_\\p{L}][$_\\p{L}0-9]*$\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 207,
                            "endLine": 213,
                            "snippet": {
                              "text": "            return sb.ToString();\n        }\n\n        private static readonly string s_javaScriptIdentifierPattern = @\"^[$_\\p{L}][$_\\p{L}0-9]*$\";\n        private static readonly Regex s_javaScriptIdentifierRegex = new Regex(s_javaScriptIdentifierPattern, RegexOptions.Compiled);\n\n        private static bool TokenIsJavascriptIdentifier(string token)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_javaScriptIdentifierPattern"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 210
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 14,
          "message": {
            "text": "The method CopyEnvironmentVariables() in [Invocation.cs](1) can dereference a null pointer because it does not check the return value of GetEnvironmentVariables(), which might return null.\r\nThe program might dereference a null pointer because it does not check the return value of a function that might return null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1135
                },
                "region": {
                  "startLine": 63,
                  "snippet": {
                    "text": "            var variables = Environment.GetEnvironmentVariables();"
                  }
                },
                "contextRegion": {
                  "startLine": 60,
                  "endLine": 66,
                  "snippet": {
                    "text": "        private static IDictionary<string, string> CopyEnvironmentVariables()\n        {\n            var result = new Dictionary<string, string>();\n            var variables = Environment.GetEnvironmentVariables();\n\n            foreach (DictionaryEntry entry in variables)\n            {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1135
                          },
                          "region": {
                            "startLine": 63,
                            "snippet": {
                              "text": "            var variables = Environment.GetEnvironmentVariables();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 60,
                            "endLine": 66,
                            "snippet": {
                              "text": "        private static IDictionary<string, string> CopyEnvironmentVariables()\n        {\n            var result = new Dictionary<string, string>();\n            var variables = Environment.GetEnvironmentVariables();\n\n            foreach (DictionaryEntry entry in variables)\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "variables = GetEnvironmentVariables() : Environment.GetEnvironmentVariables may return NULL"
                        },
                        "annotations": [
                          {
                            "startLine": 63,
                            "message": {
                              "text": "variables may be NULL"
                            }
                          }
                        ]
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1135
                          },
                          "region": {
                            "startLine": 65,
                            "snippet": {
                              "text": "            foreach (DictionaryEntry entry in variables)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 62,
                            "endLine": 68,
                            "snippet": {
                              "text": "            var result = new Dictionary<string, string>();\n            var variables = Environment.GetEnvironmentVariables();\n\n            foreach (DictionaryEntry entry in variables)\n            {\n                result[(string)entry.Key] = (string)entry.Value;\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "variables.GetEnumerator() : variables used without null check"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1135
                },
                "region": {
                  "startLine": 63
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 268,
                  "endLine": 286,
                  "snippet": {
                    "text": "        private void Visit(CodeFlow codeFlow, string codeFlowPointer)\r\n        {\r\n            Analyze(codeFlow, codeFlowPointer);\r\n\r\n            if (codeFlow.Message != null)\r\n            {\r\n                Visit(codeFlow.Message, codeFlowPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (codeFlow.ThreadFlows != null)\r\n            {\r\n                string threadFlowsPointer = codeFlowPointer.AtProperty(SarifPropertyName.ThreadFlows);\r\n\r\n                for (int i = 0; i < codeFlow.ThreadFlows.Count; ++i)\r\n                {\r\n                    Visit(codeFlow.ThreadFlows[i], threadFlowsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 265,
                  "endLine": 289,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(CodeFlow codeFlow, string codeFlowPointer)\n        {\n            Analyze(codeFlow, codeFlowPointer);\n\n            if (codeFlow.Message != null)\n            {\n                Visit(codeFlow.Message, codeFlowPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (codeFlow.ThreadFlows != null)\n            {\n                string threadFlowsPointer = codeFlowPointer.AtProperty(SarifPropertyName.ThreadFlows);\n\n                for (int i = 0; i < codeFlow.ThreadFlows.Count; ++i)\n                {\n                    Visit(codeFlow.ThreadFlows[i], threadFlowsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(Conversion conversion, string conversionPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 268,
                            "endLine": 286,
                            "snippet": {
                              "text": "        private void Visit(CodeFlow codeFlow, string codeFlowPointer)\r\n        {\r\n            Analyze(codeFlow, codeFlowPointer);\r\n\r\n            if (codeFlow.Message != null)\r\n            {\r\n                Visit(codeFlow.Message, codeFlowPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (codeFlow.ThreadFlows != null)\r\n            {\r\n                string threadFlowsPointer = codeFlowPointer.AtProperty(SarifPropertyName.ThreadFlows);\r\n\r\n                for (int i = 0; i < codeFlow.ThreadFlows.Count; ++i)\r\n                {\r\n                    Visit(codeFlow.ThreadFlows[i], threadFlowsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 265,
                            "endLine": 289,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(CodeFlow codeFlow, string codeFlowPointer)\n        {\n            Analyze(codeFlow, codeFlowPointer);\n\n            if (codeFlow.Message != null)\n            {\n                Visit(codeFlow.Message, codeFlowPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (codeFlow.ThreadFlows != null)\n            {\n                string threadFlowsPointer = codeFlowPointer.AtProperty(SarifPropertyName.ThreadFlows);\n\n                for (int i = 0; i < codeFlow.ThreadFlows.Count; ++i)\n                {\n                    Visit(codeFlow.ThreadFlows[i], threadFlowsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(Conversion conversion, string conversionPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 268,
                  "endLine": 286
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 29,
          "message": {
            "text": "The call to GetDirectories() on line [60](1) causes portability problems because it uses a hardcoded file separator.\r\nThe use of hardcoded file separators causes portability problems."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            return Directory.GetDirectories(path);"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 88
                    },
                    {
                      "index": 89
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 5
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 60,
                            "snippet": {
                              "text": "            return Directory.GetDirectories(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 57,
                            "endLine": 63,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetDirectories(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 88
                    },
                    {
                      "index": 89
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 5
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 60,
                            "snippet": {
                              "text": "            return Directory.GetDirectories(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 57,
                            "endLine": 63,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetDirectories(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 88
                    },
                    {
                      "index": 89
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 5
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 60,
                            "snippet": {
                              "text": "            return Directory.GetDirectories(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 57,
                            "endLine": 63,
                            "snippet": {
                              "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "GetDirectories(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 60
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 112
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 112
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 112
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 112
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 112
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 112
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 26,
          "message": {
            "text": "The class Program contains debug code, which can create unintended entry points in a deployed web application.\r\nDebug code can create unintended entry points in a deployed web application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 340
                },
                "region": {
                  "startLine": 18,
                  "endLine": 27,
                  "snippet": {
                    "text": "        static int Main(string[] args)\r\n        {\r\n            int result = Parser.Default.ParseArguments<LoadOptions, CreateOptions>(args)\r\n                .MapResult(\r\n                    (LoadOptions options) => LoadSarifLogFile(options),\r\n                    (CreateOptions options) => CreateSarifLogFile(options),\r\n                    errors => 1);\r\n\r\n            return result;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 15,
                  "endLine": 30,
                  "snippet": {
                    "text": "{\n    public class Program\n    {\n        static int Main(string[] args)\n        {\n            int result = Parser.Default.ParseArguments<LoadOptions, CreateOptions>(args)\n                .MapResult(\n                    (LoadOptions options) => LoadSarifLogFile(options),\n                    (CreateOptions options) => CreateSarifLogFile(options),\n                    errors => 1);\n\n            return result;\n        }\n\n        /// <summary>\n        /// Loads a SARIF log file from disk and deserializes it into a code object.\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 340
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 27,
                            "snippet": {
                              "text": "        static int Main(string[] args)\r\n        {\r\n            int result = Parser.Default.ParseArguments<LoadOptions, CreateOptions>(args)\r\n                .MapResult(\r\n                    (LoadOptions options) => LoadSarifLogFile(options),\r\n                    (CreateOptions options) => CreateSarifLogFile(options),\r\n                    errors => 1);\r\n\r\n            return result;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 15,
                            "endLine": 30,
                            "snippet": {
                              "text": "{\n    public class Program\n    {\n        static int Main(string[] args)\n        {\n            int result = Parser.Default.ParseArguments<LoadOptions, CreateOptions>(args)\n                .MapResult(\n                    (LoadOptions options) => LoadSarifLogFile(options),\n                    (CreateOptions options) => CreateSarifLogFile(options),\n                    errors => 1);\n\n            return result;\n        }\n\n        /// <summary>\n        /// Loads a SARIF log file from disk and deserializes it into a code object.\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Main"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 340
                },
                "region": {
                  "startLine": 18,
                  "endLine": 27
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field LINE1_NO_NEWLINES is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 49,
                  "snippet": {
                    "text": "        private const string LINE1_NO_NEWLINES = \"abcd\";"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "endLine": 52,
                  "snippet": {
                    "text": "        private const string NEW_LINE = \"\\n\";\n        private const string INSERTION_POINT = \"\";\n        private const string CARRIAGE_RETURN = \"\\r\";\n        private const string LINE1_NO_NEWLINES = \"abcd\";\n        private const string INTERIOR_CHARACTERS = \"ij\";\n        private const string INTERIOR_NEWLINES = \"\\nefg\\r\";\n        private const string LINES_2_AND_3 = \"efg\\r\\nhijk\";\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 49,
                            "snippet": {
                              "text": "        private const string LINE1_NO_NEWLINES = \"abcd\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 46,
                            "endLine": 52,
                            "snippet": {
                              "text": "        private const string NEW_LINE = \"\\n\";\n        private const string INSERTION_POINT = \"\";\n        private const string CARRIAGE_RETURN = \"\\r\";\n        private const string LINE1_NO_NEWLINES = \"abcd\";\n        private const string INTERIOR_CHARACTERS = \"ij\";\n        private const string INTERIOR_NEWLINES = \"\\nefg\\r\";\n        private const string LINES_2_AND_3 = \"efg\\r\\nhijk\";\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: LINE1_NO_NEWLINES"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_javaScriptIdentifierRegex is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 211,
                  "snippet": {
                    "text": "        private static readonly Regex s_javaScriptIdentifierRegex = new Regex(s_javaScriptIdentifierPattern, RegexOptions.Compiled);"
                  }
                },
                "contextRegion": {
                  "startLine": 208,
                  "endLine": 214,
                  "snippet": {
                    "text": "        }\n\n        private static readonly string s_javaScriptIdentifierPattern = @\"^[$_\\p{L}][$_\\p{L}0-9]*$\";\n        private static readonly Regex s_javaScriptIdentifierRegex = new Regex(s_javaScriptIdentifierPattern, RegexOptions.Compiled);\n\n        private static bool TokenIsJavascriptIdentifier(string token)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 211,
                            "snippet": {
                              "text": "        private static readonly Regex s_javaScriptIdentifierRegex = new Regex(s_javaScriptIdentifierPattern, RegexOptions.Compiled);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 208,
                            "endLine": 214,
                            "snippet": {
                              "text": "        }\n\n        private static readonly string s_javaScriptIdentifierPattern = @\"^[$_\\p{L}][$_\\p{L}0-9]*$\";\n        private static readonly Regex s_javaScriptIdentifierRegex = new Regex(s_javaScriptIdentifierPattern, RegexOptions.Compiled);\n\n        private static bool TokenIsJavascriptIdentifier(string token)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_javaScriptIdentifierRegex"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 211
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 10,
          "message": {
            "text": "The catch block at [AnalyzeCommandBase.cs](1) line [64](1) handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 64,
                  "endLine": 69,
                  "snippet": {
                    "text": "                catch (Exception ex)\r\n                {\r\n                    // These exceptions escaped our net and must be logged here                    \r\n                    RuntimeErrors |= Errors.LogUnhandledEngineException(this.rootContext, ex);\r\n                    ExecutionException = ex;\r\n                    return FAILURE;"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "endLine": 72,
                  "snippet": {
                    "text": "                    ExecutionException = ex;\n                    return FAILURE;\n                }\n                catch (Exception ex)\n                {\n                    // These exceptions escaped our net and must be logged here                    \n                    RuntimeErrors |= Errors.LogUnhandledEngineException(this.rootContext, ex);\n                    ExecutionException = ex;\n                    return FAILURE;\n                }\n                finally\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 190
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 69,
                            "snippet": {
                              "text": "                catch (Exception ex)\r\n                {\r\n                    // These exceptions escaped our net and must be logged here                    \r\n                    RuntimeErrors |= Errors.LogUnhandledEngineException(this.rootContext, ex);\r\n                    ExecutionException = ex;\r\n                    return FAILURE;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 61,
                            "endLine": 72,
                            "snippet": {
                              "text": "                    ExecutionException = ex;\n                    return FAILURE;\n                }\n                catch (Exception ex)\n                {\n                    // These exceptions escaped our net and must be logged here                    \n                    RuntimeErrors |= Errors.LogUnhandledEngineException(this.rootContext, ex);\n                    ExecutionException = ex;\n                    return FAILURE;\n                }\n                finally\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 64,
                  "endLine": 69
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method CreateStackFrame() in [SarifVersionOneToCurrentVisitor.cs](1) can dereference a null pointer on line [1184](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 149
                },
                "region": {
                  "startLine": 1184,
                  "snippet": {
                    "text": "            stackFrame.Location = CreateLocation(v1StackFrame.FullyQualifiedLogicalName,"
                  }
                },
                "contextRegion": {
                  "startLine": 1181,
                  "endLine": 1187,
                  "snippet": {
                    "text": "                };\n            }\n\n            stackFrame.Location = CreateLocation(v1StackFrame.FullyQualifiedLogicalName,\n                                                 v1StackFrame.LogicalLocationKey,\n                                                 v1StackFrame.Message,\n                                                 v1StackFrame.Uri,\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 149
                          },
                          "region": {
                            "startLine": 1171,
                            "snippet": {
                              "text": "            StackFrame stackFrame = null;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1168,
                            "endLine": 1174,
                            "snippet": {
                              "text": "\n        internal StackFrame CreateStackFrame(StackFrameVersionOne v1StackFrame)\n        {\n            StackFrame stackFrame = null;\n\n            if (v1StackFrame != null)\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "stackFrame = null : stackFrame is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 149
                          },
                          "region": {
                            "startLine": 1173,
                            "snippet": {
                              "text": "            if (v1StackFrame != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1170,
                            "endLine": 1176,
                            "snippet": {
                              "text": "        {\n            StackFrame stackFrame = null;\n\n            if (v1StackFrame != null)\n            {\n                stackFrame = new StackFrame\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 149
                          },
                          "region": {
                            "startLine": 1184,
                            "snippet": {
                              "text": "            stackFrame.Location = CreateLocation(v1StackFrame.FullyQualifiedLogicalName,"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1181,
                            "endLine": 1187,
                            "snippet": {
                              "text": "                };\n            }\n\n            stackFrame.Location = CreateLocation(v1StackFrame.FullyQualifiedLogicalName,\n                                                 v1StackFrame.LogicalLocationKey,\n                                                 v1StackFrame.Message,\n                                                 v1StackFrame.Uri,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "stackFrame.set_Location(...) : stackFrame is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 149
                },
                "region": {
                  "startLine": 1184
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method NormalizeEntries() in [TSLintLogReader.cs](1) can dereference a null pointer on line [110](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 844
                },
                "region": {
                  "startLine": 110,
                  "snippet": {
                    "text": "                            lineInfo.LinePosition,"
                  }
                },
                "contextRegion": {
                  "startLine": 107,
                  "endLine": 113,
                  "snippet": {
                    "text": "                            CultureInfo.InvariantCulture,\n                            \"({0}, {1}): The JSON value should be a JObject, but is a {2}.\",\n                            lineInfo.LineNumber,\n                            lineInfo.LinePosition,\n                            entryToken.GetType().Name));\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 96,
                            "snippet": {
                              "text": "            foreach (JToken entryToken in entries)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 93,
                            "endLine": 99,
                            "snippet": {
                              "text": "\n        private void NormalizeEntries(JArray entries)\n        {\n            foreach (JToken entryToken in entries)\n            {\n                if (entryToken is JObject entry)\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 98,
                            "snippet": {
                              "text": "                if (entryToken is JObject entry)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 95,
                            "endLine": 101,
                            "snippet": {
                              "text": "        {\n            foreach (JToken entryToken in entries)\n            {\n                if (entryToken is JObject entry)\n                {\n                    NormalizeEntry(entry);\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 104,
                            "snippet": {
                              "text": "                    var lineInfo = entryToken as IJsonLineInfo;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 101,
                            "endLine": 107,
                            "snippet": {
                              "text": "                }\n                else\n                {\n                    var lineInfo = entryToken as IJsonLineInfo;\n                    throw new Exception(\n                        string.Format(\n                            CultureInfo.InvariantCulture,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "lineInfo = null : lineInfo is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 104,
                            "snippet": {
                              "text": "                    var lineInfo = entryToken as IJsonLineInfo;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 101,
                            "endLine": 107,
                            "snippet": {
                              "text": "                }\n                else\n                {\n                    var lineInfo = entryToken as IJsonLineInfo;\n                    throw new Exception(\n                        string.Format(\n                            CultureInfo.InvariantCulture,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 110,
                            "snippet": {
                              "text": "                            lineInfo.LinePosition,"
                            }
                          },
                          "contextRegion": {
                            "startLine": 107,
                            "endLine": 113,
                            "snippet": {
                              "text": "                            CultureInfo.InvariantCulture,\n                            \"({0}, {1}): The JSON value should be a JObject, but is a {2}.\",\n                            lineInfo.LineNumber,\n                            lineInfo.LinePosition,\n                            entryToken.GetType().Name));\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "lineInfo.get_LinePosition() : lineInfo is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 844
                },
                "region": {
                  "startLine": 110
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextFloat() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 47,
                  "snippet": {
                    "text": "            || mrg0.nextFloat() != mrg1.nextFloat()"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "endLine": 50,
                  "snippet": {
                    "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 47,
                            "snippet": {
                              "text": "            || mrg0.nextFloat() != mrg1.nextFloat()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 44,
                            "endLine": 50,
                            "snippet": {
                              "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextFloat()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextFloat() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 47,
                  "snippet": {
                    "text": "            || mrg0.nextFloat() != mrg1.nextFloat()"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "endLine": 50,
                  "snippet": {
                    "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 47,
                            "snippet": {
                              "text": "            || mrg0.nextFloat() != mrg1.nextFloat()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 44,
                            "endLine": 50,
                            "snippet": {
                              "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextFloat()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method NormalizeFixProperty() in [TSLintLogReader.cs](1) can dereference a null pointer on line [148](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 844
                },
                "region": {
                  "startLine": 148,
                  "snippet": {
                    "text": "                        lineInfo.LinePosition,"
                  }
                },
                "contextRegion": {
                  "startLine": 145,
                  "endLine": 151,
                  "snippet": {
                    "text": "                        CultureInfo.InvariantCulture,\n                        \"({0}, {1}): The value of the 'fix' property should be either a JObject or a JArray, but is a {2}.\",\n                        lineInfo.LineNumber,\n                        lineInfo.LinePosition,\n                        fixValueToken.GetType().Name));\n            }\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 128,
                            "snippet": {
                              "text": "            if (fixValueToken is JObject fixValueObject)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 125,
                            "endLine": 131,
                            "snippet": {
                              "text": "        private static void NormalizeFixProperty(JProperty fixProperty)\n        {\n            var fixValueToken = fixProperty.Value;\n            if (fixValueToken is JObject fixValueObject)\n            {\n                JProperty innerReplacementsProperty = fixValueObject.Property(\"innerReplacements\");\n                if (innerReplacementsProperty?.Value is JArray innerReplacementsArray)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 140,
                            "snippet": {
                              "text": "            else if (!(fixValueToken is JArray))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 137,
                            "endLine": 143,
                            "snippet": {
                              "text": "                    fixProperty.Value = new JArray(fixValueToken);\n                }\n            }\n            else if (!(fixValueToken is JArray))\n            {\n                var lineInfo = fixValueToken as IJsonLineInfo;\n                throw new Exception(\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 142,
                            "snippet": {
                              "text": "                var lineInfo = fixValueToken as IJsonLineInfo;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 139,
                            "endLine": 145,
                            "snippet": {
                              "text": "            }\n            else if (!(fixValueToken is JArray))\n            {\n                var lineInfo = fixValueToken as IJsonLineInfo;\n                throw new Exception(\n                    string.Format(\n                        CultureInfo.InvariantCulture,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "lineInfo = null : lineInfo is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 142,
                            "snippet": {
                              "text": "                var lineInfo = fixValueToken as IJsonLineInfo;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 139,
                            "endLine": 145,
                            "snippet": {
                              "text": "            }\n            else if (!(fixValueToken is JArray))\n            {\n                var lineInfo = fixValueToken as IJsonLineInfo;\n                throw new Exception(\n                    string.Format(\n                        CultureInfo.InvariantCulture,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 844
                          },
                          "region": {
                            "startLine": 148,
                            "snippet": {
                              "text": "                        lineInfo.LinePosition,"
                            }
                          },
                          "contextRegion": {
                            "startLine": 145,
                            "endLine": 151,
                            "snippet": {
                              "text": "                        CultureInfo.InvariantCulture,\n                        \"({0}, {1}): The value of the 'fix' property should be either a JObject or a JArray, but is a {2}.\",\n                        lineInfo.LineNumber,\n                        lineInfo.LinePosition,\n                        fixValueToken.GetType().Name));\n            }\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "lineInfo.get_LinePosition() : lineInfo is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 844
                },
                "region": {
                  "startLine": 148
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method CreateFromStream() in [SparseReader.cs](1) fails to enable validation before parsing XML on line [73](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 35
                },
                "region": {
                  "startLine": 73,
                  "snippet": {
                    "text": "                xReader = XmlReader.Create(stream, settings);"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "endLine": 76,
                  "snippet": {
                    "text": "            XmlReader xReader = null;\n            try\n            {\n                xReader = XmlReader.Create(stream, settings);\n                xReader.MoveToContent(); // If this throws, we destroy the reader in the finally block below.\n                var sparseReader = new SparseReader(dispatchTable, xReader); // nothrow\n                xReader = null; // Ownership transfered to SparseReader; don't destroy here\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 35
                          },
                          "region": {
                            "startLine": 62,
                            "snippet": {
                              "text": "            var settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 59,
                            "endLine": 65,
                            "snippet": {
                              "text": "        /// </returns>\n        public static SparseReader CreateFromStream(SparseReaderDispatchTable dispatchTable, Stream stream, XmlSchemaSet schemaSet)\n        {\n            var settings = new XmlReaderSettings\n            {\n                DtdProcessing = DtdProcessing.Ignore,\n                CloseInput = true,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 35
                          },
                          "region": {
                            "startLine": 73,
                            "snippet": {
                              "text": "                xReader = XmlReader.Create(stream, settings);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 70,
                            "endLine": 76,
                            "snippet": {
                              "text": "            XmlReader xReader = null;\n            try\n            {\n                xReader = XmlReader.Create(stream, settings);\n                xReader.MoveToContent(); // If this throws, we destroy the reader in the finally block below.\n                var sparseReader = new SparseReader(dispatchTable, xReader); // nothrow\n                xReader = null; // Ownership transfered to SparseReader; don't destroy here\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 35
                },
                "region": {
                  "startLine": 73
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 482,
                  "endLine": 485,
                  "snippet": {
                    "text": "        private void Visit(MultiformatMessageString multiformatMessageString, string multiformatMessageStringPointer)\r\n        {\r\n            Analyze(multiformatMessageString, multiformatMessageStringPointer);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 479,
                  "endLine": 488,
                  "snippet": {
                    "text": "            Analyze(message, messagePointer);\n        }\n\n        private void Visit(MultiformatMessageString multiformatMessageString, string multiformatMessageStringPointer)\n        {\n            Analyze(multiformatMessageString, multiformatMessageStringPointer);\n        }\n\n        private void VisitReportingDescriptor(ReportingDescriptor reportingDescriptor, string reportingDescriptorPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 482,
                            "endLine": 485,
                            "snippet": {
                              "text": "        private void Visit(MultiformatMessageString multiformatMessageString, string multiformatMessageStringPointer)\r\n        {\r\n            Analyze(multiformatMessageString, multiformatMessageStringPointer);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 479,
                            "endLine": 488,
                            "snippet": {
                              "text": "            Analyze(message, messagePointer);\n        }\n\n        private void Visit(MultiformatMessageString multiformatMessageString, string multiformatMessageStringPointer)\n        {\n            Analyze(multiformatMessageString, multiformatMessageStringPointer);\n        }\n\n        private void VisitReportingDescriptor(ReportingDescriptor reportingDescriptor, string reportingDescriptorPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 482,
                  "endLine": 485
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function 1MyRandom() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 11,
                  "snippet": {
                    "text": "                super(seed);"
                  }
                },
                "contextRegion": {
                  "startLine": 8,
                  "endLine": 14,
                  "snippet": {
                    "text": "    public static void main(String[] args) {\n        class MyRandom extends Random {\n            public MyRandom(long seed) {\n                super(seed);\n            }\n\n            public int next(int bits) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 11,
                            "snippet": {
                              "text": "                super(seed);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 8,
                            "endLine": 14,
                            "snippet": {
                              "text": "    public static void main(String[] args) {\n        class MyRandom extends Random {\n            public MyRandom(long seed) {\n                super(seed);\n            }\n\n            public int next(int bits) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Random()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 10,
          "message": {
            "text": "The catch block at [ExportRulesMetadataCommandBase.cs](1) line [55](1) handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1089
                },
                "region": {
                  "startLine": 55,
                  "endLine": 57,
                  "snippet": {
                    "text": "            catch (Exception ex)\r\n            {\r\n                Console.Error.WriteLine(ex.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "endLine": 60,
                  "snippet": {
                    "text": "                result = SUCCESS;\n                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));\n            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1089
                          },
                          "region": {
                            "startLine": 55,
                            "endLine": 57,
                            "snippet": {
                              "text": "            catch (Exception ex)\r\n            {\r\n                Console.Error.WriteLine(ex.ToString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 52,
                            "endLine": 60,
                            "snippet": {
                              "text": "                result = SUCCESS;\n                Console.WriteLine(format + \" rules metadata exported to: \" + Path.GetFullPath(outputFilePath));\n            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1089
                },
                "region": {
                  "startLine": 55,
                  "endLine": 57
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "The function AddFilesFromDirectory() in [FileSpecifier.cs](1) reveals system data or debugging information by calling WriteLineAsync() on line [88](1). The information revealed by WriteLineAsync() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 556
                },
                "region": {
                  "startLine": 88,
                  "snippet": {
                    "text": "                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);"
                  }
                },
                "contextRegion": {
                  "startLine": 85,
                  "endLine": 91,
                  "snippet": {
                    "text": "                    }\n                    catch (UnauthorizedAccessException)\n                    {\n                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);\n                    }\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 113
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 556
                          },
                          "region": {
                            "startLine": 88,
                            "snippet": {
                              "text": "                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 85,
                            "endLine": 91,
                            "snippet": {
                              "text": "                    }\n                    catch (UnauthorizedAccessException)\n                    {\n                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);\n                    }\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLineAsync(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 113
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 556
                          },
                          "region": {
                            "startLine": 88,
                            "snippet": {
                              "text": "                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 85,
                            "endLine": 91,
                            "snippet": {
                              "text": "                    }\n                    catch (UnauthorizedAccessException)\n                    {\n                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);\n                    }\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLineAsync(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 113
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 556
                          },
                          "region": {
                            "startLine": 88,
                            "snippet": {
                              "text": "                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 85,
                            "endLine": 91,
                            "snippet": {
                              "text": "                    }\n                    catch (UnauthorizedAccessException)\n                    {\n                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);\n                    }\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLineAsync(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 6
                    },
                    {
                      "index": 9
                    },
                    {
                      "index": 10
                    },
                    {
                      "index": 11
                    },
                    {
                      "index": 12
                    },
                    {
                      "index": 113
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 556
                          },
                          "region": {
                            "startLine": 88,
                            "snippet": {
                              "text": "                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 85,
                            "endLine": 91,
                            "snippet": {
                              "text": "                    }\n                    catch (UnauthorizedAccessException)\n                    {\n                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);\n                    }\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLineAsync(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 556
                },
                "region": {
                  "startLine": 88
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method TokenIsJavascriptIdentifier() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 213,
                  "endLine": 216,
                  "snippet": {
                    "text": "        private static bool TokenIsJavascriptIdentifier(string token)\r\n        {\r\n            return s_javaScriptIdentifierRegex.IsMatch(token);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 219,
                  "snippet": {
                    "text": "        private static readonly string s_javaScriptIdentifierPattern = @\"^[$_\\p{L}][$_\\p{L}0-9]*$\";\n        private static readonly Regex s_javaScriptIdentifierRegex = new Regex(s_javaScriptIdentifierPattern, RegexOptions.Compiled);\n\n        private static bool TokenIsJavascriptIdentifier(string token)\n        {\n            return s_javaScriptIdentifierRegex.IsMatch(token);\n        }\n\n        private void Visit(SarifLog log, string logPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 216,
                            "snippet": {
                              "text": "        private static bool TokenIsJavascriptIdentifier(string token)\r\n        {\r\n            return s_javaScriptIdentifierRegex.IsMatch(token);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 210,
                            "endLine": 219,
                            "snippet": {
                              "text": "        private static readonly string s_javaScriptIdentifierPattern = @\"^[$_\\p{L}][$_\\p{L}0-9]*$\";\n        private static readonly Regex s_javaScriptIdentifierRegex = new Regex(s_javaScriptIdentifierPattern, RegexOptions.Compiled);\n\n        private static bool TokenIsJavascriptIdentifier(string token)\n        {\n            return s_javaScriptIdentifierRegex.IsMatch(token);\n        }\n\n        private void Visit(SarifLog log, string logPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: TokenIsJavascriptIdentifier"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 213,
                  "endLine": 216
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Interior_New_Line is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 71,
                  "snippet": {
                    "text": "        private readonly static Region s_Interior_New_Line = "
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "endLine": 74,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 2, StartColumn = 5, EndLine = 2, EndColumn = 5, CharOffset = 10, CharLength = 0 };\n\n        private readonly static Region s_Interior_New_Line = \n            new Region() { Snippet = new ArtifactContent() { Text = NEW_LINE },\n                           StartLine = 2, StartColumn = 5, EndLine = 3, EndColumn = 1, CharOffset = 10, CharLength = 1 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 71,
                            "snippet": {
                              "text": "        private readonly static Region s_Interior_New_Line = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 68,
                            "endLine": 74,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = INSERTION_POINT },\n                           StartLine = 2, StartColumn = 5, EndLine = 2, EndColumn = 5, CharOffset = 10, CharLength = 0 };\n\n        private readonly static Region s_Interior_New_Line = \n            new Region() { Snippet = new ArtifactContent() { Text = NEW_LINE },\n                           StartLine = 2, StartColumn = 5, EndLine = 3, EndColumn = 1, CharOffset = 10, CharLength = 1 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Interior_New_Line"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 71
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextLong() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "            || rg0.nextLong() != rg1.nextLong()"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "endLine": 36,
                  "snippet": {
                    "text": "        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 33,
                            "snippet": {
                              "text": "            || rg0.nextLong() != rg1.nextLong()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 30,
                            "endLine": 36,
                            "snippet": {
                              "text": "        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextLong()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 38
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextLong() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "            || rg0.nextLong() != rg1.nextLong()"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "endLine": 36,
                  "snippet": {
                    "text": "        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 33,
                            "snippet": {
                              "text": "            || rg0.nextLong() != rg1.nextLong()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 30,
                            "endLine": 36,
                            "snippet": {
                              "text": "        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextLong()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 38
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method RunConverter() in [SarifConverterTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 231
                },
                "region": {
                  "startLine": 143,
                  "endLine": 175,
                  "snippet": {
                    "text": "        private string RunConverter(StringBuilder sb, string toolFormat, string inputFileName)\r\n        {\r\n            string expectedFileName = inputFileName + \".sarif\";\r\n            string generatedFileName = inputFileName + \".actual.sarif\";\r\n\r\n            try\r\n            {\r\n                this.converter.ConvertToStandardFormat(toolFormat, inputFileName, generatedFileName, LoggingOptions.OverwriteExistingOutputFile | LoggingOptions.PrettyPrint);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                sb.AppendLine(string.Format(CultureInfo.InvariantCulture, \"The converter {0} threw an exception for input \\\"{1}\\\".\", toolFormat, inputFileName));\r\n                sb.AppendLine(ex.ToString());\r\n                return generatedFileName;\r\n            }\r\n\r\n            string expectedSarif = File.ReadAllText(expectedFileName);\r\n            PrereleaseCompatibilityTransformer.UpdateToCurrentVersion(expectedSarif, formatting: Formatting.Indented, out expectedSarif);\r\n\r\n            string actualSarif = File.ReadAllText(generatedFileName);\r\n\r\n            if (!AreEquivalent<SarifLog>(actualSarif, expectedSarif))\r\n            {\r\n                File.WriteAllText(expectedFileName, expectedSarif);\r\n                File.WriteAllText(generatedFileName, actualSarif);\r\n\r\n                string errorMessage = \"The output of the {0} converter did not match for input {1}.\";\r\n                sb.AppendLine(string.Format(CultureInfo.CurrentCulture, errorMessage, toolFormat, inputFileName));\r\n                sb.AppendLine(\"Check differences with:\");\r\n                sb.AppendLine(GenerateDiffCommand(toolFormat, expectedFileName, generatedFileName));\r\n            }\r\n            return generatedFileName;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 140,
                  "endLine": 177,
                  "snippet": {
                    "text": "            return sb.ToString();\n        }\n\n        private string RunConverter(StringBuilder sb, string toolFormat, string inputFileName)\n        {\n            string expectedFileName = inputFileName + \".sarif\";\n            string generatedFileName = inputFileName + \".actual.sarif\";\n\n            try\n            {\n                this.converter.ConvertToStandardFormat(toolFormat, inputFileName, generatedFileName, LoggingOptions.OverwriteExistingOutputFile | LoggingOptions.PrettyPrint);\n            }\n            catch (Exception ex)\n            {\n                sb.AppendLine(string.Format(CultureInfo.InvariantCulture, \"The converter {0} threw an exception for input \\\"{1}\\\".\", toolFormat, inputFileName));\n                sb.AppendLine(ex.ToString());\n                return generatedFileName;\n            }\n\n            string expectedSarif = File.ReadAllText(expectedFileName);\n            PrereleaseCompatibilityTransformer.UpdateToCurrentVersion(expectedSarif, formatting: Formatting.Indented, out expectedSarif);\n\n            string actualSarif = File.ReadAllText(generatedFileName);\n\n            if (!AreEquivalent<SarifLog>(actualSarif, expectedSarif))\n            {\n                File.WriteAllText(expectedFileName, expectedSarif);\n                File.WriteAllText(generatedFileName, actualSarif);\n\n                string errorMessage = \"The output of the {0} converter did not match for input {1}.\";\n                sb.AppendLine(string.Format(CultureInfo.CurrentCulture, errorMessage, toolFormat, inputFileName));\n                sb.AppendLine(\"Check differences with:\");\n                sb.AppendLine(GenerateDiffCommand(toolFormat, expectedFileName, generatedFileName));\n            }\n            return generatedFileName;\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 231
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 175,
                            "snippet": {
                              "text": "        private string RunConverter(StringBuilder sb, string toolFormat, string inputFileName)\r\n        {\r\n            string expectedFileName = inputFileName + \".sarif\";\r\n            string generatedFileName = inputFileName + \".actual.sarif\";\r\n\r\n            try\r\n            {\r\n                this.converter.ConvertToStandardFormat(toolFormat, inputFileName, generatedFileName, LoggingOptions.OverwriteExistingOutputFile | LoggingOptions.PrettyPrint);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                sb.AppendLine(string.Format(CultureInfo.InvariantCulture, \"The converter {0} threw an exception for input \\\"{1}\\\".\", toolFormat, inputFileName));\r\n                sb.AppendLine(ex.ToString());\r\n                return generatedFileName;\r\n            }\r\n\r\n            string expectedSarif = File.ReadAllText(expectedFileName);\r\n            PrereleaseCompatibilityTransformer.UpdateToCurrentVersion(expectedSarif, formatting: Formatting.Indented, out expectedSarif);\r\n\r\n            string actualSarif = File.ReadAllText(generatedFileName);\r\n\r\n            if (!AreEquivalent<SarifLog>(actualSarif, expectedSarif))\r\n            {\r\n                File.WriteAllText(expectedFileName, expectedSarif);\r\n                File.WriteAllText(generatedFileName, actualSarif);\r\n\r\n                string errorMessage = \"The output of the {0} converter did not match for input {1}.\";\r\n                sb.AppendLine(string.Format(CultureInfo.CurrentCulture, errorMessage, toolFormat, inputFileName));\r\n                sb.AppendLine(\"Check differences with:\");\r\n                sb.AppendLine(GenerateDiffCommand(toolFormat, expectedFileName, generatedFileName));\r\n            }\r\n            return generatedFileName;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 140,
                            "endLine": 177,
                            "snippet": {
                              "text": "            return sb.ToString();\n        }\n\n        private string RunConverter(StringBuilder sb, string toolFormat, string inputFileName)\n        {\n            string expectedFileName = inputFileName + \".sarif\";\n            string generatedFileName = inputFileName + \".actual.sarif\";\n\n            try\n            {\n                this.converter.ConvertToStandardFormat(toolFormat, inputFileName, generatedFileName, LoggingOptions.OverwriteExistingOutputFile | LoggingOptions.PrettyPrint);\n            }\n            catch (Exception ex)\n            {\n                sb.AppendLine(string.Format(CultureInfo.InvariantCulture, \"The converter {0} threw an exception for input \\\"{1}\\\".\", toolFormat, inputFileName));\n                sb.AppendLine(ex.ToString());\n                return generatedFileName;\n            }\n\n            string expectedSarif = File.ReadAllText(expectedFileName);\n            PrereleaseCompatibilityTransformer.UpdateToCurrentVersion(expectedSarif, formatting: Formatting.Indented, out expectedSarif);\n\n            string actualSarif = File.ReadAllText(generatedFileName);\n\n            if (!AreEquivalent<SarifLog>(actualSarif, expectedSarif))\n            {\n                File.WriteAllText(expectedFileName, expectedSarif);\n                File.WriteAllText(generatedFileName, actualSarif);\n\n                string errorMessage = \"The output of the {0} converter did not match for input {1}.\";\n                sb.AppendLine(string.Format(CultureInfo.CurrentCulture, errorMessage, toolFormat, inputFileName));\n                sb.AppendLine(\"Check differences with:\");\n                sb.AppendLine(GenerateDiffCommand(toolFormat, expectedFileName, generatedFileName));\n            }\n            return generatedFileName;\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: RunConverter"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 231
                },
                "region": {
                  "startLine": 143,
                  "endLine": 175
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 53,
                  "snippet": {
                    "text": "                Console.WriteLine(SdkResources.MSG_UnexpectedApplicationExit);"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "endLine": 56,
                  "snippet": {
                    "text": "            {\n                // One or more fatal conditions observed at runtime,\n                // so we'll report a catastrophic exit.\n                Console.WriteLine(SdkResources.MSG_UnexpectedApplicationExit);\n                Console.WriteLine(SdkResources.UnexpectedFatalRuntimeConditions + fatalConditions.ToString());\n                Console.WriteLine();\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 53,
                            "snippet": {
                              "text": "                Console.WriteLine(SdkResources.MSG_UnexpectedApplicationExit);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 50,
                            "endLine": 56,
                            "snippet": {
                              "text": "            {\n                // One or more fatal conditions observed at runtime,\n                // so we'll report a catastrophic exit.\n                Console.WriteLine(SdkResources.MSG_UnexpectedApplicationExit);\n                Console.WriteLine(SdkResources.UnexpectedFatalRuntimeConditions + fatalConditions.ToString());\n                Console.WriteLine();\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 3,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls runFinalizersOnExit()  on line [25](1). Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 25,
                  "snippet": {
                    "text": "        Runtime.runFinalizersOnExit(false);"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "endLine": 28,
                  "snippet": {
                    "text": "        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 25,
                            "snippet": {
                              "text": "        Runtime.runFinalizersOnExit(false);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 22,
                            "endLine": 28,
                            "snippet": {
                              "text": "        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "runFinalizersOnExit()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 3,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls runFinalizersOnExit()  on line [25](1). Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 25,
                  "snippet": {
                    "text": "        Runtime.runFinalizersOnExit(false);"
                  }
                },
                "contextRegion": {
                  "startLine": 22,
                  "endLine": 28,
                  "snippet": {
                    "text": "        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 25,
                            "snippet": {
                              "text": "        Runtime.runFinalizersOnExit(false);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 22,
                            "endLine": 28,
                            "snippet": {
                              "text": "        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "runFinalizersOnExit()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 75,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable2!!!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "endLine": 78,
                  "snippet": {
                    "text": "        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n        }\n\n        try {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 75,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable2!!!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 72,
                            "endLine": 78,
                            "snippet": {
                              "text": "        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n        }\n\n        try {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 75,
                  "snippet": {
                    "text": "            System.err.println(\"Unbelieveable2!!!\");"
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "endLine": 78,
                  "snippet": {
                    "text": "        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n        }\n\n        try {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 75,
                            "snippet": {
                              "text": "            System.err.println(\"Unbelieveable2!!!\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 72,
                            "endLine": 78,
                            "snippet": {
                              "text": "        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n        }\n\n        try {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "                Console.WriteLine(SdkResources.MSG_OneOrMoreInvalidTargets);"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "endLine": 48,
                  "snippet": {
                    "text": "\n            if ((runtimeConditions & RuntimeConditions.TargetNotValidToAnalyze) != 0)\n            {\n                Console.WriteLine(SdkResources.MSG_OneOrMoreInvalidTargets);\n                Console.WriteLine();\n            }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 45,
                            "snippet": {
                              "text": "                Console.WriteLine(SdkResources.MSG_OneOrMoreInvalidTargets);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 42,
                            "endLine": 48,
                            "snippet": {
                              "text": "\n            if ((runtimeConditions & RuntimeConditions.TargetNotValidToAnalyze) != 0)\n            {\n                Console.WriteLine(SdkResources.MSG_OneOrMoreInvalidTargets);\n                Console.WriteLine();\n            }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method NormalizeOptionallyEmittedDataToString() in [InsertOptionalDataVisitorTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 873
                },
                "region": {
                  "startLine": 438,
                  "endLine": 442,
                  "snippet": {
                    "text": "        private string NormalizeOptionallyEmittedDataToString(OptionallyEmittedData optionallyEmittedData)\r\n        {\r\n            string result = optionallyEmittedData.ToString();\r\n            return result.Replace(\", \", \"+\");\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 435,
                  "endLine": 444,
                  "snippet": {
                    "text": "            return message;\n        }\n    \n        private string NormalizeOptionallyEmittedDataToString(OptionallyEmittedData optionallyEmittedData)\n        {\n            string result = optionallyEmittedData.ToString();\n            return result.Replace(\", \", \"+\");\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 873
                          },
                          "region": {
                            "startLine": 438,
                            "endLine": 442,
                            "snippet": {
                              "text": "        private string NormalizeOptionallyEmittedDataToString(OptionallyEmittedData optionallyEmittedData)\r\n        {\r\n            string result = optionallyEmittedData.ToString();\r\n            return result.Replace(\", \", \"+\");\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 435,
                            "endLine": 444,
                            "snippet": {
                              "text": "            return message;\n        }\n    \n        private string NormalizeOptionallyEmittedDataToString(OptionallyEmittedData optionallyEmittedData)\n        {\n            string result = optionallyEmittedData.ToString();\n            return result.Replace(\", \", \"+\");\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: NormalizeOptionallyEmittedDataToString"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 873
                },
                "region": {
                  "startLine": 438,
                  "endLine": 442
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 114
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 114
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 114
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 114
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 114
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 114
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 366
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "            Console.WriteLine();\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\n        }\n\n        public void AnalyzingTarget(IAnalysisContext context)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 366
                          },
                          "region": {
                            "startLine": 29,
                            "snippet": {
                              "text": "            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 26,
                            "endLine": 32,
                            "snippet": {
                              "text": "            Console.WriteLine();\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\n        }\n\n        public void AnalyzingTarget(IAnalysisContext context)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 366
                },
                "region": {
                  "startLine": 29
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 35,
                  "snippet": {
                    "text": "            || rg0.nextDouble() != rg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "endLine": 38,
                  "snippet": {
                    "text": "            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 35,
                            "snippet": {
                              "text": "            || rg0.nextDouble() != rg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 32,
                            "endLine": 38,
                            "snippet": {
                              "text": "            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 40
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 35,
                  "snippet": {
                    "text": "            || rg0.nextDouble() != rg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "endLine": 38,
                  "snippet": {
                    "text": "            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 35,
                            "snippet": {
                              "text": "            || rg0.nextDouble() != rg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 32,
                            "endLine": 38,
                            "snippet": {
                              "text": "            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 40
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 12,
          "message": {
            "text": "The class UnknownEncodingException implements the `ISerializable` interface but does not declare the `[Serializable]` attribute, so it will not be serialized.\r\nClasses that implement the `ISerializable` interface but do not declare the `[Serializable]` attribute will not be serialized."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 301
                },
                "region": {
                  "startLine": 8,
                  "endLine": 14,
                  "snippet": {
                    "text": "    internal class UnknownEncodingException : Exception\r\n    {\r\n        public string EncodingName { get; set; }\r\n\r\n        public UnknownEncodingException() { }\r\n\r\n        public UnknownEncodingException(string encodingName)"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "endLine": 17,
                  "snippet": {
                    "text": "\nnamespace Microsoft.CodeAnalysis.Sarif.Visitors\n{\n    internal class UnknownEncodingException : Exception\n    {\n        public string EncodingName { get; set; }\n\n        public UnknownEncodingException() { }\n\n        public UnknownEncodingException(string encodingName)\n        {\n            EncodingName = encodingName;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 301
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 14,
                            "snippet": {
                              "text": "    internal class UnknownEncodingException : Exception\r\n    {\r\n        public string EncodingName { get; set; }\r\n\r\n        public UnknownEncodingException() { }\r\n\r\n        public UnknownEncodingException(string encodingName)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 5,
                            "endLine": 17,
                            "snippet": {
                              "text": "\nnamespace Microsoft.CodeAnalysis.Sarif.Visitors\n{\n    internal class UnknownEncodingException : Exception\n    {\n        public string EncodingName { get; set; }\n\n        public UnknownEncodingException() { }\n\n        public UnknownEncodingException(string encodingName)\n        {\n            EncodingName = encodingName;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Class: UnknownEncodingException"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 301
                },
                "region": {
                  "startLine": 8,
                  "endLine": 14
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 117
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 117
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 117
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 117
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 117
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 117
                    },
                    {
                      "index": 40
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 27,
          "message": {
            "text": "The call to ReadLine() at [SarifCurrentToVersionOneVisitor.cs](1) line [541](1) might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.\r\nAn attacker could cause the program to crash or otherwise become unavailable to legitimate users."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 541,
                  "snippet": {
                    "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 538,
                  "endLine": 544,
                  "snippet": {
                    "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 541,
                            "snippet": {
                              "text": "                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 538,
                            "endLine": 544,
                            "snippet": {
                              "text": "                        string sourceLine = string.Empty;\n\n                        // Read down to startLine (null return means EOF)\n                        for (int i = 1; i <= v2Region.StartLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                        if (sourceLine != null)\n                        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "ReadLine()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 541
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method ReportResults() in [ValidateCommand.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 105
                },
                "region": {
                  "startLine": 180,
                  "endLine": 188,
                  "snippet": {
                    "text": "        private static void ReportResults(\r\n            Result[] results,\r\n            IAnalysisLogger logger)\r\n        {\r\n            foreach (Result result in results)\r\n            {\r\n                ReportResult(result, logger);\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 177,
                  "endLine": 191,
                  "snippet": {
                    "text": "            }\n        }\n\n        private static void ReportResults(\n            Result[] results,\n            IAnalysisLogger logger)\n        {\n            foreach (Result result in results)\n            {\n                ReportResult(result, logger);\n            }\n        }\n\n        private static void ReportResult(\n            Result result,\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 105
                          },
                          "region": {
                            "startLine": 180,
                            "endLine": 188,
                            "snippet": {
                              "text": "        private static void ReportResults(\r\n            Result[] results,\r\n            IAnalysisLogger logger)\r\n        {\r\n            foreach (Result result in results)\r\n            {\r\n                ReportResult(result, logger);\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 177,
                            "endLine": 191,
                            "snippet": {
                              "text": "            }\n        }\n\n        private static void ReportResults(\n            Result[] results,\n            IAnalysisLogger logger)\n        {\n            foreach (Result result in results)\n            {\n                ReportResult(result, logger);\n            }\n        }\n\n        private static void ReportResult(\n            Result result,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: ReportResults"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 105
                },
                "region": {
                  "startLine": 180,
                  "endLine": 188
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 27,
          "message": {
            "text": "The call to ReadToEnd() at [ContrastSecurityConverter.cs](1) line [65](1) might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.\r\nAn attacker could cause the program to crash or otherwise become unavailable to legitimate users."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "                string prereleaseRuleDataLogText = streamReader.ReadToEnd();"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "endLine": 68,
                  "snippet": {
                    "text": "            using (var stream = assembly.GetManifestResourceStream(ContrastSecurityRulesData))\n            using (var streamReader = new StreamReader(stream))\n            {\n                string prereleaseRuleDataLogText = streamReader.ReadToEnd();\n                PrereleaseCompatibilityTransformer.UpdateToCurrentVersion(prereleaseRuleDataLogText, Newtonsoft.Json.Formatting.Indented, out string currentRuleDataLogText);\n                sarifLog = JsonConvert.DeserializeObject<SarifLog>(currentRuleDataLogText);\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 714
                          },
                          "region": {
                            "startLine": 65,
                            "snippet": {
                              "text": "                string prereleaseRuleDataLogText = streamReader.ReadToEnd();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 62,
                            "endLine": 68,
                            "snippet": {
                              "text": "            using (var stream = assembly.GetManifestResourceStream(ContrastSecurityRulesData))\n            using (var streamReader = new StreamReader(stream))\n            {\n                string prereleaseRuleDataLogText = streamReader.ReadToEnd();\n                PrereleaseCompatibilityTransformer.UpdateToCurrentVersion(prereleaseRuleDataLogText, Newtonsoft.Json.Formatting.Indented, out string currentRuleDataLogText);\n                sarifLog = JsonConvert.DeserializeObject<SarifLog>(currentRuleDataLogText);\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "ReadToEnd()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 65
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method NormalizeRawMessage() in [SemmleQlConverter.cs](1) can dereference a null pointer on line [242](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 690
                },
                "region": {
                  "startLine": 242,
                  "snippet": {
                    "text": "                sb.Append($\"[{embeddedLinksText}]({relatedLocations[linkIndex++].Id})\");"
                  }
                },
                "contextRegion": {
                  "startLine": 239,
                  "endLine": 245,
                  "snippet": {
                    "text": "                }\n\n                // Re-add the text portion of the link in brackets with the location id in parens, e.g. [link text](id)\n                sb.Append($\"[{embeddedLinksText}]({relatedLocations[linkIndex++].Id})\");\n\n                rawMessage = rawMessage.Substring(index + \"]]\".Length);\n                index = rawMessage.IndexOf(\"[[\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 690
                          },
                          "region": {
                            "startLine": 149,
                            "snippet": {
                              "text": "            List<Location> relatedLocations = null;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 146,
                            "endLine": 152,
                            "snippet": {
                              "text": "            //     relative://code/.../file1.cxx:176:4882:3\n            //     relative://code/.../file2.c:1873:50899:3\n            //     relative://code/.../file2.c:5783:154466:3\n            List<Location> relatedLocations = null;\n\n            var sb = new StringBuilder();\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "relatedLocations = null : relatedLocations is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 690
                          },
                          "region": {
                            "startLine": 156,
                            "snippet": {
                              "text": "            while (index > -1)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 153,
                            "endLine": 159,
                            "snippet": {
                              "text": "            int count = 0;\n            int linkIndex = 0;\n            int index = rawMessage.IndexOf(\"[[\");\n            while (index > -1)\n            {\n                sb.Append(rawMessage.Substring(0, index));\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 690
                          },
                          "region": {
                            "startLine": 175,
                            "snippet": {
                              "text": "                foreach (string embeddedLink in embeddedLinks)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 172,
                            "endLine": 178,
                            "snippet": {
                              "text": "\n                string[] embeddedLinks = embeddedLinksText.Split(new string[] { \"],[\" }, StringSplitOptions.None);\n\n                foreach (string embeddedLink in embeddedLinks)\n                {\n                    string[] tokens = embeddedLink.Split(new char[] { '\\\"' }, StringSplitOptions.RemoveEmptyEntries);\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 690
                          },
                          "region": {
                            "startLine": 242,
                            "snippet": {
                              "text": "                sb.Append($\"[{embeddedLinksText}]({relatedLocations[linkIndex++].Id})\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 239,
                            "endLine": 245,
                            "snippet": {
                              "text": "                }\n\n                // Re-add the text portion of the link in brackets with the location id in parens, e.g. [link text](id)\n                sb.Append($\"[{embeddedLinksText}]({relatedLocations[linkIndex++].Id})\");\n\n                rawMessage = rawMessage.Substring(index + \"]]\".Length);\n                index = rawMessage.IndexOf(\"[[\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "relatedLocations.get_Item(...) : relatedLocations is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 690
                },
                "region": {
                  "startLine": 242
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method MergeDictionaryInto() in [SarifLogMatcher.cs](1) can dereference a null pointer on line [364](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 730
                },
                "region": {
                  "startLine": 364,
                  "snippet": {
                    "text": "                    propertiesToMerge = propertyBagHolderToMerge.Properties;"
                  }
                },
                "contextRegion": {
                  "startLine": 361,
                  "endLine": 367,
                  "snippet": {
                    "text": "\n                    baseProperties = basePropertyBagHolder.Properties;\n                    basePropertyBagHolder.Properties = null;\n                    propertiesToMerge = propertyBagHolderToMerge.Properties;\n                    propertyBagHolderToMerge.Properties = null;\n                };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 730
                          },
                          "region": {
                            "startLine": 336,
                            "snippet": {
                              "text": "            foreach (KeyValuePair<T, S> pair in dictionaryToAdd)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 333,
                            "endLine": 339,
                            "snippet": {
                              "text": "            IEqualityComparer<S> duplicateCatch, \n            DictionaryMergeBehavior propertyBagMergeBehavior)\n        {\n            foreach (KeyValuePair<T, S> pair in dictionaryToAdd)\n            {\n\n                if (!baseDictionary.ContainsKey(pair.Key))\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 730
                          },
                          "region": {
                            "startLine": 339,
                            "snippet": {
                              "text": "                if (!baseDictionary.ContainsKey(pair.Key))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 336,
                            "endLine": 342,
                            "snippet": {
                              "text": "            foreach (KeyValuePair<T, S> pair in dictionaryToAdd)\n            {\n\n                if (!baseDictionary.ContainsKey(pair.Key))\n                {\n                    // The baseline does not contain the current dictionary value. This means\n                    // that we can transport all properties associated with the new value.\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 730
                          },
                          "region": {
                            "startLine": 357,
                            "snippet": {
                              "text": "                if (basePropertyBagHolder != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 354,
                            "endLine": 360,
                            "snippet": {
                              "text": "\n                basePropertyBagHolder = baseDictionary[pair.Key] as PropertyBagHolder;\n\n                if (basePropertyBagHolder != null)\n                {\n                    propertyBagHolderToMerge = pair.Value as PropertyBagHolder;\n                    Debug.Assert(propertyBagHolderToMerge != null);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 730
                          },
                          "region": {
                            "startLine": 359,
                            "snippet": {
                              "text": "                    propertyBagHolderToMerge = pair.Value as PropertyBagHolder;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 356,
                            "endLine": 362,
                            "snippet": {
                              "text": "\n                if (basePropertyBagHolder != null)\n                {\n                    propertyBagHolderToMerge = pair.Value as PropertyBagHolder;\n                    Debug.Assert(propertyBagHolderToMerge != null);\n\n                    baseProperties = basePropertyBagHolder.Properties;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "propertyBagHolderToMerge = null : propertyBagHolderToMerge is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 730
                          },
                          "region": {
                            "startLine": 359,
                            "snippet": {
                              "text": "                    propertyBagHolderToMerge = pair.Value as PropertyBagHolder;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 356,
                            "endLine": 362,
                            "snippet": {
                              "text": "\n                if (basePropertyBagHolder != null)\n                {\n                    propertyBagHolderToMerge = pair.Value as PropertyBagHolder;\n                    Debug.Assert(propertyBagHolderToMerge != null);\n\n                    baseProperties = basePropertyBagHolder.Properties;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 730
                          },
                          "region": {
                            "startLine": 364,
                            "snippet": {
                              "text": "                    propertiesToMerge = propertyBagHolderToMerge.Properties;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 361,
                            "endLine": 367,
                            "snippet": {
                              "text": "\n                    baseProperties = basePropertyBagHolder.Properties;\n                    basePropertyBagHolder.Properties = null;\n                    propertiesToMerge = propertyBagHolderToMerge.Properties;\n                    propertyBagHolderToMerge.Properties = null;\n                };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "propertyBagHolderToMerge.get_Properties() : propertyBagHolderToMerge is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 730
                },
                "region": {
                  "startLine": 364
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field _remappedFullyQualifiedName is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 353
                },
                "region": {
                  "startLine": 14,
                  "snippet": {
                    "text": "        private readonly string _remappedFullyQualifiedName = Guid.NewGuid().ToString();"
                  }
                },
                "contextRegion": {
                  "startLine": 11,
                  "endLine": 17,
                  "snippet": {
                    "text": "    public class UpdateIndicesFromLegacyDataVisitorTests\n    {\n        private readonly string _remappedUriBaseId = Guid.NewGuid().ToString();\n        private readonly string _remappedFullyQualifiedName = Guid.NewGuid().ToString();\n        private readonly Uri _remappedUri = new Uri(Guid.NewGuid().ToString(), UriKind.Relative);\n        private readonly string _remappedFullyQualifiedLogicalName = Guid.NewGuid().ToString();\n        private readonly Result _result;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 353
                          },
                          "region": {
                            "startLine": 14,
                            "snippet": {
                              "text": "        private readonly string _remappedFullyQualifiedName = Guid.NewGuid().ToString();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 11,
                            "endLine": 17,
                            "snippet": {
                              "text": "    public class UpdateIndicesFromLegacyDataVisitorTests\n    {\n        private readonly string _remappedUriBaseId = Guid.NewGuid().ToString();\n        private readonly string _remappedFullyQualifiedName = Guid.NewGuid().ToString();\n        private readonly Uri _remappedUri = new Uri(Guid.NewGuid().ToString(), UriKind.Relative);\n        private readonly string _remappedFullyQualifiedLogicalName = Guid.NewGuid().ToString();\n        private readonly Result _result;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: _remappedFullyQualifiedName"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 353
                },
                "region": {
                  "startLine": 14
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 14,
          "message": {
            "text": "The method GetRegionEndColumn() in [SarifCurrentToVersionOneVisitor.cs](1) can dereference a null pointer because it does not check the return value of ReadLine(), which might return null.\r\nThe program might dereference a null pointer because it does not check the return value of a function that might return null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 592,
                  "snippet": {
                    "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 589,
                  "endLine": 595,
                  "snippet": {
                    "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 587,
                            "snippet": {
                              "text": "                if (reader != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 584,
                            "endLine": 590,
                            "snippet": {
                              "text": "\n            using (StreamReader reader = GetFileStreamReader(uri, out Encoding encoding))\n            {\n                if (reader != null)\n                {\n                    string sourceLine = string.Empty;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 592,
                            "snippet": {
                              "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 589,
                            "endLine": 595,
                            "snippet": {
                              "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 592,
                            "snippet": {
                              "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 589,
                            "endLine": 595,
                            "snippet": {
                              "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 592,
                            "snippet": {
                              "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 589,
                            "endLine": 595,
                            "snippet": {
                              "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "sourceLine = ReadLine() : StreamReader.ReadLine may return NULL"
                        },
                        "annotations": [
                          {
                            "startLine": 592,
                            "message": {
                              "text": "sourceLine may be NULL"
                            }
                          }
                        ]
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 592,
                            "snippet": {
                              "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 589,
                            "endLine": 595,
                            "snippet": {
                              "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "goto"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 592,
                            "snippet": {
                              "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 589,
                            "endLine": 595,
                            "snippet": {
                              "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 592,
                            "snippet": {
                              "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 589,
                            "endLine": 595,
                            "snippet": {
                              "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 594,
                            "snippet": {
                              "text": "                    if (sourceLine != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 591,
                            "endLine": 597,
                            "snippet": {
                              "text": "                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n                        endColumn = sourceLine.Length >= v2Region.EndColumn\n                            ? v2Region.EndColumn\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 596,
                            "snippet": {
                              "text": "                        endColumn = sourceLine.Length >= v2Region.EndColumn"
                            }
                          },
                          "contextRegion": {
                            "startLine": 593,
                            "endLine": 599,
                            "snippet": {
                              "text": "\n                    if (sourceLine != null)\n                    {\n                        endColumn = sourceLine.Length >= v2Region.EndColumn\n                            ? v2Region.EndColumn\n                            : sourceLine.Length + 1;\n                    }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "sourceLine.get_Length() : sourceLine used without null check"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 592
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 472,
                  "endLine": 475,
                  "snippet": {
                    "text": "        private void Visit(LogicalLocation logicalLocation, string logicalLocationPointer)\r\n        {\r\n            Analyze(logicalLocation, logicalLocationPointer);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 469,
                  "endLine": 478,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(LogicalLocation logicalLocation, string logicalLocationPointer)\n        {\n            Analyze(logicalLocation, logicalLocationPointer);\n        }\n\n        private void Visit(Message message, string messagePointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 472,
                            "endLine": 475,
                            "snippet": {
                              "text": "        private void Visit(LogicalLocation logicalLocation, string logicalLocationPointer)\r\n        {\r\n            Analyze(logicalLocation, logicalLocationPointer);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 469,
                            "endLine": 478,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(LogicalLocation logicalLocation, string logicalLocationPointer)\n        {\n            Analyze(logicalLocation, logicalLocationPointer);\n        }\n\n        private void Visit(Message message, string messagePointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 472,
                  "endLine": 475
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 72,
                  "snippet": {
                    "text": "        srg2.setSeed(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "endLine": 75,
                  "snippet": {
                    "text": "        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 72,
                            "snippet": {
                              "text": "        srg2.setSeed(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 69,
                            "endLine": 75,
                            "snippet": {
                              "text": "        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "setSeed()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 14
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The function main() in [bannedAPIs.java](1) is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 72,
                  "snippet": {
                    "text": "        srg2.setSeed(31415926545L);"
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "endLine": 75,
                  "snippet": {
                    "text": "        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 72,
                            "snippet": {
                              "text": "        srg2.setSeed(31415926545L);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 69,
                            "endLine": 75,
                            "snippet": {
                              "text": "        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "setSeed()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 14
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_delimiters is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 690
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "        private static readonly string[] s_delimiters = new[] { \",\" };"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "    public class SemmleQLConverter : ToolFileConverterBase\n    {\n        // Semmle logs are CSV files\n        private static readonly string[] s_delimiters = new[] { \",\" };\n\n        // The fields are as follows:\n        private enum FieldIndex\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 690
                          },
                          "region": {
                            "startLine": 19,
                            "snippet": {
                              "text": "        private static readonly string[] s_delimiters = new[] { \",\" };"
                            }
                          },
                          "contextRegion": {
                            "startLine": 16,
                            "endLine": 22,
                            "snippet": {
                              "text": "    public class SemmleQLConverter : ToolFileConverterBase\n    {\n        // Semmle logs are CSV files\n        private static readonly string[] s_delimiters = new[] { \",\" };\n\n        // The fields are as follows:\n        private enum FieldIndex\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_delimiters"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 690
                },
                "region": {
                  "startLine": 19
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 25,
          "message": {
            "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "                        using (var md5Cng = MD5.Create())"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "endLine": 29,
                  "snippet": {
                    "text": "                        string md5, sha1, sha256;\n                        byte[] checksum;\n\n                        using (var md5Cng = MD5.Create())\n                        {\n                            checksum = md5Cng.ComputeHash(bufferedStream);\n                            md5 = BitConverter.ToString(checksum).Replace(\"-\", string.Empty);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 26,
                            "snippet": {
                              "text": "                        using (var md5Cng = MD5.Create())"
                            }
                          },
                          "contextRegion": {
                            "startLine": 23,
                            "endLine": 29,
                            "snippet": {
                              "text": "                        string md5, sha1, sha256;\n                        byte[] checksum;\n\n                        using (var md5Cng = MD5.Create())\n                        {\n                            checksum = md5Cng.ComputeHash(bufferedStream);\n                            md5 = BitConverter.ToString(checksum).Replace(\"-\", string.Empty);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 26
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 118
                    },
                    {
                      "index": 119
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 118
                    },
                    {
                      "index": 119
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 118
                    },
                    {
                      "index": 119
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 118
                    },
                    {
                      "index": 119
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Line_3 is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 99,
                  "snippet": {
                    "text": "        private readonly static Region s_Line_3 = "
                  }
                },
                "contextRegion": {
                  "startLine": 96,
                  "endLine": 102,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE },\n                           StartLine = 1, StartColumn = 1, EndLine = 4, EndColumn = 4, CharOffset = 0, CharLength = 20 };\n\n        private readonly static Region s_Line_3 = \n            new Region() { Snippet = new ArtifactContent() { Text = LINE3 },\n                           StartLine = 3, StartColumn = 1, EndLine = 3, EndColumn = 5, CharOffset = 11, CharLength = 4 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 99,
                            "snippet": {
                              "text": "        private readonly static Region s_Line_3 = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 96,
                            "endLine": 102,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE },\n                           StartLine = 1, StartColumn = 1, EndLine = 4, EndColumn = 4, CharOffset = 0, CharLength = 20 };\n\n        private readonly static Region s_Line_3 = \n            new Region() { Snippet = new ArtifactContent() { Text = LINE3 },\n                           StartLine = 3, StartColumn = 1, EndLine = 3, EndColumn = 5, CharOffset = 11, CharLength = 4 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Line_3"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 99
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method CreateEmptyList() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 423,
                  "endLine": 433,
                  "snippet": {
                    "text": "        private object CreateEmptyList(Type propertyType)\r\n        {\r\n            // The SARIF OM defines various properties as IList<T>. This abstract type\r\n            // cannot be instantiated directly. We will construct an instance of the \r\n            // concrete List<T> class, using the generic type argument from the OM.\r\n            // These constructed types are creatable via a parameterless constructor\r\n            // (which is what is ultimately invoked by Activator.CreateInstance).\r\n            var listType = typeof(List<>);\r\n            var constructedType = listType.MakeGenericType(propertyType.GenericTypeArguments[0]);\r\n            return Activator.CreateInstance(constructedType);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 420,
                  "endLine": 436,
                  "snippet": {
                    "text": "            method.Invoke(list, new [] { listElement});\n        }\n\n        private object CreateEmptyList(Type propertyType)\n        {\n            // The SARIF OM defines various properties as IList<T>. This abstract type\n            // cannot be instantiated directly. We will construct an instance of the \n            // concrete List<T> class, using the generic type argument from the OM.\n            // These constructed types are creatable via a parameterless constructor\n            // (which is what is ultimately invoked by Activator.CreateInstance).\n            var listType = typeof(List<>);\n            var constructedType = listType.MakeGenericType(propertyType.GenericTypeArguments[0]);\n            return Activator.CreateInstance(constructedType);\n        }\n\n        private object CreateEmptyDictionary(Type propertyType)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 423,
                            "endLine": 433,
                            "snippet": {
                              "text": "        private object CreateEmptyList(Type propertyType)\r\n        {\r\n            // The SARIF OM defines various properties as IList<T>. This abstract type\r\n            // cannot be instantiated directly. We will construct an instance of the \r\n            // concrete List<T> class, using the generic type argument from the OM.\r\n            // These constructed types are creatable via a parameterless constructor\r\n            // (which is what is ultimately invoked by Activator.CreateInstance).\r\n            var listType = typeof(List<>);\r\n            var constructedType = listType.MakeGenericType(propertyType.GenericTypeArguments[0]);\r\n            return Activator.CreateInstance(constructedType);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 420,
                            "endLine": 436,
                            "snippet": {
                              "text": "            method.Invoke(list, new [] { listElement});\n        }\n\n        private object CreateEmptyList(Type propertyType)\n        {\n            // The SARIF OM defines various properties as IList<T>. This abstract type\n            // cannot be instantiated directly. We will construct an instance of the \n            // concrete List<T> class, using the generic type argument from the OM.\n            // These constructed types are creatable via a parameterless constructor\n            // (which is what is ultimately invoked by Activator.CreateInstance).\n            var listType = typeof(List<>);\n            var constructedType = listType.MakeGenericType(propertyType.GenericTypeArguments[0]);\n            return Activator.CreateInstance(constructedType);\n        }\n\n        private object CreateEmptyDictionary(Type propertyType)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: CreateEmptyList"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 423,
                  "endLine": 433
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 21,
          "level": "note",
          "message": {
            "text": "The function GetType() in [PropertiesDictionaryExtensionMethods.cs](1) uses the variable <Replace key=\"PrimaryVar.name\"/> before it has been initialized.\r\nThe program can potentially use a variable before it has been initialized."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 168
                },
                "region": {
                  "startLine": 323,
                  "snippet": {
                    "text": "                propertyType = (Type)s_typesCache[typeName];"
                  }
                },
                "contextRegion": {
                  "startLine": 320,
                  "endLine": 326,
                  "snippet": {
                    "text": "            }\n            else\n            {\n                propertyType = (Type)s_typesCache[typeName];\n            }\n            return propertyType;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 168
                          },
                          "region": {
                            "startLine": 323,
                            "snippet": {
                              "text": "                propertyType = (Type)s_typesCache[typeName];"
                            }
                          },
                          "contextRegion": {
                            "startLine": 320,
                            "endLine": 326,
                            "snippet": {
                              "text": "            }\n            else\n            {\n                propertyType = (Type)s_typesCache[typeName];\n            }\n            return propertyType;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FieldAccess: s_typesCache"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 168
                          },
                          "region": {
                            "startLine": 342,
                            "snippet": {
                              "text": "        private static HybridDictionary s_typesCache = new HybridDictionary();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 339,
                            "endLine": 344,
                            "snippet": {
                              "text": "        private const string INTEGER_SET_ID = \"IntegerSet\";\n        internal const string PROPERTIES_ID = \"Properties\";\n\n        private static HybridDictionary s_typesCache = new HybridDictionary();\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_typesCache"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 168
                },
                "region": {
                  "startLine": 323
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 8,
          "message": {
            "text": "The function Invoke() in [Program.cs](1) sometimes fails to release a system resource allocated by StreamReader() on line 36.\r\nThe program can potentially fail to release a system resource."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 36,
                  "snippet": {
                    "text": "                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))"
                  }
                },
                "contextRegion": {
                  "startLine": 33,
                  "endLine": 39,
                  "snippet": {
                    "text": "                    serializer.ContractResolver = SarifDeferredContractResolver.Instance;\n                }\n\n                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))\n                {\n                    log = serializer.Deserialize<SarifLog>(reader);\n                }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 877
                          },
                          "region": {
                            "startLine": 36,
                            "snippet": {
                              "text": "                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 39,
                            "snippet": {
                              "text": "                    serializer.ContractResolver = SarifDeferredContractResolver.Instance;\n                }\n\n                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))\n                {\n                    log = serializer.Deserialize<SarifLog>(reader);\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 877
                          },
                          "region": {
                            "startLine": 36,
                            "snippet": {
                              "text": "                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 39,
                            "snippet": {
                              "text": "                    serializer.ContractResolver = SarifDeferredContractResolver.Instance;\n                }\n\n                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))\n                {\n                    log = serializer.Deserialize<SarifLog>(reader);\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "new StreamReader(...)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 877
                          },
                          "region": {
                            "startLine": 36,
                            "snippet": {
                              "text": "                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 33,
                            "endLine": 39,
                            "snippet": {
                              "text": "                    serializer.ContractResolver = SarifDeferredContractResolver.Instance;\n                }\n\n                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))\n                {\n                    log = serializer.Deserialize<SarifLog>(reader);\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "end scope : Resource leaked"
                        }
                      },
                      "kinds": [
                        "exit",
                        "scope"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 36
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "        if (rg0.nextInt() != rg1.nextInt()"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 30,
                            "snippet": {
                              "text": "        if (rg0.nextInt() != rg1.nextInt()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 27,
                            "endLine": 33,
                            "snippet": {
                              "text": "\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "        if (rg0.nextInt() != rg1.nextInt()"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 30,
                            "snippet": {
                              "text": "        if (rg0.nextInt() != rg1.nextInt()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 27,
                            "endLine": 33,
                            "snippet": {
                              "text": "\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 68,
                  "snippet": {
                    "text": "                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");"
                  }
                },
                "contextRegion": {
                  "startLine": 65,
                  "endLine": 71,
                  "snippet": {
                    "text": "                    }\n\n                    Console.WriteLine();\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\n                }\n            }\n            catch (Exception ex) when (!Debugger.IsAttached)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 68,
                            "snippet": {
                              "text": "                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 65,
                            "endLine": 71,
                            "snippet": {
                              "text": "                    }\n\n                    Console.WriteLine();\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\n                }\n            }\n            catch (Exception ex) when (!Debugger.IsAttached)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 68
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Fragment_New_Lines_Only is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "        private readonly static Region s_Fragment_New_Lines_Only = "
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE_NEW_LINES_ONLY },\n                           StartLine = 1, StartColumn = 1, EndLine = 4, EndColumn = 1, CharOffset = 0, CharLength = 12 };\n\n        private readonly static Region s_Fragment_New_Lines_Only = \n            new Region() { Snippet = new ArtifactContent() { Text = FRAGMENT_NEW_LINES_ONLY },\n                           StartLine = 1, StartColumn = 4, EndLine = 4, EndColumn = 1, CharOffset = 3, CharLength = 9 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 121,
                            "snippet": {
                              "text": "        private readonly static Region s_Fragment_New_Lines_Only = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 118,
                            "endLine": 124,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE_NEW_LINES_ONLY },\n                           StartLine = 1, StartColumn = 1, EndLine = 4, EndColumn = 1, CharOffset = 0, CharLength = 12 };\n\n        private readonly static Region s_Fragment_New_Lines_Only = \n            new Region() { Snippet = new ArtifactContent() { Text = FRAGMENT_NEW_LINES_ONLY },\n                           StartLine = 1, StartColumn = 4, EndLine = 4, EndColumn = 1, CharOffset = 3, CharLength = 9 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Fragment_New_Lines_Only"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 121
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 35,
          "message": {
            "text": "The class BannedApis contains debug code, which can create unintended entry points in a deployed web application.\r\nDebug code can create unintended entry points in a deployed web application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 8,
                  "endLine": 93,
                  "snippet": {
                    "text": "    public static void main(String[] args) {\r\n        class MyRandom extends Random {\r\n            public MyRandom(long seed) {\r\n                super(seed);\r\n            }\r\n\r\n            public int next(int bits) {\r\n                return super.next(bits);\r\n            }\r\n        }\r\n\r\n        Runtime.runFinalizersOnExit(true);\r\n        System.runFinalizersOnExit(true);\r\n\r\n        double rd = Math.random();\r\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\r\n\r\n        Runtime.runFinalizersOnExit(false);\r\n        System.runFinalizersOnExit(false);\r\n\r\n        Random rg0 = new Random(31415926545L);\r\n        Random rg1 = new Random(31415926545L);\r\n        if (rg0.nextInt() != rg1.nextInt()\r\n            || rg0.nextInt(360) != rg1.nextInt(360)\r\n            // || rg0.next(51) != rg1.next(51)\r\n            || rg0.nextLong() != rg1.nextLong()\r\n            || rg0.nextFloat() != rg1.nextFloat()\r\n            || rg0.nextDouble() != rg1.nextDouble()\r\n            || rg0.nextGaussian() != rg1.nextGaussian()\r\n        ) {\r\n            System.err.println(\"Unbelieveable!\");\r\n        }\r\n\r\n        MyRandom mrg0 = new MyRandom(31415926545L);\r\n        MyRandom mrg1 = new MyRandom(31415926545L);\r\n        if (mrg0.nextInt() != mrg1.nextInt()\r\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\r\n            || mrg0.next(51) != mrg1.next(51)\r\n            || mrg0.nextLong() != mrg1.nextLong()\r\n            || mrg0.nextFloat() != mrg1.nextFloat()\r\n            || mrg0.nextDouble() != mrg1.nextDouble()\r\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\r\n        ) {\r\n            System.err.println(\"Unbelieveable!!\");\r\n        }\r\n\r\n        byte[] seed = SecureRandom.getSeed(13);\r\n        SecureRandom srg = new SecureRandom(seed);\r\n        SecureRandom srg2 = new SecureRandom(seed);\r\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\r\n        byte[] bytes = new byte[seed.length];\r\n        srg.nextBytes(bytes);\r\n        srg.setSeed(seed);\r\n        srg.nextBytes(seed);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(Arrays.toString(seed));\r\n            System.err.println(Arrays.toString(bytes));\r\n            System.err.println(\"Not that secure and random!!!\");\r\n        }\r\n        srg.setSeed(31415926545L);\r\n        srg.nextBytes(seed);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(\"Unbelieveable!!!\");\r\n        }\r\n        srg2.setSeed(31415926545L);\r\n        srg.nextBytes(bytes);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(\"Unbelieveable2!!!\");\r\n        }\r\n\r\n        try {\r\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\r\n            Thread.sleep(3000);\r\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\r\n            if (p != null) {\r\n                Thread.sleep(3600);\r\n                p.destroy();\r\n            }\r\n        }\r\n        catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        catch (Throwable t) {\r\n            t.printStackTrace();\r\n        }\r\n    }"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "endLine": 94,
                  "snippet": {
                    "text": "import java.util.Random;\n\nclass BannedApis {\n    public static void main(String[] args) {\n        class MyRandom extends Random {\n            public MyRandom(long seed) {\n                super(seed);\n            }\n\n            public int next(int bits) {\n                return super.next(bits);\n            }\n        }\n\n        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n\n        byte[] seed = SecureRandom.getSeed(13);\n        SecureRandom srg = new SecureRandom(seed);\n        SecureRandom srg2 = new SecureRandom(seed);\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\n        byte[] bytes = new byte[seed.length];\n        srg.nextBytes(bytes);\n        srg.setSeed(seed);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n        }\n\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n            }\n        }\n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 93,
                            "snippet": {
                              "text": "    public static void main(String[] args) {\r\n        class MyRandom extends Random {\r\n            public MyRandom(long seed) {\r\n                super(seed);\r\n            }\r\n\r\n            public int next(int bits) {\r\n                return super.next(bits);\r\n            }\r\n        }\r\n\r\n        Runtime.runFinalizersOnExit(true);\r\n        System.runFinalizersOnExit(true);\r\n\r\n        double rd = Math.random();\r\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\r\n\r\n        Runtime.runFinalizersOnExit(false);\r\n        System.runFinalizersOnExit(false);\r\n\r\n        Random rg0 = new Random(31415926545L);\r\n        Random rg1 = new Random(31415926545L);\r\n        if (rg0.nextInt() != rg1.nextInt()\r\n            || rg0.nextInt(360) != rg1.nextInt(360)\r\n            // || rg0.next(51) != rg1.next(51)\r\n            || rg0.nextLong() != rg1.nextLong()\r\n            || rg0.nextFloat() != rg1.nextFloat()\r\n            || rg0.nextDouble() != rg1.nextDouble()\r\n            || rg0.nextGaussian() != rg1.nextGaussian()\r\n        ) {\r\n            System.err.println(\"Unbelieveable!\");\r\n        }\r\n\r\n        MyRandom mrg0 = new MyRandom(31415926545L);\r\n        MyRandom mrg1 = new MyRandom(31415926545L);\r\n        if (mrg0.nextInt() != mrg1.nextInt()\r\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\r\n            || mrg0.next(51) != mrg1.next(51)\r\n            || mrg0.nextLong() != mrg1.nextLong()\r\n            || mrg0.nextFloat() != mrg1.nextFloat()\r\n            || mrg0.nextDouble() != mrg1.nextDouble()\r\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\r\n        ) {\r\n            System.err.println(\"Unbelieveable!!\");\r\n        }\r\n\r\n        byte[] seed = SecureRandom.getSeed(13);\r\n        SecureRandom srg = new SecureRandom(seed);\r\n        SecureRandom srg2 = new SecureRandom(seed);\r\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\r\n        byte[] bytes = new byte[seed.length];\r\n        srg.nextBytes(bytes);\r\n        srg.setSeed(seed);\r\n        srg.nextBytes(seed);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(Arrays.toString(seed));\r\n            System.err.println(Arrays.toString(bytes));\r\n            System.err.println(\"Not that secure and random!!!\");\r\n        }\r\n        srg.setSeed(31415926545L);\r\n        srg.nextBytes(seed);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(\"Unbelieveable!!!\");\r\n        }\r\n        srg2.setSeed(31415926545L);\r\n        srg.nextBytes(bytes);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(\"Unbelieveable2!!!\");\r\n        }\r\n\r\n        try {\r\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\r\n            Thread.sleep(3000);\r\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\r\n            if (p != null) {\r\n                Thread.sleep(3600);\r\n                p.destroy();\r\n            }\r\n        }\r\n        catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        catch (Throwable t) {\r\n            t.printStackTrace();\r\n        }\r\n    }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 5,
                            "endLine": 94,
                            "snippet": {
                              "text": "import java.util.Random;\n\nclass BannedApis {\n    public static void main(String[] args) {\n        class MyRandom extends Random {\n            public MyRandom(long seed) {\n                super(seed);\n            }\n\n            public int next(int bits) {\n                return super.next(bits);\n            }\n        }\n\n        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n\n        byte[] seed = SecureRandom.getSeed(13);\n        SecureRandom srg = new SecureRandom(seed);\n        SecureRandom srg2 = new SecureRandom(seed);\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\n        byte[] bytes = new byte[seed.length];\n        srg.nextBytes(bytes);\n        srg.setSeed(seed);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n        }\n\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n            }\n        }\n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: main"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 19,
                  "endLine": 93
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 35,
          "message": {
            "text": "The class BannedApis contains debug code, which can create unintended entry points in a deployed web application.\r\nDebug code can create unintended entry points in a deployed web application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 8,
                  "endLine": 93,
                  "snippet": {
                    "text": "    public static void main(String[] args) {\r\n        class MyRandom extends Random {\r\n            public MyRandom(long seed) {\r\n                super(seed);\r\n            }\r\n\r\n            public int next(int bits) {\r\n                return super.next(bits);\r\n            }\r\n        }\r\n\r\n        Runtime.runFinalizersOnExit(true);\r\n        System.runFinalizersOnExit(true);\r\n\r\n        double rd = Math.random();\r\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\r\n\r\n        Runtime.runFinalizersOnExit(false);\r\n        System.runFinalizersOnExit(false);\r\n\r\n        Random rg0 = new Random(31415926545L);\r\n        Random rg1 = new Random(31415926545L);\r\n        if (rg0.nextInt() != rg1.nextInt()\r\n            || rg0.nextInt(360) != rg1.nextInt(360)\r\n            // || rg0.next(51) != rg1.next(51)\r\n            || rg0.nextLong() != rg1.nextLong()\r\n            || rg0.nextFloat() != rg1.nextFloat()\r\n            || rg0.nextDouble() != rg1.nextDouble()\r\n            || rg0.nextGaussian() != rg1.nextGaussian()\r\n        ) {\r\n            System.err.println(\"Unbelieveable!\");\r\n        }\r\n\r\n        MyRandom mrg0 = new MyRandom(31415926545L);\r\n        MyRandom mrg1 = new MyRandom(31415926545L);\r\n        if (mrg0.nextInt() != mrg1.nextInt()\r\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\r\n            || mrg0.next(51) != mrg1.next(51)\r\n            || mrg0.nextLong() != mrg1.nextLong()\r\n            || mrg0.nextFloat() != mrg1.nextFloat()\r\n            || mrg0.nextDouble() != mrg1.nextDouble()\r\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\r\n        ) {\r\n            System.err.println(\"Unbelieveable!!\");\r\n        }\r\n\r\n        byte[] seed = SecureRandom.getSeed(13);\r\n        SecureRandom srg = new SecureRandom(seed);\r\n        SecureRandom srg2 = new SecureRandom(seed);\r\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\r\n        byte[] bytes = new byte[seed.length];\r\n        srg.nextBytes(bytes);\r\n        srg.setSeed(seed);\r\n        srg.nextBytes(seed);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(Arrays.toString(seed));\r\n            System.err.println(Arrays.toString(bytes));\r\n            System.err.println(\"Not that secure and random!!!\");\r\n        }\r\n        srg.setSeed(31415926545L);\r\n        srg.nextBytes(seed);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(\"Unbelieveable!!!\");\r\n        }\r\n        srg2.setSeed(31415926545L);\r\n        srg.nextBytes(bytes);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(\"Unbelieveable2!!!\");\r\n        }\r\n\r\n        try {\r\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\r\n            Thread.sleep(3000);\r\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\r\n            if (p != null) {\r\n                Thread.sleep(3600);\r\n                p.destroy();\r\n            }\r\n        }\r\n        catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        catch (Throwable t) {\r\n            t.printStackTrace();\r\n        }\r\n    }"
                  }
                },
                "contextRegion": {
                  "startLine": 5,
                  "endLine": 94,
                  "snippet": {
                    "text": "import java.util.Random;\n\nclass BannedApis {\n    public static void main(String[] args) {\n        class MyRandom extends Random {\n            public MyRandom(long seed) {\n                super(seed);\n            }\n\n            public int next(int bits) {\n                return super.next(bits);\n            }\n        }\n\n        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n\n        byte[] seed = SecureRandom.getSeed(13);\n        SecureRandom srg = new SecureRandom(seed);\n        SecureRandom srg2 = new SecureRandom(seed);\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\n        byte[] bytes = new byte[seed.length];\n        srg.nextBytes(bytes);\n        srg.setSeed(seed);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n        }\n\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n            }\n        }\n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 93,
                            "snippet": {
                              "text": "    public static void main(String[] args) {\r\n        class MyRandom extends Random {\r\n            public MyRandom(long seed) {\r\n                super(seed);\r\n            }\r\n\r\n            public int next(int bits) {\r\n                return super.next(bits);\r\n            }\r\n        }\r\n\r\n        Runtime.runFinalizersOnExit(true);\r\n        System.runFinalizersOnExit(true);\r\n\r\n        double rd = Math.random();\r\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\r\n\r\n        Runtime.runFinalizersOnExit(false);\r\n        System.runFinalizersOnExit(false);\r\n\r\n        Random rg0 = new Random(31415926545L);\r\n        Random rg1 = new Random(31415926545L);\r\n        if (rg0.nextInt() != rg1.nextInt()\r\n            || rg0.nextInt(360) != rg1.nextInt(360)\r\n            // || rg0.next(51) != rg1.next(51)\r\n            || rg0.nextLong() != rg1.nextLong()\r\n            || rg0.nextFloat() != rg1.nextFloat()\r\n            || rg0.nextDouble() != rg1.nextDouble()\r\n            || rg0.nextGaussian() != rg1.nextGaussian()\r\n        ) {\r\n            System.err.println(\"Unbelieveable!\");\r\n        }\r\n\r\n        MyRandom mrg0 = new MyRandom(31415926545L);\r\n        MyRandom mrg1 = new MyRandom(31415926545L);\r\n        if (mrg0.nextInt() != mrg1.nextInt()\r\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\r\n            || mrg0.next(51) != mrg1.next(51)\r\n            || mrg0.nextLong() != mrg1.nextLong()\r\n            || mrg0.nextFloat() != mrg1.nextFloat()\r\n            || mrg0.nextDouble() != mrg1.nextDouble()\r\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\r\n        ) {\r\n            System.err.println(\"Unbelieveable!!\");\r\n        }\r\n\r\n        byte[] seed = SecureRandom.getSeed(13);\r\n        SecureRandom srg = new SecureRandom(seed);\r\n        SecureRandom srg2 = new SecureRandom(seed);\r\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\r\n        byte[] bytes = new byte[seed.length];\r\n        srg.nextBytes(bytes);\r\n        srg.setSeed(seed);\r\n        srg.nextBytes(seed);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(Arrays.toString(seed));\r\n            System.err.println(Arrays.toString(bytes));\r\n            System.err.println(\"Not that secure and random!!!\");\r\n        }\r\n        srg.setSeed(31415926545L);\r\n        srg.nextBytes(seed);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(\"Unbelieveable!!!\");\r\n        }\r\n        srg2.setSeed(31415926545L);\r\n        srg.nextBytes(bytes);\r\n        if (Arrays.equals(seed, bytes)) {\r\n            System.err.println(\"Unbelieveable2!!!\");\r\n        }\r\n\r\n        try {\r\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\r\n            Thread.sleep(3000);\r\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\r\n            if (p != null) {\r\n                Thread.sleep(3600);\r\n                p.destroy();\r\n            }\r\n        }\r\n        catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        catch (Throwable t) {\r\n            t.printStackTrace();\r\n        }\r\n    }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 5,
                            "endLine": 94,
                            "snippet": {
                              "text": "import java.util.Random;\n\nclass BannedApis {\n    public static void main(String[] args) {\n        class MyRandom extends Random {\n            public MyRandom(long seed) {\n                super(seed);\n            }\n\n            public int next(int bits) {\n                return super.next(bits);\n            }\n        }\n\n        Runtime.runFinalizersOnExit(true);\n        System.runFinalizersOnExit(true);\n\n        double rd = Math.random();\n        System.out.println(\"Got \" + rd + \" from Math.random()\");\n\n        Runtime.runFinalizersOnExit(false);\n        System.runFinalizersOnExit(false);\n\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n        }\n\n        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n        }\n\n        byte[] seed = SecureRandom.getSeed(13);\n        SecureRandom srg = new SecureRandom(seed);\n        SecureRandom srg2 = new SecureRandom(seed);\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\n        byte[] bytes = new byte[seed.length];\n        srg.nextBytes(bytes);\n        srg.setSeed(seed);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable!!!\");\n        }\n        srg2.setSeed(31415926545L);\n        srg.nextBytes(bytes);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(\"Unbelieveable2!!!\");\n        }\n\n        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n            }\n        }\n        catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: main"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 19,
                  "endLine": 93
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_CurrentSchemaLocation is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 105
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "        private static string s_CurrentSchemaLocation = "
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "endLine": 51,
                  "snippet": {
                    "text": "            return context;\n        }\n\n        private static string s_CurrentSchemaLocation = \n            Path.Combine(Path.GetDirectoryName(typeof(ValidateCommand).Assembly.Location), \"sarif-schema-\" + VersionConstants.SchemaVersionAsPublishedToSchemaStoreOrg + \".json\");\n\n        protected override void AnalyzeTarget(\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 105
                          },
                          "region": {
                            "startLine": 48,
                            "snippet": {
                              "text": "        private static string s_CurrentSchemaLocation = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 45,
                            "endLine": 51,
                            "snippet": {
                              "text": "            return context;\n        }\n\n        private static string s_CurrentSchemaLocation = \n            Path.Combine(Path.GetDirectoryName(typeof(ValidateCommand).Assembly.Location), \"sarif-schema-\" + VersionConstants.SchemaVersionAsPublishedToSchemaStoreOrg + \".json\");\n\n        protected override void AnalyzeTarget(\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_CurrentSchemaLocation"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 105
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextFloat() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 47,
                  "snippet": {
                    "text": "            || mrg0.nextFloat() != mrg1.nextFloat()"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "endLine": 50,
                  "snippet": {
                    "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 47,
                            "snippet": {
                              "text": "            || mrg0.nextFloat() != mrg1.nextFloat()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 44,
                            "endLine": 50,
                            "snippet": {
                              "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextFloat()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 41
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextFloat() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 47,
                  "snippet": {
                    "text": "            || mrg0.nextFloat() != mrg1.nextFloat()"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "endLine": 50,
                  "snippet": {
                    "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 47,
                            "snippet": {
                              "text": "            || mrg0.nextFloat() != mrg1.nextFloat()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 44,
                            "endLine": 50,
                            "snippet": {
                              "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextFloat()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 41
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The expression `obj.Equals(null)` will always be false.\r\nThe expression `obj.Equals(null)` should always be false."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 813
                },
                "region": {
                  "startLine": 54,
                  "snippet": {
                    "text": "            Assert.False(a.Equals(null));"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "endLine": 57,
                  "snippet": {
                    "text": "            Assert.Equal(a.GetHashCode(), anotherA.GetHashCode());\n            Assert.True(a == anotherA);\n            Assert.False(a != anotherA);\n            Assert.False(a.Equals(null));\n            Assert.False(a.Equals(\"a string value\"));\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 813
                          },
                          "region": {
                            "startLine": 54,
                            "snippet": {
                              "text": "            Assert.False(a.Equals(null));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 51,
                            "endLine": 57,
                            "snippet": {
                              "text": "            Assert.Equal(a.GetHashCode(), anotherA.GetHashCode());\n            Assert.True(a == anotherA);\n            Assert.False(a != anotherA);\n            Assert.False(a.Equals(null));\n            Assert.False(a.Equals(\"a string value\"));\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: Equals"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 813
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_testFileDirectories is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 347
                },
                "region": {
                  "startLine": 190,
                  "snippet": {
                    "text": "        private static readonly string[] s_testFileDirectories = new string[]"
                  }
                },
                "contextRegion": {
                  "startLine": 187,
                  "endLine": 193,
                  "snippet": {
                    "text": "            sb.Length.Should().Be(0, sb.ToString());\n        }\n\n        private static readonly string[] s_testFileDirectories = new string[]\n        {\n            @\"v2\\ConverterTestData\",\n            @\"v2\\SpecExamples\",\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 347
                          },
                          "region": {
                            "startLine": 190,
                            "snippet": {
                              "text": "        private static readonly string[] s_testFileDirectories = new string[]"
                            }
                          },
                          "contextRegion": {
                            "startLine": 187,
                            "endLine": 193,
                            "snippet": {
                              "text": "            sb.Length.Should().Be(0, sb.ToString());\n        }\n\n        private static readonly string[] s_testFileDirectories = new string[]\n        {\n            @\"v2\\ConverterTestData\",\n            @\"v2\\SpecExamples\",\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_testFileDirectories"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 347
                },
                "region": {
                  "startLine": 190
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 23,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls exec() to execute a command. This call might allow an attacker to inject malicious commands.\r\nExecuting commands that include unvalidated user input can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 81,
                  "snippet": {
                    "text": "            Process p = Runtime.getRuntime().exec(\"java BannedApis\");"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "endLine": 84,
                  "snippet": {
                    "text": "        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 81,
                            "snippet": {
                              "text": "            Process p = Runtime.getRuntime().exec(\"java BannedApis\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 78,
                            "endLine": 84,
                            "snippet": {
                              "text": "        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "exec(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 46
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 23,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls exec() to execute a command. This call might allow an attacker to inject malicious commands.\r\nExecuting commands that include unvalidated user input can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 81,
                  "snippet": {
                    "text": "            Process p = Runtime.getRuntime().exec(\"java BannedApis\");"
                  }
                },
                "contextRegion": {
                  "startLine": 78,
                  "endLine": 84,
                  "snippet": {
                    "text": "        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 81,
                            "snippet": {
                              "text": "            Process p = Runtime.getRuntime().exec(\"java BannedApis\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 78,
                            "endLine": 84,
                            "snippet": {
                              "text": "        try {\n            System.out.println(\"There may be more coming.  See if you can hunt them all.\");\n            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "exec(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 46
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 35,
                  "snippet": {
                    "text": "            || rg0.nextDouble() != rg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "endLine": 38,
                  "snippet": {
                    "text": "            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 35,
                            "snippet": {
                              "text": "            || rg0.nextDouble() != rg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 32,
                            "endLine": 38,
                            "snippet": {
                              "text": "            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 35,
                  "snippet": {
                    "text": "            || rg0.nextDouble() != rg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 32,
                  "endLine": 38,
                  "snippet": {
                    "text": "            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 35,
                            "snippet": {
                              "text": "            || rg0.nextDouble() != rg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 32,
                            "endLine": 38,
                            "snippet": {
                              "text": "            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 557,
                  "endLine": 655,
                  "snippet": {
                    "text": "        private void Visit(Result result, string resultPointer)\r\n        {\r\n            Analyze(result, resultPointer);\r\n\r\n            if (result.AnalysisTarget != null)\r\n            {\r\n                Visit(result.AnalysisTarget, resultPointer.AtProperty(SarifPropertyName.AnalysisTarget));\r\n            }\r\n\r\n            if (result.Attachments != null)\r\n            {\r\n                string attachmentsPointer = resultPointer.AtProperty(SarifPropertyName.Attachments);\r\n\r\n                for (int i = 0; i < result.Attachments.Count; ++i)\r\n                {\r\n                    Visit(result.Attachments[i], attachmentsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.Locations != null)\r\n            {\r\n                string locationsPointer = resultPointer.AtProperty(SarifPropertyName.Locations);\r\n\r\n                for (int i = 0; i < result.Locations.Count; ++i)\r\n                {\r\n                    Visit(result.Locations[i], locationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.CodeFlows != null)\r\n            {\r\n                string codeFlowsPointer = resultPointer.AtProperty(SarifPropertyName.CodeFlows);\r\n\r\n                for (int i = 0; i < result.CodeFlows.Count; ++i)\r\n                {\r\n                    Visit(result.CodeFlows[i], codeFlowsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.Provenance != null)\r\n            {\r\n                Visit(result.Provenance, resultPointer.AtProperty(SarifPropertyName.Provenance));\r\n            }\r\n\r\n            if (result.Graphs != null)\r\n            {\r\n                string graphsPointer = resultPointer.AtProperty(SarifPropertyName.Graphs);\r\n\r\n                for (int i = 0; i < result.Graphs.Count; ++i)\r\n                {\r\n                    Visit(result.Graphs[i], graphsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.GraphTraversals != null)\r\n            {\r\n                string graphTraversalsPointer = resultPointer.AtProperty(SarifPropertyName.GraphTraversals);\r\n\r\n                for (int i = 0; i < result.GraphTraversals.Count; ++i)\r\n                {\r\n                    Visit(result.GraphTraversals[i], graphTraversalsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.Message != null)\r\n            {\r\n                Visit(result.Message, resultPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (result.Stacks != null)\r\n            {\r\n                string stacksPointer = resultPointer.AtProperty(SarifPropertyName.Stacks);\r\n\r\n                for (int i = 0; i < result.Stacks.Count; ++i)\r\n                {\r\n                    Visit(result.Stacks[i], stacksPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.RelatedLocations != null)\r\n            {\r\n                string relatedLocationsPointer = resultPointer.AtProperty(SarifPropertyName.RelatedLocations);\r\n\r\n                for (int i = 0; i < result.RelatedLocations.Count; ++i)\r\n                {\r\n                    Visit(result.RelatedLocations[i], relatedLocationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.Fixes != null)\r\n            {\r\n                string fixesPointer = resultPointer.AtProperty(SarifPropertyName.Fixes);\r\n\r\n                for (int i = 0; i < result.Fixes.Count; ++i)\r\n                {\r\n                    Visit(result.Fixes[i], fixesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 554,
                  "endLine": 658,
                  "snippet": {
                    "text": "            Analyze(region, regionPointer);\n        }\n\n        private void Visit(Result result, string resultPointer)\n        {\n            Analyze(result, resultPointer);\n\n            if (result.AnalysisTarget != null)\n            {\n                Visit(result.AnalysisTarget, resultPointer.AtProperty(SarifPropertyName.AnalysisTarget));\n            }\n\n            if (result.Attachments != null)\n            {\n                string attachmentsPointer = resultPointer.AtProperty(SarifPropertyName.Attachments);\n\n                for (int i = 0; i < result.Attachments.Count; ++i)\n                {\n                    Visit(result.Attachments[i], attachmentsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.Locations != null)\n            {\n                string locationsPointer = resultPointer.AtProperty(SarifPropertyName.Locations);\n\n                for (int i = 0; i < result.Locations.Count; ++i)\n                {\n                    Visit(result.Locations[i], locationsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.CodeFlows != null)\n            {\n                string codeFlowsPointer = resultPointer.AtProperty(SarifPropertyName.CodeFlows);\n\n                for (int i = 0; i < result.CodeFlows.Count; ++i)\n                {\n                    Visit(result.CodeFlows[i], codeFlowsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.Provenance != null)\n            {\n                Visit(result.Provenance, resultPointer.AtProperty(SarifPropertyName.Provenance));\n            }\n\n            if (result.Graphs != null)\n            {\n                string graphsPointer = resultPointer.AtProperty(SarifPropertyName.Graphs);\n\n                for (int i = 0; i < result.Graphs.Count; ++i)\n                {\n                    Visit(result.Graphs[i], graphsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.GraphTraversals != null)\n            {\n                string graphTraversalsPointer = resultPointer.AtProperty(SarifPropertyName.GraphTraversals);\n\n                for (int i = 0; i < result.GraphTraversals.Count; ++i)\n                {\n                    Visit(result.GraphTraversals[i], graphTraversalsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.Message != null)\n            {\n                Visit(result.Message, resultPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (result.Stacks != null)\n            {\n                string stacksPointer = resultPointer.AtProperty(SarifPropertyName.Stacks);\n\n                for (int i = 0; i < result.Stacks.Count; ++i)\n                {\n                    Visit(result.Stacks[i], stacksPointer.AtIndex(i));\n                }\n            }\n\n            if (result.RelatedLocations != null)\n            {\n                string relatedLocationsPointer = resultPointer.AtProperty(SarifPropertyName.RelatedLocations);\n\n                for (int i = 0; i < result.RelatedLocations.Count; ++i)\n                {\n                    Visit(result.RelatedLocations[i], relatedLocationsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.Fixes != null)\n            {\n                string fixesPointer = resultPointer.AtProperty(SarifPropertyName.Fixes);\n\n                for (int i = 0; i < result.Fixes.Count; ++i)\n                {\n                    Visit(result.Fixes[i], fixesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(IList<Notification> notifications, string parentPointer, string propertyName)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 557,
                            "endLine": 655,
                            "snippet": {
                              "text": "        private void Visit(Result result, string resultPointer)\r\n        {\r\n            Analyze(result, resultPointer);\r\n\r\n            if (result.AnalysisTarget != null)\r\n            {\r\n                Visit(result.AnalysisTarget, resultPointer.AtProperty(SarifPropertyName.AnalysisTarget));\r\n            }\r\n\r\n            if (result.Attachments != null)\r\n            {\r\n                string attachmentsPointer = resultPointer.AtProperty(SarifPropertyName.Attachments);\r\n\r\n                for (int i = 0; i < result.Attachments.Count; ++i)\r\n                {\r\n                    Visit(result.Attachments[i], attachmentsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.Locations != null)\r\n            {\r\n                string locationsPointer = resultPointer.AtProperty(SarifPropertyName.Locations);\r\n\r\n                for (int i = 0; i < result.Locations.Count; ++i)\r\n                {\r\n                    Visit(result.Locations[i], locationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.CodeFlows != null)\r\n            {\r\n                string codeFlowsPointer = resultPointer.AtProperty(SarifPropertyName.CodeFlows);\r\n\r\n                for (int i = 0; i < result.CodeFlows.Count; ++i)\r\n                {\r\n                    Visit(result.CodeFlows[i], codeFlowsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.Provenance != null)\r\n            {\r\n                Visit(result.Provenance, resultPointer.AtProperty(SarifPropertyName.Provenance));\r\n            }\r\n\r\n            if (result.Graphs != null)\r\n            {\r\n                string graphsPointer = resultPointer.AtProperty(SarifPropertyName.Graphs);\r\n\r\n                for (int i = 0; i < result.Graphs.Count; ++i)\r\n                {\r\n                    Visit(result.Graphs[i], graphsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.GraphTraversals != null)\r\n            {\r\n                string graphTraversalsPointer = resultPointer.AtProperty(SarifPropertyName.GraphTraversals);\r\n\r\n                for (int i = 0; i < result.GraphTraversals.Count; ++i)\r\n                {\r\n                    Visit(result.GraphTraversals[i], graphTraversalsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.Message != null)\r\n            {\r\n                Visit(result.Message, resultPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            if (result.Stacks != null)\r\n            {\r\n                string stacksPointer = resultPointer.AtProperty(SarifPropertyName.Stacks);\r\n\r\n                for (int i = 0; i < result.Stacks.Count; ++i)\r\n                {\r\n                    Visit(result.Stacks[i], stacksPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.RelatedLocations != null)\r\n            {\r\n                string relatedLocationsPointer = resultPointer.AtProperty(SarifPropertyName.RelatedLocations);\r\n\r\n                for (int i = 0; i < result.RelatedLocations.Count; ++i)\r\n                {\r\n                    Visit(result.RelatedLocations[i], relatedLocationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (result.Fixes != null)\r\n            {\r\n                string fixesPointer = resultPointer.AtProperty(SarifPropertyName.Fixes);\r\n\r\n                for (int i = 0; i < result.Fixes.Count; ++i)\r\n                {\r\n                    Visit(result.Fixes[i], fixesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 554,
                            "endLine": 658,
                            "snippet": {
                              "text": "            Analyze(region, regionPointer);\n        }\n\n        private void Visit(Result result, string resultPointer)\n        {\n            Analyze(result, resultPointer);\n\n            if (result.AnalysisTarget != null)\n            {\n                Visit(result.AnalysisTarget, resultPointer.AtProperty(SarifPropertyName.AnalysisTarget));\n            }\n\n            if (result.Attachments != null)\n            {\n                string attachmentsPointer = resultPointer.AtProperty(SarifPropertyName.Attachments);\n\n                for (int i = 0; i < result.Attachments.Count; ++i)\n                {\n                    Visit(result.Attachments[i], attachmentsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.Locations != null)\n            {\n                string locationsPointer = resultPointer.AtProperty(SarifPropertyName.Locations);\n\n                for (int i = 0; i < result.Locations.Count; ++i)\n                {\n                    Visit(result.Locations[i], locationsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.CodeFlows != null)\n            {\n                string codeFlowsPointer = resultPointer.AtProperty(SarifPropertyName.CodeFlows);\n\n                for (int i = 0; i < result.CodeFlows.Count; ++i)\n                {\n                    Visit(result.CodeFlows[i], codeFlowsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.Provenance != null)\n            {\n                Visit(result.Provenance, resultPointer.AtProperty(SarifPropertyName.Provenance));\n            }\n\n            if (result.Graphs != null)\n            {\n                string graphsPointer = resultPointer.AtProperty(SarifPropertyName.Graphs);\n\n                for (int i = 0; i < result.Graphs.Count; ++i)\n                {\n                    Visit(result.Graphs[i], graphsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.GraphTraversals != null)\n            {\n                string graphTraversalsPointer = resultPointer.AtProperty(SarifPropertyName.GraphTraversals);\n\n                for (int i = 0; i < result.GraphTraversals.Count; ++i)\n                {\n                    Visit(result.GraphTraversals[i], graphTraversalsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.Message != null)\n            {\n                Visit(result.Message, resultPointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            if (result.Stacks != null)\n            {\n                string stacksPointer = resultPointer.AtProperty(SarifPropertyName.Stacks);\n\n                for (int i = 0; i < result.Stacks.Count; ++i)\n                {\n                    Visit(result.Stacks[i], stacksPointer.AtIndex(i));\n                }\n            }\n\n            if (result.RelatedLocations != null)\n            {\n                string relatedLocationsPointer = resultPointer.AtProperty(SarifPropertyName.RelatedLocations);\n\n                for (int i = 0; i < result.RelatedLocations.Count; ++i)\n                {\n                    Visit(result.RelatedLocations[i], relatedLocationsPointer.AtIndex(i));\n                }\n            }\n\n            if (result.Fixes != null)\n            {\n                string fixesPointer = resultPointer.AtProperty(SarifPropertyName.Fixes);\n\n                for (int i = 0; i < result.Fixes.Count; ++i)\n                {\n                    Visit(result.Fixes[i], fixesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(IList<Notification> notifications, string parentPointer, string propertyName)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 557,
                  "endLine": 655
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 10,
          "message": {
            "text": "The catch block at [AnalyzeCommandBase.cs](1) line [577](1) handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 577,
                  "endLine": 579,
                  "snippet": {
                    "text": "                catch (Exception ex)\r\n                {\r\n                    RuntimeErrors |= Errors.LogUnhandledRuleExceptionAnalyzingTarget(disabledSkimmers, context, ex);"
                  }
                },
                "contextRegion": {
                  "startLine": 574,
                  "endLine": 582,
                  "snippet": {
                    "text": "                {\n                    skimmer.Analyze(context);\n                }\n                catch (Exception ex)\n                {\n                    RuntimeErrors |= Errors.LogUnhandledRuleExceptionAnalyzingTarget(disabledSkimmers, context, ex);\n                }\n            }\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 190
                          },
                          "region": {
                            "startLine": 577,
                            "endLine": 579,
                            "snippet": {
                              "text": "                catch (Exception ex)\r\n                {\r\n                    RuntimeErrors |= Errors.LogUnhandledRuleExceptionAnalyzingTarget(disabledSkimmers, context, ex);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 574,
                            "endLine": 582,
                            "snippet": {
                              "text": "                {\n                    skimmer.Analyze(context);\n                }\n                catch (Exception ex)\n                {\n                    RuntimeErrors |= Errors.LogUnhandledRuleExceptionAnalyzingTarget(disabledSkimmers, context, ex);\n                }\n            }\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 577,
                  "endLine": 579
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "endLine": 60,
                  "snippet": {
                    "text": "        byte[] seed = SecureRandom.getSeed(13);\n        SecureRandom srg = new SecureRandom(seed);\n        SecureRandom srg2 = new SecureRandom(seed);\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\n        byte[] bytes = new byte[seed.length];\n        srg.nextBytes(bytes);\n        srg.setSeed(seed);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 57,
                            "snippet": {
                              "text": "        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 54,
                            "endLine": 60,
                            "snippet": {
                              "text": "        byte[] seed = SecureRandom.getSeed(13);\n        SecureRandom srg = new SecureRandom(seed);\n        SecureRandom srg2 = new SecureRandom(seed);\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\n        byte[] bytes = new byte[seed.length];\n        srg.nextBytes(bytes);\n        srg.setSeed(seed);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "endLine": 60,
                  "snippet": {
                    "text": "        byte[] seed = SecureRandom.getSeed(13);\n        SecureRandom srg = new SecureRandom(seed);\n        SecureRandom srg2 = new SecureRandom(seed);\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\n        byte[] bytes = new byte[seed.length];\n        srg.nextBytes(bytes);\n        srg.setSeed(seed);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 57,
                            "snippet": {
                              "text": "        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 54,
                            "endLine": 60,
                            "snippet": {
                              "text": "        byte[] seed = SecureRandom.getSeed(13);\n        SecureRandom srg = new SecureRandom(seed);\n        SecureRandom srg2 = new SecureRandom(seed);\n        System.out.println(\"The default secure random algorithm is \" + srg.getAlgorithm());\n        byte[] bytes = new byte[seed.length];\n        srg.nextBytes(bytes);\n        srg.setSeed(seed);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 26,
          "message": {
            "text": "The class Program contains debug code, which can create unintended entry points in a deployed web application.\r\nDebug code can create unintended entry points in a deployed web application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 17,
                  "endLine": 94,
                  "snippet": {
                    "text": "        private static void Main(string[] args)\r\n        {\r\n            bool deferred = bool.Parse(args[0]);\r\n            string filePath = args[1];\r\n            \r\n            SarifLog log = null;\r\n\r\n            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");\r\n\r\n            Measure(() =>\r\n            {\r\n                // Use 'SarifDeferredContractResolver' and 'JsonPositionedTextReader' to load a deferred version of the same object graph.\r\n                JsonSerializer serializer = new JsonSerializer();\r\n\r\n                if (deferred)\r\n                {\r\n                    serializer.ContractResolver = SarifDeferredContractResolver.Instance;\r\n                }\r\n\r\n                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))\r\n                {\r\n                    log = serializer.Deserialize<SarifLog>(reader);\r\n                }\r\n\r\n                return $\"Loaded {filePath} ({(new FileInfo(filePath).Length / BytesPerMB):n1} MB)\";\r\n            });\r\n\r\n            // Enumerate collections as normal. Enumeration is efficient. Indexing to items works, but is slower, as a file seek is required per item read.\r\n            Run run = log.Runs[0];\r\n            Measure(() =>\r\n            {\r\n                int messageLengthTotal = 0;\r\n\r\n                // Fastest: Enumerate\r\n                foreach (Result result in run.Results)\r\n                {\r\n                    messageLengthTotal += result?.Message?.Text?.Length ?? 0;\r\n                }\r\n\r\n                // Slower: Count and indexer\r\n                //int messageCount = run.Results.Count;\r\n                //for (int i = 0; i < messageCount; ++i)\r\n                //{\r\n                //    Result result = run.Results[i];\r\n                //    messageLengthTotal += result?.Message?.Text?.Length ?? 0;\r\n                //}\r\n\r\n                return $\"Enumerated {run.Results.Count:n0} Results message total {messageLengthTotal / BytesPerMB:n0}MB\";\r\n            });\r\n\r\n            Measure(() =>\r\n            {\r\n                int fileCount = 0;\r\n                int uriLengthTotal = 0;\r\n\r\n                if (run.Artifacts != null)\r\n                {\r\n                    // Fastest: Enumerate\r\n                    foreach (Artifact artifact in run.Artifacts)\r\n                    {\r\n                        uriLengthTotal += artifact?.Location?.Uri?.OriginalString?.Length ?? 0;\r\n                        fileCount++;\r\n                    }\r\n\r\n                    // Slower: Keys and indexer\r\n                    //foreach (var key in run.Files.Keys)\r\n                    //{\r\n                    //    FileData file = run.Files[key];\r\n                    //    uriLengthTotal += file?.ArtifactLocation?.Uri?.OriginalString?.Length ?? 0;\r\n                    //    fileCount++;\r\n                    //}\r\n                } \r\n\r\n                return $\"Enumerated {fileCount:n0} Files, URI total {uriLengthTotal / BytesPerMB:n0}MB.\";\r\n            });\r\n\r\n            GC.KeepAlive(log);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "endLine": 97,
                  "snippet": {
                    "text": "    {\n        private const float BytesPerMB = (float)(1024 * 1024);\n\n        private static void Main(string[] args)\n        {\n            bool deferred = bool.Parse(args[0]);\n            string filePath = args[1];\n            \n            SarifLog log = null;\n\n            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");\n\n            Measure(() =>\n            {\n                // Use 'SarifDeferredContractResolver' and 'JsonPositionedTextReader' to load a deferred version of the same object graph.\n                JsonSerializer serializer = new JsonSerializer();\n\n                if (deferred)\n                {\n                    serializer.ContractResolver = SarifDeferredContractResolver.Instance;\n                }\n\n                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))\n                {\n                    log = serializer.Deserialize<SarifLog>(reader);\n                }\n\n                return $\"Loaded {filePath} ({(new FileInfo(filePath).Length / BytesPerMB):n1} MB)\";\n            });\n\n            // Enumerate collections as normal. Enumeration is efficient. Indexing to items works, but is slower, as a file seek is required per item read.\n            Run run = log.Runs[0];\n            Measure(() =>\n            {\n                int messageLengthTotal = 0;\n\n                // Fastest: Enumerate\n                foreach (Result result in run.Results)\n                {\n                    messageLengthTotal += result?.Message?.Text?.Length ?? 0;\n                }\n\n                // Slower: Count and indexer\n                //int messageCount = run.Results.Count;\n                //for (int i = 0; i < messageCount; ++i)\n                //{\n                //    Result result = run.Results[i];\n                //    messageLengthTotal += result?.Message?.Text?.Length ?? 0;\n                //}\n\n                return $\"Enumerated {run.Results.Count:n0} Results message total {messageLengthTotal / BytesPerMB:n0}MB\";\n            });\n\n            Measure(() =>\n            {\n                int fileCount = 0;\n                int uriLengthTotal = 0;\n\n                if (run.Artifacts != null)\n                {\n                    // Fastest: Enumerate\n                    foreach (Artifact artifact in run.Artifacts)\n                    {\n                        uriLengthTotal += artifact?.Location?.Uri?.OriginalString?.Length ?? 0;\n                        fileCount++;\n                    }\n\n                    // Slower: Keys and indexer\n                    //foreach (var key in run.Files.Keys)\n                    //{\n                    //    FileData file = run.Files[key];\n                    //    uriLengthTotal += file?.ArtifactLocation?.Uri?.OriginalString?.Length ?? 0;\n                    //    fileCount++;\n                    //}\n                } \n\n                return $\"Enumerated {fileCount:n0} Files, URI total {uriLengthTotal / BytesPerMB:n0}MB.\";\n            });\n\n            GC.KeepAlive(log);\n        }\n\n        private static void Measure(Func<string> action)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 877
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 94,
                            "snippet": {
                              "text": "        private static void Main(string[] args)\r\n        {\r\n            bool deferred = bool.Parse(args[0]);\r\n            string filePath = args[1];\r\n            \r\n            SarifLog log = null;\r\n\r\n            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");\r\n\r\n            Measure(() =>\r\n            {\r\n                // Use 'SarifDeferredContractResolver' and 'JsonPositionedTextReader' to load a deferred version of the same object graph.\r\n                JsonSerializer serializer = new JsonSerializer();\r\n\r\n                if (deferred)\r\n                {\r\n                    serializer.ContractResolver = SarifDeferredContractResolver.Instance;\r\n                }\r\n\r\n                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))\r\n                {\r\n                    log = serializer.Deserialize<SarifLog>(reader);\r\n                }\r\n\r\n                return $\"Loaded {filePath} ({(new FileInfo(filePath).Length / BytesPerMB):n1} MB)\";\r\n            });\r\n\r\n            // Enumerate collections as normal. Enumeration is efficient. Indexing to items works, but is slower, as a file seek is required per item read.\r\n            Run run = log.Runs[0];\r\n            Measure(() =>\r\n            {\r\n                int messageLengthTotal = 0;\r\n\r\n                // Fastest: Enumerate\r\n                foreach (Result result in run.Results)\r\n                {\r\n                    messageLengthTotal += result?.Message?.Text?.Length ?? 0;\r\n                }\r\n\r\n                // Slower: Count and indexer\r\n                //int messageCount = run.Results.Count;\r\n                //for (int i = 0; i < messageCount; ++i)\r\n                //{\r\n                //    Result result = run.Results[i];\r\n                //    messageLengthTotal += result?.Message?.Text?.Length ?? 0;\r\n                //}\r\n\r\n                return $\"Enumerated {run.Results.Count:n0} Results message total {messageLengthTotal / BytesPerMB:n0}MB\";\r\n            });\r\n\r\n            Measure(() =>\r\n            {\r\n                int fileCount = 0;\r\n                int uriLengthTotal = 0;\r\n\r\n                if (run.Artifacts != null)\r\n                {\r\n                    // Fastest: Enumerate\r\n                    foreach (Artifact artifact in run.Artifacts)\r\n                    {\r\n                        uriLengthTotal += artifact?.Location?.Uri?.OriginalString?.Length ?? 0;\r\n                        fileCount++;\r\n                    }\r\n\r\n                    // Slower: Keys and indexer\r\n                    //foreach (var key in run.Files.Keys)\r\n                    //{\r\n                    //    FileData file = run.Files[key];\r\n                    //    uriLengthTotal += file?.ArtifactLocation?.Uri?.OriginalString?.Length ?? 0;\r\n                    //    fileCount++;\r\n                    //}\r\n                } \r\n\r\n                return $\"Enumerated {fileCount:n0} Files, URI total {uriLengthTotal / BytesPerMB:n0}MB.\";\r\n            });\r\n\r\n            GC.KeepAlive(log);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 14,
                            "endLine": 97,
                            "snippet": {
                              "text": "    {\n        private const float BytesPerMB = (float)(1024 * 1024);\n\n        private static void Main(string[] args)\n        {\n            bool deferred = bool.Parse(args[0]);\n            string filePath = args[1];\n            \n            SarifLog log = null;\n\n            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");\n\n            Measure(() =>\n            {\n                // Use 'SarifDeferredContractResolver' and 'JsonPositionedTextReader' to load a deferred version of the same object graph.\n                JsonSerializer serializer = new JsonSerializer();\n\n                if (deferred)\n                {\n                    serializer.ContractResolver = SarifDeferredContractResolver.Instance;\n                }\n\n                using (JsonTextReader reader = (deferred ? new JsonPositionedTextReader(filePath) : new JsonTextReader(new StreamReader(filePath))))\n                {\n                    log = serializer.Deserialize<SarifLog>(reader);\n                }\n\n                return $\"Loaded {filePath} ({(new FileInfo(filePath).Length / BytesPerMB):n1} MB)\";\n            });\n\n            // Enumerate collections as normal. Enumeration is efficient. Indexing to items works, but is slower, as a file seek is required per item read.\n            Run run = log.Runs[0];\n            Measure(() =>\n            {\n                int messageLengthTotal = 0;\n\n                // Fastest: Enumerate\n                foreach (Result result in run.Results)\n                {\n                    messageLengthTotal += result?.Message?.Text?.Length ?? 0;\n                }\n\n                // Slower: Count and indexer\n                //int messageCount = run.Results.Count;\n                //for (int i = 0; i < messageCount; ++i)\n                //{\n                //    Result result = run.Results[i];\n                //    messageLengthTotal += result?.Message?.Text?.Length ?? 0;\n                //}\n\n                return $\"Enumerated {run.Results.Count:n0} Results message total {messageLengthTotal / BytesPerMB:n0}MB\";\n            });\n\n            Measure(() =>\n            {\n                int fileCount = 0;\n                int uriLengthTotal = 0;\n\n                if (run.Artifacts != null)\n                {\n                    // Fastest: Enumerate\n                    foreach (Artifact artifact in run.Artifacts)\n                    {\n                        uriLengthTotal += artifact?.Location?.Uri?.OriginalString?.Length ?? 0;\n                        fileCount++;\n                    }\n\n                    // Slower: Keys and indexer\n                    //foreach (var key in run.Files.Keys)\n                    //{\n                    //    FileData file = run.Files[key];\n                    //    uriLengthTotal += file?.ArtifactLocation?.Uri?.OriginalString?.Length ?? 0;\n                    //    fileCount++;\n                    //}\n                } \n\n                return $\"Enumerated {fileCount:n0} Files, URI total {uriLengthTotal / BytesPerMB:n0}MB.\";\n            });\n\n            GC.KeepAlive(log);\n        }\n\n        private static void Measure(Func<string> action)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Main"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 17,
                  "endLine": 94
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "endLine": 51,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 48,
                            "snippet": {
                              "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 45,
                            "endLine": 51,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "endLine": 51,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 48,
                            "snippet": {
                              "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 45,
                            "endLine": 51,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method AnalyzeUri() in [SARIF1015.UriMustBeAbsolute.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 562
                },
                "region": {
                  "startLine": 84,
                  "endLine": 101,
                  "snippet": {
                    "text": "        private void AnalyzeUri(string uriString, string pointer)\r\n        {\r\n            // If it's not a well-formed URI of _any_ kind, then don't bother triggering this rule.\r\n            // Rule SARIF1003, UrisMustBeValid, will catch it.\r\n            // Check for well-formedness first, before attempting to create a Uri object, to\r\n            // avoid having to do a try/catch. Unfortunately Uri.TryCreate will return true\r\n            // even for a malformed URI string.\r\n            if (uriString != null && Uri.IsWellFormedUriString(uriString, UriKind.RelativeOrAbsolute))\r\n            {\r\n                // Ok, it's a well-formed URI of some kind. But if it's not absolute, _now_ we\r\n                // can report it.\r\n                Uri uri = new Uri(uriString, UriKind.RelativeOrAbsolute);\r\n                if (!uri.IsAbsoluteUri)\r\n                {\r\n                    LogResult(pointer, nameof(RuleResources.SARIF1015_Default), uriString);\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "endLine": 103,
                  "snippet": {
                    "text": "            AnalyzeUri(uri?.OriginalString, pointer);\n        }\n\n        private void AnalyzeUri(string uriString, string pointer)\n        {\n            // If it's not a well-formed URI of _any_ kind, then don't bother triggering this rule.\n            // Rule SARIF1003, UrisMustBeValid, will catch it.\n            // Check for well-formedness first, before attempting to create a Uri object, to\n            // avoid having to do a try/catch. Unfortunately Uri.TryCreate will return true\n            // even for a malformed URI string.\n            if (uriString != null && Uri.IsWellFormedUriString(uriString, UriKind.RelativeOrAbsolute))\n            {\n                // Ok, it's a well-formed URI of some kind. But if it's not absolute, _now_ we\n                // can report it.\n                Uri uri = new Uri(uriString, UriKind.RelativeOrAbsolute);\n                if (!uri.IsAbsoluteUri)\n                {\n                    LogResult(pointer, nameof(RuleResources.SARIF1015_Default), uriString);\n                }\n            }\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 562
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 101,
                            "snippet": {
                              "text": "        private void AnalyzeUri(string uriString, string pointer)\r\n        {\r\n            // If it's not a well-formed URI of _any_ kind, then don't bother triggering this rule.\r\n            // Rule SARIF1003, UrisMustBeValid, will catch it.\r\n            // Check for well-formedness first, before attempting to create a Uri object, to\r\n            // avoid having to do a try/catch. Unfortunately Uri.TryCreate will return true\r\n            // even for a malformed URI string.\r\n            if (uriString != null && Uri.IsWellFormedUriString(uriString, UriKind.RelativeOrAbsolute))\r\n            {\r\n                // Ok, it's a well-formed URI of some kind. But if it's not absolute, _now_ we\r\n                // can report it.\r\n                Uri uri = new Uri(uriString, UriKind.RelativeOrAbsolute);\r\n                if (!uri.IsAbsoluteUri)\r\n                {\r\n                    LogResult(pointer, nameof(RuleResources.SARIF1015_Default), uriString);\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 81,
                            "endLine": 103,
                            "snippet": {
                              "text": "            AnalyzeUri(uri?.OriginalString, pointer);\n        }\n\n        private void AnalyzeUri(string uriString, string pointer)\n        {\n            // If it's not a well-formed URI of _any_ kind, then don't bother triggering this rule.\n            // Rule SARIF1003, UrisMustBeValid, will catch it.\n            // Check for well-formedness first, before attempting to create a Uri object, to\n            // avoid having to do a try/catch. Unfortunately Uri.TryCreate will return true\n            // even for a malformed URI string.\n            if (uriString != null && Uri.IsWellFormedUriString(uriString, UriKind.RelativeOrAbsolute))\n            {\n                // Ok, it's a well-formed URI of some kind. But if it's not absolute, _now_ we\n                // can report it.\n                Uri uri = new Uri(uriString, UriKind.RelativeOrAbsolute);\n                if (!uri.IsAbsoluteUri)\n                {\n                    LogResult(pointer, nameof(RuleResources.SARIF1015_Default), uriString);\n                }\n            }\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: AnalyzeUri"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 562
                },
                "region": {
                  "startLine": 84,
                  "endLine": 101
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method Main() in [Program.cs](1) can dereference a null pointer on line [45](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "            Run run = log.Runs[0];"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "endLine": 48,
                  "snippet": {
                    "text": "            });\n\n            // Enumerate collections as normal. Enumeration is efficient. Indexing to items works, but is slower, as a file seek is required per item read.\n            Run run = log.Runs[0];\n            Measure(() =>\n            {\n                int messageLengthTotal = 0;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 877
                          },
                          "region": {
                            "startLine": 22,
                            "snippet": {
                              "text": "            SarifLog log = null;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 19,
                            "endLine": 25,
                            "snippet": {
                              "text": "            bool deferred = bool.Parse(args[0]);\n            string filePath = args[1];\n            \n            SarifLog log = null;\n\n            Console.WriteLine($\"Loading {filePath}{(deferred ? \" (deferred)\" : \"\")}...\");\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "log = null : log is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 877
                          },
                          "region": {
                            "startLine": 45,
                            "snippet": {
                              "text": "            Run run = log.Runs[0];"
                            }
                          },
                          "contextRegion": {
                            "startLine": 42,
                            "endLine": 48,
                            "snippet": {
                              "text": "            });\n\n            // Enumerate collections as normal. Enumeration is efficient. Indexing to items works, but is slower, as a file seek is required per item read.\n            Run run = log.Runs[0];\n            Measure(() =>\n            {\n                int messageLengthTotal = 0;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "log.get_Runs() : log is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 877
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method GetPropertyFormatPattern() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 486,
                  "endLine": 492,
                  "snippet": {
                    "text": "        private string GetPropertyFormatPattern(string objectTypeName, string propertyName)\r\n        {\r\n            string jsonPropertyName = GetJsonNameFor(propertyName);\r\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\r\n\r\n            return propertySchema.Properties.ContainsKey(jsonPropertyName) ? propertySchema.Properties[jsonPropertyName].Pattern : null;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 483,
                  "endLine": 494,
                  "snippet": {
                    "text": "            return null;\n        }\n\n        private string GetPropertyFormatPattern(string objectTypeName, string propertyName)\n        {\n            string jsonPropertyName = GetJsonNameFor(propertyName);\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\n\n            return propertySchema.Properties.ContainsKey(jsonPropertyName) ? propertySchema.Properties[jsonPropertyName].Pattern : null;\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 486,
                            "endLine": 492,
                            "snippet": {
                              "text": "        private string GetPropertyFormatPattern(string objectTypeName, string propertyName)\r\n        {\r\n            string jsonPropertyName = GetJsonNameFor(propertyName);\r\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\r\n\r\n            return propertySchema.Properties.ContainsKey(jsonPropertyName) ? propertySchema.Properties[jsonPropertyName].Pattern : null;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 483,
                            "endLine": 494,
                            "snippet": {
                              "text": "            return null;\n        }\n\n        private string GetPropertyFormatPattern(string objectTypeName, string propertyName)\n        {\n            string jsonPropertyName = GetJsonNameFor(propertyName);\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\n\n            return propertySchema.Properties.ContainsKey(jsonPropertyName) ? propertySchema.Properties[jsonPropertyName].Pattern : null;\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: GetPropertyFormatPattern"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 486,
                  "endLine": 492
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method ParseVulnerability() in [FortifyFprConverter.cs](1) can dereference a null pointer on line [442](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 442,
                  "snippet": {
                    "text": "                    rule.SetProperty(_strings.Kingdom, _reader.ReadElementContentAsString());"
                  }
                },
                "contextRegion": {
                  "startLine": 439,
                  "endLine": 445,
                  "snippet": {
                    "text": "                }\n                else if (AtStartOfNonEmpty(_strings.Kingdom))\n                {\n                    rule.SetProperty(_strings.Kingdom, _reader.ReadElementContentAsString());\n                }\n                else if (AtStartOfNonEmpty(_strings.Type))\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 427,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = null;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 424,
                            "endLine": 430,
                            "snippet": {
                              "text": "\n            var result = new Result();\n            _reader.Read();\n            ReportingDescriptor rule = null;\n            int ruleIndex;\n\n            while (!AtEndOf(_strings.Vulnerability))\n"
                            }
                          }
                        },
                        "message": {
                          "text": "rule = null : rule is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 430,
                            "snippet": {
                              "text": "            while (!AtEndOf(_strings.Vulnerability))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 427,
                            "endLine": 433,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = null;\n            int ruleIndex;\n\n            while (!AtEndOf(_strings.Vulnerability))\n            {\n                if (AtStartOfNonEmpty(_strings.ClassId))\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 432,
                            "snippet": {
                              "text": "                if (AtStartOfNonEmpty(_strings.ClassId))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 429,
                            "endLine": 435,
                            "snippet": {
                              "text": "\n            while (!AtEndOf(_strings.Vulnerability))\n            {\n                if (AtStartOfNonEmpty(_strings.ClassId))\n                {\n                    // Get the rule GUID from the ClassId element.\n                    string ruleId = _reader.ReadElementContentAsString();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 442,
                            "snippet": {
                              "text": "                    rule.SetProperty(_strings.Kingdom, _reader.ReadElementContentAsString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 439,
                            "endLine": 445,
                            "snippet": {
                              "text": "                }\n                else if (AtStartOfNonEmpty(_strings.Kingdom))\n                {\n                    rule.SetProperty(_strings.Kingdom, _reader.ReadElementContentAsString());\n                }\n                else if (AtStartOfNonEmpty(_strings.Type))\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "rule.SetProperty(...) : rule is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 442
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ComputeHashes() in [HashUtilities.cs](1) ignores an exception on line [54](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 54,
                  "snippet": {
                    "text": "            catch (IOException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 51,
                  "endLine": 57,
                  "snippet": {
                    "text": "                    }\n                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return null;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 54,
                            "snippet": {
                              "text": "            catch (IOException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 51,
                            "endLine": 57,
                            "snippet": {
                              "text": "                    }\n                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return null;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ComputeHashes() in [HashUtilities.cs](1) ignores an exception on line [55](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 55,
                  "snippet": {
                    "text": "            catch (UnauthorizedAccessException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "endLine": 58,
                  "snippet": {
                    "text": "                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return null;\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 55,
                            "snippet": {
                              "text": "            catch (UnauthorizedAccessException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 52,
                            "endLine": 58,
                            "snippet": {
                              "text": "                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return null;\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 55
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 2,
          "message": {
            "text": "Attackers are able to control the file system path argument to FileStream() at [CsvWriter.cs](1) line [53](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1010
                },
                "region": {
                  "startLine": 53,
                  "snippet": {
                    "text": "        public CsvWriter(string filePath, bool writeHeaderRow = true) : this(new FileStream(EnsureDirectoryCreated(filePath), FileMode.Create, FileAccess.Write, FileShare.Read), writeHeaderRow)"
                  }
                },
                "contextRegion": {
                  "startLine": 50,
                  "endLine": 56,
                  "snippet": {
                    "text": "            }\n        }\n\n        public CsvWriter(string filePath, bool writeHeaderRow = true) : this(new FileStream(EnsureDirectoryCreated(filePath), FileMode.Create, FileAccess.Write, FileShare.Read), writeHeaderRow)\n        { }\n\n        public CsvWriter(Stream stream, bool writeHeaderRow = true)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 64
                    },
                    {
                      "index": 65
                    },
                    {
                      "index": 66
                    },
                    {
                      "index": 122
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1010
                          },
                          "region": {
                            "startLine": 53,
                            "snippet": {
                              "text": "        public CsvWriter(string filePath, bool writeHeaderRow = true) : this(new FileStream(EnsureDirectoryCreated(filePath), FileMode.Create, FileAccess.Write, FileShare.Read), writeHeaderRow)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 50,
                            "endLine": 56,
                            "snippet": {
                              "text": "            }\n        }\n\n        public CsvWriter(string filePath, bool writeHeaderRow = true) : this(new FileStream(EnsureDirectoryCreated(filePath), FileMode.Create, FileAccess.Write, FileShare.Read), writeHeaderRow)\n        { }\n\n        public CsvWriter(Stream stream, bool writeHeaderRow = true)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FileStream(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1010
                },
                "region": {
                  "startLine": 53
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 124
                    },
                    {
                      "index": 125
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 124
                    },
                    {
                      "index": 125
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 124
                    },
                    {
                      "index": 125
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "2.3769999"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 124
                    },
                    {
                      "index": 125
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 124
                    },
                    {
                      "index": 125
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 124
                    },
                    {
                      "index": 125
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "2.3769999"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 127
                    },
                    {
                      "index": 128
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 127
                    },
                    {
                      "index": 128
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 127
                    },
                    {
                      "index": 128
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 127
                    },
                    {
                      "index": 128
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 16,
          "message": {
            "text": "Attackers are able to control the file system path argument to Exists() at [Program.cs](1) line [55](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 55,
                  "snippet": {
                    "text": "                    if (Directory.Exists(sarifFilePath))"
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "endLine": 58,
                  "snippet": {
                    "text": "                    writer.SetColumns(columnNames);\n\n                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 64
                    },
                    {
                      "index": 97
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 55,
                            "snippet": {
                              "text": "                    if (Directory.Exists(sarifFilePath))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 52,
                            "endLine": 58,
                            "snippet": {
                              "text": "                    writer.SetColumns(columnNames);\n\n                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Exists(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 55
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Interior_Carriage_Return_New_Line_V1 is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 80,
                  "snippet": {
                    "text": "        private readonly static Region s_Interior_Carriage_Return_New_Line_V1 = "
                  }
                },
                "contextRegion": {
                  "startLine": 77,
                  "endLine": 83,
                  "snippet": {
                    "text": "                           StartLine = 2, StartColumn = 4, EndLine = 2, EndColumn = 5, CharOffset = 9, CharLength = 1 };\n\n        // Version 1 of this region defines it by using the insertion point of the following line as the terminus\n        private readonly static Region s_Interior_Carriage_Return_New_Line_V1 = \n            new Region() { Snippet = new ArtifactContent() { Text = CARRIAGE_RETURN_NEW_LINE },\n                           StartLine = 3, StartColumn = 5, EndLine = 4, EndColumn = 1, CharOffset = 15, CharLength = 2 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 80,
                            "snippet": {
                              "text": "        private readonly static Region s_Interior_Carriage_Return_New_Line_V1 = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 77,
                            "endLine": 83,
                            "snippet": {
                              "text": "                           StartLine = 2, StartColumn = 4, EndLine = 2, EndColumn = 5, CharOffset = 9, CharLength = 1 };\n\n        // Version 1 of this region defines it by using the insertion point of the following line as the terminus\n        private readonly static Region s_Interior_Carriage_Return_New_Line_V1 = \n            new Region() { Snippet = new ArtifactContent() { Text = CARRIAGE_RETURN_NEW_LINE },\n                           StartLine = 3, StartColumn = 5, EndLine = 4, EndColumn = 1, CharOffset = 15, CharLength = 2 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Interior_Carriage_Return_New_Line_V1"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 80
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method Read() in [FxCopConverter.cs](1) fails to enable validation before parsing XML on line [724](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 689
                },
                "region": {
                  "startLine": 724,
                  "snippet": {
                    "text": "            using (var reader = XmlReader.Create(stream, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 721,
                  "endLine": 727,
                  "snippet": {
                    "text": "            };\n\n            using (var stream = assembly.GetManifestResourceStream(FxCopLogReader.FxCopReportSchema))\n            using (var reader = XmlReader.Create(stream, settings))\n            {\n                XmlSchema schema = XmlSchema.Read(reader, new ValidationEventHandler(ReportError));\n                schemaSet.Add(schema);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 689
                          },
                          "region": {
                            "startLine": 717,
                            "snippet": {
                              "text": "            var settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 714,
                            "endLine": 720,
                            "snippet": {
                              "text": "        {\n            XmlSchemaSet schemaSet = new XmlSchemaSet();\n            Assembly assembly = typeof(FxCopLogReader).Assembly;\n            var settings = new XmlReaderSettings\n            {\n                DtdProcessing = DtdProcessing.Ignore,\n                XmlResolver = null\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 689
                          },
                          "region": {
                            "startLine": 724,
                            "snippet": {
                              "text": "            using (var reader = XmlReader.Create(stream, settings))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 721,
                            "endLine": 727,
                            "snippet": {
                              "text": "            };\n\n            using (var stream = assembly.GetManifestResourceStream(FxCopLogReader.FxCopReportSchema))\n            using (var reader = XmlReader.Create(stream, settings))\n            {\n                XmlSchema schema = XmlSchema.Read(reader, new ValidationEventHandler(ReportError));\n                schemaSet.Add(schema);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 689
                },
                "region": {
                  "startLine": 724
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 131
                    },
                    {
                      "index": 132
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 131
                    },
                    {
                      "index": 132
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 131
                    },
                    {
                      "index": 132
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 131
                    },
                    {
                      "index": 132
                    },
                    {
                      "index": 115
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 693,
                  "endLine": 766,
                  "snippet": {
                    "text": "        private void Visit(Run run, string runPointer)\r\n        {\r\n            Analyze(run, runPointer);\r\n\r\n            if (run.Conversion != null)\r\n            {\r\n                Visit(run.Conversion, runPointer.AtProperty(SarifPropertyName.Conversion));\r\n            }\r\n\r\n            if (run.Results != null)\r\n            {\r\n                string resultsPointer = runPointer.AtProperty(SarifPropertyName.Results);\r\n\r\n                for (int i = 0; i < run.Results.Count; ++i)\r\n                {\r\n                    Visit(run.Results[i], resultsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.Artifacts != null)\r\n            {\r\n                string filesPointer = runPointer.AtProperty(SarifPropertyName.Artifacts);\r\n\r\n                for (int i = 0; i < run.Artifacts.Count; ++i)\r\n                {\r\n                    Visit(run.Artifacts[i], filesPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.LogicalLocations != null)\r\n            {\r\n                string logicalLocationsPointer = runPointer.AtProperty(SarifPropertyName.LogicalLocations);\r\n\r\n                for (int i = 0; i < run.LogicalLocations.Count; ++i)\r\n                {\r\n                    Visit(run.LogicalLocations[i], logicalLocationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.Graphs != null)\r\n            {\r\n                string graphsPointer = runPointer.AtProperty(SarifPropertyName.Graphs);\r\n\r\n                for (int i = 0; i < run.Graphs.Count; ++i)\r\n                {\r\n                    Visit(run.Graphs[i], graphsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.Invocations != null)\r\n            {\r\n                string invocationsPointer = runPointer.AtProperty(SarifPropertyName.Invocations);\r\n\r\n                for (int i = 0; i < run.Invocations.Count; ++i)\r\n                {\r\n                    Visit(run.Invocations[i], invocationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.Tool != null)\r\n            {\r\n                Visit(run.Tool, runPointer.AtProperty(SarifPropertyName.Tool));\r\n            }\r\n\r\n            if (run.VersionControlProvenance != null)\r\n            {\r\n                string versionControlProvenancePointer = runPointer.AtProperty(SarifPropertyName.VersionControlProvenance);\r\n\r\n                for (int i = 0; i < run.VersionControlProvenance.Count; ++i)\r\n                {\r\n                    Visit(run.VersionControlProvenance[i], versionControlProvenancePointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 690,
                  "endLine": 769,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Run run, string runPointer)\n        {\n            Analyze(run, runPointer);\n\n            if (run.Conversion != null)\n            {\n                Visit(run.Conversion, runPointer.AtProperty(SarifPropertyName.Conversion));\n            }\n\n            if (run.Results != null)\n            {\n                string resultsPointer = runPointer.AtProperty(SarifPropertyName.Results);\n\n                for (int i = 0; i < run.Results.Count; ++i)\n                {\n                    Visit(run.Results[i], resultsPointer.AtIndex(i));\n                }\n            }\n\n            if (run.Artifacts != null)\n            {\n                string filesPointer = runPointer.AtProperty(SarifPropertyName.Artifacts);\n\n                for (int i = 0; i < run.Artifacts.Count; ++i)\n                {\n                    Visit(run.Artifacts[i], filesPointer.AtIndex(i));\n                }\n            }\n\n            if (run.LogicalLocations != null)\n            {\n                string logicalLocationsPointer = runPointer.AtProperty(SarifPropertyName.LogicalLocations);\n\n                for (int i = 0; i < run.LogicalLocations.Count; ++i)\n                {\n                    Visit(run.LogicalLocations[i], logicalLocationsPointer.AtIndex(i));\n                }\n            }\n\n            if (run.Graphs != null)\n            {\n                string graphsPointer = runPointer.AtProperty(SarifPropertyName.Graphs);\n\n                for (int i = 0; i < run.Graphs.Count; ++i)\n                {\n                    Visit(run.Graphs[i], graphsPointer.AtIndex(i));\n                }\n            }\n\n            if (run.Invocations != null)\n            {\n                string invocationsPointer = runPointer.AtProperty(SarifPropertyName.Invocations);\n\n                for (int i = 0; i < run.Invocations.Count; ++i)\n                {\n                    Visit(run.Invocations[i], invocationsPointer.AtIndex(i));\n                }\n            }\n\n            if (run.Tool != null)\n            {\n                Visit(run.Tool, runPointer.AtProperty(SarifPropertyName.Tool));\n            }\n\n            if (run.VersionControlProvenance != null)\n            {\n                string versionControlProvenancePointer = runPointer.AtProperty(SarifPropertyName.VersionControlProvenance);\n\n                for (int i = 0; i < run.VersionControlProvenance.Count; ++i)\n                {\n                    Visit(run.VersionControlProvenance[i], versionControlProvenancePointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(Stack stack, string stackPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 693,
                            "endLine": 766,
                            "snippet": {
                              "text": "        private void Visit(Run run, string runPointer)\r\n        {\r\n            Analyze(run, runPointer);\r\n\r\n            if (run.Conversion != null)\r\n            {\r\n                Visit(run.Conversion, runPointer.AtProperty(SarifPropertyName.Conversion));\r\n            }\r\n\r\n            if (run.Results != null)\r\n            {\r\n                string resultsPointer = runPointer.AtProperty(SarifPropertyName.Results);\r\n\r\n                for (int i = 0; i < run.Results.Count; ++i)\r\n                {\r\n                    Visit(run.Results[i], resultsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.Artifacts != null)\r\n            {\r\n                string filesPointer = runPointer.AtProperty(SarifPropertyName.Artifacts);\r\n\r\n                for (int i = 0; i < run.Artifacts.Count; ++i)\r\n                {\r\n                    Visit(run.Artifacts[i], filesPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.LogicalLocations != null)\r\n            {\r\n                string logicalLocationsPointer = runPointer.AtProperty(SarifPropertyName.LogicalLocations);\r\n\r\n                for (int i = 0; i < run.LogicalLocations.Count; ++i)\r\n                {\r\n                    Visit(run.LogicalLocations[i], logicalLocationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.Graphs != null)\r\n            {\r\n                string graphsPointer = runPointer.AtProperty(SarifPropertyName.Graphs);\r\n\r\n                for (int i = 0; i < run.Graphs.Count; ++i)\r\n                {\r\n                    Visit(run.Graphs[i], graphsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.Invocations != null)\r\n            {\r\n                string invocationsPointer = runPointer.AtProperty(SarifPropertyName.Invocations);\r\n\r\n                for (int i = 0; i < run.Invocations.Count; ++i)\r\n                {\r\n                    Visit(run.Invocations[i], invocationsPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (run.Tool != null)\r\n            {\r\n                Visit(run.Tool, runPointer.AtProperty(SarifPropertyName.Tool));\r\n            }\r\n\r\n            if (run.VersionControlProvenance != null)\r\n            {\r\n                string versionControlProvenancePointer = runPointer.AtProperty(SarifPropertyName.VersionControlProvenance);\r\n\r\n                for (int i = 0; i < run.VersionControlProvenance.Count; ++i)\r\n                {\r\n                    Visit(run.VersionControlProvenance[i], versionControlProvenancePointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 690,
                            "endLine": 769,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Run run, string runPointer)\n        {\n            Analyze(run, runPointer);\n\n            if (run.Conversion != null)\n            {\n                Visit(run.Conversion, runPointer.AtProperty(SarifPropertyName.Conversion));\n            }\n\n            if (run.Results != null)\n            {\n                string resultsPointer = runPointer.AtProperty(SarifPropertyName.Results);\n\n                for (int i = 0; i < run.Results.Count; ++i)\n                {\n                    Visit(run.Results[i], resultsPointer.AtIndex(i));\n                }\n            }\n\n            if (run.Artifacts != null)\n            {\n                string filesPointer = runPointer.AtProperty(SarifPropertyName.Artifacts);\n\n                for (int i = 0; i < run.Artifacts.Count; ++i)\n                {\n                    Visit(run.Artifacts[i], filesPointer.AtIndex(i));\n                }\n            }\n\n            if (run.LogicalLocations != null)\n            {\n                string logicalLocationsPointer = runPointer.AtProperty(SarifPropertyName.LogicalLocations);\n\n                for (int i = 0; i < run.LogicalLocations.Count; ++i)\n                {\n                    Visit(run.LogicalLocations[i], logicalLocationsPointer.AtIndex(i));\n                }\n            }\n\n            if (run.Graphs != null)\n            {\n                string graphsPointer = runPointer.AtProperty(SarifPropertyName.Graphs);\n\n                for (int i = 0; i < run.Graphs.Count; ++i)\n                {\n                    Visit(run.Graphs[i], graphsPointer.AtIndex(i));\n                }\n            }\n\n            if (run.Invocations != null)\n            {\n                string invocationsPointer = runPointer.AtProperty(SarifPropertyName.Invocations);\n\n                for (int i = 0; i < run.Invocations.Count; ++i)\n                {\n                    Visit(run.Invocations[i], invocationsPointer.AtIndex(i));\n                }\n            }\n\n            if (run.Tool != null)\n            {\n                Visit(run.Tool, runPointer.AtProperty(SarifPropertyName.Tool));\n            }\n\n            if (run.VersionControlProvenance != null)\n            {\n                string versionControlProvenancePointer = runPointer.AtProperty(SarifPropertyName.VersionControlProvenance);\n\n                for (int i = 0; i < run.VersionControlProvenance.Count; ++i)\n                {\n                    Visit(run.VersionControlProvenance[i], versionControlProvenancePointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(Stack stack, string stackPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 693,
                  "endLine": 766
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "        if (rg0.nextInt() != rg1.nextInt()"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 30,
                            "snippet": {
                              "text": "        if (rg0.nextInt() != rg1.nextInt()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 27,
                            "endLine": 33,
                            "snippet": {
                              "text": "\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 34
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "        if (rg0.nextInt() != rg1.nextInt()"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 30,
                            "snippet": {
                              "text": "        if (rg0.nextInt() != rg1.nextInt()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 27,
                            "endLine": 33,
                            "snippet": {
                              "text": "\n        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 34
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 133
                    },
                    {
                      "index": 134
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 133
                    },
                    {
                      "index": 134
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 133
                    },
                    {
                      "index": 134
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 133
                    },
                    {
                      "index": 134
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 135
                    },
                    {
                      "index": 136
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 135
                    },
                    {
                      "index": 136
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 135
                    },
                    {
                      "index": 136
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 135
                    },
                    {
                      "index": 136
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 137
                    },
                    {
                      "index": 138
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 137
                    },
                    {
                      "index": 138
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 137
                    },
                    {
                      "index": 138
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 137
                    },
                    {
                      "index": 138
                    },
                    {
                      "index": 91
                    },
                    {
                      "index": 92
                    },
                    {
                      "index": 93
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Interior_Carriage_Return is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 75,
                  "snippet": {
                    "text": "        private readonly static Region s_Interior_Carriage_Return = "
                  }
                },
                "contextRegion": {
                  "startLine": 72,
                  "endLine": 78,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = NEW_LINE },\n                           StartLine = 2, StartColumn = 5, EndLine = 3, EndColumn = 1, CharOffset = 10, CharLength = 1 };\n\n        private readonly static Region s_Interior_Carriage_Return = \n            new Region() { Snippet = new ArtifactContent() { Text = CARRIAGE_RETURN },\n                           StartLine = 2, StartColumn = 4, EndLine = 2, EndColumn = 5, CharOffset = 9, CharLength = 1 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 75,
                            "snippet": {
                              "text": "        private readonly static Region s_Interior_Carriage_Return = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 72,
                            "endLine": 78,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = NEW_LINE },\n                           StartLine = 2, StartColumn = 5, EndLine = 3, EndColumn = 1, CharOffset = 10, CharLength = 1 };\n\n        private readonly static Region s_Interior_Carriage_Return = \n            new Region() { Snippet = new ArtifactContent() { Text = CARRIAGE_RETURN },\n                           StartLine = 2, StartColumn = 4, EndLine = 2, EndColumn = 5, CharOffset = 9, CharLength = 1 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Interior_Carriage_Return"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 75
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method CreateSimpleResult() in [SarifLoggerTests.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 541
                },
                "region": {
                  "startLine": 615,
                  "endLine": 622,
                  "snippet": {
                    "text": "        private Result CreateSimpleResult(ReportingDescriptor rule)\r\n        {           \r\n            return new Result\r\n            {\r\n                RuleId = rule.Id,\r\n                Message = new Message { Text = \"Some testing occurred.\" }\r\n            };\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 612,
                  "endLine": 625,
                  "snippet": {
                    "text": "            sarifLogger.Log(rule, CreateSimpleResult(rule));\n        }\n\n        private Result CreateSimpleResult(ReportingDescriptor rule)\n        {           \n            return new Result\n            {\n                RuleId = rule.Id,\n                Message = new Message { Text = \"Some testing occurred.\" }\n            };\n        }\n\n        [Fact]\n        public void SarifLogger_ResultAndRuleIdMismatch()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 541
                          },
                          "region": {
                            "startLine": 615,
                            "endLine": 622,
                            "snippet": {
                              "text": "        private Result CreateSimpleResult(ReportingDescriptor rule)\r\n        {           \r\n            return new Result\r\n            {\r\n                RuleId = rule.Id,\r\n                Message = new Message { Text = \"Some testing occurred.\" }\r\n            };\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 612,
                            "endLine": 625,
                            "snippet": {
                              "text": "            sarifLogger.Log(rule, CreateSimpleResult(rule));\n        }\n\n        private Result CreateSimpleResult(ReportingDescriptor rule)\n        {           \n            return new Result\n            {\n                RuleId = rule.Id,\n                Message = new Message { Text = \"Some testing occurred.\" }\n            };\n        }\n\n        [Fact]\n        public void SarifLogger_ResultAndRuleIdMismatch()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: CreateSimpleResult"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 541
                },
                "region": {
                  "startLine": 615,
                  "endLine": 622
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 10,
          "message": {
            "text": "The catch block at [AnalyzeCommandBase.cs](1) line [655](1) handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 655,
                  "endLine": 659,
                  "snippet": {
                    "text": "                catch (Exception ex)\r\n                {\r\n                    RuntimeErrors |= RuntimeConditions.ExceptionInSkimmerInitialize;\r\n                    Errors.LogUnhandledExceptionInitializingRule(context, ex);\r\n                    disabledSkimmers.Add(skimmer);"
                  }
                },
                "contextRegion": {
                  "startLine": 652,
                  "endLine": 662,
                  "snippet": {
                    "text": "                    context.Rule = skimmer;\n                    skimmer.Initialize(context);\n                }\n                catch (Exception ex)\n                {\n                    RuntimeErrors |= RuntimeConditions.ExceptionInSkimmerInitialize;\n                    Errors.LogUnhandledExceptionInitializingRule(context, ex);\n                    disabledSkimmers.Add(skimmer);\n                }\n            }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 190
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 659,
                            "snippet": {
                              "text": "                catch (Exception ex)\r\n                {\r\n                    RuntimeErrors |= RuntimeConditions.ExceptionInSkimmerInitialize;\r\n                    Errors.LogUnhandledExceptionInitializingRule(context, ex);\r\n                    disabledSkimmers.Add(skimmer);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 652,
                            "endLine": 662,
                            "snippet": {
                              "text": "                    context.Rule = skimmer;\n                    skimmer.Initialize(context);\n                }\n                catch (Exception ex)\n                {\n                    RuntimeErrors |= RuntimeConditions.ExceptionInSkimmerInitialize;\n                    Errors.LogUnhandledExceptionInitializingRule(context, ex);\n                    disabledSkimmers.Add(skimmer);\n                }\n            }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 655,
                  "endLine": 659
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 361,
                  "endLine": 389,
                  "snippet": {
                    "text": "        private void Visit(Graph graph, string graphPointer)\r\n        {\r\n            Analyze(graph, graphPointer);\r\n\r\n            if (graph.Description != null)\r\n            {\r\n                Visit(graph.Description, graphPointer.AtProperty(SarifPropertyName.Description));\r\n            }\r\n\r\n            if (graph.Edges != null)\r\n            {\r\n                string edgesPointer = graphPointer.AtProperty(SarifPropertyName.Edges);\r\n\r\n                for (int i = 0; i < graph.Edges.Count; ++i)\r\n                {\r\n                    Visit(graph.Edges[i], edgesPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (graph.Nodes != null)\r\n            {\r\n                string nodesPointer = graphPointer.AtProperty(SarifPropertyName.Nodes);\r\n\r\n                for (int i = 0; i < graph.Nodes.Count; ++i)\r\n                {\r\n                    Visit(graph.Nodes[i], nodesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 358,
                  "endLine": 392,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Graph graph, string graphPointer)\n        {\n            Analyze(graph, graphPointer);\n\n            if (graph.Description != null)\n            {\n                Visit(graph.Description, graphPointer.AtProperty(SarifPropertyName.Description));\n            }\n\n            if (graph.Edges != null)\n            {\n                string edgesPointer = graphPointer.AtProperty(SarifPropertyName.Edges);\n\n                for (int i = 0; i < graph.Edges.Count; ++i)\n                {\n                    Visit(graph.Edges[i], edgesPointer.AtIndex(i));\n                }\n            }\n\n            if (graph.Nodes != null)\n            {\n                string nodesPointer = graphPointer.AtProperty(SarifPropertyName.Nodes);\n\n                for (int i = 0; i < graph.Nodes.Count; ++i)\n                {\n                    Visit(graph.Nodes[i], nodesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(GraphTraversal graphTraversal, string graphTraversalPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 361,
                            "endLine": 389,
                            "snippet": {
                              "text": "        private void Visit(Graph graph, string graphPointer)\r\n        {\r\n            Analyze(graph, graphPointer);\r\n\r\n            if (graph.Description != null)\r\n            {\r\n                Visit(graph.Description, graphPointer.AtProperty(SarifPropertyName.Description));\r\n            }\r\n\r\n            if (graph.Edges != null)\r\n            {\r\n                string edgesPointer = graphPointer.AtProperty(SarifPropertyName.Edges);\r\n\r\n                for (int i = 0; i < graph.Edges.Count; ++i)\r\n                {\r\n                    Visit(graph.Edges[i], edgesPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (graph.Nodes != null)\r\n            {\r\n                string nodesPointer = graphPointer.AtProperty(SarifPropertyName.Nodes);\r\n\r\n                for (int i = 0; i < graph.Nodes.Count; ++i)\r\n                {\r\n                    Visit(graph.Nodes[i], nodesPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 358,
                            "endLine": 392,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Graph graph, string graphPointer)\n        {\n            Analyze(graph, graphPointer);\n\n            if (graph.Description != null)\n            {\n                Visit(graph.Description, graphPointer.AtProperty(SarifPropertyName.Description));\n            }\n\n            if (graph.Edges != null)\n            {\n                string edgesPointer = graphPointer.AtProperty(SarifPropertyName.Edges);\n\n                for (int i = 0; i < graph.Edges.Count; ++i)\n                {\n                    Visit(graph.Edges[i], edgesPointer.AtIndex(i));\n                }\n            }\n\n            if (graph.Nodes != null)\n            {\n                string nodesPointer = graphPointer.AtProperty(SarifPropertyName.Nodes);\n\n                for (int i = 0; i < graph.Nodes.Count; ++i)\n                {\n                    Visit(graph.Nodes[i], nodesPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(GraphTraversal graphTraversal, string graphTraversalPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 361,
                  "endLine": 389
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field EmptyInvocation is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 404
                },
                "region": {
                  "startLine": 15,
                  "snippet": {
                    "text": "        private static Invocation EmptyInvocation = new Invocation();"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "endLine": 18,
                  "snippet": {
                    "text": "    {\n        private static Graph EmptyGraph = new Graph();\n        private static Artifact EmptyFile = new Artifact();\n        private static Invocation EmptyInvocation = new Invocation();\n        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();\n\n        private IDictionary<ArtifactLocation, int> _fileToIndexMap;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 404
                          },
                          "region": {
                            "startLine": 15,
                            "snippet": {
                              "text": "        private static Invocation EmptyInvocation = new Invocation();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 12,
                            "endLine": 18,
                            "snippet": {
                              "text": "    {\n        private static Graph EmptyGraph = new Graph();\n        private static Artifact EmptyFile = new Artifact();\n        private static Invocation EmptyInvocation = new Invocation();\n        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();\n\n        private IDictionary<ArtifactLocation, int> _fileToIndexMap;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: EmptyInvocation"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 404
                },
                "region": {
                  "startLine": 15
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 64,
                  "snippet": {
                    "text": "            System.err.println(Arrays.toString(bytes));"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "endLine": 67,
                  "snippet": {
                    "text": "        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 64,
                            "snippet": {
                              "text": "            System.err.println(Arrays.toString(bytes));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 61,
                            "endLine": 67,
                            "snippet": {
                              "text": "        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Using println() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 64,
                  "snippet": {
                    "text": "            System.err.println(Arrays.toString(bytes));"
                  }
                },
                "contextRegion": {
                  "startLine": 61,
                  "endLine": 67,
                  "snippet": {
                    "text": "        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 64,
                            "snippet": {
                              "text": "            System.err.println(Arrays.toString(bytes));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 61,
                            "endLine": 67,
                            "snippet": {
                              "text": "        srg.nextBytes(seed);\n        if (Arrays.equals(seed, bytes)) {\n            System.err.println(Arrays.toString(seed));\n            System.err.println(Arrays.toString(bytes));\n            System.err.println(\"Not that secure and random!!!\");\n        }\n        srg.setSeed(31415926545L);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: println"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 11,
          "message": {
            "text": "An attacker is able to control one of the arguments to set_Position() at [SarifCurrentToVersionOneVisitor.cs](1) line [553](1), which can lead to a disruption of service or unexpected application behavior.\r\nAllowing external control of system settings can disrupt service or cause an application to behave in unexpected ways."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 553,
                  "snippet": {
                    "text": "                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));"
                  }
                },
                "contextRegion": {
                  "startLine": 550,
                  "endLine": 556,
                  "snippet": {
                    "text": "                            {\n                                // Since we read past startColumn, we need to back up using the base stream\n                                Stream stream = reader.BaseStream;\n                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));\n                            }\n\n                            // Read the next charLength characters\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 17
                    },
                    {
                      "index": 18
                    },
                    {
                      "index": 19
                    },
                    {
                      "index": 20
                    },
                    {
                      "index": 21
                    },
                    {
                      "index": 22
                    },
                    {
                      "index": 23
                    },
                    {
                      "index": 24
                    },
                    {
                      "index": 25
                    },
                    {
                      "index": 26
                    },
                    {
                      "index": 27
                    },
                    {
                      "index": 28
                    },
                    {
                      "index": 29
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 553,
                            "snippet": {
                              "text": "                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 550,
                            "endLine": 556,
                            "snippet": {
                              "text": "                            {\n                                // Since we read past startColumn, we need to back up using the base stream\n                                Stream stream = reader.BaseStream;\n                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));\n                            }\n\n                            // Read the next charLength characters\n"
                            }
                          }
                        },
                        "message": {
                          "text": "set_Position(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 553
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field converter is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 231
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        private readonly ToolFormatConverter converter = new ToolFormatConverter();"
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "endLine": 93,
                  "snippet": {
                    "text": "            BatchRunConverter(ToolFormat.Pylint, \"*.json\");\n        }\n\n        private readonly ToolFormatConverter converter = new ToolFormatConverter();\n\n        private void BatchRunConverter(string tool, string inputFilter = \"*.xml\", bool enrichConvertedSarif = false)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 231
                          },
                          "region": {
                            "startLine": 90,
                            "snippet": {
                              "text": "        private readonly ToolFormatConverter converter = new ToolFormatConverter();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 87,
                            "endLine": 93,
                            "snippet": {
                              "text": "            BatchRunConverter(ToolFormat.Pylint, \"*.json\");\n        }\n\n        private readonly ToolFormatConverter converter = new ToolFormatConverter();\n\n        private void BatchRunConverter(string tool, string inputFilter = \"*.xml\", bool enrichConvertedSarif = false)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: converter"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 231
                },
                "region": {
                  "startLine": 90
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 8,
          "message": {
            "text": "The function GetFileStreamReader() in [SarifCurrentToVersionOneVisitor.cs](1) sometimes fails to release a system resource allocated by GetContentStream() on line 690.\r\nThe program can potentially fail to release a system resource."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 690,
                  "snippet": {
                    "text": "            Stream contentStream = GetContentStream(uri, out encoding);"
                  }
                },
                "contextRegion": {
                  "startLine": 687,
                  "endLine": 693,
                  "snippet": {
                    "text": "        {\n            StreamReader reader = null;\n\n            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 690,
                            "snippet": {
                              "text": "            Stream contentStream = GetContentStream(uri, out encoding);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 687,
                            "endLine": 693,
                            "snippet": {
                              "text": "        {\n            StreamReader reader = null;\n\n            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "contentStream = GetContentStream(...)"
                        },
                        "annotations": [
                          {
                            "startLine": 690,
                            "message": {
                              "text": "contentStream refers to an allocated resource"
                            }
                          }
                        ]
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 691,
                            "snippet": {
                              "text": "            if (contentStream != null && encoding != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 688,
                            "endLine": 694,
                            "snippet": {
                              "text": "            StreamReader reader = null;\n\n            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 691,
                            "snippet": {
                              "text": "            if (contentStream != null && encoding != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 688,
                            "endLine": 694,
                            "snippet": {
                              "text": "            StreamReader reader = null;\n\n            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 691,
                            "snippet": {
                              "text": "            if (contentStream != null && encoding != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 688,
                            "endLine": 694,
                            "snippet": {
                              "text": "            StreamReader reader = null;\n\n            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "goto"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 696,
                            "snippet": {
                              "text": "            return reader;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 693,
                            "endLine": 699,
                            "snippet": {
                              "text": "                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n            }\n\n            return reader;\n        }\n\n        internal ReplacementVersionOne CreateReplacementVersionOne(Replacement v2Replacement, Encoding encoding)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "contentStream no longer refers to an allocated resource"
                        }
                      },
                      "kinds": [
                        "exit",
                        "scope"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 696,
                            "snippet": {
                              "text": "            return reader;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 693,
                            "endLine": 699,
                            "snippet": {
                              "text": "                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n            }\n\n            return reader;\n        }\n\n        internal ReplacementVersionOne CreateReplacementVersionOne(Replacement v2Replacement, Encoding encoding)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "contentStream end scope : Resource leaked"
                        }
                      },
                      "kinds": [
                        "exit",
                        "scope"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 690
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 667,
                  "endLine": 676,
                  "snippet": {
                    "text": "        private void Visit(ResultProvenance resultProvenance, string resultProvenancePointer)\r\n        {\r\n            Analyze(resultProvenance, resultProvenancePointer);\r\n\r\n            string conversionSourcesPointer = resultProvenancePointer.AtProperty(SarifPropertyName.ConversionSources);\r\n            for (int i = 0; i < resultProvenance.ConversionSources.Count; ++i)\r\n            {\r\n                Visit(resultProvenance.ConversionSources[i], conversionSourcesPointer.AtIndex(i));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 664,
                  "endLine": 679,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(ResultProvenance resultProvenance, string resultProvenancePointer)\n        {\n            Analyze(resultProvenance, resultProvenancePointer);\n\n            string conversionSourcesPointer = resultProvenancePointer.AtProperty(SarifPropertyName.ConversionSources);\n            for (int i = 0; i < resultProvenance.ConversionSources.Count; ++i)\n            {\n                Visit(resultProvenance.ConversionSources[i], conversionSourcesPointer.AtIndex(i));\n            }\n        }\n\n        private void Visit(ReportingDescriptor reportingDecriptor, string reportingDescriptorPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 667,
                            "endLine": 676,
                            "snippet": {
                              "text": "        private void Visit(ResultProvenance resultProvenance, string resultProvenancePointer)\r\n        {\r\n            Analyze(resultProvenance, resultProvenancePointer);\r\n\r\n            string conversionSourcesPointer = resultProvenancePointer.AtProperty(SarifPropertyName.ConversionSources);\r\n            for (int i = 0; i < resultProvenance.ConversionSources.Count; ++i)\r\n            {\r\n                Visit(resultProvenance.ConversionSources[i], conversionSourcesPointer.AtIndex(i));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 664,
                            "endLine": 679,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(ResultProvenance resultProvenance, string resultProvenancePointer)\n        {\n            Analyze(resultProvenance, resultProvenancePointer);\n\n            string conversionSourcesPointer = resultProvenancePointer.AtProperty(SarifPropertyName.ConversionSources);\n            for (int i = 0; i < resultProvenance.ConversionSources.Count; ++i)\n            {\n                Visit(resultProvenance.ConversionSources[i], conversionSourcesPointer.AtIndex(i));\n            }\n        }\n\n        private void Visit(ReportingDescriptor reportingDecriptor, string reportingDescriptorPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 667,
                  "endLine": 676
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 139
                    },
                    {
                      "index": 140
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 139
                    },
                    {
                      "index": 140
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 139
                    },
                    {
                      "index": 140
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "2.3769999"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 139
                    },
                    {
                      "index": 140
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 139
                    },
                    {
                      "index": 140
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 139
                    },
                    {
                      "index": 140
                    },
                    {
                      "index": 126
                    },
                    {
                      "index": 72
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "2.3769999"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method GenerateIndexToPopulateForOneOfProperties() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 246,
                  "endLine": 251,
                  "snippet": {
                    "text": "        private int GenerateIndexToPopulateForOneOfProperties()\r\n        {\r\n            // TODO: Have randomization logic to ensure a valid random index is generated during population.\r\n            // For now, we simply populate the first \"OneOf\" set.\r\n            return 0;\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 254,
                  "snippet": {
                    "text": "            return false;\n        }\n\n        private int GenerateIndexToPopulateForOneOfProperties()\n        {\n            // TODO: Have randomization logic to ensure a valid random index is generated during population.\n            // For now, we simply populate the first \"OneOf\" set.\n            return 0;\n        }\n\n        private void PopulatePropertyWithGeneratedDefaultValue(ISarifNode node, PropertyInfo property)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 246,
                            "endLine": 251,
                            "snippet": {
                              "text": "        private int GenerateIndexToPopulateForOneOfProperties()\r\n        {\r\n            // TODO: Have randomization logic to ensure a valid random index is generated during population.\r\n            // For now, we simply populate the first \"OneOf\" set.\r\n            return 0;\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 243,
                            "endLine": 254,
                            "snippet": {
                              "text": "            return false;\n        }\n\n        private int GenerateIndexToPopulateForOneOfProperties()\n        {\n            // TODO: Have randomization logic to ensure a valid random index is generated during population.\n            // For now, we simply populate the first \"OneOf\" set.\n            return 0;\n        }\n\n        private void PopulatePropertyWithGeneratedDefaultValue(ISarifNode node, PropertyInfo property)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: GenerateIndexToPopulateForOneOfProperties"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 246,
                  "endLine": 251
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ConstructUriBaseIdsDictionary() in [DriverSdkExtensions.cs](1) ignores an exception on line [47](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 471
                },
                "region": {
                  "startLine": 47,
                  "snippet": {
                    "text": "                        catch (PathTooLongException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 44,
                  "endLine": 50,
                  "snippet": {
                    "text": "                            Uri.TryCreate(uriToken, UriKind.Absolute, out value);\n                        }\n                        catch (ArgumentException) { } // illegal file path characters throw this\n                        catch (PathTooLongException) { }\n                    }\n                }\n                catch (UriFormatException) { }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 471
                          },
                          "region": {
                            "startLine": 47,
                            "snippet": {
                              "text": "                        catch (PathTooLongException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 44,
                            "endLine": 50,
                            "snippet": {
                              "text": "                            Uri.TryCreate(uriToken, UriKind.Absolute, out value);\n                        }\n                        catch (ArgumentException) { } // illegal file path characters throw this\n                        catch (PathTooLongException) { }\n                    }\n                }\n                catch (UriFormatException) { }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 471
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ConstructUriBaseIdsDictionary() in [DriverSdkExtensions.cs](1) ignores an exception on line [50](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 471
                },
                "region": {
                  "startLine": 50,
                  "snippet": {
                    "text": "                catch (UriFormatException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 47,
                  "endLine": 53,
                  "snippet": {
                    "text": "                        catch (PathTooLongException) { }\n                    }\n                }\n                catch (UriFormatException) { }\n\n                if (value == null)\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 471
                          },
                          "region": {
                            "startLine": 50,
                            "snippet": {
                              "text": "                catch (UriFormatException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 47,
                            "endLine": 53,
                            "snippet": {
                              "text": "                        catch (PathTooLongException) { }\n                    }\n                }\n                catch (UriFormatException) { }\n\n                if (value == null)\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 471
                },
                "region": {
                  "startLine": 50
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 10,
          "message": {
            "text": "The catch block at [AnalyzeCommandBase.cs](1) line [455](1) handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 455,
                  "endLine": 458,
                  "snippet": {
                    "text": "            catch (Exception ex)\r\n            {\r\n                Errors.LogExceptionInstantiatingSkimmers(context, DefaultPlugInAssemblies, ex);\r\n                ThrowExitApplicationException(context, ExitReason.UnhandledExceptionInstantiatingSkimmers, ex);"
                  }
                },
                "contextRegion": {
                  "startLine": 452,
                  "endLine": 461,
                  "snippet": {
                    "text": "                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Errors.LogExceptionInstantiatingSkimmers(context, DefaultPlugInAssemblies, ex);\n                ThrowExitApplicationException(context, ExitReason.UnhandledExceptionInstantiatingSkimmers, ex);\n            }\n\n            if (result.Count == 0)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 190
                          },
                          "region": {
                            "startLine": 455,
                            "endLine": 458,
                            "snippet": {
                              "text": "            catch (Exception ex)\r\n            {\r\n                Errors.LogExceptionInstantiatingSkimmers(context, DefaultPlugInAssemblies, ex);\r\n                ThrowExitApplicationException(context, ExitReason.UnhandledExceptionInstantiatingSkimmers, ex);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 452,
                            "endLine": 461,
                            "snippet": {
                              "text": "                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Errors.LogExceptionInstantiatingSkimmers(context, DefaultPlugInAssemblies, ex);\n                ThrowExitApplicationException(context, ExitReason.UnhandledExceptionInstantiatingSkimmers, ex);\n            }\n\n            if (result.Count == 0)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 190
                },
                "region": {
                  "startLine": 455,
                  "endLine": 458
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "            || rg0.nextInt(360) != rg1.nextInt(360)"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 31,
                            "snippet": {
                              "text": "            || rg0.nextInt(360) != rg1.nextInt(360)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 28,
                            "endLine": 34,
                            "snippet": {
                              "text": "        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "            || rg0.nextInt(360) != rg1.nextInt(360)"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 31,
                            "snippet": {
                              "text": "            || rg0.nextInt(360) != rg1.nextInt(360)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 28,
                            "endLine": 34,
                            "snippet": {
                              "text": "        Random rg0 = new Random(31415926545L);\n        Random rg1 = new Random(31415926545L);\n        if (rg0.nextInt() != rg1.nextInt()\n            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 20
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 141
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 141
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 141
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 141
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 141
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 141
                    },
                    {
                      "index": 120
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 61
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by next() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "endLine": 48,
                  "snippet": {
                    "text": "        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 45,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 42,
                            "endLine": 48,
                            "snippet": {
                              "text": "        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "next()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 38
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by next() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 45,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)"
                  }
                },
                "contextRegion": {
                  "startLine": 42,
                  "endLine": 48,
                  "snippet": {
                    "text": "        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 45,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 42,
                            "endLine": 48,
                            "snippet": {
                              "text": "        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "next()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 38
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 492,
                  "endLine": 500,
                  "snippet": {
                    "text": "        private void Visit(Node node, string nodePointer)\r\n        {\r\n            Analyze(node, nodePointer);\r\n\r\n            if (node.Location != null)\r\n            {\r\n                Visit(node.Location, nodePointer.AtProperty(SarifPropertyName.Location));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 503,
                  "snippet": {
                    "text": "            Analyze(reportingDescriptor, reportingDescriptorPointer);\n        }\n\n        private void Visit(Node node, string nodePointer)\n        {\n            Analyze(node, nodePointer);\n\n            if (node.Location != null)\n            {\n                Visit(node.Location, nodePointer.AtProperty(SarifPropertyName.Location));\n            }\n        }\n\n        private void Visit(Notification notification, string notificationPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 492,
                            "endLine": 500,
                            "snippet": {
                              "text": "        private void Visit(Node node, string nodePointer)\r\n        {\r\n            Analyze(node, nodePointer);\r\n\r\n            if (node.Location != null)\r\n            {\r\n                Visit(node.Location, nodePointer.AtProperty(SarifPropertyName.Location));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 489,
                            "endLine": 503,
                            "snippet": {
                              "text": "            Analyze(reportingDescriptor, reportingDescriptorPointer);\n        }\n\n        private void Visit(Node node, string nodePointer)\n        {\n            Analyze(node, nodePointer);\n\n            if (node.Location != null)\n            {\n                Visit(node.Location, nodePointer.AtProperty(SarifPropertyName.Location));\n            }\n        }\n\n        private void Visit(Notification notification, string notificationPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 492,
                  "endLine": 500
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 28,
          "message": {
            "text": "Attackers are able to control the file system path argument to ReadAllLines() at [FileSystem.cs](1) line [133](1), which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 133,
                  "snippet": {
                    "text": "            return File.ReadAllLines(path);"
                  }
                },
                "contextRegion": {
                  "startLine": 130,
                  "endLine": 136,
                  "snippet": {
                    "text": "        /// </returns>\n        public string[] ReadAllLines(string path)\n        {\n            return File.ReadAllLines(path);\n        }\n\n        /// <summary>\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 142
                    },
                    {
                      "index": 143
                    },
                    {
                      "index": 144
                    },
                    {
                      "index": 145
                    },
                    {
                      "index": 146
                    },
                    {
                      "index": 149
                    },
                    {
                      "index": 150
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 478
                          },
                          "region": {
                            "startLine": 133,
                            "snippet": {
                              "text": "            return File.ReadAllLines(path);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 130,
                            "endLine": 136,
                            "snippet": {
                              "text": "        /// </returns>\n        public string[] ReadAllLines(string path)\n        {\n            return File.ReadAllLines(path);\n        }\n\n        /// <summary>\n"
                            }
                          }
                        },
                        "message": {
                          "text": "ReadAllLines(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 478
                },
                "region": {
                  "startLine": 133
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "4.429499"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Complete_File_V2 is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 95,
                  "snippet": {
                    "text": "        private readonly static Region s_Complete_File_V2 = "
                  }
                },
                "contextRegion": {
                  "startLine": 92,
                  "endLine": 98,
                  "snippet": {
                    "text": "                           StartLine = 1, StartColumn = 1, EndLine = 5, EndColumn = 1, CharOffset = 0, CharLength = 20 };\n\n        // Version 2 of this region defines it by using an endColumn value that extends past the actual line ending\n        private readonly static Region s_Complete_File_V2 = \n            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE },\n                           StartLine = 1, StartColumn = 1, EndLine = 4, EndColumn = 4, CharOffset = 0, CharLength = 20 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 95,
                            "snippet": {
                              "text": "        private readonly static Region s_Complete_File_V2 = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 92,
                            "endLine": 98,
                            "snippet": {
                              "text": "                           StartLine = 1, StartColumn = 1, EndLine = 5, EndColumn = 1, CharOffset = 0, CharLength = 20 };\n\n        // Version 2 of this region defines it by using an endColumn value that extends past the actual line ending\n        private readonly static Region s_Complete_File_V2 = \n            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE },\n                           StartLine = 1, StartColumn = 1, EndLine = 4, EndColumn = 4, CharOffset = 0, CharLength = 20 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Complete_File_V2"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 95
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method MergeDictionaryInto() in [SarifLogMatcher.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 730
                },
                "region": {
                  "startLine": 322,
                  "endLine": 328,
                  "snippet": {
                    "text": "        private void MergeDictionaryInto<T, S>(\r\n            IDictionary<T, S> baseDictionary, \r\n            IDictionary<T, S> dictionaryToAdd, \r\n            IEqualityComparer<S> dictionaryValueComparer)\r\n        {\r\n            MergeDictionaryInto(baseDictionary, dictionaryToAdd, dictionaryValueComparer, PropertyBagMergeBehavior);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 319,
                  "endLine": 331,
                  "snippet": {
                    "text": "            };\n        }\n\n        private void MergeDictionaryInto<T, S>(\n            IDictionary<T, S> baseDictionary, \n            IDictionary<T, S> dictionaryToAdd, \n            IEqualityComparer<S> dictionaryValueComparer)\n        {\n            MergeDictionaryInto(baseDictionary, dictionaryToAdd, dictionaryValueComparer, PropertyBagMergeBehavior);\n        }\n\n        internal static void MergeDictionaryInto<T, S>(\n            IDictionary<T, S> baseDictionary, \n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 730
                          },
                          "region": {
                            "startLine": 322,
                            "endLine": 328,
                            "snippet": {
                              "text": "        private void MergeDictionaryInto<T, S>(\r\n            IDictionary<T, S> baseDictionary, \r\n            IDictionary<T, S> dictionaryToAdd, \r\n            IEqualityComparer<S> dictionaryValueComparer)\r\n        {\r\n            MergeDictionaryInto(baseDictionary, dictionaryToAdd, dictionaryValueComparer, PropertyBagMergeBehavior);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 319,
                            "endLine": 331,
                            "snippet": {
                              "text": "            };\n        }\n\n        private void MergeDictionaryInto<T, S>(\n            IDictionary<T, S> baseDictionary, \n            IDictionary<T, S> dictionaryToAdd, \n            IEqualityComparer<S> dictionaryValueComparer)\n        {\n            MergeDictionaryInto(baseDictionary, dictionaryToAdd, dictionaryValueComparer, PropertyBagMergeBehavior);\n        }\n\n        internal static void MergeDictionaryInto<T, S>(\n            IDictionary<T, S> baseDictionary, \n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: MergeDictionaryInto"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 730
                },
                "region": {
                  "startLine": 322,
                  "endLine": 328
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_VersionRegex is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 835
                },
                "region": {
                  "startLine": 21,
                  "snippet": {
                    "text": "        private static readonly Regex s_VersionRegex = new Regex(VersionPropertyPattern, RegexOptions.Compiled);"
                  }
                },
                "contextRegion": {
                  "startLine": 18,
                  "endLine": 24,
                  "snippet": {
                    "text": "        // in the test file with the current version after reading the file\n        // into memory.\n        private const string VersionPropertyPattern = @\"\"\"version\"\"\\s*:\\s*\"\"[^\"\"]+\"\"\";\n        private static readonly Regex s_VersionRegex = new Regex(VersionPropertyPattern, RegexOptions.Compiled);\n\n        private const string SchemaPropertyPattern = @\"\"\"\\$schema\"\"\\s*:\\s*\"\"[^\"\"]+\"\"\";\n        private static readonly Regex s_SchemaRegex = new Regex(SchemaPropertyPattern, RegexOptions.Compiled);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 835
                          },
                          "region": {
                            "startLine": 21,
                            "snippet": {
                              "text": "        private static readonly Regex s_VersionRegex = new Regex(VersionPropertyPattern, RegexOptions.Compiled);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 18,
                            "endLine": 24,
                            "snippet": {
                              "text": "        // in the test file with the current version after reading the file\n        // into memory.\n        private const string VersionPropertyPattern = @\"\"\"version\"\"\\s*:\\s*\"\"[^\"\"]+\"\"\";\n        private static readonly Regex s_VersionRegex = new Regex(VersionPropertyPattern, RegexOptions.Compiled);\n\n        private const string SchemaPropertyPattern = @\"\"\"\\$schema\"\"\\s*:\\s*\"\"[^\"\"]+\"\"\";\n        private static readonly Regex s_SchemaRegex = new Regex(SchemaPropertyPattern, RegexOptions.Compiled);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_VersionRegex"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 835
                },
                "region": {
                  "startLine": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method ShouldExcludePopulationDueToOneOfCriteria() in [DefaultObjectPopulatingVisitor.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 187,
                  "endLine": 215,
                  "snippet": {
                    "text": "        private bool ShouldExcludePopulationDueToOneOfCriteria(string objectTypeName, string propertyName)\r\n        {\r\n            string jsonPropertyName = GetJsonNameFor(propertyName);\r\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\r\n\r\n            if (propertySchema.OneOf == null || propertySchema.OneOf.Count == 0)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            bool isPropertyInOneOfSubset = false;\r\n\r\n            foreach (var item in propertySchema.OneOf)\r\n            {\r\n                if (item.Required != null && item.Required.Contains(jsonPropertyName))\r\n                {\r\n                    isPropertyInOneOfSubset = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // The current property is not in any oneOf.required subset, hence treat like a regular property\r\n            if (!isPropertyInOneOfSubset)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return !ShouldThisOneOfPropertyPopulate(propertySchema, jsonPropertyName);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 184,
                  "endLine": 218,
                  "snippet": {
                    "text": "\n        // Converts the property name to it's JSON equivalent and \n        // determines whether that property should be excluded from population if it's in the \"OneOf\" list according to the schema.\n        private bool ShouldExcludePopulationDueToOneOfCriteria(string objectTypeName, string propertyName)\n        {\n            string jsonPropertyName = GetJsonNameFor(propertyName);\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\n\n            if (propertySchema.OneOf == null || propertySchema.OneOf.Count == 0)\n            {\n                return false;\n            }\n\n            bool isPropertyInOneOfSubset = false;\n\n            foreach (var item in propertySchema.OneOf)\n            {\n                if (item.Required != null && item.Required.Contains(jsonPropertyName))\n                {\n                    isPropertyInOneOfSubset = true;\n                    break;\n                }\n            }\n\n            // The current property is not in any oneOf.required subset, hence treat like a regular property\n            if (!isPropertyInOneOfSubset)\n            {\n                return false;\n            }\n\n            return !ShouldThisOneOfPropertyPopulate(propertySchema, jsonPropertyName);\n        }\n\n        private bool ShouldThisOneOfPropertyPopulate(JsonSchema propertySchema, string jsonPropertyName)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 53
                          },
                          "region": {
                            "startLine": 187,
                            "endLine": 215,
                            "snippet": {
                              "text": "        private bool ShouldExcludePopulationDueToOneOfCriteria(string objectTypeName, string propertyName)\r\n        {\r\n            string jsonPropertyName = GetJsonNameFor(propertyName);\r\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\r\n\r\n            if (propertySchema.OneOf == null || propertySchema.OneOf.Count == 0)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            bool isPropertyInOneOfSubset = false;\r\n\r\n            foreach (var item in propertySchema.OneOf)\r\n            {\r\n                if (item.Required != null && item.Required.Contains(jsonPropertyName))\r\n                {\r\n                    isPropertyInOneOfSubset = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // The current property is not in any oneOf.required subset, hence treat like a regular property\r\n            if (!isPropertyInOneOfSubset)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return !ShouldThisOneOfPropertyPopulate(propertySchema, jsonPropertyName);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 184,
                            "endLine": 218,
                            "snippet": {
                              "text": "\n        // Converts the property name to it's JSON equivalent and \n        // determines whether that property should be excluded from population if it's in the \"OneOf\" list according to the schema.\n        private bool ShouldExcludePopulationDueToOneOfCriteria(string objectTypeName, string propertyName)\n        {\n            string jsonPropertyName = GetJsonNameFor(propertyName);\n            JsonSchema propertySchema = GetJsonSchemaForObject(objectTypeName);\n\n            if (propertySchema.OneOf == null || propertySchema.OneOf.Count == 0)\n            {\n                return false;\n            }\n\n            bool isPropertyInOneOfSubset = false;\n\n            foreach (var item in propertySchema.OneOf)\n            {\n                if (item.Required != null && item.Required.Contains(jsonPropertyName))\n                {\n                    isPropertyInOneOfSubset = true;\n                    break;\n                }\n            }\n\n            // The current property is not in any oneOf.required subset, hence treat like a regular property\n            if (!isPropertyInOneOfSubset)\n            {\n                return false;\n            }\n\n            return !ShouldThisOneOfPropertyPopulate(propertySchema, jsonPropertyName);\n        }\n\n        private bool ShouldThisOneOfPropertyPopulate(JsonSchema propertySchema, string jsonPropertyName)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: ShouldExcludePopulationDueToOneOfCriteria"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 53
                },
                "region": {
                  "startLine": 187,
                  "endLine": 215
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 22,
          "message": {
            "text": "The method Convert() in [ClangAnalyzerConverter.cs](1) fails to enable validation before parsing XML on line [49](1), which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1123
                },
                "region": {
                  "startLine": 49,
                  "snippet": {
                    "text": "                using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                  }
                },
                "contextRegion": {
                  "startLine": 46,
                  "endLine": 52,
                  "snippet": {
                    "text": "\n                var results = new List<Result>();\n\n                using (XmlReader xmlReader = XmlReader.Create(input, settings))\n                {\n                    xmlReader.MoveToContent();\n                    xmlReader.ReadStartElement(ClangSchemaStrings.PlistName);\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1123
                          },
                          "region": {
                            "startLine": 28,
                            "snippet": {
                              "text": "            if (input == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 25,
                            "endLine": 31,
                            "snippet": {
                              "text": "            // Rodney is tasked with bringing Clang analyzer results into the SARIF fold.\n            // Once this work is complete, he can close the following task:\n            // http://twcsec-tfs01:8080/tfs/DefaultCollection/SecDevTools/_workitems#_a=edit&id=13409\n            if (input == null)\n            {\n                throw new ArgumentNullException(nameof(input));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1123
                          },
                          "region": {
                            "startLine": 33,
                            "snippet": {
                              "text": "            if (output == null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 30,
                            "endLine": 36,
                            "snippet": {
                              "text": "                throw new ArgumentNullException(nameof(input));\n            }\n\n            if (output == null)\n            {\n                throw new ArgumentNullException(nameof(output));\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1123
                          },
                          "region": {
                            "startLine": 40,
                            "snippet": {
                              "text": "                XmlReaderSettings settings = new XmlReaderSettings"
                            }
                          },
                          "contextRegion": {
                            "startLine": 37,
                            "endLine": 43,
                            "snippet": {
                              "text": "\n            try\n            {\n                XmlReaderSettings settings = new XmlReaderSettings\n                {\n                    IgnoreWhitespace = true,\n                    DtdProcessing = DtdProcessing.Ignore,\n"
                            }
                          }
                        },
                        "message": {
                          "text": "settings = new XmlReaderSettings() : XxmlReaderSettings instantiated"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1123
                          },
                          "region": {
                            "startLine": 49,
                            "snippet": {
                              "text": "                using (XmlReader xmlReader = XmlReader.Create(input, settings))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 46,
                            "endLine": 52,
                            "snippet": {
                              "text": "\n                var results = new List<Result>();\n\n                using (XmlReader xmlReader = XmlReader.Create(input, settings))\n                {\n                    xmlReader.MoveToContent();\n                    xmlReader.ReadStartElement(ClangSchemaStrings.PlistName);\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Create(?, settings)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1123
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 151
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 151
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 151
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 151
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 151
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 151
                    },
                    {
                      "index": 129
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field testLocationXml is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 813
                },
                "region": {
                  "startLine": 127,
                  "snippet": {
                    "text": "        private const string testLocationXml = \"<location file=\\\"\" + ExampleFileName + \"\\\" line=\\\"1234\\\" />\";"
                  }
                },
                "contextRegion": {
                  "startLine": 124,
                  "endLine": 130,
                  "snippet": {
                    "text": "            }\n        }\n\n        private const string testLocationXml = \"<location file=\\\"\" + ExampleFileName + \"\\\" line=\\\"1234\\\" />\";\n\n        private static CppCheckLocation AssertLocationIsTestLocation(CppCheckLocation result)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 813
                          },
                          "region": {
                            "startLine": 127,
                            "snippet": {
                              "text": "        private const string testLocationXml = \"<location file=\\\"\" + ExampleFileName + \"\\\" line=\\\"1234\\\" />\";"
                            }
                          },
                          "contextRegion": {
                            "startLine": 124,
                            "endLine": 130,
                            "snippet": {
                              "text": "            }\n        }\n\n        private const string testLocationXml = \"<location file=\\\"\" + ExampleFileName + \"\\\" line=\\\"1234\\\" />\";\n\n        private static CppCheckLocation AssertLocationIsTestLocation(CppCheckLocation result)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: testLocationXml"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 813
                },
                "region": {
                  "startLine": 127
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 31,
          "message": {
            "text": "The method SavePropertiesToXmlStream()  in [PropertiesDictionaryExtensionMethods.cs](1) determines an object's type based its class name on line [60](1). This practice can lead to unexpected behavior or allow an attacker to inject a malicious class.\r\nDetermining an object's type based on its class name can lead to unexpected behavior or allow an attacker to inject a malicious class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 168
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            if (propertyBagTypeName != \"PropertyBag\")"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "                writer.WriteAttributeString(KEY_ID, name);\n            }\n\n            if (propertyBagTypeName != \"PropertyBag\")\n            {\n                writer.WriteAttributeString(TYPE_ID, propertyBagTypeName);\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 152
                    },
                    {
                      "index": 153
                    },
                    {
                      "index": 155
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 168
                          },
                          "region": {
                            "startLine": 60,
                            "snippet": {
                              "text": "            if (propertyBagTypeName != \"PropertyBag\")"
                            }
                          },
                          "contextRegion": {
                            "startLine": 57,
                            "endLine": 63,
                            "snippet": {
                              "text": "                writer.WriteAttributeString(KEY_ID, name);\n            }\n\n            if (propertyBagTypeName != \"PropertyBag\")\n            {\n                writer.WriteAttributeString(TYPE_ID, propertyBagTypeName);\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Equals(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 168
                },
                "region": {
                  "startLine": 60
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 33,
          "message": {
            "text": "The method AddMessagesToResult() in [FortifyFprConverter.cs](1) can dereference a null pointer on line [1135](1), thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 1135,
                  "snippet": {
                    "text": "                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key), value);"
                  }
                },
                "contextRegion": {
                  "startLine": 1132,
                  "endLine": 1138,
                  "snippet": {
                    "text": "                    else\n                    {\n                        // Replace the token with plain text.\n                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key), value);\n                    }\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1118,
                            "snippet": {
                              "text": "            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1115,
                            "endLine": 1121,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = _rules[result.RuleIndex];\n            Message message = new Message();\n\n            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;\n\n            if (_currentResultReplacementDictionary != null)\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1118,
                            "snippet": {
                              "text": "            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1115,
                            "endLine": 1121,
                            "snippet": {
                              "text": "            ReportingDescriptor rule = _rules[result.RuleIndex];\n            Message message = new Message();\n\n            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;\n\n            if (_currentResultReplacementDictionary != null)\n            {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "messageText = null : messageText is declared and/or assigned to null value"
                        }
                      },
                      "kinds": [
                        "acquire",
                        "resource"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1120,
                            "snippet": {
                              "text": "            if (_currentResultReplacementDictionary != null)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1117,
                            "endLine": 1123,
                            "snippet": {
                              "text": "\n            string messageText = (rule.ShortDescription ?? rule.FullDescription)?.Text;\n\n            if (_currentResultReplacementDictionary != null)\n            {\n                foreach (string key in _currentResultReplacementDictionary.Keys)\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1122,
                            "snippet": {
                              "text": "                foreach (string key in _currentResultReplacementDictionary.Keys)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1119,
                            "endLine": 1125,
                            "snippet": {
                              "text": "\n            if (_currentResultReplacementDictionary != null)\n            {\n                foreach (string key in _currentResultReplacementDictionary.Keys)\n                {\n                    string value = _currentResultReplacementDictionary[key];\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "true"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1126,
                            "snippet": {
                              "text": "                    if (SupportedReplacementTokens.Contains(key))"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1123,
                            "endLine": 1129,
                            "snippet": {
                              "text": "                {\n                    string value = _currentResultReplacementDictionary[key];\n\n                    if (SupportedReplacementTokens.Contains(key))\n                    {\n                        // Replace the token with an embedded hyperlink.\n                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key),\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Branch not taken"
                        }
                      },
                      "kinds": [
                        "branch",
                        "false"
                      ]
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 819
                          },
                          "region": {
                            "startLine": 1135,
                            "snippet": {
                              "text": "                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key), value);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 1132,
                            "endLine": 1138,
                            "snippet": {
                              "text": "                    else\n                    {\n                        // Replace the token with plain text.\n                        messageText = messageText.Replace(string.Format(ReplacementTokenFormat, key), value);\n                    }\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "messageText.Replace(...) : messageText is not checked for null value before being dereferenced"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 819
                },
                "region": {
                  "startLine": 1135
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "        {\n            if (args.Length < 2)\n            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 30,
                            "snippet": {
                              "text": "                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 27,
                            "endLine": 33,
                            "snippet": {
                              "text": "        {\n            if (args.Length < 2)\n            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 30
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 157
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 158
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 159
                    },
                    {
                      "index": 160
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 161
                    },
                    {
                      "index": 162
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 163
                    },
                    {
                      "index": 164
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 157
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 158
                    },
                    {
                      "index": 130
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 159
                    },
                    {
                      "index": 160
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 161
                    },
                    {
                      "index": 162
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 156
                    },
                    {
                      "index": 73
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 163
                    },
                    {
                      "index": 164
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ConstructUriBaseIdsDictionary() in [DriverSdkExtensions.cs](1) ignores an exception on line [46](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 471
                },
                "region": {
                  "startLine": 46,
                  "snippet": {
                    "text": "                        catch (ArgumentException) { } // illegal file path characters throw this"
                  }
                },
                "contextRegion": {
                  "startLine": 43,
                  "endLine": 49,
                  "snippet": {
                    "text": "                            uriToken = Path.GetFullPath(uriToken);\n                            Uri.TryCreate(uriToken, UriKind.Absolute, out value);\n                        }\n                        catch (ArgumentException) { } // illegal file path characters throw this\n                        catch (PathTooLongException) { }\n                    }\n                }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 471
                          },
                          "region": {
                            "startLine": 46,
                            "snippet": {
                              "text": "                        catch (ArgumentException) { } // illegal file path characters throw this"
                            }
                          },
                          "contextRegion": {
                            "startLine": 43,
                            "endLine": 49,
                            "snippet": {
                              "text": "                            uriToken = Path.GetFullPath(uriToken);\n                            Uri.TryCreate(uriToken, UriKind.Absolute, out value);\n                        }\n                        catch (ArgumentException) { } // illegal file path characters throw this\n                        catch (PathTooLongException) { }\n                    }\n                }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 471
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 166
                    },
                    {
                      "index": 111
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 168
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 167
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 169
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 170
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 157
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 166
                    },
                    {
                      "index": 111
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 168
                    },
                    {
                      "index": 51
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 167
                    },
                    {
                      "index": 121
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 169
                    },
                    {
                      "index": 116
                    },
                    {
                      "index": 52
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 165
                    },
                    {
                      "index": 41
                    },
                    {
                      "index": 42
                    },
                    {
                      "index": 43
                    },
                    {
                      "index": 44
                    },
                    {
                      "index": 45
                    },
                    {
                      "index": 47
                    },
                    {
                      "index": 49
                    },
                    {
                      "index": 50
                    },
                    {
                      "index": 170
                    },
                    {
                      "index": 74
                    },
                    {
                      "index": 157
                    },
                    {
                      "index": 75
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 34,
          "message": {
            "text": "The method GetRegionByteLength() in [SarifCurrentToVersionOneVisitor.cs](1) ignores the value returned by Read() on line [567](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring a method's return value can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 567,
                  "snippet": {
                    "text": "                        reader.Read(buffer, 0, buffer.Length);"
                  }
                },
                "contextRegion": {
                  "startLine": 564,
                  "endLine": 570,
                  "snippet": {
                    "text": "                    {\n                        // Read the first charOffset characters\n                        char[] buffer = new char[v2Region.CharOffset];\n                        reader.Read(buffer, 0, buffer.Length);\n\n                        // Read the next charLength characters  \n                        buffer = new char[v2Region.CharLength];\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 567,
                            "snippet": {
                              "text": "                        reader.Read(buffer, 0, buffer.Length);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 564,
                            "endLine": 570,
                            "snippet": {
                              "text": "                    {\n                        // Read the first charOffset characters\n                        char[] buffer = new char[v2Region.CharOffset];\n                        reader.Read(buffer, 0, buffer.Length);\n\n                        // Read the next charLength characters  \n                        buffer = new char[v2Region.CharLength];\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Read()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 567
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 34,
          "message": {
            "text": "The method GetRegionByteLength() in [SarifCurrentToVersionOneVisitor.cs](1) ignores the value returned by Read() on line [558](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring a method's return value can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 558,
                  "snippet": {
                    "text": "                            reader.Read(buffer, 0, buffer.Length);"
                  }
                },
                "contextRegion": {
                  "startLine": 555,
                  "endLine": 561,
                  "snippet": {
                    "text": "\n                            // Read the next charLength characters\n                            char[] buffer = new char[v2Region.CharLength];\n                            reader.Read(buffer, 0, buffer.Length);\n\n                            byteLength = encoding.GetByteCount(buffer);\n                        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 558,
                            "snippet": {
                              "text": "                            reader.Read(buffer, 0, buffer.Length);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 555,
                            "endLine": 561,
                            "snippet": {
                              "text": "\n                            // Read the next charLength characters\n                            char[] buffer = new char[v2Region.CharLength];\n                            reader.Read(buffer, 0, buffer.Length);\n\n                            byteLength = encoding.GetByteCount(buffer);\n                        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Read()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 558
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 537,
                  "endLine": 545,
                  "snippet": {
                    "text": "        private void Visit(Rectangle rectangle, string rectanglePointer)\r\n        {\r\n            if (rectangle.Message != null)\r\n            {\r\n                Visit(rectangle.Message, rectanglePointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            Analyze(rectangle, rectanglePointer);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 534,
                  "endLine": 548,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Rectangle rectangle, string rectanglePointer)\n        {\n            if (rectangle.Message != null)\n            {\n                Visit(rectangle.Message, rectanglePointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            Analyze(rectangle, rectanglePointer);\n        }\n\n        private void Visit(Region region, string regionPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 537,
                            "endLine": 545,
                            "snippet": {
                              "text": "        private void Visit(Rectangle rectangle, string rectanglePointer)\r\n        {\r\n            if (rectangle.Message != null)\r\n            {\r\n                Visit(rectangle.Message, rectanglePointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n\r\n            Analyze(rectangle, rectanglePointer);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 534,
                            "endLine": 548,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Rectangle rectangle, string rectanglePointer)\n        {\n            if (rectangle.Message != null)\n            {\n                Visit(rectangle.Message, rectanglePointer.AtProperty(SarifPropertyName.Message));\n            }\n\n            Analyze(rectangle, rectanglePointer);\n        }\n\n        private void Visit(Region region, string regionPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 537,
                  "endLine": 545
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Insertion_Beginning_Of_Binary_File is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 55,
                  "snippet": {
                    "text": "        private readonly static Region s_Insertion_Beginning_Of_Binary_File = "
                  }
                },
                "contextRegion": {
                  "startLine": 52,
                  "endLine": 58,
                  "snippet": {
                    "text": "        private const string LINES_2_AND_3 = \"efg\\r\\nhijk\";\n        private const string CARRIAGE_RETURN_NEW_LINE = \"\\r\\n\";\n\n        private readonly static Region s_Insertion_Beginning_Of_Binary_File = \n            new Region() { Snippet = null,\n                           StartLine = 0, StartColumn = 0, EndLine = 0, EndColumn = 0, CharOffset = 0, CharLength = 0 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 55,
                            "snippet": {
                              "text": "        private readonly static Region s_Insertion_Beginning_Of_Binary_File = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 52,
                            "endLine": 58,
                            "snippet": {
                              "text": "        private const string LINES_2_AND_3 = \"efg\\r\\nhijk\";\n        private const string CARRIAGE_RETURN_NEW_LINE = \"\\r\\n\";\n\n        private readonly static Region s_Insertion_Beginning_Of_Binary_File = \n            new Region() { Snippet = null,\n                           StartLine = 0, StartColumn = 0, EndLine = 0, EndColumn = 0, CharOffset = 0, CharLength = 0 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Insertion_Beginning_Of_Binary_File"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 55
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "endLine": 47,
                  "snippet": {
                    "text": "        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 44,
                            "snippet": {
                              "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 41,
                            "endLine": 47,
                            "snippet": {
                              "text": "        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextInt() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 44,
                  "snippet": {
                    "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)"
                  }
                },
                "contextRegion": {
                  "startLine": 41,
                  "endLine": 47,
                  "snippet": {
                    "text": "        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 44,
                            "snippet": {
                              "text": "            || mrg0.nextInt(360) != mrg1.nextInt(360)"
                            }
                          },
                          "contextRegion": {
                            "startLine": 41,
                            "endLine": 47,
                            "snippet": {
                              "text": "        MyRandom mrg0 = new MyRandom(31415926545L);\n        MyRandom mrg1 = new MyRandom(31415926545L);\n        if (mrg0.nextInt() != mrg1.nextInt()\n            || mrg0.nextInt(360) != mrg1.nextInt(360)\n            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextInt()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 21
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 74,
                  "snippet": {
                    "text": "                Console.WriteLine($\"Error: {ex}\");"
                  }
                },
                "contextRegion": {
                  "startLine": 71,
                  "endLine": 77,
                  "snippet": {
                    "text": "            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 74,
                            "snippet": {
                              "text": "                Console.WriteLine($\"Error: {ex}\");"
                            }
                          },
                          "contextRegion": {
                            "startLine": 71,
                            "endLine": 77,
                            "snippet": {
                              "text": "            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 74
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 351,
                  "endLine": 359,
                  "snippet": {
                    "text": "        private void Visit(ArtifactChange fileChange, string fileChangePointer)\r\n        {\r\n            Analyze(fileChange, fileChangePointer);\r\n\r\n            if (fileChange.ArtifactLocation != null)\r\n            {\r\n                Visit(fileChange.ArtifactLocation, fileChangePointer.AtProperty(SarifPropertyName.ArtifactLocation));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 362,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(ArtifactChange fileChange, string fileChangePointer)\n        {\n            Analyze(fileChange, fileChangePointer);\n\n            if (fileChange.ArtifactLocation != null)\n            {\n                Visit(fileChange.ArtifactLocation, fileChangePointer.AtProperty(SarifPropertyName.ArtifactLocation));\n            }\n        }\n\n        private void Visit(Graph graph, string graphPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 351,
                            "endLine": 359,
                            "snippet": {
                              "text": "        private void Visit(ArtifactChange fileChange, string fileChangePointer)\r\n        {\r\n            Analyze(fileChange, fileChangePointer);\r\n\r\n            if (fileChange.ArtifactLocation != null)\r\n            {\r\n                Visit(fileChange.ArtifactLocation, fileChangePointer.AtProperty(SarifPropertyName.ArtifactLocation));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 348,
                            "endLine": 362,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(ArtifactChange fileChange, string fileChangePointer)\n        {\n            Analyze(fileChange, fileChangePointer);\n\n            if (fileChange.ArtifactLocation != null)\n            {\n                Visit(fileChange.ArtifactLocation, fileChangePointer.AtProperty(SarifPropertyName.ArtifactLocation));\n            }\n        }\n\n        private void Visit(Graph graph, string graphPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 351,
                  "endLine": 359
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using Write() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 138,
                  "snippet": {
                    "text": "            if (context.Writer.RowCountWritten % 1000 == 0) { Console.Write(\".\"); }"
                  }
                },
                "contextRegion": {
                  "startLine": 135,
                  "endLine": 141,
                  "snippet": {
                    "text": "            }\n\n            context.Writer.NextRow();\n            if (context.Writer.RowCountWritten % 1000 == 0) { Console.Write(\".\"); }\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 138,
                            "snippet": {
                              "text": "            if (context.Writer.RowCountWritten % 1000 == 0) { Console.Write(\".\"); }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 135,
                            "endLine": 141,
                            "snippet": {
                              "text": "            }\n\n            context.Writer.NextRow();\n            if (context.Writer.RowCountWritten % 1000 == 0) { Console.Write(\".\"); }\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: Write"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 138
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 34,
          "message": {
            "text": "The method FindArrayStart() in [JsonMapNode.cs](1) ignores the value returned by Read() on line [130](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring a method's return value can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1053
                },
                "region": {
                  "startLine": 130,
                  "snippet": {
                    "text": "                source.Read(buffer, 1, lengthToRead);"
                  }
                },
                "contextRegion": {
                  "startLine": 127,
                  "endLine": 133,
                  "snippet": {
                    "text": "\n                // Read the array slice\n                source.Seek(readFromPosition, SeekOrigin.Begin);\n                source.Read(buffer, 1, lengthToRead);\n\n                // Make it a valid array prefix (it must start with '[', which will look like the root of the Json document\n                buffer[0] = (byte)'[';\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1053
                          },
                          "region": {
                            "startLine": 130,
                            "snippet": {
                              "text": "                source.Read(buffer, 1, lengthToRead);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 127,
                            "endLine": 133,
                            "snippet": {
                              "text": "\n                // Read the array slice\n                source.Seek(readFromPosition, SeekOrigin.Begin);\n                source.Read(buffer, 1, lengthToRead);\n\n                // Make it a valid array prefix (it must start with '[', which will look like the root of the Json document\n                buffer[0] = (byte)'[';\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Read()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1053
                },
                "region": {
                  "startLine": 130
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Complete_File_V1 is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 90,
                  "snippet": {
                    "text": "        private readonly static Region s_Complete_File_V1 = "
                  }
                },
                "contextRegion": {
                  "startLine": 87,
                  "endLine": 93,
                  "snippet": {
                    "text": "                           StartLine = 3, StartColumn = 5, EndLine = 3, EndColumn = 7, CharOffset = 15, CharLength = 2 };\n\n        // Version 1 of this region defines it by using the insertion point of the following line as the terminus\n        private readonly static Region s_Complete_File_V1 = \n            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE },\n                           StartLine = 1, StartColumn = 1, EndLine = 5, EndColumn = 1, CharOffset = 0, CharLength = 20 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 90,
                            "snippet": {
                              "text": "        private readonly static Region s_Complete_File_V1 = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 87,
                            "endLine": 93,
                            "snippet": {
                              "text": "                           StartLine = 3, StartColumn = 5, EndLine = 3, EndColumn = 7, CharOffset = 15, CharLength = 2 };\n\n        // Version 1 of this region defines it by using the insertion point of the following line as the terminus\n        private readonly static Region s_Complete_File_V1 = \n            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE },\n                           StartLine = 1, StartColumn = 1, EndLine = 5, EndColumn = 1, CharOffset = 0, CharLength = 20 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Complete_File_V1"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 90
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [260](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 171
                    },
                    {
                      "index": 172
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 171
                    },
                    {
                      "index": 172
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 53
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 260,
                            "snippet": {
                              "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 257,
                            "endLine": 263,
                            "snippet": {
                              "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 260
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 17,
          "message": {
            "text": "The function WriteToConsole() in [ConsoleLogger.cs](1) reveals system data or debugging information by calling WriteLine() on line [267](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267,
                  "snippet": {
                    "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                  }
                },
                "contextRegion": {
                  "startLine": 264,
                  "endLine": 270,
                  "snippet": {
                    "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 171
                    },
                    {
                      "index": 172
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 171
                    },
                    {
                      "index": 172
                    },
                    {
                      "index": 95
                    },
                    {
                      "index": 96
                    },
                    {
                      "index": 77
                    },
                    {
                      "index": 76
                    },
                    {
                      "index": 62
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 267,
                            "snippet": {
                              "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                            }
                          },
                          "contextRegion": {
                            "startLine": 264,
                            "endLine": 270,
                            "snippet": {
                              "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 267
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.04"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    Console.WriteLine();"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                        ConvertSarifLog(serializer, sarifFilePath, writer, selectedWriters);\n                    }\n\n                    Console.WriteLine();\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 67,
                            "snippet": {
                              "text": "                    Console.WriteLine();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 64,
                            "endLine": 70,
                            "snippet": {
                              "text": "                        ConvertSarifLog(serializer, sarifFilePath, writer, selectedWriters);\n                    }\n\n                    Console.WriteLine();\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 67
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 73,
                  "snippet": {
                    "text": "                Console.WriteLine();"
                  }
                },
                "contextRegion": {
                  "startLine": 70,
                  "endLine": 76,
                  "snippet": {
                    "text": "            }\n            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 644
                          },
                          "region": {
                            "startLine": 73,
                            "snippet": {
                              "text": "                Console.WriteLine();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 70,
                            "endLine": 76,
                            "snippet": {
                              "text": "            }\n            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 644
                },
                "region": {
                  "startLine": 73
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 391,
                  "endLine": 407,
                  "snippet": {
                    "text": "        private void Visit(GraphTraversal graphTraversal, string graphTraversalPointer)\r\n        {\r\n            if (graphTraversal.Description != null)\r\n            {\r\n                Visit(graphTraversal.Description, graphTraversalPointer.AtProperty(SarifPropertyName.Description));\r\n            }\r\n\r\n            if (graphTraversal.EdgeTraversals != null)\r\n            {\r\n                string edgeTraversalsPointer = graphTraversalPointer.AtProperty(SarifPropertyName.EdgeTraversals);\r\n\r\n                for (int i = 0; i < graphTraversal.EdgeTraversals.Count; ++i)\r\n                {\r\n                    Visit(graphTraversal.EdgeTraversals[i], edgeTraversalsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 388,
                  "endLine": 410,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(GraphTraversal graphTraversal, string graphTraversalPointer)\n        {\n            if (graphTraversal.Description != null)\n            {\n                Visit(graphTraversal.Description, graphTraversalPointer.AtProperty(SarifPropertyName.Description));\n            }\n\n            if (graphTraversal.EdgeTraversals != null)\n            {\n                string edgeTraversalsPointer = graphTraversalPointer.AtProperty(SarifPropertyName.EdgeTraversals);\n\n                for (int i = 0; i < graphTraversal.EdgeTraversals.Count; ++i)\n                {\n                    Visit(graphTraversal.EdgeTraversals[i], edgeTraversalsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(Invocation invocation, string invocationPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 391,
                            "endLine": 407,
                            "snippet": {
                              "text": "        private void Visit(GraphTraversal graphTraversal, string graphTraversalPointer)\r\n        {\r\n            if (graphTraversal.Description != null)\r\n            {\r\n                Visit(graphTraversal.Description, graphTraversalPointer.AtProperty(SarifPropertyName.Description));\r\n            }\r\n\r\n            if (graphTraversal.EdgeTraversals != null)\r\n            {\r\n                string edgeTraversalsPointer = graphTraversalPointer.AtProperty(SarifPropertyName.EdgeTraversals);\r\n\r\n                for (int i = 0; i < graphTraversal.EdgeTraversals.Count; ++i)\r\n                {\r\n                    Visit(graphTraversal.EdgeTraversals[i], edgeTraversalsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 388,
                            "endLine": 410,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(GraphTraversal graphTraversal, string graphTraversalPointer)\n        {\n            if (graphTraversal.Description != null)\n            {\n                Visit(graphTraversal.Description, graphTraversalPointer.AtProperty(SarifPropertyName.Description));\n            }\n\n            if (graphTraversal.EdgeTraversals != null)\n            {\n                string edgeTraversalsPointer = graphTraversalPointer.AtProperty(SarifPropertyName.EdgeTraversals);\n\n                for (int i = 0; i < graphTraversal.EdgeTraversals.Count; ++i)\n                {\n                    Visit(graphTraversal.EdgeTraversals[i], edgeTraversalsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(Invocation invocation, string invocationPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 391,
                  "endLine": 407
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field EmptyGraph is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 404
                },
                "region": {
                  "startLine": 13,
                  "snippet": {
                    "text": "        private static Graph EmptyGraph = new Graph();"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "endLine": 16,
                  "snippet": {
                    "text": "{\n    public partial class Run\n    {\n        private static Graph EmptyGraph = new Graph();\n        private static Artifact EmptyFile = new Artifact();\n        private static Invocation EmptyInvocation = new Invocation();\n        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 404
                          },
                          "region": {
                            "startLine": 13,
                            "snippet": {
                              "text": "        private static Graph EmptyGraph = new Graph();"
                            }
                          },
                          "contextRegion": {
                            "startLine": 10,
                            "endLine": 16,
                            "snippet": {
                              "text": "{\n    public partial class Run\n    {\n        private static Graph EmptyGraph = new Graph();\n        private static Artifact EmptyFile = new Artifact();\n        private static Invocation EmptyInvocation = new Invocation();\n        private static LogicalLocation EmptyLogicalLocation = new LogicalLocation();\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: EmptyGraph"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 404
                },
                "region": {
                  "startLine": 13
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_Fragment_Carriage_Returns_Only is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 129,
                  "snippet": {
                    "text": "        private readonly static Region s_Fragment_Carriage_Returns_Only = "
                  }
                },
                "contextRegion": {
                  "startLine": 126,
                  "endLine": 132,
                  "snippet": {
                    "text": "            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE_CARRIAGE_RETURNS_ONLY },\n                           StartLine = 1, StartColumn = 1, EndLine = 6, EndColumn = 1, CharOffset = 0, CharLength = 10 };\n\n        private readonly static Region s_Fragment_Carriage_Returns_Only = \n            new Region() { Snippet = new ArtifactContent() { Text = FRAGMENT_CARRIAGE_RETURNS_ONLY },\n                           StartLine = 4, StartColumn = 2, EndLine = 6, EndColumn = 1, CharOffset = 4, CharLength = 6 };\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 938
                          },
                          "region": {
                            "startLine": 129,
                            "snippet": {
                              "text": "        private readonly static Region s_Fragment_Carriage_Returns_Only = "
                            }
                          },
                          "contextRegion": {
                            "startLine": 126,
                            "endLine": 132,
                            "snippet": {
                              "text": "            new Region() { Snippet = new ArtifactContent() { Text = COMPLETE_FILE_CARRIAGE_RETURNS_ONLY },\n                           StartLine = 1, StartColumn = 1, EndLine = 6, EndColumn = 1, CharOffset = 0, CharLength = 10 };\n\n        private readonly static Region s_Fragment_Carriage_Returns_Only = \n            new Region() { Snippet = new ArtifactContent() { Text = FRAGMENT_CARRIAGE_RETURNS_ONLY },\n                           StartLine = 4, StartColumn = 2, EndLine = 6, EndColumn = 1, CharOffset = 4, CharLength = 6 };\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_Fragment_Carriage_Returns_Only"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 938
                },
                "region": {
                  "startLine": 129
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method VisitReportingDescriptor() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 487,
                  "endLine": 490,
                  "snippet": {
                    "text": "        private void VisitReportingDescriptor(ReportingDescriptor reportingDescriptor, string reportingDescriptorPointer)\r\n        {\r\n            Analyze(reportingDescriptor, reportingDescriptorPointer);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 484,
                  "endLine": 493,
                  "snippet": {
                    "text": "            Analyze(multiformatMessageString, multiformatMessageStringPointer);\n        }\n\n        private void VisitReportingDescriptor(ReportingDescriptor reportingDescriptor, string reportingDescriptorPointer)\n        {\n            Analyze(reportingDescriptor, reportingDescriptorPointer);\n        }\n\n        private void Visit(Node node, string nodePointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 487,
                            "endLine": 490,
                            "snippet": {
                              "text": "        private void VisitReportingDescriptor(ReportingDescriptor reportingDescriptor, string reportingDescriptorPointer)\r\n        {\r\n            Analyze(reportingDescriptor, reportingDescriptorPointer);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 484,
                            "endLine": 493,
                            "snippet": {
                              "text": "            Analyze(multiformatMessageString, multiformatMessageStringPointer);\n        }\n\n        private void VisitReportingDescriptor(ReportingDescriptor reportingDescriptor, string reportingDescriptorPointer)\n        {\n            Analyze(reportingDescriptor, reportingDescriptorPointer);\n        }\n\n        private void Visit(Node node, string nodePointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: VisitReportingDescriptor"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 487,
                  "endLine": 490
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 19,
          "level": "note",
          "message": {
            "text": "The field s_consumeElementOfDepthTestDocument is never used.\r\nThis field is never used directly or indirectly by a public method."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 455
                },
                "region": {
                  "startLine": 312,
                  "snippet": {
                    "text": "        private static readonly XElement s_consumeElementOfDepthTestDocument ="
                  }
                },
                "contextRegion": {
                  "startLine": 309,
                  "endLine": 315,
                  "snippet": {
                    "text": "            }\n        }\n\n        private static readonly XElement s_consumeElementOfDepthTestDocument =\n            new XElement(\"root\",\n                new XElement(\"empty_child\"),\n                new XElement(\"content_child\", \"content\"),\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 455
                          },
                          "region": {
                            "startLine": 312,
                            "snippet": {
                              "text": "        private static readonly XElement s_consumeElementOfDepthTestDocument ="
                            }
                          },
                          "contextRegion": {
                            "startLine": 309,
                            "endLine": 315,
                            "snippet": {
                              "text": "            }\n        }\n\n        private static readonly XElement s_consumeElementOfDepthTestDocument =\n            new XElement(\"root\",\n                new XElement(\"empty_child\"),\n                new XElement(\"content_child\", \"content\"),\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Field: s_consumeElementOfDepthTestDocument"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 455
                },
                "region": {
                  "startLine": 312
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 13,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls sleep()  on line [83](1). Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 83,
                  "snippet": {
                    "text": "                Thread.sleep(3600);"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "endLine": 86,
                  "snippet": {
                    "text": "            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n            }\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 83,
                            "snippet": {
                              "text": "                Thread.sleep(3600);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 80,
                            "endLine": 86,
                            "snippet": {
                              "text": "            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n            }\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "sleep()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 13,
          "message": {
            "text": "The method main() in [bannedAPIs.java](1) calls sleep()  on line [83](1). Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 83,
                  "snippet": {
                    "text": "                Thread.sleep(3600);"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "endLine": 86,
                  "snippet": {
                    "text": "            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n            }\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 83,
                            "snippet": {
                              "text": "                Thread.sleep(3600);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 80,
                            "endLine": 86,
                            "snippet": {
                              "text": "            Thread.sleep(3000);\n            Process p = Runtime.getRuntime().exec(\"java BannedApis\");\n            if (p != null) {\n                Thread.sleep(3600);\n                p.destroy();\n            }\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "sleep()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 24
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method BuildToolSpecificEmptyLogText() in [ConverterTestsBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 192
                },
                "region": {
                  "startLine": 71,
                  "endLine": 74,
                  "snippet": {
                    "text": "        private static string BuildToolSpecificEmptyLogText()\r\n        {\r\n            return JsonConvert.SerializeObject(BuildToolSpecificEmptyLog());\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 68,
                  "endLine": 77,
                  "snippet": {
                    "text": "            };\n        }\n\n        private static string BuildToolSpecificEmptyLogText()\n        {\n            return JsonConvert.SerializeObject(BuildToolSpecificEmptyLog());\n        }\n\n        public readonly SarifLog EmptyLog = BuildToolSpecificEmptyLog();\n        public readonly string EmptyResultLogText = JsonConvert.SerializeObject(BuildToolSpecificEmptyLog());\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 192
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 74,
                            "snippet": {
                              "text": "        private static string BuildToolSpecificEmptyLogText()\r\n        {\r\n            return JsonConvert.SerializeObject(BuildToolSpecificEmptyLog());\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 68,
                            "endLine": 77,
                            "snippet": {
                              "text": "            };\n        }\n\n        private static string BuildToolSpecificEmptyLogText()\n        {\n            return JsonConvert.SerializeObject(BuildToolSpecificEmptyLog());\n        }\n\n        public readonly SarifLog EmptyLog = BuildToolSpecificEmptyLog();\n        public readonly string EmptyResultLogText = JsonConvert.SerializeObject(BuildToolSpecificEmptyLog());\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: BuildToolSpecificEmptyLogText"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 192
                },
                "region": {
                  "startLine": 71,
                  "endLine": 74
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextFloat() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 34,
                  "snippet": {
                    "text": "            || rg0.nextFloat() != rg1.nextFloat()"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "endLine": 37,
                  "snippet": {
                    "text": "            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 100
                          },
                          "region": {
                            "startLine": 34,
                            "snippet": {
                              "text": "            || rg0.nextFloat() != rg1.nextFloat()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 31,
                            "endLine": 37,
                            "snippet": {
                              "text": "            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextFloat()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 100
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 39
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextFloat() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 34,
                  "snippet": {
                    "text": "            || rg0.nextFloat() != rg1.nextFloat()"
                  }
                },
                "contextRegion": {
                  "startLine": 31,
                  "endLine": 37,
                  "snippet": {
                    "text": "            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 62
                          },
                          "region": {
                            "startLine": 34,
                            "snippet": {
                              "text": "            || rg0.nextFloat() != rg1.nextFloat()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 31,
                            "endLine": 37,
                            "snippet": {
                              "text": "            || rg0.nextInt(360) != rg1.nextInt(360)\n            // || rg0.next(51) != rg1.next(51)\n            || rg0.nextLong() != rg1.nextLong()\n            || rg0.nextFloat() != rg1.nextFloat()\n            || rg0.nextDouble() != rg1.nextDouble()\n            || rg0.nextGaussian() != rg1.nextGaussian()\n        ) {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextFloat()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 62
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 39
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 828,
                  "endLine": 845,
                  "snippet": {
                    "text": "        private void Visit(Tool tool, string toolPointer)\r\n        {\r\n            Analyze(tool, toolPointer);\r\n\r\n            if (tool.Driver != null)\r\n            {\r\n                Visit(tool.Driver, toolPointer.AtProperty(SarifPropertyName.Driver));\r\n            }\r\n\r\n            if (tool.Extensions != null)\r\n            {\r\n                string extensionsPointer = toolPointer.AtProperty(SarifPropertyName.Extensions);\r\n                for (int i = 0; i < tool.Extensions.Count; ++i)\r\n                {\r\n                    Visit(tool.Extensions[i], extensionsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 825,
                  "endLine": 848,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Tool tool, string toolPointer)\n        {\n            Analyze(tool, toolPointer);\n\n            if (tool.Driver != null)\n            {\n                Visit(tool.Driver, toolPointer.AtProperty(SarifPropertyName.Driver));\n            }\n\n            if (tool.Extensions != null)\n            {\n                string extensionsPointer = toolPointer.AtProperty(SarifPropertyName.Extensions);\n                for (int i = 0; i < tool.Extensions.Count; ++i)\n                {\n                    Visit(tool.Extensions[i], extensionsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(ToolComponent toolComponent, string toolComponentPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 828,
                            "endLine": 845,
                            "snippet": {
                              "text": "        private void Visit(Tool tool, string toolPointer)\r\n        {\r\n            Analyze(tool, toolPointer);\r\n\r\n            if (tool.Driver != null)\r\n            {\r\n                Visit(tool.Driver, toolPointer.AtProperty(SarifPropertyName.Driver));\r\n            }\r\n\r\n            if (tool.Extensions != null)\r\n            {\r\n                string extensionsPointer = toolPointer.AtProperty(SarifPropertyName.Extensions);\r\n                for (int i = 0; i < tool.Extensions.Count; ++i)\r\n                {\r\n                    Visit(tool.Extensions[i], extensionsPointer.AtIndex(i));\r\n                }\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 825,
                            "endLine": 848,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Tool tool, string toolPointer)\n        {\n            Analyze(tool, toolPointer);\n\n            if (tool.Driver != null)\n            {\n                Visit(tool.Driver, toolPointer.AtProperty(SarifPropertyName.Driver));\n            }\n\n            if (tool.Extensions != null)\n            {\n                string extensionsPointer = toolPointer.AtProperty(SarifPropertyName.Extensions);\n                for (int i = 0; i < tool.Extensions.Count; ++i)\n                {\n                    Visit(tool.Extensions[i], extensionsPointer.AtIndex(i));\n                }\n            }\n        }\n\n        private void Visit(ToolComponent toolComponent, string toolComponentPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 828,
                  "endLine": 845
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 870,
                  "endLine": 878,
                  "snippet": {
                    "text": "        private void Visit(VersionControlDetails versionControlDetails, string versionControlDetailsPointer)\r\n        {\r\n            Analyze(versionControlDetails, versionControlDetailsPointer);\r\n\r\n            if (versionControlDetails.MappedTo != null)\r\n            {\r\n                Visit(versionControlDetails.MappedTo, versionControlDetailsPointer.AtProperty(SarifPropertyName.MappedTo));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 867,
                  "endLine": 881,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(VersionControlDetails versionControlDetails, string versionControlDetailsPointer)\n        {\n            Analyze(versionControlDetails, versionControlDetailsPointer);\n\n            if (versionControlDetails.MappedTo != null)\n            {\n                Visit(versionControlDetails.MappedTo, versionControlDetailsPointer.AtProperty(SarifPropertyName.MappedTo));\n            }\n        }\n\n        private Region GetRegionFromJPointer(string jPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 870,
                            "endLine": 878,
                            "snippet": {
                              "text": "        private void Visit(VersionControlDetails versionControlDetails, string versionControlDetailsPointer)\r\n        {\r\n            Analyze(versionControlDetails, versionControlDetailsPointer);\r\n\r\n            if (versionControlDetails.MappedTo != null)\r\n            {\r\n                Visit(versionControlDetails.MappedTo, versionControlDetailsPointer.AtProperty(SarifPropertyName.MappedTo));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 867,
                            "endLine": 881,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(VersionControlDetails versionControlDetails, string versionControlDetailsPointer)\n        {\n            Analyze(versionControlDetails, versionControlDetailsPointer);\n\n            if (versionControlDetails.MappedTo != null)\n            {\n                Visit(versionControlDetails.MappedTo, versionControlDetailsPointer.AtProperty(SarifPropertyName.MappedTo));\n            }\n        }\n\n        private Region GetRegionFromJPointer(string jPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 870,
                  "endLine": 878
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 678,
                  "endLine": 691,
                  "snippet": {
                    "text": "        private void Visit(ReportingDescriptor reportingDecriptor, string reportingDescriptorPointer)\r\n        {\r\n            Analyze(reportingDecriptor, reportingDescriptorPointer);\r\n\r\n            if (reportingDecriptor.ShortDescription != null)\r\n            {\r\n                Visit(reportingDecriptor.ShortDescription, reportingDescriptorPointer.AtProperty(SarifPropertyName.ShortDescription));\r\n            }\r\n\r\n            if (reportingDecriptor.FullDescription != null)\r\n            {\r\n                Visit(reportingDecriptor.FullDescription, reportingDescriptorPointer.AtProperty(SarifPropertyName.FullDescription));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 675,
                  "endLine": 694,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(ReportingDescriptor reportingDecriptor, string reportingDescriptorPointer)\n        {\n            Analyze(reportingDecriptor, reportingDescriptorPointer);\n\n            if (reportingDecriptor.ShortDescription != null)\n            {\n                Visit(reportingDecriptor.ShortDescription, reportingDescriptorPointer.AtProperty(SarifPropertyName.ShortDescription));\n            }\n\n            if (reportingDecriptor.FullDescription != null)\n            {\n                Visit(reportingDecriptor.FullDescription, reportingDescriptorPointer.AtProperty(SarifPropertyName.FullDescription));\n            }\n        }\n\n        private void Visit(Run run, string runPointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 678,
                            "endLine": 691,
                            "snippet": {
                              "text": "        private void Visit(ReportingDescriptor reportingDecriptor, string reportingDescriptorPointer)\r\n        {\r\n            Analyze(reportingDecriptor, reportingDescriptorPointer);\r\n\r\n            if (reportingDecriptor.ShortDescription != null)\r\n            {\r\n                Visit(reportingDecriptor.ShortDescription, reportingDescriptorPointer.AtProperty(SarifPropertyName.ShortDescription));\r\n            }\r\n\r\n            if (reportingDecriptor.FullDescription != null)\r\n            {\r\n                Visit(reportingDecriptor.FullDescription, reportingDescriptorPointer.AtProperty(SarifPropertyName.FullDescription));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 675,
                            "endLine": 694,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(ReportingDescriptor reportingDecriptor, string reportingDescriptorPointer)\n        {\n            Analyze(reportingDecriptor, reportingDescriptorPointer);\n\n            if (reportingDecriptor.ShortDescription != null)\n            {\n                Visit(reportingDecriptor.ShortDescription, reportingDescriptorPointer.AtProperty(SarifPropertyName.ShortDescription));\n            }\n\n            if (reportingDecriptor.FullDescription != null)\n            {\n                Visit(reportingDecriptor.FullDescription, reportingDescriptorPointer.AtProperty(SarifPropertyName.FullDescription));\n            }\n        }\n\n        private void Visit(Run run, string runPointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 678,
                  "endLine": 691
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 27,
          "message": {
            "text": "The call to ReadLine() at [SarifCurrentToVersionOneVisitor.cs](1) line [592](1) might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.\r\nAn attacker could cause the program to crash or otherwise become unavailable to legitimate users."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 592,
                  "snippet": {
                    "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 589,
                  "endLine": 595,
                  "snippet": {
                    "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 592,
                            "snippet": {
                              "text": "                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 589,
                            "endLine": 595,
                            "snippet": {
                              "text": "                    string sourceLine = string.Empty;\n\n                    // Read down to endLine (null return means EOF)\n                    for (int i = 1; i <= v2Region.EndLine && sourceLine != null; sourceLine = reader.ReadLine(), i++) { }\n\n                    if (sourceLine != null)\n                    {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "ReadLine()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 592
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 24,
          "level": "note",
          "message": {
            "text": "The method Visit() in [SarifValidationSkimmerBase.cs](1) is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 768,
                  "endLine": 786,
                  "snippet": {
                    "text": "        private void Visit(Stack stack, string stackPointer)\r\n        {\r\n            Analyze(stack, stackPointer);\r\n\r\n            if (stack.Frames != null)\r\n            {\r\n                string framesPointer = stackPointer.AtProperty(SarifPropertyName.Frames);\r\n\r\n                for (int i = 0; i < stack.Frames.Count; ++i)\r\n                {\r\n                    Visit(stack.Frames[i], framesPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (stack.Message != null)\r\n            {\r\n                Visit(stack.Message, stackPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 765,
                  "endLine": 789,
                  "snippet": {
                    "text": "            }\n        }\n\n        private void Visit(Stack stack, string stackPointer)\n        {\n            Analyze(stack, stackPointer);\n\n            if (stack.Frames != null)\n            {\n                string framesPointer = stackPointer.AtProperty(SarifPropertyName.Frames);\n\n                for (int i = 0; i < stack.Frames.Count; ++i)\n                {\n                    Visit(stack.Frames[i], framesPointer.AtIndex(i));\n                }\n            }\n\n            if (stack.Message != null)\n            {\n                Visit(stack.Message, stackPointer.AtProperty(SarifPropertyName.Message));\n            }\n        }\n\n        private void Visit(StackFrame frame, string framePointer)\n        {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 487
                          },
                          "region": {
                            "startLine": 768,
                            "endLine": 786,
                            "snippet": {
                              "text": "        private void Visit(Stack stack, string stackPointer)\r\n        {\r\n            Analyze(stack, stackPointer);\r\n\r\n            if (stack.Frames != null)\r\n            {\r\n                string framesPointer = stackPointer.AtProperty(SarifPropertyName.Frames);\r\n\r\n                for (int i = 0; i < stack.Frames.Count; ++i)\r\n                {\r\n                    Visit(stack.Frames[i], framesPointer.AtIndex(i));\r\n                }\r\n            }\r\n\r\n            if (stack.Message != null)\r\n            {\r\n                Visit(stack.Message, stackPointer.AtProperty(SarifPropertyName.Message));\r\n            }\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 765,
                            "endLine": 789,
                            "snippet": {
                              "text": "            }\n        }\n\n        private void Visit(Stack stack, string stackPointer)\n        {\n            Analyze(stack, stackPointer);\n\n            if (stack.Frames != null)\n            {\n                string framesPointer = stackPointer.AtProperty(SarifPropertyName.Frames);\n\n                for (int i = 0; i < stack.Frames.Count; ++i)\n                {\n                    Visit(stack.Frames[i], framesPointer.AtIndex(i));\n                }\n            }\n\n            if (stack.Message != null)\n            {\n                Visit(stack.Message, stackPointer.AtProperty(SarifPropertyName.Message));\n            }\n        }\n\n        private void Visit(StackFrame frame, string framePointer)\n        {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Visit"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 487
                },
                "region": {
                  "startLine": 768,
                  "endLine": 786
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 26,
          "message": {
            "text": "The class Program contains debug code, which can create unintended entry points in a deployed web application.\r\nDebug code can create unintended entry points in a deployed web application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1103
                },
                "region": {
                  "startLine": 13,
                  "endLine": 36,
                  "snippet": {
                    "text": "        public static int Main(string[] args)\r\n        {\r\n            return Parser.Default.ParseArguments<\r\n                ValidateOptions,\r\n                ConvertOptions,\r\n                RewriteOptions,\r\n                TransformOptions,\r\n                MergeOptions,\r\n                RebaseUriOptions,\r\n                AbsoluteUriOptions,\r\n                PageOptions,\r\n                ResultMatchingOptions>(args)\r\n              .MapResult(\r\n                (ValidateOptions validateOptions) => new ValidateCommand().Run(validateOptions),\r\n                (ConvertOptions convertOptions) => ConvertCommand.Run(convertOptions),\r\n                (RewriteOptions rewriteOptions) => new RewriteCommand().Run(rewriteOptions),\r\n                (TransformOptions transformOptions) => new TransformCommand().Run(transformOptions),\r\n                (MergeOptions mergeOptions) => new MergeCommand().Run(mergeOptions),\r\n                (RebaseUriOptions rebaseOptions) => new RebaseUriCommand().Run(rebaseOptions),\r\n                (AbsoluteUriOptions absoluteUriOptions) => new AbsoluteUriCommand().Run(absoluteUriOptions),\r\n                (PageOptions pageOptions) => new PageCommand().Run(pageOptions),\r\n                (ResultMatchingOptions baselineOptions) => new ResultMatchingCommand().Run(baselineOptions),\r\n                errs => 1);\r\n        }"
                  }
                },
                "contextRegion": {
                  "startLine": 10,
                  "endLine": 38,
                  "snippet": {
                    "text": "        /// <summary>The entry point for the SARIF multi utility.</summary>\n        /// <param name=\"args\">Arguments passed in from the tool's command line.</param>\n        /// <returns>0 on success; nonzero on failure.</returns>\n        public static int Main(string[] args)\n        {\n            return Parser.Default.ParseArguments<\n                ValidateOptions,\n                ConvertOptions,\n                RewriteOptions,\n                TransformOptions,\n                MergeOptions,\n                RebaseUriOptions,\n                AbsoluteUriOptions,\n                PageOptions,\n                ResultMatchingOptions>(args)\n              .MapResult(\n                (ValidateOptions validateOptions) => new ValidateCommand().Run(validateOptions),\n                (ConvertOptions convertOptions) => ConvertCommand.Run(convertOptions),\n                (RewriteOptions rewriteOptions) => new RewriteCommand().Run(rewriteOptions),\n                (TransformOptions transformOptions) => new TransformCommand().Run(transformOptions),\n                (MergeOptions mergeOptions) => new MergeCommand().Run(mergeOptions),\n                (RebaseUriOptions rebaseOptions) => new RebaseUriCommand().Run(rebaseOptions),\n                (AbsoluteUriOptions absoluteUriOptions) => new AbsoluteUriCommand().Run(absoluteUriOptions),\n                (PageOptions pageOptions) => new PageCommand().Run(pageOptions),\n                (ResultMatchingOptions baselineOptions) => new ResultMatchingCommand().Run(baselineOptions),\n                errs => 1);\n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1103
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 36,
                            "snippet": {
                              "text": "        public static int Main(string[] args)\r\n        {\r\n            return Parser.Default.ParseArguments<\r\n                ValidateOptions,\r\n                ConvertOptions,\r\n                RewriteOptions,\r\n                TransformOptions,\r\n                MergeOptions,\r\n                RebaseUriOptions,\r\n                AbsoluteUriOptions,\r\n                PageOptions,\r\n                ResultMatchingOptions>(args)\r\n              .MapResult(\r\n                (ValidateOptions validateOptions) => new ValidateCommand().Run(validateOptions),\r\n                (ConvertOptions convertOptions) => ConvertCommand.Run(convertOptions),\r\n                (RewriteOptions rewriteOptions) => new RewriteCommand().Run(rewriteOptions),\r\n                (TransformOptions transformOptions) => new TransformCommand().Run(transformOptions),\r\n                (MergeOptions mergeOptions) => new MergeCommand().Run(mergeOptions),\r\n                (RebaseUriOptions rebaseOptions) => new RebaseUriCommand().Run(rebaseOptions),\r\n                (AbsoluteUriOptions absoluteUriOptions) => new AbsoluteUriCommand().Run(absoluteUriOptions),\r\n                (PageOptions pageOptions) => new PageCommand().Run(pageOptions),\r\n                (ResultMatchingOptions baselineOptions) => new ResultMatchingCommand().Run(baselineOptions),\r\n                errs => 1);\r\n        }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 10,
                            "endLine": 38,
                            "snippet": {
                              "text": "        /// <summary>The entry point for the SARIF multi utility.</summary>\n        /// <param name=\"args\">Arguments passed in from the tool's command line.</param>\n        /// <returns>0 on success; nonzero on failure.</returns>\n        public static int Main(string[] args)\n        {\n            return Parser.Default.ParseArguments<\n                ValidateOptions,\n                ConvertOptions,\n                RewriteOptions,\n                TransformOptions,\n                MergeOptions,\n                RebaseUriOptions,\n                AbsoluteUriOptions,\n                PageOptions,\n                ResultMatchingOptions>(args)\n              .MapResult(\n                (ValidateOptions validateOptions) => new ValidateCommand().Run(validateOptions),\n                (ConvertOptions convertOptions) => ConvertCommand.Run(convertOptions),\n                (RewriteOptions rewriteOptions) => new RewriteCommand().Run(rewriteOptions),\n                (TransformOptions transformOptions) => new TransformCommand().Run(transformOptions),\n                (MergeOptions mergeOptions) => new MergeCommand().Run(mergeOptions),\n                (RebaseUriOptions rebaseOptions) => new RebaseUriCommand().Run(rebaseOptions),\n                (AbsoluteUriOptions absoluteUriOptions) => new AbsoluteUriCommand().Run(absoluteUriOptions),\n                (PageOptions pageOptions) => new PageCommand().Run(pageOptions),\n                (ResultMatchingOptions baselineOptions) => new ResultMatchingCommand().Run(baselineOptions),\n                errs => 1);\n        }\n    }\n}\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Function: Main"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1103
                },
                "region": {
                  "startLine": 13,
                  "endLine": 36
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 366
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "endLine": 30,
                  "snippet": {
                    "text": "        public void AnalysisStopped(RuntimeConditions runtimeConditions)\n        {\n            Console.WriteLine();\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 366
                          },
                          "region": {
                            "startLine": 27,
                            "snippet": {
                              "text": "            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());"
                            }
                          },
                          "contextRegion": {
                            "startLine": 24,
                            "endLine": 30,
                            "snippet": {
                              "text": "        public void AnalysisStopped(RuntimeConditions runtimeConditions)\n        {\n            Console.WriteLine();\n            Console.WriteLine(\"# valid targets: \" + _targetsCount.ToString());\n            Console.WriteLine(\"# invalid targets: \" + _invalidTargetsCount.ToString());\n            Console.WriteLine(\"Time elapsed: \" + _stopwatch.Elapsed.ToString());\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 366
                },
                "region": {
                  "startLine": 27
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 0,
          "message": {
            "text": "Storing passwords or password details in plaintext anywhere in the system or system code may compromise system security in a way that cannot be easily remedied."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 893,
                  "snippet": {
                    "text": "            // <properties name=\"route-signature\">OWASP.WebGoat.NET.ForgotPassword</properties>"
                  }
                },
                "contextRegion": {
                  "startLine": 890,
                  "endLine": 896,
                  "snippet": {
                    "text": "\n            // <properties name=\"platform\">ASP.NET Web Forms</properties>\n            // <properties name=\"webforms-page\">OWASP.WebGoat.NET.ForgotPassword</properties>\n            // <properties name=\"route-signature\">OWASP.WebGoat.NET.ForgotPassword</properties>\n\n            string untrustedData = BuildSourcesString(context.Sources);\n            string page = context.RequestTarget;\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 714
                          },
                          "region": {
                            "startLine": 893,
                            "snippet": {
                              "text": "            // <properties name=\"route-signature\">OWASP.WebGoat.NET.ForgotPassword</properties>"
                            }
                          },
                          "contextRegion": {
                            "startLine": 890,
                            "endLine": 896,
                            "snippet": {
                              "text": "\n            // <properties name=\"platform\">ASP.NET Web Forms</properties>\n            // <properties name=\"webforms-page\">OWASP.WebGoat.NET.ForgotPassword</properties>\n            // <properties name=\"route-signature\">OWASP.WebGoat.NET.ForgotPassword</properties>\n\n            string untrustedData = BuildSourcesString(context.Sources);\n            string page = context.RequestTarget;\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Comment"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 714
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 13
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by Next() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 387
                },
                "region": {
                  "startLine": 166,
                  "snippet": {
                    "text": "                int selectedElement = randomNumberGenerator.Next(currentlySelecting);"
                  }
                },
                "contextRegion": {
                  "startLine": 163,
                  "endLine": 169,
                  "snippet": {
                    "text": "                // Next returns the next integer [0, currentlySelecting) which is why we need\n                // to get the selected element before decrementing currentlySelecting\n                // (To make it possible that the currentlySelecting is swapped with itself)\n                int selectedElement = randomNumberGenerator.Next(currentlySelecting);\n                --currentlySelecting;\n                if (currentlySelecting != selectedElement)\n                {\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 387
                          },
                          "region": {
                            "startLine": 166,
                            "snippet": {
                              "text": "                int selectedElement = randomNumberGenerator.Next(currentlySelecting);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 163,
                            "endLine": 169,
                            "snippet": {
                              "text": "                // Next returns the next integer [0, currentlySelecting) which is why we need\n                // to get the selected element before decrementing currentlySelecting\n                // (To make it possible that the currentlySelecting is swapped with itself)\n                int selectedElement = randomNumberGenerator.Next(currentlySelecting);\n                --currentlySelecting;\n                if (currentlySelecting != selectedElement)\n                {\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Next()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 387
                },
                "region": {
                  "startLine": 166
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 78,
                  "snippet": {
                    "text": "                Console.WriteLine(message);"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "endLine": 81,
                  "snippet": {
                    "text": "        {\n            if (Verbose)\n            {\n                Console.WriteLine(message);\n            }\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 78,
                            "snippet": {
                              "text": "                Console.WriteLine(message);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 75,
                            "endLine": 81,
                            "snippet": {
                              "text": "        {\n            if (Verbose)\n            {\n                Console.WriteLine(message);\n            }\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 78
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 18,
          "level": "note",
          "message": {
            "text": "Using WriteLine() rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "            Console.WriteLine(SdkResources.MSG_Analyzing);"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "endLine": 26,
                  "snippet": {
                    "text": "\n        public void AnalysisStarted()\n        {\n            Console.WriteLine(SdkResources.MSG_Analyzing);\n        }\n\n        public void AnalysisStopped(RuntimeConditions runtimeConditions)\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 59
                          },
                          "region": {
                            "startLine": 23,
                            "snippet": {
                              "text": "            Console.WriteLine(SdkResources.MSG_Analyzing);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 20,
                            "endLine": 26,
                            "snippet": {
                              "text": "\n        public void AnalysisStarted()\n        {\n            Console.WriteLine(SdkResources.MSG_Analyzing);\n        }\n\n        public void AnalysisStopped(RuntimeConditions runtimeConditions)\n"
                            }
                          }
                        },
                        "message": {
                          "text": "FunctionCall: WriteLine"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 59
                },
                "region": {
                  "startLine": 23
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ComputeSha256Hash() in [HashUtilities.cs](1) ignores an exception on line [78](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 78,
                  "snippet": {
                    "text": "            catch (IOException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 75,
                  "endLine": 81,
                  "snippet": {
                    "text": "                    }\n                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return sha256Hash;\n        }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 78,
                            "snippet": {
                              "text": "            catch (IOException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 75,
                            "endLine": 81,
                            "snippet": {
                              "text": "                    }\n                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return sha256Hash;\n        }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 78
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "The method ComputeSha256Hash() in [HashUtilities.cs](1) ignores an exception on line [79](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 79,
                  "snippet": {
                    "text": "            catch (UnauthorizedAccessException) { }"
                  }
                },
                "contextRegion": {
                  "startLine": 76,
                  "endLine": 82,
                  "snippet": {
                    "text": "                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return sha256Hash;\n        }\n\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 606
                          },
                          "region": {
                            "startLine": 79,
                            "snippet": {
                              "text": "            catch (UnauthorizedAccessException) { }"
                            }
                          },
                          "contextRegion": {
                            "startLine": 76,
                            "endLine": 82,
                            "snippet": {
                              "text": "                }\n            }\n            catch (IOException) { }\n            catch (UnauthorizedAccessException) { }\n            return sha256Hash;\n        }\n\n"
                            }
                          }
                        },
                        "message": {
                          "text": "CatchBlock"
                        }
                      },
                      "kinds": [
                        "unknown"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 606
                },
                "region": {
                  "startLine": 79
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 34,
          "message": {
            "text": "The method GetRegionByteLength() in [SarifCurrentToVersionOneVisitor.cs](1) ignores the value returned by Read() on line [571](1), which could cause the program to overlook unexpected states and conditions.\r\nIgnoring a method's return value can cause the program to overlook unexpected states and conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 571,
                  "snippet": {
                    "text": "                        reader.Read(buffer, 0, buffer.Length);"
                  }
                },
                "contextRegion": {
                  "startLine": 568,
                  "endLine": 574,
                  "snippet": {
                    "text": "\n                        // Read the next charLength characters  \n                        buffer = new char[v2Region.CharLength];\n                        reader.Read(buffer, 0, buffer.Length);\n\n                        byteLength = encoding.GetByteCount(buffer);\n                    }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 405
                          },
                          "region": {
                            "startLine": 571,
                            "snippet": {
                              "text": "                        reader.Read(buffer, 0, buffer.Length);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 568,
                            "endLine": 574,
                            "snippet": {
                              "text": "\n                        // Read the next charLength characters  \n                        buffer = new char[v2Region.CharLength];\n                        reader.Read(buffer, 0, buffer.Length);\n\n                        byteLength = encoding.GetByteCount(buffer);\n                    }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "Read()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 405
                },
                "region": {
                  "startLine": 571
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        }
      ],
      "tool": {
        "driver": {
          "name": "Micro Focus Fortify Static Code Analyzer",
          "rules": [
            {
              "id": "370A25A9-2F65-4B79-B267-FC0A87D79DAC",
              "guid": "370A25A9-2F65-4B79-B267-FC0A87D79DAC",
              "shortDescription": {
                "text": "Storing passwords or password details in plaintext anywhere in the system or system code may compromise system security in a way that cannot be easily remedied."
              },
              "fullDescription": {
                "text": "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. Once the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system will be forced to choose between security and availability.\r\n\r\nIn this case the password details appear in the comment in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\n**Example:** The following comment specifies the default password to connect to a database:\r\n\r\n`\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n`\r\n\r\nThis code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is likely no way to change the database user \"scott\" with a password of \"tiger\" unless the program is patched. An employee with access to this information could use it to break into the system."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "615",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "1.0",
                "Impact": "2.0",
                "Probability": "3.0",
                "Kingdom": "Security Features",
                "Type": "Password Management",
                "Subtype": "Password in Comment"
              }
            },
            {
              "id": "FEAD26B5-C753-4A64-8DD1-C542E684E7E1",
              "guid": "FEAD26B5-C753-4A64-8DD1-C542E684E7E1",
              "shortDescription": {
                "text": "The function <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> is passed a constant value for the seed. Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument.\r\nFunctions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument."
              },
              "fullDescription": {
                "text": "Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a constant argument. If a pseudorandom number generator (such as `Random`) is seeded with a specific value (using a function like `Random.setSeed()`), the values returned by `Random.nextInt()` and similar methods which return or assign values are predictable for an attacker that can collect a number of PRNG outputs.\r\n\r\n**Example 1:** Below, the values produced by the `Random` object `s` are predictable from the `Random` object `r`.\r\n\r\n`\n        Random r = new Random();\n        r.setSeed(12345);\n        int i = r.nextInt();\n        byte[] b = new byte[4];\n        r.nextBytes(b);\r\n\r\n        Random s = new Random();\n        s.setSeed(12345);\n        int j = s.nextInt();\n        byte[] c = new byte[4];\n        s.nextBytes(c);\n`\r\n\r\nIn this example, pseudorandom number generators: `r` and `s` were identically seeded, so `i == j`, and corresponding values of arrays `b[]` and `c[]` are equal.\r\n\r\nThis finding is from research found in \"An Empirical Study of Cryptographic Misuse in Android Applications\". http://www.cs.ucsb.edu/~chris/research/doc/ccs13_cryptolint.pdf"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "336",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "4.0",
                "Probability": "1.0",
                "Kingdom": "Security Features",
                "Type": "Insecure Randomness",
                "Subtype": "Hardcoded Seed"
              }
            },
            {
              "id": "9EEA49C9-D42C-434F-B9A0-CCE22A385375",
              "guid": "9EEA49C9-D42C-434F-B9A0-CCE22A385375",
              "shortDescription": {
                "text": "Attackers are able to control the file system path argument to <Replace key=\"PrimaryCall.name\"/> at <Replace key=\"PrimaryLocation.file\"/> line <Replace key=\"PrimaryLocation.line\"/>, which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
              },
              "fullDescription": {
                "text": "Path manipulation errors occur when the following two conditions are met:\r\n\r\n1. An attacker is able to specify a path used in an operation on the file system.\r\n\r\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\r\n\r\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\r\n\r\nIn this case, the attacker may specify the value that enters the program at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in <Replace key=\"SourceLocation.file\"/> at line <Replace key=\"SourceLocation.line\"/>, and this value is used to access a file system resource at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in <Replace key=\"SinkLocation.file\"/> at line <Replace key=\"SinkLocation.line\"/>.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n**Example 1:** The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker may provide a file name like \"`..\\\\..\\\\Windows\\\\System32\\\\krnl386.exe`\", which will cause the application to delete an important Windows system file.\r\n\r\n`\nString rName = Request.Item(\"reportName\");\n...\nFile.delete(\"C:\\\\users\\\\reports\\\\\" + rName);\n`\r\n\r\n**Example 2:** The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension \".txt\".\r\n\r\n`\nsr = new StreamReader(resmngr.GetString(\"sub\")+\".txt\");\nwhile ((line = sr.ReadLine()) != null) {\nConsole.WriteLine(line);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "22",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "73",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "4.0",
                "Kingdom": "Input Validation and Representation",
                "Type": "Path Manipulation"
              }
            },
            {
              "id": "4D9302DC-D851-4DD2-A1AB-57A81904BE32",
              "guid": "4D9302DC-D851-4DD2-A1AB-57A81904BE32",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> calls <Replace key=\"PrimaryCall.name\"/>  on line <Replace key=\"PrimaryLocation.line\"/>. Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
              },
              "fullDescription": {
                "text": "Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "383",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Time and State",
                "Type": "J2EE Bad Practices",
                "Subtype": "Threads"
              }
            },
            {
              "id": "8A54CAEA-022D-4035-A952-30178EE4D0E5",
              "guid": "8A54CAEA-022D-4035-A952-30178EE4D0E5",
              "shortDescription": {
                "text": "The expression `obj.Equals(null)` will always be false.\r\nThe expression `obj.Equals(null)` should always be false."
              },
              "fullDescription": {
                "text": "The program uses the `Equals()` method to compare an object with `null`. The contract of the `Equals()` method requires this comparison to always return false."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "398",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "754",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "1.0",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Code Correctness",
                "Subtype": "null Argument to Equals()"
              }
            },
            {
              "id": "774D0B25-D734-41B8-89C9-4F682F49F355",
              "guid": "774D0B25-D734-41B8-89C9-4F682F49F355",
              "shortDescription": {
                "text": "The function <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> reveals system data or debugging information by calling <Replace key=\"PrimaryCall.name\"/> on line <Replace key=\"PrimaryLocation.line\"/>. The information revealed by <Replace key=\"PrimaryCall.name\"/> could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging.\r\n\r\nIn this case the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in <Replace key=\"SourceLocation.file\"/> at line <Replace key=\"SourceLocation.line\"/> leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in <Replace key=\"SinkLocation.file\"/> at line <Replace key=\"SinkLocation.line\"/>.\r\n\r\n**Example:** The following code constructs a database connection string, uses it to create a new connection to the database, and prints it to the console.\r\n\r\n`\nstring cs=\"database=northwind;server=mySQLServer...\";\nSqlConnection conn=new SqlConnection(cs);\n...\nConsole.Writeline(cs);\n`\r\n\r\nDepending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "1.0",
                "Probability": "1.0",
                "Kingdom": "Encapsulation",
                "Type": "System Information Leak",
                "Subtype": "Internal"
              }
            },
            {
              "id": "F7135003-B1E9-4B90-A0F0-6D1B233C021E",
              "guid": "F7135003-B1E9-4B90-A0F0-6D1B233C021E",
              "shortDescription": {
                "text": "Setting a `maxOccurs` value to unbounded can lead to resources exhaustion and ultimately a denial of service."
              },
              "fullDescription": {
                "text": "Processing XML documents can be computationally expensive. Attackers may take advantage of schemas that allow unbounded elements by supplying an application with a very large number elements causing the application to exhaust system resources.\r\n\r\nThe following is an example of a schema that allows unbounded `bar` elements.\n`\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; &gt;\n  &lt;xs:element name=&quot;foo&quot; &gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n\t&lt;xs:element name=&quot;bar&quot; maxOccurs=&quot;unbounded&quot; /&gt;\n      &lt;/xs:sequence&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "400",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "770",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "3.0",
                "Probability": "1.0",
                "Kingdom": "Environment",
                "Type": "Weak XML Schema",
                "Subtype": "Unbounded Occurrences"
              }
            },
            {
              "id": "FE4EADF2-7055-4C36-863E-5A01C4A0E1A4",
              "guid": "FE4EADF2-7055-4C36-863E-5A01C4A0E1A4",
              "shortDescription": {
                "text": "The function <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> might reveal system data or debugging information by calling <Replace key=\"PrimaryCall.name\"/> on line <Replace key=\"PrimaryLocation.line\"/>. The information revealed by <Replace key=\"PrimaryCall.name\"/> could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.\r\n\r\nIn this case <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> is called in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\n**Example 1:** The following code prints an exception to the standard error stream:\r\n\r\n`\ntry {\n    ...\n} catch (Exception e) {\n    e.printStackTrace();\n}\n`\r\n\r\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed.\r\n\r\nIn some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\r\n\r\nHere is another scenario, specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication.\r\n\r\n**Example 2:** The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range.\n`\n...\npublic static final String TAG = \"NfcActivity\";\nprivate static final String DATA_SPLITTER = \"__:DATA:__\";\nprivate static final String MIME_TYPE = \"application/my.applications.mimetype\";\n...\npublic NdefMessage createNdefMessage(NfcEvent event) {\n    TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE);\n    String VERSION = tm.getDeviceSoftwareVersion();\n    String text = TAG + DATA_SPLITTER + VERSION;\n    NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA,\n            MIME_TYPE.getBytes(), new byte[0], text.getBytes());\n    NdefRecord[] records = { record };\n    NdefMessage msg = new NdefMessage(records);\n    return msg;\n}\n...\n`\r\n\r\nNFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper. In the example above, Fortify Static Code Analyzer reports a System Information Leak vulnerability on the return statement."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Encapsulation",
                "Type": "System Information Leak"
              }
            },
            {
              "id": "5E7A17EB-A289-4850-BDB2-5D04E8250778",
              "guid": "5E7A17EB-A289-4850-BDB2-5D04E8250778",
              "shortDescription": {
                "text": "The function <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> sometimes fails to release a system resource allocated by <Replace key=\"FirstTransitionFunction\"/> on line <Replace key=\"FirstTraceLocation.line\"/>.\r\nThe program can potentially fail to release a system resource."
              },
              "fullDescription": {
                "text": "The program can potentially fail to release a system resource.\r\n\r\nResource leaks have at least two common causes:\r\n\r\n- Error conditions and other exceptional circumstances.\r\n\r\n- Confusion over which part of the program is responsible for releasing the resource.\r\n\r\nIn this case, there are program paths on which the resource allocated in <Replace key=\"FirstTraceLocation.file\"/> at line <Replace key=\"FirstTraceLocation.line\"/> is not released.\r\n\r\nMost unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.\r\n\r\n**Example:** The following method never closes the file handle it opens. The `Finalize()` method for `StreamReader` eventually calls `Close()`, but there is no guarantee as to how long it will take before the `Finalize()` method is invoked. In fact, there is no guarantee that `Finalize()` will ever be invoked. In a busy environment, this can result in the VM using up all of its available file handles.\r\n\r\n`\nprivate void processFile(string fName) {\n        StreamWriter sw = new StreamWriter(fName);\n        string line;\n        while ((line = sr.ReadLine()) != null)\n                processLine(line);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "404",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.5",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Unreleased Resource",
                "Subtype": "Streams"
              }
            },
            {
              "id": "4D838F62-1E87-4A83-A3C7-C621CA045A4C",
              "guid": "4D838F62-1E87-4A83-A3C7-C621CA045A4C",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> ignores an exception on line <Replace key=\"PrimaryLocation.line\"/>, which could cause the program to overlook unexpected states and conditions.\r\nIgnoring an exception can cause the program to overlook unexpected states and conditions."
              },
              "fullDescription": {
                "text": "Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.\r\n\r\nTwo dubious assumptions that are easy to spot in code are \"this method call can never fail\" and \"it doesn't matter if this call fails\". When programmers ignore exceptions, they implicitly state that they are operating under one of these assumptions.\r\n\r\n**Example 1:** The following code excerpt ignores a rarely-thrown exception from `DoExchange()`.\r\n\r\n`\ntry {\n  DoExchange();\n}\ncatch (RareException e) {\n  // this can never happen\n}\n`\r\n\r\nIf a `RareException` were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "391",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "1.0",
                "Probability": "1.0",
                "Kingdom": "Errors",
                "Type": "Poor Error Handling",
                "Subtype": "Empty Catch Block"
              }
            },
            {
              "id": "638B1E12-45C7-47EF-8345-37D99BD995D2",
              "guid": "638B1E12-45C7-47EF-8345-37D99BD995D2",
              "shortDescription": {
                "text": "The catch block at <Replace key=\"PrimaryLocation.file\"/> line <Replace key=\"PrimaryLocation.line\"/> handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
              },
              "fullDescription": {
                "text": "Multiple catch blocks can get ugly and repetitive, but \"condensing\" catch blocks by catching a high-level class like `Exception` can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of .NET's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.\r\n\r\n**Example:** The following code excerpt handles three types of exceptions in an identical fashion.\r\n\r\n`\n  try {\n    DoExchange();\n  }\n  catch (IOException e) {\n    logger.Error(\"DoExchange failed\", e);\n  }\n  catch (FormatException e) {\n    logger.Error(\"DoExchange failed\", e);\n  }\n  catch (TimeoutException e) {\n    logger.Error(\"DoExchange failed\", e);\n  }\n`\r\n\r\nAt first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:\r\n\r\n`\n  try {\n    DoExchange();\n  }\n  catch (Exception e) {\n    logger.Error(\"DoExchange failed\", e);\n  }\n`\r\n\r\nHowever, if `DoExchange()` is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions of types `ApplicationException` and `NullReferenceException`, which is not the programmer's intent."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "396",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Errors",
                "Type": "Poor Error Handling",
                "Subtype": "Overly Broad Catch"
              }
            },
            {
              "id": "35069212-5A97-4C87-81DD-A3A0F72DE4BC",
              "guid": "35069212-5A97-4C87-81DD-A3A0F72DE4BC",
              "shortDescription": {
                "text": "An attacker is able to control one of the arguments to <Replace key=\"PrimaryCall.name\"/> at <Replace key=\"PrimaryLocation.file\"/> line <Replace key=\"PrimaryLocation.line\"/>, which can lead to a disruption of service or unexpected application behavior.\r\nAllowing external control of system settings can disrupt service or cause an application to behave in unexpected ways."
              },
              "fullDescription": {
                "text": "Setting manipulation vulnerabilities occur when an attacker may control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.\r\n\r\nIn this case, potentially malicious data enters the program at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in <Replace key=\"SourceLocation.file\"/> at line <Replace key=\"SourceLocation.line\"/> and is passed to <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in <Replace key=\"SinkLocation.file\"/> at line <Replace key=\"SinkLocation.line\"/>.\r\n\r\nBecause setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "15",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Input Validation and Representation",
                "Type": "Setting Manipulation"
              }
            },
            {
              "id": "72610F51-FC46-4F0D-800D-B4CDEEEE9AFD",
              "guid": "72610F51-FC46-4F0D-800D-B4CDEEEE9AFD",
              "shortDescription": {
                "text": "The class <Replace key=\"EnclosingClass.name\"/> implements the `ISerializable` interface but does not declare the `[Serializable]` attribute, so it will not be serialized.\r\nClasses that implement the `ISerializable` interface but do not declare the `[Serializable]` attribute will not be serialized."
              },
              "fullDescription": {
                "text": "The .NET runtime will permit the serialization of any object that declares the `[Serializable]` attribute. If the class can be serialized using the default serialization methods defined by the .NET framework, this is both necessary and sufficient for the object to be correctly serialized. If the class requires custom serialization methods, it must also implement the `ISerializable` interface. However, the class must still declare the `[Serializable]` attribute.\r\n\r\n**Example 1:** The `CustomStorage` class implements the `ISerializable` interface. However, because it fails to declare the `[Serializable]` attribute, it will not be serialized.\r\n\r\n`\npublic class CustomStorage: ISerializable {\n\t...\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "730",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Code Correctness",
                "Subtype": "Missing [Serializable] Attribute"
              }
            },
            {
              "id": "8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA",
              "guid": "8ECE1D9E-AE40-4AD1-9ECB-6D024DBF8FCA",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> calls <Replace key=\"PrimaryCall.name\"/>  on line <Replace key=\"PrimaryLocation.line\"/>. Thread management in a web application is forbidden in some circumstances and is always highly error prone.\r\nThread management in a web application is forbidden in some circumstances and is always highly error prone."
              },
              "fullDescription": {
                "text": "Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "383",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Time and State",
                "Type": "J2EE Bad Practices",
                "Subtype": "Threads"
              }
            },
            {
              "id": "2E4B2E3C-ECDA-4F1F-9D6F-BEEB958B8015",
              "guid": "2E4B2E3C-ECDA-4F1F-9D6F-BEEB958B8015",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> can dereference a null pointer because it does not check the return value of <Replace key=\"PrimaryCall.name\"/>, which might return null.\r\nThe program might dereference a null pointer because it does not check the return value of a function that might return null."
              },
              "fullDescription": {
                "text": "Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.\r\n\r\nTwo dubious assumptions that are easy to spot in code are \"this function call can never fail\" and \"it doesn't matter if this function call fails\". When a programmer ignores the return value from a function, they implicitly state that they are operating under one of these assumptions.\r\n\r\nIn this case, an earlier return value is used without being checked in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\n**Example 1:**  The following code does not check to see if the string returned by the `Item` property is null before calling the member function `Equals()`, potentially causing a null dereference.\r\n\r\n`\nstring itemName = request.Item(ITEM_NAME);\n\tif (itemName.Equals(IMPORTANT_ITEM)) {\n\t\t...\n\t}\n\t...\n`\r\n\r\nThe traditional defense of this coding error is:\r\n\r\n\"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value.\"\r\n\r\nBut attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "253",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "690",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "API Abuse",
                "Type": "Missing Check against Null"
              }
            },
            {
              "id": "18A2417D-AD6A-418B-B2C6-F4B14554B305",
              "guid": "18A2417D-AD6A-418B-B2C6-F4B14554B305",
              "shortDescription": {
                "text": "The random number generator implemented by <Replace key=\"PrimaryCall.name\"/> cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
              },
              "fullDescription": {
                "text": "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\r\n\r\nIn this case the function that generates weak random numbers is <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\r\n\r\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\r\n\r\n**Example:** The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\r\n\r\n`\nstring GenerateReceiptURL(string baseUrl) {\n    Random Gen = new Random();\n    return (baseUrl + Gen.Next().toString() + &quot;.html&quot;);\n}\n`\r\n\r\nThis code uses the `Random.Next()` function to generate \"unique\" identifiers for the receipt pages it generates. Since `Random.Next()` is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "338",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "4.0",
                "Probability": "1.0",
                "Kingdom": "Security Features",
                "Type": "Insecure Randomness"
              }
            },
            {
              "id": "84B4BA4A-8DCC-45B3-80D3-016310E45827",
              "guid": "84B4BA4A-8DCC-45B3-80D3-016310E45827",
              "shortDescription": {
                "text": "Attackers are able to control the file system path argument to <Replace key=\"PrimaryCall.name\"/> at <Replace key=\"PrimaryLocation.file\"/> line <Replace key=\"PrimaryLocation.line\"/>, which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
              },
              "fullDescription": {
                "text": "Path manipulation errors occur when the following two conditions are met:\r\n\r\n1. An attacker is able to specify a path used in an operation on the file system.\r\n\r\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\r\n\r\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\r\n\r\nIn this case, the attacker may specify the value that enters the program at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in <Replace key=\"SourceLocation.file\"/> at line <Replace key=\"SourceLocation.line\"/>, and this value is used to access a file system resource at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in <Replace key=\"SinkLocation.file\"/> at line <Replace key=\"SinkLocation.line\"/>.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n**Example 1:** The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker may provide a file name like \"`..\\\\..\\\\Windows\\\\System32\\\\krnl386.exe`\", which will cause the application to delete an important Windows system file.\r\n\r\n`\nString rName = Request.Item(\"reportName\");\n...\nFile.delete(\"C:\\\\users\\\\reports\\\\\" + rName);\n`\r\n\r\n**Example 2:** The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension \".txt\".\r\n\r\n`\nsr = new StreamReader(resmngr.GetString(\"sub\")+\".txt\");\nwhile ((line = sr.ReadLine()) != null) {\nConsole.WriteLine(line);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "22",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "73",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Impact": "2",
                "Accuracy": "4.0",
                "Probability": "4.0",
                "Kingdom": "Input Validation and Representation",
                "Type": "Path Manipulation"
              }
            },
            {
              "id": "F7A2423A-1927-40A3-920E-17ADB5430412",
              "guid": "F7A2423A-1927-40A3-920E-17ADB5430412",
              "shortDescription": {
                "text": "The function <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> reveals system data or debugging information by calling <Replace key=\"PrimaryCall.name\"/> on line <Replace key=\"PrimaryLocation.line\"/>. The information revealed by <Replace key=\"PrimaryCall.name\"/> could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.\r\n\r\nIn this case the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in <Replace key=\"SourceLocation.file\"/> at line <Replace key=\"SourceLocation.line\"/> leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in <Replace key=\"SinkLocation.file\"/> at line <Replace key=\"SinkLocation.line\"/>.\r\n\r\n**Example:** The following code constructs a database connection string, uses it to create a new connection to the database, and prints it to the console.\r\n\r\n`\nstring cs=\"database=northwind;server=mySQLServer...\";\nSqlConnection conn=new SqlConnection(cs);\n...\nConsole.Writeline(cs);\n`\r\n\r\nDepending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed.\r\n\r\nIn some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Encapsulation",
                "Type": "System Information Leak"
              }
            },
            {
              "id": "97D9B391-DAFC-4E87-87DD-5A79D54B1B8B",
              "guid": "97D9B391-DAFC-4E87-87DD-5A79D54B1B8B",
              "shortDescription": {
                "text": "Using <Replace key=\"PrimaryCall.name\"/> rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
              },
              "fullDescription": {
                "text": "**Example 1:** The first .NET program that a developer learns to write often looks like this:\r\n\r\n`\npublic class MyClass {\n  public static void Main(string[] args) {\n    Console.WriteLine(\"hello world\");\n  }\n}\n`\r\n\r\nWhile most programmers go on to learn many nuances and subtleties about .NET, a surprising number hang on to this first lesson and never give up on writing messages to standard output using `Console.WriteLine()`.\r\n\r\nThe problem is that writing directly to standard output or standard error is often used as an unstructured form of logging. Structured logging facilities provide features like logging levels, uniform formatting, a logger identifier, timestamps, and, perhaps most critically, the ability to direct the log messages to the right place. When the use of system output streams is jumbled together with the code that uses loggers properly, the result is often a well-kept log that is missing critical information.\r\n\r\nDevelopers widely accept the need for structured logging, but many continue to use system output streams in their \"pre-production\" development. If the code you are reviewing is past the initial phases of development, use of `Console.WriteLine` may indicate an oversight in the move to a structured logging system."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "398",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "1.0",
                "Probability": "1.0",
                "Kingdom": "Encapsulation",
                "Type": "Poor Logging Practice",
                "Subtype": "Use of a System Output Stream"
              }
            },
            {
              "id": "709CA699-BD82-4786-B8F5-6BA421A1AB98",
              "guid": "709CA699-BD82-4786-B8F5-6BA421A1AB98",
              "shortDescription": {
                "text": "The field <Replace key=\"$f.name$\"/> is never used.\r\nThis field is never used directly or indirectly by a public method."
              },
              "fullDescription": {
                "text": "This field is never accessed, except perhaps by dead code. Dead code is defined as code that is never directly or indirectly executed by a public method. It is likely that the field is simply vestigial, but it is also possible that the unused field points out a bug.\r\n\r\n**Example 1:** The field named `glue` is not used in the following class. The author of the class has accidentally put quotes around the field name, transforming it into a string constant.\r\n\r\n`\npublic class Dead {\r\n\r\n  string glue;\r\n\r\n  public string GetGlue() {\n    return \"glue\";\n  }\r\n\r\n}\n`\r\n\r\n**Example 2:** The field named `glue` is used in the following class, but only from a method that is never called by a public method.\r\n\r\n`\npublic class Dead {\r\n\r\n  string glue;\r\n\r\n  private string GetGlue() {\n    return glue;\n  }\r\n\r\n}\n`"
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "561",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "1.0",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Dead Code",
                "Subtype": "Unused Field"
              }
            },
            {
              "id": "D75402D3-00A7-4CC9-A08B-CD64D6F7BC44",
              "guid": "D75402D3-00A7-4CC9-A08B-CD64D6F7BC44",
              "shortDescription": {
                "text": "Storing a plaintext password in a configuration file may result in a system compromise."
              },
              "fullDescription": {
                "text": "Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this attitude makes an attacker's job easier. Good password management guidelines require that a password never be stored in plaintext.\r\n\r\nIn this case, a hardcoded password exists in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "13",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "260",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "555",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "4.0",
                "Probability": "4.0",
                "Kingdom": "Environment",
                "Type": "Password Management",
                "Subtype": "Password in Configuration File"
              }
            },
            {
              "id": "CDD17D95-A4DF-4EE1-B4B1-66A536AEAA7E",
              "guid": "CDD17D95-A4DF-4EE1-B4B1-66A536AEAA7E",
              "shortDescription": {
                "text": "The function <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> uses the variable <Replace key=\"PrimaryVar.name\"/> before it has been initialized.\r\nThe program can potentially use a variable before it has been initialized."
              },
              "fullDescription": {
                "text": "In .Net, static variables are initialized to its default values, however usage of those variables without initializing may lead to business logic based issues or may be used to execute a Denial of Service (DoS) attack. Programs should never use the default value of a variable.\r\n\r\nIn this case, the variable declared in <Replace key=\"FirstTraceLocation.file\"/> at line <Replace key=\"FirstTraceLocation.line\"/> can be used at line <Replace key=\"PrimaryLocation.line\"/> without being set first.\r\n\r\nIt is not uncommon for programmers to use an uninitialized variable in code that handles errors or other rare and exceptional circumstances. Uninitialized variable warnings can sometimes indicate the presence of a typographic error in the code.\r\n\r\n**Example 1:** The following code will get compiled by the .Net compiler without any error. However, the following statement `int a = (Int32)i + (Int32)j;` throws an unhandled exception and crashes the application at runtime.\n    `\n    class Program\n        {\n            static int? i = j;\n            static int? j;\n            static void Main(string[] args)\n            {\n                j = 100;\n                int a = (Int32)i + (Int32)j;\r\n\r\n                Console.WriteLine(i);\n                Console.WriteLine(j);\n                Console.WriteLine(a);\n            }\n        }\n    `\r\n\r\nMost uninitialized variable issues result in general software reliability problems, but if attackers can intentionally trigger the use of an uninitialized variable, they might be able to launch a denial of service attack by crashing the program."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "457",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "1.0",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Uninitialized Variable"
              }
            },
            {
              "id": "62AF5863-16CE-4A79-9AD5-659F3710023B",
              "guid": "62AF5863-16CE-4A79-9AD5-659F3710023B",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> fails to enable validation before parsing XML on line <Replace key=\"PrimaryLocation.line\"/>, which gives an attacker the opportunity to supply malicious input.\r\nFailure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input."
              },
              "fullDescription": {
                "text": "Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input. It is not possible for an XML parser to validate all aspects of a document's content; a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.\r\n\r\nIn this case, schema validation is not enabled for the `XmlReaderSettings` object allocated in <Replace key=\"FirstTraceLocation.file\"/> at line <Replace key=\"FirstTraceLocation.line\"/>."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "112",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Input Validation and Representation",
                "Type": "Missing XML Validation"
              }
            },
            {
              "id": "69777D84-8507-40A7-9C2B-0B18E4A5EB0A",
              "guid": "69777D84-8507-40A7-9C2B-0B18E4A5EB0A",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> calls <Replace key=\"PrimaryCall.name\"/> to execute a command. This call might allow an attacker to inject malicious commands.\r\nExecuting commands that include unvalidated user input can cause an application to execute malicious commands on behalf of an attacker."
              },
              "fullDescription": {
                "text": "Command injection vulnerabilities take two forms:\r\n\r\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\r\n\r\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\r\n\r\nIn this case we are primarily concerned with the second scenario, the possibility that an attacker may be able to change the meaning of the command by changing an environment variable or by putting a malicious executable early in the search path. Command injection vulnerabilities of this type occur when:\r\n\r\n1. An attacker modifies an application's environment.\r\n\r\n2. The application executes a command without specifying an absolute path or verifying the binary being executed.\r\n\r\nIn this case the command is executed by <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\r\n\r\n**Example:** The following code is from a web application that allows users access to an interface through which they can update their password on the system. Part of the process for updating passwords in certain network environments is to run a `make` command in the `/var/yp` directory, the code for which is shown below.\r\n\r\n`\n...\nSystem.Runtime.getRuntime().exec(\"make\");\n...\n`\r\n\r\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to `Runtime.exec()`. If an attacker can modify the `$PATH` variable to point to a malicious binary called `make` and then execute the application in their environment, the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's `make` will now be run with these privileges, possibly giving them complete control of the system."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "77",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "78",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Input Validation and Representation",
                "Type": "Command Injection"
              }
            },
            {
              "id": "AC21F232-1D82-49B7-9AB1-46FE84CD6424",
              "guid": "AC21F232-1D82-49B7-9AB1-46FE84CD6424",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
              },
              "fullDescription": {
                "text": "This method is never called or is only called from other dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\n\r\n**Example 1:** In the following class, the method `DoWork()` can never be called.\r\n\r\n`\npublic class Dead {\n  private void DoWork() {\n    Console.Write(\"doing work\");\n  }\n  public static void Main(string[] args) {\n    Console.Write(\"running Dead\");\n  }\n}\n`\r\n\r\n**Example 2:** In the following class, two private methods call each other, but since neither one is ever invoked from anywhere else, they are both dead code.\r\n\r\n`\npublic class DoubleDead {\n  private void DoTweedledee() {\n    DoTweedledumb();\n  }\n  private void DoTweedledumb() {\n    DoTweedledee();\n  }\n  public static void Main(string[] args) {\n    Console.Write(\"running DoubleDead\");\n  }\n}\n`\r\n\r\n(In this case it is a good thing that the methods are dead: invoking either one would cause an infinite loop.)"
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "561",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "1.0",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Dead Code",
                "Subtype": "Unused Method"
              }
            },
            {
              "id": "F21BAB1C-A585-426B-A474-CA56905BB880",
              "guid": "F21BAB1C-A585-426B-A474-CA56905BB880",
              "shortDescription": {
                "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts."
              },
              "fullDescription": {
                "text": "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\r\n\r\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "328",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "3.5",
                "Kingdom": "Security Features",
                "Type": "Weak Cryptographic Hash"
              }
            },
            {
              "id": "D17237D4-4682-4F5E-82E9-68C32AE6351C",
              "guid": "D17237D4-4682-4F5E-82E9-68C32AE6351C",
              "shortDescription": {
                "text": "The class <Replace key=\"EnclosingClass.name\"/> contains debug code, which can create unintended entry points in a deployed web application.\r\nDebug code can create unintended entry points in a deployed web application."
              },
              "fullDescription": {
                "text": "A common development practice is to add \"back door\" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. When this sort of debug code is accidentally left in the application, the application is open to unintended modes of interaction. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.\r\n\r\nThe most common example of forgotten debug code is a `Main()` method appearing in a web application. Although this is an acceptable practice during product development, classes that are part of a production ASP.NET application should not define a `Main()`."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "489",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Encapsulation",
                "Type": "ASP.NET Bad Practices",
                "Subtype": "Leftover Debug Code"
              }
            },
            {
              "id": "CF140FA2-5F71-45AF-AB54-31FBB6C214DA",
              "guid": "CF140FA2-5F71-45AF-AB54-31FBB6C214DA",
              "shortDescription": {
                "text": "The call to <Replace key=\"PrimaryCall.name\"/> at <Replace key=\"PrimaryLocation.file\"/> line <Replace key=\"PrimaryLocation.line\"/> might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.\r\nAn attacker could cause the program to crash or otherwise become unavailable to legitimate users."
              },
              "fullDescription": {
                "text": "Attackers may be able to deny service to legitimate users by flooding the application with requests, but flooding attacks can often be defused at the network layer. More problematic are bugs that allow an attacker to overload the application using a small number of requests. Such bugs allow the attacker to specify the quantity of system resources their requests will consume or the duration for which they will use them.\r\n\r\n**Example 1:** The following code allows a user to specify the amount of time for which a thread will sleep. By specifying a large number, an attacker may tie up the thread indefinitely. With a small number of requests, the attacker may deplete the application's thread pool.\r\n\r\n`\n  int usrSleepTime = Int32.Parse(usrInput);\n  Thread.Sleep(usrSleepTime);\n`\r\n\r\n**Example 2:** The following code reads a String from a zip file. Because it uses the `ReadLine()` method, it will read an unbounded amount of input. An attacker may take advantage of this code to cause an `OutOfMemoryException` or to consume a large amount of memory so that the program spends more time performing garbage collection or runs out of memory during some subsequent operation.\r\n\r\n`\n   using (StreamReader sr = new StreamReader(\"file.zip\"))\n   {\n      String line;\n      line = sr.ReadLine();\n\t ...\n   }\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "730",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Input Validation and Representation",
                "Type": "Denial of Service"
              }
            },
            {
              "id": "6ED95DD1-4F81-44C6-A260-695DFD41B803",
              "guid": "6ED95DD1-4F81-44C6-A260-695DFD41B803",
              "shortDescription": {
                "text": "Attackers are able to control the file system path argument to <Replace key=\"PrimaryCall.name\"/> at <Replace key=\"PrimaryLocation.file\"/> line <Replace key=\"PrimaryLocation.line\"/>, which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
              },
              "fullDescription": {
                "text": "Path manipulation errors occur when the following two conditions are met:\r\n\r\n1. An attacker is able to specify a path used in an operation on the file system.\r\n\r\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\r\n\r\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\r\n\r\nIn this case, the attacker may specify the value that enters the program at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in <Replace key=\"SourceLocation.file\"/> at line <Replace key=\"SourceLocation.line\"/>, and this value is used to access a file system resource at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in <Replace key=\"SinkLocation.file\"/> at line <Replace key=\"SinkLocation.line\"/>.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n**Example 1:** The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker may provide a file name like \"`..\\\\..\\\\Windows\\\\System32\\\\krnl386.exe`\", which will cause the application to delete an important Windows system file.\r\n\r\n`\nString rName = Request.Item(\"reportName\");\n...\nFile.delete(\"C:\\\\users\\\\reports\\\\\" + rName);\n`\r\n\r\n**Example 2:** The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension \".txt\".\r\n\r\n`\nsr = new StreamReader(resmngr.GetString(\"sub\")+\".txt\");\nwhile ((line = sr.ReadLine()) != null) {\nConsole.WriteLine(line);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "22",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "73",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "4.0",
                "Kingdom": "Input Validation and Representation",
                "Type": "Path Manipulation"
              }
            },
            {
              "id": "D25057C1-E690-4679-93AF-0BE4EDD646B5",
              "guid": "D25057C1-E690-4679-93AF-0BE4EDD646B5",
              "shortDescription": {
                "text": "The call to <Replace key=\"PrimaryCall.name\"/> on line <Replace key=\"PrimaryLocation.line\"/> causes portability problems because it uses a hardcoded file separator.\r\nThe use of hardcoded file separators causes portability problems."
              },
              "fullDescription": {
                "text": "Different operating systems use different characters as file separators. For example, Microsoft Windows systems use \"\\\", while UNIX systems use \"/\". When applications have to run on different platforms, the use of hardcoded file separators can lead to incorrect execution of application logic and potentially a denial of service.\r\n\r\nIn this case a hardcoded file separator was used in the call to <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\n**Example 1:** The following code uses a hardcoded file separator to open a file:\r\n\r\n`\n...\nFileStream f = File.Create(directoryName + \"\\\\\" + fileName);\n...\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "474",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.5",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Portability Flaw",
                "Subtype": "File Separator"
              }
            },
            {
              "id": "57E7AB18-082F-4C18-8DE1-4115DB3917A3",
              "guid": "57E7AB18-082F-4C18-8DE1-4115DB3917A3",
              "shortDescription": {
                "text": "The random number generator implemented by <Replace key=\"PrimaryCall.name\"/> cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
              },
              "fullDescription": {
                "text": "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\r\n\r\nIn this case the function that generates weak random numbers is <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\r\n\r\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\r\n\r\n**Example:** The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\r\n\r\n`\nString GenerateReceiptURL(String baseUrl) {\n    Random ranGen = new Random();\n    ranGen.setSeed((new Date()).getTime());\n    return (baseUrl + ranGen.nextInt(400000000) + \".html\");\n}\n`\r\n\r\nThis code uses the `Random.nextInt()` function to generate \"unique\" identifiers for the receipt pages it generates. Since `Random.nextInt()` is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "338",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "4.0",
                "Probability": "1.0",
                "Kingdom": "Security Features",
                "Type": "Insecure Randomness"
              }
            },
            {
              "id": "3FE8632F-BDEA-4461-8931-F1AD123411D9",
              "guid": "3FE8632F-BDEA-4461-8931-F1AD123411D9",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/>  in <Replace key=\"PrimaryLocation.file\"/> determines an object's type based its class name on line <Replace key=\"PrimaryLocation.line\"/>. This practice can lead to unexpected behavior or allow an attacker to inject a malicious class.\r\nDetermining an object's type based on its class name can lead to unexpected behavior or allow an attacker to inject a malicious class."
              },
              "fullDescription": {
                "text": "Attackers may deliberately duplicate class names in order to cause a program to execute malicious code. For this reason, class names are not good type identifiers and should not be used as the basis for granting trust to a given object.\r\n\r\nExample 1: The following code opts to trust or distrust input from an `inputReader` object based on its class name. If an attacker is able to supply an implementation of `inputReader` that executes malicious commands, this code will be unable to differentiate the benign and malicious versions of the object.\r\n\r\n`\nif (inputReader.GetType().FullName == \"CompanyX.Transaction.Monetary\")\n{\n   processTransaction(inputReader);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "486",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Code Correctness",
                "Subtype": "Erroneous Class Compare"
              }
            },
            {
              "id": "B3E51C2D-01EF-4511-A237-F2C3F7796003",
              "guid": "B3E51C2D-01EF-4511-A237-F2C3F7796003",
              "shortDescription": {
                "text": "The declaration of <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"EnclosingClass.name\"/> looks like an effort to override a common .NET method, but it does not have the intended effect.\r\nThis looks like an effort to override a common .NET method, but it probably does not have the intended effect."
              },
              "fullDescription": {
                "text": "This method's name is similar to a common .NET method name, but it is either spelled incorrectly or the argument list causes it to not override the intended method.\r\n\r\n**Example 1:** The following method is meant to override `System.Object.Equals()`:\r\n\r\n`\npublic boolean Equals(string obj) {\n  ...\n}\n`\r\n\r\nBut since `System.Object.Equals()` takes an argument of type `object`, the method above is never called."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "398",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Code Correctness",
                "Subtype": "Misleading Method Signature"
              }
            },
            {
              "id": "9DD7BC55-7A23-4416-8ED7-72A7FB3FB773",
              "guid": "9DD7BC55-7A23-4416-8ED7-72A7FB3FB773",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> can dereference a null pointer on line <Replace key=\"PrimaryLocation.line\"/>, thereby raising a `NullException`. \r\nThe program can potentially dereference a null pointer, thereby raising a `NullException`."
              },
              "fullDescription": {
                "text": "Null pointer errors are usually the result of one or more programmer assumptions being violated.\r\n\r\nIn this case the variable can be null when it is dereferenced at line <Replace key=\"PrimaryLocation.line\"/>, thereby raising a `NullException`.\r\n\r\nMost null pointer issues result in general software reliability problems, but if an attacker can intentionally trigger a null pointer dereference, the attacker may be able to use the resulting exception to bypass security logic or to cause the application to reveal debugging information that will be valuable in planning subsequent attacks.\r\n\r\n**Example 1:** In the following code, the programmer assumes that the system always has a property named \"`cmd`\" defined. If an attacker can control the program's environment so that \"`cmd`\" is not defined, the program throws a null pointer exception when it attempts to call the `Trim()` method.\r\n\r\n`\nstring cmd = null;\n...\ncmd = Environment.GetEnvironmentVariable(\"cmd\");\ncmd = cmd.Trim();\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "476",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "1.0",
                "Kingdom": "Code Quality",
                "Type": "Null Dereference"
              }
            },
            {
              "id": "FCDDB941-4BEF-408B-80AD-56C348E52EF7",
              "guid": "FCDDB941-4BEF-408B-80AD-56C348E52EF7",
              "shortDescription": {
                "text": "The method <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> ignores the value returned by <Replace key=\"PrimaryCall.name\"/> on line <Replace key=\"PrimaryLocation.line\"/>, which could cause the program to overlook unexpected states and conditions.\r\nIgnoring a method's return value can cause the program to overlook unexpected states and conditions."
              },
              "fullDescription": {
                "text": "It is not uncommon for programmers to misunderstand `Read()` and related methods that are part of many `System.IO` classes. Most errors and unusual events in .NET result in an exception being thrown. (This is one of the advantages that .NET has over languages like C: Exceptions make it easier for programmers to think about what can go wrong.)  But the stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.\r\n\r\nThis behavior makes it important for programmers to examine the return value from `Read()` and other IO methods and ensure that they receive the amount of data they expect.\r\n\r\nIn this case the value of <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> is unchecked in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\n**Example:** The following code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from `Read()`. If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and handle it as though it belongs to the attacker.\r\n\r\n`\nchar[] byteArray = new char[1024];\nfor (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) {\n    string userName = (string) i.Current();\n    string pFileName = PFILE_ROOT + \"/\" + userName;\n    StreamReader sr = new StreamReader(pFileName);\n    sr.Read(byteArray,0,1024);//the file is always 1k bytes\n    sr.Close();\n    processPFile(userName, byteArray);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "252",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "754",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "API Abuse",
                "Type": "Unchecked Return Value"
              }
            },
            {
              "id": "625EEE1F-464F-42DC-85D6-269A637EF747",
              "guid": "625EEE1F-464F-42DC-85D6-269A637EF747",
              "shortDescription": {
                "text": "The class <Replace key=\"EnclosingClass.name\"/> contains debug code, which can create unintended entry points in a deployed web application.\r\nDebug code can create unintended entry points in a deployed web application."
              },
              "fullDescription": {
                "text": "A common development practice is to add \"back door\" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. When this sort of debug code is accidentally left in the application, the application is open to unintended modes of interaction. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.\r\n\r\nThe most common example of forgotten debug code is a `main()` method appearing in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a `main()`."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "489",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0",
                "Kingdom": "Encapsulation",
                "Type": "J2EE Bad Practices",
                "Subtype": "Leftover Debug Code"
              }
            },
            {
              "id": "F972FE42-6C15-47D2-BD5C-448166A574C2",
              "guid": "F972FE42-6C15-47D2-BD5C-448166A574C2",
              "shortDescription": {
                "text": "Using <Replace key=\"PrimaryCall.name\"/> rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `System.out` or `System.err` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
              },
              "fullDescription": {
                "text": "**Example 1:** The first Java program that a developer learns to write often looks like this:\r\n\r\n`\npublic class MyClass\n  public static void main(String[] args) {\n    System.out.println(\"hello world\");\n  }\n}\n`\r\n\r\nWhile most programmers go on to learn many nuances and subtleties about Java, a surprising number hang on to this first lesson and never give up on writing messages to standard output using `System.out.println()`.\r\n\r\nThe problem is that writing directly to standard output or standard error is often used as an unstructured form of logging. Structured logging facilities provide features like logging levels, uniform formatting, a logger identifier, timestamps, and, perhaps most critically, the ability to direct the log messages to the right place. When the use of system output streams is jumbled together with the code that uses loggers properly, the result is often a well-kept log that is missing critical information.\r\n\r\nDevelopers widely accept the need for structured logging, but many continue to use system output streams in their \"pre-production\" development. If the code you are reviewing is past the initial phases of development, use of `System.out` or `System.err` may indicate an oversight in the move to a structured logging system."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "398",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "1.0",
                "Probability": "1.0",
                "Kingdom": "Encapsulation",
                "Type": "Poor Logging Practice",
                "Subtype": "Use of a System Output Stream"
              }
            },
            {
              "id": "06C49ABE-9D01-4036-A3CB-E4D14DFE6D99",
              "guid": "06C49ABE-9D01-4036-A3CB-E4D14DFE6D99",
              "shortDescription": {
                "text": "Attackers are able to control the file system path argument to <Replace key=\"PrimaryCall.name\"/> at <Replace key=\"PrimaryLocation.file\"/> line <Replace key=\"PrimaryLocation.line\"/>, which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
              },
              "fullDescription": {
                "text": "Path manipulation errors occur when the following two conditions are met:\r\n\r\n1. An attacker is able to specify a path used in an operation on the file system.\r\n\r\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\r\n\r\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\r\n\r\nIn this case, the attacker may specify the value that enters the program at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in <Replace key=\"SourceLocation.file\"/> at line <Replace key=\"SourceLocation.line\"/>, and this value is used to access a file system resource at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in <Replace key=\"SinkLocation.file\"/> at line <Replace key=\"SinkLocation.line\"/>.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n**Example 1:** The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker may provide a file name like \"`..\\\\..\\\\Windows\\\\System32\\\\krnl386.exe`\", which will cause the application to delete an important Windows system file.\r\n\r\n`\nString rName = Request.Item(\"reportName\");\n...\nFile.delete(\"C:\\\\users\\\\reports\\\\\" + rName);\n`\r\n\r\n**Example 2:** The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension \".txt\".\r\n\r\n`\nsr = new StreamReader(resmngr.GetString(\"sub\")+\".txt\");\nwhile ((line = sr.ReadLine()) != null) {\nConsole.WriteLine(line);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "22",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "73",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "4.0",
                "Kingdom": "Input Validation and Representation",
                "Type": "Path Manipulation"
              }
            },
            {
              "id": "49D75ADD-4BBD-49B9-AAF2-92B9BAB332FE",
              "guid": "49D75ADD-4BBD-49B9-AAF2-92B9BAB332FE",
              "shortDescription": {
                "text": "The random number generator implemented by <Replace key=\"PrimaryCall.name\"/> cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
              },
              "fullDescription": {
                "text": "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\r\n\r\nIn this case the function that generates weak random numbers is <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\r\n\r\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\r\n\r\n**Example:** The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\r\n\r\n`\nString GenerateReceiptURL(String baseUrl) {\n    Random ranGen = new Random();\n    ranGen.setSeed((new Date()).getTime());\n    return (baseUrl + ranGen.nextInt(400000000) + \".html\");\n}\n`\r\n\r\nThis code uses the `Random.nextInt()` function to generate \"unique\" identifiers for the receipt pages it generates. Since `Random.nextInt()` is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "338",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "4.0",
                "Probability": "1.0",
                "Kingdom": "Security Features",
                "Type": "Insecure Randomness"
              }
            },
            {
              "id": "00ED6F4C-5E55-4924-B574-86DADF179153",
              "guid": "00ED6F4C-5E55-4924-B574-86DADF179153"
            },
            {
              "id": "1E59E292-997F-468B-BEEB-F50BBAEF79AD",
              "guid": "1E59E292-997F-468B-BEEB-F50BBAEF79AD"
            },
            {
              "id": "5794148E-BCCB-4908-9FB7-42954ED1622E",
              "guid": "5794148E-BCCB-4908-9FB7-42954ED1622E"
            },
            {
              "id": "B64A39A1-A297-402F-B675-C4EC7E1EE8C7",
              "guid": "B64A39A1-A297-402F-B675-C4EC7E1EE8C7"
            },
            {
              "id": "C9CAB944-C849-41AE-9975-2DF84B6257CD",
              "guid": "C9CAB944-C849-41AE-9975-2DF84B6257CD"
            },
            {
              "id": "EE8B9AD9-4A5F-4664-841B-4F88AFE25C55",
              "guid": "EE8B9AD9-4A5F-4664-841B-4F88AFE25C55"
            },
            {
              "id": "F8E7B91F-3761-4A25-BE51-78AE78FF9B95",
              "guid": "F8E7B91F-3761-4A25-BE51-78AE78FF9B95"
            }
          ],
          "supportedTaxonomies": [
            {
              "name": "CWE",
              "index": 0,
              "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
            }
          ]
        }
      },
      "invocations": [
        {
          "commandLine": "[REMOVED]insourceanalyzer.exe -b 0000 -logfile c:\\sw\\vsts-agent\\VSTSBuilds\\2\\a\\sca_artifacts\\0000_scan.log -scan -f c:\\sw\\vsts-agent\\VSTSBuilds\\2\\a\\sca_artifacts\\0000.fpr",
          "startTimeUtc": "2019-06-06T08:53:15.000Z",
          "toolExecutionNotifications": [
            {
              "message": {
                "text": "Assuming Java source level to be 1.8 as it was not specified. Note that the default value may change in future versions."
              },
              "level": "error",
              "descriptor": {
                "id": "12003"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis$1MyRandom (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Assuming Java source level to be 1.8 as it was not specified. Note that the default value may change in future versions."
              },
              "level": "error",
              "descriptor": {
                "id": "12003"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis$1MyRandom (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Assuming Java source level to be 1.8 as it was not specified. Note that the default value may change in future versions."
              },
              "level": "error",
              "descriptor": {
                "id": "12003"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis$1MyRandom (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Assuming Java source level to be 1.8 as it was not specified. Note that the default value may change in future versions."
              },
              "level": "error",
              "descriptor": {
                "id": "12003"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis$1MyRandom (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Assuming Java source level to be 1.8 as it was not specified. Note that the default value may change in future versions."
              },
              "level": "error",
              "descriptor": {
                "id": "12003"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis$1MyRandom (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Assuming Java source level to be 1.8 as it was not specified. Note that the default value may change in future versions."
              },
              "level": "error",
              "descriptor": {
                "id": "12003"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:7:1)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis$1MyRandom (C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15 and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v1\\ConverterTestData\\Fortify\\src\\bannedAPIs.java:9:15)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Function Microsoft.CodeAnalysis.Sarif.Writers.PrereleaseCompatibilityTransformer.AddEntryToFullyQualifiedNameToIndexMap({?}, System.String, {?}, System.Collections.Generic.Dictionary@2, System.Collections.Generic.Dictionary@2, System.Collections.Generic.Dictionary@2) is too complex for exhaustive dataflow analysis and further analysis will be skipped (visits)"
              },
              "level": "error",
              "descriptor": {
                "id": "1137"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis (C:/sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/Fortify/src/bannedAPIs.java and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            },
            {
              "message": {
                "text": "Multiple definitions found for class BannedApis.1MyRandom (C:/sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/Fortify/src/bannedAPIs.java and C:\\sw\\vsts-agent\\VSTSBuilds\\2\\s\\src\\Test.FunctionalTests.Sarif\\v2\\ConverterTestData\\Fortify\\src\\bannedAPIs.java)."
              },
              "level": "error",
              "descriptor": {
                "id": "1214"
              }
            }
          ],
          "executionSuccessful": true,
          "machine": "VSBuildAgent",
          "account": "Ops",
          "properties": {
            "Platform": "Windows Server 2016"
          }
        }
      ],
      "originalUriBaseIds": {
        "SRCROOT": {
          "uri": "file:///C:/"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-083.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1495,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-172.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1716,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AB_SecondLoop.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 24493,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-075.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 11593,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-180.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4689,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6385Example3.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2836,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/ResultMatching/ResultMatchingTestHelpers.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1826,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-067.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2493,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/AssertionExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2217,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-156.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8286,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/OverflowCorrector.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1456,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-091.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1459,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-059.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9104,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Processors/Log/RebaseUriStageTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1997,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-086.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 21629,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/AndroidStudio_issueLog3_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 676,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-167.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1950,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AA_IndexAlias.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2442,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/Standardc6259output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 496,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/StackTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4246,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Node.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5956,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-011-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 11232,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-031.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 12212,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/FortifyUtilitiesTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2201,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-094.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8302,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/ConvertCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1937,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6386Example3.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2180,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-112.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3242,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/AndroidStudio_issueLog8_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1227,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/FileDataVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8376,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ContrastSecurity/WebGoat.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 277094,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/IOptionsProvider.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 531,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6538,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6200Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 600,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ToolEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4152,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/SparseReader.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 13787,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/ValidateOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 893,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/RunVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 14545,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/ListComparisonHelpers.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3885,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/CppCheckLocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7163,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/DriverSdkExtensionsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2996,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/Standardc6282output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 485,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Core/IPropertyBagHolderVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 898,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/ExactMatchers/ExactResultMatcherFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1027,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/FxCopConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 21820,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/TSLintObjectModel/TSLintLogEntry.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1348,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6385Example2.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2377,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/RemappingCalculators/IRemappingCalculator.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 466,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6001output2.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2309,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/MissingLocation.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2669,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/BaselineStateVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 543,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Log/SarifLogExtensionMethods.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1720,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/SarifConstants.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 318,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/DefaultObjectPopulatingVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 24184,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ThreadFlowEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5046,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/FileDiffingFunctionalTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1173,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/ExceptionData.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1613,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/ArrayDataTypes.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1342,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/AndroidStudio_issueLog5_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 30385,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/ConsoleLogger.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10159,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-013.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7579,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/packageBeforeModule.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 712,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/Fortify/src/bannedAPIs.java",
            "uriBaseId": "SRCROOT"
          },
          "length": 3277,
          "mimeType": "text/x-java-source",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-104.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9871,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/AndroidStudioConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 11297,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-023.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7510,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/SarifUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7336,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReportingDescriptorReferenceEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3910,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/ReportingConfiguration.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 447,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/SimpleTestRule.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1699,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ArtifactContentEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3630,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FortifyIssue.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 12112,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-121.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6299,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ExceptionDataVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5642,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-058.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2572,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-113.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 13669,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-008.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3396,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/TestUtilitiesResources.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3355,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/StackEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4111,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-024.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1188,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-074.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5484,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-085.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 593,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-040.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3099,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-077.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 18995,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Multitool/TransformCommandTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6537,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SuppressionKind.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 507,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/packages.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 143,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ThreadFlow.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6713,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Readers/AnnotatedCodeLocationIdConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2723,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-157.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3002,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/EqualityComparerTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3772,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PylintConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2904,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-197-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 17144,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/SerializedPropertyInfoEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1376,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-090.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 23458,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AM_AliasAndSetValue.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2080,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-021.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2686,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/IToolFileConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 343,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/TFS370524.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5511,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Region.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9498,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/Fortify/src/bannedAPIs.java",
            "uriBaseId": "SRCROOT"
          },
          "length": 3277,
          "mimeType": "text/x-java-source",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/MultiformatMessageString.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4617,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-014.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4177,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FortifyConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8018,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Attachment.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7012,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/ValidateCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7447,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/ThreadFlowBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1268,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/RegionVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5745,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Artifact.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4246,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-168.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2481,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-084.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4084,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS260613.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2908,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/moduleEmpty.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 690,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-163.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 16635,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/PropertyBagEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2387,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-181.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1531,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/VersionControlDetails.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7304,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/GraphEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5191,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ISarifLogBaseliner.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 328,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6200Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 600,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6001output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1463,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ConversionEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4611,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS370524.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4584,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/WebResponse.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7803,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/RuleEnabledState.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1135,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/EdgeTraversalEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4951,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/ResultDiffingVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2391,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C28182Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2164,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/TestTraits.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 310,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/IOption.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 470,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AN_OutWithDefect.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1901,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ResultKind.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 566,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-003.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1801,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PREFastObjectModel/Defect.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 967,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-020.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1778,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/LocationEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7094,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/LineMappingStreamReader.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9586,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-095.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7076,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/DriverExtensionMethods.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1323,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-110.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 31220,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/ExceptionCondition.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 534,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-078.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 15960,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/ExitApplicationException.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 614,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-103.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 19022,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PREFastObjectModel/DefectList.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 323,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/ThreadFlowLocationBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1519,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/problemClassSeverityMissing.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 693,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Artifact.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10779,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/FileFormat.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 298,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/SarifVersionOneToCurrentVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 49536,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/CodeFlowBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1257,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/CppCheckError.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8170,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-014.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4177,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/AndroidStudio_issueLog6_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1320,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/bin/Debug/CommandLine.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 181854,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Edge.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5329,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-041.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14102,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/ArtifactLocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3774,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-181.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1531,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/StackFrameBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1766,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/BadMissingString.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1771,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/ValidatorResources.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 33249,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-076.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2303,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AB_SecondLoop.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 18645,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/AndroidStudioConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 19248,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/BaselineState.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 540,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-106.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1636,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-162.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1514,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/PropertiesDictionaryExtensionMethods.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 12133,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/GarbageValueLog.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 39198,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ToolComponentContents.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 566,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-141-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 10069,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/HeuristicMatchers/HeuristicResultMatcherFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 711,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-077.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 18995,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Warnings.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4942,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6001Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2069,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/SarifValidationContext.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1989,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-182.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1657,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1001.DoNotUseFriendlyNameAsRuleId.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1615,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AN_Basic_C6053_4.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4284,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SarifVersion.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 495,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Standardc6259.cxx.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 603,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/CreateOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 596,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/DeferredDictionaryConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2065,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-049.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4937,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/CppCheckErrorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9486,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/ConvertOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1086,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/AddressEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4705,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SarifRewritingVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 54292,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AA_PropertyAlias.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1905,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/AnalyzeCommandBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 26935,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/IAnalysisLogger.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1531,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/ConverterTestsBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3450,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/SarifPropertyName.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4206,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-169.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1869,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/ContrastSecurityRuleIds.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4795,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-011.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6127,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/StackFrameVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10229,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ResultVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 15486,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/SarifLogBaseliner.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1541,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ThreadFlowLocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 13367,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-110.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 31220,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/ToolFormatConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 18809,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/FxCop/FxCopExampleReport2.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4303,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/IAnalysisContext.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 824,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ArtifactRoles.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1182,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-081.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5934,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Stack.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6011,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AM_BranchAndMaybeZero.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4300,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-096.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 30679,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/DriverResources.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10021,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/SarifUtilitiesVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 977,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/RemapIndicesVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5792,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/RelevantkeyEvents.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4442,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-111.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 38805,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionConstants.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 401,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FortifyUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1767,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/LocationVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7500,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/RelevantKeyEvents2.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3145,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-155.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4279,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/ExportRulesMetadataCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 661,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-110-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 47034,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-112.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3242,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/LogicalLocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7581,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-089-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 91706,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PylintObjectModel/PylintLogEntry.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1033,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/HeuristicMatchers/HeuristicMatcher.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4672,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-076.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2303,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/SarifLogEqualityComparerTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1706,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-082.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 16771,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/TSLintObjectModel/TSLintLogPosition.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 727,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/SarifConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6466,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/ReferenceEqualityComparer%601.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2296,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/App.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 404,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/TFS372959.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 16872,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/bld/obj/AnyCPU_Debug/Test.UnitTests.Sarif.Multitool/netcoreapp2.0/Test.UnitTests.Sarif.Multitool.Program.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 308,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/VersionOneLogicalLocationKeyToLogicalLocationDataVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3818,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-111.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 38805,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/AndroidStudio_issueLog2_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 580,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/TempFile.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4462,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Visitors/MakeUriAbsoluteVisitorTest.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9857,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS331675.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7632,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-048.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2924,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/CommonOptionsBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1851,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/CppCheckConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4681,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/DriverCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 397,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/SuppressionStatesVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 585,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-075.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 11593,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-005.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2460,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/AbsoluteUriOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 489,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/MultitoolCommandLineTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1226,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-032.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2504,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/FortifyIssueTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 11611,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6011output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1133,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/ResultMatching/SarifLogResultMatcherTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 22723,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/LogReader.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 659,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/ResultMatchingCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2340,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/ToolFileConverterBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3811,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/SarifCsvColumnWriters.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6779,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/RuleUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5533,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifDeferredSample/packages.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 233,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/CppCheck/CppCheck_issueLog1_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 108357,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/MultiformatMessageStringEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3389,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/PropertiesDictionaryTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8172,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AM_BranchAndMaybeZero.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5571,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/singleIssue.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 712,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Invocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 22653,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PREFastObjectModel/PREFastPath.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 267,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/CodeFlowVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4247,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/ResultMatching/HeuristicMatchers/ContextRegionResultMatcherTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2558,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/InvocationVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9321,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/Fortify/bannedAPIs_m0.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 240495,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AN_Basic_C6053_4.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3301,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-005.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2460,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ConfigurationOverride.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5065,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6059Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2989,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Processors/Log/MergeStageTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2051,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Readers/SampleModel/LogModel.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10624,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AB_IrrelevantLoop.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4211,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/minimalIssueWithoutPackageOrHintElement.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 664,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/App.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 189,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-182.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1657,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/IResultMatcher.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 532,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/StringExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 942,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-097.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14066,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-040.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3099,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-032.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2504,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/MergeOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 611,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/FixEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4214,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-139.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4852,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-199.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 12236,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ResultVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 11122,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/TFS378661.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9283,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-016.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9154,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Writers/ResultLogJsonWriter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 16400,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AF_LocalRemoteFunctions.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3015,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-113.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 13669,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/UriConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2103,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ExceptionDataVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3486,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6386Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2591,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AF_LocalRemoteFunctions.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3015,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/UnknownEncodingException.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 526,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/TransformOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 438,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-128.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5210,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-047.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5600,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Run.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 30787,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/PhysicalLocationBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1348,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-051.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1585,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/RelevantkeyEventsoutput1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3230,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Generic/GenericFoldAction.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1364,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AN_InOptAnnotations.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1621,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/StaticDriverVerifierConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 12523,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/LongConditions.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6301,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/TFS260613.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3746,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-071.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 18883,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Errors.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 20899,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-108.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2370,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/JsonInnerTextReader.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 633,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Core/IRuleVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 307,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/FortifyPathElementTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7631,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/VersionControlDetailsEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4458,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AN_InOptAnnotations.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2115,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/LoadOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 546,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-194.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1607,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/SarifVersionConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1374,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1016.ContextRegionRequiresRegion.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1362,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-179.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2899,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/ExceptionRaisingRule.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4601,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/TFS260613.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3746,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6029output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1202,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/BrandedVersionAttribute.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1148,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6059output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2125,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6011Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1590,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/ThreadflowLocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 612,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-086.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 21629,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-205-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4324,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/singleIssue.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 712,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SuppressionState.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 524,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/CppCheckConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3207,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SpecialLocationsEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3126,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/Program.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 20981,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/AndroidStudio_issueLog8_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1227,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-066.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 21778,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-160.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 11117,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/StackFrame.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5915,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/SingleFileOptionsBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 898,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/InsertOptionalDataVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7929,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/SarifValidatorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 11260,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/bin/Debug/Newtonsoft.Json.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 523221,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/SarifNodeKindVersionOneVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5398,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/ArtifactLocationBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1223,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ExternalPropertyFileReference.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5495,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/twoIssues.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1315,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Visitors/UpdateIndicesFromLegacyDataVisitorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7517,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/Extensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6279,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-104.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9871,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/DeferredListConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1967,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ThreadFlowLocationEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8771,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-091.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1459,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-180.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4689,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AA_RememberOldAlias.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 11451,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/TestMessageLogger.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2999,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/NewLineIndex.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5842,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ToolComponentEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 16252,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/AggregatingLogger.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2517,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/ConverterFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1101,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/StatisticsLogger.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2283,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/Skimmer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3600,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-107.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5180,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-141-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 10069,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/ToolFormatConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6194,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-041.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14102,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-129.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4998,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AA_IndexAlias.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3164,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Visitors/AddFileVisitorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1573,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/PhysicalLocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6136,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/FlagsEnumConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2470,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6200output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1815,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-205-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4324,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/AndroidStudio_issueLog6_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1320,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-178.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1805,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/StackFrameEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4608,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/MessageEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4593,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-020.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1778,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SarifLog.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7303,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/TagsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 14859,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/fileEmpty.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 609,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/EnumerableExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8749,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/EdgeTraversal.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6073,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/IgnoreOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 770,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6001Example2.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3229,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/RealLog.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 70644,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-046.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6237,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Message.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 356,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Message.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5661,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/RewriteOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 439,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/FormattedRuleMessageVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2876,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/FxCop/FxCopNoTargets.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2578,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FortifyStrings.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8822,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ResultLevelVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 541,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/DeletesOutputsDirectoryOnClassInitializationFixture.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2336,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-090.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 23458,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/EdgeEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3815,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-052.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6667,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Run.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6847,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/SarifCurrentToVersionOneVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 50384,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-035.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5391,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/ExactMatchers/FullFingerprintResultMatcher.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3602,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/StackVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5227,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AF_LocalRemoteFunctions.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2410,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-163.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 16635,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-057.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9773,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/MultitoolResources.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3923,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/IEnvironmentVariables.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1304,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6305Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1875,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-031.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 12212,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/TestSkimmerBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2029,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Standardc6306.cxx.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1186,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-067.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2493,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1014.UriBaseIdRequiresRelativeUri.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1497,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Map/JsonMapBuilder.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9061,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Generic/IFoldAction.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 688,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AB_IrrelevantBranch.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7361,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/CustomDictionary.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 620,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/FileRegionsCache.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 13212,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Tool.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5129,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-185.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2657,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/DefaultBaselineUnitTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4724,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/ToolComponent.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 673,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Multitool/Rules/SarifValidationSkimmerBaseTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3045,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AA_IndexAlias.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3164,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/MockFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1060,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/SarifExtensionsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4163,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6001Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2069,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-092.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 34974,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PREFastConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8648,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ArtifactChangeEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4295,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/CommandBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2324,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-122.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5382,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/HashVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1830,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-197-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 17144,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PREFastObjectModel/SFA.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 542,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/ArrayDataTypes.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1342,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-073.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8497,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/MultifileOptionsBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1236,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-042.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 24232,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-131.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1692,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-170.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1809,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AdvancedC6305.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 22739,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/AndroidStudio_issueLog4_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 790,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-085.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 593,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/ToolFileConverterBaseTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5744,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/TSLintObjectModel/TSLintLog.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 402,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SpecialLocations.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4300,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Visitors/SarifVersionOneToCurrentVisitorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4106,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/ExtensionsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 17027,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/PropertyBag.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3577,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-137.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2342,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/HashData.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 529,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/ResultTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1445,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/attributeKeyMissing.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 677,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1012.EndLineMustNotBeLessThanStartLine.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1799,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/NotificationVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5108,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Conversion.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6007,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AB_IrrelevantSwitch.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2651,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/MissingPathElement.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 754,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/NotificationEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5731,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-146.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 10098,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/SarifDeferredContractResolver.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2921,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-103.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 19022,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ExternalPropertyFileReferences.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 23068,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/DriverSdkExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2269,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-088.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8795,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReportingDescriptorReference.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6108,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Map/JsonMapBuilderTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5691,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Suppression.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6219,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-002.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2407,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/WriteContext.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 490,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/FileSystem.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9346,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/TaintKindVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 559,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-070.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5261,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-045.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1800,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/ArgumentSplitter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4594,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/DeferredDictionary.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 18326,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6001Example2.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3229,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-186.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5456,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-109.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1446,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SarifValidationSkimmerBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 31627,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/Fortify/bannedAPIs_java.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 73572,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/LogicalLocationVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4757,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/WarningsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 985,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-100.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 13800,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Core/PropertyBagHolderVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5505,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-021.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2686,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/LongMacrooutput1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1562,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/AndroidStudio_issueLog1_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1313,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C28182output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1532,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/PropertyBagConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2296,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/MergeCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2796,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Log/SarifLogPipeline.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2319,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-203.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2912,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/FxCop/FxCopReportResource.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 941,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/OrderSensitiveValueComparisonListTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4620,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ToolComponentReferenceEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3531,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-079.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14814,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/RentalStream.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 11678,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ToolComponentReference.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5132,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-173.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3105,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/StringToVersionMap.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 309,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ToolComponent.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 25248,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-036.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1170,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/FileDataVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5623,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/SarifLogBaselinerFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 855,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifDeferredSample/App.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 189,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/LogicalLocationEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4267,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-201.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3291,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationKindVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 725,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/PerLanguageOption.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2386,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/TFS370524.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5511,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/bld/bin/AnyCPU_Debug/Test.FunctionalTests.Sarif/netcoreapp2.0/DotnetToolSettings.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 204,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Generic/IGenericAction.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 522,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-171.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5006,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/ResultBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3697,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/HeuristicMatchers/IResultMatchingComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 874,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-130.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5257,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-166.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1245,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/SarifLogVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5063,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/AndroidStudioStringsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1561,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/TFS373273.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5702,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ResultProvenance.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8566,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ReplacementVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4894,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-123.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3262,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/packageEmpty.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 682,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/RelevantkeyEventsoutput2.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2270,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-192.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 129666,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/SdkExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1364,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-072.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5231,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-102.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4041,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-199-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 19114,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/AnalyzeOptionsBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3426,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-017.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8064,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Writers/SarifLoggerTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 31957,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6386Example3.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2180,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-188.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4914,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/ToolFormat.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1971,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/FailureLevel.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 520,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ExternalPropertyFileReferencesEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 19184,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Log/SarifLogStageFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2959,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-116.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2610,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/AlgorithmKindVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1059,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FileInfoFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3824,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/SarifTransformerUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 12774,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-050.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5879,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-093.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1843,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-198-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14947,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-138.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1479,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/FileSpecifier.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3001,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/RewriteCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2125,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-117.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8277,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/TypedPropertiesDictionaryConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5322,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AN_OutWithDefect.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2451,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/SarifLogTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2606,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1015.UriMustBeAbsolute.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4200,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AN_OutWithDefect.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2451,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Multitool/ValidateCommandTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2370,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/ExactMatchers/IdenticalResultMatcher.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5488,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/SarifHelpers.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1489,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-150.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3903,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AM_AliasAndMaybeZero.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2106,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-193.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2464,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Writers/SarifLogger.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 20199,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-199-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 19114,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ArtifactLocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6097,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Processors/GenericTests/TestFoldProcessor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 477,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-101.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9339,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/CppCheckStrings.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2509,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6386output3.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1612,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AM_BranchAndSetValue.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3085,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10029,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/Standardc6306output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 974,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-065.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6903,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ArtifactContent.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5215,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6385Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4364,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-022.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 17426,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/packageEmpty.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 682,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AA_RememberOldAlias.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 11451,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/TestRuleBehaviors.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 333,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/ClangAnalyzer_issueLog1_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 110475,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/CodeFlowVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5284,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-198-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14947,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-087.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 24100,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/TFS375867.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 23692,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-037.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5219,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-001.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8564,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/WebResponseEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4735,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ExceptionData.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6257,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/TranslationMetadata.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7421,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/LongConditions.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6301,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Tags.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5612,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/TSLintObjectModel/TSLintLogFix.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 751,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/RemoveOptionalDataVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1205,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/StrictBaselineUnitTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3708,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/IFileSystem.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8262,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/SemmleQLConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8184,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/MockFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2390,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/Schemata/FxCopReport.xsd",
            "uriBaseId": "SRCROOT"
          },
          "length": 16452,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/HashUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4960,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/MissingLocation.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2669,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/bin/Debug/SarifSdkSample.exe.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 18401,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ConfigurationOverrideEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3513,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/NotificationVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8733,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/AndroidStudioProblem.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 12604,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/AnnotationVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4359,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/DefaultDriverOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2361,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/PropertyBagHolder.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6698,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Notes.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1269,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1013.EndColumnMustNotBeLessThanStartColumn.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2171,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/RemappingCalculators/SarifLogRemapping.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 458,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-198.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7332,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1008.MessagesShouldEndWithPeriod.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3792,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/SarifContractResolver.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2453,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Stack.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5029,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SarifLogEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5564,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ThreadFlowLocationImportance.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 570,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/CppCheck/CppCheck_issueLog1_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 108357,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-036.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1170,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/ToDotNet/packages.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 155,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PluginConverterFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2978,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Writers/SarifOneZeroZeroLogger.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2646,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/RuleId.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1064,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/MultiplyByPrimesHash.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5921,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/AnalyzeCommandBaseTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 28515,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/ExportConfigurationCommandBaseTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3335,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/OffsetInfo.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5851,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/RegionVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2500,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-038.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3835,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/DateTimeConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1938,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-070.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5261,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ExternalProperties.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 22916,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-055.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 17055,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6386output2.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1755,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifDeferredSample/bin/Debug/System.Collections.Immutable.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 426749,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-047.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5600,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-060.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 10073,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/Program.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5551,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-128.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5210,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/BuiltinConverterFactoryTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2166,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/Multitool/ValidateCommandTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9274,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/NodeEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4662,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-109.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1446,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ResultProvenanceEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5311,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-136.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8778,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-051.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2085,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Standardc6306.cxx.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1186,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/PhysicalLocationVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2309,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-043.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 33426,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/CommandUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1430,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/DeferredList.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8572,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-141.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5552,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/FortifyStringsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1985,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-205.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3826,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/RebaseUriCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3707,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/RectangleEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3735,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/EnumConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3157,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Standardc6282.cxx.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 592,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ToolVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7477,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/RebaseUriOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1249,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/ExtensionMethods.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 16209,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/MissingPathElement.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 754,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/packageBeforeModule.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 712,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PREFastObjectModel/Category.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1157,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/TestRuleBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2512,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/PhysicalLocationEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4064,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/Fortify/bannedAPIs_java.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 73572,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/TFS373273.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5702,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/SarifRewritingVisitorVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 17611,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReportingConfiguration.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6555,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Location.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8940,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Multitool/PageCommandTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10540,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/JsonPositionedTextReader.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5152,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/ResultMatchingBaselinerFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2302,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/PhysicalLocationVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4821,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AdvancedC6305.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 22739,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/TestAnalyzeCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1546,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/PropertiesDictionary.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8137,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/TSLintLogReaderTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10227,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-132.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4683,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/FileNumberCoverage.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2669,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/StackVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4179,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FxCopConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 41226,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/SemmleQlConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 14522,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/WebRequest.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7484,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-035.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5391,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/CompositionUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1342,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-199.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 12236,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/IAppConfig.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1126,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/FxCop/FxCopReportAllMessageStates.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 21449,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6386output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1823,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/AddFileReferencesVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2003,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/RuleUtilitiesTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2820,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/LocationVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4445,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-046.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6237,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-063.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2547,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-062.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5771,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-152.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1872,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-108.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2370,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/DivByZero.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 15943,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Location.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 702,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-052.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6667,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/JsonTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2689,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-089.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 43960,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/RuleResources.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 13511,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PREFastObjectModel/KeyEvent.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 463,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-039.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5748,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/ContrastSecurityConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 66701,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/FxCop/FxCopNoTargets.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2578,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-038-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6201,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AN_Basic_C6053_4.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4284,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Writers/LoggingOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 686,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/singleIssueWithHints.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 666,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/SarifBaselineType.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 306,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/AnnotationVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2845,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-011-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 11232,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-129.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4998,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-179.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2899,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/LocationRelationship.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5621,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/CombinedOutput1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9072,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/GarbageValueLog.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 39198,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/RuleVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8497,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/EntryPointUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2833,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/SarifLogMatcher.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 16857,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/ISarifLogMatcher.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 442,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/FileDiffingUnitTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9590,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/FixVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4622,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/AnalysisContext.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 781,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Processors/Log/LogPipelineSerializationTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1123,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PylintObjectModel/PylintLog.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 333,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Generic/GenericActionPipeline.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 818,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/NotificationLevelVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 514,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/ExportRulesMetadataOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 639,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-089-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 91706,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Readers/EnumConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2491,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/RealLog.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 70644,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/EntryPointUtilitiesTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4361,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/IntegerSet.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 705,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SuppressionEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3955,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/AndroidStudio_issueLog1_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1313,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/TFS348783.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2224,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6305Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1875,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReportingDescriptorRelationshipEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4604,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/PropertyBagHolderTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10335,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Replacement.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4808,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/DisposableEnumerable.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5494,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/LocationBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1741,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Rectangle.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5950,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/SarifLogVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2949,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ColumnKind.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 525,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/RelevantkeyEvents.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4442,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/moduleEmpty.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 690,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/IRuleVersionOneVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2259,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/MediumLog.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9800,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/SupportedPlatform.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 410,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ExternalPropertiesEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 19762,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationImportanceVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 598,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/TFS348783.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2224,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-080.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 12166,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1007.EndTimeMustNotBeBeforeStartTime.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1905,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/HeuristicMatchers/ContextRegionHeuristicMatcher.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2637,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/SdkResources.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 20270,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/CodeFlow.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5192,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AN_Basic_C6387.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 10959,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-096.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 30679,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-126.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1875,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/DictionaryDataTypes.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1235,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-097.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14066,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-054.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 16489,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-126.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1875,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-169.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1869,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/FormatForVisualStudioTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9274,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/SkimmerBaseTestResources.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4333,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/InvocationEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 16782,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FortifyPathElement.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4604,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-061.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14293,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-178.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1805,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/FixVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2821,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Map/LongArrayDeltaConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2658,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-162.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1514,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C28182Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2164,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/MurmurHash.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7769,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/LineInfo.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4602,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/LogicalLocationVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2254,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AB_IrrelevantBranch.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7361,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/AndroidStudio_issueLog4_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 790,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Processors/GenericTests/GenericProcessorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2158,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/RunEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 25954,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/KeyEventImportance.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 722,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Readers/SarifContractResolverVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2573,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-197.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8785,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AB_IrrelevantLoop.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3287,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-010.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1313,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/DotnetToolSettings.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 204,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/RunTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5998,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AN_Basic_C6387.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8512,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/UriHelper.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5290,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-049.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4937,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-107.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5180,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-062.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5771,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/ExportConfigurationOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 868,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-134.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3083,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/FxCop/FxCopExceptions.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7800,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/TransformCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6602,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AB_SecondLoop.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 24493,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/BadMissingString.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1771,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/CppCheckLocationTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6324,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ExceptionDataEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4787,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/RuleConfigurationVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 523,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/LongMacro.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2127,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Standardc6316.cxx.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 614,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ResultEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 22131,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FortifyFprConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 47268,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/ResultMatching/ResultMatchingBaselinerTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4578,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/ResultMatching/ExactMatchers/FullFingerprintMatcherTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3216,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Readers/LineMappingStreamReaderTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4568,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/TempDirectory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4635,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/ExportConfigurationCommandBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3804,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AN_FunctionAndInAnnotations.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2628,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Writers/ResultLogJsonWriterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 14584,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Pair.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1100,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ISarifNode.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 775,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/attributeKeyMissing.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 677,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/TranslationMetadataEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4627,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-197.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8785,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/AnalysisApplicability.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 358,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/PropertyBagConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2961,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-081.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5934,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Writers/PrereleaseCompatibilityTransformer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 108732,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Generic/IMapAction.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 502,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AdvancedC6305.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 17546,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AN_FunctionAndInAnnotations.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2048,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/InvocationVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7589,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/AndroidStudio_issueLog5_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 30385,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6385Example2.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2377,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS360455.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1986,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-160.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 11117,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/TSLintLogReader.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6004,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-011.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6127,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/ClangAnalyzerConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9366,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AN_FunctionAndInAnnotations.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2628,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-061.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14293,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-134.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3083,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS348783.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1701,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/FortifyConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10044,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/IntegerExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 448,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Fix.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5331,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ExternalPropertyFileReferenceEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3658,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-127.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 15700,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Visitors/SarifCurrentToVersionOneVisitorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3284,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReportingDescriptorRelationship.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6097,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ISarifNodeVersionOneVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 837,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-127.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 15700,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-055.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 17055,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-140.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 18436,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AM_BranchAndSetValue.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4001,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/PlugInDriverCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 558,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ArtifactLocationEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3815,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS372959.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 13648,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-048.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2924,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/SarifNodeKind.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 10474,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/MakeUrisAbsoluteVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1642,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-060.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 10073,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/TSLintConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7322,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-106.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1636,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Result.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 499,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Visitors/InsertOptionalDataVisitorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 18488,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/SarifVersionVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 499,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6386Example2.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2391,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/AndroidStudio_issueLog7_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2678,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifDeferredSample/Program.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3997,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/RuntimeConditions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2397,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Result.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 28682,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-054.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 16489,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-198.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7332,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/RelevantKeyEvents2.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3145,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/FormattedRuleMessageVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4679,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Standardc6282.cxx.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 592,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/Fortify/bannedAPIs_m0.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 240495,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/HashVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3917,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6001Example3.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3606,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-024.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1188,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-121.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6299,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/FxCop/FxCop_issueLog1_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 300797,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Readers/UriConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4703,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/RuleVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5934,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-110-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 47034,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/MediumLog.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9800,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-008.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3396,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-140.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 18436,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/ConverterResources.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 14759,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-171.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5006,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/AttachmentEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5660,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-082.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 16771,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-132.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4683,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-043.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 33426,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AM_AliasAndSetValue.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2695,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/IPropertyBagHolder.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 867,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AN_InOptAnnotations.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2115,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6059Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2989,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AM_BranchAndSetValue.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4001,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/StringReference.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1708,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-074.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5484,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/PageOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2472,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/FileStreamExtensionMethods.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1901,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/bin/Debug/System.Collections.Immutable.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 426749,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/PylintObjectModel/PylintLogReader.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 692,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/ReportingDescriptor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1415,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Tool.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2473,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/TFS378661.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9283,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-058.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2572,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/ClangAnalyzer_issueLog1_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 110475,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AM_AliasAndSetValue.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2695,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-155.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4279,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/SkimmerBaseTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1260,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-205.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3826,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6385output2.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1741,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6386Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2591,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-079.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 14814,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-100.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 13800,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-186.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5456,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/minimalIssueWithoutPackageOrHintElement.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 664,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/TestAnalysisContext.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 855,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/MessageUtilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2061,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/LongMacro.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2127,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Readers/DeferredCollectionsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6566,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-152.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1872,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-192.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 129666,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/OrderSensitiveValueComparisonList.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2048,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Region.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 820,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/ResultMatching/ExactMatchers/IdenticalResultMatcherTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9485,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/FileRegionsCacheTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 17155,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Log/SarifLogActions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 446,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-039.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5748,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-094.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8302,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/RandomSarifLogGenerator.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5703,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/Fortify/bannedAPIs_m1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 240868,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/BuiltInConverterFactory.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2538,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/DriverExtensionMethods.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 850,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-137.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2342,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-167.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1950,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AN_Basic_C6387.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 10959,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Readers/PropertyBagConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4642,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/ExitReason.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 481,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/Utilities.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4469,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/SparseReaderDispatchTable.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2976,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-156.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8286,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/StackFrame.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6458,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifDeferredSample/bin/Debug/SarifDeferredSample.exe.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 18072,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/FileChangeVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3131,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6385Example3.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2836,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6385output3.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2051,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-042.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 24232,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-083.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1495,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-131.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1692,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/Fortify/bannedAPIs_m1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 240868,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/LogicalLocationKind.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 882,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/ExceptionStrings.Designer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8194,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/RebaseUriVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2542,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/AndroidStudioProblemTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 22101,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/RunVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 12604,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/FortifyFprStringsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4458,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Visitors/RemapIndicesVisitorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7584,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-141.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5552,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/ResultMatchingOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1445,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ReplacementVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2105,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/WebRequestEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4855,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-057.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9773,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/LongConditionsoutput1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4621,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-078.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 15960,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/extraComment.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 743,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/CppCheckStringsTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1260,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReplacementEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3424,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-016-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 20835,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/twoIssues.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1315,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/AbsoluteUriCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3042,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Baseline/ResultMatching/HeuristicMatchers/PartialFingerprintResultMatcherTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3017,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-010.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1313,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-089.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 43960,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Writers/PrereleaseCompatibilityTransformerTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4861,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Map/LongArrayDeltaConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1904,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/AndroidStudioStrings.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3128,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/DefaultBaselineExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 509,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/AnnotatedCodeLocationVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 15573,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/ResourceExtractor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2280,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AB_IrrelevantSwitch.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3427,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-003.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1801,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Generic/GenericMappingAction.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 881,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/FileDataTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 11305,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Readers/ResultDiffingVisitorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1651,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Notification.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 408,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-095.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7076,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/FileNumberCoverage.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2669,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/TFS375867.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 23692,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/Sdk/SarifLoggerTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 900,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/singleIssueWithHints.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 666,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-013.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7579,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/ClangAnalyzer/DictionaryDataTypes.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1235,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Visitors/UpdateIndicesFromLegacyDataVisitor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3587,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Core/TagsCollectionVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5642,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/TestExportConfigurationCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 455,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/Standardc6316output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 507,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-136.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8778,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/CsvWriter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6310,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-073.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8497,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-146.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 10098,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-080.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 12166,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-063.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2547,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/AndroidStudio_issueLog3_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 676,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS373273.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4091,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-168.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2481,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReportingDescriptor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 14381,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/PylintConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5593,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/ClangAnalyzer/DivByZero.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 15943,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-173.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3105,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Driver/FileSpecifierTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3843,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-084.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4084,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-130.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5257,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/DataStructures/ExtractedResult.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 707,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AB_IrrelevantLoop.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4211,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/bld/bin/AnyCPU_Debug/Sarif.Multitool/netcoreapp2.0/DotnetToolSettings.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 204,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Address.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9240,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-138.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1479,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReportingConfigurationEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4742,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-157.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3002,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AM_AliasAndMaybeZero.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2106,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/SemanticVersion.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 15093,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/DictionaryMergeBehaviors.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 661,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/RegionEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5123,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/fileEmpty.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 609,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Standardc6316.cxx.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 614,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/SarifToCsv/bin/Debug/SarifToCsv.exe.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 404,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/FileLocationTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2702,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Writers/MimeType.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9211,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/ConvertToSchemaUriTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 788,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-203.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2912,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-017.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8064,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Readers/IsSuppressedInSourceConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4405,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/RunAutomationDetailsEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3947,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/GraphTraversal.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8408,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-065.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6903,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/GraphTraversalEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6425,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/problemClassSeverityMissing.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 693,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/AndroidStudio_issueLog7_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2678,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-022.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 17426,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-185.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2657,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Map/JsonMapNode.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8858,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/ToolVersionOneEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4747,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-088.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8795,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/CodeFlowEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4190,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/IResultLogWriter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5785,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Core/LocationTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2501,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/EnvironmentVariables.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1368,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-045.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1800,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/AndroidStudio/singleIssueWithEmptyHints.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 655,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-002.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2407,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/DefaultBaseline/StackBaselineEquals.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1173,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-038-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 6201,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS375867.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 18270,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/extraComment.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 743,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/PageCommand.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8429,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-037.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5219,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-016-amd64.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 20835,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ArtifactChange.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5347,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Graph.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6235,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6305output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1400,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/bin/Debug/Newtonsoft.Json.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 674087,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/DataStructures/MatchedResults.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7134,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/AM_BranchAndMaybeZero.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5571,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/PathExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 7587,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-188.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4914,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Samples/Sarif.Sdk.Sample/packages.config",
            "uriBaseId": "SRCROOT"
          },
          "length": 1389,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Standardc6259.cxx.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 603,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/FxCop/FxCopExceptions.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7800,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/TFS372959.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 16872,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AM_AliasAndMaybeZero.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1616,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/FxCop/FxCopReportOneMessage.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 927,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-102.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4041,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/VersionConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1283,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-170.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1809,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6386Example2.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2391,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AA_RememberOldAlias.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8786,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/Sdk/ExportRulesMetadataCommandBase.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5688,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/VersionOne/Autogenerated/FileChangeVersionOne.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5212,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-072.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5231,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/StringSet.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 709,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-117.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8277,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-092.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 34974,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Readers/SerializedPropertyInfoConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1426,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-016.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9154,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-059.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9104,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Visitors/RebaseUriVisitorTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 12312,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Processors/Log/SarifLogActionTuple.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2047,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-139.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4852,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/ToolFormatTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1890,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6385Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 4364,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Program.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1874,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-172.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1716,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/C6001Example3.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3606,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif.Converters/FortifyFprConverterTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 1597,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-122.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5382,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/LocationRelationshipEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4376,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/Notification.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 9216,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Baseline/ResultMatching/HeuristicMatchers/PartialFingerprintResultMatcher.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3187,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ArtifactEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 6746,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-001.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 8564,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-087.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 24100,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/DisposableEnumerableView.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2538,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6385output1.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3009,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Writers/MimeTypeTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2279,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/AB_IrrelevantSwitch.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3427,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/JTokenExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 569,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-194.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1607,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-023.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7510,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/OptionallyEmittedData.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3944,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-066.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 21778,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/ClangAnalyzerConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 18260,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-071.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 18883,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Multitool/Rules/SARIF1003.UrisMustBeValid.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3794,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-150.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3903,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/FxCop/SarifSdkTest.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 794736,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/TestAnalyzeOptions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 813,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/RunAutomationDetails.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5944,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/C6011Example.cpp.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1590,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-193.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2464,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Processors/Log/SarifLogExtensionTests.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5553,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Autogenerated/ReportingDescriptorEqualityComparer.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 11315,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/TypedPropertiesDictionary.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2871,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/Invocation.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3216,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-101.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 9339,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-038.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3835,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.UnitTests.Sarif/Processors/GenericTests/TestMappingProcessor.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 467,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-123.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3262,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-166.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1245,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/FortifyFprStrings.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 11556,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/AndroidStudio_issueLog2_raw.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 580,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif/Core/SerializedPropertyInfo.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4417,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-116.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2610,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/C6001output3.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 2546,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/AndroidStudio/singleIssueWithEmptyHints.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 655,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Converters/TSLintConverter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4793,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/bld/bin/AnyCPU_Debug/Test.UnitTests.Sarif.Multitool/netcoreapp2.0/DotnetToolSettings.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 204,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-093.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 1843,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/FixedTFS378661.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7077,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v2/ConverterTestData/PREfast/Expected-050.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 7879,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Sarif.Driver/XmlWriterExtensions.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 4708,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.Utilities.Sarif/ResultLogObjectWriter.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 2046,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/ConverterTestData/PREfast/src/ExpectedOutput/AB_IrrelevantBranch.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 5673,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "sw/vsts-agent/VSTSBuilds/2/s/src/Test.FunctionalTests.Sarif/v1/ConverterTestData/PREfast/Expected-201.xml",
            "uriBaseId": "SRCROOT"
          },
          "length": 3291,
          "mimeType": "text/xml",
          "encoding": "windows-1252"
        }
      ],
      "automationDetails": {
        "id": "0000/"
      },
      "columnKind": "utf16CodeUnits",
      "threadFlowLocations": [
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 55,
                "snippet": {
                  "text": "            expandedSpecifier = Environment.ExpandEnvironmentVariables(_specifier);"
                }
              },
              "contextRegion": {
                "startLine": 52,
                "endLine": 58,
                "snippet": {
                  "text": "            _files = new List<string>();\n            _directories = new List<string>();\n\n            expandedSpecifier = Environment.ExpandEnvironmentVariables(_specifier);\n\n            string filter = Path.GetFileName(expandedSpecifier);\n            string directory = Path.GetDirectoryName(expandedSpecifier);\n"
                }
              }
            },
            "message": {
              "text": "ExpandEnvironmentVariables(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 55,
                "snippet": {
                  "text": "            expandedSpecifier = Environment.ExpandEnvironmentVariables(_specifier);"
                }
              },
              "contextRegion": {
                "startLine": 52,
                "endLine": 58,
                "snippet": {
                  "text": "            _files = new List<string>();\n            _directories = new List<string>();\n\n            expandedSpecifier = Environment.ExpandEnvironmentVariables(_specifier);\n\n            string filter = Path.GetFileName(expandedSpecifier);\n            string directory = Path.GetDirectoryName(expandedSpecifier);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to expandedSpecifier"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 58,
                "snippet": {
                  "text": "            string directory = Path.GetDirectoryName(expandedSpecifier);"
                }
              },
              "contextRegion": {
                "startLine": 55,
                "endLine": 61,
                "snippet": {
                  "text": "            expandedSpecifier = Environment.ExpandEnvironmentVariables(_specifier);\n\n            string filter = Path.GetFileName(expandedSpecifier);\n            string directory = Path.GetDirectoryName(expandedSpecifier);\n\n            if (directory.Length == 0)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetDirectoryName(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 58,
                "snippet": {
                  "text": "            string directory = Path.GetDirectoryName(expandedSpecifier);"
                }
              },
              "contextRegion": {
                "startLine": 55,
                "endLine": 61,
                "snippet": {
                  "text": "            expandedSpecifier = Environment.ExpandEnvironmentVariables(_specifier);\n\n            string filter = Path.GetFileName(expandedSpecifier);\n            string directory = Path.GetDirectoryName(expandedSpecifier);\n\n            if (directory.Length == 0)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to directory"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 65,
                "snippet": {
                  "text": "            AddFilesFromDirectory(directory, filter);"
                }
              },
              "contextRegion": {
                "startLine": 62,
                "endLine": 68,
                "snippet": {
                  "text": "                directory = @\".\\\";\n            }\n\n            AddFilesFromDirectory(directory, filter);\n        }\n\n        private void AddFilesFromDirectory(string dir, string filter)\n"
                }
              }
            },
            "message": {
              "text": "AddFilesFromDirectory(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 81,
                "snippet": {
                  "text": "                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))"
                }
              },
              "contextRegion": {
                "startLine": 78,
                "endLine": 84,
                "snippet": {
                  "text": "                {\n                    try\n                    {\n                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))\n                        {\n                            AddFilesFromDirectory(subdir, filter);\n                        }\n"
                }
              }
            },
            "message": {
              "text": "GetDirectoriesInDirectory(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 81,
                "snippet": {
                  "text": "                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))"
                }
              },
              "contextRegion": {
                "startLine": 78,
                "endLine": 84,
                "snippet": {
                  "text": "                {\n                    try\n                    {\n                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))\n                        {\n                            AddFilesFromDirectory(subdir, filter);\n                        }\n"
                }
              }
            },
            "message": {
              "text": "GetDirectoriesInDirectory(0 : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 478
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "            return Directory.GetDirectories(path);"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                }
              }
            },
            "message": {
              "text": "GetDirectories(0 : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 478
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "            return Directory.GetDirectories(path);"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "        /// </returns>\n        public IEnumerable<string> GetDirectoriesInDirectory(string path)\n        {\n            return Directory.GetDirectories(path);\n        }\n\n        /// <summary>\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 81,
                "snippet": {
                  "text": "                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))"
                }
              },
              "contextRegion": {
                "startLine": 78,
                "endLine": 84,
                "snippet": {
                  "text": "                {\n                    try\n                    {\n                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))\n                        {\n                            AddFilesFromDirectory(subdir, filter);\n                        }\n"
                }
              }
            },
            "message": {
              "text": "GetEnumerator(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 81,
                "snippet": {
                  "text": "                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))"
                }
              },
              "contextRegion": {
                "startLine": 78,
                "endLine": 84,
                "snippet": {
                  "text": "                {\n                    try\n                    {\n                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))\n                        {\n                            AddFilesFromDirectory(subdir, filter);\n                        }\n"
                }
              }
            },
            "message": {
              "text": "get_Current(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 81,
                "snippet": {
                  "text": "                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))"
                }
              },
              "contextRegion": {
                "startLine": 78,
                "endLine": 84,
                "snippet": {
                  "text": "                {\n                    try\n                    {\n                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))\n                        {\n                            AddFilesFromDirectory(subdir, filter);\n                        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to subdir"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "                            AddFilesFromDirectory(subdir, filter);"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "                    {\n                        foreach (string subdir in _fileSystem.GetDirectoriesInDirectory(dir))\n                        {\n                            AddFilesFromDirectory(subdir, filter);\n                        }\n                    }\n                    catch (UnauthorizedAccessException)\n"
                }
              }
            },
            "message": {
              "text": "AddFilesFromDirectory(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 824
              },
              "region": {
                "startLine": 84,
                "snippet": {
                  "text": "                Console.Error.WriteLine(ex.ToString());"
                }
              },
              "contextRegion": {
                "startLine": 81,
                "endLine": 87,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 824
              },
              "region": {
                "startLine": 84,
                "snippet": {
                  "text": "                Console.Error.WriteLine(ex.ToString());"
                }
              },
              "contextRegion": {
                "startLine": 81,
                "endLine": 87,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 644
              },
              "region": {
                "startLine": 74,
                "snippet": {
                  "text": "                Console.WriteLine($\"Error: {ex}\");"
                }
              },
              "contextRegion": {
                "startLine": 71,
                "endLine": 77,
                "snippet": {
                  "text": "            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 644
              },
              "region": {
                "startLine": 74,
                "snippet": {
                  "text": "                Console.WriteLine($\"Error: {ex}\");"
                }
              },
              "contextRegion": {
                "startLine": 71,
                "endLine": 77,
                "snippet": {
                  "text": "            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Format(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 645,
                "snippet": {
                  "text": "                                stream = new FileStream(uri.LocalPath, FileMode.Open);"
                }
              },
              "contextRegion": {
                "startLine": 642,
                "endLine": 648,
                "snippet": {
                  "text": "\n                            try\n                            {\n                                stream = new FileStream(uri.LocalPath, FileMode.Open);\n                            }\n                            catch (FileNotFoundException ex)\n                            {\n"
                }
              }
            },
            "message": {
              "text": "FileStream(this)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 645,
                "snippet": {
                  "text": "                                stream = new FileStream(uri.LocalPath, FileMode.Open);"
                }
              },
              "contextRegion": {
                "startLine": 642,
                "endLine": 648,
                "snippet": {
                  "text": "\n                            try\n                            {\n                                stream = new FileStream(uri.LocalPath, FileMode.Open);\n                            }\n                            catch (FileNotFoundException ex)\n                            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to stream"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 683,
                "snippet": {
                  "text": "            return stream;"
                }
              },
              "contextRegion": {
                "startLine": 680,
                "endLine": 686,
                "snippet": {
                  "text": "                // TODO: add a warning to the list\n            }\n\n            return stream;\n        }\n\n        private StreamReader GetFileStreamReader(Uri uri, out Encoding encoding)\n"
                }
              }
            },
            "message": {
              "text": "Return stream"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 690,
                "snippet": {
                  "text": "            Stream contentStream = GetContentStream(uri, out encoding);"
                }
              },
              "contextRegion": {
                "startLine": 687,
                "endLine": 693,
                "snippet": {
                  "text": "        {\n            StreamReader reader = null;\n\n            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n"
                }
              }
            },
            "message": {
              "text": "GetContentStream(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 690,
                "snippet": {
                  "text": "            Stream contentStream = GetContentStream(uri, out encoding);"
                }
              },
              "contextRegion": {
                "startLine": 687,
                "endLine": 693,
                "snippet": {
                  "text": "        {\n            StreamReader reader = null;\n\n            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to contentStream"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 693,
                "snippet": {
                  "text": "                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);"
                }
              },
              "contextRegion": {
                "startLine": 690,
                "endLine": 696,
                "snippet": {
                  "text": "            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n            }\n\n            return reader;\n"
                }
              }
            },
            "message": {
              "text": "StreamReader(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 693,
                "snippet": {
                  "text": "                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);"
                }
              },
              "contextRegion": {
                "startLine": 690,
                "endLine": 696,
                "snippet": {
                  "text": "            Stream contentStream = GetContentStream(uri, out encoding);\n            if (contentStream != null && encoding != null)\n            {\n                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n            }\n\n            return reader;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to reader"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 696,
                "snippet": {
                  "text": "            return reader;"
                }
              },
              "contextRegion": {
                "startLine": 693,
                "endLine": 699,
                "snippet": {
                  "text": "                reader = new StreamReader(contentStream, encoding, detectEncodingFromByteOrderMarks: false);\n            }\n\n            return reader;\n        }\n\n        internal ReplacementVersionOne CreateReplacementVersionOne(Replacement v2Replacement, Encoding encoding)\n"
                }
              }
            },
            "message": {
              "text": "Return reader"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 532,
                "snippet": {
                  "text": "            using (StreamReader reader = GetFileStreamReader(uri, out Encoding encoding))"
                }
              },
              "contextRegion": {
                "startLine": 529,
                "endLine": 535,
                "snippet": {
                  "text": "        {\n            int byteLength = 0;\n\n            using (StreamReader reader = GetFileStreamReader(uri, out Encoding encoding))\n            {\n                if (reader != null)\n                {\n"
                }
              }
            },
            "message": {
              "text": "GetFileStreamReader(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 532,
                "snippet": {
                  "text": "            using (StreamReader reader = GetFileStreamReader(uri, out Encoding encoding))"
                }
              },
              "contextRegion": {
                "startLine": 529,
                "endLine": 535,
                "snippet": {
                  "text": "        {\n            int byteLength = 0;\n\n            using (StreamReader reader = GetFileStreamReader(uri, out Encoding encoding))\n            {\n                if (reader != null)\n                {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to reader"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 552,
                "snippet": {
                  "text": "                                Stream stream = reader.BaseStream;"
                }
              },
              "contextRegion": {
                "startLine": 549,
                "endLine": 555,
                "snippet": {
                  "text": "                            if (sourceLine.Length > startColumn)\n                            {\n                                // Since we read past startColumn, we need to back up using the base stream\n                                Stream stream = reader.BaseStream;\n                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));\n                            }\n\n"
                }
              }
            },
            "message": {
              "text": "get_BaseStream(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 552,
                "snippet": {
                  "text": "                                Stream stream = reader.BaseStream;"
                }
              },
              "contextRegion": {
                "startLine": 549,
                "endLine": 555,
                "snippet": {
                  "text": "                            if (sourceLine.Length > startColumn)\n                            {\n                                // Since we read past startColumn, we need to back up using the base stream\n                                Stream stream = reader.BaseStream;\n                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));\n                            }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to stream"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 553,
                "snippet": {
                  "text": "                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));"
                }
              },
              "contextRegion": {
                "startLine": 550,
                "endLine": 556,
                "snippet": {
                  "text": "                            {\n                                // Since we read past startColumn, we need to back up using the base stream\n                                Stream stream = reader.BaseStream;\n                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));\n                            }\n\n                            // Read the next charLength characters\n"
                }
              }
            },
            "message": {
              "text": "get_Position(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 405
              },
              "region": {
                "startLine": 553,
                "snippet": {
                  "text": "                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));"
                }
              },
              "contextRegion": {
                "startLine": 550,
                "endLine": 556,
                "snippet": {
                  "text": "                            {\n                                // Since we read past startColumn, we need to back up using the base stream\n                                Stream stream = reader.BaseStream;\n                                stream.Position -= encoding.GetByteCount(sourceLine.Substring(startColumn - 1));\n                            }\n\n                            // Read the next charLength characters\n"
                }
              }
            },
            "message": {
              "text": "set_Position(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 311
              },
              "region": {
                "startLine": 69,
                "snippet": {
                  "text": "                while (!string.IsNullOrEmpty(line = reader.ReadLine()))"
                }
              },
              "contextRegion": {
                "startLine": 66,
                "endLine": 72,
                "snippet": {
                  "text": "                int nestingLevel = 0;\n                string line;\n\n                while (!string.IsNullOrEmpty(line = reader.ReadLine()))\n                {\n                    ProcessLine(line, ref nestingLevel, result);\n                }\n"
                }
              }
            },
            "message": {
              "text": "ReadLine(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 311
              },
              "region": {
                "startLine": 69,
                "snippet": {
                  "text": "                while (!string.IsNullOrEmpty(line = reader.ReadLine()))"
                }
              },
              "contextRegion": {
                "startLine": 66,
                "endLine": 72,
                "snippet": {
                  "text": "                int nestingLevel = 0;\n                string line;\n\n                while (!string.IsNullOrEmpty(line = reader.ReadLine()))\n                {\n                    ProcessLine(line, ref nestingLevel, result);\n                }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to line"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 311
              },
              "region": {
                "startLine": 71,
                "snippet": {
                  "text": "                    ProcessLine(line, ref nestingLevel, result);"
                }
              },
              "contextRegion": {
                "startLine": 68,
                "endLine": 74,
                "snippet": {
                  "text": "\n                while (!string.IsNullOrEmpty(line = reader.ReadLine()))\n                {\n                    ProcessLine(line, ref nestingLevel, result);\n                }\n            }\n\n"
                }
              }
            },
            "message": {
              "text": "ProcessLine(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 311
              },
              "region": {
                "startLine": 99,
                "snippet": {
                  "text": "            string[] tokens = logFileLine.Split(' ');"
                }
              },
              "contextRegion": {
                "startLine": 96,
                "endLine": 102,
                "snippet": {
                  "text": "\n            int step;\n\n            string[] tokens = logFileLine.Split(' ');\n\n            if (int.TryParse(tokens[STEP], out step))\n            {\n"
                }
              }
            },
            "message": {
              "text": "Split(this : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 311
              },
              "region": {
                "startLine": 99,
                "snippet": {
                  "text": "            string[] tokens = logFileLine.Split(' ');"
                }
              },
              "contextRegion": {
                "startLine": 96,
                "endLine": 102,
                "snippet": {
                  "text": "\n            int step;\n\n            string[] tokens = logFileLine.Split(' ');\n\n            if (int.TryParse(tokens[STEP], out step))\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to tokens"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 311
              },
              "region": {
                "startLine": 107,
                "snippet": {
                  "text": "                string uriText = tokens[URI].Trim('\"');"
                }
              },
              "contextRegion": {
                "startLine": 104,
                "endLine": 110,
                "snippet": {
                  "text": "                // this is a general step.\n\n                Uri uri = null;\n                string uriText = tokens[URI].Trim('\"');\n\n                if (!uriText.Equals(\"?\", StringComparison.Ordinal))\n                {\n"
                }
              }
            },
            "message": {
              "text": "Trim(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 311
              },
              "region": {
                "startLine": 107,
                "snippet": {
                  "text": "                string uriText = tokens[URI].Trim('\"');"
                }
              },
              "contextRegion": {
                "startLine": 104,
                "endLine": 110,
                "snippet": {
                  "text": "                // this is a general step.\n\n                Uri uri = null;\n                string uriText = tokens[URI].Trim('\"');\n\n                if (!uriText.Equals(\"?\", StringComparison.Ordinal))\n                {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to uriText"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 606,
                "snippet": {
                  "text": "                    Errors.LogUnhandledRuleExceptionAssessingTargetApplicability(disabledSkimmers, context, ex);"
                }
              },
              "contextRegion": {
                "startLine": 603,
                "endLine": 609,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    Errors.LogUnhandledRuleExceptionAssessingTargetApplicability(disabledSkimmers, context, ex);\n                    continue;\n                }\n                finally\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 606,
                "snippet": {
                  "text": "                    Errors.LogUnhandledRuleExceptionAssessingTargetApplicability(disabledSkimmers, context, ex);"
                }
              },
              "contextRegion": {
                "startLine": 603,
                "endLine": 609,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    Errors.LogUnhandledRuleExceptionAssessingTargetApplicability(disabledSkimmers, context, ex);\n                    continue;\n                }\n                finally\n"
                }
              }
            },
            "message": {
              "text": "LogUnhandledRuleExceptionAssessingTargetApplicability(2)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 364,
                "snippet": {
                  "text": "                    context.Rule.Id,"
                }
              },
              "contextRegion": {
                "startLine": 361,
                "endLine": 367,
                "snippet": {
                  "text": "                CreateNotification(\n                    context.TargetUri,\n                    ERR998_ExceptionInCanAnalyze,\n                    context.Rule.Id,\n                    FailureLevel.Error,\n                    exception,\n                    true,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(4 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 472,
                "snippet": {
                  "text": "            string exceptionMessage = exception?.Message;"
                }
              },
              "contextRegion": {
                "startLine": 469,
                "endLine": 475,
                "snippet": {
                  "text": "\n            string message = string.Format(CultureInfo.CurrentCulture, messageFormat, args);\n\n            string exceptionMessage = exception?.Message;\n            if (!string.IsNullOrEmpty(exceptionMessage))\n            {\n                // {0} ('{1}')\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 472,
                "snippet": {
                  "text": "            string exceptionMessage = exception?.Message;"
                }
              },
              "contextRegion": {
                "startLine": 469,
                "endLine": 475,
                "snippet": {
                  "text": "\n            string message = string.Format(CultureInfo.CurrentCulture, messageFormat, args);\n\n            string exceptionMessage = exception?.Message;\n            if (!string.IsNullOrEmpty(exceptionMessage))\n            {\n                // {0} ('{1}')\n"
                }
              }
            },
            "message": {
              "text": "Assignment to exceptionMessage"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 476,
                "snippet": {
                  "text": "                message = string.Format(CultureInfo.InvariantCulture, SdkResources.NotificationWithExceptionMessage, message, exceptionMessage);"
                }
              },
              "contextRegion": {
                "startLine": 473,
                "endLine": 479,
                "snippet": {
                  "text": "            if (!string.IsNullOrEmpty(exceptionMessage))\n            {\n                // {0} ('{1}')\n                message = string.Format(CultureInfo.InvariantCulture, SdkResources.NotificationWithExceptionMessage, message, exceptionMessage);\n            }\n\n            var exceptionData = exception != null && persistExceptionStack\n"
                }
              }
            },
            "message": {
              "text": "Format(3 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 476,
                "snippet": {
                  "text": "                message = string.Format(CultureInfo.InvariantCulture, SdkResources.NotificationWithExceptionMessage, message, exceptionMessage);"
                }
              },
              "contextRegion": {
                "startLine": 473,
                "endLine": 479,
                "snippet": {
                  "text": "            if (!string.IsNullOrEmpty(exceptionMessage))\n            {\n                // {0} ('{1}')\n                message = string.Format(CultureInfo.InvariantCulture, SdkResources.NotificationWithExceptionMessage, message, exceptionMessage);\n            }\n\n            var exceptionData = exception != null && persistExceptionStack\n"
                }
              }
            },
            "message": {
              "text": "Assignment to message"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 503,
                "snippet": {
                  "text": "                Message = new Message { Text = message },"
                }
              },
              "contextRegion": {
                "startLine": 500,
                "endLine": 506,
                "snippet": {
                  "text": "                    }\n                },\n                Level = level,\n                Message = new Message { Text = message },\n                Exception = exceptionData\n            };\n\n"
                }
              }
            },
            "message": {
              "text": "set_Text(0 : this.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 394
              },
              "region": {
                "startLine": 40,
                "snippet": {
                  "text": "        public string Text { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 37,
                "endLine": 43,
                "snippet": {
                  "text": "        /// A plain text message string.\n        /// </summary>\n        [DataMember(Name = \"text\", IsRequired = false, EmitDefaultValue = false)]\n        public string Text { get; set; }\n\n        /// <summary>\n        /// A Markdown message string.\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.Text"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 503,
                "snippet": {
                  "text": "                Message = new Message { Text = message },"
                }
              },
              "contextRegion": {
                "startLine": 500,
                "endLine": 506,
                "snippet": {
                  "text": "                    }\n                },\n                Level = level,\n                Message = new Message { Text = message },\n                Exception = exceptionData\n            };\n\n"
                }
              }
            },
            "message": {
              "text": "set_Message(0 : this.Message)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1109
              },
              "region": {
                "startLine": 48,
                "snippet": {
                  "text": "        public Message Message { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 45,
                "endLine": 51,
                "snippet": {
                  "text": "        /// A message that describes the condition that was encountered.\n        /// </summary>\n        [DataMember(Name = \"message\", IsRequired = true)]\n        public Message Message { get; set; }\n\n        /// <summary>\n        /// A value specifying the severity level of the notification.\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.Message"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 493,
                "snippet": {
                  "text": "            var notification = new Notification"
                }
              },
              "contextRegion": {
                "startLine": 490,
                "endLine": 496,
                "snippet": {
                  "text": "                }\n                : null;\n\n            var notification = new Notification\n            {\n                Locations = new List<Location>\n                {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to notification"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 523,
                "snippet": {
                  "text": "            return notification;"
                }
              },
              "contextRegion": {
                "startLine": 520,
                "endLine": 526,
                "snippet": {
                  "text": "                };\n            }\n\n            return notification;\n        }\n\n        private static string GetMessageFormatResourceForNotification(string notificationId)\n"
                }
              }
            },
            "message": {
              "text": "Return notification"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 361,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 358,
                "endLine": 364,
                "snippet": {
                  "text": "            // from a problem related to parsing image metadata and not specific to \n            // the rule, however.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR998_ExceptionInCanAnalyze,\n                    context.Rule.Id,\n"
                }
              }
            },
            "message": {
              "text": "LogToolNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 244,
                "snippet": {
                  "text": "            WriteToConsole(notification);"
                }
              },
              "contextRegion": {
                "startLine": 241,
                "endLine": 247,
                "snippet": {
                  "text": "\n        public void LogToolNotification(Notification notification)\n        {\n            WriteToConsole(notification);\n        }\n\n        public void LogConfigurationNotification(Notification notification)\n"
                }
              }
            },
            "message": {
              "text": "WriteToConsole(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 260,
                "snippet": {
                  "text": "                        Console.WriteLine(FormatNotificationMessage(notification));"
                }
              },
              "contextRegion": {
                "startLine": 257,
                "endLine": 263,
                "snippet": {
                  "text": "                case FailureLevel.Note:\n                    if (Verbose)\n                    {\n                        Console.WriteLine(FormatNotificationMessage(notification));\n                    }\n                    break;\n\n"
                }
              }
            },
            "message": {
              "text": "FormatNotificationMessage(0.Message.Text : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 313,
                "snippet": {
                  "text": "            sb.Append(notification.Message.Text);"
                }
              },
              "contextRegion": {
                "startLine": 310,
                "endLine": 316,
                "snippet": {
                  "text": "                sb.Append(notification.AssociatedRule.Id + \" : \");\n            }\n\n            sb.Append(notification.Message.Text);\n\n            return sb.ToString();\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this.Message : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1109
              },
              "region": {
                "startLine": 48,
                "snippet": {
                  "text": "        public Message Message { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 45,
                "endLine": 51,
                "snippet": {
                  "text": "        /// A message that describes the condition that was encountered.\n        /// </summary>\n        [DataMember(Name = \"message\", IsRequired = true)]\n        public Message Message { get; set; }\n\n        /// <summary>\n        /// A value specifying the severity level of the notification.\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 313,
                "snippet": {
                  "text": "            sb.Append(notification.Message.Text);"
                }
              },
              "contextRegion": {
                "startLine": 310,
                "endLine": 316,
                "snippet": {
                  "text": "                sb.Append(notification.AssociatedRule.Id + \" : \");\n            }\n\n            sb.Append(notification.Message.Text);\n\n            return sb.ToString();\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Text(this.Text : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 394
              },
              "region": {
                "startLine": 40,
                "snippet": {
                  "text": "        public string Text { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 37,
                "endLine": 43,
                "snippet": {
                  "text": "        /// A plain text message string.\n        /// </summary>\n        [DataMember(Name = \"text\", IsRequired = false, EmitDefaultValue = false)]\n        public string Text { get; set; }\n\n        /// <summary>\n        /// A Markdown message string.\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 313,
                "snippet": {
                  "text": "            sb.Append(notification.Message.Text);"
                }
              },
              "contextRegion": {
                "startLine": 310,
                "endLine": 316,
                "snippet": {
                  "text": "                sb.Append(notification.AssociatedRule.Id + \" : \");\n            }\n\n            sb.Append(notification.Message.Text);\n\n            return sb.ToString();\n        }\n"
                }
              }
            },
            "message": {
              "text": "Append(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 315,
                "snippet": {
                  "text": "            return sb.ToString();"
                }
              },
              "contextRegion": {
                "startLine": 312,
                "endLine": 318,
                "snippet": {
                  "text": "\n            sb.Append(notification.Message.Text);\n\n            return sb.ToString();\n        }\n    }\n}\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 315,
                "snippet": {
                  "text": "            return sb.ToString();"
                }
              },
              "contextRegion": {
                "startLine": 312,
                "endLine": 318,
                "snippet": {
                  "text": "\n            sb.Append(notification.Message.Text);\n\n            return sb.ToString();\n        }\n    }\n}\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 364
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "                logger.LogToolNotification(notification);"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "        {\n            foreach (IAnalysisLogger logger in Loggers)\n            {\n                logger.LogToolNotification(notification);\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "LogToolNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 267,
                "snippet": {
                  "text": "                    Console.WriteLine(FormatNotificationMessage(notification));"
                }
              },
              "contextRegion": {
                "startLine": 264,
                "endLine": 270,
                "snippet": {
                  "text": "                // These notification types are always emitted.\n                case FailureLevel.Error:\n                case FailureLevel.Warning:\n                    Console.WriteLine(FormatNotificationMessage(notification));\n                    break;\n\n                default:\n"
                }
              }
            },
            "message": {
              "text": "FormatNotificationMessage(0.Message.Text : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 70,
                "snippet": {
                  "text": "            if (_fileSystem.DirectoryExists(dir))"
                }
              },
              "contextRegion": {
                "startLine": 67,
                "endLine": 73,
                "snippet": {
                  "text": "\n        private void AddFilesFromDirectory(string dir, string filter)\n        {\n            if (_fileSystem.DirectoryExists(dir))\n            {\n                foreach (string file in _fileSystem.GetFilesInDirectory(dir, filter))\n                {\n"
                }
              }
            },
            "message": {
              "text": "DirectoryExists(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 644
              },
              "region": {
                "startLine": 26,
                "endLine": 76,
                "snippet": {
                  "text": "        public static void Main(string[] args)\r\n        {\r\n            if (args.Length < 2)\r\n            {\r\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\r\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\r\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\r\n\r\n                return;\r\n            }\r\n\r\n            try\r\n            {\r\n                string sarifFilePath = args[0];\r\n                string csvFilePath = args[1];\r\n                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\r\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\r\n\r\n                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");\r\n                Stopwatch w = Stopwatch.StartNew();\r\n\r\n                JsonSerializer serializer = new JsonSerializer();\r\n                serializer.ContractResolver = new SarifDeferredContractResolver();\r\n\r\n                using (CsvWriter writer = new CsvWriter(csvFilePath))\r\n                {\r\n                    writer.SetColumns(columnNames);\r\n\r\n                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\r\n                    if (Directory.Exists(sarifFilePath))\r\n                    {\r\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\r\n                        {\r\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        ConvertSarifLog(serializer, sarifFilePath, writer, selectedWriters);\r\n                    }\r\n\r\n                    Console.WriteLine();\r\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\r\n                }\r\n            }\r\n            catch (Exception ex) when (!Debugger.IsAttached)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine($\"Error: {ex}\");\r\n            }\r\n        }"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 79,
                "snippet": {
                  "text": "    /// </summary>\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            if (args.Length < 2)\n            {\n                Console.WriteLine(\"Usage: SarifToCsv [sarifFileOrFolderPath] [csvFilePath] [columnNamesCommaDelimited?]\");\n                Console.WriteLine(\"  Column Names are configured in SarifToCsv.exe.config, in the 'ColumnNames' property.\");\n                Console.WriteLine($\"  Available Column Names:\\r\\n\\t{String.Join(\"\\r\\n\\t\", SarifCsvColumnWriters.SupportedColumns)}\");\n\n                return;\n            }\n\n            try\n            {\n                string sarifFilePath = args[0];\n                string csvFilePath = args[1];\n                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\n\n                Console.WriteLine($\"Converting \\\"{sarifFilePath}\\\" to \\\"{csvFilePath}\\\"...\");\n                Stopwatch w = Stopwatch.StartNew();\n\n                JsonSerializer serializer = new JsonSerializer();\n                serializer.ContractResolver = new SarifDeferredContractResolver();\n\n                using (CsvWriter writer = new CsvWriter(csvFilePath))\n                {\n                    writer.SetColumns(columnNames);\n\n                    // Read the Sarif file (or all Sarif files in the folder) and write to the CSV\n                    if (Directory.Exists(sarifFilePath))\n                    {\n                        foreach (string filePath in Directory.GetFiles(sarifFilePath, \"*.sarif\", SearchOption.AllDirectories))\n                        {\n                            ConvertSarifLog(serializer, filePath, writer, selectedWriters);\n                        }\n                    }\n                    else\n                    {\n                        ConvertSarifLog(serializer, sarifFilePath, writer, selectedWriters);\n                    }\n\n                    Console.WriteLine();\n                    Console.WriteLine($\"Done. Wrote {writer.RowCountWritten:n0} rows to \\\"{csvFilePath}\\\" in {w.Elapsed.TotalSeconds:n0}s.\");\n                }\n            }\n            catch (Exception ex) when (!Debugger.IsAttached)\n            {\n                Console.WriteLine();\n                Console.WriteLine($\"Error: {ex}\");\n            }\n        }\n\n        public static void ConvertSarifLog(JsonSerializer serializer, string sarifFilePath, CsvWriter writer, IEnumerable<Action<WriteContext>> selectedWriters)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Main(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 644
              },
              "region": {
                "startLine": 40,
                "snippet": {
                  "text": "                string csvFilePath = args[1];"
                }
              },
              "contextRegion": {
                "startLine": 37,
                "endLine": 43,
                "snippet": {
                  "text": "            try\n            {\n                string sarifFilePath = args[0];\n                string csvFilePath = args[1];\n                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to csvFilePath"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 644
              },
              "region": {
                "startLine": 50,
                "snippet": {
                  "text": "                using (CsvWriter writer = new CsvWriter(csvFilePath))"
                }
              },
              "contextRegion": {
                "startLine": 47,
                "endLine": 53,
                "snippet": {
                  "text": "                JsonSerializer serializer = new JsonSerializer();\n                serializer.ContractResolver = new SarifDeferredContractResolver();\n\n                using (CsvWriter writer = new CsvWriter(csvFilePath))\n                {\n                    writer.SetColumns(columnNames);\n\n"
                }
              }
            },
            "message": {
              "text": "CsvWriter(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1010
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "        public CsvWriter(string filePath, bool writeHeaderRow = true) : this(new FileStream(EnsureDirectoryCreated(filePath), FileMode.Create, FileAccess.Write, FileShare.Read), writeHeaderRow)"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            }\n        }\n\n        public CsvWriter(string filePath, bool writeHeaderRow = true) : this(new FileStream(EnsureDirectoryCreated(filePath), FileMode.Create, FileAccess.Write, FileShare.Read), writeHeaderRow)\n        { }\n\n        public CsvWriter(Stream stream, bool writeHeaderRow = true)\n"
                }
              }
            },
            "message": {
              "text": "EnsureDirectoryCreated(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1010
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "            string directoryPath = Path.GetDirectoryName(filePath);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "\n        private static string EnsureDirectoryCreated(string filePath)\n        {\n            string directoryPath = Path.GetDirectoryName(filePath);\n            if (!String.IsNullOrEmpty(directoryPath)) { Directory.CreateDirectory(directoryPath); }\n\n            return filePath;\n"
                }
              }
            },
            "message": {
              "text": "GetDirectoryName(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1010
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "            string directoryPath = Path.GetDirectoryName(filePath);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "\n        private static string EnsureDirectoryCreated(string filePath)\n        {\n            string directoryPath = Path.GetDirectoryName(filePath);\n            if (!String.IsNullOrEmpty(directoryPath)) { Directory.CreateDirectory(directoryPath); }\n\n            return filePath;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to directoryPath"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 72,
                "snippet": {
                  "text": "                foreach (string file in _fileSystem.GetFilesInDirectory(dir, filter))"
                }
              },
              "contextRegion": {
                "startLine": 69,
                "endLine": 75,
                "snippet": {
                  "text": "        {\n            if (_fileSystem.DirectoryExists(dir))\n            {\n                foreach (string file in _fileSystem.GetFilesInDirectory(dir, filter))\n                {\n                    AddFileToList(file);\n                }\n"
                }
              }
            },
            "message": {
              "text": "GetFilesInDirectory(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "                    context.TargetLoadException,"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "                    context.TargetUri,\n                    ERR997_ExceptionLoadingAnalysisTarget,\n                    FailureLevel.Error,\n                    context.TargetLoadException,\n                    false,\n                    context.TargetUri.GetFileName()));\n\n"
                }
              }
            },
            "message": {
              "text": "Read"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "                    context.TargetLoadException,"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "                    context.TargetUri,\n                    ERR997_ExceptionLoadingAnalysisTarget,\n                    FailureLevel.Error,\n                    context.TargetLoadException,\n                    false,\n                    context.TargetUri.GetFileName()));\n\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(3 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 456,
                "snippet": {
                  "text": "            return CreateNotification(uri, notificationId, null, level, exception, persistExceptionStack, args);"
                }
              },
              "contextRegion": {
                "startLine": 453,
                "endLine": 459,
                "snippet": {
                  "text": "            bool persistExceptionStack,\n            params string[] args)\n        {\n            return CreateNotification(uri, notificationId, null, level, exception, persistExceptionStack, args);\n        }\n\n        private static Notification CreateNotification(\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(4 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 456,
                "snippet": {
                  "text": "            return CreateNotification(uri, notificationId, null, level, exception, persistExceptionStack, args);"
                }
              },
              "contextRegion": {
                "startLine": 453,
                "endLine": 459,
                "snippet": {
                  "text": "            bool persistExceptionStack,\n            params string[] args)\n        {\n            return CreateNotification(uri, notificationId, null, level, exception, persistExceptionStack, args);\n        }\n\n        private static Notification CreateNotification(\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 49,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 46,
                "endLine": 52,
                "snippet": {
                  "text": "\n            // Could not load analysis target '{0}'.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingAnalysisTarget,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 59
              },
              "region": {
                "startLine": 249,
                "snippet": {
                  "text": "            WriteToConsole(notification);"
                }
              },
              "contextRegion": {
                "startLine": 246,
                "endLine": 252,
                "snippet": {
                  "text": "\n        public void LogConfigurationNotification(Notification notification)\n        {\n            WriteToConsole(notification);\n        }\n\n        private void WriteToConsole(Notification notification)\n"
                }
              }
            },
            "message": {
              "text": "WriteToConsole(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 364
              },
              "region": {
                "startLine": 84,
                "snippet": {
                  "text": "                logger.LogConfigurationNotification(notification);"
                }
              },
              "contextRegion": {
                "startLine": 81,
                "endLine": 87,
                "snippet": {
                  "text": "        {\n            foreach (IAnalysisLogger logger in Loggers)\n            {\n                logger.LogConfigurationNotification(notification);\n            }\n        }\n    }\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 312,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 309,
                "endLine": 315,
                "snippet": {
                  "text": "            // Could not load plug-in '{0}'.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingPlugIn,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 312,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 309,
                "endLine": 315,
                "snippet": {
                  "text": "            // Could not load plug-in '{0}'.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingPlugIn,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(3 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 311,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 308,
                "endLine": 314,
                "snippet": {
                  "text": "\n            // Could not load plug-in '{0}'.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingPlugIn,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "                    RuntimeErrors |= Errors.LogUnhandledEngineException(this.rootContext, ex);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                catch (Exception ex)\n                {\n                    // These exceptions escaped our net and must be logged here                    \n                    RuntimeErrors |= Errors.LogUnhandledEngineException(this.rootContext, ex);\n                    ExecutionException = ex;\n                    return FAILURE;\n                }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "                    RuntimeErrors |= Errors.LogUnhandledEngineException(this.rootContext, ex);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                catch (Exception ex)\n                {\n                    // These exceptions escaped our net and must be logged here                    \n                    RuntimeErrors |= Errors.LogUnhandledEngineException(this.rootContext, ex);\n                    ExecutionException = ex;\n                    return FAILURE;\n                }\n"
                }
              }
            },
            "message": {
              "text": "LogUnhandledEngineException(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 439,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 436,
                "endLine": 442,
                "snippet": {
                  "text": "            // An unhandled exception was raised during analysis.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR999UnhandledEngineException,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(3 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 438,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 435,
                "endLine": 441,
                "snippet": {
                  "text": "\n            // An unhandled exception was raised during analysis.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR999UnhandledEngineException,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogToolNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1089
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "                Console.Error.WriteLine(ex.ToString());"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1089
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "                Console.Error.WriteLine(ex.ToString());"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.ToString());\n            }\n\n            return result;\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 505
              },
              "region": {
                "startLine": 118,
                "snippet": {
                  "text": "                _innerStream.Position = value;"
                }
              },
              "contextRegion": {
                "startLine": 115,
                "endLine": 121,
                "snippet": {
                  "text": "\n            set\n            {\n                _innerStream.Position = value;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "set_Position(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                directory = @\".\\\";"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "\n            if (directory.Length == 0)\n            {\n                directory = @\".\\\";\n            }\n\n            AddFilesFromDirectory(directory, filter);\n"
                }
              }
            },
            "message": {
              "text": "Read"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                directory = @\".\\\";"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "\n            if (directory.Length == 0)\n            {\n                directory = @\".\\\";\n            }\n\n            AddFilesFromDirectory(directory, filter);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to directory"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 188,
                "snippet": {
                  "text": "                Errors.LogExceptionAccessingFile(context, filePath, exception);"
                }
              },
              "contextRegion": {
                "startLine": 185,
                "endLine": 191,
                "snippet": {
                  "text": "\n            if (exception != null)\n            {\n                Errors.LogExceptionAccessingFile(context, filePath, exception);\n            }\n\n            return false;\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 188,
                "snippet": {
                  "text": "                Errors.LogExceptionAccessingFile(context, filePath, exception);"
                }
              },
              "contextRegion": {
                "startLine": 185,
                "endLine": 191,
                "snippet": {
                  "text": "\n            if (exception != null)\n            {\n                Errors.LogExceptionAccessingFile(context, filePath, exception);\n            }\n\n            return false;\n"
                }
              }
            },
            "message": {
              "text": "LogExceptionAccessingFile(2)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 217,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 214,
                "endLine": 220,
                "snippet": {
                  "text": "            // Could not access a file specified on the command-line: '{0}'.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionAccessingFile,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(3 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 216,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 213,
                "endLine": 219,
                "snippet": {
                  "text": "\n            // Could not access a file specified on the command-line: '{0}'.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionAccessingFile,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 177,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 174,
                "endLine": 180,
                "snippet": {
                  "text": "            // Could not create output file: '{0}'\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionCreatingLogFile,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 177,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 174,
                "endLine": 180,
                "snippet": {
                  "text": "            // Could not create output file: '{0}'\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionCreatingLogFile,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(3 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 176,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 173,
                "endLine": 179,
                "snippet": {
                  "text": "\n            // Could not create output file: '{0}'\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionCreatingLogFile,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 644
              },
              "region": {
                "startLine": 39,
                "snippet": {
                  "text": "                string sarifFilePath = args[0];"
                }
              },
              "contextRegion": {
                "startLine": 36,
                "endLine": 42,
                "snippet": {
                  "text": "\n            try\n            {\n                string sarifFilePath = args[0];\n                string csvFilePath = args[1];\n                IEnumerable<string> columnNames = (args.Length > 2 ? args[2] : ConfigurationManager.AppSettings[\"ColumnNames\"]).Split(',').Select((value) => value.Trim());\n                IEnumerable<Action<WriteContext>> selectedWriters = columnNames.Select((name) => SarifCsvColumnWriters.GetWriter(name)).ToArray();\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sarifFilePath"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 439,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 436,
                "endLine": 442,
                "snippet": {
                  "text": "            // An unhandled exception was raised during analysis.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR999UnhandledEngineException,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 121,
                "snippet": {
                  "text": "                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;"
                }
              },
              "contextRegion": {
                "startLine": 118,
                "endLine": 124,
                "snippet": {
                  "text": "\n                    if (RebaselineExpectedResults)\n                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n"
                }
              }
            },
            "message": {
              "text": "Read"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 121,
                "snippet": {
                  "text": "                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;"
                }
              },
              "contextRegion": {
                "startLine": 118,
                "endLine": 124,
                "snippet": {
                  "text": "\n                    if (RebaselineExpectedResults)\n                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 121,
                "snippet": {
                  "text": "                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;"
                }
              },
              "contextRegion": {
                "startLine": 118,
                "endLine": 124,
                "snippet": {
                  "text": "\n                    if (RebaselineExpectedResults)\n                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to intermediateFolder"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 122,
                "snippet": {
                  "text": "                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");"
                }
              },
              "contextRegion": {
                "startLine": 119,
                "endLine": 125,
                "snippet": {
                  "text": "                    if (RebaselineExpectedResults)\n                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n                        // We retrieve all test strings from embedded resources. To rebaseline, we need to\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 122,
                "snippet": {
                  "text": "                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");"
                }
              },
              "contextRegion": {
                "startLine": 119,
                "endLine": 125,
                "snippet": {
                  "text": "                    if (RebaselineExpectedResults)\n                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n                        // We retrieve all test strings from embedded resources. To rebaseline, we need to\n"
                }
              }
            },
            "message": {
              "text": "GetProductTestDataDirectory(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 35,
                "snippet": {
                  "text": "            return Path.GetFullPath(Path.Combine($@\"..\\..\\..\\..\\..\\src\\{testBinaryName}\\TestData\", subdirectory));"
                }
              },
              "contextRegion": {
                "startLine": 32,
                "endLine": 38,
                "snippet": {
                  "text": "        // rebaselining scenarios. i.e., this path won't be consumed by AppVeyor.\n        public static string GetProductTestDataDirectory(string testBinaryName, string subdirectory = \"\")\n        {\n            return Path.GetFullPath(Path.Combine($@\"..\\..\\..\\..\\..\\src\\{testBinaryName}\\TestData\", subdirectory));\n        }\n\n        private readonly ITestOutputHelper _outputHelper;\n"
                }
              }
            },
            "message": {
              "text": "Combine(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 35,
                "snippet": {
                  "text": "            return Path.GetFullPath(Path.Combine($@\"..\\..\\..\\..\\..\\src\\{testBinaryName}\\TestData\", subdirectory));"
                }
              },
              "contextRegion": {
                "startLine": 32,
                "endLine": 38,
                "snippet": {
                  "text": "        // rebaselining scenarios. i.e., this path won't be consumed by AppVeyor.\n        public static string GetProductTestDataDirectory(string testBinaryName, string subdirectory = \"\")\n        {\n            return Path.GetFullPath(Path.Combine($@\"..\\..\\..\\..\\..\\src\\{testBinaryName}\\TestData\", subdirectory));\n        }\n\n        private readonly ITestOutputHelper _outputHelper;\n"
                }
              }
            },
            "message": {
              "text": "GetFullPath(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 35,
                "snippet": {
                  "text": "            return Path.GetFullPath(Path.Combine($@\"..\\..\\..\\..\\..\\src\\{testBinaryName}\\TestData\", subdirectory));"
                }
              },
              "contextRegion": {
                "startLine": 32,
                "endLine": 38,
                "snippet": {
                  "text": "        // rebaselining scenarios. i.e., this path won't be consumed by AppVeyor.\n        public static string GetProductTestDataDirectory(string testBinaryName, string subdirectory = \"\")\n        {\n            return Path.GetFullPath(Path.Combine($@\"..\\..\\..\\..\\..\\src\\{testBinaryName}\\TestData\", subdirectory));\n        }\n\n        private readonly ITestOutputHelper _outputHelper;\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 122,
                "snippet": {
                  "text": "                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");"
                }
              },
              "contextRegion": {
                "startLine": 119,
                "endLine": 125,
                "snippet": {
                  "text": "                    if (RebaselineExpectedResults)\n                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n                        // We retrieve all test strings from embedded resources. To rebaseline, we need to\n"
                }
              }
            },
            "message": {
              "text": "Combine(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 732
              },
              "region": {
                "startLine": 122,
                "snippet": {
                  "text": "                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");"
                }
              },
              "contextRegion": {
                "startLine": 119,
                "endLine": 125,
                "snippet": {
                  "text": "                    if (RebaselineExpectedResults)\n                    {\n                        string intermediateFolder = !string.IsNullOrEmpty(IntermediateTestFolder) ? IntermediateTestFolder + @\"\\\" : String.Empty;\n                        string testDirectory = Path.Combine(GetProductTestDataDirectory(TestBinaryName, intermediateFolder + TypeUnderTest), \"ExpectedOutputs\");\n                        Directory.CreateDirectory(testDirectory);\n\n                        // We retrieve all test strings from embedded resources. To rebaseline, we need to\n"
                }
              }
            },
            "message": {
              "text": "Assignment to testDirectory"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 72,
                "snippet": {
                  "text": "                    context.Rule.Id,"
                }
              },
              "contextRegion": {
                "startLine": 69,
                "endLine": 75,
                "snippet": {
                  "text": "                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingPdb,\n                    context.Rule.Id,\n                    FailureLevel.Error,\n                    exception,\n                    false,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 72,
                "snippet": {
                  "text": "                    context.Rule.Id,"
                }
              },
              "contextRegion": {
                "startLine": 69,
                "endLine": 75,
                "snippet": {
                  "text": "                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingPdb,\n                    context.Rule.Id,\n                    FailureLevel.Error,\n                    exception,\n                    false,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(4 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 69,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 66,
                "endLine": 72,
                "snippet": {
                  "text": "\n            // '{0}' was not evaluated for check '{1}' because its PDB could not be loaded.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingPdb,\n                    context.Rule.Id,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 217,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 214,
                "endLine": 220,
                "snippet": {
                  "text": "            // Could not access a file specified on the command-line: '{0}'.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionAccessingFile,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 556
              },
              "region": {
                "startLine": 88,
                "snippet": {
                  "text": "                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);"
                }
              },
              "contextRegion": {
                "startLine": 85,
                "endLine": 91,
                "snippet": {
                  "text": "                    }\n                    catch (UnauthorizedAccessException)\n                    {\n                        Console.Error.WriteLineAsync(\"Unauthorized access exception for directory: \" + dir);\n                    }\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 417,
                "snippet": {
                  "text": "                    context.Rule.Id,"
                }
              },
              "contextRegion": {
                "startLine": 414,
                "endLine": 420,
                "snippet": {
                  "text": "                CreateNotification(\n                    context.TargetUri,\n                    ERR998_ExceptionInAnalyze,\n                    context.Rule.Id,\n                    FailureLevel.Error,\n                    exception,\n                    true,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 417,
                "snippet": {
                  "text": "                    context.Rule.Id,"
                }
              },
              "contextRegion": {
                "startLine": 414,
                "endLine": 420,
                "snippet": {
                  "text": "                CreateNotification(\n                    context.TargetUri,\n                    ERR998_ExceptionInAnalyze,\n                    context.Rule.Id,\n                    FailureLevel.Error,\n                    exception,\n                    true,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(4 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 414,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 411,
                "endLine": 417,
                "snippet": {
                  "text": "            // exception may have resulted from a problem related to parsing \n            // image metadata and not specific to the rule, however.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR998_ExceptionInAnalyze,\n                    context.Rule.Id,\n"
                }
              }
            },
            "message": {
              "text": "LogToolNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 364,
                "snippet": {
                  "text": "                    context.Rule.Id,"
                }
              },
              "contextRegion": {
                "startLine": 361,
                "endLine": 367,
                "snippet": {
                  "text": "                CreateNotification(\n                    context.TargetUri,\n                    ERR998_ExceptionInCanAnalyze,\n                    context.Rule.Id,\n                    FailureLevel.Error,\n                    exception,\n                    true,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 658,
                "snippet": {
                  "text": "                    Errors.LogUnhandledExceptionInitializingRule(context, ex);"
                }
              },
              "contextRegion": {
                "startLine": 655,
                "endLine": 661,
                "snippet": {
                  "text": "                catch (Exception ex)\n                {\n                    RuntimeErrors |= RuntimeConditions.ExceptionInSkimmerInitialize;\n                    Errors.LogUnhandledExceptionInitializingRule(context, ex);\n                    disabledSkimmers.Add(skimmer);\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 658,
                "snippet": {
                  "text": "                    Errors.LogUnhandledExceptionInitializingRule(context, ex);"
                }
              },
              "contextRegion": {
                "startLine": 655,
                "endLine": 661,
                "snippet": {
                  "text": "                catch (Exception ex)\n                {\n                    RuntimeErrors |= RuntimeConditions.ExceptionInSkimmerInitialize;\n                    Errors.LogUnhandledExceptionInitializingRule(context, ex);\n                    disabledSkimmers.Add(skimmer);\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "LogUnhandledExceptionInitializingRule(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 390,
                "snippet": {
                  "text": "                context.Rule.Id,"
                }
              },
              "contextRegion": {
                "startLine": 387,
                "endLine": 393,
                "snippet": {
                  "text": "                CreateNotification(\n                context.TargetUri,\n                ERR998_ExceptionInInitialize,\n                context.Rule.Id,\n                FailureLevel.Error,\n                exception,\n                true,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(4 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 387,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 384,
                "endLine": 390,
                "snippet": {
                  "text": "            // An unhandled exception was encountered initializing check '{0}', which \n            // has been disabled for the remainder of the analysis.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                context.TargetUri,\n                ERR998_ExceptionInInitialize,\n                context.Rule.Id,\n"
                }
              }
            },
            "message": {
              "text": "LogToolNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1010
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "        public CsvWriter(string filePath, bool writeHeaderRow = true) : this(new FileStream(EnsureDirectoryCreated(filePath), FileMode.Create, FileAccess.Write, FileShare.Read), writeHeaderRow)"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            }\n        }\n\n        public CsvWriter(string filePath, bool writeHeaderRow = true) : this(new FileStream(EnsureDirectoryCreated(filePath), FileMode.Create, FileAccess.Write, FileShare.Read), writeHeaderRow)\n        { }\n\n        public CsvWriter(Stream stream, bool writeHeaderRow = true)\n"
                }
              }
            },
            "message": {
              "text": "EnsureDirectoryCreated(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1010
              },
              "region": {
                "startLine": 70,
                "snippet": {
                  "text": "            return filePath;"
                }
              },
              "contextRegion": {
                "startLine": 67,
                "endLine": 73,
                "snippet": {
                  "text": "            string directoryPath = Path.GetDirectoryName(filePath);\n            if (!String.IsNullOrEmpty(directoryPath)) { Directory.CreateDirectory(directoryPath); }\n\n            return filePath;\n        }\n\n        public int RowCountWritten => _rowCountWritten;\n"
                }
              }
            },
            "message": {
              "text": "Return filePath"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 734
              },
              "region": {
                "startLine": 11,
                "snippet": {
                  "text": "        public Exception TargetLoadException { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 8,
                "endLine": 14,
                "snippet": {
                  "text": "{\n    public class AnalysisContext : IAnalysisContext\n    {\n        public Exception TargetLoadException { get; set; }\n\n        public bool IsValidAnalysisTarget { get; set; }\n\n"
                }
              }
            },
            "message": {
              "text": "Read"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 734
              },
              "region": {
                "startLine": 11,
                "snippet": {
                  "text": "        public Exception TargetLoadException { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 8,
                "endLine": 14,
                "snippet": {
                  "text": "{\n    public class AnalysisContext : IAnalysisContext\n    {\n        public Exception TargetLoadException { get; set; }\n\n        public bool IsValidAnalysisTarget { get; set; }\n\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "                    context.TargetLoadException,"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "                    context.TargetUri,\n                    ERR997_ExceptionLoadingAnalysisTarget,\n                    FailureLevel.Error,\n                    context.TargetLoadException,\n                    false,\n                    context.TargetUri.GetFileName()));\n\n"
                }
              }
            },
            "message": {
              "text": "get_TargetLoadException(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 457,
                "snippet": {
                  "text": "                Errors.LogExceptionInstantiatingSkimmers(context, DefaultPlugInAssemblies, ex);"
                }
              },
              "contextRegion": {
                "startLine": 454,
                "endLine": 460,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                Errors.LogExceptionInstantiatingSkimmers(context, DefaultPlugInAssemblies, ex);\n                ThrowExitApplicationException(context, ExitReason.UnhandledExceptionInstantiatingSkimmers, ex);\n            }\n\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 457,
                "snippet": {
                  "text": "                Errors.LogExceptionInstantiatingSkimmers(context, DefaultPlugInAssemblies, ex);"
                }
              },
              "contextRegion": {
                "startLine": 454,
                "endLine": 460,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                Errors.LogExceptionInstantiatingSkimmers(context, DefaultPlugInAssemblies, ex);\n                ThrowExitApplicationException(context, ExitReason.UnhandledExceptionInstantiatingSkimmers, ex);\n            }\n\n"
                }
              }
            },
            "message": {
              "text": "LogExceptionInstantiatingSkimmers(2)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 98,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 95,
                "endLine": 101,
                "snippet": {
                  "text": "            // Could not instantiate skimmers from the following plugins: {0}\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionInstantiatingSkimmers,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(3 : return.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 97,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 94,
                "endLine": 100,
                "snippet": {
                  "text": "\n            // Could not instantiate skimmers from the following plugins: {0}\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionInstantiatingSkimmers,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 579,
                "snippet": {
                  "text": "                    RuntimeErrors |= Errors.LogUnhandledRuleExceptionAnalyzingTarget(disabledSkimmers, context, ex);"
                }
              },
              "contextRegion": {
                "startLine": 576,
                "endLine": 582,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    RuntimeErrors |= Errors.LogUnhandledRuleExceptionAnalyzingTarget(disabledSkimmers, context, ex);\n                }\n            }\n        }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 579,
                "snippet": {
                  "text": "                    RuntimeErrors |= Errors.LogUnhandledRuleExceptionAnalyzingTarget(disabledSkimmers, context, ex);"
                }
              },
              "contextRegion": {
                "startLine": 576,
                "endLine": 582,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    RuntimeErrors |= Errors.LogUnhandledRuleExceptionAnalyzingTarget(disabledSkimmers, context, ex);\n                }\n            }\n        }\n"
                }
              }
            },
            "message": {
              "text": "LogUnhandledRuleExceptionAnalyzingTarget(2)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 182,
                "snippet": {
                  "text": "            catch (IOException ex) { exception = ex; }"
                }
              },
              "contextRegion": {
                "startLine": 179,
                "endLine": 185,
                "snippet": {
                  "text": "\n                Errors.LogMissingFile(context, filePath);\n            }\n            catch (IOException ex) { exception = ex; }\n            catch (SecurityException ex) { exception = ex; }\n            catch (UnauthorizedAccessException ex) { exception = ex; }\n\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 182,
                "snippet": {
                  "text": "            catch (IOException ex) { exception = ex; }"
                }
              },
              "contextRegion": {
                "startLine": 179,
                "endLine": 185,
                "snippet": {
                  "text": "\n                Errors.LogMissingFile(context, filePath);\n            }\n            catch (IOException ex) { exception = ex; }\n            catch (SecurityException ex) { exception = ex; }\n            catch (UnauthorizedAccessException ex) { exception = ex; }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 183,
                "snippet": {
                  "text": "            catch (SecurityException ex) { exception = ex; }"
                }
              },
              "contextRegion": {
                "startLine": 180,
                "endLine": 186,
                "snippet": {
                  "text": "                Errors.LogMissingFile(context, filePath);\n            }\n            catch (IOException ex) { exception = ex; }\n            catch (SecurityException ex) { exception = ex; }\n            catch (UnauthorizedAccessException ex) { exception = ex; }\n\n            if (exception != null)\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 183,
                "snippet": {
                  "text": "            catch (SecurityException ex) { exception = ex; }"
                }
              },
              "contextRegion": {
                "startLine": 180,
                "endLine": 186,
                "snippet": {
                  "text": "                Errors.LogMissingFile(context, filePath);\n            }\n            catch (IOException ex) { exception = ex; }\n            catch (SecurityException ex) { exception = ex; }\n            catch (UnauthorizedAccessException ex) { exception = ex; }\n\n            if (exception != null)\n"
                }
              }
            },
            "message": {
              "text": "Assignment to exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 184,
                "snippet": {
                  "text": "            catch (UnauthorizedAccessException ex) { exception = ex; }"
                }
              },
              "contextRegion": {
                "startLine": 181,
                "endLine": 187,
                "snippet": {
                  "text": "            }\n            catch (IOException ex) { exception = ex; }\n            catch (SecurityException ex) { exception = ex; }\n            catch (UnauthorizedAccessException ex) { exception = ex; }\n\n            if (exception != null)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 184,
                "snippet": {
                  "text": "            catch (UnauthorizedAccessException ex) { exception = ex; }"
                }
              },
              "contextRegion": {
                "startLine": 181,
                "endLine": 187,
                "snippet": {
                  "text": "            }\n            catch (IOException ex) { exception = ex; }\n            catch (SecurityException ex) { exception = ex; }\n            catch (UnauthorizedAccessException ex) { exception = ex; }\n\n            if (exception != null)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 929
              },
              "region": {
                "startLine": 18,
                "snippet": {
                  "text": "        public Exception TargetLoadException { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 15,
                "endLine": 21,
                "snippet": {
                  "text": "\n        public ReportingDescriptor Rule { get; set; }\n\n        public Exception TargetLoadException { get; set; }\n\n        public Uri TargetUri { get; set; }\n\n"
                }
              }
            },
            "message": {
              "text": "Read"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 929
              },
              "region": {
                "startLine": 18,
                "snippet": {
                  "text": "        public Exception TargetLoadException { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 15,
                "endLine": 21,
                "snippet": {
                  "text": "\n        public ReportingDescriptor Rule { get; set; }\n\n        public Exception TargetLoadException { get; set; }\n\n        public Uri TargetUri { get; set; }\n\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 390,
                "snippet": {
                  "text": "                context.Rule.Id,"
                }
              },
              "contextRegion": {
                "startLine": 387,
                "endLine": 393,
                "snippet": {
                  "text": "                CreateNotification(\n                context.TargetUri,\n                ERR998_ExceptionInInitialize,\n                context.Rule.Id,\n                FailureLevel.Error,\n                exception,\n                true,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1059
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "            return Environment.ExpandEnvironmentVariables(name);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "        /// </returns>\n        public string ExpandEnvironmentVariables(string name)\n        {\n            return Environment.ExpandEnvironmentVariables(name);\n        }\n    }\n}\n"
                }
              }
            },
            "message": {
              "text": "ExpandEnvironmentVariables(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1059
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "            return Environment.ExpandEnvironmentVariables(name);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "        /// </returns>\n        public string ExpandEnvironmentVariables(string name)\n        {\n            return Environment.ExpandEnvironmentVariables(name);\n        }\n    }\n}\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 729
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\n                string responseFile = argument.Trim('\"').Substring(1);\n\n                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);\n                responseFile = fileSystem.GetFullPath(responseFile);\n\n                string[] responseFileLines = fileSystem.ReadAllLines(responseFile);\n"
                }
              }
            },
            "message": {
              "text": "ExpandEnvironmentVariables(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 729
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\n                string responseFile = argument.Trim('\"').Substring(1);\n\n                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);\n                responseFile = fileSystem.GetFullPath(responseFile);\n\n                string[] responseFileLines = fileSystem.ReadAllLines(responseFile);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to responseFile"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 729
              },
              "region": {
                "startLine": 31,
                "snippet": {
                  "text": "                responseFile = fileSystem.GetFullPath(responseFile);"
                }
              },
              "contextRegion": {
                "startLine": 28,
                "endLine": 34,
                "snippet": {
                  "text": "                string responseFile = argument.Trim('\"').Substring(1);\n\n                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);\n                responseFile = fileSystem.GetFullPath(responseFile);\n\n                string[] responseFileLines = fileSystem.ReadAllLines(responseFile);\n\n"
                }
              }
            },
            "message": {
              "text": "GetFullPath(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 478
              },
              "region": {
                "startLine": 95,
                "snippet": {
                  "text": "            return Path.GetFullPath(path);"
                }
              },
              "contextRegion": {
                "startLine": 92,
                "endLine": 98,
                "snippet": {
                  "text": "        /// </returns>\n        public string GetFullPath(string path)\n        {\n            return Path.GetFullPath(path);\n        }\n\n        /// <summary>\n"
                }
              }
            },
            "message": {
              "text": "GetFullPath(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 478
              },
              "region": {
                "startLine": 95,
                "snippet": {
                  "text": "            return Path.GetFullPath(path);"
                }
              },
              "contextRegion": {
                "startLine": 92,
                "endLine": 98,
                "snippet": {
                  "text": "        /// </returns>\n        public string GetFullPath(string path)\n        {\n            return Path.GetFullPath(path);\n        }\n\n        /// <summary>\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 729
              },
              "region": {
                "startLine": 31,
                "snippet": {
                  "text": "                responseFile = fileSystem.GetFullPath(responseFile);"
                }
              },
              "contextRegion": {
                "startLine": 28,
                "endLine": 34,
                "snippet": {
                  "text": "                string responseFile = argument.Trim('\"').Substring(1);\n\n                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);\n                responseFile = fileSystem.GetFullPath(responseFile);\n\n                string[] responseFileLines = fileSystem.ReadAllLines(responseFile);\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to responseFile"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 729
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "                string[] responseFileLines = fileSystem.ReadAllLines(responseFile);"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "                responseFile = environmentVariables.ExpandEnvironmentVariables(responseFile);\n                responseFile = fileSystem.GetFullPath(responseFile);\n\n                string[] responseFileLines = fileSystem.ReadAllLines(responseFile);\n\n                ExpandResponseFile(responseFileLines, expandedArguments);\n            }\n"
                }
              }
            },
            "message": {
              "text": "ReadAllLines(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 98,
                "snippet": {
                  "text": "                    context.TargetUri,"
                }
              },
              "contextRegion": {
                "startLine": 95,
                "endLine": 101,
                "snippet": {
                  "text": "            // Could not instantiate skimmers from the following plugins: {0}\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionInstantiatingSkimmers,\n                    FailureLevel.Error,\n                    exception,\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 168
              },
              "region": {
                "startLine": 51,
                "snippet": {
                  "text": "                propertyBagTypeName = NormalizeTypeName(propertyBag.GetType().FullName);"
                }
              },
              "contextRegion": {
                "startLine": 48,
                "endLine": 54,
                "snippet": {
                  "text": "\n            if (propertyBagTypeName != \"PropertyBag\")\n            {\n                propertyBagTypeName = NormalizeTypeName(propertyBag.GetType().FullName);\n            }\n\n            writer.WriteStartElement(PROPERTIES_ID);\n"
                }
              }
            },
            "message": {
              "text": "get_FullName(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 168
              },
              "region": {
                "startLine": 51,
                "snippet": {
                  "text": "                propertyBagTypeName = NormalizeTypeName(propertyBag.GetType().FullName);"
                }
              },
              "contextRegion": {
                "startLine": 48,
                "endLine": 54,
                "snippet": {
                  "text": "\n            if (propertyBagTypeName != \"PropertyBag\")\n            {\n                propertyBagTypeName = NormalizeTypeName(propertyBag.GetType().FullName);\n            }\n\n            writer.WriteStartElement(PROPERTIES_ID);\n"
                }
              }
            },
            "message": {
              "text": "NormalizeTypeName(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 168
              },
              "region": {
                "startLine": 139,
                "snippet": {
                  "text": "            return typeName;"
                }
              },
              "contextRegion": {
                "startLine": 136,
                "endLine": 142,
                "snippet": {
                  "text": "                    return typeName.Substring(nsPrefix.Length);\n                }\n            }\n            return typeName;\n        }\n\n        private static void SaveSet<T>(XmlWriter writer, HashSet<T> items, string key)\n"
                }
              }
            },
            "message": {
              "text": "Return typeName"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 168
              },
              "region": {
                "startLine": 51,
                "snippet": {
                  "text": "                propertyBagTypeName = NormalizeTypeName(propertyBag.GetType().FullName);"
                }
              },
              "contextRegion": {
                "startLine": 48,
                "endLine": 54,
                "snippet": {
                  "text": "\n            if (propertyBagTypeName != \"PropertyBag\")\n            {\n                propertyBagTypeName = NormalizeTypeName(propertyBag.GetType().FullName);\n            }\n\n            writer.WriteStartElement(PROPERTIES_ID);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to propertyBagTypeName"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 456,
                "snippet": {
                  "text": "            return CreateNotification(uri, notificationId, null, level, exception, persistExceptionStack, args);"
                }
              },
              "contextRegion": {
                "startLine": 453,
                "endLine": 459,
                "snippet": {
                  "text": "            bool persistExceptionStack,\n            params string[] args)\n        {\n            return CreateNotification(uri, notificationId, null, level, exception, persistExceptionStack, args);\n        }\n\n        private static Notification CreateNotification(\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 49,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 46,
                "endLine": 52,
                "snippet": {
                  "text": "\n            // Could not load analysis target '{0}'.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingAnalysisTarget,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 97,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 94,
                "endLine": 100,
                "snippet": {
                  "text": "\n            // Could not instantiate skimmers from the following plugins: {0}\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionInstantiatingSkimmers,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 117,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 114,
                "endLine": 120,
                "snippet": {
                  "text": "\n            // No analysis rules could be instantiated.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_NoRulesLoaded,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 117,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 114,
                "endLine": 120,
                "snippet": {
                  "text": "\n            // No analysis rules could be instantiated.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_NoRulesLoaded,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 138,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 135,
                "endLine": 141,
                "snippet": {
                  "text": "\n            // All rules were explicitly disabled so there is no work to do.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_AllRulesExplicitlyDisabled,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 138,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 135,
                "endLine": 141,
                "snippet": {
                  "text": "\n            // All rules were explicitly disabled so there is no work to do.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_AllRulesExplicitlyDisabled,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 157,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 154,
                "endLine": 160,
                "snippet": {
                  "text": "\n            // No valid analysis targets were specified.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_NoValidAnalysisTargets,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 157,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 154,
                "endLine": 160,
                "snippet": {
                  "text": "\n            // No valid analysis targets were specified.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_NoValidAnalysisTargets,\n                    FailureLevel.Error,\n"
                }
              }
            },
            "message": {
              "text": "LogConfigurationNotification(0.Message.Text)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 472,
                "snippet": {
                  "text": "            string exceptionMessage = exception?.Message;"
                }
              },
              "contextRegion": {
                "startLine": 469,
                "endLine": 475,
                "snippet": {
                  "text": "\n            string message = string.Format(CultureInfo.CurrentCulture, messageFormat, args);\n\n            string exceptionMessage = exception?.Message;\n            if (!string.IsNullOrEmpty(exceptionMessage))\n            {\n                // {0} ('{1}')\n"
                }
              }
            },
            "message": {
              "text": "Read exception"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 69,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 66,
                "endLine": 72,
                "snippet": {
                  "text": "\n            // '{0}' was not evaluated for check '{1}' because its PDB could not be loaded.\n            context.Logger.LogConfigurationNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR997_ExceptionLoadingPdb,\n                    context.Rule.Id,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 387,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 384,
                "endLine": 390,
                "snippet": {
                  "text": "            // An unhandled exception was encountered initializing check '{0}', which \n            // has been disabled for the remainder of the analysis.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                context.TargetUri,\n                ERR998_ExceptionInInitialize,\n                context.Rule.Id,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 361,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 358,
                "endLine": 364,
                "snippet": {
                  "text": "            // from a problem related to parsing image metadata and not specific to \n            // the rule, however.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR998_ExceptionInCanAnalyze,\n                    context.Rule.Id,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 414,
                "snippet": {
                  "text": "                CreateNotification("
                }
              },
              "contextRegion": {
                "startLine": 411,
                "endLine": 417,
                "snippet": {
                  "text": "            // exception may have resulted from a problem related to parsing \n            // image metadata and not specific to the rule, however.\n            context.Logger.LogToolNotification(\n                CreateNotification(\n                    context.TargetUri,\n                    ERR998_ExceptionInAnalyze,\n                    context.Rule.Id,\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 315
              },
              "region": {
                "startLine": 456,
                "snippet": {
                  "text": "            return CreateNotification(uri, notificationId, null, level, exception, persistExceptionStack, args);"
                }
              },
              "contextRegion": {
                "startLine": 453,
                "endLine": 459,
                "snippet": {
                  "text": "            bool persistExceptionStack,\n            params string[] args)\n        {\n            return CreateNotification(uri, notificationId, null, level, exception, persistExceptionStack, args);\n        }\n\n        private static Notification CreateNotification(\n"
                }
              }
            },
            "message": {
              "text": "CreateNotification(return.Message.Text)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 393,
                "snippet": {
                  "text": "                        Errors.LogExceptionCreatingLogFile(context, filePath, ex);"
                }
              },
              "contextRegion": {
                "startLine": 390,
                "endLine": 396,
                "snippet": {
                  "text": "                    },\n                    (ex) =>\n                    {\n                        Errors.LogExceptionCreatingLogFile(context, filePath, ex);\n                        ThrowExitApplicationException(context, ExitReason.ExceptionCreatingLogFile, ex);\n                    }\n                );\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 190
              },
              "region": {
                "startLine": 393,
                "snippet": {
                  "text": "                        Errors.LogExceptionCreatingLogFile(context, filePath, ex);"
                }
              },
              "contextRegion": {
                "startLine": 390,
                "endLine": 396,
                "snippet": {
                  "text": "                    },\n                    (ex) =>\n                    {\n                        Errors.LogExceptionCreatingLogFile(context, filePath, ex);\n                        ThrowExitApplicationException(context, ExitReason.ExceptionCreatingLogFile, ex);\n                    }\n                );\n"
                }
              }
            },
            "message": {
              "text": "LogExceptionCreatingLogFile(2)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        }
      ],
      "taxonomies": [
        {
          "guid": "25F72D7E-8A92-459D-AD67-64853F788765",
          "name": "CWE",
          "organization": "MITRE",
          "shortDescription": {
            "text": "The MITRE Common Weakness Enumeration"
          },
          "taxa": [
            {
              "id": "22"
            },
            {
              "id": "73"
            },
            {
              "id": "338"
            },
            {
              "id": "253"
            },
            {
              "id": "690"
            },
            {
              "id": "15"
            },
            {
              "id": "615"
            },
            {
              "id": "486"
            },
            {
              "id": "391"
            },
            {
              "id": "383"
            },
            {
              "id": "404"
            },
            {
              "id": "489"
            },
            {
              "id": "112"
            },
            {
              "id": "396"
            },
            {
              "id": "77"
            },
            {
              "id": "78"
            },
            {
              "id": "561"
            },
            {
              "id": "730"
            },
            {
              "id": "497"
            },
            {
              "id": "398"
            },
            {
              "id": "754"
            },
            {
              "id": "476"
            },
            {
              "id": "457"
            },
            {
              "id": "474"
            },
            {
              "id": "13"
            },
            {
              "id": "260"
            },
            {
              "id": "555"
            },
            {
              "id": "328"
            },
            {
              "id": "400"
            },
            {
              "id": "770"
            },
            {
              "id": "252"
            },
            {
              "id": "336"
            }
          ]
        }
      ]
    }
  ]
}