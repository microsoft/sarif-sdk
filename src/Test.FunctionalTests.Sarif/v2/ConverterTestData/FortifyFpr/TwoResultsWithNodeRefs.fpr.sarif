{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "results": [
        {
          "ruleIndex": 0,
          "message": {
            "text": "Sample abstract text. SQL injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                },
                "region": {
                  "startLine": 57,
                  "snippet": {
                    "text": "            \"SELECT * FROM invoices WHERE id = @id\", conn);"
                  }
                },
                "contextRegion": {
                  "startLine": 54,
                  "endLine": 60,
                  "snippet": {
                    "text": "string str = null;\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nSqlCommand query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nquery.Parameters.AddWithValue(\"@id\", id);\n\nSqlDataReader objReader = query.ExecuteReader();"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 0
                          },
                          "region": {
                            "startLine": 57,
                            "snippet": {
                              "text": "            \"SELECT * FROM invoices WHERE id = @id\", conn);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 54,
                            "endLine": 60,
                            "snippet": {
                              "text": "string str = null;\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nSqlCommand query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nquery.Parameters.AddWithValue(\"@id\", id);\n\nSqlDataReader objReader = query.ExecuteReader();"
                            }
                          }
                        },
                        "message": {
                          "text": "SqlCommand.ctor()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                },
                "region": {
                  "startLine": 57
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleIndex": 1,
          "message": {
            "text": "The function WriteLog() in [Logger.cs](1) reveals system data or debugging information by calling WriteLine() on line [65](1). The information revealed by WriteLine() could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1
                },
                "region": {
                  "startLine": 65,
                  "snippet": {
                    "text": "                    Console.WriteLine(type + \" : \" + message);"
                  }
                },
                "contextRegion": {
                  "startLine": 62,
                  "endLine": 68,
                  "snippet": {
                    "text": "                using (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath, true))\n                {\n                    writer.WriteLine(type + \" : \" +message);\n                    Console.WriteLine(type + \" : \" + message);\n                    //writer.Close();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "index": 3
                    },
                    {
                      "index": 4
                    },
                    {
                      "index": 0
                    },
                    {
                      "index": 1
                    },
                    {
                      "index": 2
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 1
                          },
                          "region": {
                            "startLine": 65,
                            "snippet": {
                              "text": "                    Console.WriteLine(type + \" : \" + message);"
                            }
                          },
                          "contextRegion": {
                            "startLine": 62,
                            "endLine": 68,
                            "snippet": {
                              "text": "                using (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath, true))\n                {\n                    writer.WriteLine(type + \" : \" +message);\n                    Console.WriteLine(type + \" : \" + message);\n                    //writer.Close();\n                }\n            }\n"
                            }
                          }
                        },
                        "message": {
                          "text": "WriteLine(0)"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 1
                },
                "region": {
                  "startLine": 65
                }
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        }
      ],
      "tool": {
        "driver": {
          "name": "Micro Focus Fortify Static Code Analyzer",
          "rules": [
            {
              "id": "31D4607A-A3FF-447C-908A-CA2BBE4CE4B7",
              "guid": "31D4607A-A3FF-447C-908A-CA2BBE4CE4B7",
              "shortDescription": {
                "text": "Sample abstract text. SQL injection vulnerability."
              },
              "fullDescription": {
                "text": "The quick brown fox jumps over the lazy dog.\nThis section explains the rule in detail."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "properties": {
                "Kingdom": "Input Validation and Representation",
                "Type": "SQL Injection"
              }
            },
            {
              "id": "F7A2423A-1927-40A3-920E-17ADB5430412",
              "guid": "F7A2423A-1927-40A3-920E-17ADB5430412",
              "shortDescription": {
                "text": "The function <Replace key=\"EnclosingFunction.name\"/> in <Replace key=\"PrimaryLocation.file\"/> reveals system data or debugging information by calling <Replace key=\"PrimaryCall.name\"/> on line <Replace key=\"PrimaryLocation.line\"/>. The information revealed by <Replace key=\"PrimaryCall.name\"/> could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.\r\n\r\nIn this case the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in <Replace key=\"SourceLocation.file\"/> at line <Replace key=\"SourceLocation.line\"/> leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in <Replace key=\"SinkLocation.file\"/> at line <Replace key=\"SinkLocation.line\"/>.\r\n\r\n**Example:** The following code constructs a database connection string, uses it to create a new connection to the database, and prints it to the console.\r\n\r\n`\nstring cs=\"database=northwind;server=mySQLServer...\";\nSqlConnection conn=new SqlConnection(cs);\n...\nConsole.Writeline(cs);\n`\r\n\r\nDepending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed.\r\n\r\nIn some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "properties": {
                "Kingdom": "Encapsulation",
                "Type": "System Information Leak"
              }
            }
          ],
          "supportedTaxonomies": [
            {
              "name": "CWE",
              "index": 0,
              "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
            }
          ]
        }
      },
      "invocations": [
        {
          "commandLine": "[REMOVED]insourceanalyzer.exe -scan -b The_Build_ID -machine-output -f C:\\projects\\myproject\\scans\\2018-01-01_12:00:00\\Scan.fpr -format fpr",
          "startTimeUtc": "2018-01-01T12:00:00.000Z",
          "executionSuccessful": true,
          "machine": "SCANMACHINE",
          "account": "johndoe",
          "properties": {
            "Platform": "Windows 10"
          }
        }
      ],
      "originalUriBaseIds": {
        "SRCROOT": {
          "uri": "file:///C:/projects/myproject/src/"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "Helpers/InvoiceHelper.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 8297,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "Helpers/Logger.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 3645,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        },
        {
          "location": {
            "uri": "Program.cs",
            "uriBaseId": "SRCROOT"
          },
          "length": 5009,
          "mimeType": "text/x-csharp",
          "encoding": "windows-1252"
        }
      ],
      "automationDetails": {
        "id": "The_Build_ID/"
      },
      "columnKind": "utf16CodeUnits",
      "threadFlowLocations": [
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 2
              },
              "region": {
                "startLine": 82,
                "snippet": {
                  "text": "                            Logger.Error(ex.ToString());"
                }
              },
              "contextRegion": {
                "startLine": 79,
                "endLine": 85,
                "snippet": {
                  "text": "                                Logger.Error(LogMessage.RETRY_ATTEMPTS_EXCEEDED, new object[] { tool, server});\n                                continue;\n                            }\n                            Logger.Error(ex.ToString());\n                        }\n                    }\n\n"
                }
              }
            },
            "message": {
              "text": "Error(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1
              },
              "region": {
                "startLine": 101
              }
            },
            "message": {
              "text": "WriteLog(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 1
              },
              "region": {
                "startLine": 65,
                "snippet": {
                  "text": "                    Console.WriteLine(type + \" : \" + message);"
                }
              },
              "contextRegion": {
                "startLine": 62,
                "endLine": 68,
                "snippet": {
                  "text": "                using (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath, true))\n                {\n                    writer.WriteLine(type + \" : \" +message);\n                    Console.WriteLine(type + \" : \" + message);\n                    //writer.Close();\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 2
              },
              "region": {
                "startLine": 82,
                "snippet": {
                  "text": "                            Logger.Error(ex.ToString());"
                }
              },
              "contextRegion": {
                "startLine": 79,
                "endLine": 85,
                "snippet": {
                  "text": "                                Logger.Error(LogMessage.RETRY_ATTEMPTS_EXCEEDED, new object[] { tool, server});\n                                continue;\n                            }\n                            Logger.Error(ex.ToString());\n                        }\n                    }\n\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "index": 2
              },
              "region": {
                "startLine": 82,
                "snippet": {
                  "text": "                            Logger.Error(ex.ToString());"
                }
              },
              "contextRegion": {
                "startLine": 79,
                "endLine": 85,
                "snippet": {
                  "text": "                                Logger.Error(LogMessage.RETRY_ATTEMPTS_EXCEEDED, new object[] { tool, server});\n                                continue;\n                            }\n                            Logger.Error(ex.ToString());\n                        }\n                    }\n\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        }
      ],
      "taxonomies": [
        {
          "guid": "25F72D7E-8A92-459D-AD67-64853F788765",
          "name": "CWE",
          "organization": "MITRE",
          "shortDescription": {
            "text": "The MITRE Common Weakness Enumeration"
          }
        }
      ]
    }
  ]
}