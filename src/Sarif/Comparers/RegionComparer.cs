// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Collections.Generic;

/// <summary>
/// Note: This comparer may not have all properties compared. Will be replaced by a comprehensive
/// comparer generated by JSchema as part of EqualityComparer in a planned comprehensive solution.
/// Tracking by issue: https://github.com/microsoft/jschema/issues/141
/// </summary>
namespace Microsoft.CodeAnalysis.Sarif.Comparers
{
    internal class RegionComparer : IComparer<Region>
    {
        internal static readonly RegionComparer Instance = new RegionComparer();

        public int Compare(Region left, Region right)
        {
            int compareResult = 0;

            if (left.TryReferenceCompares(right, out compareResult))
            {
                return compareResult;
            }

            compareResult = left.StartLine.CompareTo(right.StartLine);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = left.StartColumn.CompareTo(right.StartColumn);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = left.EndLine.CompareTo(right.EndLine);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = left.EndColumn.CompareTo(right.EndColumn);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = left.CharOffset.CompareTo(right.CharOffset);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = left.CharLength.CompareTo(right.CharLength);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = left.ByteOffset.CompareTo(right.ByteOffset);

            if (compareResult != 0)
            {
                return compareResult;
            }

            compareResult = left.ByteLength.CompareTo(right.ByteLength);

            if (compareResult != 0)
            {
                return compareResult;
            }

            // Note: There may be other properties are not compared.
            return compareResult;
        }
    }
}
