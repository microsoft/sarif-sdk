//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.CodeAnalysis.Sarif.Multitool {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MultitoolResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MultitoolResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.CodeAnalysis.Sarif.Multitool.MultitoolResources", typeof(MultitoolResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} version {1}.
        /// </summary>
        internal static string Banner {
            get {
                return ResourceManager.GetString("Banner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A context object was reinitialized with a new target URI..
        /// </summary>
        internal static string ErrorIllegalContextReuse {
            get {
                return ResourceManager.GetString("ErrorIllegalContextReuse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid SARIF log file..
        /// </summary>
        internal static string ErrorInvalidSarifLogFile {
            get {
                return ResourceManager.GetString("ErrorInvalidSarifLogFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target version must be 1 or 2.
        /// </summary>
        internal static string ErrorInvalidTransformTargetVersion {
            get {
                return ResourceManager.GetString("ErrorInvalidTransformTargetVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No &quot;group&quot; (the part of the file name before the dash) found in &apos;{0}&apos;. All file names must be of the form [Group]-[RunID] and each adjacent pair in the same group is compared..
        /// </summary>
        internal static string ErrorNoGroupInFileName {
            get {
                return ResourceManager.GetString("ErrorNoGroupInFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input file &apos;{0}&apos; was not found..
        /// </summary>
        internal static string InputFileNotFound {
            get {
                return ResourceManager.GetString("InputFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the &apos;{0}&apos; option must be greater than or equal to zero..
        /// </summary>
        internal static string OptionValueMustBeNonNegative {
            get {
                return ResourceManager.GetString("OptionValueMustBeNonNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0:n0} identical, {1:n0} changed.
        /// </summary>
        internal static string ResultDifferenceSummary {
            get {
                return ResourceManager.GetString("ResultDifferenceSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; of the &apos;{1}&apos; option is not an absolute URI..
        /// </summary>
        internal static string WorkItemFiling_ErrorUriIsNotAbsolute {
            get {
                return ResourceManager.GetString("WorkItemFiling_ErrorUriIsNotAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid URI could not be created from the value &apos;{0}&apos; of the &apos;{1}&apos; option..
        /// </summary>
        internal static string WorkItemFiling_ErrorUriIsNotLegal {
            get {
                return ResourceManager.GetString("WorkItemFiling_ErrorUriIsNotLegal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No host URI was provided via the --host-uri option or as part of an input file specified via --configuration..
        /// </summary>
        internal static string WorkItemFiling_NoHostUriSpecified {
            get {
                return ResourceManager.GetString("WorkItemFiling_NoHostUriSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No security token was provided. Populate the &apos;SarifWorkItemFilingSecurityPat&apos; environment variable with a valid personal access token or pass a token in a configuration file using the --configuration option.
        /// </summary>
        internal static string WorkItemFiling_NoPatFound {
            get {
                return ResourceManager.GetString("WorkItemFiling_NoPatFound", resourceCulture);
            }
        }
    }
}
