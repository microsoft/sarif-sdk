{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "HP Fortify Static Code Analyzer",
          "rules": [
            {
              "guid": "49D75ADD-4BBD-49B9-AAF2-92B9BAB332FE",
              "shortDescription": {
                "text": "The random number generator implemented by <Replace key=\"PrimaryCall.name\"/> cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
              },
              "fullDescription": {
                "text": "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\r\n\r\nIn this case the function that generates weak random numbers is <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in <Replace key=\"PrimaryLocation.file\"/> at line <Replace key=\"PrimaryLocation.line\"/>.\r\n\r\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\r\n\r\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\r\n\r\n**Example:** The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\r\n\r\n`\nString GenerateReceiptURL(String baseUrl) {\n    Random ranGen = new Random();\n    ranGen.setSeed((new Date()).getTime());\n    return (baseUrl + ranGen.nextInt(400000000) + \".html\");\n}\n`\r\n\r\nThis code uses the `Random.nextInt()` function to generate \"unique\" identifiers for the receipt pages it generates. Since `Random.nextInt()` is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG."
              },
              "properties": {
                "Accuracy": "2.0",
                "Impact": "4.0",
                "Probability": "1.0",
                "Kingdom": "Security Features",
                "Type": "Insecure Randomness"
              }
            }
          ]
        }
      },
      "invocations": [
        {
          "commandLine": "[REMOVED]insourceanalyzer.exe -b Fortify -logfile c:\\vs\\src\\2\\a\\sca_artifacts\\Fortify_scan.log -scan -f c:\\vs\\src\\2\\a\\sca_artifacts\\Fortify.fpr",
          "startTimeUtc": "2019-06-27T03:16:11.000Z",
          "executionSuccessful": true,
          "machine": "VSBuildAgent",
          "account": "Ops",
          "properties": {
            "Platform": "Windows Server 2016"
          }
        }
      ],
      "originalUriBaseIds": {
        "SRCROOT": {
          "uri": "file:///C:/vs/src/2/s/"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "src/Test.FunctionalTests.Sarif/v2/ConverterTestData/Fortify/src/bannedAPIs.java",
            "uriBaseId": "SRCROOT"
          },
          "length": 3277,
          "mimeType": "text/x-java-source",
          "encoding": "windows-1252"
        }
      ],
      "results": [
        {
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "The random number generator implemented by nextDouble() cannot withstand a cryptographic attack.\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "index": 0
                },
                "region": {
                  "startLine": 48,
                  "snippet": {
                    "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                  }
                },
                "contextRegion": {
                  "startLine": 45,
                  "endLine": 51,
                  "snippet": {
                    "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                  }
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "index": 743
                          },
                          "region": {
                            "startLine": 48,
                            "snippet": {
                              "text": "            || mrg0.nextDouble() != mrg1.nextDouble()"
                            }
                          },
                          "contextRegion": {
                            "startLine": 45,
                            "endLine": 51,
                            "snippet": {
                              "text": "            || mrg0.next(51) != mrg1.next(51)\n            || mrg0.nextLong() != mrg1.nextLong()\n            || mrg0.nextFloat() != mrg1.nextFloat()\n            || mrg0.nextDouble() != mrg1.nextDouble()\n            || mrg0.nextGaussian() != mrg1.nextGaussian()\n        ) {\n            System.err.println(\"Unbelieveable!!\");\n"
                            }
                          }
                        },
                        "message": {
                          "text": "nextDouble()"
                        }
                      },
                      "kinds": [
                        "call",
                        "function"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "index": 743
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 42
                }
              }
            }
          ]
        }
      ],
      "automationDetails": {
        "id": "Fortify/"
      },
      "columnKind": "utf16CodeUnits"
    }
  ]
}