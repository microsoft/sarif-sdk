{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Contrast Security",
          "rules": [
            {
              "id": "cache-controls-missing",
              "name": "Anti-Caching Controls Missing",
              "shortDescription": {
                "text": "Verifies caching controls are used to protect application content."
              },
              "messageStrings": {
                "default": {
                  "text": "{0} page Cache-Control header(s) did not contain 'no-store' or 'no-cache'; e.g., the value in page '{1}' was observed to be '{2}'."
                }
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "unvalidated forward",
              "name": "Arbitrary Server Side Forwards",
              "shortDescription": {
                "text": "Verifies no untrusted data is used to build a path used in forwards."
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "authorization-rules-misordered",
              "name": "Authorization Rules Misordered",
              "shortDescription": {
                "text": "Verifies the application's authorization rules do not include an allow all user rule before a deny rule."
              }
            },
            {
              "id": "authorization-missing-deny",
              "name": "Authorization Rules Missing Deny Rule",
              "shortDescription": {
                "text": "Verifies the application's authorization rules include a deny rule."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in '{0}' is missing a <deny> rule in the <authorization> section."
                },
                "underLocation": {
                  "text": "The configuration under location '{0}' in '{1}' is missing a <deny> rule in the <authorization> section."
                }
              }
            },
            {
              "id": "cache-control-disabled",
              "name": "Cache Control Header Disabled",
              "shortDescription": {
                "text": "Verifies the application does not disable the cache control header which helps prevent disclosure of sensitive information via the browser cache."
              }
            },
            {
              "id": "reflected-xss",
              "name": "Cross-Site Scripting",
              "shortDescription": {
                "text": "Verifies no untrusted data is used in generated HTML pages."
              },
              "messageStrings": {
                "default": {
                  "text": "A cross-site scripting vulnerability was seen as untrusted data '{0}' on '{1}' was observed going into the HTTP response without validation or encoding."
                },
                "hasControlId": {
                  "text": "A cross-site scripting vulnerability was seen as untrusted data '{0}' on  '{1}' was accessed within '{2}' control and observed going into the HTTP response without validation or encoding."
                }
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "custom-errors-off",
              "name": "Detailed Error Messages Displayed",
              "shortDescription": {
                "text": "Verifies the application does not inadvertently reveal sensitive or technical information to an attacker via detailed error messages."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in '{0}' has 'mode' set to 'Off' in the <customErrors> section."
                }
              }
            },
            {
              "id": "event-validation-disabled",
              "name": "Event Validation Disabled",
              "shortDescription": {
                "text": "Verifies the application does not disable ASP.NET event validation."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in '{0}' has 'enableEventValidation' set to 'false' in the page directive."
                }
              }
            },
            {
              "id": "session-regenerate",
              "name": "Expired Session IDs Not Regenerated",
              "shortDescription": {
                "text": "Verifies the application generates new session IDs rather than allowing attackers to use expired session IDs."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "forms-auth-redirect",
              "name": "Forms Authentication Cross-App Redirect",
              "shortDescription": {
                "text": "Verifies the application does not allow for cross-app redirects for authentication which can expose the forms authentication ticket in the URL."
              }
            },
            {
              "id": "forms-auth-protection",
              "name": "Forms Authentication Protection Mode",
              "shortDescription": {
                "text": "Verifies the application is using both encryption and validation for forms authentication."
              }
            },
            {
              "id": "forms-auth-ssl",
              "name": "Forms Authentication SSL",
              "shortDescription": {
                "text": "Verifies forms authentication requests must be submitted over SSL."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in '{0}' is configured to use forms authentication and 'requireSSL' is not set to 'true' in an <authentication> section."
                }
              }
            },
            {
              "id": "autocomplete-missing",
              "name": "Forms Without Autocomplete Prevention",
              "shortDescription": {
                "text": "Verifies browsers are notified that the application doesn't want to use autocomplete for the given fields."
              },
              "messageStrings": {
                "default": {
                  "text": "{0} pages contain a <form> element that do examplePage, //not have 'autocomplete' set to 'off'; e.g. '{1}'."
                }
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "header-checking-disabled",
              "name": "Header Checking Disabled",
              "shortDescription": {
                "text": "Verifies the application does not disable ASP.NET's defense against header injection."
              }
            },
            {
              "id": "header-injection",
              "name": "Header Injection",
              "shortDescription": {
                "text": "Verifies untrusted data is not used in an HTTP header."
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "http-only-disabled",
              "name": "HttpOnly Cookie Flag Disabled",
              "shortDescription": {
                "text": "Verifies the HttpOnly flag is not disabled for cookies issued by the application."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in '{0}' has 'httpOnlyCookies' set to 'false' in an <httpCookies> section."
                }
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "insecure-auth-protocol",
              "name": "Insecure Authentication Protocol",
              "shortDescription": {
                "text": "Verifies applications don't use weak HTTP authentication protocols."
              }
            },
            {
              "id": "crypto-bad-cyphers",
              "name": "Insecure Encryption Algorithms",
              "shortDescription": {
                "text": "Verifies only strong cryptographic algorithms are used."
              },
              "messageStrings": {
                "default": {
                  "text": "'{0}' obtained a handle to the cryptographically insecure '{1}' algorithm."
                }
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "crypto-bad-mac",
              "name": "Insecure Hash Algorithms",
              "shortDescription": {
                "text": "Verifies only strong hash algorithms are used."
              },
              "messageStrings": {
                "default": {
                  "text": "'{0}' obtained a handle to the '{1}' hash algorithm, which is considered insecure."
                }
              }
            },
            {
              "id": "max-request-length",
              "name": "Large Max Request Length",
              "shortDescription": {
                "text": "Verifies the application does not allow large requests which could lead to denial of service attacks."
              }
            },
            {
              "id": "ldap-injection",
              "name": "LDAP Injection",
              "shortDescription": {
                "text": "Verifies no untrusted data is used in dynamic LDAP queries."
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "log-injection",
              "name": "Log Injection",
              "shortDescription": {
                "text": "Verifies no untrusted data is put into log files."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "cmd-injection",
              "name": "OS Command Injection",
              "shortDescription": {
                "text": "Verifies no untrusted data is used in commands sent to the operating system."
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "session-timeout",
              "name": "Overly Long Session Timeout",
              "shortDescription": {
                "text": "Verifies HTTP sessions are terminated after reasonable idle periods."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in the <{0}> section of '{1}' specified a session timeout value greater than 30 minutes. Session timeouts greater than 30 minutes give attackers extra time to complete attacks and exploits. Specifically, overly long sessions make applications more susceptible to session hijacking and cross-user web attacks, such as Cross-Site Request Forgery (CSRF) and Cross-Site Scripting (XSS). Most sensitive applications in finance, commerce and other security intensive industries tend to specify session timeouts between 15 and 30 minutes."
                }
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "clickjacking-control-missing",
              "name": "Pages Without Anti-Clickjacking Controls",
              "shortDescription": {
                "text": "Verifies frame-breaking controls are used on every page."
              },
              "messageStrings": {
                "default": {
                  "text": "{0} page(s) have insufficient anti-clickjacking controls, e.g. '{1}'."
                }
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "parameter-pollution",
              "name": "Parameter Pollution",
              "shortDescription": {
                "text": "Verifies HTML form tags don't allow attackers to fixate parameter variables and bypass CSRF controls."
              }
            },
            {
              "id": "path-traversal",
              "name": "Path Traversal",
              "shortDescription": {
                "text": "Verifies file paths containing untrusted data are not accessed."
              },
              "messageStrings": {
                "default": {
                  "text": "An attacker-controlled path traversal was observed from '{0}' on page '{1}'."
                }
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "request-validation-disabled",
              "name": "Request Validation Disabled",
              "shortDescription": {
                "text": "Verifies the application does not disable ASP.NET's Request Validation feature which helps prevent several attacks such as cross-site scripting."
              },
              "messageStrings": {
                "default": {
                  "text": "The web page '{0}' has 'ValidateRequest' set to 'false' in the page directive. Request Validation helps prevent several types of attacks including XSS by detecting potentially dangerous character sequences. An exception is thrown by the framework when a potentially dangerous character sequence is encountered. This exception returns an error page to the user and prevents the application from processing the request. An attacker can submit malicious data to the application that may be processed without further input validation. This malicious data could contain XSS or other injection attacks that may have been prevented by ASP.NET request validation. Note that request validation does not provide 100% protection against XSS or other attacks and should be thought of as a defense-in-depth measure."
                }
              }
            },
            {
              "id": "request-validation-control-disabled",
              "name": "Request Validation Mode Disabled",
              "shortDescription": {
                "text": "Verifies the application does not disable ASP.NET's Request Validation feature for web controls which helps prevent several attacks such as cross-site scripting."
              },
              "messageStrings": {
                "default": {
                  "text": "A control on the web page '{0}' has 'ValidateRequestMode' set to 'Disabled'. Request Validation helps prevent several types of attacks including XSS by detecting potentially dangerous character sequences. An exception is thrown by the framework when a potentially dangerous character sequence is encountered. This exception returns an error page to the user and prevents the application from processing the request. An attacker can submit malicious data to the application that may be processed without further input validation. This malicious data could contain XSS or other injection attacks that may have been prevented by ASP.NET request validation. Note that request validation does not provide 100% protection against XSS or other attacks and should be thought of as a defense-in-depth measure."
                }
              }
            },
            {
              "id": "csp-header-insecure",
              "name": "Response With Insecurely Configured Content-Security-Policy Header",
              "shortDescription": {
                "text": "Verifies the requests sent by the application have the Content-Security-Policy header set in a restrictive way."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "xssprotection-header-disabled",
              "name": "Response With X-XSS-Protection Disabled",
              "shortDescription": {
                "text": "Verifies the requests sent by the application have the X-XSS-Protection header left default (secure) or set correctly."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "csp-header-missing",
              "name": "Response Without Content-Security-Policy Header",
              "shortDescription": {
                "text": "Verifies the requests sent by the application have the Content-Security-Policy or Content-Security-Policy-Read-Only header set."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "xcontenttype-header-missing",
              "name": "Response Without X-Content-Type-Options Header",
              "shortDescription": {
                "text": "Verifies the requests sent by the application have the X-Content-Type-Options header set correctly."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "role-manager-protection",
              "name": "Role Manager Protection Mode",
              "shortDescription": {
                "text": "Verifies the application is using both encryption and validation to protect role cookie."
              }
            },
            {
              "id": "role-manager-ssl",
              "name": "Role Manager SSL",
              "shortDescription": {
                "text": "Verifies role manager cookies will only be submitted over SSL."
              }
            },
            {
              "id": "httponly",
              "name": "Session Cookie Has No 'HttpOnly' Flag",
              "shortDescription": {
                "text": "Verifies session cookies have the HttpOnly flag."
              }
            },
            {
              "id": "secure-flag-missing",
              "name": "Session Cookie Has No 'secure' Flag",
              "shortDescription": {
                "text": "Verifies session cookies have the secure flag."
              },
              "messageStrings": {
                "default": {
                  "text": "The value of the HttpCookie for the cookie '{0}' did not contain the 'secure' flag; the value observed was '{1}'."
                }
              }
            },
            {
              "id": "session-rewriting",
              "name": "Session Rewriting",
              "shortDescription": {
                "text": "Verifies session IDs aren't being rewritten in the URL."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in the {0} section of '{1}' has 'UseCookies' set to a value other than 'cookieless'. As a result, the session ID (which is as good as a username and password) is logged to browser history, server logs and proxy logs. More serious, session rewriting can enable session fixcation attacks, in which an attacker causes a victim to use a well-known session id. If the victim authenticates under the attacker's chosen session ID, the attacker can present that session ID to the server and be recognized as the victim."
                }
              }
            },
            {
              "id": "sql-injection",
              "name": "SQL Injection",
              "shortDescription": {
                "text": "Verifies no untrusted data is used in dynamic database queries."
              },
              "messageStrings": {
                "default": {
                  "text": "SQL injection from untrusted source(s) '{0}' observed on '{1}' page. Untrusted data flowed from '{2}' to dangerous sink '{3}' from a call site in '{4}'."
                }
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "stored-xss",
              "name": "Stored Cross-Site Scripting",
              "shortDescription": {
                "text": "Verifies no untrusted data which was stored in a database is displayed in generated HTML pages."
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "trace-enabled",
              "name": "Tracing Enabled",
              "shortDescription": {
                "text": "Verifies the application does not inadvertently reveal technical details and sensitive request information via the ASP.NET Tracing feature."
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "trace-enabled-aspx",
              "name": "Tracing Enabled for ASPX",
              "shortDescription": {
                "text": "Verifies the application does not inadvertently reveal technical details via the ASP.NET Tracing feature for a single ASPX page."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "trust-boundary-violation",
              "name": "Trust Boundary Violation",
              "shortDescription": {
                "text": "Verifies untrusted data is not used in the HTTP session."
              }
            },
            {
              "id": "plaintext-conn-strings",
              "name": "Unprotected Connection Strings",
              "shortDescription": {
                "text": "Verifies connection strings stored in web.config are encrypted."
              }
            },
            {
              "id": "unvalidated-redirect",
              "name": "Unvalidated Redirect",
              "shortDescription": {
                "text": "Verifies requests are not redirected using untrusted data."
              }
            },
            {
              "id": "version-header-enabled",
              "name": "Version Header Enabled",
              "shortDescription": {
                "text": "Verifies the application does not send the ASP.NET version header."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in '{0}' does not explicitly disable 'enableVersionHeader' in the <httpRuntime> section. This attribute value defaults to 'true' when absent. The application will send the version header with all responses and this information may help an attacker refine their attacks. This header is used by Visual Studio to determine which version of ASP.NET is in use. It is not necessary for production sites and can be disabled."
                }
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "viewstate-encryption-disabled",
              "name": "Viewstate Encryption Disabled",
              "shortDescription": {
                "text": "Verifies that the application does not globally disable encryption of viewstate."
              }
            },
            {
              "id": "viewstate-mac-disabled",
              "name": "Viewstate MAC Validation Disabled",
              "shortDescription": {
                "text": "Verifies the application prevents attackers from modifying viewstate values."
              }
            },
            {
              "id": "wcf-exception-details",
              "name": "WCF Exception Details",
              "shortDescription": {
                "text": "Verifies the application does not expose exception details for hosted WCF services."
              }
            },
            {
              "id": "wcf-detect-replays",
              "name": "WCF Replay Detection Not Enabled",
              "shortDescription": {
                "text": "Verifies the application uses replay detection for custom bindings."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "wcf-metdata-enabled",
              "name": "WCF Service Metadata Enabled",
              "shortDescription": {
                "text": "Verifies the application does not publish metadata for hosted WCF services."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "weak-membership-config",
              "name": "Weak Membership Configuration",
              "shortDescription": {
                "text": "Verifies membership authentication is configured to help withstand password brute force attacks."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "crypto-weak-randomness",
              "name": "Weak Random Number Generation",
              "shortDescription": {
                "text": "Verifies weak sources of entropy are not used."
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "compilation-debug",
              "name": "Web Application Deployed in Debug Mode",
              "shortDescription": {
                "text": "Verifies the application is not deployed in debug mode."
              },
              "messageStrings": {
                "default": {
                  "text": "The configuration in '{0}' had 'debug' set to 'true' in the <compilation> section."
                }
              },
              "defaultConfiguration": {
                "level": "note"
              }
            },
            {
              "id": "xxe",
              "name": "XML External Entity Injection (XXE)",
              "shortDescription": {
                "text": "Verifies external entities aren't processed during XML."
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "id": "xpath-injection",
              "name": "XPath Injection",
              "shortDescription": {
                "text": "Verifies no untrusted data is used in XPath expression used to retrieve data from an XML database."
              },
              "defaultConfiguration": {
                "level": "error"
              }
            }
          ]
        }
      },
      "columnKind": "utf16CodeUnits"
    }
  ]
}