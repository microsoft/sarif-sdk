// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.Globalization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Microsoft.CodeAnalysis.Sarif.Converters
{
    // <auto-generated />
    // To parse this JSON data use var hdfFile = HdfFile.FromJson(jsonString)
    public partial class HdfFile
    {
        [JsonProperty("platform", Required = Required.Always)]
        public Platform Platform { get; set; }

        [JsonProperty("profiles", Required = Required.Always)]
        public List<ExecJsonProfile> Profiles { get; set; }

        [JsonProperty("statistics", Required = Required.Always)]
        public Statistics Statistics { get; set; }

        [JsonProperty("version", Required = Required.Always)]
        public string Version { get; set; }
    }

    public partial class Platform
    {
        /// <summary>
        /// The name of the platform this was run on.
        /// </summary>
        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        /// <summary>
        /// The version of the platform this was run on.
        /// </summary>
        [JsonProperty("release", Required = Required.Always)]
        public string Release { get; set; }

        [JsonProperty("target_id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetId { get; set; }
    }

    public partial class ExecJsonProfile
    {
        [JsonProperty("attributes", Required = Required.Always)]
        public List<Dictionary<string, object>> Attributes { get; set; }

        [JsonProperty("controls", Required = Required.Always)]
        public List<ExecJsonControl> Controls { get; set; }

        [JsonProperty("copyright", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        [JsonProperty("copyright_email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CopyrightEmail { get; set; }

        [JsonProperty("depends", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Dependency> Depends { get; set; }

        [JsonProperty("description", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("groups", Required = Required.Default)]
        public List<ControlGroup> Groups { get; set; }

        [JsonProperty("inspec_version", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string InspecVersion { get; set; }

        [JsonProperty("license", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string License { get; set; }

        [JsonProperty("maintainer", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Maintainer { get; set; }

        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("parent_profile", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ParentProfile { get; set; }

        [JsonProperty("sha256", Required = Required.Always)]
        public string Sha256 { get; set; }

        [JsonProperty("skip_message", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SkipMessage { get; set; }

        [JsonProperty("status", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("summary", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Summary { get; set; }

        [JsonProperty("supports", Required = Required.Always)]
        public List<SupportedPlatform> Supports { get; set; }

        [JsonProperty("title", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("version", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }
    }

    public partial class ExecJsonControl
    {
        /// <summary>
        /// The raw source code of the control. Note that if this is an overlay control, it does not
        /// include the underlying source code
        /// </summary>
        [JsonProperty("code", Required = Required.Always)]
        public string Code { get; set; }

        [JsonProperty("desc", Required = Required.Default)]
        public string Desc { get; set; }

        [JsonProperty("descriptions", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ControlDescription> Descriptions { get; set; }

        /// <summary>
        /// The ID of this control
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        [JsonProperty("impact", Required = Required.Always)]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double Impact { get; set; }

        [JsonProperty("refs", Required = Required.Default)]
        public List<Reference> Refs { get; set; }

        /// <summary>
        /// A list of all results of the controls describe blocks.
        ///
        /// For instance, if in the controls code we had the following:
        /// describe sshd_config do
        /// its('Port') { should cmp 22 }
        /// end
        /// The result of this block as a ControlResult would be appended to the results list.
        /// </summary>
        [JsonProperty("results", Required = Required.Always)]
        public List<ControlResult> Results { get; set; }

        [JsonProperty("source_location", Required = Required.Always)]
        public SourceLocation SourceLocation { get; set; }

        [JsonProperty("tags", Required = Required.Always)]
        public Dictionary<string, object> Tags { get; set; }

        [JsonProperty("title", Required = Required.Default)]
        public string Title { get; set; }

        [JsonProperty("waiver_data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public WaiverData WaiverData { get; set; }
    }

    public partial class ControlDescription
    {
        [JsonProperty("data", Required = Required.Default)]
        public string Data { get; set; }

        [JsonProperty("label", Required = Required.Default)]
        public string Label { get; set; }
    }

    public partial class Reference
    {
        [JsonProperty("ref", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Ref? Ref { get; set; }

        [JsonProperty("url", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("uri", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Uri { get; set; }
    }

    public partial class ControlResult
    {
        [JsonProperty("backtrace")]
        public List<string> Backtrace { get; set; }

        [JsonProperty("code_desc", Required = Required.Always)]
        public string CodeDesc { get; set; }

        [JsonProperty("exception", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Exception { get; set; }

        [JsonProperty("message", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("resource", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Resource { get; set; }

        [JsonProperty("run_time", Required = Required.Default)]
        public double RunTime { get; set; }

        [JsonProperty("skip_message", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SkipMessage { get; set; }

        [JsonProperty("start_time", Required = Required.Default)]
        public string StartTime { get; set; }

        [JsonProperty("status", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ControlResultStatus? Status { get; set; }
    }

    public partial class SourceLocation
    {
        /// <summary>
        /// The line at which this statement is located in the file
        /// </summary>
        [JsonProperty("line", Required = Required.Default)]
        public double Line { get; set; }

        /// <summary>
        /// Path to the file that this statement originates from
        /// </summary>
        [JsonProperty("ref", Required = Required.Default)]
        public string Ref { get; set; }
    }

    public partial class WaiverData
    {
        [JsonProperty("expiration_date", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ExpirationDate { get; set; }

        [JsonProperty("justification", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Justification { get; set; }

        [JsonProperty("message", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("run", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Run { get; set; }

        [JsonProperty("skipped_due_to_waiver", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public SkippedDueToWaiver? SkippedDueToWaiver { get; set; }
    }

    public partial class Dependency
    {
        [JsonProperty("branch", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Branch { get; set; }

        [JsonProperty("compliance", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Compliance { get; set; }

        [JsonProperty("git", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Git { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("path", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Path { get; set; }

        [JsonProperty("skip_message", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SkipMessage { get; set; }

        [JsonProperty("status", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("supermarket", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Supermarket { get; set; }

        [JsonProperty("url", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }
    }

    public partial class ControlGroup
    {
        /// <summary>
        /// The control IDs in this group
        /// </summary>
        [JsonProperty("controls", Required = Required.Always)]
        public List<string> Controls { get; set; }

        /// <summary>
        /// The unique identifier of the group
        /// </summary>
        [JsonProperty("id", Required = Required.Always)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the group
        /// </summary>
        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class SupportedPlatform
    {
        [JsonProperty("os-family", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string OsFamily { get; set; }

        [JsonProperty("os-name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string OsName { get; set; }

        [JsonProperty("platform", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Platform { get; set; }

        [JsonProperty("platform-family", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PlatformFamily { get; set; }

        [JsonProperty("platform-name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string PlatformName { get; set; }

        [JsonProperty("release", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Release { get; set; }
    }

    public partial class Statistics
    {
        /// <summary>
        /// Breakdowns of control statistics by result
        /// </summary>
        [JsonProperty("controls", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public StatisticHash Controls { get; set; }

        /// <summary>
        /// How long (in seconds) this inspec exec ran for.
        /// </summary>
        [JsonProperty("duration", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }
    }

    /// <summary>
    /// Breakdowns of control statistics by result
    /// </summary>
    public partial class StatisticHash
    {
        [JsonProperty("failed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public StatisticBlock Failed { get; set; }

        [JsonProperty("passed", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public StatisticBlock Passed { get; set; }

        [JsonProperty("skipped", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public StatisticBlock Skipped { get; set; }
    }

    public partial class StatisticBlock
    {
        /// <summary>
        /// Total number of controls (in this category) for this inspec execution.
        /// </summary>
        [JsonProperty("total", Required = Required.Default)]
        public double Total { get; set; }
    }

    public enum ControlResultStatus { Error, Failed, Passed, Skipped };

    public partial struct Ref
    {
        public List<Dictionary<string, object>> AnythingMapArray;
        public string String;

        public static implicit operator Ref(List<Dictionary<string, object>> AnythingMapArray)
        {
            return new Ref { AnythingMapArray = AnythingMapArray };
        }

        public static implicit operator Ref(string String)
        {
            return new Ref { String = String };
        }
    }

    public partial struct SkippedDueToWaiver
    {
        public bool? Bool;
        public string String;

        public static implicit operator SkippedDueToWaiver(bool Bool)
        {
            return new SkippedDueToWaiver { Bool = Bool };
        }

        public static implicit operator SkippedDueToWaiver(string String)
        {
            return new SkippedDueToWaiver { String = String };
        }
    }

    public partial class HdfFile
    {
        public static HdfFile FromJson(string json) => JsonConvert.DeserializeObject<HdfFile>(json, Microsoft.CodeAnalysis.Sarif.Converters.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this HdfFile self) => JsonConvert.SerializeObject(self, Microsoft.CodeAnalysis.Sarif.Converters.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RefConverter.Singleton,
                ControlResultStatusConverter.Singleton,
                SkippedDueToWaiverConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxValueCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double) || t == typeof(double?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null)
            {
                return null;
            }

            double value = serializer.Deserialize<double>(reader);
            return value >= 0 && value <= 1 ? value : throw new Exception("Cannot unmarshal type double");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            double value = (double)untypedValue;
            if (value >= 0 && value <= 1)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly MinMaxValueCheckConverter Singleton = new MinMaxValueCheckConverter();
    }

    internal class RefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Ref) || t == typeof(Ref?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    string stringValue = serializer.Deserialize<string>(reader);
                    return new Ref { String = stringValue };
                case JsonToken.StartArray:
                    List<Dictionary<string, object>> arrayValue = serializer.Deserialize<List<Dictionary<string, object>>>(reader);
                    return new Ref { AnythingMapArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Ref");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Ref)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingMapArray != null)
            {
                serializer.Serialize(writer, value.AnythingMapArray);
                return;
            }
            throw new Exception("Cannot marshal type Ref");
        }

        public static readonly RefConverter Singleton = new RefConverter();
    }

    internal class ControlResultStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ControlResultStatus) || t == typeof(ControlResultStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null)
            {
                return null;
            }

            string value = serializer.Deserialize<string>(reader);
            return value switch
            {
                "error" => ControlResultStatus.Error,
                "failed" => ControlResultStatus.Failed,
                "passed" => ControlResultStatus.Passed,
                "skipped" => ControlResultStatus.Skipped,
                _ => throw new Exception("Cannot unmarshal type ControlResultStatus"),
            };
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ControlResultStatus)untypedValue;
            switch (value)
            {
                case ControlResultStatus.Error:
                    serializer.Serialize(writer, "error");
                    return;
                case ControlResultStatus.Failed:
                    serializer.Serialize(writer, "failed");
                    return;
                case ControlResultStatus.Passed:
                    serializer.Serialize(writer, "passed");
                    return;
                case ControlResultStatus.Skipped:
                    serializer.Serialize(writer, "skipped");
                    return;
            }
            throw new Exception("Cannot marshal type ControlResultStatus");
        }

        public static readonly ControlResultStatusConverter Singleton = new ControlResultStatusConverter();
    }

    internal class SkippedDueToWaiverConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SkippedDueToWaiver) || t == typeof(SkippedDueToWaiver?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    bool boolValue = serializer.Deserialize<bool>(reader);
                    return new SkippedDueToWaiver { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    string stringValue = serializer.Deserialize<string>(reader);
                    return new SkippedDueToWaiver { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type SkippedDueToWaiver");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SkippedDueToWaiver)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type SkippedDueToWaiver");
        }

        public static readonly SkippedDueToWaiverConverter Singleton = new SkippedDueToWaiverConverter();
    }
}
