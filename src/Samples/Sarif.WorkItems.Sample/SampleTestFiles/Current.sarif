{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.4.json",
  "version": "2.1.0",
  "runs": [
    {
      "results": [
        {
          "ruleId": "BA2008",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "Native_x64_VS2015_Default.dll"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x64_VS2015_Default.dll",
                  "index": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "Native_x64_VS2015_Default.dll",
              ".textbss"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x64_VS2015_Default.dll",
                  "index": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "id": "Error_InsufficientWarningLevel",
            "arguments": [
              "Native_x86_VS2015_AtlProxyStubPS.dll",
              "1",
              "-c -Zi -nologo -W1 -WX- -O2 -Oy- -DWIN32 -DREGISTER_PROXY_DLL -DNDEBUG -D_WINDLL -D_UNICODE -DUNICODE -Gm- -EHs -EHc -MD -GS -fp:precise -Zc:wchar_t -Zc:forScope -Zc:inline -Gd -TC -analyze- -errorreport:prompt -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\" -I\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\atlmfc\\include\" -I\"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\" -I\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\winrt\" -X",
              "dlldata.obj [warning level: 1]\r\nNative_x86_VS2015_AtlProxyStub_p.obj [warning level: 1]\r\n"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2015_AtlProxyStubPS.dll",
                  "index": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "Native_x86_VS2015_AtlProxyStubPS.dll"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2015_AtlProxyStubPS.dll",
                  "index": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "Native_x86_VS2015_Default_Debug.dll"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2015_Default_Debug.dll",
                  "index": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "Native_x86_VS2015_Default_Debug.dll",
              "has an empty SE handler table in the load configuration table"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2015_Default_Debug.dll",
                  "index": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "id": "Error",
            "arguments": [
              "Native_x86_VS2015_Default_Debug.dll",
              ".textbss"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2015_Default_Debug.dll",
                  "index": 12
                }
              }
            }
          ]
        }
      ],
      "tool": {
        "driver": {
          "name": "binskim",
          "fullName": "binskim 1.6.0.0",
          "version": "1.6.0.0",
          "semanticVersion": "1.6.0",
          "rules": [
            {
              "id": "BA2008",
              "fullDescription": {
                "text": "Binaries should enable the compiler control guard feature (CFG) at build time to prevent attackers from redirecting execution to unexpected, unsafe locations. CFG analyzes and discovers all indirect-call instructions at compilation and link time. It also injects a check that precedes every indirect call in code that ensures the target is an expected, safe location.  If that check fails at runtime, the operating system will close the program."
              },
              "helpUri": "https://github.com/microsoft/binskim",
              "help": {
                "text": "Binaries should enable the compiler control guard feature (CFG) at build time to prevent attackers from redirecting execution to unexpected, unsafe locations. CFG analyzes and discovers all indirect-call instructions at compilation and link time. It also injects a check that precedes every indirect call in code that ensures the target is an expected, safe location.  If that check fails at runtime, the operating system will close the program."
              },
              "messageStrings": {
                "Pass": {
                  "text": "'{0}' enables the control flow guard mitigation. As a result, the operating system will force an application to close if an attacker is able to redirect execution in the component to an unexpected location."
                },
                "Error": {
                  "text": "'{0}' does not enable the control flow guard (CFG) mitigation. To resolve this issue, pass /GUARD:CF on both the compiler and linker command lines. Binaries also require the /DYNAMICBASE linker option in order to enable CFG."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                },
                "NotApplicable_UnsupportedKernelModeVersion": {
                  "text": "'{0}' is a kernel mode portable executable compiled for a version of Windows that does not support the control flow guard feature for kernel mode binaries."
                }
              },
              "shortDescription": {
                "text": "Binaries should enable the compiler control guard feature (CFG) at build time to prevent attackers from redirecting execution to unexpected, unsafe locations."
              },
              "name": "EnableControlFlowGuard",
              "properties": {
                "equivalentBinScopeRuleReadableName": "ControlFlowGuardCheck"
              }
            },
            {
              "id": "BA2021",
              "fullDescription": {
                "text": "PE sections should not be marked as both writable and executable. This condition makes it easier for an attacker to exploit memory corruption vulnerabilities, as it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your tools to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes. Be sure to disable incremental linking in release builds, as this feature creates a writable and executable section named '.textbss' in order to function."
              },
              "helpUri": "https://github.com/microsoft/binskim",
              "help": {
                "text": "PE sections should not be marked as both writable and executable. This condition makes it easier for an attacker to exploit memory corruption vulnerabilities, as it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your tools to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes. Be sure to disable incremental linking in release builds, as this feature creates a writable and executable section named '.textbss' in order to function."
              },
              "messageStrings": {
                "Pass": {
                  "text": "'{0}' contains no data or code sections marked as both shared and executable, helping to prevent the exploitation of code vulnerabilities."
                },
                "Error": {
                  "text": "'{0}' contains PE section(s) ({1}) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your tools to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes. Enabling incremental linking via the /INCREMENTAL argument (the default for Microsoft Visual Studio debug build) can also result in a writable and executable section named 'textbss'. For this case, disable incremental linking (or analyze an alternate build configuration that disables this feature) to resolve the problem."
                },
                "Error_UnexpectedSectionAligment": {
                  "text": "'{0}' has a section alignment ({1}) that is smaller than page size ({2})."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "shortDescription": {
                "text": "PE sections should not be marked as both writable and executable."
              },
              "name": "DoNotMarkWritableSectionsAsExecutable",
              "properties": {
                "equivalentBinScopeRuleReadableName": "WXCheck"
              }
            },
            {
              "id": "BA2007",
              "fullDescription": {
                "text": "Binaries should be compiled with a warning level that enables all critical security-relevant checks. Enabling at least warning level 3 enables important static analysis in the compiler that can identify bugs with a potential to provoke memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted."
              },
              "helpUri": "https://github.com/microsoft/binskim",
              "help": {
                "text": "Binaries should be compiled with a warning level that enables all critical security-relevant checks. Enabling at least warning level 3 enables important static analysis in the compiler that can identify bugs with a potential to provoke memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted."
              },
              "messageStrings": {
                "Pass": {
                  "text": "'{0}' was compiled at a secure warning level ({1}) and does not include any modules that disable specific warnings that are required by policy. As a result, it is less likely that memory corruption, information disclosure, double-free and other security-related vulnerabilities exist in code."
                },
                "Error_WarningsDisabled": {
                  "text": "'{0}' disables compiler warning(s) which are required by policy. A compiler warning is typically required if it has a high likelihood of flagging memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, enable the indicated warning(s) by removing /Wxxxx switches (where xxxx is a warning id indicated here) from your command line, and resolve any warnings subsequently raised during compilation. An example compiler command line triggering this check was: {1}\r\nModules triggering this check were:\r\n{2}"
                },
                "Error_InsufficientWarningLevel": {
                  "text": "'{0}' was compiled at too low a warning level (effective warning level {1} for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: {2}\r\nModules triggering this check: {3}"
                },
                "Error_UnknownModuleLanguage": {
                  "text": "'{0}' contains code from an unknown language, preventing a comprehensive analysis of the compiler warning settings. The language could not be identified for the following modules: {1}"
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "shortDescription": {
                "text": "Binaries should be compiled with a warning level that enables all critical security-relevant checks."
              },
              "name": "EnableCriticalCompilerWarnings",
              "properties": {
                "equivalentBinScopeRuleReadableName": "CompilerWarningsCheck"
              }
            },
            {
              "id": "BA2018",
              "fullDescription": {
                "text": "X86 binaries should enable the SafeSEH mitigation to minimize exploitable memory corruption issues. SafeSEH makes it more difficult to exploit vulnerabilities that permit overwriting SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64."
              },
              "helpUri": "https://github.com/microsoft/binskim",
              "help": {
                "text": "X86 binaries should enable the SafeSEH mitigation to minimize exploitable memory corruption issues. SafeSEH makes it more difficult to exploit vulnerabilities that permit overwriting SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64."
              },
              "messageStrings": {
                "Pass": {
                  "text": "'{0}' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode)."
                },
                "Pass_NoSEH": {
                  "text": "'{0}' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode."
                },
                "Error": {
                  "text": "'{0}' is an x86 binary which {1}, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64."
                },
                "NotApplicable_InvalidMetadata": {
                  "text": "'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed metadata: {2}."
                }
              },
              "shortDescription": {
                "text": "X86 binaries should enable the SafeSEH mitigation to minimize exploitable memory corruption issues."
              },
              "name": "EnableSafeSEH",
              "properties": {
                "equivalentBinScopeRuleReadableName": "SafeSEHCheck"
              }
            }
          ],
          "properties": {
            "Comments": "A security and correctness analyzer for portable executable and MSIL formats.",
            "CompanyName": "Microsoft",
            "ProductName": "BinSkim Portable Executable Analyzer"
          }
        }
      },
      "invocations": [
        {
          "toolConfigurationNotifications": [
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' because its PDB could not be loaded. (E_PDB_NOT_FOUND (File not found))"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2002"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'BuildWithSecureTools' because its PDB could not be loaded. (E_PDB_NOT_FOUND (File not found))"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2006"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' because its PDB could not be loaded. (E_PDB_NOT_FOUND (File not found))"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2007"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableStackProtection' because its PDB could not be loaded. (E_PDB_NOT_FOUND (File not found))"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2011"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'InitializeStackProtection' because its PDB could not be loaded. (E_PDB_NOT_FOUND (File not found))"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2013"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' because its PDB could not be loaded. (E_PDB_NOT_FOUND (File not found))"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2014"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableSpectreMitigations' because its PDB could not be loaded. (E_PDB_NOT_FOUND (File not found))"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2024"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2017_15.5.4_PdbStripped.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'Native_x86_VS2017_15.5.4_PdbStripped.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' because its PDB could not be loaded. (Pdb is stripped of cv (CodeView) info)"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2002"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2017_15.5.4_PdbStripped.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'Native_x86_VS2017_15.5.4_PdbStripped.dll' was not evaluated for check 'BuildWithSecureTools' because its PDB could not be loaded. (Pdb is stripped of cv (CodeView) info)"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2006"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2017_15.5.4_PdbStripped.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'Native_x86_VS2017_15.5.4_PdbStripped.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' because its PDB could not be loaded. (Pdb is stripped of cv (CodeView) info)"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2007"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2017_15.5.4_PdbStripped.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'Native_x86_VS2017_15.5.4_PdbStripped.dll' was not evaluated for check 'EnableStackProtection' because its PDB could not be loaded. (Pdb is stripped of cv (CodeView) info)"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2011"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2017_15.5.4_PdbStripped.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'Native_x86_VS2017_15.5.4_PdbStripped.dll' was not evaluated for check 'InitializeStackProtection' because its PDB could not be loaded. (Pdb is stripped of cv (CodeView) info)"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2013"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2017_15.5.4_PdbStripped.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'Native_x86_VS2017_15.5.4_PdbStripped.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' because its PDB could not be loaded. (Pdb is stripped of cv (CodeView) info)"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2014"
              }
            },
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2017_15.5.4_PdbStripped.dll"
                    }
                  }
                }
              ],
              "message": {
                "text": "'Native_x86_VS2017_15.5.4_PdbStripped.dll' was not evaluated for check 'EnableSpectreMitigations' because its PDB could not be loaded. (Pdb is stripped of cv (CodeView) info)"
              },
              "level": "error",
              "descriptor": {
                "id": "ERR997.ExceptionLoadingPdb"
              },
              "associatedRule": {
                "id": "BA2024"
              }
            }
          ],
          "executionSuccessful": false
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/ManagedInteropAssemblyForAtlTestLibrary.dll",
            "index": 0
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/ManagedResourcesOnly.dll",
            "index": 1
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Managed_x86_VS2015_FSharp.dll",
            "index": 2
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x64_VS2013_Default.dll",
            "index": 3
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll",
            "index": 4
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_ARM_VS2015_CvtresResourceOnly.dll",
            "index": 5
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x64_VS2013_Default.dll",
            "index": 6
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x64_VS2015_CvtresResourceOnly.dll",
            "index": 7
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x64_VS2015_Default.dll",
            "index": 8
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2013_ResourceOnly.dll",
            "index": 9
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2015_AtlProxyStubPS.dll",
            "index": 10
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2015_CvtresResourceOnly.dll",
            "index": 11
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2015_Default_Debug.dll",
            "index": 12
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Native_x86_VS2017_15.5.4_PdbStripped.dll",
            "index": 13
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Uwp_ARM_VS2015_DefaultBlankApp.dll",
            "index": 14
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Uwp_x64_VS2015_DefaultBlankApp.dll",
            "index": 15
          },
          "mimeType": "application/octet-stream"
        },
        {
          "location": {
            "uri": "file:///e:/src/binskim3/src/Test.FunctionalTests.BinSkim.Driver/BaselineTestsData/Uwp_x86_VS2015_DefaultBlankApp.dll",
            "index": 16
          },
          "mimeType": "application/octet-stream"
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}