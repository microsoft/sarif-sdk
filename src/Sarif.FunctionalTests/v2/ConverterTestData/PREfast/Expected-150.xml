<?xml version='1.0' encoding='UTF-8'?>
<DEFECTS><DEFECT><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>18</LINE><COLUMN>5</COLUMN></SFA><DEFECTCODE>26061</DEFECTCODE><DESCRIPTION>Range postcondition violation
PREFAST_NEWLINE
Annotation on function foo3 requires that * pa[_I_] == * pb[_I_]
PREFAST_NEWLINE
[Annotation SAL_satisfies(* pa[_I_] == * pb[_I_]) at c:\somepath\test150.cpp(18)]
PREFAST_NEWLINE

PREFAST_NEWLINE
Values of variables:
PREFAST_NEWLINE
(*pa) = offset((*pa))`18
PREFAST_NEWLINE
(*pb) = offset((*pb))`18
PREFAST_NEWLINE
</DESCRIPTION><FUNCTION>foo3</FUNCTION><DECORATED>?foo3@@YAXPAPAPAH0H@Z</DECORATED><FUNCLINE>18</FUNCLINE><PATH><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>18</LINE><COLUMN>5</COLUMN></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>25</LINE><COLUMN>4</COLUMN></SFA><DEFECTCODE>26061</DEFECTCODE><DESCRIPTION>Range postcondition violation
PREFAST_NEWLINE
Annotation on function SatFunc requires that result.SatFunc == n + m
PREFAST_NEWLINE
[Annotation SAL_satisfies(result.SatFunc == n + m) at c:\somepath\test150.cpp(23)]
PREFAST_NEWLINE

PREFAST_NEWLINE
Values of variables:
PREFAST_NEWLINE
m = m`23
PREFAST_NEWLINE
n = n`23
PREFAST_NEWLINE
result.SatFunc = n`23 + 1
PREFAST_NEWLINE
</DESCRIPTION><FUNCTION>SatFunc</FUNCTION><DECORATED>?SatFunc@@YAHHHPAD@Z</DECORATED><FUNCLINE>23</FUNCLINE><PATH><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>23</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>25</LINE><COLUMN>4</COLUMN></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>31</LINE><COLUMN>18</COLUMN></SFA><DEFECTCODE>26060</DEFECTCODE><DESCRIPTION>Range precondition violation using expression '{parameter 1} == {parameter 2}'
PREFAST_NEWLINE
Annotation on function SatFunc requires that {parameter 1} == {parameter 2}
PREFAST_NEWLINE
  where return is result.SatFunc; {parameter 1} is 1; {parameter 2} is 2
PREFAST_NEWLINE
[Annotation SAL_satisfies({parameter 1} == {parameter 2}) at c:\somepath\test150.cpp(23)]
PREFAST_NEWLINE
</DESCRIPTION><FUNCTION>TestSat1</FUNCTION><DECORATED>?TestSat1@@YAXXZ</DECORATED><FUNCLINE>28</FUNCLINE><PATH><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>28</LINE><COLUMN>5</COLUMN></SFA><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>30</LINE><COLUMN>8</COLUMN></SFA><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>31</LINE><COLUMN>18</COLUMN></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>39</LINE><COLUMN>4</COLUMN></SFA><DEFECTCODE>26000</DEFECTCODE><DESCRIPTION>Read overflow using expression 'cp[y]'
PREFAST_NEWLINE
Buffer cp is a parameter to this function declared on line 37
PREFAST_NEWLINE
Buffer is of length x`37 + offset(cp)`37 bytes [from annotation SAL_readableTo(elementCount(x)) at c:\somepath\test150.cpp(37)]
PREFAST_NEWLINE
Accessing the byte at byte offset y`37
PREFAST_NEWLINE

PREFAST_NEWLINE
Values of variables:
PREFAST_NEWLINE
Pointer cp is at offset 0 bytes from the start of the buffer
PREFAST_NEWLINE
y = y`37
PREFAST_NEWLINE

PREFAST_NEWLINE
where
PREFAST_NEWLINE
offset(cp)`37 == 0
PREFAST_NEWLINE
y`37 == x`37
PREFAST_NEWLINE
x`37 &gt;= 1
PREFAST_NEWLINE
</DESCRIPTION><FUNCTION>TestPresatBad</FUNCTION><DECORATED>?TestPresatBad@@YADHHPAD@Z</DECORATED><FUNCLINE>37</FUNCLINE><PATH><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>37</LINE><COLUMN>5</COLUMN></SFA><SFA><FILEPATH>c:\somepath\</FILEPATH><FILENAME>test150.cpp</FILENAME><LINE>39</LINE><COLUMN>4</COLUMN></SFA></PATH></DEFECT></DEFECTS>