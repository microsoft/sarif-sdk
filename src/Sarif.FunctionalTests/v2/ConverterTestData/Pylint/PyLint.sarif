{
  "$schema": "http://json.schemastore.org/sarif-2.0.0",
  "version": "2.0.0",
  "runs": [
    {
      "tool": {
        "name": "Pylint"
      },
      "originalUriBaseIds": {
        "SRCROOT": "file:///c:/testdata/"
      },
      "files": {
        "#SRCROOT#src/pylint/pylint/config.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDA2LTIwMTAsIDIwMTItMjAxNCBMT0dJTEFCIFMuQS4gKFBhcmlzLCBGUkFOQ0UpIDxjb250YWN0QGxvZ2lsYWIuZnI+DQojIENvcHlyaWdodCAoYykgMjAwOCBweXZlc0BjcmF0ZXIubG9naWxhYi5mciA8cHl2ZXNAY3JhdGVyLmxvZ2lsYWIuZnI+DQojIENvcHlyaWdodCAoYykgMjAxMCBKdWxpZW4gSmVoYW5uZXQgPGp1bGllbi5qZWhhbm5ldEBsb2dpbGFiLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTMgR29vZ2xlLCBJbmMuDQojIENvcHlyaWdodCAoYykgMjAxMyBKb2huIE1jR2VoZWUgPGptY2dlaGVlQGFsdGVyYS5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNC0yMDE4IENsYXVkaXUgUG9wYSA8cGNtYW50aWNvcmVAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQgQnJldHQgQ2Fubm9uIDxicmV0dEBweXRob24ub3JnPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQgQXJ1biBQZXJzYXVkIDxhcnVuQG51YmF0aS5uZXQ+DQojIENvcHlyaWdodCAoYykgMjAxNSBBcnUgU2FobmkgPGFydXNhaG5pQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IEpvaG4gS2lya2hhbSA8amFraXJraGFtQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IElvbmVsIENyaXN0aWFuIE1hcmllcyA8Y29udGFjdEBpb25lbG1jLnJvPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgRXJpayA8ZXJpay5lcmlrc3NvbkB5YWhvby5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNiBBbGV4YW5kZXIgVG9kb3JvdiA8YXRvZG9yb3ZAb3RiLmJnPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgTW9pc2VzIExvcGV6IDxtb3lsb3AyNjBAdmF1eG9vLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggVmlsbGUgU2t5dHTDpCA8dmlsbGUuc2t5dHRhQGlraS5maT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3IGhpcHBvOTEgPGd1aWxsYXVtZS5wZWlsbGV4QGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3IGFoaXJuaXNoIDxhaGlybmlzaEBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNyDFgXVrYXN6IFJvZ2Fsc2tpIDxyb2dhbHNraS45MUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBCcnljZSBHdWludGEgPGJyeWNlLnBhdWwuZ3VpbnRhQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IHNzb2xhbmtpIDxzdXNob2JoaXRzb2xhbmtpQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IFN1c2hvYmhpdCA8MzE5ODc3Njkrc3VzaG9iaGl0MjdAdXNlcnMubm9yZXBseS5naXRodWIuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggQW50aG9ueSBTb3R0aWxlIDxhc290dGlsZUB1bWljaC5lZHU+DQojIENvcHlyaWdodCAoYykgMjAxOCBHYXJ5IFR5bGVyIE1jTGVvZCA8bWFpbEBnYXJ5dHlsZXIuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggS29uc3RhbnRpbiA8R2l0aHViQHBoZWFuZXguZGU+DQojIENvcHlyaWdodCAoYykgMjAxOCBOaWNrIERyb3pkIDxuaWNob2xhc2Ryb3pkQGdtYWlsLmNvbT4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQoiIiJ1dGlsaXRpZXMgZm9yIFB5bGludCBjb25maWd1cmF0aW9uIDoNCg0KKiBweWxpbnRyYw0KKiBweWxpbnQuZCAoUFlMSU5USE9NRSkNCiIiIg0KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBwcmludF9mdW5jdGlvbg0KDQojIFRPRE8oY3BvcGEpOiB0aGlzIG1vZHVsZSBjb250YWlucyB0aGUgbG9naWMgZm9yIHRoZQ0KIyBjb25maWd1cmF0aW9uIHBhcnNlciBhbmQgZm9yIHRoZSBjb21tYW5kIGxpbmUgcGFyc2VyLA0KIyBidXQgaXQncyByZWFsbHkgY291cGxlZCB0byBvcHRwYXJzZSdzIGludGVybmFscy4NCiMgVGhlIGNvZGUgd2FzIGNvcGllZCBhbG1vc3QgdmVyYmF0aW0gZnJvbSBsb2dpbGFiLmNvbW1vbiwNCiMgaW4gb3JkZXIgdG8gbm90IGRlcGVuZCBvbiBpdCBhbnltb3JlIGFuZCBpdCB3aWxsIGRlZmluaXRlbHkNCiMgbmVlZCBhIGNsZWFudXAuIEl0IGNvdWxkIGJlIGNvbXBsZXRlbHkgcmVlbmdpbmVlcmVkIGFzIHdlbGwuDQoNCmltcG9ydCBjb250ZXh0bGliDQppbXBvcnQgY29sbGVjdGlvbnMNCmltcG9ydCBjb3B5DQppbXBvcnQgaW8NCmltcG9ydCBvcHRwYXJzZQ0KaW1wb3J0IG9zDQppbXBvcnQgcGlja2xlDQppbXBvcnQgcmUNCmltcG9ydCBzeXMNCmltcG9ydCB0aW1lDQoNCmltcG9ydCBjb25maWdwYXJzZXINCg0KZnJvbSBweWxpbnQgaW1wb3J0IHV0aWxzDQoNCg0KVVNFUl9IT01FID0gb3MucGF0aC5leHBhbmR1c2VyKCd+JykNCmlmICdQWUxJTlRIT01FJyBpbiBvcy5lbnZpcm9uOg0KICAgIFBZTElOVF9IT01FID0gb3MuZW52aXJvblsnUFlMSU5USE9NRSddDQogICAgaWYgVVNFUl9IT01FID09ICd+JzoNCiAgICAgICAgVVNFUl9IT01FID0gb3MucGF0aC5kaXJuYW1lKFBZTElOVF9IT01FKQ0KZWxpZiBVU0VSX0hPTUUgPT0gJ34nOg0KICAgIFBZTElOVF9IT01FID0gIi5weWxpbnQuZCINCmVsc2U6DQogICAgUFlMSU5UX0hPTUUgPSBvcy5wYXRoLmpvaW4oVVNFUl9IT01FLCAnLnB5bGludC5kJykNCg0KDQpkZWYgX2dldF9wZGF0YV9wYXRoKGJhc2VfbmFtZSwgcmVjdXJzKToNCiAgICBiYXNlX25hbWUgPSBiYXNlX25hbWUucmVwbGFjZShvcy5zZXAsICdfJykNCiAgICByZXR1cm4gb3MucGF0aC5qb2luKFBZTElOVF9IT01FLCAiJXMlcyVzIiUoYmFzZV9uYW1lLCByZWN1cnMsICcuc3RhdHMnKSkNCg0KDQpkZWYgbG9hZF9yZXN1bHRzKGJhc2UpOg0KICAgIGRhdGFfZmlsZSA9IF9nZXRfcGRhdGFfcGF0aChiYXNlLCAxKQ0KICAgIHRyeToNCiAgICAgICAgd2l0aCBvcGVuKGRhdGFfZmlsZSwgX1BJQ0tfTE9BRCkgYXMgc3RyZWFtOg0KICAgICAgICAgICAgcmV0dXJuIHBpY2tsZS5sb2FkKHN0cmVhbSkNCiAgICBleGNlcHQgRXhjZXB0aW9uOiAjIHB5bGludDogZGlzYWJsZT1icm9hZC1leGNlcHQNCiAgICAgICAgcmV0dXJuIHt9DQoNCmlmIHN5cy52ZXJzaW9uX2luZm8gPCAoMywgMCk6DQogICAgX1BJQ0tfRFVNUCwgX1BJQ0tfTE9BRCA9ICd3JywgJ3InDQplbHNlOg0KICAgIF9QSUNLX0RVTVAsIF9QSUNLX0xPQUQgPSAnd2InLCAncmInDQoNCmRlZiBzYXZlX3Jlc3VsdHMocmVzdWx0cywgYmFzZSk6DQogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKFBZTElOVF9IT01FKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgb3MubWtkaXIoUFlMSU5UX0hPTUUpDQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOg0KICAgICAgICAgICAgcHJpbnQoJ1VuYWJsZSB0byBjcmVhdGUgZGlyZWN0b3J5ICVzJyAlIFBZTElOVF9IT01FLCBmaWxlPXN5cy5zdGRlcnIpDQogICAgZGF0YV9maWxlID0gX2dldF9wZGF0YV9wYXRoKGJhc2UsIDEpDQogICAgdHJ5Og0KICAgICAgICB3aXRoIG9wZW4oZGF0YV9maWxlLCBfUElDS19EVU1QKSBhcyBzdHJlYW06DQogICAgICAgICAgICBwaWNrbGUuZHVtcChyZXN1bHRzLCBzdHJlYW0pDQogICAgZXhjZXB0IChJT0Vycm9yLCBPU0Vycm9yKSBhcyBleDoNCiAgICAgICAgcHJpbnQoJ1VuYWJsZSB0byBjcmVhdGUgZmlsZSAlczogJXMnICUgKGRhdGFfZmlsZSwgZXgpLCBmaWxlPXN5cy5zdGRlcnIpDQoNCg0KZGVmIGZpbmRfcHlsaW50cmMoKToNCiAgICAiIiJzZWFyY2ggdGhlIHB5bGludCByYyBmaWxlIGFuZCByZXR1cm4gaXRzIHBhdGggaWYgaXQgZmluZCBpdCwgZWxzZSBOb25lDQogICAgIiIiDQogICAgIyBpcyB0aGVyZSBhIHB5bGludCByYyBmaWxlIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeSA/DQogICAgaWYgb3MucGF0aC5leGlzdHMoJ3B5bGludHJjJyk6DQogICAgICAgIHJldHVybiBvcy5wYXRoLmFic3BhdGgoJ3B5bGludHJjJykNCiAgICBpZiBvcy5wYXRoLmV4aXN0cygnLnB5bGludHJjJyk6DQogICAgICAgIHJldHVybiBvcy5wYXRoLmFic3BhdGgoJy5weWxpbnRyYycpDQogICAgaWYgb3MucGF0aC5pc2ZpbGUoJ19faW5pdF9fLnB5Jyk6DQogICAgICAgIGN1cmRpciA9IG9zLnBhdGguYWJzcGF0aChvcy5nZXRjd2QoKSkNCiAgICAgICAgd2hpbGUgb3MucGF0aC5pc2ZpbGUob3MucGF0aC5qb2luKGN1cmRpciwgJ19faW5pdF9fLnB5JykpOg0KICAgICAgICAgICAgY3VyZGlyID0gb3MucGF0aC5hYnNwYXRoKG9zLnBhdGguam9pbihjdXJkaXIsICcuLicpKQ0KICAgICAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUob3MucGF0aC5qb2luKGN1cmRpciwgJ3B5bGludHJjJykpOg0KICAgICAgICAgICAgICAgIHJldHVybiBvcy5wYXRoLmpvaW4oY3VyZGlyLCAncHlsaW50cmMnKQ0KICAgICAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUob3MucGF0aC5qb2luKGN1cmRpciwgJy5weWxpbnRyYycpKToNCiAgICAgICAgICAgICAgICByZXR1cm4gb3MucGF0aC5qb2luKGN1cmRpciwgJy5weWxpbnRyYycpDQogICAgaWYgJ1BZTElOVFJDJyBpbiBvcy5lbnZpcm9uIGFuZCBvcy5wYXRoLmV4aXN0cyhvcy5lbnZpcm9uWydQWUxJTlRSQyddKToNCiAgICAgICAgcHlsaW50cmMgPSBvcy5lbnZpcm9uWydQWUxJTlRSQyddDQogICAgZWxzZToNCiAgICAgICAgdXNlcl9ob21lID0gb3MucGF0aC5leHBhbmR1c2VyKCd+JykNCiAgICAgICAgaWYgdXNlcl9ob21lIGluICgnficsICcvcm9vdCcpOg0KICAgICAgICAgICAgcHlsaW50cmMgPSAiLnB5bGludHJjIg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHlsaW50cmMgPSBvcy5wYXRoLmpvaW4odXNlcl9ob21lLCAnLnB5bGludHJjJykNCiAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzZmlsZShweWxpbnRyYyk6DQogICAgICAgICAgICAgICAgcHlsaW50cmMgPSBvcy5wYXRoLmpvaW4odXNlcl9ob21lLCAnLmNvbmZpZycsICdweWxpbnRyYycpDQogICAgaWYgbm90IG9zLnBhdGguaXNmaWxlKHB5bGludHJjKToNCiAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoJy9ldGMvcHlsaW50cmMnKToNCiAgICAgICAgICAgIHB5bGludHJjID0gJy9ldGMvcHlsaW50cmMnDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBweWxpbnRyYyA9IE5vbmUNCiAgICByZXR1cm4gcHlsaW50cmMNCg0KUFlMSU5UUkMgPSBmaW5kX3B5bGludHJjKCkNCg0KRU5WX0hFTFAgPSAnJycNClRoZSBmb2xsb3dpbmcgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSB1c2VkOg0KICAgICogUFlMSU5USE9NRQ0KICAgIFBhdGggdG8gdGhlIGRpcmVjdG9yeSB3aGVyZSBwZXJzaXN0ZW50IGRhdGEgZm9yIHRoZSBydW4gd2lsbCBiZSBzdG9yZWQuIElmDQpub3QgZm91bmQsIGl0IGRlZmF1bHRzIHRvIH4vLnB5bGludC5kLyBvciAucHlsaW50LmQgKGluIHRoZSBjdXJyZW50IHdvcmtpbmcNCmRpcmVjdG9yeSkuDQogICAgKiBQWUxJTlRSQw0KICAgIFBhdGggdG8gdGhlIGNvbmZpZ3VyYXRpb24gZmlsZS4gU2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgbWV0aG9kIHVzZWQNCnRvIHNlYXJjaCBmb3IgY29uZmlndXJhdGlvbiBmaWxlLg0KJycnICUgZ2xvYmFscygpDQoNCg0KY2xhc3MgVW5zdXBwb3J0ZWRBY3Rpb24oRXhjZXB0aW9uKToNCiAgICAiIiJyYWlzZWQgYnkgc2V0X29wdGlvbiB3aGVuIGl0IGRvZXNuJ3Qga25vdyB3aGF0IHRvIGRvIGZvciBhbiBhY3Rpb24iIiINCg0KDQpkZWYgX211bHRpcGxlX2Nob2ljZV92YWxpZGF0b3IoY2hvaWNlcywgbmFtZSwgdmFsdWUpOg0KICAgIHZhbHVlcyA9IHV0aWxzLl9jaGVja19jc3YodmFsdWUpDQogICAgZm9yIGNzdl92YWx1ZSBpbiB2YWx1ZXM6DQogICAgICAgIGlmIGNzdl92YWx1ZSBub3QgaW4gY2hvaWNlczoNCiAgICAgICAgICAgIG1zZyA9ICJvcHRpb24gJXM6IGludmFsaWQgdmFsdWU6ICVyLCBzaG91bGQgYmUgaW4gJXMiDQogICAgICAgICAgICByYWlzZSBvcHRwYXJzZS5PcHRpb25WYWx1ZUVycm9yKG1zZyAlIChuYW1lLCBjc3ZfdmFsdWUsIGNob2ljZXMpKQ0KICAgIHJldHVybiB2YWx1ZXMNCg0KDQpkZWYgX2Nob2ljZV92YWxpZGF0b3IoY2hvaWNlcywgbmFtZSwgdmFsdWUpOg0KICAgIGlmIHZhbHVlIG5vdCBpbiBjaG9pY2VzOg0KICAgICAgICBtc2cgPSAib3B0aW9uICVzOiBpbnZhbGlkIHZhbHVlOiAlciwgc2hvdWxkIGJlIGluICVzIg0KICAgICAgICByYWlzZSBvcHRwYXJzZS5PcHRpb25WYWx1ZUVycm9yKG1zZyAlIChuYW1lLCB2YWx1ZSwgY2hvaWNlcykpDQogICAgcmV0dXJuIHZhbHVlDQoNCiMgcHlsaW50OiBkaXNhYmxlPXVudXNlZC1hcmd1bWVudA0KZGVmIF9jc3ZfdmFsaWRhdG9yKF8sIG5hbWUsIHZhbHVlKToNCiAgICByZXR1cm4gdXRpbHMuX2NoZWNrX2Nzdih2YWx1ZSkNCg0KDQojIHB5bGludDogZGlzYWJsZT11bnVzZWQtYXJndW1lbnQNCmRlZiBfcmVnZXhwX3ZhbGlkYXRvcihfLCBuYW1lLCB2YWx1ZSk6DQogICAgaWYgaGFzYXR0cih2YWx1ZSwgJ3BhdHRlcm4nKToNCiAgICAgICAgcmV0dXJuIHZhbHVlDQogICAgcmV0dXJuIHJlLmNvbXBpbGUodmFsdWUpDQoNCiMgcHlsaW50OiBkaXNhYmxlPXVudXNlZC1hcmd1bWVudA0KZGVmIF9yZWdleHBfY3N2X3ZhbGlkYXRvcihfLCBuYW1lLCB2YWx1ZSk6DQogICAgcmV0dXJuIFtfcmVnZXhwX3ZhbGlkYXRvcihfLCBuYW1lLCB2YWwpIGZvciB2YWwgaW4gX2Nzdl92YWxpZGF0b3IoXywgbmFtZSwgdmFsdWUpXQ0KDQpkZWYgX3luX3ZhbGlkYXRvcihvcHQsIF8sIHZhbHVlKToNCiAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBpbnQpOg0KICAgICAgICByZXR1cm4gYm9vbCh2YWx1ZSkNCiAgICBpZiB2YWx1ZSBpbiAoJ3knLCAneWVzJyk6DQogICAgICAgIHJldHVybiBUcnVlDQogICAgaWYgdmFsdWUgaW4gKCduJywgJ25vJyk6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIG1zZyA9ICJvcHRpb24gJXM6IGludmFsaWQgeW4gdmFsdWUgJXIsIHNob3VsZCBiZSBpbiAoeSwgeWVzLCBuLCBubykiDQogICAgcmFpc2Ugb3B0cGFyc2UuT3B0aW9uVmFsdWVFcnJvcihtc2cgJSAob3B0LCB2YWx1ZSkpDQoNCg0KZGVmIF9ub25fZW1wdHlfc3RyaW5nX3ZhbGlkYXRvcihvcHQsIF8sIHZhbHVlKToNCiAgICBpZiBub3QgdmFsdWU6DQogICAgICAgIG1zZyA9ICJpbmRlbnQgc3RyaW5nIGNhbid0IGJlIGVtcHR5LiINCiAgICAgICAgcmFpc2Ugb3B0cGFyc2UuT3B0aW9uVmFsdWVFcnJvcihtc2cpDQogICAgcmV0dXJuIHV0aWxzLl91bnF1b3RlKHZhbHVlKQ0KDQoNClZBTElEQVRPUlMgPSB7DQogICAgJ3N0cmluZyc6IHV0aWxzLl91bnF1b3RlLA0KICAgICdpbnQnOiBpbnQsDQogICAgJ3JlZ2V4cCc6IHJlLmNvbXBpbGUsDQogICAgJ3JlZ2V4cF9jc3YnOiBfcmVnZXhwX2Nzdl92YWxpZGF0b3IsDQogICAgJ2Nzdic6IF9jc3ZfdmFsaWRhdG9yLA0KICAgICd5bic6IF95bl92YWxpZGF0b3IsDQogICAgJ2Nob2ljZSc6IGxhbWJkYSBvcHQsIG5hbWUsIHZhbHVlOiBfY2hvaWNlX3ZhbGlkYXRvcihvcHRbJ2Nob2ljZXMnXSwgbmFtZSwgdmFsdWUpLA0KICAgICdtdWx0aXBsZV9jaG9pY2UnOiBsYW1iZGEgb3B0LCBuYW1lLCB2YWx1ZTogX211bHRpcGxlX2Nob2ljZV92YWxpZGF0b3Iob3B0WydjaG9pY2VzJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLCB2YWx1ZSksDQogICAgJ25vbl9lbXB0eV9zdHJpbmcnOiBfbm9uX2VtcHR5X3N0cmluZ192YWxpZGF0b3IsDQp9DQoNCmRlZiBfY2FsbF92YWxpZGF0b3Iob3B0dHlwZSwgb3B0ZGljdCwgb3B0aW9uLCB2YWx1ZSk6DQogICAgaWYgb3B0dHlwZSBub3QgaW4gVkFMSURBVE9SUzoNCiAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdVbnN1cHBvcnRlZCB0eXBlICIlcyInICUgb3B0dHlwZSkNCiAgICB0cnk6DQogICAgICAgIHJldHVybiBWQUxJREFUT1JTW29wdHR5cGVdKG9wdGRpY3QsIG9wdGlvbiwgdmFsdWUpDQogICAgZXhjZXB0IFR5cGVFcnJvcjoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmV0dXJuIFZBTElEQVRPUlNbb3B0dHlwZV0odmFsdWUpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246DQogICAgICAgICAgICByYWlzZSBvcHRwYXJzZS5PcHRpb25WYWx1ZUVycm9yKCclcyB2YWx1ZSAoJXIpIHNob3VsZCBiZSBvZiB0eXBlICVzJyAlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcHRpb24sIHZhbHVlLCBvcHR0eXBlKSkNCg0KDQpkZWYgX3ZhbGlkYXRlKHZhbHVlLCBvcHRkaWN0LCBuYW1lPScnKToNCiAgICAiIiJyZXR1cm4gYSB2YWxpZGF0ZWQgdmFsdWUgZm9yIGFuIG9wdGlvbiBhY2NvcmRpbmcgdG8gaXRzIHR5cGUNCg0KICAgIG9wdGlvbmFsIGFyZ3VtZW50IG5hbWUgaXMgb25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlIGZvcm1hdHRpbmcNCiAgICAiIiINCiAgICB0cnk6DQogICAgICAgIF90eXBlID0gb3B0ZGljdFsndHlwZSddDQogICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAjIEZJWE1FDQogICAgICAgIHJldHVybiB2YWx1ZQ0KICAgIHJldHVybiBfY2FsbF92YWxpZGF0b3IoX3R5cGUsIG9wdGRpY3QsIG5hbWUsIHZhbHVlKQ0KDQoNCmRlZiBfbGV2ZWxfb3B0aW9ucyhncm91cCwgb3V0cHV0bGV2ZWwpOg0KICAgIHJldHVybiBbb3B0aW9uIGZvciBvcHRpb24gaW4gZ3JvdXAub3B0aW9uX2xpc3QNCiAgICAgICAgICAgIGlmIChnZXRhdHRyKG9wdGlvbiwgJ2xldmVsJywgMCkgb3IgMCkgPD0gb3V0cHV0bGV2ZWwNCiAgICAgICAgICAgIGFuZCBvcHRpb24uaGVscCBpcyBub3Qgb3B0cGFyc2UuU1VQUFJFU1NfSEVMUF0NCg0KDQpkZWYgX2V4cGFuZF9kZWZhdWx0KHNlbGYsIG9wdGlvbik6DQogICAgIiIiUGF0Y2ggT3B0aW9uUGFyc2VyLmV4cGFuZF9kZWZhdWx0IHdpdGggY3VzdG9tIGJlaGF2aW91cg0KDQogICAgVGhpcyB3aWxsIGhhbmRsZSBkZWZhdWx0cyB0byBhdm9pZCBvdmVycmlkaW5nIHZhbHVlcyBpbiB0aGUNCiAgICBjb25maWd1cmF0aW9uIGZpbGUuDQogICAgIiIiDQogICAgaWYgc2VsZi5wYXJzZXIgaXMgTm9uZSBvciBub3Qgc2VsZi5kZWZhdWx0X3RhZzoNCiAgICAgICAgcmV0dXJuIG9wdGlvbi5oZWxwDQogICAgb3B0bmFtZSA9IG9wdGlvbi5fbG9uZ19vcHRzWzBdWzI6XQ0KICAgIHRyeToNCiAgICAgICAgcHJvdmlkZXIgPSBzZWxmLnBhcnNlci5vcHRpb25zX21hbmFnZXIuX2FsbF9vcHRpb25zW29wdG5hbWVdDQogICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICB2YWx1ZSA9IE5vbmUNCiAgICBlbHNlOg0KICAgICAgICBvcHRkaWN0ID0gcHJvdmlkZXIuZ2V0X29wdGlvbl9kZWYob3B0bmFtZSkNCiAgICAgICAgb3B0bmFtZSA9IHByb3ZpZGVyLm9wdGlvbl9hdHRybmFtZShvcHRuYW1lLCBvcHRkaWN0KQ0KICAgICAgICB2YWx1ZSA9IGdldGF0dHIocHJvdmlkZXIuY29uZmlnLCBvcHRuYW1lLCBvcHRkaWN0KQ0KICAgICAgICB2YWx1ZSA9IHV0aWxzLl9mb3JtYXRfb3B0aW9uX3ZhbHVlKG9wdGRpY3QsIHZhbHVlKQ0KICAgIGlmIHZhbHVlIGlzIG9wdHBhcnNlLk5PX0RFRkFVTFQgb3Igbm90IHZhbHVlOg0KICAgICAgICB2YWx1ZSA9IHNlbGYuTk9fREVGQVVMVF9WQUxVRQ0KICAgIHJldHVybiBvcHRpb24uaGVscC5yZXBsYWNlKHNlbGYuZGVmYXVsdF90YWcsIHN0cih2YWx1ZSkpDQoNCg0KQGNvbnRleHRsaWIuY29udGV4dG1hbmFnZXINCmRlZiBfcGF0Y2hfb3B0cGFyc2UoKToNCiAgICBvcmlnX2RlZmF1bHQgPSBvcHRwYXJzZS5IZWxwRm9ybWF0dGVyDQogICAgdHJ5Og0KICAgICAgICBvcHRwYXJzZS5IZWxwRm9ybWF0dGVyLmV4cGFuZF9kZWZhdWx0ID0gX2V4cGFuZF9kZWZhdWx0DQogICAgICAgIHlpZWxkDQogICAgZmluYWxseToNCiAgICAgICAgb3B0cGFyc2UuSGVscEZvcm1hdHRlci5leHBhbmRfZGVmYXVsdCA9IG9yaWdfZGVmYXVsdA0KDQoNCmRlZiBfbXVsdGlwbGVfY2hvaWNlc192YWxpZGF0aW5nX29wdGlvbihvcHQsIG5hbWUsIHZhbHVlKToNCiAgICByZXR1cm4gX211bHRpcGxlX2Nob2ljZV92YWxpZGF0b3Iob3B0LmNob2ljZXMsIG5hbWUsIHZhbHVlKQ0KDQoNCiMgcHlsaW50OiBkaXNhYmxlPW5vLW1lbWJlcg0KY2xhc3MgT3B0aW9uKG9wdHBhcnNlLk9wdGlvbik6DQogICAgVFlQRVMgPSBvcHRwYXJzZS5PcHRpb24uVFlQRVMgKyAoJ3JlZ2V4cCcsICdyZWdleHBfY3N2JywgJ2NzdicsICd5bicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ211bHRpcGxlX2Nob2ljZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25vbl9lbXB0eV9zdHJpbmcnKQ0KICAgIEFUVFJTID0gb3B0cGFyc2UuT3B0aW9uLkFUVFJTICsgWydoaWRlJywgJ2xldmVsJ10NCiAgICBUWVBFX0NIRUNLRVIgPSBjb3B5LmNvcHkob3B0cGFyc2UuT3B0aW9uLlRZUEVfQ0hFQ0tFUikNCiAgICBUWVBFX0NIRUNLRVJbJ3JlZ2V4cCddID0gX3JlZ2V4cF92YWxpZGF0b3INCiAgICBUWVBFX0NIRUNLRVJbJ3JlZ2V4cF9jc3YnXSA9IF9yZWdleHBfY3N2X3ZhbGlkYXRvcg0KICAgIFRZUEVfQ0hFQ0tFUlsnY3N2J10gPSBfY3N2X3ZhbGlkYXRvcg0KICAgIFRZUEVfQ0hFQ0tFUlsneW4nXSA9IF95bl92YWxpZGF0b3INCiAgICBUWVBFX0NIRUNLRVJbJ211bHRpcGxlX2Nob2ljZSddID0gX211bHRpcGxlX2Nob2ljZXNfdmFsaWRhdGluZ19vcHRpb24NCiAgICBUWVBFX0NIRUNLRVJbJ25vbl9lbXB0eV9zdHJpbmcnXSA9IF9ub25fZW1wdHlfc3RyaW5nX3ZhbGlkYXRvcg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYsICpvcHRzLCAqKmF0dHJzKToNCiAgICAgICAgb3B0cGFyc2UuT3B0aW9uLl9faW5pdF9fKHNlbGYsICpvcHRzLCAqKmF0dHJzKQ0KICAgICAgICBpZiBoYXNhdHRyKHNlbGYsICJoaWRlIikgYW5kIHNlbGYuaGlkZToNCiAgICAgICAgICAgIHNlbGYuaGVscCA9IG9wdHBhcnNlLlNVUFBSRVNTX0hFTFANCg0KICAgIGRlZiBfY2hlY2tfY2hvaWNlKHNlbGYpOg0KICAgICAgICBpZiBzZWxmLnR5cGUgaW4gKCJjaG9pY2UiLCAibXVsdGlwbGVfY2hvaWNlIik6DQogICAgICAgICAgICBpZiBzZWxmLmNob2ljZXMgaXMgTm9uZToNCiAgICAgICAgICAgICAgICByYWlzZSBvcHRwYXJzZS5PcHRpb25FcnJvcigNCiAgICAgICAgICAgICAgICAgICAgIm11c3Qgc3VwcGx5IGEgbGlzdCBvZiBjaG9pY2VzIGZvciB0eXBlICdjaG9pY2UnIiwgc2VsZikNCiAgICAgICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2Uoc2VsZi5jaG9pY2VzLCAodHVwbGUsIGxpc3QpKToNCiAgICAgICAgICAgICAgICByYWlzZSBvcHRwYXJzZS5PcHRpb25FcnJvcigNCiAgICAgICAgICAgICAgICAgICAgImNob2ljZXMgbXVzdCBiZSBhIGxpc3Qgb2Ygc3RyaW5ncyAoJyVzJyBzdXBwbGllZCkiDQogICAgICAgICAgICAgICAgICAgICUgc3RyKHR5cGUoc2VsZi5jaG9pY2VzKSkuc3BsaXQoIiciKVsxXSwgc2VsZikNCiAgICAgICAgZWxpZiBzZWxmLmNob2ljZXMgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByYWlzZSBvcHRwYXJzZS5PcHRpb25FcnJvcigNCiAgICAgICAgICAgICAgICAibXVzdCBub3Qgc3VwcGx5IGNob2ljZXMgZm9yIHR5cGUgJXIiICUgc2VsZi50eXBlLCBzZWxmKQ0KDQogICAgIyBweWxpbnQ6IGRpc2FibGU9dW5zdXBwb3J0ZWQtYXNzaWdubWVudC1vcGVyYXRpb24NCiAgICBvcHRwYXJzZS5PcHRpb24uQ0hFQ0tfTUVUSE9EU1syXSA9IF9jaGVja19jaG9pY2UNCg0KICAgIGRlZiBwcm9jZXNzKHNlbGYsIG9wdCwgdmFsdWUsIHZhbHVlcywgcGFyc2VyKToNCiAgICAgICAgIyBGaXJzdCwgY29udmVydCB0aGUgdmFsdWUocykgdG8gdGhlIHJpZ2h0IHR5cGUuICBIb3dsIGlmIGFueQ0KICAgICAgICAjIHZhbHVlKHMpIGFyZSBib2d1cy4NCiAgICAgICAgdmFsdWUgPSBzZWxmLmNvbnZlcnRfdmFsdWUob3B0LCB2YWx1ZSkNCiAgICAgICAgaWYgc2VsZi50eXBlID09ICduYW1lZCc6DQogICAgICAgICAgICBleGlzdGVudCA9IGdldGF0dHIodmFsdWVzLCBzZWxmLmRlc3QpDQogICAgICAgICAgICBpZiBleGlzdGVudDoNCiAgICAgICAgICAgICAgICBleGlzdGVudC51cGRhdGUodmFsdWUpDQogICAgICAgICAgICAgICAgdmFsdWUgPSBleGlzdGVudA0KICAgICAgICAjIEFuZCB0aGVuIHRha2Ugd2hhdGV2ZXIgYWN0aW9uIGlzIGV4cGVjdGVkIG9mIHVzLg0KICAgICAgICAjIFRoaXMgaXMgYSBzZXBhcmF0ZSBtZXRob2QgdG8gbWFrZSBsaWZlIGVhc2llciBmb3INCiAgICAgICAgIyBzdWJjbGFzc2VzIHRvIGFkZCBuZXcgYWN0aW9ucy4NCiAgICAgICAgcmV0dXJuIHNlbGYudGFrZV9hY3Rpb24oDQogICAgICAgICAgICBzZWxmLmFjdGlvbiwgc2VsZi5kZXN0LCBvcHQsIHZhbHVlLCB2YWx1ZXMsIHBhcnNlcikNCg0KDQpjbGFzcyBPcHRpb25QYXJzZXIob3B0cGFyc2UuT3B0aW9uUGFyc2VyKToNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBvcHRpb25fY2xhc3MsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgIG9wdHBhcnNlLk9wdGlvblBhcnNlci5fX2luaXRfXyhzZWxmLCBvcHRpb25fY2xhc3M9T3B0aW9uLCAqYXJncywgKiprd2FyZ3MpDQoNCiAgICBkZWYgZm9ybWF0X29wdGlvbl9oZWxwKHNlbGYsIGZvcm1hdHRlcj1Ob25lKToNCiAgICAgICAgaWYgZm9ybWF0dGVyIGlzIE5vbmU6DQogICAgICAgICAgICBmb3JtYXR0ZXIgPSBzZWxmLmZvcm1hdHRlcg0KICAgICAgICBvdXRwdXRsZXZlbCA9IGdldGF0dHIoZm9ybWF0dGVyLCAnb3V0cHV0X2xldmVsJywgMCkNCiAgICAgICAgZm9ybWF0dGVyLnN0b3JlX29wdGlvbl9zdHJpbmdzKHNlbGYpDQogICAgICAgIHJlc3VsdCA9IFtdDQogICAgICAgIHJlc3VsdC5hcHBlbmQoZm9ybWF0dGVyLmZvcm1hdF9oZWFkaW5nKCJPcHRpb25zIikpDQogICAgICAgIGZvcm1hdHRlci5pbmRlbnQoKQ0KICAgICAgICBpZiBzZWxmLm9wdGlvbl9saXN0Og0KICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChvcHRwYXJzZS5PcHRpb25Db250YWluZXIuZm9ybWF0X29wdGlvbl9oZWxwKHNlbGYsIGZvcm1hdHRlcikpDQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKCJcbiIpDQogICAgICAgIGZvciBncm91cCBpbiBzZWxmLm9wdGlvbl9ncm91cHM6DQogICAgICAgICAgICBpZiBncm91cC5sZXZlbCA8PSBvdXRwdXRsZXZlbCBhbmQgKA0KICAgICAgICAgICAgICAgICAgICBncm91cC5kZXNjcmlwdGlvbiBvciBfbGV2ZWxfb3B0aW9ucyhncm91cCwgb3V0cHV0bGV2ZWwpKToNCiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKGdyb3VwLmZvcm1hdF9oZWxwKGZvcm1hdHRlcikpDQogICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCgiXG4iKQ0KICAgICAgICBmb3JtYXR0ZXIuZGVkZW50KCkNCiAgICAgICAgIyBEcm9wIHRoZSBsYXN0ICJcbiIsIG9yIHRoZSBoZWFkZXIgaWYgbm8gb3B0aW9ucyBvciBvcHRpb24gZ3JvdXBzOg0KICAgICAgICByZXR1cm4gIiIuam9pbihyZXN1bHRbOi0xXSkNCg0KICAgIGRlZiBfbWF0Y2hfbG9uZ19vcHQoc2VsZiwgb3B0KToNCiAgICAgICAgIiIiRGlzYWJsZSBhYmJyZXZpYXRpb25zLiIiIg0KICAgICAgICBpZiBvcHQgbm90IGluIHNlbGYuX2xvbmdfb3B0Og0KICAgICAgICAgICAgcmFpc2Ugb3B0cGFyc2UuQmFkT3B0aW9uRXJyb3Iob3B0KQ0KICAgICAgICByZXR1cm4gb3B0DQoNCg0KIyBweWxpbnQ6IGRpc2FibGU9YWJzdHJhY3QtbWV0aG9kOyBieSBkZXNpZ24/DQpjbGFzcyBfTWFuSGVscEZvcm1hdHRlcihvcHRwYXJzZS5IZWxwRm9ybWF0dGVyKToNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpbmRlbnRfaW5jcmVtZW50PTAsIG1heF9oZWxwX3Bvc2l0aW9uPTI0LA0KICAgICAgICAgICAgICAgICB3aWR0aD03OSwgc2hvcnRfZmlyc3Q9MCk6DQogICAgICAgIG9wdHBhcnNlLkhlbHBGb3JtYXR0ZXIuX19pbml0X18oDQogICAgICAgICAgICBzZWxmLCBpbmRlbnRfaW5jcmVtZW50LCBtYXhfaGVscF9wb3NpdGlvbiwgd2lkdGgsIHNob3J0X2ZpcnN0KQ0KDQogICAgZGVmIGZvcm1hdF9oZWFkaW5nKHNlbGYsIGhlYWRpbmcpOg0KICAgICAgICByZXR1cm4gJy5TSCAlc1xuJyAlIGhlYWRpbmcudXBwZXIoKQ0KDQogICAgZGVmIGZvcm1hdF9kZXNjcmlwdGlvbihzZWxmLCBkZXNjcmlwdGlvbik6DQogICAgICAgIHJldHVybiBkZXNjcmlwdGlvbg0KDQogICAgZGVmIGZvcm1hdF9vcHRpb24oc2VsZiwgb3B0aW9uKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgb3B0c3RyaW5nID0gb3B0aW9uLm9wdGlvbl9zdHJpbmdzDQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoNCiAgICAgICAgICAgIG9wdHN0cmluZyA9IHNlbGYuZm9ybWF0X29wdGlvbl9zdHJpbmdzKG9wdGlvbikNCiAgICAgICAgaWYgb3B0aW9uLmhlbHA6DQogICAgICAgICAgICBoZWxwX3RleHQgPSBzZWxmLmV4cGFuZF9kZWZhdWx0KG9wdGlvbikNCiAgICAgICAgICAgIGhlbHBfc3RyaW5nID0gJyAnLmpvaW4oW2wuc3RyaXAoKSBmb3IgbCBpbiBoZWxwX3RleHQuc3BsaXRsaW5lcygpXSkNCiAgICAgICAgICAgIGhlbHBfc3RyaW5nID0gaGVscF9zdHJpbmcucmVwbGFjZSgnXFwnLCAnXFxcXCcpDQogICAgICAgICAgICBoZWxwX3N0cmluZyA9IGhlbHBfc3RyaW5nLnJlcGxhY2UoJ1tjdXJyZW50OicsICdbZGVmYXVsdDonKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgaGVscF9zdHJpbmcgPSAnJw0KICAgICAgICByZXR1cm4gJycnLklQICIlcyINCiVzDQonJycgJSAob3B0c3RyaW5nLCBoZWxwX3N0cmluZykNCg0KICAgIGRlZiBmb3JtYXRfaGVhZChzZWxmLCBvcHRwYXJzZXIsIHBrZ2luZm8sIHNlY3Rpb249MSk6DQogICAgICAgIGxvbmdfZGVzYyA9ICIiDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHBnbSA9IG9wdHBhcnNlci5fZ2V0X3Byb2dfbmFtZSgpDQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoNCiAgICAgICAgICAgICMgcHkgPj0gMi40LlggKGR1bm5vIHdoaWNoIFggZXhhY3RseSwgYXQgbGVhc3QgMikNCiAgICAgICAgICAgIHBnbSA9IG9wdHBhcnNlci5nZXRfcHJvZ19uYW1lKCkNCiAgICAgICAgc2hvcnRfZGVzYyA9IHNlbGYuZm9ybWF0X3Nob3J0X2Rlc2NyaXB0aW9uKHBnbSwgcGtnaW5mby5kZXNjcmlwdGlvbikNCiAgICAgICAgaWYgaGFzYXR0cihwa2dpbmZvLCAibG9uZ19kZXNjIik6DQogICAgICAgICAgICBsb25nX2Rlc2MgPSBzZWxmLmZvcm1hdF9sb25nX2Rlc2NyaXB0aW9uKHBnbSwgcGtnaW5mby5sb25nX2Rlc2MpDQogICAgICAgIHJldHVybiAnJXNcbiVzXG4lc1xuJXMnICUgKHNlbGYuZm9ybWF0X3RpdGxlKHBnbSwgc2VjdGlvbiksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0X2Rlc2MsIHNlbGYuZm9ybWF0X3N5bm9wc2lzKHBnbSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdfZGVzYykNCg0KICAgIEBzdGF0aWNtZXRob2QNCiAgICBkZWYgZm9ybWF0X3RpdGxlKHBnbSwgc2VjdGlvbik6DQogICAgICAgIGRhdGUgPSAnJWQtJTAyZC0lMDJkJyAlIHRpbWUubG9jYWx0aW1lKClbOjNdDQogICAgICAgIHJldHVybiAnLlRIICVzICVzICIlcyIgJXMnICUgKHBnbSwgc2VjdGlvbiwgZGF0ZSwgcGdtKQ0KDQogICAgQHN0YXRpY21ldGhvZA0KICAgIGRlZiBmb3JtYXRfc2hvcnRfZGVzY3JpcHRpb24ocGdtLCBzaG9ydF9kZXNjKToNCiAgICAgICAgcmV0dXJuICcnJy5TSCBOQU1FDQouQiAlcw0KXFwtICVzDQonJycgJSAocGdtLCBzaG9ydF9kZXNjLnN0cmlwKCkpDQoNCiAgICBAc3RhdGljbWV0aG9kDQogICAgZGVmIGZvcm1hdF9zeW5vcHNpcyhwZ20pOg0KICAgICAgICByZXR1cm4gJycnLlNIIFNZTk9QU0lTDQouQiAgJXMNClsNCi5JIE9QVElPTlMNCl0gWw0KLkkgPGFyZ3VtZW50cz4NCl0NCicnJyAlIHBnbQ0KDQogICAgQHN0YXRpY21ldGhvZA0KICAgIGRlZiBmb3JtYXRfbG9uZ19kZXNjcmlwdGlvbihwZ20sIGxvbmdfZGVzYyk6DQogICAgICAgIGxvbmdfZGVzYyA9ICdcbicuam9pbihsaW5lLmxzdHJpcCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiBsb25nX2Rlc2Muc3BsaXRsaW5lcygpKQ0KICAgICAgICBsb25nX2Rlc2MgPSBsb25nX2Rlc2MucmVwbGFjZSgnXG4uXG4nLCAnXG5cbicpDQogICAgICAgIGlmIGxvbmdfZGVzYy5sb3dlcigpLnN0YXJ0c3dpdGgocGdtKToNCiAgICAgICAgICAgIGxvbmdfZGVzYyA9IGxvbmdfZGVzY1tsZW4ocGdtKTpdDQogICAgICAgIHJldHVybiAnJycuU0ggREVTQ1JJUFRJT04NCi5CICVzDQolcw0KJycnICUgKHBnbSwgbG9uZ19kZXNjLnN0cmlwKCkpDQoNCiAgICBAc3RhdGljbWV0aG9kDQogICAgZGVmIGZvcm1hdF90YWlsKHBrZ2luZm8pOg0KICAgICAgICB0YWlsID0gJycnLlNIIFNFRSBBTFNPDQovdXNyL3NoYXJlL2RvYy9weXRob25YLlktJXMvDQoNCi5TSCBCVUdTDQpQbGVhc2UgcmVwb3J0IGJ1Z3Mgb24gdGhlIHByb2plY3RcJ3MgbWFpbGluZyBsaXN0Og0KJXMNCg0KLlNIIEFVVEhPUg0KJXMgPCVzPg0KJycnICUgKGdldGF0dHIocGtnaW5mbywgJ2RlYmlhbl9uYW1lJywgcGtnaW5mby5tb2RuYW1lKSwNCiAgICAgICBwa2dpbmZvLm1haWxpbmdsaXN0LCBwa2dpbmZvLmF1dGhvciwgcGtnaW5mby5hdXRob3JfZW1haWwpDQoNCiAgICAgICAgaWYgaGFzYXR0cihwa2dpbmZvLCAiY29weXJpZ2h0Iik6DQogICAgICAgICAgICB0YWlsICs9ICcnJw0KLlNIIENPUFlSSUdIVA0KJXMNCicnJyAlIHBrZ2luZm8uY29weXJpZ2h0DQoNCiAgICAgICAgcmV0dXJuIHRhaWwNCg0KDQpjbGFzcyBPcHRpb25zTWFuYWdlck1peEluOg0KICAgICIiIkhhbmRsZSBjb25maWd1cmF0aW9uIGZyb20gYm90aCBhIGNvbmZpZ3VyYXRpb24gZmlsZSBhbmQgY29tbWFuZCBsaW5lIG9wdGlvbnMiIiINCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCB1c2FnZSwgY29uZmlnX2ZpbGU9Tm9uZSwgdmVyc2lvbj1Ob25lKToNCiAgICAgICAgc2VsZi5jb25maWdfZmlsZSA9IGNvbmZpZ19maWxlDQogICAgICAgIHNlbGYucmVzZXRfcGFyc2Vycyh1c2FnZSwgdmVyc2lvbj12ZXJzaW9uKQ0KICAgICAgICAjIGxpc3Qgb2YgcmVnaXN0ZXJlZCBvcHRpb25zIHByb3ZpZGVycw0KICAgICAgICBzZWxmLm9wdGlvbnNfcHJvdmlkZXJzID0gW10NCiAgICAgICAgIyBkaWN0aW9uYXJ5IGFzc29jaWF0aW5nIG9wdGlvbiBuYW1lIHRvIGNoZWNrZXINCiAgICAgICAgc2VsZi5fYWxsX29wdGlvbnMgPSBjb2xsZWN0aW9ucy5PcmRlcmVkRGljdCgpDQogICAgICAgIHNlbGYuX3Nob3J0X29wdGlvbnMgPSB7fQ0KICAgICAgICBzZWxmLl9ub2NhbGxiYWNrX29wdGlvbnMgPSB7fQ0KICAgICAgICBzZWxmLl9teWdyb3VwcyA9IHt9DQogICAgICAgICMgdmVyYm9zaXR5DQogICAgICAgIHNlbGYuX21heGxldmVsID0gMA0KDQogICAgZGVmIHJlc2V0X3BhcnNlcnMoc2VsZiwgdXNhZ2U9JycsIHZlcnNpb249Tm9uZSk6DQogICAgICAgICMgY29uZmlndXJhdGlvbiBmaWxlIHBhcnNlcg0KICAgICAgICBzZWxmLmNmZ2ZpbGVfcGFyc2VyID0gY29uZmlncGFyc2VyLkNvbmZpZ1BhcnNlcihpbmxpbmVfY29tbWVudF9wcmVmaXhlcz0oJyMnLCAnOycpKQ0KICAgICAgICAjIGNvbW1hbmQgbGluZSBwYXJzZXINCiAgICAgICAgc2VsZi5jbWRsaW5lX3BhcnNlciA9IE9wdGlvblBhcnNlcihPcHRpb24sIHVzYWdlPXVzYWdlLCB2ZXJzaW9uPXZlcnNpb24pDQogICAgICAgIHNlbGYuY21kbGluZV9wYXJzZXIub3B0aW9uc19tYW5hZ2VyID0gc2VsZg0KICAgICAgICBzZWxmLl9vcHRpa19vcHRpb25fYXR0cnMgPSBzZXQoc2VsZi5jbWRsaW5lX3BhcnNlci5vcHRpb25fY2xhc3MuQVRUUlMpDQoNCiAgICBkZWYgcmVnaXN0ZXJfb3B0aW9uc19wcm92aWRlcihzZWxmLCBwcm92aWRlciwgb3duX2dyb3VwPVRydWUpOg0KICAgICAgICAiIiJyZWdpc3RlciBhbiBvcHRpb25zIHByb3ZpZGVyIiIiDQogICAgICAgIGFzc2VydCBwcm92aWRlci5wcmlvcml0eSA8PSAwLCAicHJvdmlkZXIncyBwcmlvcml0eSBjYW4ndCBiZSA+PSAwIg0KICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oc2VsZi5vcHRpb25zX3Byb3ZpZGVycykpOg0KICAgICAgICAgICAgaWYgcHJvdmlkZXIucHJpb3JpdHkgPiBzZWxmLm9wdGlvbnNfcHJvdmlkZXJzW2ldLnByaW9yaXR5Og0KICAgICAgICAgICAgICAgIHNlbGYub3B0aW9uc19wcm92aWRlcnMuaW5zZXJ0KGksIHByb3ZpZGVyKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzZWxmLm9wdGlvbnNfcHJvdmlkZXJzLmFwcGVuZChwcm92aWRlcikNCiAgICAgICAgbm9uX2dyb3VwX3NwZWNfb3B0aW9ucyA9IFtvcHRpb24gZm9yIG9wdGlvbiBpbiBwcm92aWRlci5vcHRpb25zDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ2dyb3VwJyBub3QgaW4gb3B0aW9uWzFdXQ0KICAgICAgICBncm91cHMgPSBnZXRhdHRyKHByb3ZpZGVyLCAnb3B0aW9uX2dyb3VwcycsICgpKQ0KICAgICAgICBpZiBvd25fZ3JvdXAgYW5kIG5vbl9ncm91cF9zcGVjX29wdGlvbnM6DQogICAgICAgICAgICBzZWxmLmFkZF9vcHRpb25fZ3JvdXAocHJvdmlkZXIubmFtZS51cHBlcigpLCBwcm92aWRlci5fX2RvY19fLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbl9ncm91cF9zcGVjX29wdGlvbnMsIHByb3ZpZGVyKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgZm9yIG9wdCwgb3B0ZGljdCBpbiBub25fZ3JvdXBfc3BlY19vcHRpb25zOg0KICAgICAgICAgICAgICAgIHNlbGYuYWRkX29wdGlrX29wdGlvbihwcm92aWRlciwgc2VsZi5jbWRsaW5lX3BhcnNlciwgb3B0LCBvcHRkaWN0KQ0KICAgICAgICBmb3IgZ25hbWUsIGdkb2MgaW4gZ3JvdXBzOg0KICAgICAgICAgICAgZ25hbWUgPSBnbmFtZS51cHBlcigpDQogICAgICAgICAgICBnb3B0aW9ucyA9IFtvcHRpb24gZm9yIG9wdGlvbiBpbiBwcm92aWRlci5vcHRpb25zDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBvcHRpb25bMV0uZ2V0KCdncm91cCcsICcnKS51cHBlcigpID09IGduYW1lXQ0KICAgICAgICAgICAgc2VsZi5hZGRfb3B0aW9uX2dyb3VwKGduYW1lLCBnZG9jLCBnb3B0aW9ucywgcHJvdmlkZXIpDQoNCiAgICBkZWYgYWRkX29wdGlvbl9ncm91cChzZWxmLCBncm91cF9uYW1lLCBfLCBvcHRpb25zLCBwcm92aWRlcik6DQogICAgICAgICMgYWRkIG9wdGlvbiBncm91cCB0byB0aGUgY29tbWFuZCBsaW5lIHBhcnNlcg0KICAgICAgICBpZiBncm91cF9uYW1lIGluIHNlbGYuX215Z3JvdXBzOg0KICAgICAgICAgICAgZ3JvdXAgPSBzZWxmLl9teWdyb3Vwc1tncm91cF9uYW1lXQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgZ3JvdXAgPSBvcHRwYXJzZS5PcHRpb25Hcm91cChzZWxmLmNtZGxpbmVfcGFyc2VyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1ncm91cF9uYW1lLmNhcGl0YWxpemUoKSkNCiAgICAgICAgICAgIHNlbGYuY21kbGluZV9wYXJzZXIuYWRkX29wdGlvbl9ncm91cChncm91cCkNCiAgICAgICAgICAgIGdyb3VwLmxldmVsID0gcHJvdmlkZXIubGV2ZWwNCiAgICAgICAgICAgIHNlbGYuX215Z3JvdXBzW2dyb3VwX25hbWVdID0gZ3JvdXANCiAgICAgICAgICAgICMgYWRkIHNlY3Rpb24gdG8gdGhlIGNvbmZpZyBmaWxlDQogICAgICAgICAgICBpZiBncm91cF9uYW1lICE9ICJERUZBVUxUIiBhbmQgXA0KICAgICAgICAgICAgICAgICAgICBncm91cF9uYW1lIG5vdCBpbiBzZWxmLmNmZ2ZpbGVfcGFyc2VyLl9zZWN0aW9uczoNCiAgICAgICAgICAgICAgICBzZWxmLmNmZ2ZpbGVfcGFyc2VyLmFkZF9zZWN0aW9uKGdyb3VwX25hbWUpDQogICAgICAgICMgYWRkIHByb3ZpZGVyJ3Mgc3BlY2lmaWMgb3B0aW9ucw0KICAgICAgICBmb3Igb3B0LCBvcHRkaWN0IGluIG9wdGlvbnM6DQogICAgICAgICAgICBzZWxmLmFkZF9vcHRpa19vcHRpb24ocHJvdmlkZXIsIGdyb3VwLCBvcHQsIG9wdGRpY3QpDQoNCiAgICBkZWYgYWRkX29wdGlrX29wdGlvbihzZWxmLCBwcm92aWRlciwgb3B0aWtjb250YWluZXIsIG9wdCwgb3B0ZGljdCk6DQogICAgICAgIGFyZ3MsIG9wdGRpY3QgPSBzZWxmLm9wdGlrX29wdGlvbihwcm92aWRlciwgb3B0LCBvcHRkaWN0KQ0KICAgICAgICBvcHRpb24gPSBvcHRpa2NvbnRhaW5lci5hZGRfb3B0aW9uKCphcmdzLCAqKm9wdGRpY3QpDQogICAgICAgIHNlbGYuX2FsbF9vcHRpb25zW29wdF0gPSBwcm92aWRlcg0KICAgICAgICBzZWxmLl9tYXhsZXZlbCA9IG1heChzZWxmLl9tYXhsZXZlbCwgb3B0aW9uLmxldmVsIG9yIDApDQoNCiAgICBkZWYgb3B0aWtfb3B0aW9uKHNlbGYsIHByb3ZpZGVyLCBvcHQsIG9wdGRpY3QpOg0KICAgICAgICAiIiJnZXQgb3VyIHBlcnNvbmFsIG9wdGlvbiBkZWZpbml0aW9uIGFuZCByZXR1cm4gYSBzdWl0YWJsZSBmb3JtIGZvcg0KICAgICAgICB1c2Ugd2l0aCBvcHRpay9vcHRwYXJzZQ0KICAgICAgICAiIiINCiAgICAgICAgb3B0ZGljdCA9IGNvcHkuY29weShvcHRkaWN0KQ0KICAgICAgICBpZiAnYWN0aW9uJyBpbiBvcHRkaWN0Og0KICAgICAgICAgICAgc2VsZi5fbm9jYWxsYmFja19vcHRpb25zW3Byb3ZpZGVyXSA9IG9wdA0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgb3B0ZGljdFsnYWN0aW9uJ10gPSAnY2FsbGJhY2snDQogICAgICAgICAgICBvcHRkaWN0WydjYWxsYmFjayddID0gc2VsZi5jYl9zZXRfcHJvdmlkZXJfb3B0aW9uDQogICAgICAgICMgZGVmYXVsdCBpcyBoYW5kbGVkIGhlcmUgYW5kICptdXN0IG5vdCogYmUgZ2l2ZW4gdG8gb3B0aWsgaWYgeW91DQogICAgICAgICMgd2FudCB0aGUgd2hvbGUgbWFjaGluZXJ5IHRvIHdvcmsNCiAgICAgICAgaWYgJ2RlZmF1bHQnIGluIG9wdGRpY3Q6DQogICAgICAgICAgICBpZiAoJ2hlbHAnIGluIG9wdGRpY3QNCiAgICAgICAgICAgICAgICAgICAgYW5kIG9wdGRpY3QuZ2V0KCdkZWZhdWx0JykgaXMgbm90IE5vbmUNCiAgICAgICAgICAgICAgICAgICAgYW5kIG9wdGRpY3RbJ2FjdGlvbiddIG5vdCBpbiAoJ3N0b3JlX3RydWUnLCAnc3RvcmVfZmFsc2UnKSk6DQogICAgICAgICAgICAgICAgb3B0ZGljdFsnaGVscCddICs9ICcgW2N1cnJlbnQ6ICVkZWZhdWx0XScNCiAgICAgICAgICAgIGRlbCBvcHRkaWN0WydkZWZhdWx0J10NCiAgICAgICAgYXJncyA9IFsnLS0nICsgc3RyKG9wdCldDQogICAgICAgIGlmICdzaG9ydCcgaW4gb3B0ZGljdDoNCiAgICAgICAgICAgIHNlbGYuX3Nob3J0X29wdGlvbnNbb3B0ZGljdFsnc2hvcnQnXV0gPSBvcHQNCiAgICAgICAgICAgIGFyZ3MuYXBwZW5kKCctJyArIG9wdGRpY3RbJ3Nob3J0J10pDQogICAgICAgICAgICBkZWwgb3B0ZGljdFsnc2hvcnQnXQ0KICAgICAgICAjIGNsZWFudXAgb3B0aW9uIGRlZmluaXRpb24gZGljdCBiZWZvcmUgZ2l2aW5nIGl0IHRvIG9wdGlrDQogICAgICAgIGZvciBrZXkgaW4gbGlzdChvcHRkaWN0LmtleXMoKSk6DQogICAgICAgICAgICBpZiBrZXkgbm90IGluIHNlbGYuX29wdGlrX29wdGlvbl9hdHRyczoNCiAgICAgICAgICAgICAgICBvcHRkaWN0LnBvcChrZXkpDQogICAgICAgIHJldHVybiBhcmdzLCBvcHRkaWN0DQoNCiAgICBkZWYgY2Jfc2V0X3Byb3ZpZGVyX29wdGlvbihzZWxmLCBvcHRpb24sIG9wdCwgdmFsdWUsIHBhcnNlcik6DQogICAgICAgICIiIm9wdGlrIGNhbGxiYWNrIGZvciBvcHRpb24gc2V0dGluZyIiIg0KICAgICAgICBpZiBvcHQuc3RhcnRzd2l0aCgnLS0nKToNCiAgICAgICAgICAgICMgcmVtb3ZlIC0tIG9uIGxvbmcgb3B0aW9uDQogICAgICAgICAgICBvcHQgPSBvcHRbMjpdDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICAjIHNob3J0IG9wdGlvbiwgZ2V0IGl0cyBsb25nIGVxdWl2YWxlbnQNCiAgICAgICAgICAgIG9wdCA9IHNlbGYuX3Nob3J0X29wdGlvbnNbb3B0WzE6XV0NCiAgICAgICAgIyB0cmljayBzaW5jZSB3ZSBjYW4ndCBzZXQgYWN0aW9uPSdzdG9yZV90cnVlJyBvbiBvcHRpb25zDQogICAgICAgIGlmIHZhbHVlIGlzIE5vbmU6DQogICAgICAgICAgICB2YWx1ZSA9IDENCiAgICAgICAgc2VsZi5nbG9iYWxfc2V0X29wdGlvbihvcHQsIHZhbHVlKQ0KDQogICAgZGVmIGdsb2JhbF9zZXRfb3B0aW9uKHNlbGYsIG9wdCwgdmFsdWUpOg0KICAgICAgICAiIiJzZXQgb3B0aW9uIG9uIHRoZSBjb3JyZWN0IG9wdGlvbiBwcm92aWRlciIiIg0KICAgICAgICBzZWxmLl9hbGxfb3B0aW9uc1tvcHRdLnNldF9vcHRpb24ob3B0LCB2YWx1ZSkNCg0KICAgIGRlZiBnZW5lcmF0ZV9jb25maWcoc2VsZiwgc3RyZWFtPU5vbmUsIHNraXBzZWN0aW9ucz0oKSwgZW5jb2Rpbmc9Tm9uZSk6DQogICAgICAgICIiIndyaXRlIGEgY29uZmlndXJhdGlvbiBmaWxlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBjb25maWd1cmF0aW9uDQogICAgICAgIGludG8gdGhlIGdpdmVuIHN0cmVhbSBvciBzdGRvdXQNCiAgICAgICAgIiIiDQogICAgICAgIG9wdGlvbnNfYnlfc2VjdGlvbiA9IHt9DQogICAgICAgIHNlY3Rpb25zID0gW10NCiAgICAgICAgZm9yIHByb3ZpZGVyIGluIHNlbGYub3B0aW9uc19wcm92aWRlcnM6DQogICAgICAgICAgICBmb3Igc2VjdGlvbiwgb3B0aW9ucyBpbiBwcm92aWRlci5vcHRpb25zX2J5X3NlY3Rpb24oKToNCiAgICAgICAgICAgICAgICBpZiBzZWN0aW9uIGlzIE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gPSBwcm92aWRlci5uYW1lDQogICAgICAgICAgICAgICAgaWYgc2VjdGlvbiBpbiBza2lwc2VjdGlvbnM6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgb3B0aW9ucyA9IFsobiwgZCwgdikgZm9yIChuLCBkLCB2KSBpbiBvcHRpb25zDQogICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkLmdldCgndHlwZScpIGlzIG5vdCBOb25lDQogICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgbm90IGQuZ2V0KCdkZXByZWNhdGVkJyldDQogICAgICAgICAgICAgICAgaWYgbm90IG9wdGlvbnM6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgaWYgc2VjdGlvbiBub3QgaW4gc2VjdGlvbnM6DQogICAgICAgICAgICAgICAgICAgIHNlY3Rpb25zLmFwcGVuZChzZWN0aW9uKQ0KICAgICAgICAgICAgICAgIGFsbG9wdGlvbnMgPSBvcHRpb25zX2J5X3NlY3Rpb24uc2V0ZGVmYXVsdChzZWN0aW9uLCBbXSkNCiAgICAgICAgICAgICAgICBhbGxvcHRpb25zICs9IG9wdGlvbnMNCiAgICAgICAgc3RyZWFtID0gc3RyZWFtIG9yIHN5cy5zdGRvdXQNCiAgICAgICAgcHJpbnRlZCA9IEZhbHNlDQogICAgICAgIGZvciBzZWN0aW9uIGluIHNlY3Rpb25zOg0KICAgICAgICAgICAgaWYgcHJpbnRlZDoNCiAgICAgICAgICAgICAgICBwcmludCgnXG4nLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgICAgIHV0aWxzLmZvcm1hdF9zZWN0aW9uKHN0cmVhbSwgc2VjdGlvbi51cHBlcigpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkKG9wdGlvbnNfYnlfc2VjdGlvbltzZWN0aW9uXSkpDQogICAgICAgICAgICBwcmludGVkID0gVHJ1ZQ0KDQogICAgZGVmIGdlbmVyYXRlX21hbnBhZ2Uoc2VsZiwgcGtnaW5mbywgc2VjdGlvbj0xLCBzdHJlYW09Tm9uZSk6DQogICAgICAgIHdpdGggX3BhdGNoX29wdHBhcnNlKCk6DQogICAgICAgICAgICBfZ2VuZXJhdGVfbWFucGFnZShzZWxmLmNtZGxpbmVfcGFyc2VyLCBwa2dpbmZvLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbiwgc3RyZWFtPXN0cmVhbSBvciBzeXMuc3Rkb3V0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw9c2VsZi5fbWF4bGV2ZWwpDQoNCiAgICBkZWYgbG9hZF9wcm92aWRlcl9kZWZhdWx0cyhzZWxmKToNCiAgICAgICAgIiIiaW5pdGlhbGl6ZSBjb25maWd1cmF0aW9uIHVzaW5nIGRlZmF1bHQgdmFsdWVzIiIiDQogICAgICAgIGZvciBwcm92aWRlciBpbiBzZWxmLm9wdGlvbnNfcHJvdmlkZXJzOg0KICAgICAgICAgICAgcHJvdmlkZXIubG9hZF9kZWZhdWx0cygpDQoNCiAgICBkZWYgcmVhZF9jb25maWdfZmlsZShzZWxmLCBjb25maWdfZmlsZT1Ob25lLCB2ZXJib3NlPU5vbmUpOg0KICAgICAgICAiIiJyZWFkIHRoZSBjb25maWd1cmF0aW9uIGZpbGUgYnV0IGRvIG5vdCBsb2FkIGl0IChpLmUuIGRpc3BhdGNoaW5nDQogICAgICAgIHZhbHVlcyB0byBlYWNoIG9wdGlvbnMgcHJvdmlkZXIpDQogICAgICAgICIiIg0KICAgICAgICBoZWxwbGV2ZWwgPSAxDQogICAgICAgIHdoaWxlIGhlbHBsZXZlbCA8PSBzZWxmLl9tYXhsZXZlbDoNCiAgICAgICAgICAgIG9wdCA9ICctJy5qb2luKFsnbG9uZyddICogaGVscGxldmVsKSArICctaGVscCcNCiAgICAgICAgICAgIGlmIG9wdCBpbiBzZWxmLl9hbGxfb3B0aW9uczoNCiAgICAgICAgICAgICAgICBicmVhayAjIGFscmVhZHkgcHJvY2Vzc2VkDQogICAgICAgICAgICAjIHB5bGludDogZGlzYWJsZT11bnVzZWQtYXJndW1lbnQNCiAgICAgICAgICAgIGRlZiBoZWxwZnVuYyhvcHRpb24sIG9wdCwgdmFsLCBwLCBsZXZlbD1oZWxwbGV2ZWwpOg0KICAgICAgICAgICAgICAgIHByaW50KHNlbGYuaGVscChsZXZlbCkpDQogICAgICAgICAgICAgICAgc3lzLmV4aXQoMCkNCiAgICAgICAgICAgIGhlbHBtc2cgPSAnJXMgdmVyYm9zZSBoZWxwLicgJSAnICcuam9pbihbJ21vcmUnXSAqIGhlbHBsZXZlbCkNCiAgICAgICAgICAgIG9wdGRpY3QgPSB7J2FjdGlvbic6ICdjYWxsYmFjaycsICdjYWxsYmFjayc6IGhlbHBmdW5jLA0KICAgICAgICAgICAgICAgICAgICAgICAnaGVscCc6IGhlbHBtc2d9DQogICAgICAgICAgICBwcm92aWRlciA9IHNlbGYub3B0aW9uc19wcm92aWRlcnNbMF0NCiAgICAgICAgICAgIHNlbGYuYWRkX29wdGlrX29wdGlvbihwcm92aWRlciwgc2VsZi5jbWRsaW5lX3BhcnNlciwgb3B0LCBvcHRkaWN0KQ0KICAgICAgICAgICAgcHJvdmlkZXIub3B0aW9ucyArPSAoKG9wdCwgb3B0ZGljdCksKQ0KICAgICAgICAgICAgaGVscGxldmVsICs9IDENCiAgICAgICAgaWYgY29uZmlnX2ZpbGUgaXMgTm9uZToNCiAgICAgICAgICAgIGNvbmZpZ19maWxlID0gc2VsZi5jb25maWdfZmlsZQ0KICAgICAgICBpZiBjb25maWdfZmlsZSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGNvbmZpZ19maWxlID0gb3MucGF0aC5leHBhbmR1c2VyKGNvbmZpZ19maWxlKQ0KICAgICAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGNvbmZpZ19maWxlKToNCiAgICAgICAgICAgICAgICByYWlzZSBJT0Vycm9yKCJUaGUgY29uZmlnIGZpbGUgezpzfSBkb2Vzbid0IGV4aXN0ISIuZm9ybWF0KGNvbmZpZ19maWxlKSkNCg0KICAgICAgICB1c2VfY29uZmlnX2ZpbGUgPSBjb25maWdfZmlsZSBhbmQgb3MucGF0aC5leGlzdHMoY29uZmlnX2ZpbGUpDQogICAgICAgIGlmIHVzZV9jb25maWdfZmlsZToNCiAgICAgICAgICAgIHBhcnNlciA9IHNlbGYuY2ZnZmlsZV9wYXJzZXINCg0KICAgICAgICAgICAgIyBVc2UgdGhpcyBlbmNvZGluZyBpbiBvcmRlciB0byBzdHJpcCB0aGUgQk9NIG1hcmtlciwgaWYgYW55Lg0KICAgICAgICAgICAgd2l0aCBpby5vcGVuKGNvbmZpZ19maWxlLCAncicsIGVuY29kaW5nPSd1dGZfOF9zaWcnKSBhcyBmcDoNCiAgICAgICAgICAgICAgICBwYXJzZXIucmVhZF9maWxlKGZwKQ0KDQogICAgICAgICAgICAjIG5vcm1hbGl6ZSBzZWN0aW9ucyd0aXRsZQ0KICAgICAgICAgICAgZm9yIHNlY3QsIHZhbHVlcyBpbiBsaXN0KHBhcnNlci5fc2VjdGlvbnMuaXRlbXMoKSk6DQogICAgICAgICAgICAgICAgaWYgbm90IHNlY3QuaXN1cHBlcigpIGFuZCB2YWx1ZXM6DQogICAgICAgICAgICAgICAgICAgIHBhcnNlci5fc2VjdGlvbnNbc2VjdC51cHBlcigpXSA9IHZhbHVlcw0KDQogICAgICAgIGlmIG5vdCB2ZXJib3NlOg0KICAgICAgICAgICAgcmV0dXJuDQoNCiAgICAgICAgaWYgdXNlX2NvbmZpZ19maWxlOg0KICAgICAgICAgICAgbXNnID0gJ1VzaW5nIGNvbmZpZyBmaWxlIHt9Jy5mb3JtYXQob3MucGF0aC5hYnNwYXRoKGNvbmZpZ19maWxlKSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIG1zZyA9ICdObyBjb25maWcgZmlsZSBmb3VuZCwgdXNpbmcgZGVmYXVsdCBjb25maWd1cmF0aW9uJw0KICAgICAgICBwcmludChtc2csIGZpbGU9c3lzLnN0ZGVycikNCg0KICAgIGRlZiBsb2FkX2NvbmZpZ19maWxlKHNlbGYpOg0KICAgICAgICAiIiJkaXNwYXRjaCB2YWx1ZXMgcHJldmlvdXNseSByZWFkIGZyb20gYSBjb25maWd1cmF0aW9uIGZpbGUgdG8gZWFjaA0KICAgICAgICBvcHRpb25zIHByb3ZpZGVyKQ0KICAgICAgICAiIiINCiAgICAgICAgcGFyc2VyID0gc2VsZi5jZmdmaWxlX3BhcnNlcg0KICAgICAgICBmb3Igc2VjdGlvbiBpbiBwYXJzZXIuc2VjdGlvbnMoKToNCiAgICAgICAgICAgIGZvciBvcHRpb24sIHZhbHVlIGluIHBhcnNlci5pdGVtcyhzZWN0aW9uKToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuZ2xvYmFsX3NldF9vcHRpb24ob3B0aW9uLCB2YWx1ZSkNCiAgICAgICAgICAgICAgICBleGNlcHQgKEtleUVycm9yLCBvcHRwYXJzZS5PcHRpb25FcnJvcik6DQogICAgICAgICAgICAgICAgICAgICMgVE9ETyBoYW5kbGUgaGVyZSB1bmRlY2xhcmVkIG9wdGlvbnMgYXBwZWFyaW5nIGluIHRoZSBjb25maWcgZmlsZQ0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KDQogICAgZGVmIGxvYWRfY29uZmlndXJhdGlvbihzZWxmLCAqKmt3YXJncyk6DQogICAgICAgICIiIm92ZXJyaWRlIGNvbmZpZ3VyYXRpb24gYWNjb3JkaW5nIHRvIGdpdmVuIHBhcmFtZXRlcnMiIiINCiAgICAgICAgcmV0dXJuIHNlbGYubG9hZF9jb25maWd1cmF0aW9uX2Zyb21fY29uZmlnKGt3YXJncykNCg0KICAgIGRlZiBsb2FkX2NvbmZpZ3VyYXRpb25fZnJvbV9jb25maWcoc2VsZiwgY29uZmlnKToNCiAgICAgICAgZm9yIG9wdCwgb3B0X3ZhbHVlIGluIGNvbmZpZy5pdGVtcygpOg0KICAgICAgICAgICAgb3B0ID0gb3B0LnJlcGxhY2UoJ18nLCAnLScpDQogICAgICAgICAgICBwcm92aWRlciA9IHNlbGYuX2FsbF9vcHRpb25zW29wdF0NCiAgICAgICAgICAgIHByb3ZpZGVyLnNldF9vcHRpb24ob3B0LCBvcHRfdmFsdWUpDQoNCiAgICBkZWYgbG9hZF9jb21tYW5kX2xpbmVfY29uZmlndXJhdGlvbihzZWxmLCBhcmdzPU5vbmUpOg0KICAgICAgICAiIiJPdmVycmlkZSBjb25maWd1cmF0aW9uIGFjY29yZGluZyB0byBjb21tYW5kIGxpbmUgcGFyYW1ldGVycw0KDQogICAgICAgIHJldHVybiBhZGRpdGlvbmFsIGFyZ3VtZW50cw0KICAgICAgICAiIiINCiAgICAgICAgd2l0aCBfcGF0Y2hfb3B0cGFyc2UoKToNCiAgICAgICAgICAgIGlmIGFyZ3MgaXMgTm9uZToNCiAgICAgICAgICAgICAgICBhcmdzID0gc3lzLmFyZ3ZbMTpdDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGFyZ3MgPSBsaXN0KGFyZ3MpDQogICAgICAgICAgICAob3B0aW9ucywgYXJncykgPSBzZWxmLmNtZGxpbmVfcGFyc2VyLnBhcnNlX2FyZ3MoYXJncz1hcmdzKQ0KICAgICAgICAgICAgZm9yIHByb3ZpZGVyIGluIHNlbGYuX25vY2FsbGJhY2tfb3B0aW9uczoNCiAgICAgICAgICAgICAgICBjb25maWcgPSBwcm92aWRlci5jb25maWcNCiAgICAgICAgICAgICAgICBmb3IgYXR0ciBpbiBjb25maWcuX19kaWN0X18ua2V5cygpOg0KICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldGF0dHIob3B0aW9ucywgYXR0ciwgTm9uZSkNCiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgIHNldGF0dHIoY29uZmlnLCBhdHRyLCB2YWx1ZSkNCiAgICAgICAgICAgIHJldHVybiBhcmdzDQoNCiAgICBkZWYgYWRkX2hlbHBfc2VjdGlvbihzZWxmLCB0aXRsZSwgZGVzY3JpcHRpb24sIGxldmVsPTApOg0KICAgICAgICAiIiJhZGQgYSBkdW1teSBvcHRpb24gc2VjdGlvbiBmb3IgaGVscCBwdXJwb3NlICIiIg0KICAgICAgICBncm91cCA9IG9wdHBhcnNlLk9wdGlvbkdyb3VwKHNlbGYuY21kbGluZV9wYXJzZXIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9dGl0bGUuY2FwaXRhbGl6ZSgpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPWRlc2NyaXB0aW9uKQ0KICAgICAgICBncm91cC5sZXZlbCA9IGxldmVsDQogICAgICAgIHNlbGYuX21heGxldmVsID0gbWF4KHNlbGYuX21heGxldmVsLCBsZXZlbCkNCiAgICAgICAgc2VsZi5jbWRsaW5lX3BhcnNlci5hZGRfb3B0aW9uX2dyb3VwKGdyb3VwKQ0KDQogICAgZGVmIGhlbHAoc2VsZiwgbGV2ZWw9MCk6DQogICAgICAgICIiInJldHVybiB0aGUgdXNhZ2Ugc3RyaW5nIGZvciBhdmFpbGFibGUgb3B0aW9ucyAiIiINCiAgICAgICAgc2VsZi5jbWRsaW5lX3BhcnNlci5mb3JtYXR0ZXIub3V0cHV0X2xldmVsID0gbGV2ZWwNCiAgICAgICAgd2l0aCBfcGF0Y2hfb3B0cGFyc2UoKToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLmNtZGxpbmVfcGFyc2VyLmZvcm1hdF9oZWxwKCkNCg0KDQpjbGFzcyBPcHRpb25zUHJvdmlkZXJNaXhJbjoNCiAgICAiIiJNaXhpbiB0byBwcm92aWRlIG9wdGlvbnMgdG8gYW4gT3B0aW9uc01hbmFnZXIiIiINCg0KICAgICMgdGhvc2UgYXR0cmlidXRlcyBzaG91bGQgYmUgb3ZlcnJpZGRlbg0KICAgIHByaW9yaXR5ID0gLTENCiAgICBuYW1lID0gJ2RlZmF1bHQnDQogICAgb3B0aW9ucyA9ICgpDQogICAgbGV2ZWwgPSAwDQoNCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgIHNlbGYuY29uZmlnID0gb3B0cGFyc2UuVmFsdWVzKCkNCiAgICAgICAgc2VsZi5sb2FkX2RlZmF1bHRzKCkNCg0KICAgIGRlZiBsb2FkX2RlZmF1bHRzKHNlbGYpOg0KICAgICAgICAiIiJpbml0aWFsaXplIHRoZSBwcm92aWRlciB1c2luZyBkZWZhdWx0IHZhbHVlcyIiIg0KICAgICAgICBmb3Igb3B0LCBvcHRkaWN0IGluIHNlbGYub3B0aW9uczoNCiAgICAgICAgICAgIGFjdGlvbiA9IG9wdGRpY3QuZ2V0KCdhY3Rpb24nKQ0KICAgICAgICAgICAgaWYgYWN0aW9uICE9ICdjYWxsYmFjayc6DQogICAgICAgICAgICAgICAgIyBjYWxsYmFjayBhY3Rpb24gaGF2ZSBubyBkZWZhdWx0DQogICAgICAgICAgICAgICAgaWYgb3B0ZGljdCBpcyBOb25lOg0KICAgICAgICAgICAgICAgICAgICBvcHRkaWN0ID0gc2VsZi5nZXRfb3B0aW9uX2RlZihvcHQpDQogICAgICAgICAgICAgICAgZGVmYXVsdCA9IG9wdGRpY3QuZ2V0KCdkZWZhdWx0JykNCiAgICAgICAgICAgICAgICBzZWxmLnNldF9vcHRpb24ob3B0LCBkZWZhdWx0LCBhY3Rpb24sIG9wdGRpY3QpDQoNCiAgICBkZWYgb3B0aW9uX2F0dHJuYW1lKHNlbGYsIG9wdCwgb3B0ZGljdD1Ob25lKToNCiAgICAgICAgIiIiZ2V0IHRoZSBjb25maWcgYXR0cmlidXRlIGNvcnJlc3BvbmRpbmcgdG8gb3B0IiIiDQogICAgICAgIGlmIG9wdGRpY3QgaXMgTm9uZToNCiAgICAgICAgICAgIG9wdGRpY3QgPSBzZWxmLmdldF9vcHRpb25fZGVmKG9wdCkNCiAgICAgICAgcmV0dXJuIG9wdGRpY3QuZ2V0KCdkZXN0Jywgb3B0LnJlcGxhY2UoJy0nLCAnXycpKQ0KDQogICAgZGVmIG9wdGlvbl92YWx1ZShzZWxmLCBvcHQpOg0KICAgICAgICAiIiJnZXQgdGhlIGN1cnJlbnQgdmFsdWUgZm9yIHRoZSBnaXZlbiBvcHRpb24iIiINCiAgICAgICAgcmV0dXJuIGdldGF0dHIoc2VsZi5jb25maWcsIHNlbGYub3B0aW9uX2F0dHJuYW1lKG9wdCksIE5vbmUpDQoNCiAgICBkZWYgc2V0X29wdGlvbihzZWxmLCBvcHRuYW1lLCB2YWx1ZSwgYWN0aW9uPU5vbmUsIG9wdGRpY3Q9Tm9uZSk6DQogICAgICAgICIiIm1ldGhvZCBjYWxsZWQgdG8gc2V0IGFuIG9wdGlvbiAocmVnaXN0ZXJlZCBpbiB0aGUgb3B0aW9ucyBsaXN0KSIiIg0KICAgICAgICBpZiBvcHRkaWN0IGlzIE5vbmU6DQogICAgICAgICAgICBvcHRkaWN0ID0gc2VsZi5nZXRfb3B0aW9uX2RlZihvcHRuYW1lKQ0KICAgICAgICBpZiB2YWx1ZSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHZhbHVlID0gX3ZhbGlkYXRlKHZhbHVlLCBvcHRkaWN0LCBvcHRuYW1lKQ0KICAgICAgICBpZiBhY3Rpb24gaXMgTm9uZToNCiAgICAgICAgICAgIGFjdGlvbiA9IG9wdGRpY3QuZ2V0KCdhY3Rpb24nLCAnc3RvcmUnKQ0KICAgICAgICBpZiBhY3Rpb24gPT0gJ3N0b3JlJzoNCiAgICAgICAgICAgIHNldGF0dHIoc2VsZi5jb25maWcsIHNlbGYub3B0aW9uX2F0dHJuYW1lKG9wdG5hbWUsIG9wdGRpY3QpLCB2YWx1ZSkNCiAgICAgICAgZWxpZiBhY3Rpb24gaW4gKCdzdG9yZV90cnVlJywgJ2NvdW50Jyk6DQogICAgICAgICAgICBzZXRhdHRyKHNlbGYuY29uZmlnLCBzZWxmLm9wdGlvbl9hdHRybmFtZShvcHRuYW1lLCBvcHRkaWN0KSwgMCkNCiAgICAgICAgZWxpZiBhY3Rpb24gPT0gJ3N0b3JlX2ZhbHNlJzoNCiAgICAgICAgICAgIHNldGF0dHIoc2VsZi5jb25maWcsIHNlbGYub3B0aW9uX2F0dHJuYW1lKG9wdG5hbWUsIG9wdGRpY3QpLCAxKQ0KICAgICAgICBlbGlmIGFjdGlvbiA9PSAnYXBwZW5kJzoNCiAgICAgICAgICAgIG9wdG5hbWUgPSBzZWxmLm9wdGlvbl9hdHRybmFtZShvcHRuYW1lLCBvcHRkaWN0KQ0KICAgICAgICAgICAgX2xpc3QgPSBnZXRhdHRyKHNlbGYuY29uZmlnLCBvcHRuYW1lLCBOb25lKQ0KICAgICAgICAgICAgaWYgX2xpc3QgaXMgTm9uZToNCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCAobGlzdCwgdHVwbGUpKToNCiAgICAgICAgICAgICAgICAgICAgX2xpc3QgPSB2YWx1ZQ0KICAgICAgICAgICAgICAgIGVsaWYgdmFsdWUgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIF9saXN0ID0gW10NCiAgICAgICAgICAgICAgICAgICAgX2xpc3QuYXBwZW5kKHZhbHVlKQ0KICAgICAgICAgICAgICAgIHNldGF0dHIoc2VsZi5jb25maWcsIG9wdG5hbWUsIF9saXN0KQ0KICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKF9saXN0LCB0dXBsZSk6DQogICAgICAgICAgICAgICAgc2V0YXR0cihzZWxmLmNvbmZpZywgb3B0bmFtZSwgX2xpc3QgKyAodmFsdWUsKSkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX2xpc3QuYXBwZW5kKHZhbHVlKQ0KICAgICAgICBlbGlmIGFjdGlvbiA9PSAnY2FsbGJhY2snOg0KICAgICAgICAgICAgb3B0ZGljdFsnY2FsbGJhY2snXShOb25lLCBvcHRuYW1lLCB2YWx1ZSwgTm9uZSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJhaXNlIFVuc3VwcG9ydGVkQWN0aW9uKGFjdGlvbikNCg0KICAgIGRlZiBnZXRfb3B0aW9uX2RlZihzZWxmLCBvcHQpOg0KICAgICAgICAiIiJyZXR1cm4gdGhlIGRpY3Rpb25hcnkgZGVmaW5pbmcgYW4gb3B0aW9uIGdpdmVuIGl0cyBuYW1lIiIiDQogICAgICAgIGFzc2VydCBzZWxmLm9wdGlvbnMNCiAgICAgICAgZm9yIG9wdGlvbiBpbiBzZWxmLm9wdGlvbnM6DQogICAgICAgICAgICBpZiBvcHRpb25bMF0gPT0gb3B0Og0KICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25bMV0NCiAgICAgICAgcmFpc2Ugb3B0cGFyc2UuT3B0aW9uRXJyb3IoJ25vIHN1Y2ggb3B0aW9uICVzIGluIHNlY3Rpb24gJXInDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUgKG9wdCwgc2VsZi5uYW1lKSwgb3B0KQ0KDQogICAgZGVmIG9wdGlvbnNfYnlfc2VjdGlvbihzZWxmKToNCiAgICAgICAgIiIicmV0dXJuIGFuIGl0ZXJhdG9yIG9uIG9wdGlvbnMgZ3JvdXBlZCBieSBzZWN0aW9uDQoNCiAgICAgICAgKHNlY3Rpb24sIFtsaXN0IG9mIChvcHRuYW1lLCBvcHRkaWN0LCBvcHR2YWx1ZSldKQ0KICAgICAgICAiIiINCiAgICAgICAgc2VjdGlvbnMgPSB7fQ0KICAgICAgICBmb3Igb3B0bmFtZSwgb3B0ZGljdCBpbiBzZWxmLm9wdGlvbnM6DQogICAgICAgICAgICBzZWN0aW9ucy5zZXRkZWZhdWx0KG9wdGRpY3QuZ2V0KCdncm91cCcpLCBbXSkuYXBwZW5kKA0KICAgICAgICAgICAgICAgIChvcHRuYW1lLCBvcHRkaWN0LCBzZWxmLm9wdGlvbl92YWx1ZShvcHRuYW1lKSkpDQogICAgICAgIGlmIE5vbmUgaW4gc2VjdGlvbnM6DQogICAgICAgICAgICB5aWVsZCBOb25lLCBzZWN0aW9ucy5wb3AoTm9uZSkNCiAgICAgICAgZm9yIHNlY3Rpb24sIG9wdGlvbnMgaW4gc29ydGVkKHNlY3Rpb25zLml0ZW1zKCkpOg0KICAgICAgICAgICAgeWllbGQgc2VjdGlvbi51cHBlcigpLCBvcHRpb25zDQoNCiAgICBkZWYgb3B0aW9uc19hbmRfdmFsdWVzKHNlbGYsIG9wdGlvbnM9Tm9uZSk6DQogICAgICAgIGlmIG9wdGlvbnMgaXMgTm9uZToNCiAgICAgICAgICAgIG9wdGlvbnMgPSBzZWxmLm9wdGlvbnMNCiAgICAgICAgZm9yIG9wdG5hbWUsIG9wdGRpY3QgaW4gb3B0aW9uczoNCiAgICAgICAgICAgIHlpZWxkIChvcHRuYW1lLCBvcHRkaWN0LCBzZWxmLm9wdGlvbl92YWx1ZShvcHRuYW1lKSkNCg0KDQpjbGFzcyBDb25maWd1cmF0aW9uTWl4SW4oT3B0aW9uc01hbmFnZXJNaXhJbiwgT3B0aW9uc1Byb3ZpZGVyTWl4SW4pOg0KICAgICIiImJhc2ljIG1peGluIGZvciBzaW1wbGUgY29uZmlndXJhdGlvbnMgd2hpY2ggZG9uJ3QgbmVlZCB0aGUNCiAgICBtYW5hZ2VyIC8gcHJvdmlkZXJzIG1vZGVsDQogICAgIiIiDQogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgIGlmIG5vdCBhcmdzOg0KICAgICAgICAgICAga3dhcmdzLnNldGRlZmF1bHQoJ3VzYWdlJywgJycpDQogICAgICAgIE9wdGlvbnNNYW5hZ2VyTWl4SW4uX19pbml0X18oc2VsZiwgKmFyZ3MsICoqa3dhcmdzKQ0KICAgICAgICBPcHRpb25zUHJvdmlkZXJNaXhJbi5fX2luaXRfXyhzZWxmKQ0KICAgICAgICBpZiBub3QgZ2V0YXR0cihzZWxmLCAnb3B0aW9uX2dyb3VwcycsIE5vbmUpOg0KICAgICAgICAgICAgc2VsZi5vcHRpb25fZ3JvdXBzID0gW10NCiAgICAgICAgICAgIGZvciBfLCBvcHRkaWN0IGluIHNlbGYub3B0aW9uczoNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIGdkZWYgPSAob3B0ZGljdFsnZ3JvdXAnXS51cHBlcigpLCAnJykNCiAgICAgICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgaWYgZ2RlZiBub3QgaW4gc2VsZi5vcHRpb25fZ3JvdXBzOg0KICAgICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbl9ncm91cHMuYXBwZW5kKGdkZWYpDQogICAgICAgIHNlbGYucmVnaXN0ZXJfb3B0aW9uc19wcm92aWRlcihzZWxmLCBvd25fZ3JvdXA9RmFsc2UpDQoNCg0KZGVmIF9nZW5lcmF0ZV9tYW5wYWdlKG9wdHBhcnNlciwgcGtnaW5mbywgc2VjdGlvbj0xLA0KICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbT1zeXMuc3Rkb3V0LCBsZXZlbD0wKToNCiAgICBmb3JtYXR0ZXIgPSBfTWFuSGVscEZvcm1hdHRlcigpDQogICAgZm9ybWF0dGVyLm91dHB1dF9sZXZlbCA9IGxldmVsDQogICAgZm9ybWF0dGVyLnBhcnNlciA9IG9wdHBhcnNlcg0KICAgIHByaW50KGZvcm1hdHRlci5mb3JtYXRfaGVhZChvcHRwYXJzZXIsIHBrZ2luZm8sIHNlY3Rpb24pLCBmaWxlPXN0cmVhbSkNCiAgICBwcmludChvcHRwYXJzZXIuZm9ybWF0X29wdGlvbl9oZWxwKGZvcm1hdHRlciksIGZpbGU9c3RyZWFtKQ0KICAgIHByaW50KGZvcm1hdHRlci5mb3JtYXRfdGFpbChwa2dpbmZvKSwgZmlsZT1zdHJlYW0pDQo="
          },
          "hashes": [
            {
              "value": "0CDE1513B484E7516AF1A39E6512B7C0",
              "algorithm": "md5"
            },
            {
              "value": "4DE52E1008DED8D08834DB71D315DF1BCA5D3258",
              "algorithm": "sha-1"
            },
            {
              "value": "501FE2967F8EBED3F846D00EA1F1D29B2EDD9EF9055C91B2D41BCED4AFDEF9A1",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/epylint.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "46A9F3BB8D4FC74FA1168E2AA0B118A4",
              "algorithm": "md5"
            },
            {
              "value": "050EFB570D10F99E9725C9E66B3E46D57D9DA688",
              "algorithm": "sha-1"
            },
            {
              "value": "5AD746ED1E0AEC4482D660335DFA369F267F292CBBEF0CD32C736A90F0CCB659",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/graph.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "69C8D21BFA82E83CAD6BE34BB0D696E0",
              "algorithm": "md5"
            },
            {
              "value": "E307489A4CB0874487A02BBE8713BB9BEB00AFF7",
              "algorithm": "sha-1"
            },
            {
              "value": "111BA34890621E040DE8F8EAF598E72E37B2575F38FCD525070792303887CEDA",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/interfaces.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDA5LTIwMTAsIDIwMTItMjAxMyBMT0dJTEFCIFMuQS4gKFBhcmlzLCBGUkFOQ0UpIDxjb250YWN0QGxvZ2lsYWIuZnI+DQojIENvcHlyaWdodCAoYykgMjAxMy0yMDE0IEdvb2dsZSwgSW5jLg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQgTWljaGFsIE5vd2lrb3dza2kgPGdvZGZyeWRAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQgQXJ1biBQZXJzYXVkIDxhcnVuQG51YmF0aS5uZXQ+DQojIENvcHlyaWdodCAoYykgMjAxNS0yMDE3IENsYXVkaXUgUG9wYSA8cGNtYW50aWNvcmVAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgRmxvcmlhbiBCcnVoaW4gPG1lQHRoZS1jb21waWxlci5vcmc+DQojIENvcHlyaWdodCAoYykgMjAxNSBJb25lbCBDcmlzdGlhbiBNYXJpZXMgPGNvbnRhY3RAaW9uZWxtYy5ybz4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IHNzb2xhbmtpIDxzdXNob2JoaXRzb2xhbmtpQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IFZpbGxlIFNreXR0w6QgPHZpbGxlLnNreXR0YUB1cGNsb3VkLmNvbT4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQoiIiJJbnRlcmZhY2VzIGZvciBQeWxpbnQgb2JqZWN0cyIiIg0KZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgbmFtZWR0dXBsZQ0KDQpDb25maWRlbmNlID0gbmFtZWR0dXBsZSgnQ29uZmlkZW5jZScsIFsnbmFtZScsICdkZXNjcmlwdGlvbiddKQ0KIyBXYXJuaW5nIENlcnRhaW50aWVzDQpISUdIID0gQ29uZmlkZW5jZSgnSElHSCcsICdObyBmYWxzZSBwb3NpdGl2ZSBwb3NzaWJsZS4nKQ0KSU5GRVJFTkNFID0gQ29uZmlkZW5jZSgnSU5GRVJFTkNFJywgJ1dhcm5pbmcgYmFzZWQgb24gaW5mZXJlbmNlIHJlc3VsdC4nKQ0KSU5GRVJFTkNFX0ZBSUxVUkUgPSBDb25maWRlbmNlKCdJTkZFUkVOQ0VfRkFJTFVSRScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcm5pbmcgYmFzZWQgb24gaW5mZXJlbmNlIHdpdGggZmFpbHVyZXMuJykNClVOREVGSU5FRCA9IENvbmZpZGVuY2UoJ1VOREVGSU5FRCcsDQogICAgICAgICAgICAgICAgICAgICAgICdXYXJuaW5nIHdpdGhvdXQgYW55IGFzc29jaWF0ZWQgY29uZmlkZW5jZSBsZXZlbC4nKQ0KDQpDT05GSURFTkNFX0xFVkVMUyA9IFtISUdILCBJTkZFUkVOQ0UsIElORkVSRU5DRV9GQUlMVVJFLCBVTkRFRklORURdDQoNCg0KY2xhc3MgSW50ZXJmYWNlOg0KICAgICIiIkJhc2UgY2xhc3MgZm9yIGludGVyZmFjZXMuIiIiDQogICAgQGNsYXNzbWV0aG9kDQogICAgZGVmIGlzX2ltcGxlbWVudGVkX2J5KGNscywgaW5zdGFuY2UpOg0KICAgICAgICByZXR1cm4gaW1wbGVtZW50cyhpbnN0YW5jZSwgY2xzKQ0KDQoNCmRlZiBpbXBsZW1lbnRzKG9iaiwgaW50ZXJmYWNlKToNCiAgICAiIiJSZXR1cm4gdHJ1ZSBpZiB0aGUgZ2l2ZSBvYmplY3QgKG1heWJlIGFuIGluc3RhbmNlIG9yIGNsYXNzKSBpbXBsZW1lbnRzDQogICAgdGhlIGludGVyZmFjZS4NCiAgICAiIiINCiAgICBraW1wbGVtZW50cyA9IGdldGF0dHIob2JqLCAnX19pbXBsZW1lbnRzX18nLCAoKSkNCiAgICBpZiBub3QgaXNpbnN0YW5jZShraW1wbGVtZW50cywgKGxpc3QsIHR1cGxlKSk6DQogICAgICAgIGtpbXBsZW1lbnRzID0gKGtpbXBsZW1lbnRzLCkNCiAgICBmb3IgaW1wbGVtZW50ZWRpbnRlcmZhY2UgaW4ga2ltcGxlbWVudHM6DQogICAgICAgIGlmIGlzc3ViY2xhc3MoaW1wbGVtZW50ZWRpbnRlcmZhY2UsIGludGVyZmFjZSk6DQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0KDQoNCmNsYXNzIElDaGVja2VyKEludGVyZmFjZSk6DQogICAgIiIiVGhpcyBpcyBhIGJhc2UgaW50ZXJmYWNlLCBub3QgZGVzaWduZWQgdG8gYmUgdXNlZCBlbHNld2hlcmUgdGhhbiBmb3INCiAgICBzdWIgaW50ZXJmYWNlcyBkZWZpbml0aW9uLg0KICAgICIiIg0KDQogICAgZGVmIG9wZW4oc2VsZik6DQogICAgICAgICIiImNhbGxlZCBiZWZvcmUgdmlzaXRpbmcgcHJvamVjdCAoaS5lIHNldCBvZiBtb2R1bGVzKSIiIg0KDQogICAgZGVmIGNsb3NlKHNlbGYpOg0KICAgICAgICAiIiJjYWxsZWQgYWZ0ZXIgdmlzaXRpbmcgcHJvamVjdCAoaS5lIHNldCBvZiBtb2R1bGVzKSIiIg0KDQoNCmNsYXNzIElSYXdDaGVja2VyKElDaGVja2VyKToNCiAgICAiIiJpbnRlcmZhY2UgZm9yIGNoZWNrZXIgd2hpY2ggbmVlZCB0byBwYXJzZSB0aGUgcmF3IGZpbGUNCiAgICAiIiINCg0KICAgIGRlZiBwcm9jZXNzX21vZHVsZShzZWxmLCBhc3Ryb2lkKToNCiAgICAgICAgIiIiIHByb2Nlc3MgYSBtb2R1bGUNCg0KICAgICAgICB0aGUgbW9kdWxlJ3MgY29udGVudCBpcyBhY2Nlc3NpYmxlIHZpYSBhc3Ryb2lkLnN0cmVhbQ0KICAgICAgICAiIiINCg0KDQpjbGFzcyBJVG9rZW5DaGVja2VyKElDaGVja2VyKToNCiAgICAiIiJJbnRlcmZhY2UgZm9yIGNoZWNrZXJzIHRoYXQgbmVlZCBhY2Nlc3MgdG8gdGhlIHRva2VuIGxpc3QuIiIiDQogICAgZGVmIHByb2Nlc3NfdG9rZW5zKHNlbGYsIHRva2Vucyk6DQogICAgICAgICIiIlByb2Nlc3MgYSBtb2R1bGUuDQoNCiAgICAgICAgdG9rZW5zIGlzIGEgbGlzdCBvZiBhbGwgc291cmNlIGNvZGUgdG9rZW5zIGluIHRoZSBmaWxlLg0KICAgICAgICAiIiINCg0KDQpjbGFzcyBJQXN0cm9pZENoZWNrZXIoSUNoZWNrZXIpOg0KICAgICIiIiBpbnRlcmZhY2UgZm9yIGNoZWNrZXIgd2hpY2ggcHJlZmVycyByZWNlaXZlIGV2ZW50cyBhY2NvcmRpbmcgdG8NCiAgICBzdGF0ZW1lbnQgdHlwZQ0KICAgICIiIg0KDQoNCmNsYXNzIElSZXBvcnRlcihJbnRlcmZhY2UpOg0KICAgICIiIiByZXBvcnRlciBjb2xsZWN0IG1lc3NhZ2VzIGFuZCBkaXNwbGF5IHJlc3VsdHMgZW5jYXBzdWxhdGVkIGluIGEgbGF5b3V0DQogICAgIiIiDQoNCiAgICBkZWYgaGFuZGxlX21lc3NhZ2Uoc2VsZiwgbXNnKToNCiAgICAgICAgIiIiSGFuZGxlIHRoZSBnaXZlbiBtZXNzYWdlIG9iamVjdC4iIiINCg0KICAgIGRlZiBkaXNwbGF5X3JlcG9ydHMoc2VsZiwgbGF5b3V0KToNCiAgICAgICAgIiIiZGlzcGxheSByZXN1bHRzIGVuY2Fwc3VsYXRlZCBpbiB0aGUgbGF5b3V0IHRyZWUNCiAgICAgICAgIiIiDQoNCg0KX19hbGxfXyA9ICgnSVJhd0NoZWNrZXInLCAnSUFzdHJvaWRDaGVja2VyJywgJ0lUb2tlbkNoZWNrZXInLCAnSVJlcG9ydGVyJykNCg=="
          },
          "hashes": [
            {
              "value": "DD2CC15544F8317DC4463FB7DC8E87C8",
              "algorithm": "md5"
            },
            {
              "value": "6C417DCF935D6692EBA2EF45D382B5BF4755E04F",
              "algorithm": "sha-1"
            },
            {
              "value": "5C853DB5B8B018E0FD9F89C3010D771C3C62AF2CCB2FD6DA92BCA1B447028353",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/lint.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDA2LTIwMTUgTE9HSUxBQiBTLkEuIChQYXJpcywgRlJBTkNFKSA8Y29udGFjdEBsb2dpbGFiLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMDggRmFicmljZSBEb3VjaGFudCA8RmFicmljZS5Eb3VjaGFudEBsb2dpbGFiLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMDkgVmluY2VudA0KIyBDb3B5cmlnaHQgKGMpIDIwMDkgTWFkcyBLaWlsZXJpY2ggPG1hZHNAa2lpbGVyaWNoLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDExLTIwMTQgR29vZ2xlLCBJbmMuDQojIENvcHlyaWdodCAoYykgMjAxMiBEYXZpZCBQdXJzZWhvdXNlIDxkYXZpZC5wdXJzZWhvdXNlQHNvbnltb2JpbGUuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTIgS2V2aW4gSmluZyBRaXUgPGtldmluLmppbmcucWl1QGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDEyIEZFTEQgQm9yaXMgPGxvdGhpcmFsZGFuQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDEyIEpUIE9sZHMgPGp0b2xkc0B4bmV0NS5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNC0yMDE4IENsYXVkaXUgUG9wYSA8cGNtYW50aWNvcmVAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSBNaWNoYWwgTm93aWtvd3NraSA8Z29kZnJ5ZEBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNCBCcmV0dCBDYW5ub24gPGJyZXR0QHB5dGhvbi5vcmc+DQojIENvcHlyaWdodCAoYykgMjAxNCBBbGV4YW5kcnUgQ29tYW4gPGZjb21hbkBiaXRkZWZlbmRlci5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNCBEYW5pZWwgSGFyZGluZyA8ZGhhcmRpbmdAbGl2aW5nMTgwLm5ldD4NCiMgQ29weXJpZ2h0IChjKSAyMDE0IEFydW4gUGVyc2F1ZCA8YXJ1bkBudWJhdGkubmV0Pg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQgRGFuIEdvbGRzbWl0aCA8ZGpnb2xkc21pdGhAZ29vZ2xlbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNS0yMDE2IEZsb3JpYW4gQnJ1aGluIDxtZUB0aGUtY29tcGlsZXIub3JnPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgQXJ1IFNhaG5pIDxhcnVzYWhuaUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNSBTdGV2ZW4gTXlpbnQgPGhnQHN0ZXZlbm15aW50LmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IFNpbXUgVG9uaSA8c2ltdXRvbmlAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgTWloYWkgQmFsaW50IDxiYWxpbnQubWloYWlAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgSW9uZWwgQ3Jpc3RpYW4gTWFyaWVzIDxjb250YWN0QGlvbmVsbWMucm8+DQojIENvcHlyaWdodCAoYykgMjAxNi0yMDE3IMWBdWthc3ogUm9nYWxza2kgPHJvZ2Fsc2tpLjkxQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE2IEdsZW5uIE1hdHRoZXdzIDxnbGVubkBlLWRhZC5uZXQ+DQojIENvcHlyaWdodCAoYykgMjAxNiBBbGFuIEV2YW5nZWxpc3RhIDxhbGFub2VAbGludXgudm5ldC5pYm0uY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBWaWxsZSBTa3l0dMOkIDx2aWxsZS5za3l0dGFAaWtpLmZpPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBoaXBwbzkxIDxndWlsbGF1bWUucGVpbGxleEBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNyBEYW5pZWwgTWlsbGVyIDxtaWxsZXJkZXZAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTcgUm9tYW4gSXZhbm92IDxtZUByb2l2YW5vdi5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNyBOZWQgQmF0Y2hlbGRlciA8bmVkQG5lZGJhdGNoZWxkZXIuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggUmFuZGFsbCBMZWVkcyA8cmFuZGFsbEBibGVlZHMuaW5mbz4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IE1pa2UgRnJ5c2luZ2VyIDx2YXBpZXJAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggc3NvbGFua2kgPHN1c2hvYmhpdHNvbGFua2lAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggVmlsbGUgU2t5dHTDpCA8dmlsbGUuc2t5dHRhQHVwY2xvdWQuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggU3VzaG9iaGl0IDwzMTk4Nzc2OStzdXNob2JoaXQyN0B1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBBbnRob255IFNvdHRpbGUgPGFzb3R0aWxlQHVtaWNoLmVkdT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IEphc29uIE93ZW4gPGphc29uLmEub3dlbkBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBHYXJ5IFR5bGVyIE1jTGVvZCA8bWFpbEBnYXJ5dHlsZXIuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggWXV2YWwgTGFuZ2VyIDx5dXZhbGxhbmdlckBtYWlsLnRhdS5hYy5pbD4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IE5pY2sgRHJvemQgPG5pY2hvbGFzZHJvemRAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTgga2Fwc2ggPGthcHNoQGthcC5zaD4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQojIHB5bGludDogZGlzYWJsZT1icm9hZC1leGNlcHQNCg0KIiIiICVwcm9nIFtvcHRpb25zXSBtb2R1bGVzX29yX3BhY2thZ2VzDQoNCiAgQ2hlY2sgdGhhdCBtb2R1bGUocykgc2F0aXNmeSBhIGNvZGluZyBzdGFuZGFyZCAoYW5kIG1vcmUgISkuDQoNCiAgICAlcHJvZyAtLWhlbHANCg0KICBEaXNwbGF5IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0Lg0KDQogICAgJXByb2cgLS1oZWxwLW1zZyA8bXNnLWlkPlssPG1zZy1pZD5dDQoNCiAgRGlzcGxheSBoZWxwIG1lc3NhZ2VzIGFib3V0IGdpdmVuIG1lc3NhZ2UgaWRlbnRpZmllcnMgYW5kIGV4aXQuDQoiIiINCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgcHJpbnRfZnVuY3Rpb24NCg0KaW1wb3J0IGNvbGxlY3Rpb25zDQppbXBvcnQgY29udGV4dGxpYg0KaW1wb3J0IG9wZXJhdG9yDQppbXBvcnQgb3MNCnRyeToNCiAgICBpbXBvcnQgbXVsdGlwcm9jZXNzaW5nDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgbXVsdGlwcm9jZXNzaW5nID0gTm9uZQ0KaW1wb3J0IHN5cw0KaW1wb3J0IHRva2VuaXplDQppbXBvcnQgd2FybmluZ3MNCg0KaW1wb3J0IGFzdHJvaWQNCmZyb20gYXN0cm9pZC5fX3BrZ2luZm9fXyBpbXBvcnQgdmVyc2lvbiBhcyBhc3Ryb2lkX3ZlcnNpb24NCmZyb20gYXN0cm9pZCBpbXBvcnQgbW9kdXRpbHMNCmZyb20gcHlsaW50IGltcG9ydCBjaGVja2Vycw0KZnJvbSBweWxpbnQgaW1wb3J0IGludGVyZmFjZXMNCmZyb20gcHlsaW50IGltcG9ydCByZXBvcnRlcnMNCmZyb20gcHlsaW50IGltcG9ydCBleGNlcHRpb25zDQpmcm9tIHB5bGludCBpbXBvcnQgdXRpbHMNCmZyb20gcHlsaW50IGltcG9ydCBjb25maWcNCmZyb20gcHlsaW50Ll9fcGtnaW5mb19fIGltcG9ydCB2ZXJzaW9uDQpmcm9tIHB5bGludC5yZXBvcnRlcnMudXJlcG9ydHMgaW1wb3J0IG5vZGVzIGFzIHJlcG9ydF9ub2Rlcw0KDQoNCk1BTkFHRVIgPSBhc3Ryb2lkLk1BTkFHRVINCg0KDQpkZWYgX2dldF9uZXdfYXJncyhtZXNzYWdlKToNCiAgICBsb2NhdGlvbiA9ICgNCiAgICAgICAgbWVzc2FnZS5hYnNwYXRoLA0KICAgICAgICBtZXNzYWdlLnBhdGgsDQogICAgICAgIG1lc3NhZ2UubW9kdWxlLA0KICAgICAgICBtZXNzYWdlLm9iaiwNCiAgICAgICAgbWVzc2FnZS5saW5lLA0KICAgICAgICBtZXNzYWdlLmNvbHVtbiwNCiAgICApDQogICAgcmV0dXJuICgNCiAgICAgICAgbWVzc2FnZS5tc2dfaWQsDQogICAgICAgIG1lc3NhZ2Uuc3ltYm9sLA0KICAgICAgICBsb2NhdGlvbiwNCiAgICAgICAgbWVzc2FnZS5tc2csDQogICAgICAgIG1lc3NhZ2UuY29uZmlkZW5jZSwNCiAgICApDQoNCmRlZiBfZ2V0X3B5dGhvbl9wYXRoKGZpbGVwYXRoKToNCiAgICBkaXJuYW1lID0gb3MucGF0aC5yZWFscGF0aChvcy5wYXRoLmV4cGFuZHVzZXIoZmlsZXBhdGgpKQ0KICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKGRpcm5hbWUpOg0KICAgICAgICBkaXJuYW1lID0gb3MucGF0aC5kaXJuYW1lKGRpcm5hbWUpDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihkaXJuYW1lLCAiX19pbml0X18ucHkiKSk6DQogICAgICAgICAgICByZXR1cm4gZGlybmFtZQ0KICAgICAgICBvbGRfZGlybmFtZSA9IGRpcm5hbWUNCiAgICAgICAgZGlybmFtZSA9IG9zLnBhdGguZGlybmFtZShkaXJuYW1lKQ0KICAgICAgICBpZiBvbGRfZGlybmFtZSA9PSBkaXJuYW1lOg0KICAgICAgICAgICAgcmV0dXJuIG9zLmdldGN3ZCgpDQogICAgcmV0dXJuIE5vbmUNCg0KDQpkZWYgX21lcmdlX3N0YXRzKHN0YXRzKToNCiAgICBtZXJnZWQgPSB7fQ0KICAgIGJ5X21zZyA9IGNvbGxlY3Rpb25zLkNvdW50ZXIoKQ0KICAgIGZvciBzdGF0IGluIHN0YXRzOg0KICAgICAgICBtZXNzYWdlX3N0YXRzID0gc3RhdC5wb3AoJ2J5X21zZycsIHt9KQ0KICAgICAgICBieV9tc2cudXBkYXRlKG1lc3NhZ2Vfc3RhdHMpDQoNCiAgICAgICAgZm9yIGtleSwgaXRlbSBpbiBzdGF0Lml0ZW1zKCk6DQogICAgICAgICAgICBpZiBrZXkgbm90IGluIG1lcmdlZDoNCiAgICAgICAgICAgICAgICBtZXJnZWRba2V5XSA9IGl0ZW0NCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpdGVtLCBkaWN0KToNCiAgICAgICAgICAgICAgICAgICAgbWVyZ2VkW2tleV0udXBkYXRlKGl0ZW0pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgbWVyZ2VkW2tleV0gPSBtZXJnZWRba2V5XSArIGl0ZW0NCg0KICAgIG1lcmdlZFsnYnlfbXNnJ10gPSBieV9tc2cNCiAgICByZXR1cm4gbWVyZ2VkDQoNCg0KQGNvbnRleHRsaWIuY29udGV4dG1hbmFnZXINCmRlZiBfcGF0Y2hfc3lzbW9kdWxlcygpOg0KICAgICMgQ29udGV4dCBtYW5hZ2VyIHRoYXQgcGVybWl0cyBydW5uaW5nIHB5bGludCwgb24gV2luZG93cywgd2l0aCAtbSBzd2l0Y2gNCiAgICAjIGFuZCB3aXRoIC0tam9icywgYXMgaW4gJ3B5dGhvbiAtMiAtbSBweWxpbnQgLi4gLS1qb2JzJy4NCiAgICAjIEZvciBtb3JlIGRldGFpbHMgd2h5IHRoaXMgaXMgbmVlZGVkLA0KICAgICMgc2VlIFB5dGhvbiBpc3N1ZSBodHRwOi8vYnVncy5weXRob24ub3JnL2lzc3VlMTA4NDUuDQoNCiAgICBtb2NrX21haW4gPSBfX25hbWVfXyAhPSAnX19tYWluX18nICMgLW0gc3dpdGNoDQogICAgaWYgbW9ja19tYWluOg0KICAgICAgICBzeXMubW9kdWxlc1snX19tYWluX18nXSA9IHN5cy5tb2R1bGVzW19fbmFtZV9fXQ0KDQogICAgdHJ5Og0KICAgICAgICB5aWVsZA0KICAgIGZpbmFsbHk6DQogICAgICAgIGlmIG1vY2tfbWFpbjoNCiAgICAgICAgICAgIHN5cy5tb2R1bGVzLnBvcCgnX19tYWluX18nKQ0KDQoNCiMgUHl0aG9uIExpbnRlciBjbGFzcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCg0KTVNHUyA9IHsNCiAgICAnRjAwMDEnOiAoJyVzJywNCiAgICAgICAgICAgICAgJ2ZhdGFsJywNCiAgICAgICAgICAgICAgJ1VzZWQgd2hlbiBhbiBlcnJvciBvY2N1cnJlZCBwcmV2ZW50aW5nIHRoZSBhbmFseXNpcyBvZiBhIFwNCiAgICAgICAgICAgICAgbW9kdWxlICh1bmFibGUgdG8gZmluZCBpdCBmb3IgaW5zdGFuY2UpLicpLA0KICAgICdGMDAwMic6ICgnJXM6ICVzJywNCiAgICAgICAgICAgICAgJ2FzdHJvaWQtZXJyb3InLA0KICAgICAgICAgICAgICAnVXNlZCB3aGVuIGFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgd2hpbGUgYnVpbGRpbmcgdGhlICcNCiAgICAgICAgICAgICAgJ0FzdHJvaWQgIHJlcHJlc2VudGF0aW9uLiBUaGlzIGlzIHVzdWFsbHkgYWNjb21wYW5pZWQgYnkgYSAnDQogICAgICAgICAgICAgICd0cmFjZWJhY2suIFBsZWFzZSByZXBvcnQgc3VjaCBlcnJvcnMgIScpLA0KICAgICdGMDAxMCc6ICgnZXJyb3Igd2hpbGUgY29kZSBwYXJzaW5nOiAlcycsDQogICAgICAgICAgICAgICdwYXJzZS1lcnJvcicsDQogICAgICAgICAgICAgICdVc2VkIHdoZW4gYW4gZXhjZXB0aW9uIG9jY3VycmVkIHdoaWxlIGJ1aWxkaW5nIHRoZSBBc3Ryb2lkICcNCiAgICAgICAgICAgICAgJ3JlcHJlc2VudGF0aW9uIHdoaWNoIGNvdWxkIGJlIGhhbmRsZWQgYnkgYXN0cm9pZC4nKSwNCg0KICAgICdJMDAwMSc6ICgnVW5hYmxlIHRvIHJ1biByYXcgY2hlY2tlcnMgb24gYnVpbHQtaW4gbW9kdWxlICVzJywNCiAgICAgICAgICAgICAgJ3Jhdy1jaGVja2VyLWZhaWxlZCcsDQogICAgICAgICAgICAgICdVc2VkIHRvIGluZm9ybSB0aGF0IGEgYnVpbHQtaW4gbW9kdWxlIGhhcyBub3QgYmVlbiBjaGVja2VkICcNCiAgICAgICAgICAgICAgJ3VzaW5nIHRoZSByYXcgY2hlY2tlcnMuJyksDQoNCiAgICAnSTAwMTAnOiAoJ1VuYWJsZSB0byBjb25zaWRlciBpbmxpbmUgb3B0aW9uICVyJywNCiAgICAgICAgICAgICAgJ2JhZC1pbmxpbmUtb3B0aW9uJywNCiAgICAgICAgICAgICAgJ1VzZWQgd2hlbiBhbiBpbmxpbmUgb3B0aW9uIGlzIGVpdGhlciBiYWRseSBmb3JtYXR0ZWQgb3IgY2FuXCd0ICcNCiAgICAgICAgICAgICAgJ2JlIHVzZWQgaW5zaWRlIG1vZHVsZXMuJyksDQoNCiAgICAnSTAwMTEnOiAoJ0xvY2FsbHkgZGlzYWJsaW5nICVzICglcyknLA0KICAgICAgICAgICAgICAnbG9jYWxseS1kaXNhYmxlZCcsDQogICAgICAgICAgICAgICdVc2VkIHdoZW4gYW4gaW5saW5lIG9wdGlvbiBkaXNhYmxlcyBhIG1lc3NhZ2Ugb3IgYSBtZXNzYWdlcyAnDQogICAgICAgICAgICAgICdjYXRlZ29yeS4nKSwNCiAgICAnSTAwMTInOiAoJ0xvY2FsbHkgZW5hYmxpbmcgJXMgKCVzKScsDQogICAgICAgICAgICAgICdsb2NhbGx5LWVuYWJsZWQnLA0KICAgICAgICAgICAgICAnVXNlZCB3aGVuIGFuIGlubGluZSBvcHRpb24gZW5hYmxlcyBhIG1lc3NhZ2Ugb3IgYSBtZXNzYWdlcyAnDQogICAgICAgICAgICAgICdjYXRlZ29yeS4nKSwNCiAgICAnSTAwMTMnOiAoJ0lnbm9yaW5nIGVudGlyZSBmaWxlJywNCiAgICAgICAgICAgICAgJ2ZpbGUtaWdub3JlZCcsDQogICAgICAgICAgICAgICdVc2VkIHRvIGluZm9ybSB0aGF0IHRoZSBmaWxlIHdpbGwgbm90IGJlIGNoZWNrZWQnKSwNCiAgICAnSTAwMjAnOiAoJ1N1cHByZXNzZWQgJXMgKGZyb20gbGluZSAlZCknLA0KICAgICAgICAgICAgICAnc3VwcHJlc3NlZC1tZXNzYWdlJywNCiAgICAgICAgICAgICAgJ0EgbWVzc2FnZSB3YXMgdHJpZ2dlcmVkIG9uIGEgbGluZSwgYnV0IHN1cHByZXNzZWQgZXhwbGljaXRseSAnDQogICAgICAgICAgICAgICdieSBhIGRpc2FibGU9IGNvbW1lbnQgaW4gdGhlIGZpbGUuIFRoaXMgbWVzc2FnZSBpcyBub3QgJw0KICAgICAgICAgICAgICAnZ2VuZXJhdGVkIGZvciBtZXNzYWdlcyB0aGF0IGFyZSBpZ25vcmVkIGR1ZSB0byBjb25maWd1cmF0aW9uICcNCiAgICAgICAgICAgICAgJ3NldHRpbmdzLicpLA0KICAgICdJMDAyMSc6ICgnVXNlbGVzcyBzdXBwcmVzc2lvbiBvZiAlcycsDQogICAgICAgICAgICAgICd1c2VsZXNzLXN1cHByZXNzaW9uJywNCiAgICAgICAgICAgICAgJ1JlcG9ydGVkIHdoZW4gYSBtZXNzYWdlIGlzIGV4cGxpY2l0bHkgZGlzYWJsZWQgZm9yIGEgbGluZSBvciAnDQogICAgICAgICAgICAgICdhIGJsb2NrIG9mIGNvZGUsIGJ1dCBuZXZlciB0cmlnZ2VyZWQuJyksDQogICAgJ0kwMDIyJzogKCdQcmFnbWEgIiVzIiBpcyBkZXByZWNhdGVkLCB1c2UgIiVzIiBpbnN0ZWFkJywNCiAgICAgICAgICAgICAgJ2RlcHJlY2F0ZWQtcHJhZ21hJywNCiAgICAgICAgICAgICAgJ1NvbWUgaW5saW5lIHB5bGludCBvcHRpb25zIGhhdmUgYmVlbiByZW5hbWVkIG9yIHJld29ya2VkLCAnDQogICAgICAgICAgICAgICdvbmx5IHRoZSBtb3N0IHJlY2VudCBmb3JtIHNob3VsZCBiZSB1c2VkLiAnDQogICAgICAgICAgICAgICdOT1RFOnNraXAtYWxsIGlzIG9ubHkgYXZhaWxhYmxlIHdpdGggcHlsaW50ID49IDAuMjYnLA0KICAgICAgICAgICAgICB7J29sZF9uYW1lcyc6IFsoJ0kwMDE0JywgJ2RlcHJlY2F0ZWQtZGlzYWJsZS1hbGwnKV19KSwNCg0KICAgICdFMDAwMSc6ICgnJXMnLA0KICAgICAgICAgICAgICAnc3ludGF4LWVycm9yJywNCiAgICAgICAgICAgICAgJ1VzZWQgd2hlbiBhIHN5bnRheCBlcnJvciBpcyByYWlzZWQgZm9yIGEgbW9kdWxlLicpLA0KDQogICAgJ0UwMDExJzogKCdVbnJlY29nbml6ZWQgZmlsZSBvcHRpb24gJXInLA0KICAgICAgICAgICAgICAndW5yZWNvZ25pemVkLWlubGluZS1vcHRpb24nLA0KICAgICAgICAgICAgICAnVXNlZCB3aGVuIGFuIHVua25vd24gaW5saW5lIG9wdGlvbiBpcyBlbmNvdW50ZXJlZC4nKSwNCiAgICAnRTAwMTInOiAoJ0JhZCBvcHRpb24gdmFsdWUgJXInLA0KICAgICAgICAgICAgICAnYmFkLW9wdGlvbi12YWx1ZScsDQogICAgICAgICAgICAgICdVc2VkIHdoZW4gYSBiYWQgdmFsdWUgZm9yIGFuIGlubGluZSBvcHRpb24gaXMgZW5jb3VudGVyZWQuJyksDQogICAgfQ0KDQoNCmlmIG11bHRpcHJvY2Vzc2luZyBpcyBub3QgTm9uZToNCiAgICBjbGFzcyBDaGlsZExpbnRlcihtdWx0aXByb2Nlc3NpbmcuUHJvY2Vzcyk6DQogICAgICAgIGRlZiBydW4oc2VsZik6DQogICAgICAgICAgICAjIHB5bGludDogZGlzYWJsZT1uby1tZW1iZXIsIHVuYmFsYW5jZWQtdHVwbGUtdW5wYWNraW5nDQogICAgICAgICAgICB0YXNrc19xdWV1ZSwgcmVzdWx0c19xdWV1ZSwgc2VsZi5fY29uZmlnID0gc2VsZi5fYXJncw0KDQogICAgICAgICAgICBzZWxmLl9jb25maWdbImpvYnMiXSA9IDEgICMgQ2hpbGQgZG9lcyBub3QgcGFyYWxsZWxpemUgYW55IGZ1cnRoZXIuDQogICAgICAgICAgICBzZWxmLl9weXRob24zX3BvcnRpbmdfbW9kZSA9IHNlbGYuX2NvbmZpZy5wb3AoDQogICAgICAgICAgICAgICAgJ3B5dGhvbjNfcG9ydGluZ19tb2RlJywgTm9uZSkNCiAgICAgICAgICAgIHNlbGYuX3BsdWdpbnMgPSBzZWxmLl9jb25maWcucG9wKCdwbHVnaW5zJywgTm9uZSkNCg0KICAgICAgICAgICAgIyBSdW4gbGludGVyIGZvciByZWNlaXZlZCBmaWxlcy9tb2R1bGVzLg0KICAgICAgICAgICAgZm9yIGZpbGVfb3JfbW9kdWxlIGluIGl0ZXIodGFza3NfcXVldWUuZ2V0LCAnU1RPUCcpOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5fcnVuX2xpbnRlcihmaWxlX29yX21vZHVsZVswXSkNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c19xdWV1ZS5wdXQocmVzdWx0KQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXg6DQogICAgICAgICAgICAgICAgICAgIHByaW50KCJpbnRlcm5hbCBlcnJvciB3aXRoIHNlbmRpbmcgcmVwb3J0IGZvciBtb2R1bGUgJXMiICUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9vcl9tb2R1bGUsIGZpbGU9c3lzLnN0ZGVycikNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZXgsIGZpbGU9c3lzLnN0ZGVycikNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c19xdWV1ZS5wdXQoe30pDQoNCiAgICAgICAgZGVmIF9ydW5fbGludGVyKHNlbGYsIGZpbGVfb3JfbW9kdWxlKToNCiAgICAgICAgICAgIGxpbnRlciA9IFB5TGludGVyKCkNCg0KICAgICAgICAgICAgIyBSZWdpc3RlciBzdGFuZGFyZCBjaGVja2Vycy4NCiAgICAgICAgICAgIGxpbnRlci5sb2FkX2RlZmF1bHRfcGx1Z2lucygpDQogICAgICAgICAgICAjIExvYWQgY29tbWFuZCBsaW5lIHBsdWdpbnMuDQogICAgICAgICAgICBpZiBzZWxmLl9wbHVnaW5zOg0KICAgICAgICAgICAgICAgIGxpbnRlci5sb2FkX3BsdWdpbl9tb2R1bGVzKHNlbGYuX3BsdWdpbnMpDQoNCiAgICAgICAgICAgIGxpbnRlci5sb2FkX2NvbmZpZ3VyYXRpb25fZnJvbV9jb25maWcoc2VsZi5fY29uZmlnKQ0KICAgICAgICAgICAgbGludGVyLnNldF9yZXBvcnRlcihyZXBvcnRlcnMuQ29sbGVjdGluZ1JlcG9ydGVyKCkpDQoNCiAgICAgICAgICAgICMgRW5hYmxlIHRoZSBQeXRob24gMyBjaGVja2VyIG1vZGUuIFRoaXMgb3B0aW9uIGlzDQogICAgICAgICAgICAjIHBhc3NlZCBkb3duIGZyb20gdGhlIHBhcmVudCBsaW50ZXIgdXAgdG8gaGVyZSwgc2luY2UNCiAgICAgICAgICAgICMgdGhlIFB5dGhvbiAzIHBvcnRpbmcgZmxhZyBiZWxvbmdzIHRvIHRoZSBSdW4gY2xhc3MsDQogICAgICAgICAgICAjIGluc3RlYWQgb2YgdGhlIExpbnRlciBjbGFzcy4NCiAgICAgICAgICAgIGlmIHNlbGYuX3B5dGhvbjNfcG9ydGluZ19tb2RlOg0KICAgICAgICAgICAgICAgIGxpbnRlci5weXRob24zX3BvcnRpbmdfbW9kZSgpDQoNCiAgICAgICAgICAgICMgUnVuIHRoZSBjaGVja3MuDQogICAgICAgICAgICBsaW50ZXIuY2hlY2soZmlsZV9vcl9tb2R1bGUpDQoNCiAgICAgICAgICAgIG1zZ3MgPSBbX2dldF9uZXdfYXJncyhtKSBmb3IgbSBpbiBsaW50ZXIucmVwb3J0ZXIubWVzc2FnZXNdDQogICAgICAgICAgICByZXR1cm4gKGZpbGVfb3JfbW9kdWxlLCBsaW50ZXIuZmlsZV9zdGF0ZS5iYXNlX25hbWUsIGxpbnRlci5jdXJyZW50X25hbWUsDQogICAgICAgICAgICAgICAgICAgIG1zZ3MsIGxpbnRlci5zdGF0cywgbGludGVyLm1zZ19zdGF0dXMpDQoNCg0KIyBweWxpbnQ6IGRpc2FibGU9dG9vLW1hbnktaW5zdGFuY2UtYXR0cmlidXRlcw0KY2xhc3MgUHlMaW50ZXIoY29uZmlnLk9wdGlvbnNNYW5hZ2VyTWl4SW4sDQogICAgICAgICAgICAgICB1dGlscy5NZXNzYWdlc0hhbmRsZXJNaXhJbiwNCiAgICAgICAgICAgICAgIHV0aWxzLlJlcG9ydHNIYW5kbGVyTWl4SW4sDQogICAgICAgICAgICAgICBjaGVja2Vycy5CYXNlVG9rZW5DaGVja2VyKToNCiAgICAiIiJsaW50IFB5dGhvbiBtb2R1bGVzIHVzaW5nIGV4dGVybmFsIGNoZWNrZXJzLg0KDQogICAgVGhpcyBpcyB0aGUgbWFpbiBjaGVja2VyIGNvbnRyb2xsaW5nIHRoZSBvdGhlciBvbmVzIGFuZCB0aGUgcmVwb3J0cw0KICAgIGdlbmVyYXRpb24uIEl0IGlzIGl0c2VsZiBib3RoIGEgcmF3IGNoZWNrZXIgYW5kIGFuIGFzdHJvaWQgY2hlY2tlciBpbiBvcmRlcg0KICAgIHRvOg0KICAgICogaGFuZGxlIG1lc3NhZ2UgYWN0aXZhdGlvbiAvIGRlYWN0aXZhdGlvbiBhdCB0aGUgbW9kdWxlIGxldmVsDQogICAgKiBoYW5kbGUgc29tZSBiYXNpYyBidXQgbmVjZXNzYXJ5IHN0YXRzJ2RhdGEgKG51bWJlciBvZiBjbGFzc2VzLCBtZXRob2RzLi4uKQ0KDQogICAgSURFIHBsdWdpbiBkZXZlbG9wZXJzOiB5b3UgbWF5IGhhdmUgdG8gY2FsbA0KICAgIGBhc3Ryb2lkLmJ1aWxkZXIuTUFOQUdFUi5hc3Ryb2lkX2NhY2hlLmNsZWFyKClgIGFjcm9zcyBydW5zIGlmIHlvdSB3YW50DQogICAgdG8gZW5zdXJlIHRoZSBsYXRlc3QgY29kZSB2ZXJzaW9uIGlzIGFjdHVhbGx5IGNoZWNrZWQuDQogICAgIiIiDQoNCiAgICBfX2ltcGxlbWVudHNfXyA9IChpbnRlcmZhY2VzLklUb2tlbkNoZWNrZXIsICkNCg0KICAgIG5hbWUgPSAnbWFzdGVyJw0KICAgIHByaW9yaXR5ID0gMA0KICAgIGxldmVsID0gMA0KICAgIG1zZ3MgPSBNU0dTDQoNCiAgICBAc3RhdGljbWV0aG9kDQogICAgZGVmIG1ha2Vfb3B0aW9ucygpOg0KICAgICAgICByZXR1cm4gKCgnaWdub3JlJywNCiAgICAgICAgICAgICAgICAgeyd0eXBlJyA6ICdjc3YnLCAnbWV0YXZhcicgOiAnPGZpbGU+Wyw8ZmlsZT4uLi5dJywNCiAgICAgICAgICAgICAgICAgICdkZXN0JyA6ICdibGFja19saXN0JywgJ2RlZmF1bHQnIDogKCdDVlMnLCksDQogICAgICAgICAgICAgICAgICAnaGVscCcgOiAnQWRkIGZpbGVzIG9yIGRpcmVjdG9yaWVzIHRvIHRoZSBibGFja2xpc3QuICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdUaGV5IHNob3VsZCBiZSBiYXNlIG5hbWVzLCBub3QgcGF0aHMuJ30pLA0KDQogICAgICAgICAgICAgICAgKCdpZ25vcmUtcGF0dGVybnMnLA0KICAgICAgICAgICAgICAgICB7J3R5cGUnIDogJ3JlZ2V4cF9jc3YnLCAnbWV0YXZhcicgOiAnPHBhdHRlcm4+Wyw8cGF0dGVybj4uLi5dJywNCiAgICAgICAgICAgICAgICAgICdkZXN0JyA6ICdibGFja19saXN0X3JlJywgJ2RlZmF1bHQnIDogKCksDQogICAgICAgICAgICAgICAgICAnaGVscCcgOiAnQWRkIGZpbGVzIG9yIGRpcmVjdG9yaWVzIG1hdGNoaW5nIHRoZSByZWdleCBwYXR0ZXJucyB0byB0aGUnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAnIGJsYWNrbGlzdC4gVGhlIHJlZ2V4IG1hdGNoZXMgYWdhaW5zdCBiYXNlIG5hbWVzLCBub3QgcGF0aHMuJ30pLA0KDQogICAgICAgICAgICAgICAgKCdwZXJzaXN0ZW50JywNCiAgICAgICAgICAgICAgICAgeydkZWZhdWx0JzogVHJ1ZSwgJ3R5cGUnIDogJ3luJywgJ21ldGF2YXInIDogJzx5X29yX24+JywNCiAgICAgICAgICAgICAgICAgICdsZXZlbCc6IDEsDQogICAgICAgICAgICAgICAgICAnaGVscCcgOiAnUGlja2xlIGNvbGxlY3RlZCBkYXRhIGZvciBsYXRlciBjb21wYXJpc29ucy4nfSksDQoNCiAgICAgICAgICAgICAgICAoJ2xvYWQtcGx1Z2lucycsDQogICAgICAgICAgICAgICAgIHsndHlwZScgOiAnY3N2JywgJ21ldGF2YXInIDogJzxtb2R1bGVzPicsICdkZWZhdWx0JyA6ICgpLA0KICAgICAgICAgICAgICAgICAgJ2xldmVsJzogMSwNCiAgICAgICAgICAgICAgICAgICdoZWxwJyA6ICdMaXN0IG9mIHBsdWdpbnMgKGFzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXMgb2YgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3B5dGhvbiBtb2R1bGVzIG5hbWVzKSB0byBsb2FkLCB1c3VhbGx5IHRvIHJlZ2lzdGVyICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRpdGlvbmFsIGNoZWNrZXJzLid9KSwNCg0KICAgICAgICAgICAgICAgICgnb3V0cHV0LWZvcm1hdCcsDQogICAgICAgICAgICAgICAgIHsnZGVmYXVsdCc6ICd0ZXh0JywgJ3R5cGUnOiAnc3RyaW5nJywgJ21ldGF2YXInIDogJzxmb3JtYXQ+JywNCiAgICAgICAgICAgICAgICAgICdzaG9ydCc6ICdmJywNCiAgICAgICAgICAgICAgICAgICdncm91cCc6ICdSZXBvcnRzJywNCiAgICAgICAgICAgICAgICAgICdoZWxwJyA6ICdTZXQgdGhlIG91dHB1dCBmb3JtYXQuIEF2YWlsYWJsZSBmb3JtYXRzIGFyZSB0ZXh0LCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICcgcGFyc2VhYmxlLCBjb2xvcml6ZWQsIGpzb24gYW5kIG1zdnMgKHZpc3VhbCBzdHVkaW8pLicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICcgWW91IGNhbiBhbHNvIGdpdmUgYSByZXBvcnRlciBjbGFzcywgZS5nLiBteXBhY2thZ2UubXltb2R1bGUuJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ015UmVwb3J0ZXJDbGFzcy4nfSksDQoNCiAgICAgICAgICAgICAgICAoJ3JlcG9ydHMnLA0KICAgICAgICAgICAgICAgICB7J2RlZmF1bHQnOiBGYWxzZSwgJ3R5cGUnIDogJ3luJywgJ21ldGF2YXInIDogJzx5X29yX24+JywNCiAgICAgICAgICAgICAgICAgICdzaG9ydCc6ICdyJywNCiAgICAgICAgICAgICAgICAgICdncm91cCc6ICdSZXBvcnRzJywNCiAgICAgICAgICAgICAgICAgICdoZWxwJyA6ICdUZWxscyB3aGV0aGVyIHRvIGRpc3BsYXkgYSBmdWxsIHJlcG9ydCBvciBvbmx5IHRoZSAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZXMuJ30pLA0KDQogICAgICAgICAgICAgICAgKCdldmFsdWF0aW9uJywNCiAgICAgICAgICAgICAgICAgeyd0eXBlJyA6ICdzdHJpbmcnLCAnbWV0YXZhcicgOiAnPHB5dGhvbl9leHByZXNzaW9uPicsDQogICAgICAgICAgICAgICAgICAnZ3JvdXAnOiAnUmVwb3J0cycsICdsZXZlbCc6IDEsDQogICAgICAgICAgICAgICAgICAnZGVmYXVsdCc6ICcxMC4wIC0gKChmbG9hdCg1ICogZXJyb3IgKyB3YXJuaW5nICsgcmVmYWN0b3IgKyAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb252ZW50aW9uKSAvIHN0YXRlbWVudCkgKiAxMCknLA0KICAgICAgICAgICAgICAgICAgJ2hlbHAnIDogJ1B5dGhvbiBleHByZXNzaW9uIHdoaWNoIHNob3VsZCByZXR1cm4gYSBub3RlIGxlc3MgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RoYW4gMTAgKDEwIGlzIHRoZSBoaWdoZXN0IG5vdGUpLiBZb3UgaGF2ZSBhY2Nlc3MgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvIHRoZSB2YXJpYWJsZXMgZXJyb3JzIHdhcm5pbmcsIHN0YXRlbWVudCB3aGljaCAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAncmVzcGVjdGl2ZWx5IGNvbnRhaW4gdGhlIG51bWJlciBvZiBlcnJvcnMgLyAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAnd2FybmluZ3MgbWVzc2FnZXMgYW5kIHRoZSB0b3RhbCBudW1iZXIgb2YgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXRlbWVudHMgYW5hbHl6ZWQuIFRoaXMgaXMgdXNlZCBieSB0aGUgZ2xvYmFsICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdldmFsdWF0aW9uIHJlcG9ydCAoUlAwMDA0KS4nfSksDQogICAgICAgICAgICAgICAgKCdzY29yZScsDQogICAgICAgICAgICAgICAgIHsnZGVmYXVsdCc6IFRydWUsICd0eXBlJzogJ3luJywgJ21ldGF2YXInOiAnPHlfb3Jfbj4nLA0KICAgICAgICAgICAgICAgICAgJ3Nob3J0JzogJ3MnLA0KICAgICAgICAgICAgICAgICAgJ2dyb3VwJzogJ1JlcG9ydHMnLA0KICAgICAgICAgICAgICAgICAgJ2hlbHAnOiAnQWN0aXZhdGUgdGhlIGV2YWx1YXRpb24gc2NvcmUuJ30pLA0KDQogICAgICAgICAgICAgICAgKCdjb25maWRlbmNlJywNCiAgICAgICAgICAgICAgICAgeyd0eXBlJyA6ICdtdWx0aXBsZV9jaG9pY2UnLCAnbWV0YXZhcic6ICc8bGV2ZWxzPicsDQogICAgICAgICAgICAgICAgICAnZGVmYXVsdCc6ICcnLA0KICAgICAgICAgICAgICAgICAgJ2Nob2ljZXMnOiBbYy5uYW1lIGZvciBjIGluIGludGVyZmFjZXMuQ09ORklERU5DRV9MRVZFTFNdLA0KICAgICAgICAgICAgICAgICAgJ2dyb3VwJzogJ01lc3NhZ2VzIGNvbnRyb2wnLA0KICAgICAgICAgICAgICAgICAgJ2hlbHAnIDogJ09ubHkgc2hvdyB3YXJuaW5ncyB3aXRoIHRoZSBsaXN0ZWQgY29uZmlkZW5jZSBsZXZlbHMuJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBMZWF2ZSBlbXB0eSB0byBzaG93IGFsbC4gVmFsaWQgbGV2ZWxzOiAlcy4nICUgKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcsICcuam9pbihjLm5hbWUgZm9yIGMgaW4gaW50ZXJmYWNlcy5DT05GSURFTkNFX0xFVkVMUyksKX0pLA0KDQogICAgICAgICAgICAgICAgKCdlbmFibGUnLA0KICAgICAgICAgICAgICAgICB7J3R5cGUnIDogJ2NzdicsICdtZXRhdmFyJzogJzxtc2cgaWRzPicsDQogICAgICAgICAgICAgICAgICAnc2hvcnQnOiAnZScsDQogICAgICAgICAgICAgICAgICAnZ3JvdXAnOiAnTWVzc2FnZXMgY29udHJvbCcsDQogICAgICAgICAgICAgICAgICAnaGVscCcgOiAnRW5hYmxlIHRoZSBtZXNzYWdlLCByZXBvcnQsIGNhdGVnb3J5IG9yIGNoZWNrZXIgd2l0aCB0aGUgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dpdmVuIGlkKHMpLiBZb3UgY2FuIGVpdGhlciBnaXZlIG11bHRpcGxlIGlkZW50aWZpZXIgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlcGFyYXRlZCBieSBjb21tYSAoLCkgb3IgcHV0IHRoaXMgb3B0aW9uIG11bHRpcGxlIHRpbWUgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJyhvbmx5IG9uIHRoZSBjb21tYW5kIGxpbmUsIG5vdCBpbiB0aGUgY29uZmlndXJhdGlvbiBmaWxlICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aGVyZSBpdCBzaG91bGQgYXBwZWFyIG9ubHkgb25jZSkuICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgYWxzbyB0aGUgIi0tZGlzYWJsZSIgb3B0aW9uIGZvciBleGFtcGxlcy4nfSksDQoNCiAgICAgICAgICAgICAgICAoJ2Rpc2FibGUnLA0KICAgICAgICAgICAgICAgICB7J3R5cGUnIDogJ2NzdicsICdtZXRhdmFyJzogJzxtc2cgaWRzPicsDQogICAgICAgICAgICAgICAgICAnc2hvcnQnOiAnZCcsDQogICAgICAgICAgICAgICAgICAnZ3JvdXAnOiAnTWVzc2FnZXMgY29udHJvbCcsDQogICAgICAgICAgICAgICAgICAnaGVscCcgOiAnRGlzYWJsZSB0aGUgbWVzc2FnZSwgcmVwb3J0LCBjYXRlZ29yeSBvciBjaGVja2VyICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aXRoIHRoZSBnaXZlbiBpZChzKS4gWW91IGNhbiBlaXRoZXIgZ2l2ZSBtdWx0aXBsZSBpZGVudGlmaWVycyAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VwYXJhdGVkIGJ5IGNvbW1hICgsKSBvciBwdXQgdGhpcyBvcHRpb24gbXVsdGlwbGUgdGltZXMgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJyhvbmx5IG9uIHRoZSBjb21tYW5kIGxpbmUsIG5vdCBpbiB0aGUgY29uZmlndXJhdGlvbiBmaWxlICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aGVyZSBpdCBzaG91bGQgYXBwZWFyIG9ubHkgb25jZSkuICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdZb3UgY2FuIGFsc28gdXNlICItLWRpc2FibGU9YWxsIiB0byBkaXNhYmxlIGV2ZXJ5dGhpbmcgZmlyc3QgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FuZCB0aGVuIHJlZW5hYmxlIHNwZWNpZmljIGNoZWNrcy4gRm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50ICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICd0byBydW4gb25seSB0aGUgc2ltaWxhcml0aWVzIGNoZWNrZXIsIHlvdSBjYW4gdXNlICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICciLS1kaXNhYmxlPWFsbCAtLWVuYWJsZT1zaW1pbGFyaXRpZXMiLiAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAnSWYgeW91IHdhbnQgdG8gcnVuIG9ubHkgdGhlIGNsYXNzZXMgY2hlY2tlciwgYnV0IGhhdmUgbm8gJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcm5pbmcgbGV2ZWwgbWVzc2FnZXMgZGlzcGxheWVkLCB1c2UgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJyItLWRpc2FibGU9YWxsIC0tZW5hYmxlPWNsYXNzZXMgLS1kaXNhYmxlPVciLid9KSwNCg0KICAgICAgICAgICAgICAgICgnbXNnLXRlbXBsYXRlJywNCiAgICAgICAgICAgICAgICAgeyd0eXBlJyA6ICdzdHJpbmcnLCAnbWV0YXZhcic6ICc8dGVtcGxhdGU+JywNCiAgICAgICAgICAgICAgICAgICdncm91cCc6ICdSZXBvcnRzJywNCiAgICAgICAgICAgICAgICAgICdoZWxwJyA6ICgnVGVtcGxhdGUgdXNlZCB0byBkaXNwbGF5IG1lc3NhZ2VzLiAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RoaXMgaXMgYSBweXRob24gbmV3LXN0eWxlIGZvcm1hdCBzdHJpbmcgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VkIHRvIGZvcm1hdCB0aGUgbWVzc2FnZSBpbmZvcm1hdGlvbi4gJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgZG9jIGZvciBhbGwgZGV0YWlscy4nKQ0KICAgICAgICAgICAgICAgICB9KSwNCg0KICAgICAgICAgICAgICAgICgnam9icycsDQogICAgICAgICAgICAgICAgIHsndHlwZScgOiAnaW50JywgJ21ldGF2YXInOiAnPG4tcHJvY2Vzc2VzPicsDQogICAgICAgICAgICAgICAgICAnc2hvcnQnOiAnaicsDQogICAgICAgICAgICAgICAgICAnZGVmYXVsdCc6IDEsDQogICAgICAgICAgICAgICAgICAnaGVscCcgOiAnVXNlIG11bHRpcGxlIHByb2Nlc3NlcyB0byBzcGVlZCB1cCBQeWxpbnQuIFNwZWNpZnlpbmcgMCB3aWxsICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdhdXRvLWRldGVjdCB0aGUgbnVtYmVyIG9mIHByb2Nlc3NvcnMgYXZhaWxhYmxlIHRvIHVzZS4nLA0KICAgICAgICAgICAgICAgICB9KSwNCg0KICAgICAgICAgICAgICAgICgndW5zYWZlLWxvYWQtYW55LWV4dGVuc2lvbicsDQogICAgICAgICAgICAgICAgIHsndHlwZSc6ICd5bicsICdtZXRhdmFyJzogJzx5bj4nLCAnZGVmYXVsdCc6IEZhbHNlLCAnaGlkZSc6IFRydWUsDQogICAgICAgICAgICAgICAgICAnaGVscCc6ICgnQWxsb3cgbG9hZGluZyBvZiBhcmJpdHJhcnkgQyBleHRlbnNpb25zLiBFeHRlbnNpb25zJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBhcmUgaW1wb3J0ZWQgaW50byB0aGUgYWN0aXZlIFB5dGhvbiBpbnRlcnByZXRlciBhbmQnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAnIG1heSBydW4gYXJiaXRyYXJ5IGNvZGUuJyl9KSwNCg0KICAgICAgICAgICAgICAgICgnbGltaXQtaW5mZXJlbmNlLXJlc3VsdHMnLA0KICAgICAgICAgICAgICAgICB7J3R5cGUnOiAnaW50JywgJ21ldGF2YXInOiAnPG51bWJlci1vZi1yZXN1bHRzPicsICdkZWZhdWx0JzogMTAwLA0KICAgICAgICAgICAgICAgICAgJ2hlbHAnOiAoJ0NvbnRyb2wgdGhlIGFtb3VudCBvZiBwb3RlbnRpYWwgaW5mZXJyZWQgdmFsdWVzIHdoZW4gaW5mZXJyaW5nICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdhIHNpbmdsZSBvYmplY3QuIFRoaXMgY2FuIGhlbHAgdGhlIHBlcmZvcm1hbmNlIHdoZW4gZGVhbGluZyB3aXRoICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYXJnZSBmdW5jdGlvbnMgb3IgY29tcGxleCwgbmVzdGVkIGNvbmRpdGlvbnMuICcpfSksDQoNCiAgICAgICAgICAgICAgICAoJ2V4dGVuc2lvbi1wa2ctd2hpdGVsaXN0JywNCiAgICAgICAgICAgICAgICAgeyd0eXBlJzogJ2NzdicsICdtZXRhdmFyJzogJzxwa2dbLHBrZ10+JywgJ2RlZmF1bHQnOiBbXSwNCiAgICAgICAgICAgICAgICAgICdoZWxwJzogKCdBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIHBhY2thZ2Ugb3IgbW9kdWxlIG5hbWVzJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBmcm9tIHdoZXJlIEMgZXh0ZW5zaW9ucyBtYXkgYmUgbG9hZGVkLiBFeHRlbnNpb25zIGFyZScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICcgbG9hZGluZyBpbnRvIHRoZSBhY3RpdmUgUHl0aG9uIGludGVycHJldGVyIGFuZCBtYXkgcnVuJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBhcmJpdHJhcnkgY29kZS4nKX0pLA0KICAgICAgICAgICAgICAgICgnc3VnZ2VzdGlvbi1tb2RlJywNCiAgICAgICAgICAgICAgICAgeyd0eXBlJzogJ3luJywgJ21ldGF2YXInOiAnPHluPicsICdkZWZhdWx0JzogVHJ1ZSwNCiAgICAgICAgICAgICAgICAgICdoZWxwJzogKCdXaGVuIGVuYWJsZWQsIHB5bGludCB3b3VsZCBhdHRlbXB0IHRvIGd1ZXNzIGNvbW1vbiAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAnbWlzY29uZmlndXJhdGlvbiBhbmQgZW1pdCB1c2VyLWZyaWVuZGx5IGhpbnRzIGluc3RlYWQgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29mIGZhbHNlLXBvc2l0aXZlIGVycm9yIG1lc3NhZ2VzLicpfSksDQoNCiAgICAgICAgICAgICAgICAoJ2V4aXQtemVybycsDQogICAgICAgICAgICAgICAgIHsnYWN0aW9uJzogJ3N0b3JlX3RydWUnLA0KICAgICAgICAgICAgICAgICAgJ2hlbHAnOiAoJ0Fsd2F5cyByZXR1cm4gYSAwIChub24tZXJyb3IpIHN0YXR1cyBjb2RlLCBldmVuIGlmICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICdsaW50IGVycm9ycyBhcmUgZm91bmQuIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWZ1bCBpbiAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGludW91cyBpbnRlZ3JhdGlvbiBzY3JpcHRzLicpfSksDQogICAgICAgICAgICAgICApDQoNCiAgICBvcHRpb25fZ3JvdXBzID0gKA0KICAgICAgICAoJ01lc3NhZ2VzIGNvbnRyb2wnLCAnT3B0aW9ucyBjb250cm9sbGluZyBhbmFseXNpcyBtZXNzYWdlcycpLA0KICAgICAgICAoJ1JlcG9ydHMnLCAnT3B0aW9ucyByZWxhdGVkIHRvIG91dHB1dCBmb3JtYXR0aW5nIGFuZCByZXBvcnRpbmcnKSwNCiAgICAgICAgKQ0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIG9wdGlvbnM9KCksIHJlcG9ydGVyPU5vbmUsIG9wdGlvbl9ncm91cHM9KCksDQogICAgICAgICAgICAgICAgIHB5bGludHJjPU5vbmUpOg0KICAgICAgICAjIHNvbWUgc3R1ZmYgaGFzIHRvIGJlIGRvbmUgYmVmb3JlIGFuY2VzdG9ycyBpbml0aWFsaXphdGlvbi4uLg0KICAgICAgICAjDQogICAgICAgICMgbWVzc2FnZXMgc3RvcmUgLyBjaGVja2VycyAvIHJlcG9ydGVyIC8gYXN0cm9pZCBtYW5hZ2VyDQogICAgICAgIHNlbGYubXNnc19zdG9yZSA9IHV0aWxzLk1lc3NhZ2VzU3RvcmUoKQ0KICAgICAgICBzZWxmLnJlcG9ydGVyID0gTm9uZQ0KICAgICAgICBzZWxmLl9yZXBvcnRlcl9uYW1lID0gTm9uZQ0KICAgICAgICBzZWxmLl9yZXBvcnRlcnMgPSB7fQ0KICAgICAgICBzZWxmLl9jaGVja2VycyA9IGNvbGxlY3Rpb25zLmRlZmF1bHRkaWN0KGxpc3QpDQogICAgICAgIHNlbGYuX3ByYWdtYV9saW5lbm8gPSB7fQ0KICAgICAgICBzZWxmLl9pZ25vcmVfZmlsZSA9IEZhbHNlDQogICAgICAgICMgdmlzaXQgdmFyaWFibGVzDQogICAgICAgIHNlbGYuZmlsZV9zdGF0ZSA9IHV0aWxzLkZpbGVTdGF0ZSgpDQogICAgICAgIHNlbGYuY3VycmVudF9uYW1lID0gTm9uZQ0KICAgICAgICBzZWxmLmN1cnJlbnRfZmlsZSA9IE5vbmUNCiAgICAgICAgc2VsZi5zdGF0cyA9IE5vbmUNCiAgICAgICAgIyBpbml0IG9wdGlvbnMNCiAgICAgICAgc2VsZi5fZXh0ZXJuYWxfb3B0cyA9IG9wdGlvbnMNCiAgICAgICAgc2VsZi5vcHRpb25zID0gb3B0aW9ucyArIFB5TGludGVyLm1ha2Vfb3B0aW9ucygpDQogICAgICAgIHNlbGYub3B0aW9uX2dyb3VwcyA9IG9wdGlvbl9ncm91cHMgKyBQeUxpbnRlci5vcHRpb25fZ3JvdXBzDQogICAgICAgIHNlbGYuX29wdGlvbnNfbWV0aG9kcyA9IHsNCiAgICAgICAgICAgICdlbmFibGUnOiBzZWxmLmVuYWJsZSwNCiAgICAgICAgICAgICdkaXNhYmxlJzogc2VsZi5kaXNhYmxlfQ0KICAgICAgICBzZWxmLl9id19vcHRpb25zX21ldGhvZHMgPSB7J2Rpc2FibGUtbXNnJzogc2VsZi5kaXNhYmxlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VuYWJsZS1tc2cnOiBzZWxmLmVuYWJsZX0NCiAgICAgICAgZnVsbF92ZXJzaW9uID0gJyUlcHJvZyAlc1xuYXN0cm9pZCAlc1xuUHl0aG9uICVzJyAlICgNCiAgICAgICAgICAgIHZlcnNpb24sIGFzdHJvaWRfdmVyc2lvbiwgc3lzLnZlcnNpb24pDQogICAgICAgIHV0aWxzLk1lc3NhZ2VzSGFuZGxlck1peEluLl9faW5pdF9fKHNlbGYpDQogICAgICAgIHV0aWxzLlJlcG9ydHNIYW5kbGVyTWl4SW4uX19pbml0X18oc2VsZikNCiAgICAgICAgc3VwZXIoUHlMaW50ZXIsIHNlbGYpLl9faW5pdF9fKA0KICAgICAgICAgICAgdXNhZ2U9X19kb2NfXywNCiAgICAgICAgICAgIHZlcnNpb249ZnVsbF92ZXJzaW9uLA0KICAgICAgICAgICAgY29uZmlnX2ZpbGU9cHlsaW50cmMgb3IgY29uZmlnLlBZTElOVFJDKQ0KICAgICAgICBjaGVja2Vycy5CYXNlVG9rZW5DaGVja2VyLl9faW5pdF9fKHNlbGYpDQogICAgICAgICMgcHJvdmlkZWQgcmVwb3J0cw0KICAgICAgICBzZWxmLnJlcG9ydHMgPSAoKCdSUDAwMDEnLCAnTWVzc2FnZXMgYnkgY2F0ZWdvcnknLA0KICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydF90b3RhbF9tZXNzYWdlc19zdGF0cyksDQogICAgICAgICAgICAgICAgICAgICAgICAoJ1JQMDAwMicsICclIGVycm9ycyAvIHdhcm5pbmdzIGJ5IG1vZHVsZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0X21lc3NhZ2VzX2J5X21vZHVsZV9zdGF0cyksDQogICAgICAgICAgICAgICAgICAgICAgICAoJ1JQMDAwMycsICdNZXNzYWdlcycsDQogICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0X21lc3NhZ2VzX3N0YXRzKSwNCiAgICAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICBzZWxmLnJlZ2lzdGVyX2NoZWNrZXIoc2VsZikNCiAgICAgICAgc2VsZi5fZHluYW1pY19wbHVnaW5zID0gc2V0KCkNCiAgICAgICAgc2VsZi5fcHl0aG9uM19wb3J0aW5nX21vZGUgPSBGYWxzZQ0KICAgICAgICBzZWxmLl9lcnJvcl9tb2RlID0gRmFsc2UNCiAgICAgICAgc2VsZi5sb2FkX3Byb3ZpZGVyX2RlZmF1bHRzKCkNCiAgICAgICAgaWYgcmVwb3J0ZXI6DQogICAgICAgICAgICBzZWxmLnNldF9yZXBvcnRlcihyZXBvcnRlcikNCg0KICAgIGRlZiBsb2FkX2RlZmF1bHRfcGx1Z2lucyhzZWxmKToNCiAgICAgICAgY2hlY2tlcnMuaW5pdGlhbGl6ZShzZWxmKQ0KICAgICAgICByZXBvcnRlcnMuaW5pdGlhbGl6ZShzZWxmKQ0KICAgICAgICAjIE1ha2Ugc3VyZSB0byBsb2FkIHRoZSBkZWZhdWx0IHJlcG9ydGVyLCBiZWNhdXNlDQogICAgICAgICMgdGhlIG9wdGlvbiBoYXMgYmVlbiBzZXQgYmVmb3JlIHRoZSBwbHVnaW5zIGhhZCBiZWVuIGxvYWRlZC4NCiAgICAgICAgaWYgbm90IHNlbGYucmVwb3J0ZXI6DQogICAgICAgICAgICBzZWxmLl9sb2FkX3JlcG9ydGVyKCkNCg0KICAgIGRlZiBsb2FkX3BsdWdpbl9tb2R1bGVzKHNlbGYsIG1vZG5hbWVzKToNCiAgICAgICAgIiIidGFrZSBhIGxpc3Qgb2YgbW9kdWxlIG5hbWVzIHdoaWNoIGFyZSBweWxpbnQgcGx1Z2lucyBhbmQgbG9hZA0KICAgICAgICBhbmQgcmVnaXN0ZXIgdGhlbQ0KICAgICAgICAiIiINCiAgICAgICAgZm9yIG1vZG5hbWUgaW4gbW9kbmFtZXM6DQogICAgICAgICAgICBpZiBtb2RuYW1lIGluIHNlbGYuX2R5bmFtaWNfcGx1Z2luczoNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgc2VsZi5fZHluYW1pY19wbHVnaW5zLmFkZChtb2RuYW1lKQ0KICAgICAgICAgICAgbW9kdWxlID0gbW9kdXRpbHMubG9hZF9tb2R1bGVfZnJvbV9uYW1lKG1vZG5hbWUpDQogICAgICAgICAgICBtb2R1bGUucmVnaXN0ZXIoc2VsZikNCg0KICAgIGRlZiBfbG9hZF9yZXBvcnRlcihzZWxmKToNCiAgICAgICAgbmFtZSA9IHNlbGYuX3JlcG9ydGVyX25hbWUubG93ZXIoKQ0KICAgICAgICBpZiBuYW1lIGluIHNlbGYuX3JlcG9ydGVyczoNCiAgICAgICAgICAgIHNlbGYuc2V0X3JlcG9ydGVyKHNlbGYuX3JlcG9ydGVyc1tuYW1lXSgpKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHJlcG9ydGVyX2NsYXNzID0gc2VsZi5fbG9hZF9yZXBvcnRlcl9jbGFzcygpDQogICAgICAgICAgICBleGNlcHQgKEltcG9ydEVycm9yLCBBdHRyaWJ1dGVFcnJvcik6DQogICAgICAgICAgICAgICAgcmFpc2UgZXhjZXB0aW9ucy5JbnZhbGlkUmVwb3J0ZXJFcnJvcihuYW1lKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBzZWxmLnNldF9yZXBvcnRlcihyZXBvcnRlcl9jbGFzcygpKQ0KDQogICAgZGVmIF9sb2FkX3JlcG9ydGVyX2NsYXNzKHNlbGYpOg0KICAgICAgICBxbmFtZSA9IHNlbGYuX3JlcG9ydGVyX25hbWUNCiAgICAgICAgbW9kdWxlID0gbW9kdXRpbHMubG9hZF9tb2R1bGVfZnJvbV9uYW1lKA0KICAgICAgICAgICAgbW9kdXRpbHMuZ2V0X21vZHVsZV9wYXJ0KHFuYW1lKSkNCiAgICAgICAgY2xhc3NfbmFtZSA9IHFuYW1lLnNwbGl0KCcuJylbLTFdDQogICAgICAgIHJlcG9ydGVyX2NsYXNzID0gZ2V0YXR0cihtb2R1bGUsIGNsYXNzX25hbWUpDQogICAgICAgIHJldHVybiByZXBvcnRlcl9jbGFzcw0KDQogICAgZGVmIHNldF9yZXBvcnRlcihzZWxmLCByZXBvcnRlcik6DQogICAgICAgICIiInNldCB0aGUgcmVwb3J0ZXIgdXNlZCB0byBkaXNwbGF5IG1lc3NhZ2VzIGFuZCByZXBvcnRzIiIiDQogICAgICAgIHNlbGYucmVwb3J0ZXIgPSByZXBvcnRlcg0KICAgICAgICByZXBvcnRlci5saW50ZXIgPSBzZWxmDQoNCiAgICBkZWYgc2V0X29wdGlvbihzZWxmLCBvcHRuYW1lLCB2YWx1ZSwgYWN0aW9uPU5vbmUsIG9wdGRpY3Q9Tm9uZSk6DQogICAgICAgICIiIm92ZXJyaWRkZW4gZnJvbSBjb25maWcuT3B0aW9uc1Byb3ZpZGVyTWl4aW4gdG8gaGFuZGxlIHNvbWUNCiAgICAgICAgc3BlY2lhbCBvcHRpb25zDQogICAgICAgICIiIg0KICAgICAgICBpZiBvcHRuYW1lIGluIHNlbGYuX29wdGlvbnNfbWV0aG9kcyBvciBcDQogICAgICAgICAgICAgICAgb3B0bmFtZSBpbiBzZWxmLl9id19vcHRpb25zX21ldGhvZHM6DQogICAgICAgICAgICBpZiB2YWx1ZToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIG1ldGggPSBzZWxmLl9vcHRpb25zX21ldGhvZHNbb3B0bmFtZV0NCiAgICAgICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICAgICAgICAgIG1ldGggPSBzZWxmLl9id19vcHRpb25zX21ldGhvZHNbb3B0bmFtZV0NCiAgICAgICAgICAgICAgICAgICAgd2FybmluZ3Mud2FybignJXMgaXMgZGVwcmVjYXRlZCwgcmVwbGFjZSBpdCBieSAlcycgJSAob3B0bmFtZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0bmFtZS5zcGxpdCgnLScpWzBdKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXByZWNhdGlvbldhcm5pbmcpDQogICAgICAgICAgICAgICAgdmFsdWUgPSB1dGlscy5fY2hlY2tfY3N2KHZhbHVlKQ0KICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIChsaXN0LCB0dXBsZSkpOg0KICAgICAgICAgICAgICAgICAgICBmb3IgX2lkIGluIHZhbHVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgbWV0aChfaWQsIGlnbm9yZV91bmtub3duPVRydWUpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgbWV0aCh2YWx1ZSkNCiAgICAgICAgICAgICAgICByZXR1cm4gIyBubyBuZWVkIHRvIGNhbGwgc2V0X29wdGlvbiwgZGlzYWJsZS9lbmFibGUgbWV0aG9kcyBkbyBpdA0KICAgICAgICBlbGlmIG9wdG5hbWUgPT0gJ291dHB1dC1mb3JtYXQnOg0KICAgICAgICAgICAgc2VsZi5fcmVwb3J0ZXJfbmFtZSA9IHZhbHVlDQogICAgICAgICAgICAjIElmIHRoZSByZXBvcnRlcnMgYXJlIGFscmVhZHkgYXZhaWxhYmxlLCBsb2FkDQogICAgICAgICAgICAjIHRoZSByZXBvcnRlciBjbGFzcy4NCiAgICAgICAgICAgIGlmIHNlbGYuX3JlcG9ydGVyczoNCiAgICAgICAgICAgICAgICBzZWxmLl9sb2FkX3JlcG9ydGVyKCkNCg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBjaGVja2Vycy5CYXNlVG9rZW5DaGVja2VyLnNldF9vcHRpb24oc2VsZiwgb3B0bmFtZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSwgYWN0aW9uLCBvcHRkaWN0KQ0KICAgICAgICBleGNlcHQgY29uZmlnLlVuc3VwcG9ydGVkQWN0aW9uOg0KICAgICAgICAgICAgcHJpbnQoJ29wdGlvbiAlcyBjYW5cJ3QgYmUgcmVhZCBmcm9tIGNvbmZpZyBmaWxlJyAlIFwNCiAgICAgICAgICAgICAgICAgIG9wdG5hbWUsIGZpbGU9c3lzLnN0ZGVycikNCg0KICAgIGRlZiByZWdpc3Rlcl9yZXBvcnRlcihzZWxmLCByZXBvcnRlcl9jbGFzcyk6DQogICAgICAgIHNlbGYuX3JlcG9ydGVyc1tyZXBvcnRlcl9jbGFzcy5uYW1lXSA9IHJlcG9ydGVyX2NsYXNzDQoNCiAgICBkZWYgcmVwb3J0X29yZGVyKHNlbGYpOg0KICAgICAgICByZXBvcnRzID0gc29ydGVkKHNlbGYuX3JlcG9ydHMsIGtleT1sYW1iZGEgeDogZ2V0YXR0cih4LCAnbmFtZScsICcnKSkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgIyBSZW1vdmUgdGhlIGN1cnJlbnQgcmVwb3J0ZXIgYW5kIGFkZCBpdA0KICAgICAgICAgICAgIyBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0Lg0KICAgICAgICAgICAgcmVwb3J0cy5wb3AocmVwb3J0cy5pbmRleChzZWxmKSkNCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICBwYXNzDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXBvcnRzLmFwcGVuZChzZWxmKQ0KICAgICAgICByZXR1cm4gcmVwb3J0cw0KDQogICAgIyBjaGVja2VycyBtYW5pcHVsYXRpb24gbWV0aG9kcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQogICAgZGVmIHJlZ2lzdGVyX2NoZWNrZXIoc2VsZiwgY2hlY2tlcik6DQogICAgICAgICIiInJlZ2lzdGVyIGEgbmV3IGNoZWNrZXINCg0KICAgICAgICBjaGVja2VyIGlzIGFuIG9iamVjdCBpbXBsZW1lbnRpbmcgSVJhd0NoZWNrZXIgb3IgLyBhbmQgSUFzdHJvaWRDaGVja2VyDQogICAgICAgICIiIg0KICAgICAgICBhc3NlcnQgY2hlY2tlci5wcmlvcml0eSA8PSAwLCAnY2hlY2tlciBwcmlvcml0eSBjYW5cJ3QgYmUgPj0gMCcNCiAgICAgICAgc2VsZi5fY2hlY2tlcnNbY2hlY2tlci5uYW1lXS5hcHBlbmQoY2hlY2tlcikNCiAgICAgICAgZm9yIHJfaWQsIHJfdGl0bGUsIHJfY2IgaW4gY2hlY2tlci5yZXBvcnRzOg0KICAgICAgICAgICAgc2VsZi5yZWdpc3Rlcl9yZXBvcnQocl9pZCwgcl90aXRsZSwgcl9jYiwgY2hlY2tlcikNCiAgICAgICAgc2VsZi5yZWdpc3Rlcl9vcHRpb25zX3Byb3ZpZGVyKGNoZWNrZXIpDQogICAgICAgIGlmIGhhc2F0dHIoY2hlY2tlciwgJ21zZ3MnKToNCiAgICAgICAgICAgIHNlbGYubXNnc19zdG9yZS5yZWdpc3Rlcl9tZXNzYWdlcyhjaGVja2VyKQ0KICAgICAgICBjaGVja2VyLmxvYWRfZGVmYXVsdHMoKQ0KDQogICAgICAgICMgUmVnaXN0ZXIgdGhlIGNoZWNrZXIsIGJ1dCBkaXNhYmxlIGFsbCBvZiBpdHMgbWVzc2FnZXMuDQogICAgICAgICMgVE9ETyhjcG9wYSk6IHdlIHNob3VsZCBoYXZlIGEgYmV0dGVyIEFQSSBmb3IgdGhpcy4NCiAgICAgICAgaWYgbm90IGdldGF0dHIoY2hlY2tlciwgJ2VuYWJsZWQnLCBUcnVlKToNCiAgICAgICAgICAgIHNlbGYuZGlzYWJsZShjaGVja2VyLm5hbWUpDQoNCiAgICBkZWYgZGlzYWJsZV9ub2Vycm9yX21lc3NhZ2VzKHNlbGYpOg0KICAgICAgICBmb3IgbXNnY2F0LCBtc2dpZHMgaW4gc2VsZi5tc2dzX3N0b3JlLl9tc2dzX2J5X2NhdGVnb3J5Lml0ZW1zKCk6DQogICAgICAgICAgICAjIGVuYWJsZSBvbmx5IG1lc3NhZ2VzIHdpdGggJ2Vycm9yJyBzZXZlcml0eSBhbmQgYWJvdmUgKCdmYXRhbCcpDQogICAgICAgICAgICBpZiBtc2djYXQgaW4gWydFJywgJ0YnXToNCiAgICAgICAgICAgICAgICBmb3IgbXNnaWQgaW4gbXNnaWRzOg0KICAgICAgICAgICAgICAgICAgICBzZWxmLmVuYWJsZShtc2dpZCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZm9yIG1zZ2lkIGluIG1zZ2lkczoNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNhYmxlKG1zZ2lkKQ0KDQogICAgZGVmIGRpc2FibGVfcmVwb3J0ZXJzKHNlbGYpOg0KICAgICAgICAiIiJkaXNhYmxlIGFsbCByZXBvcnRlcnMiIiINCiAgICAgICAgZm9yIF9yZXBvcnRlcnMgaW4gc2VsZi5fcmVwb3J0cy52YWx1ZXMoKToNCiAgICAgICAgICAgIGZvciByZXBvcnRfaWQsIF8sIF8gaW4gX3JlcG9ydGVyczoNCiAgICAgICAgICAgICAgICBzZWxmLmRpc2FibGVfcmVwb3J0KHJlcG9ydF9pZCkNCg0KICAgIGRlZiBlcnJvcl9tb2RlKHNlbGYpOg0KICAgICAgICAiIiJlcnJvciBtb2RlOiBlbmFibGUgb25seSBlcnJvcnM7IG5vIHJlcG9ydHMsIG5vIHBlcnNpc3RlbnQiIiINCiAgICAgICAgc2VsZi5fZXJyb3JfbW9kZSA9IFRydWUNCiAgICAgICAgc2VsZi5kaXNhYmxlX25vZXJyb3JfbWVzc2FnZXMoKQ0KICAgICAgICBzZWxmLmRpc2FibGUoJ21pc2NlbGxhbmVvdXMnKQ0KICAgICAgICBpZiBzZWxmLl9weXRob24zX3BvcnRpbmdfbW9kZToNCiAgICAgICAgICAgIHNlbGYuZGlzYWJsZSgnYWxsJykNCiAgICAgICAgICAgIGZvciBtc2dfaWQgaW4gc2VsZi5fY2hlY2tlcl9tZXNzYWdlcygncHl0aG9uMycpOg0KICAgICAgICAgICAgICAgIGlmIG1zZ19pZC5zdGFydHN3aXRoKCdFJyk6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuZW5hYmxlKG1zZ19pZCkNCiAgICAgICAgICAgIGNvbmZpZ19wYXJzZXIgPSBzZWxmLmNmZ2ZpbGVfcGFyc2VyDQogICAgICAgICAgICBpZiBjb25maWdfcGFyc2VyLmhhc19vcHRpb24oJ01FU1NBR0VTIENPTlRST0wnLCAnZGlzYWJsZScpOg0KICAgICAgICAgICAgICAgIHZhbHVlID0gY29uZmlnX3BhcnNlci5nZXQoJ01FU1NBR0VTIENPTlRST0wnLCAnZGlzYWJsZScpDQogICAgICAgICAgICAgICAgc2VsZi5nbG9iYWxfc2V0X29wdGlvbignZGlzYWJsZScsIHZhbHVlKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi5kaXNhYmxlKCdweXRob24zJykNCiAgICAgICAgc2VsZi5zZXRfb3B0aW9uKCdyZXBvcnRzJywgRmFsc2UpDQogICAgICAgIHNlbGYuc2V0X29wdGlvbigncGVyc2lzdGVudCcsIEZhbHNlKQ0KICAgICAgICBzZWxmLnNldF9vcHRpb24oJ3Njb3JlJywgRmFsc2UpDQoNCiAgICBkZWYgcHl0aG9uM19wb3J0aW5nX21vZGUoc2VsZik6DQogICAgICAgICIiIkRpc2FibGUgYWxsIG90aGVyIGNoZWNrZXJzIGFuZCBlbmFibGUgUHl0aG9uIDMgd2FybmluZ3MuIiIiDQogICAgICAgIHNlbGYuZGlzYWJsZSgnYWxsJykNCiAgICAgICAgc2VsZi5lbmFibGUoJ3B5dGhvbjMnKQ0KICAgICAgICBpZiBzZWxmLl9lcnJvcl9tb2RlOg0KICAgICAgICAgICAgIyBUaGUgZXJyb3IgbW9kZSB3YXMgYWN0aXZhdGVkLCB1c2luZyB0aGUgLUUgZmxhZy4NCiAgICAgICAgICAgICMgU28gd2UnbGwgbmVlZCB0byBlbmFibGUgb25seSB0aGUgZXJyb3JzIGZyb20gdGhlDQogICAgICAgICAgICAjIFB5dGhvbiAzIHBvcnRpbmcgY2hlY2tlci4NCiAgICAgICAgICAgIGZvciBtc2dfaWQgaW4gc2VsZi5fY2hlY2tlcl9tZXNzYWdlcygncHl0aG9uMycpOg0KICAgICAgICAgICAgICAgIGlmIG1zZ19pZC5zdGFydHN3aXRoKCdFJyk6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuZW5hYmxlKG1zZ19pZCkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBzZWxmLmRpc2FibGUobXNnX2lkKQ0KICAgICAgICBjb25maWdfcGFyc2VyID0gc2VsZi5jZmdmaWxlX3BhcnNlcg0KICAgICAgICBpZiBjb25maWdfcGFyc2VyLmhhc19vcHRpb24oJ01FU1NBR0VTIENPTlRST0wnLCAnZGlzYWJsZScpOg0KICAgICAgICAgICAgdmFsdWUgPSBjb25maWdfcGFyc2VyLmdldCgnTUVTU0FHRVMgQ09OVFJPTCcsICdkaXNhYmxlJykNCiAgICAgICAgICAgIHNlbGYuZ2xvYmFsX3NldF9vcHRpb24oJ2Rpc2FibGUnLCB2YWx1ZSkNCiAgICAgICAgc2VsZi5fcHl0aG9uM19wb3J0aW5nX21vZGUgPSBUcnVlDQoNCiAgICAjIGJsb2NrIGxldmVsIG9wdGlvbiBoYW5kbGluZyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiAgICAjDQogICAgIyBzZWUgZnVuY19ibG9ja19kaXNhYmxlX21zZy5weSB0ZXN0IGNhc2UgZm9yIGV4cGVjdGVkIGJlaGF2aW91cg0KDQogICAgZGVmIHByb2Nlc3NfdG9rZW5zKHNlbGYsIHRva2Vucyk6DQogICAgICAgICIiInByb2Nlc3MgdG9rZW5zIGZyb20gdGhlIGN1cnJlbnQgbW9kdWxlIHRvIHNlYXJjaCBmb3IgbW9kdWxlL2Jsb2NrDQogICAgICAgIGxldmVsIG9wdGlvbnMNCiAgICAgICAgIiIiDQogICAgICAgIGNvbnRyb2xfcHJhZ21hcyA9IHsnZGlzYWJsZScsICdlbmFibGUnfQ0KICAgICAgICBmb3IgKHRva190eXBlLCBjb250ZW50LCBzdGFydCwgXywgXykgaW4gdG9rZW5zOg0KICAgICAgICAgICAgaWYgdG9rX3R5cGUgIT0gdG9rZW5pemUuQ09NTUVOVDoNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgbWF0Y2ggPSB1dGlscy5PUFRJT05fUkdYLnNlYXJjaChjb250ZW50KQ0KICAgICAgICAgICAgaWYgbWF0Y2ggaXMgTm9uZToNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgaWYgbWF0Y2guZ3JvdXAoMSkuc3RyaXAoKSA9PSAiZGlzYWJsZS1hbGwiIG9yIFwNCiAgICAgICAgICAgICAgICAgICAgbWF0Y2guZ3JvdXAoMSkuc3RyaXAoKSA9PSAnc2tpcC1maWxlJzoNCiAgICAgICAgICAgICAgICBpZiBtYXRjaC5ncm91cCgxKS5zdHJpcCgpID09ICJkaXNhYmxlLWFsbCI6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ2RlcHJlY2F0ZWQtcHJhZ21hJywgbGluZT1zdGFydFswXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzPSgnZGlzYWJsZS1hbGwnLCAnc2tpcC1maWxlJykpDQogICAgICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnZmlsZS1pZ25vcmVkJywgbGluZT1zdGFydFswXSkNCiAgICAgICAgICAgICAgICBzZWxmLl9pZ25vcmVfZmlsZSA9IFRydWUNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBvcHQsIHZhbHVlID0gbWF0Y2guZ3JvdXAoMSkuc3BsaXQoJz0nLCAxKQ0KICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnYmFkLWlubGluZS1vcHRpb24nLCBhcmdzPW1hdGNoLmdyb3VwKDEpLnN0cmlwKCksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lPXN0YXJ0WzBdKQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBvcHQgPSBvcHQuc3RyaXAoKQ0KICAgICAgICAgICAgaWYgb3B0IGluIHNlbGYuX29wdGlvbnNfbWV0aG9kcyBvciBvcHQgaW4gc2VsZi5fYndfb3B0aW9uc19tZXRob2RzOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgbWV0aCA9IHNlbGYuX29wdGlvbnNfbWV0aG9kc1tvcHRdDQogICAgICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgICAgICAgICBtZXRoID0gc2VsZi5fYndfb3B0aW9uc19tZXRob2RzW29wdF0NCiAgICAgICAgICAgICAgICAgICAgIyBmb3VuZCBhICIoZGlzfGVuKWFibGUtbXNnIiBwcmFnbWEgZGVwcmVjYXRlZCBzdXBwcmVzc2lvbg0KICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKCdkZXByZWNhdGVkLXByYWdtYScsIGxpbmU9c3RhcnRbMF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncz0ob3B0LCBvcHQucmVwbGFjZSgnLW1zZycsICcnKSkpDQogICAgICAgICAgICAgICAgZm9yIG1zZ2lkIGluIHV0aWxzLl9zcGxpdHN0cmlwKHZhbHVlKToNCiAgICAgICAgICAgICAgICAgICAgIyBBZGQgdGhlIGxpbmUgd2hlcmUgYSBjb250cm9sIHByYWdtYSB3YXMgZW5jb3VudGVyZWQuDQogICAgICAgICAgICAgICAgICAgIGlmIG9wdCBpbiBjb250cm9sX3ByYWdtYXM6DQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9wcmFnbWFfbGluZW5vW21zZ2lkXSA9IHN0YXJ0WzBdDQoNCiAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdCwgbXNnaWQpID09ICgnZGlzYWJsZScsICdhbGwnKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKCdkZXByZWNhdGVkLXByYWdtYScsIGxpbmU9c3RhcnRbMF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzPSgnZGlzYWJsZT1hbGwnLCAnc2tpcC1maWxlJykpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnZmlsZS1pZ25vcmVkJywgbGluZT1zdGFydFswXSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9pZ25vcmVfZmlsZSA9IFRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzX3NoYXJwX3NlcCA9IGNvbnRlbnQuc3BsaXQoJyMnKVsxOl0NCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbW1lbnQgPSAiIyIgKyBjb21tZW50c19zaGFycF9zZXBbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbW1lbnRfbWF0Y2hfZGlzYWJsZSA9IHV0aWxzLk9QVElPTl9SR1guc2VhcmNoKGZpcnN0X2NvbW1lbnQpDQogICAgICAgICAgICAgICAgICAgICAgICAjwqBEZWFjdGl2YXRlIG1zZyBlbWlzc2lvbiBmb3Igd2hvbGUgbW9kdWxlIG9ubHkgaWYNCiAgICAgICAgICAgICAgICAgICAgICAgICMgd2UgYXJlIHN1cmUgdGhlIGRpc2FibGUgZGlyZWN0aXZlIGlzIHRoZSBmaXJzdCBjb21tZW50Lg0KICAgICAgICAgICAgICAgICAgICAgICAgIyBJZiBub3QgdGhlbiBpdCByZWZlcnMgdG8gdGhlIGNvbW1lbnQgYmVmb3JlDQogICAgICAgICAgICAgICAgICAgICAgICAjIGFuZCBub3QgdG8gdGhlIG1vZHVsZSBpdHNlbGYuDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBmaXJzdF9jb21tZW50X21hdGNoX2Rpc2FibGU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aChtc2dpZCwgJ21vZHVsZScsIHN0YXJ0WzBdKQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQgZXhjZXB0aW9ucy5Vbmtub3duTWVzc2FnZUVycm9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnYmFkLW9wdGlvbi12YWx1ZScsIGFyZ3M9bXNnaWQsIGxpbmU9c3RhcnRbMF0pDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ3VucmVjb2duaXplZC1pbmxpbmUtb3B0aW9uJywgYXJncz1vcHQsIGxpbmU9c3RhcnRbMF0pDQoNCg0KICAgICMgY29kZSBjaGVja2luZyBtZXRob2RzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQogICAgZGVmIGdldF9jaGVja2VycyhzZWxmKToNCiAgICAgICAgIiIicmV0dXJuIGFsbCBhdmFpbGFibGUgY2hlY2tlcnMgYXMgYSBsaXN0IiIiDQogICAgICAgIHJldHVybiBbc2VsZl0gKyBbYyBmb3IgX2NoZWNrZXJzIGluIHNlbGYuX2NoZWNrZXJzLnZhbHVlcygpDQogICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGMgaW4gX2NoZWNrZXJzIGlmIGMgaXMgbm90IHNlbGZdDQoNCiAgICBkZWYgcHJlcGFyZV9jaGVja2VycyhzZWxmKToNCiAgICAgICAgIiIicmV0dXJuIGNoZWNrZXJzIG5lZWRlZCBmb3IgYWN0aXZhdGVkIG1lc3NhZ2VzIGFuZCByZXBvcnRzIiIiDQogICAgICAgIGlmIG5vdCBzZWxmLmNvbmZpZy5yZXBvcnRzOg0KICAgICAgICAgICAgc2VsZi5kaXNhYmxlX3JlcG9ydGVycygpDQogICAgICAgICMgZ2V0IG5lZWRlZCBjaGVja2Vycw0KICAgICAgICBuZWVkZWRjaGVja2VycyA9IFtzZWxmXQ0KICAgICAgICBmb3IgY2hlY2tlciBpbiBzZWxmLmdldF9jaGVja2VycygpWzE6XToNCiAgICAgICAgICAgIG1lc3NhZ2VzID0ge21zZyBmb3IgbXNnIGluIGNoZWNrZXIubXNncw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5pc19tZXNzYWdlX2VuYWJsZWQobXNnKX0NCiAgICAgICAgICAgIGlmIChtZXNzYWdlcyBvcg0KICAgICAgICAgICAgICAgICAgICBhbnkoc2VsZi5yZXBvcnRfaXNfZW5hYmxlZChyWzBdKSBmb3IgciBpbiBjaGVja2VyLnJlcG9ydHMpKToNCiAgICAgICAgICAgICAgICBuZWVkZWRjaGVja2Vycy5hcHBlbmQoY2hlY2tlcikNCiAgICAgICAgIyBTb3J0IGNoZWNrZXJzIGJ5IHByaW9yaXR5DQogICAgICAgIG5lZWRlZGNoZWNrZXJzID0gc29ydGVkKG5lZWRlZGNoZWNrZXJzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9b3BlcmF0b3IuYXR0cmdldHRlcigncHJpb3JpdHknKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZT1UcnVlKQ0KICAgICAgICByZXR1cm4gbmVlZGVkY2hlY2tlcnMNCg0KICAgICMgcHlsaW50OiBkaXNhYmxlPXVudXNlZC1hcmd1bWVudA0KICAgIEBzdGF0aWNtZXRob2QNCiAgICBkZWYgc2hvdWxkX2FuYWx5emVfZmlsZShtb2RuYW1lLCBwYXRoLCBpc19hcmd1bWVudD1GYWxzZSk6DQogICAgICAgICIiIlJldHVybnMgd2hldGhlciBvciBub3QgYSBtb2R1bGUgc2hvdWxkIGJlIGNoZWNrZWQuDQoNCiAgICAgICAgVGhpcyBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIFRydWUgZm9yIGFsbCBweXRob24gc291cmNlIGZpbGUsIGluZGljYXRpbmcNCiAgICAgICAgdGhhdCBhbGwgZmlsZXMgc2hvdWxkIGJlIGxpbnRlZC4NCg0KICAgICAgICBTdWJjbGFzc2VzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBpbmRpY2F0ZSB0aGF0IG1vZHVsZXMgc2F0aXNmeWluZw0KICAgICAgICBjZXJ0YWluIGNvbmRpdGlvbnMgc2hvdWxkIG5vdCBiZSBsaW50ZWQuDQoNCiAgICAgICAgOnBhcmFtIHN0ciBtb2RuYW1lOiBUaGUgbmFtZSBvZiB0aGUgbW9kdWxlIHRvIGJlIGNoZWNrZWQuDQogICAgICAgIDpwYXJhbSBzdHIgcGF0aDogVGhlIGZ1bGwgcGF0aCB0byB0aGUgc291cmNlIGNvZGUgb2YgdGhlIG1vZHVsZS4NCiAgICAgICAgOnBhcmFtIGJvb2wgaXNfYXJndW1lbnQ6IFdoZXR0ZXIgdGhlIGZpbGUgaXMgYW4gYXJndW1lbnQgdG8gcHlsaW50IG9yIG5vdC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVzIHdoaWNoIHJlc3BlY3QgdGhpcyBwcm9wZXJ0eSBhcmUgYWx3YXlzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkLCBzaW5jZSB0aGUgdXNlciByZXF1ZXN0ZWQgaXQgZXhwbGljaXRseS4NCiAgICAgICAgOnJldHVybnM6IFRydWUgaWYgdGhlIG1vZHVsZSBzaG91bGQgYmUgY2hlY2tlZC4NCiAgICAgICAgOnJ0eXBlOiBib29sDQogICAgICAgICIiIg0KICAgICAgICBpZiBpc19hcmd1bWVudDoNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgIHJldHVybiBwYXRoLmVuZHN3aXRoKCcucHknKQ0KICAgICMgcHlsaW50OiBlbmFibGU9dW51c2VkLWFyZ3VtZW50DQoNCiAgICBkZWYgY2hlY2soc2VsZiwgZmlsZXNfb3JfbW9kdWxlcyk6DQogICAgICAgICIiIm1haW4gY2hlY2tpbmcgZW50cnk6IGNoZWNrIGEgbGlzdCBvZiBmaWxlcyBvciBtb2R1bGVzIGZyb20gdGhlaXINCiAgICAgICAgbmFtZS4NCiAgICAgICAgIiIiDQogICAgICAgICMgaW5pdGlhbGl6ZSBtc2dzX3N0YXRlIG5vdyB0aGF0IGFsbCBtZXNzYWdlcyBoYXZlIGJlZW4gcmVnaXN0ZXJlZCBpbnRvDQogICAgICAgICMgdGhlIHN0b3JlDQogICAgICAgIGZvciBtc2cgaW4gc2VsZi5tc2dzX3N0b3JlLm1lc3NhZ2VzOg0KICAgICAgICAgICAgaWYgbm90IG1zZy5tYXlfYmVfZW1pdHRlZCgpOg0KICAgICAgICAgICAgICAgIHNlbGYuX21zZ3Nfc3RhdGVbbXNnLm1zZ2lkXSA9IEZhbHNlDQoNCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoZmlsZXNfb3JfbW9kdWxlcywgKGxpc3QsIHR1cGxlKSk6DQogICAgICAgICAgICBmaWxlc19vcl9tb2R1bGVzID0gKGZpbGVzX29yX21vZHVsZXMsKQ0KDQogICAgICAgIGlmIHNlbGYuY29uZmlnLmpvYnMgPT0gMToNCiAgICAgICAgICAgIHNlbGYuX2RvX2NoZWNrKGZpbGVzX29yX21vZHVsZXMpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICB3aXRoIF9wYXRjaF9zeXNtb2R1bGVzKCk6DQogICAgICAgICAgICAgICAgc2VsZi5fcGFyYWxsZWxfY2hlY2soZmlsZXNfb3JfbW9kdWxlcykNCg0KICAgIGRlZiBfZ2V0X2pvYnNfY29uZmlnKHNlbGYpOg0KICAgICAgICBjaGlsZF9jb25maWcgPSBjb2xsZWN0aW9ucy5PcmRlcmVkRGljdCgpDQogICAgICAgIGZpbHRlcl9vcHRpb25zID0geydsb25nLWhlbHAnfQ0KICAgICAgICBmaWx0ZXJfb3B0aW9ucy51cGRhdGUoKG9wdF9uYW1lIGZvciBvcHRfbmFtZSwgXyBpbiBzZWxmLl9leHRlcm5hbF9vcHRzKSkNCiAgICAgICAgZm9yIG9wdF9wcm92aWRlcnMgaW4gc2VsZi5fYWxsX29wdGlvbnMudmFsdWVzKCk6DQogICAgICAgICAgICBmb3Igb3B0bmFtZSwgb3B0ZGljdCwgdmFsIGluIG9wdF9wcm92aWRlcnMub3B0aW9uc19hbmRfdmFsdWVzKCk6DQogICAgICAgICAgICAgICAgaWYgb3B0ZGljdC5nZXQoJ2RlcHJlY2F0ZWQnKToNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICAgICAgICAgIGlmIG9wdG5hbWUgbm90IGluIGZpbHRlcl9vcHRpb25zOg0KICAgICAgICAgICAgICAgICAgICBjaGlsZF9jb25maWdbb3B0bmFtZV0gPSB1dGlscy5fZm9ybWF0X29wdGlvbl92YWx1ZSgNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGRpY3QsIHZhbCkNCiAgICAgICAgY2hpbGRfY29uZmlnWydweXRob24zX3BvcnRpbmdfbW9kZSddID0gc2VsZi5fcHl0aG9uM19wb3J0aW5nX21vZGUNCiAgICAgICAgY2hpbGRfY29uZmlnWydwbHVnaW5zJ10gPSBzZWxmLl9keW5hbWljX3BsdWdpbnMNCiAgICAgICAgcmV0dXJuIGNoaWxkX2NvbmZpZw0KDQogICAgZGVmIF9wYXJhbGxlbF90YXNrKHNlbGYsIGZpbGVzX29yX21vZHVsZXMpOg0KICAgICAgICAjIFByZXBhcmUgY29uZmlndXJhdGlvbiBmb3IgY2hpbGQgbGludGVycy4NCiAgICAgICAgY2hpbGRfY29uZmlnID0gc2VsZi5fZ2V0X2pvYnNfY29uZmlnKCkNCg0KICAgICAgICBjaGlsZHJlbiA9IFtdDQogICAgICAgIG1hbmFnZXIgPSBtdWx0aXByb2Nlc3NpbmcuTWFuYWdlcigpDQogICAgICAgIHRhc2tzX3F1ZXVlID0gbWFuYWdlci5RdWV1ZSgpDQogICAgICAgIHJlc3VsdHNfcXVldWUgPSBtYW5hZ2VyLlF1ZXVlKCkNCg0KICAgICAgICAjIFNlbmQgZmlsZXMgdG8gY2hpbGQgbGludGVycy4NCiAgICAgICAgZXhwYW5kZWRfZmlsZXMgPSBbXQ0KICAgICAgICBmb3IgZGVzY3IgaW4gc2VsZi5leHBhbmRfZmlsZXMoZmlsZXNfb3JfbW9kdWxlcyk6DQogICAgICAgICAgICBtb2RuYW1lLCBmaWxlcGF0aCwgaXNfYXJnID0gZGVzY3JbJ25hbWUnXSwgZGVzY3JbJ3BhdGgnXSwgZGVzY3JbJ2lzYXJnJ10NCiAgICAgICAgICAgIGlmIHNlbGYuc2hvdWxkX2FuYWx5emVfZmlsZShtb2RuYW1lLCBmaWxlcGF0aCwgaXNfYXJndW1lbnQ9aXNfYXJnKToNCiAgICAgICAgICAgICAgICBleHBhbmRlZF9maWxlcy5hcHBlbmQoZGVzY3IpDQoNCiAgICAgICAgIyBkbyBub3Qgc3RhcnQgbW9yZSBqb2JzIHRoYW4gbmVlZGVkDQogICAgICAgIGZvciBfIGluIHJhbmdlKG1pbihzZWxmLmNvbmZpZy5qb2JzLCBsZW4oZXhwYW5kZWRfZmlsZXMpKSk6DQogICAgICAgICAgICBjaGlsZF9saW50ZXIgPSBDaGlsZExpbnRlcihhcmdzPSh0YXNrc19xdWV1ZSwgcmVzdWx0c19xdWV1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX2NvbmZpZykpDQogICAgICAgICAgICBjaGlsZF9saW50ZXIuc3RhcnQoKQ0KICAgICAgICAgICAgY2hpbGRyZW4uYXBwZW5kKGNoaWxkX2xpbnRlcikNCg0KICAgICAgICBmb3IgZmlsZXNfb3JfbW9kdWxlIGluIGV4cGFuZGVkX2ZpbGVzOg0KICAgICAgICAgICAgcGF0aCA9IGZpbGVzX29yX21vZHVsZVsncGF0aCddDQogICAgICAgICAgICB0YXNrc19xdWV1ZS5wdXQoW3BhdGhdKQ0KDQogICAgICAgICMgY29sbGVjdCByZXN1bHRzIGZyb20gY2hpbGQgbGludGVycw0KICAgICAgICBmYWlsZWQgPSBGYWxzZQ0KICAgICAgICBmb3IgXyBpbiBleHBhbmRlZF9maWxlczoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRzX3F1ZXVlLmdldCgpDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4Og0KICAgICAgICAgICAgICAgIHByaW50KCJpbnRlcm5hbCBlcnJvciB3aGlsZSByZWNlaXZpbmcgcmVzdWx0cyBmcm9tIGNoaWxkIGxpbnRlciIsDQogICAgICAgICAgICAgICAgICAgICAgZmlsZT1zeXMuc3RkZXJyKQ0KICAgICAgICAgICAgICAgIHByaW50KGV4LCBmaWxlPXN5cy5zdGRlcnIpDQogICAgICAgICAgICAgICAgZmFpbGVkID0gVHJ1ZQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICB5aWVsZCByZXN1bHQNCg0KICAgICAgICAjIFN0b3AgY2hpbGQgbGludGVycyBhbmQgd2FpdCBmb3IgdGhlaXIgY29tcGxldGlvbi4NCiAgICAgICAgZm9yIF8gaW4gcmFuZ2Uoc2VsZi5jb25maWcuam9icyk6DQogICAgICAgICAgICB0YXNrc19xdWV1ZS5wdXQoJ1NUT1AnKQ0KICAgICAgICBmb3IgY2hpbGQgaW4gY2hpbGRyZW46DQogICAgICAgICAgICBjaGlsZC5qb2luKCkNCg0KICAgICAgICBpZiBmYWlsZWQ6DQogICAgICAgICAgICBwcmludCgiRXJyb3Igb2NjdXJyZWQsIHN0b3BwaW5nIHRoZSBsaW50ZXIuIiwgZmlsZT1zeXMuc3RkZXJyKQ0KICAgICAgICAgICAgc3lzLmV4aXQoMzIpDQoNCiAgICBkZWYgX3BhcmFsbGVsX2NoZWNrKHNlbGYsIGZpbGVzX29yX21vZHVsZXMpOg0KICAgICAgICAjIFJlc2V0IHN0YXRzLg0KICAgICAgICBzZWxmLm9wZW4oKQ0KDQogICAgICAgIGFsbF9zdGF0cyA9IFtdDQogICAgICAgIG1vZHVsZSA9IE5vbmUNCiAgICAgICAgZm9yIHJlc3VsdCBpbiBzZWxmLl9wYXJhbGxlbF90YXNrKGZpbGVzX29yX21vZHVsZXMpOg0KICAgICAgICAgICAgaWYgbm90IHJlc3VsdDoNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgKA0KICAgICAgICAgICAgICAgIF8sDQogICAgICAgICAgICAgICAgc2VsZi5maWxlX3N0YXRlLmJhc2VfbmFtZSwNCiAgICAgICAgICAgICAgICBtb2R1bGUsDQogICAgICAgICAgICAgICAgbWVzc2FnZXMsDQogICAgICAgICAgICAgICAgc3RhdHMsDQogICAgICAgICAgICAgICAgbXNnX3N0YXR1cw0KICAgICAgICAgICAgKSA9IHJlc3VsdA0KDQogICAgICAgICAgICBmb3IgbXNnIGluIG1lc3NhZ2VzOg0KICAgICAgICAgICAgICAgIG1zZyA9IHV0aWxzLk1lc3NhZ2UoKm1zZykNCiAgICAgICAgICAgICAgICBzZWxmLnNldF9jdXJyZW50X21vZHVsZShtb2R1bGUpDQogICAgICAgICAgICAgICAgc2VsZi5yZXBvcnRlci5oYW5kbGVfbWVzc2FnZShtc2cpDQoNCiAgICAgICAgICAgIGFsbF9zdGF0cy5hcHBlbmQoc3RhdHMpDQogICAgICAgICAgICBzZWxmLm1zZ19zdGF0dXMgfD0gbXNnX3N0YXR1cw0KDQogICAgICAgIHNlbGYuc3RhdHMgPSBfbWVyZ2Vfc3RhdHMoYWxsX3N0YXRzKQ0KICAgICAgICBzZWxmLmN1cnJlbnRfbmFtZSA9IG1vZHVsZQ0KDQogICAgICAgICMgSW5zZXJ0IHN0YXRzIGRhdGEgdG8gbG9jYWwgY2hlY2tlcnMuDQogICAgICAgIGZvciBjaGVja2VyIGluIHNlbGYuZ2V0X2NoZWNrZXJzKCk6DQogICAgICAgICAgICBpZiBjaGVja2VyIGlzIG5vdCBzZWxmOg0KICAgICAgICAgICAgICAgIGNoZWNrZXIuc3RhdHMgPSBzZWxmLnN0YXRzDQoNCiAgICBkZWYgX2RvX2NoZWNrKHNlbGYsIGZpbGVzX29yX21vZHVsZXMpOg0KICAgICAgICB3YWxrZXIgPSB1dGlscy5QeUxpbnRBU1RXYWxrZXIoc2VsZikNCiAgICAgICAgX2NoZWNrZXJzID0gc2VsZi5wcmVwYXJlX2NoZWNrZXJzKCkNCiAgICAgICAgdG9rZW5jaGVja2VycyA9IFtjIGZvciBjIGluIF9jaGVja2Vycw0KICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGludGVyZmFjZXMuaW1wbGVtZW50cyhjLCBpbnRlcmZhY2VzLklUb2tlbkNoZWNrZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGMgaXMgbm90IHNlbGZdDQogICAgICAgIHJhd2NoZWNrZXJzID0gW2MgZm9yIGMgaW4gX2NoZWNrZXJzDQogICAgICAgICAgICAgICAgICAgICAgIGlmIGludGVyZmFjZXMuaW1wbGVtZW50cyhjLCBpbnRlcmZhY2VzLklSYXdDaGVja2VyKV0NCiAgICAgICAgIyBub3RpZnkgZ2xvYmFsIGJlZ2luDQogICAgICAgIGZvciBjaGVja2VyIGluIF9jaGVja2VyczoNCiAgICAgICAgICAgIGNoZWNrZXIub3BlbigpDQogICAgICAgICAgICBpZiBpbnRlcmZhY2VzLmltcGxlbWVudHMoY2hlY2tlciwgaW50ZXJmYWNlcy5JQXN0cm9pZENoZWNrZXIpOg0KICAgICAgICAgICAgICAgIHdhbGtlci5hZGRfY2hlY2tlcihjaGVja2VyKQ0KICAgICAgICAjIGJ1aWxkIGFzdCBhbmQgY2hlY2sgbW9kdWxlcyBvciBwYWNrYWdlcw0KICAgICAgICBmb3IgZGVzY3IgaW4gc2VsZi5leHBhbmRfZmlsZXMoZmlsZXNfb3JfbW9kdWxlcyk6DQogICAgICAgICAgICBtb2RuYW1lLCBmaWxlcGF0aCwgaXNfYXJnID0gZGVzY3JbJ25hbWUnXSwgZGVzY3JbJ3BhdGgnXSwgZGVzY3JbJ2lzYXJnJ10NCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNob3VsZF9hbmFseXplX2ZpbGUobW9kbmFtZSwgZmlsZXBhdGgsIGlzX2FyZ3VtZW50PWlzX2FyZyk6DQogICAgICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICAgICAgc2VsZi5zZXRfY3VycmVudF9tb2R1bGUobW9kbmFtZSwgZmlsZXBhdGgpDQogICAgICAgICAgICAjIGdldCB0aGUgbW9kdWxlIHJlcHJlc2VudGF0aW9uDQogICAgICAgICAgICBhc3Rfbm9kZSA9IHNlbGYuZ2V0X2FzdChmaWxlcGF0aCwgbW9kbmFtZSkNCiAgICAgICAgICAgIGlmIGFzdF9ub2RlIGlzIE5vbmU6DQogICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICMgWFhYIHRvIGJlIGNvcnJlY3Qgd2UgbmVlZCB0byBrZWVwIG1vZHVsZV9tc2dzX3N0YXRlIGZvciBldmVyeQ0KICAgICAgICAgICAgIyBhbmFseXplZCBtb2R1bGUgKHRoZSBwcm9ibGVtIHN0YW5kcyB3aXRoIGxvY2FsaXplZCBtZXNzYWdlcyB3aGljaA0KICAgICAgICAgICAgIyBhcmUgb25seSBkZXRlY3RlZCBpbiB0aGUgLmNsb3NlIHN0ZXApDQogICAgICAgICAgICBzZWxmLmZpbGVfc3RhdGUgPSB1dGlscy5GaWxlU3RhdGUoZGVzY3JbJ2Jhc2VuYW1lJ10pDQogICAgICAgICAgICBzZWxmLl9pZ25vcmVfZmlsZSA9IEZhbHNlDQogICAgICAgICAgICAjIGZpeCB0aGUgY3VycmVudCBmaWxlIChpZiB0aGUgc291cmNlIGZpbGUgd2FzIG5vdCBhdmFpbGFibGUgb3INCiAgICAgICAgICAgICMgaWYgaXQncyBhY3R1YWxseSBhIGMgZXh0ZW5zaW9uKQ0KICAgICAgICAgICAgc2VsZi5jdXJyZW50X2ZpbGUgPSBhc3Rfbm9kZS5maWxlICMgcHlsaW50OiBkaXNhYmxlPW1heWJlLW5vLW1lbWJlcg0KICAgICAgICAgICAgc2VsZi5jaGVja19hc3Ryb2lkX21vZHVsZShhc3Rfbm9kZSwgd2Fsa2VyLCByYXdjaGVja2VycywgdG9rZW5jaGVja2VycykNCiAgICAgICAgICAgICMgd2FybiBhYm91dCBzcHVyaW91cyBpbmxpbmUgbWVzc2FnZXMgaGFuZGxpbmcNCiAgICAgICAgICAgIHNwdXJpb3VzX21lc3NhZ2VzID0gc2VsZi5maWxlX3N0YXRlLml0ZXJfc3B1cmlvdXNfc3VwcHJlc3Npb25fbWVzc2FnZXMoc2VsZi5tc2dzX3N0b3JlKQ0KICAgICAgICAgICAgZm9yIG1zZ2lkLCBsaW5lLCBhcmdzIGluIHNwdXJpb3VzX21lc3NhZ2VzOg0KICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UobXNnaWQsIGxpbmUsIE5vbmUsIGFyZ3MpDQogICAgICAgICMgbm90aWZ5IGdsb2JhbCBlbmQNCiAgICAgICAgc2VsZi5zdGF0c1snc3RhdGVtZW50J10gPSB3YWxrZXIubmJzdGF0ZW1lbnRzDQogICAgICAgIGZvciBjaGVja2VyIGluIHJldmVyc2VkKF9jaGVja2Vycyk6DQogICAgICAgICAgICBjaGVja2VyLmNsb3NlKCkNCg0KICAgIGRlZiBleHBhbmRfZmlsZXMoc2VsZiwgbW9kdWxlcyk6DQogICAgICAgICIiImdldCBtb2R1bGVzIGFuZCBlcnJvcnMgZnJvbSBhIGxpc3Qgb2YgbW9kdWxlcyBhbmQgaGFuZGxlIGVycm9ycw0KICAgICAgICAiIiINCiAgICAgICAgcmVzdWx0LCBlcnJvcnMgPSB1dGlscy5leHBhbmRfbW9kdWxlcyhtb2R1bGVzLCBzZWxmLmNvbmZpZy5ibGFja19saXN0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLmJsYWNrX2xpc3RfcmUpDQogICAgICAgIGZvciBlcnJvciBpbiBlcnJvcnM6DQogICAgICAgICAgICBtZXNzYWdlID0gbW9kbmFtZSA9IGVycm9yWyJtb2QiXQ0KICAgICAgICAgICAga2V5ID0gZXJyb3JbImtleSJdDQogICAgICAgICAgICBzZWxmLnNldF9jdXJyZW50X21vZHVsZShtb2RuYW1lKQ0KICAgICAgICAgICAgaWYga2V5ID09ICJmYXRhbCI6DQogICAgICAgICAgICAgICAgbWVzc2FnZSA9IHN0cihlcnJvclsiZXgiXSkucmVwbGFjZShvcy5nZXRjd2QoKSArIG9zLnNlcCwgJycpDQogICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKGtleSwgYXJncz1tZXNzYWdlKQ0KICAgICAgICByZXR1cm4gcmVzdWx0DQoNCiAgICBkZWYgc2V0X2N1cnJlbnRfbW9kdWxlKHNlbGYsIG1vZG5hbWUsIGZpbGVwYXRoPU5vbmUpOg0KICAgICAgICAiIiJzZXQgdGhlIG5hbWUgb2YgdGhlIGN1cnJlbnRseSBhbmFseXplZCBtb2R1bGUgYW5kDQogICAgICAgIGluaXQgc3RhdGlzdGljcyBmb3IgaXQNCiAgICAgICAgIiIiDQogICAgICAgIGlmIG5vdCBtb2RuYW1lIGFuZCBmaWxlcGF0aCBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIHNlbGYucmVwb3J0ZXIub25fc2V0X2N1cnJlbnRfbW9kdWxlKG1vZG5hbWUsIGZpbGVwYXRoKQ0KICAgICAgICBzZWxmLmN1cnJlbnRfbmFtZSA9IG1vZG5hbWUNCiAgICAgICAgc2VsZi5jdXJyZW50X2ZpbGUgPSBmaWxlcGF0aCBvciBtb2RuYW1lDQogICAgICAgIHNlbGYuc3RhdHNbJ2J5X21vZHVsZSddW21vZG5hbWVdID0ge30NCiAgICAgICAgc2VsZi5zdGF0c1snYnlfbW9kdWxlJ11bbW9kbmFtZV1bJ3N0YXRlbWVudCddID0gMA0KICAgICAgICBmb3IgbXNnX2NhdCBpbiB1dGlscy5NU0dfVFlQRVMudmFsdWVzKCk6DQogICAgICAgICAgICBzZWxmLnN0YXRzWydieV9tb2R1bGUnXVttb2RuYW1lXVttc2dfY2F0XSA9IDANCg0KICAgIGRlZiBnZXRfYXN0KHNlbGYsIGZpbGVwYXRoLCBtb2RuYW1lKToNCiAgICAgICAgIiIicmV0dXJuIGFuIGFzdChyb2lkKSByZXByZXNlbnRhdGlvbiBmb3IgYSBtb2R1bGUiIiINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmV0dXJuIE1BTkFHRVIuYXN0X2Zyb21fZmlsZShmaWxlcGF0aCwgbW9kbmFtZSwgc291cmNlPVRydWUpDQogICAgICAgIGV4Y2VwdCBhc3Ryb2lkLkFzdHJvaWRTeW50YXhFcnJvciBhcyBleDoNCiAgICAgICAgICAgICMgcHlsaW50OiBkaXNhYmxlPW5vLW1lbWJlcg0KICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnc3ludGF4LWVycm9yJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZT1nZXRhdHRyKGV4LmVycm9yLCAnbGluZW5vJywgMCksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M9c3RyKGV4LmVycm9yKSkNCiAgICAgICAgZXhjZXB0IGFzdHJvaWQuQXN0cm9pZEJ1aWxkaW5nRXhjZXB0aW9uIGFzIGV4Og0KICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgncGFyc2UtZXJyb3InLCBhcmdzPWV4KQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4Og0KICAgICAgICAgICAgaW1wb3J0IHRyYWNlYmFjaw0KICAgICAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4YygpDQogICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKCdhc3Ryb2lkLWVycm9yJywgYXJncz0oZXguX19jbGFzc19fLCBleCkpDQoNCiAgICBkZWYgY2hlY2tfYXN0cm9pZF9tb2R1bGUoc2VsZiwgYXN0X25vZGUsIHdhbGtlciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3Y2hlY2tlcnMsIHRva2VuY2hlY2tlcnMpOg0KICAgICAgICAiIiJDaGVjayBhIG1vZHVsZSBmcm9tIGl0cyBhc3Ryb2lkIHJlcHJlc2VudGF0aW9uLiIiIg0KICAgICAgICB0cnk6DQogICAgICAgICAgICB0b2tlbnMgPSB1dGlscy50b2tlbml6ZV9tb2R1bGUoYXN0X25vZGUpDQogICAgICAgIGV4Y2VwdCB0b2tlbml6ZS5Ub2tlbkVycm9yIGFzIGV4Og0KICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnc3ludGF4LWVycm9yJywgbGluZT1leC5hcmdzWzFdWzBdLCBhcmdzPWV4LmFyZ3NbMF0pDQogICAgICAgICAgICByZXR1cm4gTm9uZQ0KDQogICAgICAgIGlmIG5vdCBhc3Rfbm9kZS5wdXJlX3B5dGhvbjoNCiAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ3Jhdy1jaGVja2VyLWZhaWxlZCcsIGFyZ3M9YXN0X25vZGUubmFtZSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICNhc3NlcnQgYXN0cm9pZC5maWxlLmVuZHN3aXRoKCcucHknKQ0KICAgICAgICAgICAgIyBpbnZva2UgSVRva2VuQ2hlY2tlciBpbnRlcmZhY2Ugb24gc2VsZiB0byBmZXRjaCBtb2R1bGUvYmxvY2sNCiAgICAgICAgICAgICMgbGV2ZWwgb3B0aW9ucw0KICAgICAgICAgICAgc2VsZi5wcm9jZXNzX3Rva2Vucyh0b2tlbnMpDQogICAgICAgICAgICBpZiBzZWxmLl9pZ25vcmVfZmlsZToNCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgICAgICMgd2FsayBhc3QgdG8gY29sbGVjdCBsaW5lIG51bWJlcnMNCiAgICAgICAgICAgIHNlbGYuZmlsZV9zdGF0ZS5jb2xsZWN0X2Jsb2NrX2xpbmVzKHNlbGYubXNnc19zdG9yZSwgYXN0X25vZGUpDQogICAgICAgICAgICAjIHJ1biByYXcgYW5kIHRva2VucyBjaGVja2Vycw0KICAgICAgICAgICAgZm9yIGNoZWNrZXIgaW4gcmF3Y2hlY2tlcnM6DQogICAgICAgICAgICAgICAgY2hlY2tlci5wcm9jZXNzX21vZHVsZShhc3Rfbm9kZSkNCiAgICAgICAgICAgIGZvciBjaGVja2VyIGluIHRva2VuY2hlY2tlcnM6DQogICAgICAgICAgICAgICAgY2hlY2tlci5wcm9jZXNzX3Rva2Vucyh0b2tlbnMpDQogICAgICAgICMgZ2VuZXJhdGUgZXZlbnRzIHRvIGFzdHJvaWQgY2hlY2tlcnMNCiAgICAgICAgd2Fsa2VyLndhbGsoYXN0X25vZGUpDQogICAgICAgIHJldHVybiBUcnVlDQoNCiAgICAjIElBc3Ryb2lkQ2hlY2tlciBpbnRlcmZhY2UgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQogICAgZGVmIG9wZW4oc2VsZik6DQogICAgICAgICIiImluaXRpYWxpemUgY291bnRlcnMiIiINCiAgICAgICAgc2VsZi5zdGF0cyA9IHsnYnlfbW9kdWxlJyA6IHt9LA0KICAgICAgICAgICAgICAgICAgICAgICdieV9tc2cnIDoge30sDQogICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgIE1BTkFHRVIuYWx3YXlzX2xvYWRfZXh0ZW5zaW9ucyA9IHNlbGYuY29uZmlnLnVuc2FmZV9sb2FkX2FueV9leHRlbnNpb24NCiAgICAgICAgTUFOQUdFUi5tYXhfaW5mZXJhYmxlX3ZhbHVlcyA9IHNlbGYuY29uZmlnLmxpbWl0X2luZmVyZW5jZV9yZXN1bHRzDQogICAgICAgIE1BTkFHRVIuZXh0ZW5zaW9uX3BhY2thZ2Vfd2hpdGVsaXN0LnVwZGF0ZSgNCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmV4dGVuc2lvbl9wa2dfd2hpdGVsaXN0KQ0KICAgICAgICBmb3IgbXNnX2NhdCBpbiB1dGlscy5NU0dfVFlQRVMudmFsdWVzKCk6DQogICAgICAgICAgICBzZWxmLnN0YXRzW21zZ19jYXRdID0gMA0KDQogICAgZGVmIGdlbmVyYXRlX3JlcG9ydHMoc2VsZik6DQogICAgICAgICIiImNsb3NlIHRoZSB3aG9sZSBwYWNrYWdlIC9tb2R1bGUsIGl0J3MgdGltZSB0byBtYWtlIHJlcG9ydHMgIQ0KDQogICAgICAgIGlmIHBlcnNpc3RlbnQgcnVuLCBwaWNrbGUgcmVzdWx0cyBmb3IgbGF0ZXIgY29tcGFyaXNvbg0KICAgICAgICAiIiINCiAgICAgICAgIyBEaXNwbGF5IHdoYXRldmVyIG1lc3NhZ2VzIGFyZSBsZWZ0IG9uIHRoZSByZXBvcnRlci4NCiAgICAgICAgc2VsZi5yZXBvcnRlci5kaXNwbGF5X21lc3NhZ2VzKHJlcG9ydF9ub2Rlcy5TZWN0aW9uKCkpDQoNCiAgICAgICAgaWYgc2VsZi5maWxlX3N0YXRlLmJhc2VfbmFtZSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICMgbG9hZCBwcmV2aW91cyByZXN1bHRzIGlmIGFueQ0KICAgICAgICAgICAgcHJldmlvdXNfc3RhdHMgPSBjb25maWcubG9hZF9yZXN1bHRzKHNlbGYuZmlsZV9zdGF0ZS5iYXNlX25hbWUpDQogICAgICAgICAgICAjIFhYWCBjb2RlIGJlbG93IG5lZWRzIHJlZmFjdG9yaW5nIHRvIGJlIG1vcmUgcmVwb3J0ZXIgYWdub3N0aWMNCiAgICAgICAgICAgIHNlbGYucmVwb3J0ZXIub25fY2xvc2Uoc2VsZi5zdGF0cywgcHJldmlvdXNfc3RhdHMpDQogICAgICAgICAgICBpZiBzZWxmLmNvbmZpZy5yZXBvcnRzOg0KICAgICAgICAgICAgICAgIHNlY3QgPSBzZWxmLm1ha2VfcmVwb3J0cyhzZWxmLnN0YXRzLCBwcmV2aW91c19zdGF0cykNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgc2VjdCA9IHJlcG9ydF9ub2Rlcy5TZWN0aW9uKCkNCg0KICAgICAgICAgICAgaWYgc2VsZi5jb25maWcucmVwb3J0czoNCiAgICAgICAgICAgICAgICBzZWxmLnJlcG9ydGVyLmRpc3BsYXlfcmVwb3J0cyhzZWN0KQ0KICAgICAgICAgICAgc2VsZi5fcmVwb3J0X2V2YWx1YXRpb24oKQ0KICAgICAgICAgICAgIyBzYXZlIHJlc3VsdHMgaWYgcGVyc2lzdGVudCBydW4NCiAgICAgICAgICAgIGlmIHNlbGYuY29uZmlnLnBlcnNpc3RlbnQ6DQogICAgICAgICAgICAgICAgY29uZmlnLnNhdmVfcmVzdWx0cyhzZWxmLnN0YXRzLCBzZWxmLmZpbGVfc3RhdGUuYmFzZV9uYW1lKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi5yZXBvcnRlci5vbl9jbG9zZShzZWxmLnN0YXRzLCB7fSkNCg0KICAgIGRlZiBfcmVwb3J0X2V2YWx1YXRpb24oc2VsZik6DQogICAgICAgICIiIm1ha2UgdGhlIGdsb2JhbCBldmFsdWF0aW9uIHJlcG9ydCIiIg0KICAgICAgICAjIGNoZWNrIHdpdGggYXQgbGVhc3QgY2hlY2sgMSBzdGF0ZW1lbnRzICh1c3VhbGx5IDAgd2hlbiB0aGVyZSBpcyBhDQogICAgICAgICMgc3ludGF4IGVycm9yIHByZXZlbnRpbmcgcHlsaW50IGZyb20gZnVydGhlciBwcm9jZXNzaW5nKQ0KICAgICAgICBwcmV2aW91c19zdGF0cyA9IGNvbmZpZy5sb2FkX3Jlc3VsdHMoc2VsZi5maWxlX3N0YXRlLmJhc2VfbmFtZSkNCiAgICAgICAgaWYgc2VsZi5zdGF0c1snc3RhdGVtZW50J10gPT0gMDoNCiAgICAgICAgICAgIHJldHVybg0KDQogICAgICAgICMgZ2V0IGEgZ2xvYmFsIG5vdGUgZm9yIHRoZSBjb2RlDQogICAgICAgIGV2YWx1YXRpb24gPSBzZWxmLmNvbmZpZy5ldmFsdWF0aW9uDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG5vdGUgPSBldmFsKGV2YWx1YXRpb24sIHt9LCBzZWxmLnN0YXRzKSAjIHB5bGludDogZGlzYWJsZT1ldmFsLXVzZWQNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoNCiAgICAgICAgICAgIG1zZyA9ICdBbiBleGNlcHRpb24gb2NjdXJyZWQgd2hpbGUgcmF0aW5nOiAlcycgJSBleA0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi5zdGF0c1snZ2xvYmFsX25vdGUnXSA9IG5vdGUNCiAgICAgICAgICAgIG1zZyA9ICdZb3VyIGNvZGUgaGFzIGJlZW4gcmF0ZWQgYXQgJS4yZi8xMCcgJSBub3RlDQogICAgICAgICAgICBwbm90ZSA9IHByZXZpb3VzX3N0YXRzLmdldCgnZ2xvYmFsX25vdGUnKQ0KICAgICAgICAgICAgaWYgcG5vdGUgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgbXNnICs9ICcgKHByZXZpb3VzIHJ1bjogJS4yZi8xMCwgJSsuMmYpJyAlIChwbm90ZSwgbm90ZSAtIHBub3RlKQ0KDQogICAgICAgIGlmIHNlbGYuY29uZmlnLnNjb3JlOg0KICAgICAgICAgICAgc2VjdCA9IHJlcG9ydF9ub2Rlcy5FdmFsdWF0aW9uU2VjdGlvbihtc2cpDQogICAgICAgICAgICBzZWxmLnJlcG9ydGVyLmRpc3BsYXlfcmVwb3J0cyhzZWN0KQ0KDQojIHNvbWUgcmVwb3J0aW5nIGZ1bmN0aW9ucyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCmRlZiByZXBvcnRfdG90YWxfbWVzc2FnZXNfc3RhdHMoc2VjdCwgc3RhdHMsIHByZXZpb3VzX3N0YXRzKToNCiAgICAiIiJtYWtlIHRvdGFsIGVycm9ycyAvIHdhcm5pbmdzIHJlcG9ydCIiIg0KICAgIGxpbmVzID0gWyd0eXBlJywgJ251bWJlcicsICdwcmV2aW91cycsICdkaWZmZXJlbmNlJ10NCiAgICBsaW5lcyArPSBjaGVja2Vycy50YWJsZV9saW5lc19mcm9tX3N0YXRzKHN0YXRzLCBwcmV2aW91c19zdGF0cywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgnY29udmVudGlvbicsICdyZWZhY3RvcicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dhcm5pbmcnLCAnZXJyb3InKSkNCiAgICBzZWN0LmFwcGVuZChyZXBvcnRfbm9kZXMuVGFibGUoY2hpbGRyZW49bGluZXMsIGNvbHM9NCwgcmhlYWRlcnM9MSkpDQoNCmRlZiByZXBvcnRfbWVzc2FnZXNfc3RhdHMoc2VjdCwgc3RhdHMsIF8pOg0KICAgICIiIm1ha2UgbWVzc2FnZXMgdHlwZSByZXBvcnQiIiINCiAgICBpZiBub3Qgc3RhdHNbJ2J5X21zZyddOg0KICAgICAgICAjIGRvbid0IHByaW50IHRoaXMgcmVwb3J0IHdoZW4gd2UgZGlkbid0IGRldGVjdGVkIGFueSBlcnJvcnMNCiAgICAgICAgcmFpc2UgZXhjZXB0aW9ucy5FbXB0eVJlcG9ydEVycm9yKCkNCiAgICBpbl9vcmRlciA9IHNvcnRlZChbKHZhbHVlLCBtc2dfaWQpDQogICAgICAgICAgICAgICAgICAgICAgIGZvciBtc2dfaWQsIHZhbHVlIGluIHN0YXRzWydieV9tc2cnXS5pdGVtcygpDQogICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBtc2dfaWQuc3RhcnRzd2l0aCgnSScpXSkNCiAgICBpbl9vcmRlci5yZXZlcnNlKCkNCiAgICBsaW5lcyA9ICgnbWVzc2FnZSBpZCcsICdvY2N1cnJlbmNlcycpDQogICAgZm9yIHZhbHVlLCBtc2dfaWQgaW4gaW5fb3JkZXI6DQogICAgICAgIGxpbmVzICs9IChtc2dfaWQsIHN0cih2YWx1ZSkpDQogICAgc2VjdC5hcHBlbmQocmVwb3J0X25vZGVzLlRhYmxlKGNoaWxkcmVuPWxpbmVzLCBjb2xzPTIsIHJoZWFkZXJzPTEpKQ0KDQpkZWYgcmVwb3J0X21lc3NhZ2VzX2J5X21vZHVsZV9zdGF0cyhzZWN0LCBzdGF0cywgXyk6DQogICAgIiIibWFrZSBlcnJvcnMgLyB3YXJuaW5ncyBieSBtb2R1bGVzIHJlcG9ydCIiIg0KICAgIGlmIGxlbihzdGF0c1snYnlfbW9kdWxlJ10pID09IDE6DQogICAgICAgICMgZG9uJ3QgcHJpbnQgdGhpcyByZXBvcnQgd2hlbiB3ZSBhcmUgYW5hbHlzaW5nIGEgc2luZ2xlIG1vZHVsZQ0KICAgICAgICByYWlzZSBleGNlcHRpb25zLkVtcHR5UmVwb3J0RXJyb3IoKQ0KICAgIGJ5X21vZCA9IGNvbGxlY3Rpb25zLmRlZmF1bHRkaWN0KGRpY3QpDQogICAgZm9yIG1fdHlwZSBpbiAoJ2ZhdGFsJywgJ2Vycm9yJywgJ3dhcm5pbmcnLCAncmVmYWN0b3InLCAnY29udmVudGlvbicpOg0KICAgICAgICB0b3RhbCA9IHN0YXRzW21fdHlwZV0NCiAgICAgICAgZm9yIG1vZHVsZSBpbiBzdGF0c1snYnlfbW9kdWxlJ10ua2V5cygpOg0KICAgICAgICAgICAgbW9kX3RvdGFsID0gc3RhdHNbJ2J5X21vZHVsZSddW21vZHVsZV1bbV90eXBlXQ0KICAgICAgICAgICAgaWYgdG90YWwgPT0gMDoNCiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBwZXJjZW50ID0gZmxvYXQoKG1vZF90b3RhbCkqMTAwKSAvIHRvdGFsDQogICAgICAgICAgICBieV9tb2RbbW9kdWxlXVttX3R5cGVdID0gcGVyY2VudA0KICAgIHNvcnRlZF9yZXN1bHQgPSBbXQ0KICAgIGZvciBtb2R1bGUsIG1vZF9pbmZvIGluIGJ5X21vZC5pdGVtcygpOg0KICAgICAgICBzb3J0ZWRfcmVzdWx0LmFwcGVuZCgobW9kX2luZm9bJ2Vycm9yJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RfaW5mb1snd2FybmluZyddLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kX2luZm9bJ3JlZmFjdG9yJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RfaW5mb1snY29udmVudGlvbiddLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlKSkNCiAgICBzb3J0ZWRfcmVzdWx0LnNvcnQoKQ0KICAgIHNvcnRlZF9yZXN1bHQucmV2ZXJzZSgpDQogICAgbGluZXMgPSBbJ21vZHVsZScsICdlcnJvcicsICd3YXJuaW5nJywgJ3JlZmFjdG9yJywgJ2NvbnZlbnRpb24nXQ0KICAgIGZvciBsaW5lIGluIHNvcnRlZF9yZXN1bHQ6DQogICAgICAgICMgRG9uJ3QgcmVwb3J0IGNsZWFuIG1vZHVsZXMuDQogICAgICAgIGlmIGFsbChlbnRyeSA9PSAwIGZvciBlbnRyeSBpbiBsaW5lWzotMV0pOg0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgbGluZXMuYXBwZW5kKGxpbmVbLTFdKQ0KICAgICAgICBmb3IgdmFsIGluIGxpbmVbOi0xXToNCiAgICAgICAgICAgIGxpbmVzLmFwcGVuZCgnJS4yZicgJSB2YWwpDQogICAgaWYgbGVuKGxpbmVzKSA9PSA1Og0KICAgICAgICByYWlzZSBleGNlcHRpb25zLkVtcHR5UmVwb3J0RXJyb3IoKQ0KICAgIHNlY3QuYXBwZW5kKHJlcG9ydF9ub2Rlcy5UYWJsZShjaGlsZHJlbj1saW5lcywgY29scz01LCByaGVhZGVycz0xKSkNCg0KDQojIHV0aWxpdGllcyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCg0KY2xhc3MgQXJndW1lbnRQcmVwcm9jZXNzaW5nRXJyb3IoRXhjZXB0aW9uKToNCiAgICAiIiJSYWlzZWQgaWYgYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBhcmd1bWVudCBwcmVwcm9jZXNzaW5nLiIiIg0KDQoNCmRlZiBwcmVwcm9jZXNzX29wdGlvbnMoYXJncywgc2VhcmNoX2Zvcik6DQogICAgIiIibG9vayBmb3Igc29tZSBvcHRpb25zIChrZXlzIG9mIDxzZWFyY2hfZm9yPikgd2hpY2ggaGF2ZSB0byBiZSBwcm9jZXNzZWQNCiAgICBiZWZvcmUgb3RoZXJzDQoNCiAgICB2YWx1ZXMgb2YgPHNlYXJjaF9mb3I+IGFyZSBjYWxsYmFjayBmdW5jdGlvbnMgdG8gY2FsbCB3aGVuIHRoZSBvcHRpb24gaXMNCiAgICBmb3VuZA0KICAgICIiIg0KICAgIGkgPSAwDQogICAgd2hpbGUgaSA8IGxlbihhcmdzKToNCiAgICAgICAgYXJnID0gYXJnc1tpXQ0KICAgICAgICBpZiBhcmcuc3RhcnRzd2l0aCgnLS0nKToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBvcHRpb24sIHZhbCA9IGFyZ1syOl0uc3BsaXQoJz0nLCAxKQ0KICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICAgICAgb3B0aW9uLCB2YWwgPSBhcmdbMjpdLCBOb25lDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgY2IsIHRha2VhcmcgPSBzZWFyY2hfZm9yW29wdGlvbl0NCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICAgICBpICs9IDENCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZGVsIGFyZ3NbaV0NCiAgICAgICAgICAgICAgICBpZiB0YWtlYXJnIGFuZCB2YWwgaXMgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgaWYgaSA+PSBsZW4oYXJncykgb3IgYXJnc1tpXS5zdGFydHN3aXRoKCctJyk6DQogICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSAnT3B0aW9uICVzIGV4cGVjdHMgYSB2YWx1ZScgJSBvcHRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIEFyZ3VtZW50UHJlcHJvY2Vzc2luZ0Vycm9yKG1zZykNCiAgICAgICAgICAgICAgICAgICAgdmFsID0gYXJnc1tpXQ0KICAgICAgICAgICAgICAgICAgICBkZWwgYXJnc1tpXQ0KICAgICAgICAgICAgICAgIGVsaWYgbm90IHRha2VhcmcgYW5kIHZhbCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgbXNnID0gIk9wdGlvbiAlcyBkb2Vzbid0IGV4cGVjdHMgYSB2YWx1ZSIgJSBvcHRpb24NCiAgICAgICAgICAgICAgICAgICAgcmFpc2UgQXJndW1lbnRQcmVwcm9jZXNzaW5nRXJyb3IobXNnKQ0KICAgICAgICAgICAgICAgIGNiKG9wdGlvbiwgdmFsKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgaSArPSAxDQoNCg0KQGNvbnRleHRsaWIuY29udGV4dG1hbmFnZXINCmRlZiBmaXhfaW1wb3J0X3BhdGgoYXJncyk6DQogICAgIiIiUHJlcGFyZSBzeXMucGF0aCBmb3IgcnVubmluZyB0aGUgbGludGVyIGNoZWNrcy4NCg0KICAgIFdpdGhpbiB0aGlzIGNvbnRleHQsIGVhY2ggb2YgdGhlIGdpdmVuIGFyZ3VtZW50cyBpcyBpbXBvcnRhYmxlLg0KICAgIFBhdGhzIGFyZSBhZGRlZCB0byBzeXMucGF0aCBpbiBjb3JyZXNwb25kaW5nIG9yZGVyIHRvIHRoZSBhcmd1bWVudHMuDQogICAgV2UgYXZvaWQgYWRkaW5nIGR1cGxpY2F0ZSBkaXJlY3RvcmllcyB0byBzeXMucGF0aC4NCiAgICBgc3lzLnBhdGhgIGlzIHJlc2V0IHRvIGl0cyBvcmlnaW5hbCB2YWx1ZSB1cG9uIGV4aXRpbmcgdGhpcyBjb250ZXh0Lg0KICAgICIiIg0KICAgIG9yaWcgPSBsaXN0KHN5cy5wYXRoKQ0KICAgIGNoYW5nZXMgPSBbXQ0KICAgIGZvciBhcmcgaW4gYXJnczoNCiAgICAgICAgcGF0aCA9IF9nZXRfcHl0aG9uX3BhdGgoYXJnKQ0KICAgICAgICBpZiBwYXRoIGluIGNoYW5nZXM6DQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgY2hhbmdlcy5hcHBlbmQocGF0aCkNCiAgICBzeXMucGF0aFs6XSA9IGNoYW5nZXMgKyBbIi4iXSArIHN5cy5wYXRoDQogICAgdHJ5Og0KICAgICAgICB5aWVsZA0KICAgIGZpbmFsbHk6DQogICAgICAgIHN5cy5wYXRoWzpdID0gb3JpZw0KDQoNCmNsYXNzIFJ1bjoNCiAgICAiIiJoZWxwZXIgY2xhc3MgdG8gdXNlIGFzIG1haW4gZm9yIHB5bGludCA6DQoNCiAgICBydW4oKnN5cy5hcmd2WzE6XSkNCiAgICAiIiINCiAgICBMaW50ZXJDbGFzcyA9IFB5TGludGVyDQogICAgb3B0aW9uX2dyb3VwcyA9ICgNCiAgICAgICAgKCdDb21tYW5kcycsICdPcHRpb25zIHdoaWNoIGFyZSBhY3R1YWxseSBjb21tYW5kcy4gT3B0aW9ucyBpbiB0aGlzIFwNCmdyb3VwIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyksDQogICAgICAgICkNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBhcmdzLCByZXBvcnRlcj1Ob25lLCBkb19leGl0PVRydWUpOg0KICAgICAgICBzZWxmLl9yY2ZpbGUgPSBOb25lDQogICAgICAgIHNlbGYuX3BsdWdpbnMgPSBbXQ0KICAgICAgICBzZWxmLnZlcmJvc2UgPSBOb25lDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHByZXByb2Nlc3Nfb3B0aW9ucyhhcmdzLCB7DQogICAgICAgICAgICAgICAgIyBvcHRpb246IChjYWxsYmFjaywgdGFrZWFyZykNCiAgICAgICAgICAgICAgICAnaW5pdC1ob29rJzogICAoY2JfaW5pdF9ob29rLCBUcnVlKSwNCiAgICAgICAgICAgICAgICAncmNmaWxlJzogICAgICAgKHNlbGYuY2Jfc2V0X3JjZmlsZSwgVHJ1ZSksDQogICAgICAgICAgICAgICAgJ2xvYWQtcGx1Z2lucyc6IChzZWxmLmNiX2FkZF9wbHVnaW5zLCBUcnVlKSwNCiAgICAgICAgICAgICAgICAndmVyYm9zZSc6IChzZWxmLmNiX3ZlcmJvc2VfbW9kZSwgRmFsc2UpLA0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgIGV4Y2VwdCBBcmd1bWVudFByZXByb2Nlc3NpbmdFcnJvciBhcyBleDoNCiAgICAgICAgICAgIHByaW50KGV4LCBmaWxlPXN5cy5zdGRlcnIpDQogICAgICAgICAgICBzeXMuZXhpdCgzMikNCg0KICAgICAgICBzZWxmLmxpbnRlciA9IGxpbnRlciA9IHNlbGYuTGludGVyQ2xhc3MoKA0KICAgICAgICAgICAgKCdyY2ZpbGUnLA0KICAgICAgICAgICAgIHsnYWN0aW9uJyA6ICdjYWxsYmFjaycsICdjYWxsYmFjaycgOiBsYW1iZGEgKmFyZ3M6IDEsDQogICAgICAgICAgICAgICd0eXBlJzogJ3N0cmluZycsICdtZXRhdmFyJzogJzxmaWxlPicsDQogICAgICAgICAgICAgICdoZWxwJyA6ICdTcGVjaWZ5IGEgY29uZmlndXJhdGlvbiBmaWxlLid9KSwNCg0KICAgICAgICAgICAgKCdpbml0LWhvb2snLA0KICAgICAgICAgICAgIHsnYWN0aW9uJyA6ICdjYWxsYmFjaycsICdjYWxsYmFjaycgOiBsYW1iZGEgKmFyZ3M6IDEsDQogICAgICAgICAgICAgICd0eXBlJyA6ICdzdHJpbmcnLCAnbWV0YXZhcic6ICc8Y29kZT4nLA0KICAgICAgICAgICAgICAnbGV2ZWwnOiAxLA0KICAgICAgICAgICAgICAnaGVscCcgOiAnUHl0aG9uIGNvZGUgdG8gZXhlY3V0ZSwgdXN1YWxseSBmb3Igc3lzLnBhdGggJw0KICAgICAgICAgICAgICAgICAgICAgICAnbWFuaXB1bGF0aW9uIHN1Y2ggYXMgcHlndGsucmVxdWlyZSgpLid9KSwNCg0KICAgICAgICAgICAgKCdoZWxwLW1zZycsDQogICAgICAgICAgICAgeydhY3Rpb24nIDogJ2NhbGxiYWNrJywgJ3R5cGUnIDogJ3N0cmluZycsICdtZXRhdmFyJzogJzxtc2ctaWQ+JywNCiAgICAgICAgICAgICAgJ2NhbGxiYWNrJyA6IHNlbGYuY2JfaGVscF9tZXNzYWdlLA0KICAgICAgICAgICAgICAnZ3JvdXAnOiAnQ29tbWFuZHMnLA0KICAgICAgICAgICAgICAnaGVscCcgOiAnRGlzcGxheSBhIGhlbHAgbWVzc2FnZSBmb3IgdGhlIGdpdmVuIG1lc3NhZ2UgaWQgYW5kICcNCiAgICAgICAgICAgICAgICAgICAgICAgJ2V4aXQuIFRoZSB2YWx1ZSBtYXkgYmUgYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBtZXNzYWdlIGlkcy4nfSksDQoNCiAgICAgICAgICAgICgnbGlzdC1tc2dzJywNCiAgICAgICAgICAgICB7J2FjdGlvbicgOiAnY2FsbGJhY2snLCAnbWV0YXZhcic6ICc8bXNnLWlkPicsDQogICAgICAgICAgICAgICdjYWxsYmFjaycgOiBzZWxmLmNiX2xpc3RfbWVzc2FnZXMsDQogICAgICAgICAgICAgICdncm91cCc6ICdDb21tYW5kcycsICdsZXZlbCc6IDEsDQogICAgICAgICAgICAgICdoZWxwJyA6ICJHZW5lcmF0ZSBweWxpbnQncyBtZXNzYWdlcy4ifSksDQoNCiAgICAgICAgICAgICgnbGlzdC1jb25mLWxldmVscycsDQogICAgICAgICAgICAgeydhY3Rpb24nIDogJ2NhbGxiYWNrJywNCiAgICAgICAgICAgICAgJ2NhbGxiYWNrJyA6IGNiX2xpc3RfY29uZmlkZW5jZV9sZXZlbHMsDQogICAgICAgICAgICAgICdncm91cCc6ICdDb21tYW5kcycsICdsZXZlbCc6IDEsDQogICAgICAgICAgICAgICdoZWxwJyA6ICJHZW5lcmF0ZSBweWxpbnQncyBjb25maWRlbmNlIGxldmVscy4ifSksDQoNCiAgICAgICAgICAgICgnZnVsbC1kb2N1bWVudGF0aW9uJywNCiAgICAgICAgICAgICB7J2FjdGlvbicgOiAnY2FsbGJhY2snLCAnbWV0YXZhcic6ICc8bXNnLWlkPicsDQogICAgICAgICAgICAgICdjYWxsYmFjaycgOiBzZWxmLmNiX2Z1bGxfZG9jdW1lbnRhdGlvbiwNCiAgICAgICAgICAgICAgJ2dyb3VwJzogJ0NvbW1hbmRzJywgJ2xldmVsJzogMSwNCiAgICAgICAgICAgICAgJ2hlbHAnIDogIkdlbmVyYXRlIHB5bGludCdzIGZ1bGwgZG9jdW1lbnRhdGlvbi4ifSksDQoNCiAgICAgICAgICAgICgnZ2VuZXJhdGUtcmNmaWxlJywNCiAgICAgICAgICAgICB7J2FjdGlvbicgOiAnY2FsbGJhY2snLCAnY2FsbGJhY2snIDogc2VsZi5jYl9nZW5lcmF0ZV9jb25maWcsDQogICAgICAgICAgICAgICdncm91cCc6ICdDb21tYW5kcycsDQogICAgICAgICAgICAgICdoZWxwJyA6ICdHZW5lcmF0ZSBhIHNhbXBsZSBjb25maWd1cmF0aW9uIGZpbGUgYWNjb3JkaW5nIHRvICcNCiAgICAgICAgICAgICAgICAgICAgICAgJ3RoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24uIFlvdSBjYW4gcHV0IG90aGVyIG9wdGlvbnMgJw0KICAgICAgICAgICAgICAgICAgICAgICAnYmVmb3JlIHRoaXMgb25lIHRvIGdldCB0aGVtIGluIHRoZSBnZW5lcmF0ZWQgJw0KICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbi4nfSksDQoNCiAgICAgICAgICAgICgnZ2VuZXJhdGUtbWFuJywNCiAgICAgICAgICAgICB7J2FjdGlvbicgOiAnY2FsbGJhY2snLCAnY2FsbGJhY2snIDogc2VsZi5jYl9nZW5lcmF0ZV9tYW5wYWdlLA0KICAgICAgICAgICAgICAnZ3JvdXAnOiAnQ29tbWFuZHMnLA0KICAgICAgICAgICAgICAnaGVscCcgOiAiR2VuZXJhdGUgcHlsaW50J3MgbWFuIHBhZ2UuIiwgJ2hpZGUnOiBUcnVlfSksDQoNCiAgICAgICAgICAgICgnZXJyb3JzLW9ubHknLA0KICAgICAgICAgICAgIHsnYWN0aW9uJyA6ICdjYWxsYmFjaycsICdjYWxsYmFjaycgOiBzZWxmLmNiX2Vycm9yX21vZGUsDQogICAgICAgICAgICAgICdzaG9ydCc6ICdFJywNCiAgICAgICAgICAgICAgJ2hlbHAnIDogJ0luIGVycm9yIG1vZGUsIGNoZWNrZXJzIHdpdGhvdXQgZXJyb3IgbWVzc2FnZXMgYXJlICcNCiAgICAgICAgICAgICAgICAgICAgICAgJ2Rpc2FibGVkIGFuZCBmb3Igb3RoZXJzLCBvbmx5IHRoZSBFUlJPUiBtZXNzYWdlcyBhcmUgJw0KICAgICAgICAgICAgICAgICAgICAgICAnZGlzcGxheWVkLCBhbmQgbm8gcmVwb3J0cyBhcmUgZG9uZSBieSBkZWZhdWx0Lid9KSwNCg0KICAgICAgICAgICAgKCdweTNrJywNCiAgICAgICAgICAgICB7J2FjdGlvbicgOiAnY2FsbGJhY2snLCAnY2FsbGJhY2snIDogc2VsZi5jYl9weXRob24zX3BvcnRpbmdfbW9kZSwNCiAgICAgICAgICAgICAgJ2hlbHAnIDogJ0luIFB5dGhvbiAzIHBvcnRpbmcgbW9kZSwgYWxsIGNoZWNrZXJzIHdpbGwgYmUgJw0KICAgICAgICAgICAgICAgICAgICAgICAnZGlzYWJsZWQgYW5kIG9ubHkgbWVzc2FnZXMgZW1pdHRlZCBieSB0aGUgcG9ydGluZyAnDQogICAgICAgICAgICAgICAgICAgICAgICdjaGVja2VyIHdpbGwgYmUgZGlzcGxheWVkLid9KSwNCg0KICAgICAgICAgICAgKCd2ZXJib3NlJywNCiAgICAgICAgICAgICB7J2FjdGlvbicgOiAnY2FsbGJhY2snLCAnY2FsbGJhY2snIDogc2VsZi5jYl92ZXJib3NlX21vZGUsDQogICAgICAgICAgICAgICdzaG9ydCc6ICd2JywNCiAgICAgICAgICAgICAgJ2hlbHAnIDogJ0luIHZlcmJvc2UgbW9kZSwgZXh0cmEgbm9uLWNoZWNrZXItcmVsYXRlZCBpbmZvICcNCiAgICAgICAgICAgICAgICAgICAgICAgJ3dpbGwgYmUgZGlzcGxheWVkLid9KQ0KDQogICAgICAgICAgICApLCBvcHRpb25fZ3JvdXBzPXNlbGYub3B0aW9uX2dyb3VwcywgcHlsaW50cmM9c2VsZi5fcmNmaWxlKQ0KICAgICAgICAjIHJlZ2lzdGVyIHN0YW5kYXJkIGNoZWNrZXJzDQogICAgICAgIGxpbnRlci5sb2FkX2RlZmF1bHRfcGx1Z2lucygpDQogICAgICAgICMgbG9hZCBjb21tYW5kIGxpbmUgcGx1Z2lucw0KICAgICAgICBsaW50ZXIubG9hZF9wbHVnaW5fbW9kdWxlcyhzZWxmLl9wbHVnaW5zKQ0KICAgICAgICAjIGFkZCBzb21lIGhlbHAgc2VjdGlvbg0KICAgICAgICBsaW50ZXIuYWRkX2hlbHBfc2VjdGlvbignRW52aXJvbm1lbnQgdmFyaWFibGVzJywgY29uZmlnLkVOVl9IRUxQLCBsZXZlbD0xKQ0KICAgICAgICAjIHB5bGludDogZGlzYWJsZT1iYWQtY29udGludWF0aW9uDQogICAgICAgIGxpbnRlci5hZGRfaGVscF9zZWN0aW9uKCdPdXRwdXQnLA0KJ1VzaW5nIHRoZSBkZWZhdWx0IHRleHQgb3V0cHV0LCB0aGUgbWVzc2FnZSBmb3JtYXQgaXMgOiAgICAgICAgICAgICAgICAgICAgICAgICAgXG4nDQonICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbicNCicgICAgICAgIE1FU1NBR0VfVFlQRTogTElORV9OVU06W09CSkVDVDpdIE1FU1NBR0UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuJw0KJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4nDQonVGhlcmUgYXJlIDUga2luZCBvZiBtZXNzYWdlIHR5cGVzIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbicNCicgICAgKiAoQykgY29udmVudGlvbiwgZm9yIHByb2dyYW1taW5nIHN0YW5kYXJkIHZpb2xhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIFxuJw0KJyAgICAqIChSKSByZWZhY3RvciwgZm9yIGJhZCBjb2RlIHNtZWxsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4nDQonICAgICogKFcpIHdhcm5pbmcsIGZvciBweXRob24gc3BlY2lmaWMgcHJvYmxlbXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbicNCicgICAgKiAoRSkgZXJyb3IsIGZvciBwcm9iYWJsZSBidWdzIGluIHRoZSBjb2RlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuJw0KJyAgICAqIChGKSBmYXRhbCwgaWYgYW4gZXJyb3Igb2NjdXJyZWQgd2hpY2ggcHJldmVudGVkIHB5bGludCBmcm9tIGRvaW5nIGZ1cnRoZXJcbicNCidwcm9jZXNzaW5nLlxuJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGxldmVsPTEpDQogICAgICAgIGxpbnRlci5hZGRfaGVscF9zZWN0aW9uKCdPdXRwdXQgc3RhdHVzIGNvZGUnLA0KJ1B5bGludCBzaG91bGQgbGVhdmUgd2l0aCBmb2xsb3dpbmcgc3RhdHVzIGNvZGU6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4nDQonICAgICogMCBpZiBldmVyeXRoaW5nIHdlbnQgZmluZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbicNCicgICAgKiAxIGlmIGEgZmF0YWwgbWVzc2FnZSB3YXMgaXNzdWVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuJw0KJyAgICAqIDIgaWYgYW4gZXJyb3IgbWVzc2FnZSB3YXMgaXNzdWVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4nDQonICAgICogNCBpZiBhIHdhcm5pbmcgbWVzc2FnZSB3YXMgaXNzdWVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbicNCicgICAgKiA4IGlmIGEgcmVmYWN0b3IgbWVzc2FnZSB3YXMgaXNzdWVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuJw0KJyAgICAqIDE2IGlmIGEgY29udmVudGlvbiBtZXNzYWdlIHdhcyBpc3N1ZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4nDQonICAgICogMzIgb24gdXNhZ2UgZXJyb3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbicNCicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuJw0KJ3N0YXR1cyAxIHRvIDE2IHdpbGwgYmUgYml0LU9SZWQgc28geW91IGNhbiBrbm93IHdoaWNoIGRpZmZlcmVudCBjYXRlZ29yaWVzIGhhc1xuJw0KJ2JlZW4gaXNzdWVkIGJ5IGFuYWx5c2luZyBweWxpbnQgb3V0cHV0IHN0YXR1cyBjb2RlXG4nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbD0xKQ0KICAgICAgICAjIHJlYWQgY29uZmlndXJhdGlvbg0KICAgICAgICBsaW50ZXIuZGlzYWJsZSgnSScpDQogICAgICAgIGxpbnRlci5lbmFibGUoJ2MtZXh0ZW5zaW9uLW5vLW1lbWJlcicpDQogICAgICAgIGxpbnRlci5yZWFkX2NvbmZpZ19maWxlKHZlcmJvc2U9c2VsZi52ZXJib3NlKQ0KICAgICAgICBjb25maWdfcGFyc2VyID0gbGludGVyLmNmZ2ZpbGVfcGFyc2VyDQogICAgICAgICMgcnVuIGluaXQgaG9vaywgaWYgcHJlc2VudCwgYmVmb3JlIGxvYWRpbmcgcGx1Z2lucw0KICAgICAgICBpZiBjb25maWdfcGFyc2VyLmhhc19vcHRpb24oJ01BU1RFUicsICdpbml0LWhvb2snKToNCiAgICAgICAgICAgIGNiX2luaXRfaG9vaygnaW5pdC1ob29rJywNCiAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5fdW5xdW90ZShjb25maWdfcGFyc2VyLmdldCgnTUFTVEVSJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5pdC1ob29rJykpKQ0KICAgICAgICAjIGlzIHRoZXJlIHNvbWUgYWRkaXRpb25hbCBwbHVnaW5zIGluIHRoZSBmaWxlIGNvbmZpZ3VyYXRpb24sIGluDQogICAgICAgIGlmIGNvbmZpZ19wYXJzZXIuaGFzX29wdGlvbignTUFTVEVSJywgJ2xvYWQtcGx1Z2lucycpOg0KICAgICAgICAgICAgcGx1Z2lucyA9IHV0aWxzLl9zcGxpdHN0cmlwKA0KICAgICAgICAgICAgICAgIGNvbmZpZ19wYXJzZXIuZ2V0KCdNQVNURVInLCAnbG9hZC1wbHVnaW5zJykpDQogICAgICAgICAgICBsaW50ZXIubG9hZF9wbHVnaW5fbW9kdWxlcyhwbHVnaW5zKQ0KICAgICAgICAjIG5vdyB3ZSBjYW4gbG9hZCBmaWxlIGNvbmZpZyBhbmQgY29tbWFuZCBsaW5lLCBwbHVnaW5zICh3aGljaCBjYW4NCiAgICAgICAgIyBwcm92aWRlIG9wdGlvbnMpIGhhdmUgYmVlbiByZWdpc3RlcmVkDQogICAgICAgIGxpbnRlci5sb2FkX2NvbmZpZ19maWxlKCkNCiAgICAgICAgaWYgcmVwb3J0ZXI6DQogICAgICAgICAgICAjIGlmIGEgY3VzdG9tIHJlcG9ydGVyIGlzIHByb3ZpZGVkIGFzIGFyZ3VtZW50LCBpdCBtYXkgYmUgb3ZlcnJpZGRlbg0KICAgICAgICAgICAgIyBieSBmaWxlIHBhcmFtZXRlcnMsIHNvIHJlLXNldCBpdCBoZXJlLCBidXQgYmVmb3JlIGNvbW1hbmQgbGluZQ0KICAgICAgICAgICAgIyBwYXJzaW5nIHNvIGl0J3Mgc3RpbGwgb3ZlcnJpZGVhYmxlIGJ5IGNvbW1hbmQgbGluZSBvcHRpb24NCiAgICAgICAgICAgIGxpbnRlci5zZXRfcmVwb3J0ZXIocmVwb3J0ZXIpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGFyZ3MgPSBsaW50ZXIubG9hZF9jb21tYW5kX2xpbmVfY29uZmlndXJhdGlvbihhcmdzKQ0KICAgICAgICBleGNlcHQgU3lzdGVtRXhpdCBhcyBleGM6DQogICAgICAgICAgICBpZiBleGMuY29kZSA9PSAyOiAjIGJhZCBvcHRpb25zDQogICAgICAgICAgICAgICAgZXhjLmNvZGUgPSAzMg0KICAgICAgICAgICAgcmFpc2UNCiAgICAgICAgaWYgbm90IGFyZ3M6DQogICAgICAgICAgICBwcmludChsaW50ZXIuaGVscCgpKQ0KICAgICAgICAgICAgc3lzLmV4aXQoMzIpDQoNCiAgICAgICAgaWYgbGludGVyLmNvbmZpZy5qb2JzIDwgMDoNCiAgICAgICAgICAgIHByaW50KCJKb2JzIG51bWJlciAoJWQpIHNob3VsZCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCINCiAgICAgICAgICAgICAgICAgICUgbGludGVyLmNvbmZpZy5qb2JzLCBmaWxlPXN5cy5zdGRlcnIpDQogICAgICAgICAgICBzeXMuZXhpdCgzMikNCiAgICAgICAgaWYgbGludGVyLmNvbmZpZy5qb2JzID4gMSBvciBsaW50ZXIuY29uZmlnLmpvYnMgPT0gMDoNCiAgICAgICAgICAgIGlmIG11bHRpcHJvY2Vzc2luZyBpcyBOb25lOg0KICAgICAgICAgICAgICAgIHByaW50KCJNdWx0aXByb2Nlc3NpbmcgbGlicmFyeSBpcyBtaXNzaW5nLCAiDQogICAgICAgICAgICAgICAgICAgICAgImZhbGxiYWNrIHRvIHNpbmdsZSBwcm9jZXNzIiwgZmlsZT1zeXMuc3RkZXJyKQ0KICAgICAgICAgICAgICAgIGxpbnRlci5zZXRfb3B0aW9uKCJqb2JzIiwgMSkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaWYgbGludGVyLmNvbmZpZy5qb2JzID09IDA6DQogICAgICAgICAgICAgICAgICAgIGxpbnRlci5jb25maWcuam9icyA9IG11bHRpcHJvY2Vzc2luZy5jcHVfY291bnQoKQ0KDQogICAgICAgICMgaW5zZXJ0IGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgdG8gdGhlIHB5dGhvbiBwYXRoIHRvIGhhdmUgYSBjb3JyZWN0DQogICAgICAgICMgYmVoYXZpb3VyDQogICAgICAgIHdpdGggZml4X2ltcG9ydF9wYXRoKGFyZ3MpOg0KICAgICAgICAgICAgbGludGVyLmNoZWNrKGFyZ3MpDQogICAgICAgICAgICBsaW50ZXIuZ2VuZXJhdGVfcmVwb3J0cygpDQogICAgICAgIGlmIGRvX2V4aXQ6DQogICAgICAgICAgICBpZiBsaW50ZXIuY29uZmlnLmV4aXRfemVybzoNCiAgICAgICAgICAgICAgICBzeXMuZXhpdCgwKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBzeXMuZXhpdChzZWxmLmxpbnRlci5tc2dfc3RhdHVzKQ0KDQogICAgZGVmIGNiX3NldF9yY2ZpbGUoc2VsZiwgbmFtZSwgdmFsdWUpOg0KICAgICAgICAiIiJjYWxsYmFjayBmb3Igb3B0aW9uIHByZXByb2Nlc3NpbmcgKGkuZS4gYmVmb3JlIG9wdGlvbiBwYXJzaW5nKSIiIg0KICAgICAgICBzZWxmLl9yY2ZpbGUgPSB2YWx1ZQ0KDQogICAgZGVmIGNiX2FkZF9wbHVnaW5zKHNlbGYsIG5hbWUsIHZhbHVlKToNCiAgICAgICAgIiIiY2FsbGJhY2sgZm9yIG9wdGlvbiBwcmVwcm9jZXNzaW5nIChpLmUuIGJlZm9yZSBvcHRpb24gcGFyc2luZykiIiINCiAgICAgICAgc2VsZi5fcGx1Z2lucy5leHRlbmQodXRpbHMuX3NwbGl0c3RyaXAodmFsdWUpKQ0KDQogICAgZGVmIGNiX2Vycm9yX21vZGUoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgIiIiZXJyb3IgbW9kZToNCiAgICAgICAgKiBkaXNhYmxlIGFsbCBidXQgZXJyb3IgbWVzc2FnZXMNCiAgICAgICAgKiBkaXNhYmxlIHRoZSAnbWlzY2VsbGFuZW91cycgY2hlY2tlciB3aGljaCBjYW4gYmUgc2FmZWx5IGRlYWN0aXZhdGVkIGluDQogICAgICAgICAgZGVidWcNCiAgICAgICAgKiBkaXNhYmxlIHJlcG9ydHMNCiAgICAgICAgKiBkbyBub3Qgc2F2ZSBleGVjdXRpb24gaW5mb3JtYXRpb24NCiAgICAgICAgIiIiDQogICAgICAgIHNlbGYubGludGVyLmVycm9yX21vZGUoKQ0KDQogICAgZGVmIGNiX2dlbmVyYXRlX2NvbmZpZyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICAiIiJvcHRpayBjYWxsYmFjayBmb3Igc2FtcGxlIGNvbmZpZyBmaWxlIGdlbmVyYXRpb24iIiINCiAgICAgICAgc2VsZi5saW50ZXIuZ2VuZXJhdGVfY29uZmlnKHNraXBzZWN0aW9ucz0oJ0NPTU1BTkRTJywpKQ0KICAgICAgICBzeXMuZXhpdCgwKQ0KDQogICAgZGVmIGNiX2dlbmVyYXRlX21hbnBhZ2Uoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgIiIib3B0aWsgY2FsbGJhY2sgZm9yIHNhbXBsZSBjb25maWcgZmlsZSBnZW5lcmF0aW9uIiIiDQogICAgICAgIGZyb20gcHlsaW50IGltcG9ydCBfX3BrZ2luZm9fXw0KICAgICAgICBzZWxmLmxpbnRlci5nZW5lcmF0ZV9tYW5wYWdlKF9fcGtnaW5mb19fKQ0KICAgICAgICBzeXMuZXhpdCgwKQ0KDQogICAgZGVmIGNiX2hlbHBfbWVzc2FnZShzZWxmLCBvcHRpb24sIG9wdG5hbWUsIHZhbHVlLCBwYXJzZXIpOg0KICAgICAgICAiIiJvcHRpayBjYWxsYmFjayBmb3IgcHJpbnRpbmcgc29tZSBoZWxwIGFib3V0IGEgcGFydGljdWxhciBtZXNzYWdlIiIiDQogICAgICAgIHNlbGYubGludGVyLm1zZ3Nfc3RvcmUuaGVscF9tZXNzYWdlKHV0aWxzLl9zcGxpdHN0cmlwKHZhbHVlKSkNCiAgICAgICAgc3lzLmV4aXQoMCkNCg0KICAgIGRlZiBjYl9mdWxsX2RvY3VtZW50YXRpb24oc2VsZiwgb3B0aW9uLCBvcHRuYW1lLCB2YWx1ZSwgcGFyc2VyKToNCiAgICAgICAgIiIib3B0aWsgY2FsbGJhY2sgZm9yIHByaW50aW5nIGZ1bGwgZG9jdW1lbnRhdGlvbiIiIg0KICAgICAgICBzZWxmLmxpbnRlci5wcmludF9mdWxsX2RvY3VtZW50YXRpb24oKQ0KICAgICAgICBzeXMuZXhpdCgwKQ0KDQogICAgZGVmIGNiX2xpc3RfbWVzc2FnZXMoc2VsZiwgb3B0aW9uLCBvcHRuYW1lLCB2YWx1ZSwgcGFyc2VyKTogIyBGSVhNRQ0KICAgICAgICAiIiJvcHRpayBjYWxsYmFjayBmb3IgcHJpbnRpbmcgYXZhaWxhYmxlIG1lc3NhZ2VzIiIiDQogICAgICAgIHNlbGYubGludGVyLm1zZ3Nfc3RvcmUubGlzdF9tZXNzYWdlcygpDQogICAgICAgIHN5cy5leGl0KDApDQoNCiAgICBkZWYgY2JfcHl0aG9uM19wb3J0aW5nX21vZGUoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgIiIiQWN0aXZhdGUgb25seSB0aGUgcHl0aG9uMyBwb3J0aW5nIGNoZWNrZXIuIiIiDQogICAgICAgIHNlbGYubGludGVyLnB5dGhvbjNfcG9ydGluZ19tb2RlKCkNCg0KICAgIGRlZiBjYl92ZXJib3NlX21vZGUoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgc2VsZi52ZXJib3NlID0gVHJ1ZQ0KDQpkZWYgY2JfbGlzdF9jb25maWRlbmNlX2xldmVscyhvcHRpb24sIG9wdG5hbWUsIHZhbHVlLCBwYXJzZXIpOg0KICAgIGZvciBsZXZlbCBpbiBpbnRlcmZhY2VzLkNPTkZJREVOQ0VfTEVWRUxTOg0KICAgICAgICBwcmludCgnJS0xOHM6ICVzJyAlIGxldmVsKQ0KICAgIHN5cy5leGl0KDApDQoNCmRlZiBjYl9pbml0X2hvb2sob3B0bmFtZSwgdmFsdWUpOg0KICAgICIiImV4ZWMgYXJiaXRyYXJ5IGNvZGUgdG8gc2V0IHN5cy5wYXRoIGZvciBpbnN0YW5jZSIiIg0KICAgIGV4ZWModmFsdWUpICMgcHlsaW50OiBkaXNhYmxlPWV4ZWMtdXNlZA0KDQoNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgUnVuKHN5cy5hcmd2WzE6XSkNCg=="
          },
          "hashes": [
            {
              "value": "35F451A49962E22371684DCF7080FB3E",
              "algorithm": "md5"
            },
            {
              "value": "865B502B03F70AE47A93D78D72083EB4E7435571",
              "algorithm": "sha-1"
            },
            {
              "value": "3CF997B67112665ED7A67F5F75BC27992EEE681017413DC19498FAB36E664007",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/testutils.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "6A3DF28B3AABE1A75D78D05A21D225AE",
              "algorithm": "md5"
            },
            {
              "value": "F61F2EE73C2156322D411107E99D89C283554076",
              "algorithm": "sha-1"
            },
            {
              "value": "8E17A01A98204E11665DEE0F49C40BA2161CFEFBCF69A52745DE7D9AFD161C5F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/utils.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDA2LTIwMTQgTE9HSUxBQiBTLkEuIChQYXJpcywgRlJBTkNFKSA8Y29udGFjdEBsb2dpbGFiLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMDkgVmluY2VudA0KIyBDb3B5cmlnaHQgKGMpIDIwMDkgTWFkcyBLaWlsZXJpY2ggPG1hZHNAa2lpbGVyaWNoLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDEyLTIwMTQgR29vZ2xlLCBJbmMuDQojIENvcHlyaWdodCAoYykgMjAxNC0yMDE4IENsYXVkaXUgUG9wYSA8cGNtYW50aWNvcmVAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSBNaWNoYWwgTm93aWtvd3NraSA8Z29kZnJ5ZEBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNCBMQ0QgNDcgPGxjZDA0N0BnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNCBCcmV0dCBDYW5ub24gPGJyZXR0QHB5dGhvbi5vcmc+DQojIENvcHlyaWdodCAoYykgMjAxNCBBcnVuIFBlcnNhdWQgPGFydW5AbnViYXRpLm5ldD4NCiMgQ29weXJpZ2h0IChjKSAyMDE0IERhbWllbiBOb3pheSA8ZGFtaWVuLm5vemF5QGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IEFydSBTYWhuaSA8YXJ1c2FobmlAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgRmxvcmlhbiBCcnVoaW4gPG1lQHRoZS1jb21waWxlci5vcmc+DQojIENvcHlyaWdodCAoYykgMjAxNSBTaW11IFRvbmkgPHNpbXV0b25pQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IElvbmVsIENyaXN0aWFuIE1hcmllcyA8Y29udGFjdEBpb25lbG1jLnJvPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgxYF1a2FzeiBSb2dhbHNraSA8cm9nYWxza2kuOTFAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgTW9pc2VzIExvcGV6IDxtb3lsb3AyNjBAdmF1eG9vLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE2IEdsZW5uIE1hdHRoZXdzIDxnbGVubkBlLWRhZC5uZXQ+DQojIENvcHlyaWdodCAoYykgMjAxNiBHbGVubiBNYXR0aGV3cyA8Z2xtYXR0aGVAY2lzY28uY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgQXNobGV5IFdoZXR0ZXIgPGFzaGxleUBhd2hldHRlci5jby51az4NCiMgQ29weXJpZ2h0IChjKSAyMDE2IHhtby1vZG9vIDx4bW8tb2Rvb0B1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IGhpcHBvOTEgPGd1aWxsYXVtZS5wZWlsbGV4QGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3IFBpZXJyZSBTYXNzb3VsYXMgPHBpZXJyZS5zYXNzb3VsYXNAY2VhLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTcgQnJ5Y2UgR3VpbnRhIDxicnljZS5wYXVsLmd1aW50YUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNyBDaHJpcyBMYW1iIDxjaHJpc0BjaHJpcy1sYW1iLmNvLnVrPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTcgQW50aG9ueSBTb3R0aWxlIDxhc290dGlsZUB1bWljaC5lZHU+DQojIENvcHlyaWdodCAoYykgMjAxNyBUaG9tYXMgSGlzY2ggPHQuaGlzY2hAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTcgTWlraGFpbCBGZXNlbmtvIDxwcm9nZ2dhQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3IENyYWlnIENpdHJvIDxjcmFpZ2NpdHJvQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3IFZpbGxlIFNreXR0w6QgPHZpbGxlLnNreXR0YUBpa2kuZmk+DQojIENvcHlyaWdodCAoYykgMjAxOCBzc29sYW5raSA8c3VzaG9iaGl0c29sYW5raUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBTdXNob2JoaXQgPDMxOTg3NzY5K3N1c2hvYmhpdDI3QHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IFBpZXJyZSBTYXNzb3VsYXMgPHBpZXJyZS5zYXNzb3VsYXNAd2lzZWJpbS5mcj4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IFJldmVyYiBDIDxyZXZlcmJjQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IE5pY2sgRHJvemQgPG5pY2hvbGFzZHJvemRAZ21haWwuY29tPg0KDQojIExpY2Vuc2VkIHVuZGVyIHRoZSBHUEw6IGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2dwbC0yLjAuaHRtbA0KIyBGb3IgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL1B5Q1FBL3B5bGludC9ibG9iL21hc3Rlci9DT1BZSU5HDQoNCiIiInNvbWUgdmFyaW91cyB1dGlsaXRpZXMgYW5kIGhlbHBlciBjbGFzc2VzLCBtb3N0IG9mIHRoZW0gdXNlZCBpbiB0aGUNCm1haW4gcHlsaW50IGNsYXNzDQoiIiINCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgcHJpbnRfZnVuY3Rpb24NCg0KaW1wb3J0IGNvZGVjcw0KaW1wb3J0IGNvbGxlY3Rpb25zDQpmcm9tIGluc3BlY3QgaW1wb3J0IGNsZWFuZG9jDQppbXBvcnQgb3MNCmZyb20gb3MucGF0aCBpbXBvcnQgZGlybmFtZSwgYmFzZW5hbWUsIHNwbGl0ZXh0LCBleGlzdHMsIGlzZGlyLCBqb2luLCBub3JtcGF0aA0KaW1wb3J0IHJlDQppbXBvcnQgc3lzDQppbXBvcnQgdG9rZW5pemUNCmltcG9ydCB3YXJuaW5ncw0KaW1wb3J0IHRleHR3cmFwDQoNCmZyb20gYXN0cm9pZCBpbXBvcnQgbm9kZXMsIE1vZHVsZQ0KZnJvbSBhc3Ryb2lkIGltcG9ydCBtb2R1dGlscw0KDQpmcm9tIHB5bGludC5pbnRlcmZhY2VzIGltcG9ydCBJUmF3Q2hlY2tlciwgSVRva2VuQ2hlY2tlciwgVU5ERUZJTkVELCBpbXBsZW1lbnRzDQpmcm9tIHB5bGludC5yZXBvcnRlcnMudXJlcG9ydHMubm9kZXMgaW1wb3J0IFNlY3Rpb24NCmZyb20gcHlsaW50LmV4Y2VwdGlvbnMgaW1wb3J0IEludmFsaWRNZXNzYWdlRXJyb3IsIFVua25vd25NZXNzYWdlRXJyb3IsIEVtcHR5UmVwb3J0RXJyb3INCg0KDQpNU0dfVFlQRVMgPSB7DQogICAgJ0knIDogJ2luZm8nLA0KICAgICdDJyA6ICdjb252ZW50aW9uJywNCiAgICAnUicgOiAncmVmYWN0b3InLA0KICAgICdXJyA6ICd3YXJuaW5nJywNCiAgICAnRScgOiAnZXJyb3InLA0KICAgICdGJyA6ICdmYXRhbCcNCiAgICB9DQpNU0dfVFlQRVNfTE9ORyA9IHt2OiBrIGZvciBrLCB2IGluIE1TR19UWVBFUy5pdGVtcygpfQ0KDQpNU0dfVFlQRVNfU1RBVFVTID0gew0KICAgICdJJyA6IDAsDQogICAgJ0MnIDogMTYsDQogICAgJ1InIDogOCwNCiAgICAnVycgOiA0LA0KICAgICdFJyA6IDIsDQogICAgJ0YnIDogMQ0KICAgIH0NCg0KX01TR19PUkRFUiA9ICdFV1JDSUYnDQpNU0dfU1RBVEVfU0NPUEVfQ09ORklHID0gMA0KTVNHX1NUQVRFX1NDT1BFX01PRFVMRSA9IDENCk1TR19TVEFURV9DT05GSURFTkNFID0gMg0KDQojIEFsbG93IHN0b3BwaW5nIGFmdGVyIHRoZSBmaXJzdCBzZW1pY29sb24gZW5jb3VudGVyZWQsDQojIHNvIHRoYXQgYW4gb3B0aW9uIGNhbiBiZSBjb250aW51ZWQgd2l0aCB0aGUgcmVhc29ucw0KIyB3aHkgaXQgaXMgYWN0aXZlIG9yIGRpc2FibGVkLg0KT1BUSU9OX1JHWCA9IHJlLmNvbXBpbGUocidccyojLipcYnB5bGludDpccyooW147XSspO3swLDF9JykNCg0KIyBUaGUgbGluZS9ub2RlIGRpc3RpbmN0aW9uIGRvZXMgbm90IGFwcGx5IHRvIGZhdGFsIGVycm9ycyBhbmQgcmVwb3J0cy4NCl9TQ09QRV9FWEVNUFQgPSAnRlInDQoNCmNsYXNzIFdhcm5pbmdTY29wZToNCiAgICBMSU5FID0gJ2xpbmUtYmFzZWQtbXNnJw0KICAgIE5PREUgPSAnbm9kZS1iYXNlZC1tc2cnDQoNCl9Nc2dCYXNlID0gY29sbGVjdGlvbnMubmFtZWR0dXBsZSgNCiAgICAnX01zZ0Jhc2UnLA0KICAgIFsnbXNnX2lkJywgJ3N5bWJvbCcsICdtc2cnLCAnQycsICdjYXRlZ29yeScsICdjb25maWRlbmNlJywNCiAgICAgJ2Fic3BhdGgnLCAncGF0aCcsICdtb2R1bGUnLCAnb2JqJywgJ2xpbmUnLCAnY29sdW1uJ10pDQoNCg0KY2xhc3MgTWVzc2FnZShfTXNnQmFzZSk6DQogICAgIiIiVGhpcyBjbGFzcyByZXByZXNlbnQgYSBtZXNzYWdlIHRvIGJlIGlzc3VlZCBieSB0aGUgcmVwb3J0ZXJzIiIiDQogICAgZGVmIF9fbmV3X18oY2xzLCBtc2dfaWQsIHN5bWJvbCwgbG9jYXRpb24sIG1zZywgY29uZmlkZW5jZSk6DQogICAgICAgIHJldHVybiBfTXNnQmFzZS5fX25ld19fKA0KICAgICAgICAgICAgY2xzLCBtc2dfaWQsIHN5bWJvbCwgbXNnLCBtc2dfaWRbMF0sIE1TR19UWVBFU1ttc2dfaWRbMF1dLA0KICAgICAgICAgICAgY29uZmlkZW5jZSwgKmxvY2F0aW9uKQ0KDQogICAgZGVmIGZvcm1hdChzZWxmLCB0ZW1wbGF0ZSk6DQogICAgICAgICIiIkZvcm1hdCB0aGUgbWVzc2FnZSBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIHRlbXBsYXRlLg0KDQogICAgICAgIFRoZSB0ZW1wbGF0ZSBmb3JtYXQgaXMgdGhlIG9uZSBvZiB0aGUgZm9ybWF0IG1ldGhvZCA6DQogICAgICAgIGNmLiBodHRwOi8vZG9jcy5weXRob24ub3JnLzIvbGlicmFyeS9zdHJpbmcuaHRtbCNmb3JtYXRzdHJpbmdzDQogICAgICAgICIiIg0KICAgICAgICAjIEZvciBzb21lIHJlYXNvbiwgX2FzZGljdCBvbiBkZXJpdmVkIG5hbWVkdHVwbGVzIGRvZXMgbm90IHdvcmsgd2l0aA0KICAgICAgICAjIFB5dGhvbiAzLjQuIE5lZWRzIHNvbWUgaW52ZXN0aWdhdGlvbi4NCiAgICAgICAgcmV0dXJuIHRlbXBsYXRlLmZvcm1hdCgqKmRpY3QoemlwKHNlbGYuX2ZpZWxkcywgc2VsZikpKQ0KDQoNCmRlZiBnZXRfbW9kdWxlX2FuZF9mcmFtZWlkKG5vZGUpOg0KICAgICIiInJldHVybiB0aGUgbW9kdWxlIG5hbWUgYW5kIHRoZSBmcmFtZSBpZCBpbiB0aGUgbW9kdWxlIiIiDQogICAgZnJhbWUgPSBub2RlLmZyYW1lKCkNCiAgICBtb2R1bGUsIG9iaiA9ICcnLCBbXQ0KICAgIHdoaWxlIGZyYW1lOg0KICAgICAgICBpZiBpc2luc3RhbmNlKGZyYW1lLCBNb2R1bGUpOg0KICAgICAgICAgICAgbW9kdWxlID0gZnJhbWUubmFtZQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgb2JqLmFwcGVuZChnZXRhdHRyKGZyYW1lLCAnbmFtZScsICc8bGFtYmRhPicpKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmcmFtZSA9IGZyYW1lLnBhcmVudC5mcmFtZSgpDQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoNCiAgICAgICAgICAgIGZyYW1lID0gTm9uZQ0KICAgIG9iai5yZXZlcnNlKCkNCiAgICByZXR1cm4gbW9kdWxlLCAnLicuam9pbihvYmopDQoNCmRlZiBjYXRlZ29yeV9pZChjaWQpOg0KICAgIGNpZCA9IGNpZC51cHBlcigpDQogICAgaWYgY2lkIGluIE1TR19UWVBFUzoNCiAgICAgICAgcmV0dXJuIGNpZA0KICAgIHJldHVybiBNU0dfVFlQRVNfTE9ORy5nZXQoY2lkKQ0KDQpkZWYgc2FmZV9kZWNvZGUobGluZSwgZW5jb2RpbmcsICphcmdzLCAqKmt3YXJncyk6DQogICAgJycncmV0dXJuIGRlY29kZWQgbGluZSBmcm9tIGVuY29kaW5nIG9yIGRlY29kZSB3aXRoIGRlZmF1bHQgZW5jb2RpbmcnJycNCiAgICB0cnk6DQogICAgICAgIHJldHVybiBsaW5lLmRlY29kZShlbmNvZGluZyBvciBzeXMuZ2V0ZGVmYXVsdGVuY29kaW5nKCksICphcmdzLCAqKmt3YXJncykNCiAgICBleGNlcHQgTG9va3VwRXJyb3I6DQogICAgICAgIHJldHVybiBsaW5lLmRlY29kZShzeXMuZ2V0ZGVmYXVsdGVuY29kaW5nKCksICphcmdzLCAqKmt3YXJncykNCg0KZGVmIGRlY29kaW5nX3N0cmVhbShzdHJlYW0sIGVuY29kaW5nLCBlcnJvcnM9J3N0cmljdCcpOg0KICAgIHRyeToNCiAgICAgICAgcmVhZGVyX2NscyA9IGNvZGVjcy5nZXRyZWFkZXIoZW5jb2Rpbmcgb3Igc3lzLmdldGRlZmF1bHRlbmNvZGluZygpKQ0KICAgIGV4Y2VwdCBMb29rdXBFcnJvcjoNCiAgICAgICAgcmVhZGVyX2NscyA9IGNvZGVjcy5nZXRyZWFkZXIoc3lzLmdldGRlZmF1bHRlbmNvZGluZygpKQ0KICAgIHJldHVybiByZWFkZXJfY2xzKHN0cmVhbSwgZXJyb3JzKQ0KDQoNCmRlZiB0b2tlbml6ZV9tb2R1bGUobW9kdWxlKToNCiAgICB3aXRoIG1vZHVsZS5zdHJlYW0oKSBhcyBzdHJlYW06DQogICAgICAgIHJlYWRsaW5lID0gc3RyZWFtLnJlYWRsaW5lDQogICAgICAgIHJldHVybiBsaXN0KHRva2VuaXplLnRva2VuaXplKHJlYWRsaW5lKSkNCg0KZGVmIGJ1aWxkX21lc3NhZ2VfZGVmKGNoZWNrZXIsIG1zZ2lkLCBtc2dfdHVwbGUpOg0KICAgIGlmIGltcGxlbWVudHMoY2hlY2tlciwgKElSYXdDaGVja2VyLCBJVG9rZW5DaGVja2VyKSk6DQogICAgICAgIGRlZmF1bHRfc2NvcGUgPSBXYXJuaW5nU2NvcGUuTElORQ0KICAgIGVsc2U6DQogICAgICAgIGRlZmF1bHRfc2NvcGUgPSBXYXJuaW5nU2NvcGUuTk9ERQ0KICAgIG9wdGlvbnMgPSB7fQ0KICAgIGlmIGxlbihtc2dfdHVwbGUpID4gMzoNCiAgICAgICAgKG1zZywgc3ltYm9sLCBkZXNjciwgb3B0aW9ucykgPSBtc2dfdHVwbGUNCiAgICBlbGlmIGxlbihtc2dfdHVwbGUpID4gMjoNCiAgICAgICAgKG1zZywgc3ltYm9sLCBkZXNjcikgPSBtc2dfdHVwbGUNCiAgICBlbHNlOg0KICAgICAgICAjIG1lc3NhZ2VzIHNob3VsZCBoYXZlIGEgc3ltYm9sLCBidXQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkNCiAgICAgICAgIyB0aGV5IG1heSBub3QuDQogICAgICAgIChtc2csIGRlc2NyKSA9IG1zZ190dXBsZQ0KICAgICAgICB3YXJuaW5ncy53YXJuKCJbcHlsaW50IDAuMjZdIGRlc2NyaXB0aW9uIG9mIG1lc3NhZ2UgJXMgZG9lc24ndCBpbmNsdWRlICINCiAgICAgICAgICAgICAgICAgICAgICAiYSBzeW1ib2xpYyBuYW1lIiAlIG1zZ2lkLCBEZXByZWNhdGlvbldhcm5pbmcpDQogICAgICAgIHN5bWJvbCA9IE5vbmUNCiAgICBvcHRpb25zLnNldGRlZmF1bHQoJ3Njb3BlJywgZGVmYXVsdF9zY29wZSkNCiAgICByZXR1cm4gTWVzc2FnZURlZmluaXRpb24oY2hlY2tlciwgbXNnaWQsIG1zZywgZGVzY3IsIHN5bWJvbCwgKipvcHRpb25zKQ0KDQoNCmNsYXNzIE1lc3NhZ2VEZWZpbml0aW9uOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjaGVja2VyLCBtc2dpZCwgbXNnLCBkZXNjciwgc3ltYm9sLCBzY29wZSwNCiAgICAgICAgICAgICAgICAgbWludmVyc2lvbj1Ob25lLCBtYXh2ZXJzaW9uPU5vbmUsIG9sZF9uYW1lcz1Ob25lKToNCiAgICAgICAgc2VsZi5jaGVja2VyID0gY2hlY2tlcg0KICAgICAgICBpZiBsZW4obXNnaWQpICE9IDU6DQogICAgICAgICAgICByYWlzZSBJbnZhbGlkTWVzc2FnZUVycm9yKCdJbnZhbGlkIG1lc3NhZ2UgaWQgJXInICUgbXNnaWQpDQogICAgICAgIGlmIG5vdCBtc2dpZFswXSBpbiBNU0dfVFlQRVM6DQogICAgICAgICAgICByYWlzZSBJbnZhbGlkTWVzc2FnZUVycm9yKA0KICAgICAgICAgICAgICAgICdCYWQgbWVzc2FnZSB0eXBlICVzIGluICVyJyAlIChtc2dpZFswXSwgbXNnaWQpKQ0KICAgICAgICBzZWxmLm1zZ2lkID0gbXNnaWQNCiAgICAgICAgc2VsZi5tc2cgPSBtc2cNCiAgICAgICAgc2VsZi5kZXNjciA9IGRlc2NyDQogICAgICAgIHNlbGYuc3ltYm9sID0gc3ltYm9sDQogICAgICAgIHNlbGYuc2NvcGUgPSBzY29wZQ0KICAgICAgICBzZWxmLm1pbnZlcnNpb24gPSBtaW52ZXJzaW9uDQogICAgICAgIHNlbGYubWF4dmVyc2lvbiA9IG1heHZlcnNpb24NCiAgICAgICAgc2VsZi5vbGRfbmFtZXMgPSBvbGRfbmFtZXMgb3IgW10NCg0KICAgIGRlZiBfX3JlcHJfXyhzZWxmKToNCiAgICAgICAgcmV0dXJuICJNZXNzYWdlRGVmaW5pdGlvbjp7fSIuZm9ybWF0KHNlbGYuX19kaWN0X18pDQoNCiAgICBkZWYgbWF5X2JlX2VtaXR0ZWQoc2VsZik6DQogICAgICAgICIiInJldHVybiBUcnVlIGlmIG1lc3NhZ2UgbWF5IGJlIGVtaXR0ZWQgdXNpbmcgdGhlIGN1cnJlbnQgaW50ZXJwcmV0ZXIiIiINCiAgICAgICAgaWYgc2VsZi5taW52ZXJzaW9uIGlzIG5vdCBOb25lIGFuZCBzZWxmLm1pbnZlcnNpb24gPiBzeXMudmVyc2lvbl9pbmZvOg0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgICAgIGlmIHNlbGYubWF4dmVyc2lvbiBpcyBub3QgTm9uZSBhbmQgc2VsZi5tYXh2ZXJzaW9uIDw9IHN5cy52ZXJzaW9uX2luZm86DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgcmV0dXJuIFRydWUNCg0KICAgIGRlZiBmb3JtYXRfaGVscChzZWxmLCBjaGVja2VycmVmPUZhbHNlKToNCiAgICAgICAgIiIicmV0dXJuIHRoZSBoZWxwIHN0cmluZyBmb3IgdGhlIGdpdmVuIG1lc3NhZ2UgaWQiIiINCiAgICAgICAgZGVzYyA9IHNlbGYuZGVzY3INCiAgICAgICAgaWYgY2hlY2tlcnJlZjoNCiAgICAgICAgICAgIGRlc2MgKz0gJyBUaGlzIG1lc3NhZ2UgYmVsb25ncyB0byB0aGUgJXMgY2hlY2tlci4nICUgXA0KICAgICAgICAgICAgICAgICAgIHNlbGYuY2hlY2tlci5uYW1lDQogICAgICAgIHRpdGxlID0gc2VsZi5tc2cNCiAgICAgICAgaWYgc2VsZi5zeW1ib2w6DQogICAgICAgICAgICBtc2dpZCA9ICclcyAoJXMpJyAlIChzZWxmLnN5bWJvbCwgc2VsZi5tc2dpZCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIG1zZ2lkID0gc2VsZi5tc2dpZA0KICAgICAgICBpZiBzZWxmLm1pbnZlcnNpb24gb3Igc2VsZi5tYXh2ZXJzaW9uOg0KICAgICAgICAgICAgcmVzdHIgPSBbXQ0KICAgICAgICAgICAgaWYgc2VsZi5taW52ZXJzaW9uOg0KICAgICAgICAgICAgICAgIHJlc3RyLmFwcGVuZCgnPCAlcycgJSAnLicuam9pbihbc3RyKG4pIGZvciBuIGluIHNlbGYubWludmVyc2lvbl0pKQ0KICAgICAgICAgICAgaWYgc2VsZi5tYXh2ZXJzaW9uOg0KICAgICAgICAgICAgICAgIHJlc3RyLmFwcGVuZCgnPj0gJXMnICUgJy4nLmpvaW4oW3N0cihuKSBmb3IgbiBpbiBzZWxmLm1heHZlcnNpb25dKSkNCiAgICAgICAgICAgIHJlc3RyID0gJyBvciAnLmpvaW4ocmVzdHIpDQogICAgICAgICAgICBpZiBjaGVja2VycmVmOg0KICAgICAgICAgICAgICAgIGRlc2MgKz0gIiBJdCBjYW4ndCBiZSBlbWl0dGVkIHdoZW4gdXNpbmcgUHl0aG9uICVzLiIgJSByZXN0cg0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBkZXNjICs9ICIgVGhpcyBtZXNzYWdlIGNhbid0IGJlIGVtaXR0ZWQgd2hlbiB1c2luZyBQeXRob24gJXMuIiAlIHJlc3RyDQogICAgICAgIGRlc2MgPSBfbm9ybWFsaXplX3RleHQoJyAnLmpvaW4oZGVzYy5zcGxpdCgpKSwgaW5kZW50PScgICcpDQogICAgICAgIGlmIHRpdGxlICE9ICclcyc6DQogICAgICAgICAgICB0aXRsZSA9IHRpdGxlLnNwbGl0bGluZXMoKVswXQ0KDQogICAgICAgICAgICByZXR1cm4gJzolczogKiVzKlxuJXMnICUgKG1zZ2lkLCB0aXRsZS5yc3RyaXAoIiAiKSwgZGVzYykNCiAgICAgICAgcmV0dXJuICc6JXM6XG4lcycgJSAobXNnaWQsIGRlc2MpDQoNCg0KY2xhc3MgTWVzc2FnZXNIYW5kbGVyTWl4SW46DQogICAgIiIiYSBtaXgtaW4gY2xhc3MgY29udGFpbmluZyBhbGwgdGhlIG1lc3NhZ2VzIHJlbGF0ZWQgbWV0aG9kcyBmb3IgdGhlIG1haW4NCiAgICBsaW50IGNsYXNzDQogICAgIiIiDQogICAgX19ieV9pZF9tYW5hZ2VkX21zZ3MgPSBbXQ0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLl9tc2dzX3N0YXRlID0ge30NCiAgICAgICAgc2VsZi5tc2dfc3RhdHVzID0gMA0KDQogICAgZGVmIF9jaGVja2VyX21lc3NhZ2VzKHNlbGYsIGNoZWNrZXIpOg0KICAgICAgICBmb3Iga25vd25fY2hlY2tlciBpbiBzZWxmLl9jaGVja2Vyc1tjaGVja2VyLmxvd2VyKCldOg0KICAgICAgICAgICAgZm9yIG1zZ2lkIGluIGtub3duX2NoZWNrZXIubXNnczoNCiAgICAgICAgICAgICAgICB5aWVsZCBtc2dpZA0KDQogICAgQGNsYXNzbWV0aG9kDQogICAgZGVmIGNsZWFyX2J5X2lkX21hbmFnZWRfbXNncyhjbHMpOg0KICAgICAgICBjbHMuX19ieV9pZF9tYW5hZ2VkX21zZ3MuY2xlYXIoKQ0KDQogICAgQGNsYXNzbWV0aG9kDQogICAgZGVmIGdldF9ieV9pZF9tYW5hZ2VkX21zZ3MoY2xzKToNCiAgICAgICAgcmV0dXJuIGNscy5fX2J5X2lkX21hbmFnZWRfbXNncw0KDQogICAgZGVmIF9yZWdpc3Rlcl9ieV9pZF9tYW5hZ2VkX21zZyhzZWxmLCBtc2dpZCwgbGluZSwgaXNfZGlzYWJsZWQ9VHJ1ZSk6DQogICAgICAgICIiIklmIHRoZSBtc2dpZCBpcyBhIG51bWVyaWMgb25lLCB0aGVuIHJlZ2lzdGVyIGl0IHRvIGluZm9ybSB0aGUgdXNlcg0KICAgICAgICBpdCBjb3VsZCBmdXJuaXNoIGluc3RlYWQgYSBzeW1ib2xpYyBtc2dpZC4iIiINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgbXNnID0gc2VsZi5tc2dzX3N0b3JlLmdldF9tZXNzYWdlX2RlZmluaXRpb24obXNnaWQpDQogICAgICAgICAgICBpZiBtc2dpZCA9PSBtc2cubXNnaWQ6DQogICAgICAgICAgICAgICAgTWVzc2FnZXNIYW5kbGVyTWl4SW4uX19ieV9pZF9tYW5hZ2VkX21zZ3MuYXBwZW5kKA0KICAgICAgICAgICAgICAgICAgICAoc2VsZi5jdXJyZW50X25hbWUsIG1zZy5tc2dpZCwgbXNnLnN5bWJvbCwgbGluZSwgaXNfZGlzYWJsZWQpKQ0KICAgICAgICBleGNlcHQgVW5rbm93bk1lc3NhZ2VFcnJvcjoNCiAgICAgICAgICAgIHBhc3MNCg0KICAgIGRlZiBkaXNhYmxlKHNlbGYsIG1zZ2lkLCBzY29wZT0ncGFja2FnZScsIGxpbmU9Tm9uZSwgaWdub3JlX3Vua25vd249RmFsc2UpOg0KICAgICAgICAiIiJkb24ndCBvdXRwdXQgbWVzc2FnZSBvZiB0aGUgZ2l2ZW4gaWQiIiINCiAgICAgICAgc2VsZi5fc2V0X21zZ19zdGF0dXMobXNnaWQsIGVuYWJsZT1GYWxzZSwgc2NvcGU9c2NvcGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU9bGluZSwgaWdub3JlX3Vua25vd249aWdub3JlX3Vua25vd24pDQogICAgICAgIHNlbGYuX3JlZ2lzdGVyX2J5X2lkX21hbmFnZWRfbXNnKG1zZ2lkLCBsaW5lKQ0KDQogICAgZGVmIGVuYWJsZShzZWxmLCBtc2dpZCwgc2NvcGU9J3BhY2thZ2UnLCBsaW5lPU5vbmUsIGlnbm9yZV91bmtub3duPUZhbHNlKToNCiAgICAgICAgIiIicmVlbmFibGUgbWVzc2FnZSBvZiB0aGUgZ2l2ZW4gaWQiIiINCiAgICAgICAgc2VsZi5fc2V0X21zZ19zdGF0dXMobXNnaWQsIGVuYWJsZT1UcnVlLCBzY29wZT1zY29wZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZT1saW5lLCBpZ25vcmVfdW5rbm93bj1pZ25vcmVfdW5rbm93bikNCiAgICAgICAgc2VsZi5fcmVnaXN0ZXJfYnlfaWRfbWFuYWdlZF9tc2cobXNnaWQsIGxpbmUsIGlzX2Rpc2FibGVkPUZhbHNlKQ0KDQogICAgZGVmIF9zZXRfbXNnX3N0YXR1cyhzZWxmLCBtc2dpZCwgZW5hYmxlLCBzY29wZT0ncGFja2FnZScsIGxpbmU9Tm9uZSwgaWdub3JlX3Vua25vd249RmFsc2UpOg0KICAgICAgICBhc3NlcnQgc2NvcGUgaW4gKCdwYWNrYWdlJywgJ21vZHVsZScpDQoNCiAgICAgICAgaWYgbXNnaWQgPT0gJ2FsbCc6DQogICAgICAgICAgICBmb3IgX21zZ2lkIGluIE1TR19UWVBFUzoNCiAgICAgICAgICAgICAgICBzZWxmLl9zZXRfbXNnX3N0YXR1cyhfbXNnaWQsIGVuYWJsZSwgc2NvcGUsIGxpbmUsIGlnbm9yZV91bmtub3duKQ0KICAgICAgICAgICAgaWYgZW5hYmxlIGFuZCBub3Qgc2VsZi5fcHl0aG9uM19wb3J0aW5nX21vZGU6DQogICAgICAgICAgICAgICAgIyBEb24ndCBhY3RpdmF0ZSB0aGUgcHl0aG9uIDMgcG9ydGluZyBjaGVja2VyIGlmIGl0IHdhc24ndCBhY3RpdmF0ZWQgZXhwbGljaXRseS4NCiAgICAgICAgICAgICAgICBzZWxmLmRpc2FibGUoJ3B5dGhvbjMnKQ0KICAgICAgICAgICAgcmV0dXJuDQoNCiAgICAgICAgIyBtc2dpZCBpcyBhIGNhdGVnb3J5Pw0KICAgICAgICBjYXRpZCA9IGNhdGVnb3J5X2lkKG1zZ2lkKQ0KICAgICAgICBpZiBjYXRpZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGZvciBfbXNnaWQgaW4gc2VsZi5tc2dzX3N0b3JlLl9tc2dzX2J5X2NhdGVnb3J5LmdldChjYXRpZCk6DQogICAgICAgICAgICAgICAgc2VsZi5fc2V0X21zZ19zdGF0dXMoX21zZ2lkLCBlbmFibGUsIHNjb3BlLCBsaW5lKQ0KICAgICAgICAgICAgcmV0dXJuDQoNCiAgICAgICAgIyBtc2dpZCBpcyBhIGNoZWNrZXIgbmFtZT8NCiAgICAgICAgaWYgbXNnaWQubG93ZXIoKSBpbiBzZWxmLl9jaGVja2VyczoNCiAgICAgICAgICAgIG1zZ3Nfc3RvcmUgPSBzZWxmLm1zZ3Nfc3RvcmUNCiAgICAgICAgICAgIGZvciBjaGVja2VyIGluIHNlbGYuX2NoZWNrZXJzW21zZ2lkLmxvd2VyKCldOg0KICAgICAgICAgICAgICAgIGZvciBfbXNnaWQgaW4gY2hlY2tlci5tc2dzOg0KICAgICAgICAgICAgICAgICAgICBpZiBfbXNnaWQgaW4gbXNnc19zdG9yZS5fYWx0ZXJuYXRpdmVfbmFtZXM6DQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZXRfbXNnX3N0YXR1cyhfbXNnaWQsIGVuYWJsZSwgc2NvcGUsIGxpbmUpDQogICAgICAgICAgICByZXR1cm4NCg0KICAgICAgICAjIG1zZ2lkIGlzIHJlcG9ydCBpZD8NCiAgICAgICAgaWYgbXNnaWQubG93ZXIoKS5zdGFydHN3aXRoKCdycCcpOg0KICAgICAgICAgICAgaWYgZW5hYmxlOg0KICAgICAgICAgICAgICAgIHNlbGYuZW5hYmxlX3JlcG9ydChtc2dpZCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgc2VsZi5kaXNhYmxlX3JlcG9ydChtc2dpZCkNCiAgICAgICAgICAgIHJldHVybg0KDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICMgbXNnaWQgaXMgYSBzeW1ib2xpYyBvciBudW1lcmljIG1zZ2lkLg0KICAgICAgICAgICAgbXNnID0gc2VsZi5tc2dzX3N0b3JlLmdldF9tZXNzYWdlX2RlZmluaXRpb24obXNnaWQpDQogICAgICAgIGV4Y2VwdCBVbmtub3duTWVzc2FnZUVycm9yOg0KICAgICAgICAgICAgaWYgaWdub3JlX3Vua25vd246DQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICByYWlzZQ0KDQogICAgICAgIGlmIHNjb3BlID09ICdtb2R1bGUnOg0KICAgICAgICAgICAgc2VsZi5maWxlX3N0YXRlLnNldF9tc2dfc3RhdHVzKG1zZywgbGluZSwgZW5hYmxlKQ0KICAgICAgICAgICAgaWYgZW5hYmxlOg0KICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ2xvY2FsbHktZW5hYmxlZCcsIGxpbmU9bGluZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M9KG1zZy5zeW1ib2wsIG1zZy5tc2dpZCkpDQogICAgICAgICAgICBlbGlmIG1zZy5zeW1ib2wgIT0gJ2xvY2FsbHktZGlzYWJsZWQnOg0KICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ2xvY2FsbHktZGlzYWJsZWQnLCBsaW5lPWxpbmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzPShtc2cuc3ltYm9sLCBtc2cubXNnaWQpKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgbXNncyA9IHNlbGYuX21zZ3Nfc3RhdGUNCiAgICAgICAgICAgIG1zZ3NbbXNnLm1zZ2lkXSA9IGVuYWJsZQ0KICAgICAgICAgICAgIyBzeW5jIGNvbmZpZ3VyYXRpb24gb2JqZWN0DQogICAgICAgICAgICBzZWxmLmNvbmZpZy5lbmFibGUgPSBbc2VsZi5fbWVzc2FnZV9zeW1ib2wobWlkKSBmb3IgbWlkLCB2YWwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBzb3J0ZWQobXNncy5pdGVtcygpKSBpZiB2YWxdDQogICAgICAgICAgICBzZWxmLmNvbmZpZy5kaXNhYmxlID0gW3NlbGYuX21lc3NhZ2Vfc3ltYm9sKG1pZCkgZm9yIG1pZCwgdmFsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHNvcnRlZChtc2dzLml0ZW1zKCkpIGlmIG5vdCB2YWxdDQoNCiAgICBkZWYgX21lc3NhZ2Vfc3ltYm9sKHNlbGYsIG1zZ2lkKToNCiAgICAgICAgIiIiR2V0IHRoZSBtZXNzYWdlIHN5bWJvbCBvZiB0aGUgZ2l2ZW4gbWVzc2FnZSBpZA0KDQogICAgICAgIFJldHVybiB0aGUgb3JpZ2luYWwgbWVzc2FnZSBpZCBpZiB0aGUgbWVzc2FnZSBkb2VzIG5vdA0KICAgICAgICBleGlzdC4NCiAgICAgICAgIiIiDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLm1zZ3Nfc3RvcmUuZ2V0X21lc3NhZ2VfZGVmaW5pdGlvbihtc2dpZCkuc3ltYm9sDQogICAgICAgIGV4Y2VwdCBVbmtub3duTWVzc2FnZUVycm9yOg0KICAgICAgICAgICAgcmV0dXJuIG1zZ2lkDQoNCiAgICBkZWYgZ2V0X21lc3NhZ2Vfc3RhdGVfc2NvcGUoc2VsZiwgbXNnaWQsIGxpbmU9Tm9uZSwgY29uZmlkZW5jZT1VTkRFRklORUQpOg0KICAgICAgICAiIiJSZXR1cm5zIHRoZSBzY29wZSBhdCB3aGljaCBhIG1lc3NhZ2Ugd2FzIGVuYWJsZWQvZGlzYWJsZWQuIiIiDQogICAgICAgIGlmIHNlbGYuY29uZmlnLmNvbmZpZGVuY2UgYW5kIGNvbmZpZGVuY2UubmFtZSBub3QgaW4gc2VsZi5jb25maWcuY29uZmlkZW5jZToNCiAgICAgICAgICAgIHJldHVybiBNU0dfU1RBVEVfQ09ORklERU5DRQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpZiBsaW5lIGluIHNlbGYuZmlsZV9zdGF0ZS5fbW9kdWxlX21zZ3Nfc3RhdGVbbXNnaWRdOg0KICAgICAgICAgICAgICAgIHJldHVybiBNU0dfU1RBVEVfU0NPUEVfTU9EVUxFDQogICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIFR5cGVFcnJvcik6DQogICAgICAgICAgICByZXR1cm4gTVNHX1NUQVRFX1NDT1BFX0NPTkZJRw0KICAgICAgICByZXR1cm4gTm9uZQ0KDQogICAgZGVmIGlzX21lc3NhZ2VfZW5hYmxlZChzZWxmLCBtc2dfZGVzY3IsIGxpbmU9Tm9uZSwgY29uZmlkZW5jZT1Ob25lKToNCiAgICAgICAgIiIicmV0dXJuIHRydWUgaWYgdGhlIG1lc3NhZ2UgYXNzb2NpYXRlZCB0byB0aGUgZ2l2ZW4gbWVzc2FnZSBpZCBpcw0KICAgICAgICBlbmFibGVkDQoNCiAgICAgICAgbXNnaWQgbWF5IGJlIGVpdGhlciBhIG51bWVyaWMgb3Igc3ltYm9saWMgbWVzc2FnZSBpZC4NCiAgICAgICAgIiIiDQogICAgICAgIGlmIHNlbGYuY29uZmlnLmNvbmZpZGVuY2UgYW5kIGNvbmZpZGVuY2U6DQogICAgICAgICAgICBpZiBjb25maWRlbmNlLm5hbWUgbm90IGluIHNlbGYuY29uZmlnLmNvbmZpZGVuY2U6DQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG1zZ2lkID0gc2VsZi5tc2dzX3N0b3JlLmdldF9tZXNzYWdlX2RlZmluaXRpb24obXNnX2Rlc2NyKS5tc2dpZA0KICAgICAgICBleGNlcHQgVW5rbm93bk1lc3NhZ2VFcnJvcjoNCiAgICAgICAgICAgICMgVGhlIGxpbnRlciBjaGVja3MgZm9yIG1lc3NhZ2VzIHRoYXQgYXJlIG5vdCByZWdpc3RlcmVkDQogICAgICAgICAgICAjIGR1ZSB0byB2ZXJzaW9uIG1pc21hdGNoLCBqdXN0IHRyZWF0IHRoZW0gYXMgbWVzc2FnZSBJRHMNCiAgICAgICAgICAgICMgZm9yIG5vdy4NCiAgICAgICAgICAgIG1zZ2lkID0gbXNnX2Rlc2NyDQogICAgICAgIGlmIGxpbmUgaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tc2dzX3N0YXRlLmdldChtc2dpZCwgVHJ1ZSkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuZmlsZV9zdGF0ZS5fbW9kdWxlX21zZ3Nfc3RhdGVbbXNnaWRdW2xpbmVdDQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICMgQ2hlY2sgaWYgdGhlIG1lc3NhZ2UncyBsaW5lIGlzIGFmdGVyIHRoZSBtYXhpbXVtIGxpbmUgZXhpc3RpbmcgaW4gYXN0IHRyZWUuDQogICAgICAgICAgICAjIFRoaXMgbGluZSB3b24ndCBhcHBlYXIgaW4gdGhlIGFzdCB0cmVlIGFuZCB3b24ndCBiZSByZWZlcnJlZCBpbg0KICAgICAgICAgICAgI8Kgc2VsZi5maWxlX3N0YXRlLl9tb2R1bGVfbXNnc19zdGF0ZQ0KICAgICAgICAgICAgIyBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgd2l0aCBhIGNvbW1lbnRlZCBsaW5lIGF0IHRoZSBlbmQgb2YgYSBtb2R1bGUuDQogICAgICAgICAgICBtYXhfbGluZV9udW1iZXIgPSBzZWxmLmZpbGVfc3RhdGUuZ2V0X2VmZmVjdGl2ZV9tYXhfbGluZV9udW1iZXIoKQ0KICAgICAgICAgICAgaWYgKG1heF9saW5lX251bWJlciBhbmQgbGluZSA+IG1heF9saW5lX251bWJlcik6DQogICAgICAgICAgICAgICAgZmFsbGJhY2sgPSBtc2dpZCBub3QgaW4gc2VsZi5maWxlX3N0YXRlLl9yYXdfbW9kdWxlX21zZ3Nfc3RhdGUNCiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fbXNnc19zdGF0ZS5nZXQobXNnaWQsIGZhbGxiYWNrKQ0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21zZ3Nfc3RhdGUuZ2V0KG1zZ2lkLCBUcnVlKQ0KDQogICAgZGVmIGFkZF9tZXNzYWdlKHNlbGYsIG1zZ19kZXNjciwgbGluZT1Ob25lLCBub2RlPU5vbmUsIGFyZ3M9Tm9uZSwgY29uZmlkZW5jZT1VTkRFRklORUQsDQogICAgICAgICAgICAgICAgICAgIGNvbF9vZmZzZXQ9Tm9uZSk6DQogICAgICAgICIiIkFkZHMgYSBtZXNzYWdlIGdpdmVuIGJ5IElEIG9yIG5hbWUuDQoNCiAgICAgICAgSWYgcHJvdmlkZWQsIHRoZSBtZXNzYWdlIHN0cmluZyBpcyBleHBhbmRlZCB1c2luZyBhcmdzLg0KDQogICAgICAgIEFTVCBjaGVja2VycyBtdXN0IHByb3ZpZGUgdGhlIG5vZGUgYXJndW1lbnQgKGJ1dCBtYXkgb3B0aW9uYWxseQ0KICAgICAgICBwcm92aWRlIGxpbmUgaWYgdGhlIGxpbmUgbnVtYmVyIGlzIGRpZmZlcmVudCksIHJhdyBhbmQgdG9rZW4gY2hlY2tlcnMNCiAgICAgICAgbXVzdCBwcm92aWRlIHRoZSBsaW5lIGFyZ3VtZW50Lg0KICAgICAgICAiIiINCiAgICAgICAgbXNnX2luZm8gPSBzZWxmLm1zZ3Nfc3RvcmUuZ2V0X21lc3NhZ2VfZGVmaW5pdGlvbihtc2dfZGVzY3IpDQogICAgICAgIG1zZ2lkID0gbXNnX2luZm8ubXNnaWQNCiAgICAgICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBtZXNzYWdlIG1heSBub3QgaGF2ZSBhIHN5bWJvbA0KICAgICAgICBzeW1ib2wgPSBtc2dfaW5mby5zeW1ib2wgb3IgbXNnaWQNCiAgICAgICAgIyBGYXRhbCBtZXNzYWdlcyBhbmQgcmVwb3J0cyBhcmUgc3BlY2lhbCwgdGhlIG5vZGUvc2NvcGUgZGlzdGluY3Rpb24NCiAgICAgICAgIyBkb2VzIG5vdCBhcHBseSB0byB0aGVtLg0KICAgICAgICBpZiBtc2dpZFswXSBub3QgaW4gX1NDT1BFX0VYRU1QVDoNCiAgICAgICAgICAgIGlmIG1zZ19pbmZvLnNjb3BlID09IFdhcm5pbmdTY29wZS5MSU5FOg0KICAgICAgICAgICAgICAgIGlmIGxpbmUgaXMgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgcmFpc2UgSW52YWxpZE1lc3NhZ2VFcnJvcigNCiAgICAgICAgICAgICAgICAgICAgICAgICdNZXNzYWdlICVzIG11c3QgcHJvdmlkZSBsaW5lLCBnb3QgTm9uZScgJSBtc2dpZCkNCiAgICAgICAgICAgICAgICBpZiBub2RlIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgICAgICByYWlzZSBJbnZhbGlkTWVzc2FnZUVycm9yKA0KICAgICAgICAgICAgICAgICAgICAgICAgJ01lc3NhZ2UgJXMgbXVzdCBvbmx5IHByb3ZpZGUgbGluZSwgJw0KICAgICAgICAgICAgICAgICAgICAgICAgJ2dvdCBsaW5lPSVzLCBub2RlPSVzJyAlIChtc2dpZCwgbGluZSwgbm9kZSkpDQogICAgICAgICAgICBlbGlmIG1zZ19pbmZvLnNjb3BlID09IFdhcm5pbmdTY29wZS5OT0RFOg0KICAgICAgICAgICAgICAgICMgTm9kZS1iYXNlZCB3YXJuaW5ncyBtYXkgcHJvdmlkZSBhbiBvdmVycmlkZSBsaW5lLg0KICAgICAgICAgICAgICAgIGlmIG5vZGUgaXMgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgcmFpc2UgSW52YWxpZE1lc3NhZ2VFcnJvcigNCiAgICAgICAgICAgICAgICAgICAgICAgICdNZXNzYWdlICVzIG11c3QgcHJvdmlkZSBOb2RlLCBnb3QgTm9uZScgJSBtc2dpZCkNCg0KICAgICAgICBpZiBsaW5lIGlzIE5vbmUgYW5kIG5vZGUgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBsaW5lID0gbm9kZS5mcm9tbGluZW5vDQogICAgICAgIGlmIGNvbF9vZmZzZXQgaXMgTm9uZSBhbmQgaGFzYXR0cihub2RlLCAnY29sX29mZnNldCcpOg0KICAgICAgICAgICAgY29sX29mZnNldCA9IG5vZGUuY29sX29mZnNldCAjIFhYWCBtZWFzdXJlZCBpbiBieXRlcyBmb3IgdXRmLTgsIGRpdmlkZSBieSB0d28gZm9yIGNoYXJzPw0KDQogICAgICAgICMgc2hvdWxkIHRoaXMgbWVzc2FnZSBiZSBkaXNwbGF5ZWQNCiAgICAgICAgaWYgbm90IHNlbGYuaXNfbWVzc2FnZV9lbmFibGVkKG1zZ2lkLCBsaW5lLCBjb25maWRlbmNlKToNCiAgICAgICAgICAgIHNlbGYuZmlsZV9zdGF0ZS5oYW5kbGVfaWdub3JlZF9tZXNzYWdlKA0KICAgICAgICAgICAgICAgIHNlbGYuZ2V0X21lc3NhZ2Vfc3RhdGVfc2NvcGUobXNnaWQsIGxpbmUsIGNvbmZpZGVuY2UpLA0KICAgICAgICAgICAgICAgIG1zZ2lkLCBsaW5lLCBub2RlLCBhcmdzLCBjb25maWRlbmNlKQ0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICMgdXBkYXRlIHN0YXRzDQogICAgICAgIG1zZ19jYXQgPSBNU0dfVFlQRVNbbXNnaWRbMF1dDQogICAgICAgIHNlbGYubXNnX3N0YXR1cyB8PSBNU0dfVFlQRVNfU1RBVFVTW21zZ2lkWzBdXQ0KICAgICAgICBzZWxmLnN0YXRzW21zZ19jYXRdICs9IDENCiAgICAgICAgc2VsZi5zdGF0c1snYnlfbW9kdWxlJ11bc2VsZi5jdXJyZW50X25hbWVdW21zZ19jYXRdICs9IDENCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc2VsZi5zdGF0c1snYnlfbXNnJ11bc3ltYm9sXSArPSAxDQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgIHNlbGYuc3RhdHNbJ2J5X21zZyddW3N5bWJvbF0gPSAxDQogICAgICAgICMgZXhwYW5kIG1lc3NhZ2UgPw0KICAgICAgICBtc2cgPSBtc2dfaW5mby5tc2cNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIG1zZyAlPSBhcmdzDQogICAgICAgICMgZ2V0IG1vZHVsZSBhbmQgb2JqZWN0DQogICAgICAgIGlmIG5vZGUgaXMgTm9uZToNCiAgICAgICAgICAgIG1vZHVsZSwgb2JqID0gc2VsZi5jdXJyZW50X25hbWUsICcnDQogICAgICAgICAgICBhYnNwYXRoID0gc2VsZi5jdXJyZW50X2ZpbGUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIG1vZHVsZSwgb2JqID0gZ2V0X21vZHVsZV9hbmRfZnJhbWVpZChub2RlKQ0KICAgICAgICAgICAgYWJzcGF0aCA9IG5vZGUucm9vdCgpLmZpbGUNCiAgICAgICAgcGF0aCA9IGFic3BhdGgucmVwbGFjZShzZWxmLnJlcG9ydGVyLnBhdGhfc3RyaXBfcHJlZml4LCAnJywgMSkNCiAgICAgICAgIyBhZGQgdGhlIG1lc3NhZ2UNCiAgICAgICAgc2VsZi5yZXBvcnRlci5oYW5kbGVfbWVzc2FnZSgNCiAgICAgICAgICAgIE1lc3NhZ2UobXNnaWQsIHN5bWJvbCwNCiAgICAgICAgICAgICAgICAgICAgKGFic3BhdGgsIHBhdGgsIG1vZHVsZSwgb2JqLCBsaW5lIG9yIDEsIGNvbF9vZmZzZXQgb3IgMCksIG1zZywgY29uZmlkZW5jZSkpDQoNCiAgICBkZWYgcHJpbnRfZnVsbF9kb2N1bWVudGF0aW9uKHNlbGYsIHN0cmVhbT1Ob25lKToNCiAgICAgICAgIiIib3V0cHV0IGEgZnVsbCBkb2N1bWVudGF0aW9uIGluIFJlU1QgZm9ybWF0IiIiDQogICAgICAgIGlmIG5vdCBzdHJlYW06DQogICAgICAgICAgICBzdHJlYW0gPSBzeXMuc3Rkb3V0DQoNCiAgICAgICAgcHJpbnQoIlB5bGludCBnbG9iYWwgb3B0aW9ucyBhbmQgc3dpdGNoZXMiLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoIiIsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBwcmludCgiUHlsaW50IHByb3ZpZGVzIGdsb2JhbCBvcHRpb25zIGFuZCBzd2l0Y2hlcy4iLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoIiIsIGZpbGU9c3RyZWFtKQ0KDQogICAgICAgIGJ5X2NoZWNrZXIgPSB7fQ0KICAgICAgICBmb3IgY2hlY2tlciBpbiBzZWxmLmdldF9jaGVja2VycygpOg0KICAgICAgICAgICAgaWYgY2hlY2tlci5uYW1lID09ICdtYXN0ZXInOg0KICAgICAgICAgICAgICAgIGlmIGNoZWNrZXIub3B0aW9uczoNCiAgICAgICAgICAgICAgICAgICAgZm9yIHNlY3Rpb24sIG9wdGlvbnMgaW4gY2hlY2tlci5vcHRpb25zX2J5X3NlY3Rpb24oKToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlY3Rpb24gaXMgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9ICdHZW5lcmFsIG9wdGlvbnMnDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gJyVzIG9wdGlvbnMnICUgc2VjdGlvbi5jYXBpdGFsaXplKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHRpdGxlLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCd+JyAqIGxlbih0aXRsZSksIGZpbGU9c3RyZWFtKQ0KICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3RfZm9ybWF0X3NlY3Rpb24oc3RyZWFtLCBOb25lLCBvcHRpb25zKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiIsIGZpbGU9c3RyZWFtKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBuYW1lID0gY2hlY2tlci5uYW1lDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBieV9jaGVja2VyW25hbWVdWydvcHRpb25zJ10gKz0gY2hlY2tlci5vcHRpb25zX2FuZF92YWx1ZXMoKQ0KICAgICAgICAgICAgICAgICAgICBieV9jaGVja2VyW25hbWVdWydtc2dzJ10udXBkYXRlKGNoZWNrZXIubXNncykNCiAgICAgICAgICAgICAgICAgICAgYnlfY2hlY2tlcltuYW1lXVsncmVwb3J0cyddICs9IGNoZWNrZXIucmVwb3J0cw0KICAgICAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgYnlfY2hlY2tlcltuYW1lXSA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb25zJzogbGlzdChjaGVja2VyLm9wdGlvbnNfYW5kX3ZhbHVlcygpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICdtc2dzJzogICAgZGljdChjaGVja2VyLm1zZ3MpLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcG9ydHMnOiBsaXN0KGNoZWNrZXIucmVwb3J0cyksDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICBwcmludCgiUHlsaW50IGNoZWNrZXJzJyBvcHRpb25zIGFuZCBzd2l0Y2hlcyIsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBwcmludCgiIiwgZmlsZT1zdHJlYW0pDQogICAgICAgIHByaW50KCJQeWxpbnQgY2hlY2tlcnMgY2FuIHByb3ZpZGUgdGhyZWUgc2V0IG9mIGZlYXR1cmVzOiIsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBwcmludCgiIiwgZmlsZT1zdHJlYW0pDQogICAgICAgIHByaW50KCIqIG9wdGlvbnMgdGhhdCBjb250cm9sIHRoZWlyIGV4ZWN1dGlvbiwiLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoIiogbWVzc2FnZXMgdGhhdCB0aGV5IGNhbiByYWlzZSwiLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoIiogcmVwb3J0cyB0aGF0IHRoZXkgY2FuIGdlbmVyYXRlLiIsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBwcmludCgiIiwgZmlsZT1zdHJlYW0pDQogICAgICAgIHByaW50KCJCZWxvdyBpcyBhIGxpc3Qgb2YgYWxsIGNoZWNrZXJzIGFuZCB0aGVpciBmZWF0dXJlcy4iLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoIiIsIGZpbGU9c3RyZWFtKQ0KDQogICAgICAgIGZvciBjaGVja2VyLCBpbmZvIGluIHNvcnRlZChieV9jaGVja2VyLml0ZW1zKCkpOg0KICAgICAgICAgICAgc2VsZi5fcHJpbnRfY2hlY2tlcl9kb2MoY2hlY2tlciwgaW5mbywgc3RyZWFtPXN0cmVhbSkNCg0KICAgIEBzdGF0aWNtZXRob2QNCiAgICBkZWYgX3ByaW50X2NoZWNrZXJfZG9jKGNoZWNrZXJfbmFtZSwgaW5mbywgc3RyZWFtPU5vbmUpOg0KICAgICAgICAiIiJIZWxwZXIgbWV0aG9kIGZvciBwcmludF9mdWxsX2RvY3VtZW50YXRpb24uDQoNCiAgICAgICAgQWxzbyB1c2VkIGJ5IGRvYy9leHRzL3B5bGludF9leHRlbnNpb25zLnB5Lg0KICAgICAgICAiIiINCiAgICAgICAgaWYgbm90IHN0cmVhbToNCiAgICAgICAgICAgIHN0cmVhbSA9IHN5cy5zdGRvdXQNCg0KICAgICAgICBkb2MgPSBpbmZvLmdldCgnZG9jJykNCiAgICAgICAgbW9kdWxlID0gaW5mby5nZXQoJ21vZHVsZScpDQogICAgICAgIG1zZ3MgPSBpbmZvLmdldCgnbXNncycpDQogICAgICAgIG9wdGlvbnMgPSBpbmZvLmdldCgnb3B0aW9ucycpDQogICAgICAgIHJlcG9ydHMgPSBpbmZvLmdldCgncmVwb3J0cycpDQoNCiAgICAgICAgY2hlY2tlcl90aXRsZSA9ICclcyBjaGVja2VyJyAlIChjaGVja2VyX25hbWUucmVwbGFjZSgiXyIsICIgIikudGl0bGUoKSkNCg0KICAgICAgICBpZiBtb2R1bGU6DQogICAgICAgICAgICAjIFByb3ZpZGUgYW5jaG9yIHRvIGxpbmsgYWdhaW5zdA0KICAgICAgICAgICAgcHJpbnQoIi4uIF8lczpcbiIgJSBtb2R1bGUsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBwcmludChjaGVja2VyX3RpdGxlLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoJ34nICogbGVuKGNoZWNrZXJfdGl0bGUpLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoIiIsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBpZiBtb2R1bGU6DQogICAgICAgICAgICBwcmludCgiVGhpcyBjaGVja2VyIGlzIHByb3ZpZGVkIGJ5IGBgJXNgYC4iICUgbW9kdWxlLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgcHJpbnQoIlZlcmJhdGltIG5hbWUgb2YgdGhlIGNoZWNrZXIgaXMgYGAlc2BgLiIgJSBjaGVja2VyX25hbWUsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBwcmludCgiIiwgZmlsZT1zdHJlYW0pDQogICAgICAgIGlmIGRvYzoNCiAgICAgICAgICAgICMgUHJvdmlkZSBhbmNob3IgdG8gbGluayBhZ2FpbnN0DQogICAgICAgICAgICB0aXRsZSA9ICd7fSBEb2N1bWVudGF0aW9uJy5mb3JtYXQoY2hlY2tlcl90aXRsZSkNCiAgICAgICAgICAgIHByaW50KHRpdGxlLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgICAgIHByaW50KCdeJyAqIGxlbih0aXRsZSksIGZpbGU9c3RyZWFtKQ0KICAgICAgICAgICAgcHJpbnQoY2xlYW5kb2MoZG9jKSwgZmlsZT1zdHJlYW0pDQogICAgICAgICAgICBwcmludCgiIiwgZmlsZT1zdHJlYW0pDQogICAgICAgIGlmIG9wdGlvbnM6DQogICAgICAgICAgICB0aXRsZSA9ICd7fSBPcHRpb25zJy5mb3JtYXQoY2hlY2tlcl90aXRsZSkNCiAgICAgICAgICAgIHByaW50KHRpdGxlLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgICAgIHByaW50KCdeJyAqIGxlbih0aXRsZSksIGZpbGU9c3RyZWFtKQ0KICAgICAgICAgICAgX3Jlc3RfZm9ybWF0X3NlY3Rpb24oc3RyZWFtLCBOb25lLCBvcHRpb25zKQ0KICAgICAgICAgICAgcHJpbnQoIiIsIGZpbGU9c3RyZWFtKQ0KICAgICAgICBpZiBtc2dzOg0KICAgICAgICAgICAgdGl0bGUgPSAne30gTWVzc2FnZXMnLmZvcm1hdChjaGVja2VyX3RpdGxlKQ0KICAgICAgICAgICAgcHJpbnQodGl0bGUsIGZpbGU9c3RyZWFtKQ0KICAgICAgICAgICAgcHJpbnQoJ14nICogbGVuKHRpdGxlKSwgZmlsZT1zdHJlYW0pDQogICAgICAgICAgICBmb3IgbXNnaWQsIG1zZyBpbiBzb3J0ZWQobXNncy5pdGVtcygpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT1sYW1iZGEga3Y6IChfTVNHX09SREVSLmluZGV4KGt2WzBdWzBdKSwga3ZbMV0pKToNCiAgICAgICAgICAgICAgICBtc2cgPSBidWlsZF9tZXNzYWdlX2RlZihjaGVja2VyX25hbWUsIG1zZ2lkLCBtc2cpDQogICAgICAgICAgICAgICAgcHJpbnQobXNnLmZvcm1hdF9oZWxwKGNoZWNrZXJyZWY9RmFsc2UpLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgICAgIHByaW50KCIiLCBmaWxlPXN0cmVhbSkNCiAgICAgICAgaWYgcmVwb3J0czoNCiAgICAgICAgICAgIHRpdGxlID0gJ3t9IFJlcG9ydHMnLmZvcm1hdChjaGVja2VyX3RpdGxlKQ0KICAgICAgICAgICAgcHJpbnQodGl0bGUsIGZpbGU9c3RyZWFtKQ0KICAgICAgICAgICAgcHJpbnQoJ14nICogbGVuKHRpdGxlKSwgZmlsZT1zdHJlYW0pDQogICAgICAgICAgICBmb3IgcmVwb3J0IGluIHJlcG9ydHM6DQogICAgICAgICAgICAgICAgcHJpbnQoJzolczogJXMnICUgcmVwb3J0WzoyXSwgZmlsZT1zdHJlYW0pDQogICAgICAgICAgICBwcmludCgiIiwgZmlsZT1zdHJlYW0pDQogICAgICAgIHByaW50KCIiLCBmaWxlPXN0cmVhbSkNCg0KY2xhc3MgRmlsZVN0YXRlOg0KICAgICIiIkhvbGQgaW50ZXJuYWwgc3RhdGUgc3BlY2lmaWMgdG8gdGhlIGN1cnJlbnRseSBhbmFseXplZCBmaWxlIiIiDQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgbW9kbmFtZT1Ob25lKToNCiAgICAgICAgc2VsZi5iYXNlX25hbWUgPSBtb2RuYW1lDQogICAgICAgIHNlbGYuX21vZHVsZV9tc2dzX3N0YXRlID0ge30NCiAgICAgICAgc2VsZi5fcmF3X21vZHVsZV9tc2dzX3N0YXRlID0ge30NCiAgICAgICAgc2VsZi5faWdub3JlZF9tc2dzID0gY29sbGVjdGlvbnMuZGVmYXVsdGRpY3Qoc2V0KQ0KICAgICAgICBzZWxmLl9zdXBwcmVzc2lvbl9tYXBwaW5nID0ge30NCiAgICAgICAgc2VsZi5fZWZmZWN0aXZlX21heF9saW5lX251bWJlciA9IE5vbmUNCg0KICAgIGRlZiBjb2xsZWN0X2Jsb2NrX2xpbmVzKHNlbGYsIG1zZ3Nfc3RvcmUsIG1vZHVsZV9ub2RlKToNCiAgICAgICAgIiIiV2FsayB0aGUgQVNUIHRvIGNvbGxlY3QgYmxvY2sgbGV2ZWwgb3B0aW9ucyBsaW5lIG51bWJlcnMuIiIiDQogICAgICAgIGZvciBtc2csIGxpbmVzIGluIHNlbGYuX21vZHVsZV9tc2dzX3N0YXRlLml0ZW1zKCk6DQogICAgICAgICAgICBzZWxmLl9yYXdfbW9kdWxlX21zZ3Nfc3RhdGVbbXNnXSA9IGxpbmVzLmNvcHkoKQ0KICAgICAgICBvcmlnX3N0YXRlID0gc2VsZi5fbW9kdWxlX21zZ3Nfc3RhdGUuY29weSgpDQogICAgICAgIHNlbGYuX21vZHVsZV9tc2dzX3N0YXRlID0ge30NCiAgICAgICAgc2VsZi5fc3VwcHJlc3Npb25fbWFwcGluZyA9IHt9DQogICAgICAgIHNlbGYuX2VmZmVjdGl2ZV9tYXhfbGluZV9udW1iZXIgPSBtb2R1bGVfbm9kZS50b2xpbmVubw0KICAgICAgICBzZWxmLl9jb2xsZWN0X2Jsb2NrX2xpbmVzKG1zZ3Nfc3RvcmUsIG1vZHVsZV9ub2RlLCBvcmlnX3N0YXRlKQ0KDQogICAgZGVmIF9jb2xsZWN0X2Jsb2NrX2xpbmVzKHNlbGYsIG1zZ3Nfc3RvcmUsIG5vZGUsIG1zZ19zdGF0ZSk6DQogICAgICAgICIiIlJlY3Vyc2l2ZWx5IHdhbGsgKGRlcHRoIGZpcnN0KSBBU1QgdG8gY29sbGVjdCBibG9jayBsZXZlbCBvcHRpb25zDQogICAgICAgIGxpbmUgbnVtYmVycy4NCiAgICAgICAgIiIiDQogICAgICAgIGZvciBjaGlsZCBpbiBub2RlLmdldF9jaGlsZHJlbigpOg0KICAgICAgICAgICAgc2VsZi5fY29sbGVjdF9ibG9ja19saW5lcyhtc2dzX3N0b3JlLCBjaGlsZCwgbXNnX3N0YXRlKQ0KICAgICAgICBmaXJzdCA9IG5vZGUuZnJvbWxpbmVubw0KICAgICAgICBsYXN0ID0gbm9kZS50b2xpbmVubw0KICAgICAgICAjIGZpcnN0IGNoaWxkIGxpbmUgbnVtYmVyIHVzZWQgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBkaXNhYmxlDQogICAgICAgICMgd2hpY2ggYXJlIHRoZSBmaXJzdCBjaGlsZCBvZiBzY29wZWQgbm9kZSB3aXRoIHRob3NlIGRlZmluZWQgbGF0ZXIuDQogICAgICAgICMgRm9yIGluc3RhbmNlIGluIHRoZSBjb2RlIGJlbG93Og0KICAgICAgICAjDQogICAgICAgICMgMS4gICBkZWYgbWV0aDgoc2VsZik6DQogICAgICAgICMgMi4gICAgICAgICIiInRlc3QgbGF0ZSBkaXNhYmxpbmciIiINCiAgICAgICAgIyAzLiAgICAgICAgIyBweWxpbnQ6IGRpc2FibGU9RTExMDINCiAgICAgICAgIyA0LiAgICAgICAgcHJpbnQgc2VsZi5ibGlwDQogICAgICAgICMgNS4gICAgICAgICMgcHlsaW50OiBkaXNhYmxlPUUxMTAxDQogICAgICAgICMgNi4gICAgICAgIHByaW50IHNlbGYuYmxhDQogICAgICAgICMNCiAgICAgICAgIyBFMTEwMiBzaG91bGQgYmUgZGlzYWJsZWQgZnJvbSBsaW5lIDEgdG8gNiB3aGlsZSBFMTEwMSBmcm9tIGxpbmUgNSB0byA2DQogICAgICAgICMNCiAgICAgICAgIyB0aGlzIGlzIG5lY2Vzc2FyeSB0byBkaXNhYmxlIGxvY2FsbHkgbWVzc2FnZXMgYXBwbHlpbmcgdG8gY2xhc3MgLw0KICAgICAgICAjIGZ1bmN0aW9uIHVzaW5nIHRoZWlyIGZyb21saW5lbm8NCiAgICAgICAgaWYgKGlzaW5zdGFuY2Uobm9kZSwgKG5vZGVzLk1vZHVsZSwgbm9kZXMuQ2xhc3NEZWYsIG5vZGVzLkZ1bmN0aW9uRGVmKSkNCiAgICAgICAgICAgICAgICBhbmQgbm9kZS5ib2R5KToNCiAgICAgICAgICAgIGZpcnN0Y2hpbGRsaW5lbm8gPSBub2RlLmJvZHlbMF0uZnJvbWxpbmVubw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgZmlyc3RjaGlsZGxpbmVubyA9IGxhc3QNCiAgICAgICAgZm9yIG1zZ2lkLCBsaW5lcyBpbiBtc2dfc3RhdGUuaXRlbXMoKToNCiAgICAgICAgICAgIGZvciBsaW5lbm8sIHN0YXRlIGluIGxpc3QobGluZXMuaXRlbXMoKSk6DQogICAgICAgICAgICAgICAgb3JpZ2luYWxfbGluZW5vID0gbGluZW5vDQogICAgICAgICAgICAgICAgaWYgZmlyc3QgPiBsaW5lbm8gb3IgbGFzdCA8IGxpbmVubzoNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAjIFNldCBzdGF0ZSBmb3IgYWxsIGxpbmVzIGZvciB0aGlzIGJsb2NrLCBpZiB0aGUNCiAgICAgICAgICAgICAgICAjIHdhcm5pbmcgaXMgYXBwbGllZCB0byBub2Rlcy4NCiAgICAgICAgICAgICAgICBpZiBtc2dzX3N0b3JlLmdldF9tZXNzYWdlX2RlZmluaXRpb24obXNnaWQpLnNjb3BlID09IFdhcm5pbmdTY29wZS5OT0RFOg0KICAgICAgICAgICAgICAgICAgICBpZiBsaW5lbm8gPiBmaXJzdGNoaWxkbGluZW5vOg0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBUcnVlDQogICAgICAgICAgICAgICAgICAgIGZpcnN0XywgbGFzdF8gPSBub2RlLmJsb2NrX3JhbmdlKGxpbmVubykNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBmaXJzdF8gPSBsaW5lbm8NCiAgICAgICAgICAgICAgICAgICAgbGFzdF8gPSBsYXN0DQogICAgICAgICAgICAgICAgZm9yIGxpbmUgaW4gcmFuZ2UoZmlyc3RfLCBsYXN0XysxKToNCiAgICAgICAgICAgICAgICAgICAgIyBkbyBub3Qgb3ZlcnJpZGUgZXhpc3RpbmcgZW50cmllcw0KICAgICAgICAgICAgICAgICAgICBpZiBsaW5lIGluIHNlbGYuX21vZHVsZV9tc2dzX3N0YXRlLmdldChtc2dpZCwgKCkpOg0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgaWYgbGluZSBpbiBsaW5lczogIyBzdGF0ZSBjaGFuZ2UgaW4gdGhlIHNhbWUgYmxvY2sNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gbGluZXNbbGluZV0NCiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsX2xpbmVubyA9IGxpbmUNCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHN0YXRlOg0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc3VwcHJlc3Npb25fbWFwcGluZ1sobXNnaWQsIGxpbmUpXSA9IG9yaWdpbmFsX2xpbmVubw0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9tb2R1bGVfbXNnc19zdGF0ZVttc2dpZF1bbGluZV0gPSBzdGF0ZQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9tb2R1bGVfbXNnc19zdGF0ZVttc2dpZF0gPSB7bGluZTogc3RhdGV9DQogICAgICAgICAgICAgICAgZGVsIGxpbmVzW2xpbmVub10NCg0KICAgIGRlZiBzZXRfbXNnX3N0YXR1cyhzZWxmLCBtc2csIGxpbmUsIHN0YXR1cyk6DQogICAgICAgICIiIlNldCBzdGF0dXMgKGVuYWJsZWQvZGlzYWJsZSkgZm9yIGEgZ2l2ZW4gbWVzc2FnZSBhdCBhIGdpdmVuIGxpbmUiIiINCiAgICAgICAgYXNzZXJ0IGxpbmUgPiAwDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuX21vZHVsZV9tc2dzX3N0YXRlW21zZy5tc2dpZF1bbGluZV0gPSBzdGF0dXMNCiAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgc2VsZi5fbW9kdWxlX21zZ3Nfc3RhdGVbbXNnLm1zZ2lkXSA9IHtsaW5lOiBzdGF0dXN9DQoNCiAgICBkZWYgaGFuZGxlX2lnbm9yZWRfbWVzc2FnZShzZWxmLCBzdGF0ZV9zY29wZSwgbXNnaWQsIGxpbmUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSwgYXJncywgY29uZmlkZW5jZSk6ICMgcHlsaW50OiBkaXNhYmxlPXVudXNlZC1hcmd1bWVudA0KICAgICAgICAiIiJSZXBvcnQgYW4gaWdub3JlZCBtZXNzYWdlLg0KDQogICAgICAgIHN0YXRlX3Njb3BlIGlzIGVpdGhlciBNU0dfU1RBVEVfU0NPUEVfTU9EVUxFIG9yIE1TR19TVEFURV9TQ09QRV9DT05GSUcsDQogICAgICAgIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBtZXNzYWdlIHdhcyBkaXNhYmxlZCBsb2NhbGx5IGluIHRoZSBtb2R1bGUsDQogICAgICAgIG9yIGdsb2JhbGx5LiBUaGUgb3RoZXIgYXJndW1lbnRzIGFyZSB0aGUgc2FtZSBhcyBmb3IgYWRkX21lc3NhZ2UuDQogICAgICAgICIiIg0KICAgICAgICBpZiBzdGF0ZV9zY29wZSA9PSBNU0dfU1RBVEVfU0NPUEVfTU9EVUxFOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIG9yaWdfbGluZSA9IHNlbGYuX3N1cHByZXNzaW9uX21hcHBpbmdbKG1zZ2lkLCBsaW5lKV0NCiAgICAgICAgICAgICAgICBzZWxmLl9pZ25vcmVkX21zZ3NbKG1zZ2lkLCBvcmlnX2xpbmUpXS5hZGQobGluZSkNCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICBkZWYgaXRlcl9zcHVyaW91c19zdXBwcmVzc2lvbl9tZXNzYWdlcyhzZWxmLCBtc2dzX3N0b3JlKToNCiAgICAgICAgZm9yIHdhcm5pbmcsIGxpbmVzIGluIHNlbGYuX3Jhd19tb2R1bGVfbXNnc19zdGF0ZS5pdGVtcygpOg0KICAgICAgICAgICAgZm9yIGxpbmUsIGVuYWJsZSBpbiBsaW5lcy5pdGVtcygpOg0KICAgICAgICAgICAgICAgIGlmIG5vdCBlbmFibGUgYW5kICh3YXJuaW5nLCBsaW5lKSBub3QgaW4gc2VsZi5faWdub3JlZF9tc2dzOg0KICAgICAgICAgICAgICAgICAgICB5aWVsZCAndXNlbGVzcy1zdXBwcmVzc2lvbicsIGxpbmUsIFwNCiAgICAgICAgICAgICAgICAgICAgICAgIChtc2dzX3N0b3JlLmdldF9tc2dfZGlzcGxheV9zdHJpbmcod2FybmluZyksKQ0KICAgICAgICAjIGRvbid0IHVzZSBpdGVyaXRlbXMgaGVyZSwgX2lnbm9yZWRfbXNncyBtYXkgYmUgbW9kaWZpZWQgYnkgYWRkX21lc3NhZ2UNCiAgICAgICAgZm9yICh3YXJuaW5nLCBmcm9tXyksIGxpbmVzIGluIGxpc3Qoc2VsZi5faWdub3JlZF9tc2dzLml0ZW1zKCkpOg0KICAgICAgICAgICAgZm9yIGxpbmUgaW4gbGluZXM6DQogICAgICAgICAgICAgICAgeWllbGQgJ3N1cHByZXNzZWQtbWVzc2FnZScsIGxpbmUsIFwNCiAgICAgICAgICAgICAgICAgICAgKG1zZ3Nfc3RvcmUuZ2V0X21zZ19kaXNwbGF5X3N0cmluZyh3YXJuaW5nKSwgZnJvbV8pDQoNCiAgICBkZWYgZ2V0X2VmZmVjdGl2ZV9tYXhfbGluZV9udW1iZXIoc2VsZik6DQogICAgICAgIHJldHVybiBzZWxmLl9lZmZlY3RpdmVfbWF4X2xpbmVfbnVtYmVyDQoNCg0KY2xhc3MgTWVzc2FnZXNTdG9yZToNCiAgICAiIiJUaGUgbWVzc2FnZXMgc3RvcmUga25vd3MgaW5mb3JtYXRpb24gYWJvdXQgZXZlcnkgcG9zc2libGUgbWVzc2FnZSBidXQgaGFzDQogICAgbm8gcGFydGljdWxhciBzdGF0ZSBkdXJpbmcgYW5hbHlzaXMuDQogICAgIiIiDQoNCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgICMgUHJpbWFyeSByZWdpc3RyeSBmb3IgYWxsIGFjdGl2ZSBtZXNzYWdlcyAoaS5lLiBhbGwgbWVzc2FnZXMNCiAgICAgICAgIyB0aGF0IGNhbiBiZSBlbWl0dGVkIGJ5IHB5bGludCBmb3IgdGhlIHVuZGVybHlpbmcgUHl0aG9uDQogICAgICAgICMgdmVyc2lvbikuIEl0IGNvbnRhaW5zIHRoZSAxOjEgbWFwcGluZyBmcm9tIHN5bWJvbGljIG5hbWVzDQogICAgICAgICMgdG8gbWVzc2FnZSBkZWZpbml0aW9uIG9iamVjdHMuDQogICAgICAgICMgS2V5cyBhcmUgbXNnIGlkcywgdmFsdWVzIGFyZSBhIDItdXBsZSB3aXRoIHRoZSBtc2cgdHlwZSBhbmQgdGhlDQogICAgICAgICMgbXNnIGl0c2VsZg0KICAgICAgICBzZWxmLl9tZXNzYWdlcyA9IHt9DQogICAgICAgICMgTWFwcyBhbHRlcm5hdGl2ZSBuYW1lcyAobnVtZXJpYyBJRHMsIGRlcHJlY2F0ZWQgbmFtZXMpIHRvDQogICAgICAgICMgbWVzc2FnZSBkZWZpbml0aW9ucy4gTWF5IGNvbnRhaW4gc2V2ZXJhbCBuYW1lcyBmb3IgZWFjaCBkZWZpbml0aW9uDQogICAgICAgICMgb2JqZWN0Lg0KICAgICAgICBzZWxmLl9hbHRlcm5hdGl2ZV9uYW1lcyA9IHt9DQogICAgICAgIHNlbGYuX21zZ3NfYnlfY2F0ZWdvcnkgPSBjb2xsZWN0aW9ucy5kZWZhdWx0ZGljdChsaXN0KQ0KDQogICAgQHByb3BlcnR5DQogICAgZGVmIG1lc3NhZ2VzKHNlbGYpOg0KICAgICAgICAiIiJUaGUgbGlzdCBvZiBhbGwgYWN0aXZlIG1lc3NhZ2VzLiIiIg0KICAgICAgICByZXR1cm4gc2VsZi5fbWVzc2FnZXMudmFsdWVzKCkNCg0KICAgIGRlZiBhZGRfcmVuYW1lZF9tZXNzYWdlKHNlbGYsIG9sZF9pZCwgb2xkX3N5bWJvbCwgbmV3X3N5bWJvbCk6DQogICAgICAgICIiIlJlZ2lzdGVyIHRoZSBvbGQgSUQgYW5kIHN5bWJvbCBmb3IgYSB3YXJuaW5nIHRoYXQgd2FzIHJlbmFtZWQuDQoNCiAgICAgICAgVGhpcyBhbGxvd3MgdXNlcnMgdG8ga2VlcCB1c2luZyB0aGUgb2xkIElEL3N5bWJvbCBpbiBzdXBwcmVzc2lvbnMuDQogICAgICAgICIiIg0KICAgICAgICBtc2cgPSBzZWxmLmdldF9tZXNzYWdlX2RlZmluaXRpb24obmV3X3N5bWJvbCkNCiAgICAgICAgbXNnLm9sZF9uYW1lcy5hcHBlbmQoKG9sZF9pZCwgb2xkX3N5bWJvbCkpDQogICAgICAgIHNlbGYuX3JlZ2lzdGVyX2FsdGVybmF0aXZlX25hbWUobXNnLCBvbGRfaWQsIG9sZF9zeW1ib2wpDQoNCiAgICBAc3RhdGljbWV0aG9kDQogICAgZGVmIGdldF9jaGVja2VyX21lc3NhZ2VfZGVmaW5pdGlvbnMoY2hlY2tlcik6DQogICAgICAgICIiIlJldHVybiB0aGUgbGlzdCBvZiBtZXNzYWdlcyBkZWZpbml0aW9ucyBmb3IgYSBjaGVja2VyLg0KDQogICAgICAgIDpwYXJhbSBCYXNlQ2hlY2tlciBjaGVja2VyOg0KICAgICAgICA6cnR5cGU6IGxpc3QNCiAgICAgICAgOnJldHVybjogQSBsaXN0IG9mIE1lc3NhZ2VEZWZpbml0aW9uLg0KICAgICAgICAiIiINCiAgICAgICAgbWVzc2FnZV9kZWZpbml0aW9ucyA9IFtdDQogICAgICAgIGZvciBtc2dpZCwgbXNnX3R1cGxlIGluIHNvcnRlZChjaGVja2VyLm1zZ3MuaXRlbXMoKSk6DQogICAgICAgICAgICBtZXNzYWdlID0gYnVpbGRfbWVzc2FnZV9kZWYoY2hlY2tlciwgbXNnaWQsIG1zZ190dXBsZSkNCiAgICAgICAgICAgIG1lc3NhZ2VfZGVmaW5pdGlvbnMuYXBwZW5kKG1lc3NhZ2UpDQogICAgICAgIHJldHVybiBtZXNzYWdlX2RlZmluaXRpb25zDQoNCiAgICBkZWYgcmVnaXN0ZXJfbWVzc2FnZXMoc2VsZiwgY2hlY2tlcik6DQogICAgICAgICIiIlJlZ2lzdGVyIG1lc3NhZ2VzIGZyb20gYSBjaGVja2VyLg0KDQogICAgICAgIDpwYXJhbSBCYXNlQ2hlY2tlciBjaGVja2VyOg0KICAgICAgICAiIiINCiAgICAgICAgbWVzc2FnZXMgPSBzZWxmLmdldF9jaGVja2VyX21lc3NhZ2VfZGVmaW5pdGlvbnMoY2hlY2tlcikNCiAgICAgICAgc2VsZi5fY2hlY2tfY2hlY2tlcl9jb25zaXN0ZW5jeShtZXNzYWdlcykNCiAgICAgICAgZm9yIG1lc3NhZ2UgaW4gbWVzc2FnZXM6DQogICAgICAgICAgICBzZWxmLnJlZ2lzdGVyX21lc3NhZ2UobWVzc2FnZSkNCg0KICAgIGRlZiByZWdpc3Rlcl9tZXNzYWdlKHNlbGYsIG1lc3NhZ2UpOg0KICAgICAgICAiIiJSZWdpc3RlciBhIE1lc3NhZ2VEZWZpbml0aW9uIHdpdGggY29uc2lzdGVuY3kgaW4gbWluZC4NCg0KICAgICAgICA6cGFyYW0gTWVzc2FnZURlZmluaXRpb24gbWVzc2FnZTogVGhlIG1lc3NhZ2UgZGVmaW5pdGlvbiBiZWluZyBhZGRlZC4NCiAgICAgICAgIiIiDQogICAgICAgIHNlbGYuX2NoZWNrX2lkX2FuZF9zeW1ib2xfY29uc2lzdGVuY3kobWVzc2FnZS5tc2dpZCwgbWVzc2FnZS5zeW1ib2wpDQogICAgICAgIHNlbGYuX2NoZWNrX3N5bWJvbChtZXNzYWdlLm1zZ2lkLCBtZXNzYWdlLnN5bWJvbCkNCiAgICAgICAgc2VsZi5fY2hlY2tfbXNnaWQobWVzc2FnZS5tc2dpZCwgbWVzc2FnZS5zeW1ib2wpDQogICAgICAgIGZvciBvbGRfbmFtZSBpbiBtZXNzYWdlLm9sZF9uYW1lczoNCiAgICAgICAgICAgIHNlbGYuX2NoZWNrX3N5bWJvbChtZXNzYWdlLm1zZ2lkLCBvbGRfbmFtZVsxXSkNCiAgICAgICAgc2VsZi5fbWVzc2FnZXNbbWVzc2FnZS5zeW1ib2xdID0gbWVzc2FnZQ0KICAgICAgICBzZWxmLl9yZWdpc3Rlcl9hbHRlcm5hdGl2ZV9uYW1lKG1lc3NhZ2UsIG1lc3NhZ2UubXNnaWQsIG1lc3NhZ2Uuc3ltYm9sKQ0KICAgICAgICBmb3Igb2xkX2lkLCBvbGRfc3ltYm9sIGluIG1lc3NhZ2Uub2xkX25hbWVzOg0KICAgICAgICAgICAgc2VsZi5fcmVnaXN0ZXJfYWx0ZXJuYXRpdmVfbmFtZShtZXNzYWdlLCBvbGRfaWQsIG9sZF9zeW1ib2wpDQogICAgICAgIHNlbGYuX21zZ3NfYnlfY2F0ZWdvcnlbbWVzc2FnZS5tc2dpZFswXV0uYXBwZW5kKG1lc3NhZ2UubXNnaWQpDQoNCiAgICBAc3RhdGljbWV0aG9kDQogICAgZGVmIF9jaGVja19jaGVja2VyX2NvbnNpc3RlbmN5KG1lc3NhZ2VzKToNCiAgICAgICAgIiIiQ2hlY2sgdGhlIG1zZ2lkIGNvbnNpc3RlbmN5IGluIGEgbGlzdCBvZiBtZXNzYWdlcyBkZWZpbml0aW9ucy4NCg0KICAgICAgICBtc2cgaWRzIGZvciBhIGNoZWNrZXIgc2hvdWxkIGJlIGEgc3RyaW5nIG9mIGxlbiA0LCB3aGVyZSB0aGUgdHdvIGZpcnN0DQogICAgICAgIGNoYXJhY3RlcnMgYXJlIHRoZSBjaGVja2VyIGlkIGFuZCB0aGUgdHdvIGxhc3QgdGhlIG1zZyBpZCBpbiB0aGlzDQogICAgICAgIGNoZWNrZXIuDQoNCiAgICAgICAgOnBhcmFtIGxpc3QgbWVzc2FnZXM6IExpc3Qgb2YgTWVzc2FnZURlZmluaXRpb24uDQogICAgICAgIDpyYWlzZXMgSW52YWxpZE1lc3NhZ2VFcnJvcjogSWYgdGhlIGNoZWNrZXIgaWQgaW4gdGhlIG1lc3NhZ2VzIGFyZSBub3QNCiAgICAgICAgYWx3YXlzIHRoZSBzYW1lDQogICAgICAgICIiIg0KICAgICAgICBjaGVja2VyX2lkID0gTm9uZQ0KICAgICAgICBleGlzdGluZ19pZHMgPSBbXQ0KICAgICAgICBmb3IgbWVzc2FnZSBpbiBtZXNzYWdlczoNCiAgICAgICAgICAgIGlmIGNoZWNrZXJfaWQgaXMgbm90IE5vbmUgYW5kIGNoZWNrZXJfaWQgIT0gbWVzc2FnZS5tc2dpZFsxOjNdOg0KICAgICAgICAgICAgICAgIGVycm9yX21zZyA9ICJJbmNvbnNpc3RlbnQgY2hlY2tlciBwYXJ0IGluIG1lc3NhZ2UgaWQgIg0KICAgICAgICAgICAgICAgIGVycm9yX21zZyArPSAiJ3t9JyAoZXhwZWN0ZWQgJ3h7Y2hlY2tlcl9pZH14eCcgIi5mb3JtYXQoDQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubXNnaWQsIGNoZWNrZXJfaWQ9Y2hlY2tlcl9pZA0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICBlcnJvcl9tc2cgKz0gImJlY2F1c2Ugd2UgYWxyZWFkeSBoYWQge2V4aXN0aW5nX2lkc30pLiIuZm9ybWF0KA0KICAgICAgICAgICAgICAgICAgICBleGlzdGluZ19pZHM9ZXhpc3RpbmdfaWRzDQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgIHJhaXNlIEludmFsaWRNZXNzYWdlRXJyb3IoZXJyb3JfbXNnKQ0KICAgICAgICAgICAgY2hlY2tlcl9pZCA9IG1lc3NhZ2UubXNnaWRbMTozXQ0KICAgICAgICAgICAgZXhpc3RpbmdfaWRzLmFwcGVuZChtZXNzYWdlLm1zZ2lkKQ0KDQoNCiAgICBkZWYgX3JlZ2lzdGVyX2FsdGVybmF0aXZlX25hbWUoc2VsZiwgbXNnLCBtc2dpZCwgc3ltYm9sKToNCiAgICAgICAgIiIiaGVscGVyIGZvciByZWdpc3Rlcl9tZXNzYWdlKCkiIiINCiAgICAgICAgc2VsZi5fY2hlY2tfaWRfYW5kX3N5bWJvbF9jb25zaXN0ZW5jeShtc2dpZCwgc3ltYm9sKQ0KICAgICAgICBzZWxmLl9hbHRlcm5hdGl2ZV9uYW1lc1ttc2dpZF0gPSBtc2cNCiAgICAgICAgc2VsZi5fYWx0ZXJuYXRpdmVfbmFtZXNbc3ltYm9sXSA9IG1zZw0KDQogICAgZGVmIF9jaGVja19zeW1ib2woc2VsZiwgbXNnaWQsIHN5bWJvbCk6DQogICAgICAgICIiIkNoZWNrIHRoYXQgYSBzeW1ib2wgaXMgbm90IGFscmVhZHkgdXNlZC4gIiIiDQogICAgICAgIG90aGVyX21lc3NhZ2UgPSBzZWxmLl9tZXNzYWdlcy5nZXQoc3ltYm9sKQ0KICAgICAgICBpZiBvdGhlcl9tZXNzYWdlOg0KICAgICAgICAgICAgc2VsZi5fcmFpc2VfZHVwbGljYXRlX21zZ19pZChzeW1ib2wsIG1zZ2lkLCBvdGhlcl9tZXNzYWdlLm1zZ2lkKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgYWx0ZXJuYXRpdmVfbXNnaWQgPSBOb25lDQogICAgICAgIGFsdGVybmF0aXZlX21lc3NhZ2UgPSBzZWxmLl9hbHRlcm5hdGl2ZV9uYW1lcy5nZXQoc3ltYm9sKQ0KICAgICAgICBpZiBhbHRlcm5hdGl2ZV9tZXNzYWdlOg0KICAgICAgICAgICAgaWYgYWx0ZXJuYXRpdmVfbWVzc2FnZS5zeW1ib2wgPT0gc3ltYm9sOg0KICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlX21zZ2lkID0gYWx0ZXJuYXRpdmVfbWVzc2FnZS5tc2dpZA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBmb3Igb2xkX21zZ2lkLCBvbGRfc3ltYm9sIGluIGFsdGVybmF0aXZlX21lc3NhZ2Uub2xkX25hbWVzOg0KICAgICAgICAgICAgICAgICAgICBpZiBvbGRfc3ltYm9sID09IHN5bWJvbDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlX21zZ2lkID0gb2xkX21zZ2lkDQogICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgaWYgbXNnaWQgIT0gYWx0ZXJuYXRpdmVfbXNnaWQ6DQogICAgICAgICAgICAgICAgc2VsZi5fcmFpc2VfZHVwbGljYXRlX21zZ19pZChzeW1ib2wsIG1zZ2lkLCBhbHRlcm5hdGl2ZV9tc2dpZCkNCg0KICAgIGRlZiBfY2hlY2tfbXNnaWQoc2VsZiwgbXNnaWQsIHN5bWJvbCk6DQogICAgICAgIGZvciBtZXNzYWdlIGluIHNlbGYuX21lc3NhZ2VzLnZhbHVlcygpOg0KICAgICAgICAgICAgaWYgbWVzc2FnZS5tc2dpZCA9PSBtc2dpZDoNCiAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZV9kdXBsaWNhdGVfc3ltYm9sKG1zZ2lkLCBzeW1ib2wsIG1lc3NhZ2Uuc3ltYm9sKQ0KDQogICAgZGVmIF9jaGVja19pZF9hbmRfc3ltYm9sX2NvbnNpc3RlbmN5KHNlbGYsIG1zZ2lkLCBzeW1ib2wpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBhbHRlcm5hdGl2ZSA9IHNlbGYuX2FsdGVybmF0aXZlX25hbWVzW21zZ2lkXQ0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICBhbHRlcm5hdGl2ZSA9IEZhbHNlDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGlmIG5vdCBhbHRlcm5hdGl2ZToNCiAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZSA9IHNlbGYuX2FsdGVybmF0aXZlX25hbWVzW3N5bWJvbF0NCiAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgIyBUaGVyZSBpcyBubyBhbHRlcm5hdGl2ZSBuYW1lcyBjb25jZXJuaW5nIHRoaXMgbXNnaWQvc3ltYm9sLg0KICAgICAgICAgICAgIyBTbyBub3RoaW5nIHRvIGNoZWNrDQogICAgICAgICAgICByZXR1cm4gTm9uZQ0KICAgICAgICBvbGRfc3ltYm9saWNfbmFtZSA9IE5vbmUNCiAgICAgICAgb2xkX3N5bWJvbGljX2lkID0gTm9uZQ0KICAgICAgICBmb3IgYWx0ZXJuYXRlX21zZ2lkLCBhbHRlcm5hdGVfc3ltYm9sIGluIGFsdGVybmF0aXZlLm9sZF9uYW1lczoNCiAgICAgICAgICAgIGlmIGFsdGVybmF0ZV9tc2dpZCA9PSBtc2dpZCBvciBhbHRlcm5hdGVfc3ltYm9sID09IHN5bWJvbDoNCiAgICAgICAgICAgICAgICBvbGRfc3ltYm9saWNfaWQgPSBhbHRlcm5hdGVfbXNnaWQNCiAgICAgICAgICAgICAgICBvbGRfc3ltYm9saWNfbmFtZSA9IGFsdGVybmF0ZV9zeW1ib2wNCiAgICAgICAgaWYgc3ltYm9sIG5vdCBpbiAoYWx0ZXJuYXRpdmUuc3ltYm9sLCBvbGRfc3ltYm9saWNfbmFtZSk6DQogICAgICAgICAgICBpZiBtc2dpZCA9PSBvbGRfc3ltYm9saWNfaWQ6DQogICAgICAgICAgICAgICAgc2VsZi5fcmFpc2VfZHVwbGljYXRlX3N5bWJvbChtc2dpZCwgc3ltYm9sLCBvbGRfc3ltYm9saWNfbmFtZSkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgc2VsZi5fcmFpc2VfZHVwbGljYXRlX3N5bWJvbChtc2dpZCwgc3ltYm9sLCBhbHRlcm5hdGl2ZS5zeW1ib2wpDQogICAgICAgIHJldHVybiBOb25lDQoNCiAgICBAc3RhdGljbWV0aG9kDQogICAgZGVmIF9yYWlzZV9kdXBsaWNhdGVfc3ltYm9sKG1zZ2lkLCBzeW1ib2wsIG90aGVyX3N5bWJvbCk6DQogICAgICAgICIiIlJhaXNlIGFuIGVycm9yIHdoZW4gYSBzeW1ib2wgaXMgZHVwbGljYXRlZC4NCg0KICAgICAgICA6cGFyYW0gc3RyIG1zZ2lkOiBUaGUgbXNnaWQgY29ycmVzcG9uZGluZyB0byB0aGUgc3ltYm9scw0KICAgICAgICA6cGFyYW0gc3RyIHN5bWJvbDogT2ZmZW5kaW5nIHN5bWJvbA0KICAgICAgICA6cGFyYW0gc3RyIG90aGVyX3N5bWJvbDogT3RoZXIgb2ZmZW5kaW5nIHN5bWJvbA0KICAgICAgICA6cmFpc2VzIEludmFsaWRNZXNzYWdlRXJyb3I6IHdoZW4gYSBzeW1ib2wgaXMgZHVwbGljYXRlZC4NCiAgICAgICAgIiIiDQogICAgICAgIGVycm9yX21lc3NhZ2UgPSAiTWVzc2FnZSBpZCAne21zZ2lkfScgY2Fubm90IGhhdmUgYm90aCAiLmZvcm1hdChtc2dpZD1tc2dpZCkNCiAgICAgICAgZXJyb3JfbWVzc2FnZSArPSAiJ3tvdGhlcl9zeW1ib2x9JyBhbmQgJ3tzeW1ib2x9JyBhcyBzeW1ib2xpYyBuYW1lLiIuZm9ybWF0KA0KICAgICAgICAgICAgb3RoZXJfc3ltYm9sPW90aGVyX3N5bWJvbCwgc3ltYm9sPXN5bWJvbA0KICAgICAgICApDQogICAgICAgIHJhaXNlIEludmFsaWRNZXNzYWdlRXJyb3IoZXJyb3JfbWVzc2FnZSkNCg0KICAgIEBzdGF0aWNtZXRob2QNCiAgICBkZWYgX3JhaXNlX2R1cGxpY2F0ZV9tc2dfaWQoc3ltYm9sLCBtc2dpZCwgb3RoZXJfbXNnaWQpOg0KICAgICAgICAiIiJSYWlzZSBhbiBlcnJvciB3aGVuIGEgbXNnaWQgaXMgZHVwbGljYXRlZC4NCg0KICAgICAgICA6cGFyYW0gc3RyIHN5bWJvbDogVGhlIHN5bWJvbCBjb3JyZXNwb25kaW5nIHRvIHRoZSBtc2dpZHMNCiAgICAgICAgOnBhcmFtIHN0ciBtc2dpZDogT2ZmZW5kaW5nIG1zZ2lkDQogICAgICAgIDpwYXJhbSBzdHIgb3RoZXJfbXNnaWQ6IE90aGVyIG9mZmVuZGluZyBtc2dpZA0KICAgICAgICA6cmFpc2VzIEludmFsaWRNZXNzYWdlRXJyb3I6IHdoZW4gYSBtc2dpZCBpcyBkdXBsaWNhdGVkLg0KICAgICAgICAiIiINCiAgICAgICAgZXJyb3JfbWVzc2FnZSA9ICJNZXNzYWdlIHN5bWJvbCAne3N5bWJvbH0nIGNhbm5vdCBiZSB1c2VkIGZvciAiLmZvcm1hdChzeW1ib2w9c3ltYm9sKQ0KICAgICAgICBlcnJvcl9tZXNzYWdlICs9ICIne290aGVyX21zZ2lkfScgYW5kICd7bXNnaWR9JyBhdCB0aGUgc2FtZSB0aW1lLiIuZm9ybWF0KA0KICAgICAgICAgICAgb3RoZXJfbXNnaWQ9b3RoZXJfbXNnaWQsIG1zZ2lkPW1zZ2lkDQogICAgICAgICkNCiAgICAgICAgcmFpc2UgSW52YWxpZE1lc3NhZ2VFcnJvcihlcnJvcl9tZXNzYWdlKQ0KDQogICAgZGVmIGdldF9tZXNzYWdlX2RlZmluaXRpb24oc2VsZiwgbXNnaWRfb3Jfc3ltYm9sKToNCiAgICAgICAgIiIiUmV0dXJucyB0aGUgTWVzc2FnZSBvYmplY3QgZm9yIHRoaXMgbWVzc2FnZS4NCg0KICAgICAgICA6cGFyYW0gc3RyIG1zZ2lkX29yX3N5bWJvbDogbXNnaWRfb3Jfc3ltYm9sIG1heSBiZSBlaXRoZXIgYSBudW1lcmljIG9yIHN5bWJvbGljIGlkLg0KICAgICAgICA6cmFpc2VzIFVua25vd25NZXNzYWdlRXJyb3I6IGlmIHRoZSBtZXNzYWdlIGlkIGlzIG5vdCBkZWZpbmVkLg0KICAgICAgICA6cnR5cGU6IE1lc3NhZ2VEZWZpbml0aW9uDQogICAgICAgIDpyZXR1cm46IEEgbWVzc2FnZSBkZWZpbml0aW9uIGNvcnJlc3BvbmRpbmcgdG8gbXNnaWRfb3Jfc3ltYm9sDQogICAgICAgICIiIg0KICAgICAgICBpZiBtc2dpZF9vcl9zeW1ib2xbMTpdLmlzZGlnaXQoKToNCiAgICAgICAgICAgIG1zZ2lkX29yX3N5bWJvbCA9IG1zZ2lkX29yX3N5bWJvbC51cHBlcigpDQogICAgICAgIGZvciBzb3VyY2UgaW4gKHNlbGYuX2FsdGVybmF0aXZlX25hbWVzLCBzZWxmLl9tZXNzYWdlcyk6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZVttc2dpZF9vcl9zeW1ib2xdDQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICByYWlzZSBVbmtub3duTWVzc2FnZUVycm9yKA0KICAgICAgICAgICAgJ05vIHN1Y2ggbWVzc2FnZSBpZCB7bXNnaWRfb3Jfc3ltYm9sfScuZm9ybWF0KG1zZ2lkX29yX3N5bWJvbD1tc2dpZF9vcl9zeW1ib2wpDQogICAgICAgICkNCg0KICAgIGRlZiBnZXRfbXNnX2Rpc3BsYXlfc3RyaW5nKHNlbGYsIG1zZ2lkKToNCiAgICAgICAgIiIiR2VuZXJhdGVzIGEgdXNlci1jb25zdW1hYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbWVzc2FnZS4NCg0KICAgICAgICBDYW4gYmUganVzdCB0aGUgbWVzc2FnZSBJRCBvciB0aGUgSUQgYW5kIHRoZSBzeW1ib2wuDQogICAgICAgICIiIg0KICAgICAgICByZXR1cm4gcmVwcihzZWxmLmdldF9tZXNzYWdlX2RlZmluaXRpb24obXNnaWQpLnN5bWJvbCkNCg0KICAgIGRlZiBoZWxwX21lc3NhZ2Uoc2VsZiwgbXNnaWRzKToNCiAgICAgICAgIiIiRGlzcGxheSBoZWxwIG1lc3NhZ2VzIGZvciB0aGUgZ2l2ZW4gbWVzc2FnZSBpZGVudGlmaWVycyIiIg0KICAgICAgICBmb3IgbXNnaWQgaW4gbXNnaWRzOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHByaW50KHNlbGYuZ2V0X21lc3NhZ2VfZGVmaW5pdGlvbihtc2dpZCkuZm9ybWF0X2hlbHAoY2hlY2tlcnJlZj1UcnVlKSkNCiAgICAgICAgICAgICAgICBwcmludCgiIikNCiAgICAgICAgICAgIGV4Y2VwdCBVbmtub3duTWVzc2FnZUVycm9yIGFzIGV4Og0KICAgICAgICAgICAgICAgIHByaW50KGV4KQ0KICAgICAgICAgICAgICAgIHByaW50KCIiKQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICBkZWYgbGlzdF9tZXNzYWdlcyhzZWxmKToNCiAgICAgICAgIiIiT3V0cHV0IGZ1bGwgbWVzc2FnZXMgbGlzdCBkb2N1bWVudGF0aW9uIGluIFJlU1QgZm9ybWF0LiAiIiINCiAgICAgICAgbWVzc2FnZXMgPSBzb3J0ZWQoc2VsZi5fbWVzc2FnZXMudmFsdWVzKCksIGtleT1sYW1iZGEgbTogbS5tc2dpZCkNCiAgICAgICAgZm9yIG1lc3NhZ2UgaW4gbWVzc2FnZXM6DQogICAgICAgICAgICBpZiBub3QgbWVzc2FnZS5tYXlfYmVfZW1pdHRlZCgpOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBwcmludChtZXNzYWdlLmZvcm1hdF9oZWxwKGNoZWNrZXJyZWY9RmFsc2UpKQ0KICAgICAgICBwcmludCgiIikNCg0KDQpjbGFzcyBSZXBvcnRzSGFuZGxlck1peEluOg0KICAgICIiImEgbWl4LWluIGNsYXNzIGNvbnRhaW5pbmcgYWxsIHRoZSByZXBvcnRzIGFuZCBzdGF0cyBtYW5pcHVsYXRpb24NCiAgICByZWxhdGVkIG1ldGhvZHMgZm9yIHRoZSBtYWluIGxpbnQgY2xhc3MNCiAgICAiIiINCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgIHNlbGYuX3JlcG9ydHMgPSBjb2xsZWN0aW9ucy5kZWZhdWx0ZGljdChsaXN0KQ0KICAgICAgICBzZWxmLl9yZXBvcnRzX3N0YXRlID0ge30NCg0KICAgIGRlZiByZXBvcnRfb3JkZXIoc2VsZik6DQogICAgICAgICIiIiBSZXR1cm4gYSBsaXN0IG9mIHJlcG9ydHMsIHNvcnRlZCBpbiB0aGUgb3JkZXINCiAgICAgICAgaW4gd2hpY2ggdGhleSBtdXN0IGJlIGNhbGxlZC4NCiAgICAgICAgIiIiDQogICAgICAgIHJldHVybiBsaXN0KHNlbGYuX3JlcG9ydHMpDQoNCiAgICBkZWYgcmVnaXN0ZXJfcmVwb3J0KHNlbGYsIHJlcG9ydGlkLCByX3RpdGxlLCByX2NiLCBjaGVja2VyKToNCiAgICAgICAgIiIicmVnaXN0ZXIgYSByZXBvcnQNCg0KICAgICAgICByZXBvcnRpZCBpcyB0aGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSByZXBvcnQNCiAgICAgICAgcl90aXRsZSB0aGUgcmVwb3J0J3MgdGl0bGUNCiAgICAgICAgcl9jYiB0aGUgbWV0aG9kIHRvIGNhbGwgdG8gbWFrZSB0aGUgcmVwb3J0DQogICAgICAgIGNoZWNrZXIgaXMgdGhlIGNoZWNrZXIgZGVmaW5pbmcgdGhlIHJlcG9ydA0KICAgICAgICAiIiINCiAgICAgICAgcmVwb3J0aWQgPSByZXBvcnRpZC51cHBlcigpDQogICAgICAgIHNlbGYuX3JlcG9ydHNbY2hlY2tlcl0uYXBwZW5kKChyZXBvcnRpZCwgcl90aXRsZSwgcl9jYikpDQoNCiAgICBkZWYgZW5hYmxlX3JlcG9ydChzZWxmLCByZXBvcnRpZCk6DQogICAgICAgICIiImRpc2FibGUgdGhlIHJlcG9ydCBvZiB0aGUgZ2l2ZW4gaWQiIiINCiAgICAgICAgcmVwb3J0aWQgPSByZXBvcnRpZC51cHBlcigpDQogICAgICAgIHNlbGYuX3JlcG9ydHNfc3RhdGVbcmVwb3J0aWRdID0gVHJ1ZQ0KDQogICAgZGVmIGRpc2FibGVfcmVwb3J0KHNlbGYsIHJlcG9ydGlkKToNCiAgICAgICAgIiIiZGlzYWJsZSB0aGUgcmVwb3J0IG9mIHRoZSBnaXZlbiBpZCIiIg0KICAgICAgICByZXBvcnRpZCA9IHJlcG9ydGlkLnVwcGVyKCkNCiAgICAgICAgc2VsZi5fcmVwb3J0c19zdGF0ZVtyZXBvcnRpZF0gPSBGYWxzZQ0KDQogICAgZGVmIHJlcG9ydF9pc19lbmFibGVkKHNlbGYsIHJlcG9ydGlkKToNCiAgICAgICAgIiIicmV0dXJuIHRydWUgaWYgdGhlIHJlcG9ydCBhc3NvY2lhdGVkIHRvIHRoZSBnaXZlbiBpZGVudGlmaWVyIGlzDQogICAgICAgIGVuYWJsZWQNCiAgICAgICAgIiIiDQogICAgICAgIHJldHVybiBzZWxmLl9yZXBvcnRzX3N0YXRlLmdldChyZXBvcnRpZCwgVHJ1ZSkNCg0KICAgIGRlZiBtYWtlX3JlcG9ydHMoc2VsZiwgc3RhdHMsIG9sZF9zdGF0cyk6DQogICAgICAgICIiInJlbmRlciByZWdpc3RlcmVkIHJlcG9ydHMiIiINCiAgICAgICAgc2VjdCA9IFNlY3Rpb24oJ1JlcG9ydCcsDQogICAgICAgICAgICAgICAgICAgICAgICclcyBzdGF0ZW1lbnRzIGFuYWx5c2VkLiclIChzZWxmLnN0YXRzWydzdGF0ZW1lbnQnXSkpDQogICAgICAgIGZvciBjaGVja2VyIGluIHNlbGYucmVwb3J0X29yZGVyKCk6DQogICAgICAgICAgICBmb3IgcmVwb3J0aWQsIHJfdGl0bGUsIHJfY2IgaW4gc2VsZi5fcmVwb3J0c1tjaGVja2VyXToNCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5yZXBvcnRfaXNfZW5hYmxlZChyZXBvcnRpZCk6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgcmVwb3J0X3NlY3QgPSBTZWN0aW9uKHJfdGl0bGUpDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICByX2NiKHJlcG9ydF9zZWN0LCBzdGF0cywgb2xkX3N0YXRzKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFbXB0eVJlcG9ydEVycm9yOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgIHJlcG9ydF9zZWN0LnJlcG9ydF9pZCA9IHJlcG9ydGlkDQogICAgICAgICAgICAgICAgc2VjdC5hcHBlbmQocmVwb3J0X3NlY3QpDQogICAgICAgIHJldHVybiBzZWN0DQoNCiAgICBkZWYgYWRkX3N0YXRzKHNlbGYsICoqa3dhcmdzKToNCiAgICAgICAgIiIiYWRkIHNvbWUgc3RhdHMgZW50cmllcyB0byB0aGUgc3RhdGlzdGljIGRpY3Rpb25hcnkNCiAgICAgICAgcmFpc2UgYW4gQXNzZXJ0aW9uRXJyb3IgaWYgdGhlcmUgaXMgYSBrZXkgY29uZmxpY3QNCiAgICAgICAgIiIiDQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3YXJncy5pdGVtcygpOg0KICAgICAgICAgICAgaWYga2V5Wy0xXSA9PSAnXyc6DQogICAgICAgICAgICAgICAga2V5ID0ga2V5WzotMV0NCiAgICAgICAgICAgIGFzc2VydCBrZXkgbm90IGluIHNlbGYuc3RhdHMNCiAgICAgICAgICAgIHNlbGYuc3RhdHNba2V5XSA9IHZhbHVlDQogICAgICAgIHJldHVybiBzZWxmLnN0YXRzDQoNCmRlZiBfYmFzZW5hbWVfaW5fYmxhY2tsaXN0X3JlKGJhc2VfbmFtZSwgYmxhY2tfbGlzdF9yZSk6DQogICAgIiIiRGV0ZXJtaW5lcyBpZiB0aGUgYmFzZW5hbWUgaXMgbWF0Y2hlZCBpbiBhIHJlZ2V4IGJsYWNrbGlzdA0KDQogICAgOnBhcmFtIHN0ciBiYXNlX25hbWU6IFRoZSBiYXNlbmFtZSBvZiB0aGUgZmlsZQ0KICAgIDpwYXJhbSBsaXN0IGJsYWNrX2xpc3RfcmU6IEEgY29sbGVjdGlvbiBvZiByZWdleCBwYXR0ZXJucyB0byBtYXRjaCBhZ2FpbnN0Lg0KICAgICAgICBTdWNjZXNzZnVsIG1hdGNoZXMgYXJlIGJsYWNrbGlzdGVkLg0KDQogICAgOnJldHVybnM6IGBUcnVlYCBpZiB0aGUgYmFzZW5hbWUgaXMgYmxhY2tsaXN0ZWQsIGBGYWxzZWAgb3RoZXJ3aXNlLg0KICAgIDpydHlwZTogYm9vbA0KICAgICIiIg0KICAgIGZvciBmaWxlX3BhdHRlcm4gaW4gYmxhY2tfbGlzdF9yZToNCiAgICAgICAgaWYgZmlsZV9wYXR0ZXJuLm1hdGNoKGJhc2VfbmFtZSk6DQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0KDQpkZWYgX21vZHBhdGhfZnJvbV9maWxlKGZpbGVuYW1lLCBpc19uYW1lc3BhY2UpOg0KICAgIGRlZiBfaXNfcGFja2FnZV9jYihwYXRoLCBwYXJ0cyk6DQogICAgICAgIHJldHVybiBtb2R1dGlscy5jaGVja19tb2RwYXRoX2hhc19pbml0KHBhdGgsIHBhcnRzKSBvciBpc19uYW1lc3BhY2UNCg0KICAgIHJldHVybiBtb2R1dGlscy5tb2RwYXRoX2Zyb21fZmlsZV93aXRoX2NhbGxiYWNrKGZpbGVuYW1lLCBpc19wYWNrYWdlX2NiPV9pc19wYWNrYWdlX2NiKQ0KDQoNCmRlZiBleHBhbmRfbW9kdWxlcyhmaWxlc19vcl9tb2R1bGVzLCBibGFja19saXN0LCBibGFja19saXN0X3JlKToNCiAgICAiIiJ0YWtlIGEgbGlzdCBvZiBmaWxlcy9tb2R1bGVzL3BhY2thZ2VzIGFuZCByZXR1cm4gdGhlIGxpc3Qgb2YgdHVwbGUNCiAgICAoZmlsZSwgbW9kdWxlIG5hbWUpIHdoaWNoIGhhdmUgdG8gYmUgYWN0dWFsbHkgY2hlY2tlZA0KICAgICIiIg0KICAgIHJlc3VsdCA9IFtdDQogICAgZXJyb3JzID0gW10NCiAgICBmb3Igc29tZXRoaW5nIGluIGZpbGVzX29yX21vZHVsZXM6DQogICAgICAgIGlmIG9zLnBhdGguYmFzZW5hbWUoc29tZXRoaW5nKSBpbiBibGFja19saXN0Og0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgaWYgX2Jhc2VuYW1lX2luX2JsYWNrbGlzdF9yZShvcy5wYXRoLmJhc2VuYW1lKHNvbWV0aGluZyksIGJsYWNrX2xpc3RfcmUpOg0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgaWYgZXhpc3RzKHNvbWV0aGluZyk6DQogICAgICAgICAgICAjIHRoaXMgaXMgYSBmaWxlIG9yIGEgZGlyZWN0b3J5DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgbW9kbmFtZSA9ICcuJy5qb2luKG1vZHV0aWxzLm1vZHBhdGhfZnJvbV9maWxlKHNvbWV0aGluZykpDQogICAgICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgICAgICAgICAgICAgbW9kbmFtZSA9IHNwbGl0ZXh0KGJhc2VuYW1lKHNvbWV0aGluZykpWzBdDQogICAgICAgICAgICBpZiBpc2Rpcihzb21ldGhpbmcpOg0KICAgICAgICAgICAgICAgIGZpbGVwYXRoID0gam9pbihzb21ldGhpbmcsICdfX2luaXRfXy5weScpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGZpbGVwYXRoID0gc29tZXRoaW5nDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICAjIHN1cHBvc2UgaXQncyBhIG1vZHVsZSBvciBwYWNrYWdlDQogICAgICAgICAgICBtb2RuYW1lID0gc29tZXRoaW5nDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgZmlsZXBhdGggPSBtb2R1dGlscy5maWxlX2Zyb21fbW9kcGF0aChtb2RuYW1lLnNwbGl0KCcuJykpDQogICAgICAgICAgICAgICAgaWYgZmlsZXBhdGggaXMgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGV4Y2VwdCAoSW1wb3J0RXJyb3IsIFN5bnRheEVycm9yKSBhcyBleDoNCiAgICAgICAgICAgICAgICAjIEZJWE1FIHAzayA6IHRoZSBTeW50YXhFcnJvciBpcyBhIFB5dGhvbiBidWcgYW5kIHNob3VsZCBiZQ0KICAgICAgICAgICAgICAgICMgcmVtb3ZlZCBhcyBzb29uIGFzIHBvc3NpYmxlIGh0dHA6Ly9idWdzLnB5dGhvbi5vcmcvaXNzdWUxMDU4OA0KICAgICAgICAgICAgICAgIGVycm9ycy5hcHBlbmQoeydrZXknOiAnZmF0YWwnLCAnbW9kJzogbW9kbmFtZSwgJ2V4JzogZXh9KQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgZmlsZXBhdGggPSBub3JtcGF0aChmaWxlcGF0aCkNCiAgICAgICAgbW9kcGFydHMgPSAobW9kbmFtZSBvciBzb21ldGhpbmcpLnNwbGl0KCcuJykNCg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzcGVjID0gbW9kdXRpbHMuZmlsZV9pbmZvX2Zyb21fbW9kcGF0aChtb2RwYXJ0cywgcGF0aD1zeXMucGF0aCkNCiAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yOg0KICAgICAgICAgICAgIyBNaWdodCBub3QgYmUgYWNjZXB0YWJsZSwgZG9uJ3QgY3Jhc2guDQogICAgICAgICAgICBpc19uYW1lc3BhY2UgPSBGYWxzZQ0KICAgICAgICAgICAgaXNfZGlyZWN0b3J5ID0gaXNkaXIoc29tZXRoaW5nKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgaXNfbmFtZXNwYWNlID0gbW9kdXRpbHMuaXNfbmFtZXNwYWNlKHNwZWMpDQogICAgICAgICAgICBpc19kaXJlY3RvcnkgPSBtb2R1dGlscy5pc19kaXJlY3Rvcnkoc3BlYykNCg0KICAgICAgICBpZiBub3QgaXNfbmFtZXNwYWNlOg0KICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCh7J3BhdGgnOiBmaWxlcGF0aCwgJ25hbWUnOiBtb2RuYW1lLCAnaXNhcmcnOiBUcnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Jhc2VwYXRoJzogZmlsZXBhdGgsICdiYXNlbmFtZSc6IG1vZG5hbWV9KQ0KDQogICAgICAgIGhhc19pbml0ID0gKG5vdCAobW9kbmFtZS5lbmRzd2l0aCgnLl9faW5pdF9fJykgb3IgbW9kbmFtZSA9PSAnX19pbml0X18nKQ0KICAgICAgICAgICAgICAgICAgICBhbmQgYmFzZW5hbWUoZmlsZXBhdGgpID09ICdfX2luaXRfXy5weScpDQoNCiAgICAgICAgaWYgaGFzX2luaXQgb3IgaXNfbmFtZXNwYWNlIG9yIGlzX2RpcmVjdG9yeToNCiAgICAgICAgICAgIGZvciBzdWJmaWxlcGF0aCBpbiBtb2R1dGlscy5nZXRfbW9kdWxlX2ZpbGVzKGRpcm5hbWUoZmlsZXBhdGgpLCBibGFja19saXN0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdF9hbGw9aXNfbmFtZXNwYWNlKToNCiAgICAgICAgICAgICAgICBpZiBmaWxlcGF0aCA9PSBzdWJmaWxlcGF0aDoNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICBpZiBfYmFzZW5hbWVfaW5fYmxhY2tsaXN0X3JlKGJhc2VuYW1lKHN1YmZpbGVwYXRoKSwgYmxhY2tfbGlzdF9yZSk6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgICAgICAgICBtb2RwYXRoID0gX21vZHBhdGhfZnJvbV9maWxlKHN1YmZpbGVwYXRoLCBpc19uYW1lc3BhY2UpDQogICAgICAgICAgICAgICAgc3VibW9kbmFtZSA9ICcuJy5qb2luKG1vZHBhdGgpDQogICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCh7J3BhdGgnOiBzdWJmaWxlcGF0aCwgJ25hbWUnOiBzdWJtb2RuYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpc2FyZyc6IEZhbHNlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiYXNlcGF0aCc6IGZpbGVwYXRoLCAnYmFzZW5hbWUnOiBtb2RuYW1lfSkNCiAgICByZXR1cm4gcmVzdWx0LCBlcnJvcnMNCg0KDQpjbGFzcyBQeUxpbnRBU1RXYWxrZXI6DQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgbGludGVyKToNCiAgICAgICAgIyBjYWxsYmFja3MgcGVyIG5vZGUgdHlwZXMNCiAgICAgICAgc2VsZi5uYnN0YXRlbWVudHMgPSAwDQogICAgICAgIHNlbGYudmlzaXRfZXZlbnRzID0gY29sbGVjdGlvbnMuZGVmYXVsdGRpY3QobGlzdCkNCiAgICAgICAgc2VsZi5sZWF2ZV9ldmVudHMgPSBjb2xsZWN0aW9ucy5kZWZhdWx0ZGljdChsaXN0KQ0KICAgICAgICBzZWxmLmxpbnRlciA9IGxpbnRlcg0KDQogICAgZGVmIF9pc19tZXRob2RfZW5hYmxlZChzZWxmLCBtZXRob2QpOg0KICAgICAgICBpZiBub3QgaGFzYXR0cihtZXRob2QsICdjaGVja3NfbXNncycpOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgZm9yIG1zZ19kZXNjIGluIG1ldGhvZC5jaGVja3NfbXNnczoNCiAgICAgICAgICAgIGlmIHNlbGYubGludGVyLmlzX21lc3NhZ2VfZW5hYmxlZChtc2dfZGVzYyk6DQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICBkZWYgYWRkX2NoZWNrZXIoc2VsZiwgY2hlY2tlcik6DQogICAgICAgICIiIndhbGsgdG8gdGhlIGNoZWNrZXIncyBkaXIgYW5kIGNvbGxlY3QgdmlzaXQgYW5kIGxlYXZlIG1ldGhvZHMiIiINCiAgICAgICAgIyBYWFggOiBzaG91bGQgYmUgcG9zc2libGUgdG8gbWVyZ2UgbmVlZGVkX2NoZWNrZXJzIGFuZCBhZGRfY2hlY2tlcg0KICAgICAgICB2Y2lkcyA9IHNldCgpDQogICAgICAgIGxjaWRzID0gc2V0KCkNCiAgICAgICAgdmlzaXRzID0gc2VsZi52aXNpdF9ldmVudHMNCiAgICAgICAgbGVhdmVzID0gc2VsZi5sZWF2ZV9ldmVudHMNCiAgICAgICAgZm9yIG1lbWJlciBpbiBkaXIoY2hlY2tlcik6DQogICAgICAgICAgICBjaWQgPSBtZW1iZXJbNjpdDQogICAgICAgICAgICBpZiBjaWQgPT0gJ2RlZmF1bHQnOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBpZiBtZW1iZXIuc3RhcnRzd2l0aCgndmlzaXRfJyk6DQogICAgICAgICAgICAgICAgdl9tZXRoID0gZ2V0YXR0cihjaGVja2VyLCBtZW1iZXIpDQogICAgICAgICAgICAgICAgIyBkb24ndCB1c2UgdmlzaXRfbWV0aG9kcyB3aXRoIG5vIGFjdGl2YXRlZCBtZXNzYWdlOg0KICAgICAgICAgICAgICAgIGlmIHNlbGYuX2lzX21ldGhvZF9lbmFibGVkKHZfbWV0aCk6DQogICAgICAgICAgICAgICAgICAgIHZpc2l0c1tjaWRdLmFwcGVuZCh2X21ldGgpDQogICAgICAgICAgICAgICAgICAgIHZjaWRzLmFkZChjaWQpDQogICAgICAgICAgICBlbGlmIG1lbWJlci5zdGFydHN3aXRoKCdsZWF2ZV8nKToNCiAgICAgICAgICAgICAgICBsX21ldGggPSBnZXRhdHRyKGNoZWNrZXIsIG1lbWJlcikNCiAgICAgICAgICAgICAgICAjIGRvbid0IHVzZSBsZWF2ZV9tZXRob2RzIHdpdGggbm8gYWN0aXZhdGVkIG1lc3NhZ2U6DQogICAgICAgICAgICAgICAgaWYgc2VsZi5faXNfbWV0aG9kX2VuYWJsZWQobF9tZXRoKToNCiAgICAgICAgICAgICAgICAgICAgbGVhdmVzW2NpZF0uYXBwZW5kKGxfbWV0aCkNCiAgICAgICAgICAgICAgICAgICAgbGNpZHMuYWRkKGNpZCkNCiAgICAgICAgdmlzaXRfZGVmYXVsdCA9IGdldGF0dHIoY2hlY2tlciwgJ3Zpc2l0X2RlZmF1bHQnLCBOb25lKQ0KICAgICAgICBpZiB2aXNpdF9kZWZhdWx0Og0KICAgICAgICAgICAgZm9yIGNscyBpbiBub2Rlcy5BTExfTk9ERV9DTEFTU0VTOg0KICAgICAgICAgICAgICAgIGNpZCA9IGNscy5fX25hbWVfXy5sb3dlcigpDQogICAgICAgICAgICAgICAgaWYgY2lkIG5vdCBpbiB2Y2lkczoNCiAgICAgICAgICAgICAgICAgICAgdmlzaXRzW2NpZF0uYXBwZW5kKHZpc2l0X2RlZmF1bHQpDQogICAgICAgICMgZm9yIG5vdyB3ZSBoYXZlIG5vICJsZWF2ZV9kZWZhdWx0IiBtZXRob2QgaW4gUHlsaW50DQoNCiAgICBkZWYgd2FsayhzZWxmLCBhc3Ryb2lkKToNCiAgICAgICAgIiIiY2FsbCB2aXNpdCBldmVudHMgb2YgYXN0cm9pZCBjaGVja2VycyBmb3IgdGhlIGdpdmVuIG5vZGUsIHJlY3Vyc2Ugb24NCiAgICAgICAgaXRzIGNoaWxkcmVuLCB0aGVuIGxlYXZlIGV2ZW50cy4NCiAgICAgICAgIiIiDQogICAgICAgIGNpZCA9IGFzdHJvaWQuX19jbGFzc19fLl9fbmFtZV9fLmxvd2VyKCkNCg0KICAgICAgICAjIERldGVjdCBpZiB0aGUgbm9kZSBpcyBhIG5ldyBuYW1lIGZvciBhIGRlcHJlY2F0ZWQgYWxpYXMuDQogICAgICAgICMgSW4gdGhpcyBjYXNlLCBmYXZvdXIgdGhlIG1ldGhvZHMgZm9yIHRoZSBkZXByZWNhdGVkDQogICAgICAgICMgYWxpYXMgaWYgYW55LCAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gYmFja3dhcmRzDQogICAgICAgICMgY29tcGF0aWJpbGl0eS4NCiAgICAgICAgdmlzaXRfZXZlbnRzID0gc2VsZi52aXNpdF9ldmVudHMuZ2V0KGNpZCwgKCkpDQogICAgICAgIGxlYXZlX2V2ZW50cyA9IHNlbGYubGVhdmVfZXZlbnRzLmdldChjaWQsICgpKQ0KDQogICAgICAgIGlmIGFzdHJvaWQuaXNfc3RhdGVtZW50Og0KICAgICAgICAgICAgc2VsZi5uYnN0YXRlbWVudHMgKz0gMQ0KICAgICAgICAjIGdlbmVyYXRlIGV2ZW50cyBmb3IgdGhpcyBub2RlIG9uIGVhY2ggY2hlY2tlcg0KICAgICAgICBmb3IgY2IgaW4gdmlzaXRfZXZlbnRzIG9yICgpOg0KICAgICAgICAgICAgY2IoYXN0cm9pZCkNCiAgICAgICAgIyByZWN1cnNlIG9uIGNoaWxkcmVuDQogICAgICAgIGZvciBjaGlsZCBpbiBhc3Ryb2lkLmdldF9jaGlsZHJlbigpOg0KICAgICAgICAgICAgc2VsZi53YWxrKGNoaWxkKQ0KICAgICAgICBmb3IgY2IgaW4gbGVhdmVfZXZlbnRzIG9yICgpOg0KICAgICAgICAgICAgY2IoYXN0cm9pZCkNCg0KDQpQWV9FWFRTID0gKCcucHknLCAnLnB5YycsICcucHlvJywgJy5weXcnLCAnLnNvJywgJy5kbGwnKQ0KDQpkZWYgcmVnaXN0ZXJfcGx1Z2lucyhsaW50ZXIsIGRpcmVjdG9yeSk6DQogICAgIiIibG9hZCBhbGwgbW9kdWxlIGFuZCBwYWNrYWdlIGluIHRoZSBnaXZlbiBkaXJlY3RvcnksIGxvb2tpbmcgZm9yIGENCiAgICAncmVnaXN0ZXInIGZ1bmN0aW9uIGluIGVhY2ggb25lLCB1c2VkIHRvIHJlZ2lzdGVyIHB5bGludCBjaGVja2Vycw0KICAgICIiIg0KICAgIGltcG9ydGVkID0ge30NCiAgICBmb3IgZmlsZW5hbWUgaW4gb3MubGlzdGRpcihkaXJlY3RvcnkpOg0KICAgICAgICBiYXNlLCBleHRlbnNpb24gPSBzcGxpdGV4dChmaWxlbmFtZSkNCiAgICAgICAgaWYgYmFzZSBpbiBpbXBvcnRlZCBvciBiYXNlID09ICdfX3B5Y2FjaGVfXyc6DQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICBpZiBleHRlbnNpb24gaW4gUFlfRVhUUyBhbmQgYmFzZSAhPSAnX19pbml0X18nIG9yICgNCiAgICAgICAgICAgICAgICBub3QgZXh0ZW5zaW9uIGFuZCBpc2Rpcihqb2luKGRpcmVjdG9yeSwgYmFzZSkpKToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBtb2R1bGUgPSBtb2R1dGlscy5sb2FkX21vZHVsZV9mcm9tX2ZpbGUoam9pbihkaXJlY3RvcnksIGZpbGVuYW1lKSkNCiAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgICAgICAgICAgICAgICMgZW1wdHkgbW9kdWxlIG5hbWUgKHVzdWFsbHkgZW1hY3MgYXV0by1zYXZlIGZpbGVzKQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3IgYXMgZXhjOg0KICAgICAgICAgICAgICAgIHByaW50KCJQcm9ibGVtIGltcG9ydGluZyBtb2R1bGUgJXM6ICVzIiAlIChmaWxlbmFtZSwgZXhjKSwNCiAgICAgICAgICAgICAgICAgICAgICBmaWxlPXN5cy5zdGRlcnIpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIobW9kdWxlLCAncmVnaXN0ZXInKToNCiAgICAgICAgICAgICAgICAgICAgbW9kdWxlLnJlZ2lzdGVyKGxpbnRlcikNCiAgICAgICAgICAgICAgICAgICAgaW1wb3J0ZWRbYmFzZV0gPSAxDQoNCmRlZiBnZXRfZ2xvYmFsX29wdGlvbihjaGVja2VyLCBvcHRpb24sIGRlZmF1bHQ9Tm9uZSk6DQogICAgIiIiIFJldHJpZXZlIGFuIG9wdGlvbiBkZWZpbmVkIGJ5IHRoZSBnaXZlbiAqY2hlY2tlciogb3INCiAgICBieSBhbGwga25vd24gb3B0aW9uIHByb3ZpZGVycy4NCg0KICAgIEl0IHdpbGwgbG9vayBpbiB0aGUgbGlzdCBvZiBhbGwgb3B0aW9ucyBwcm92aWRlcnMNCiAgICB1bnRpbCB0aGUgZ2l2ZW4gKm9wdGlvbiogd2lsbCBiZSBmb3VuZC4NCiAgICBJZiB0aGUgb3B0aW9uIHdhc24ndCBmb3VuZCwgdGhlICpkZWZhdWx0KiB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLg0KICAgICIiIg0KICAgICMgRmlyc3QsIHRyeSBpbiB0aGUgZ2l2ZW4gY2hlY2tlcidzIGNvbmZpZy4NCiAgICAjIEFmdGVyIHRoYXQsIGxvb2sgaW4gdGhlIG9wdGlvbnMgcHJvdmlkZXJzLg0KDQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gZ2V0YXR0cihjaGVja2VyLmNvbmZpZywgb3B0aW9uLnJlcGxhY2UoIi0iLCAiXyIpKQ0KICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoNCiAgICAgICAgcGFzcw0KICAgIGZvciBwcm92aWRlciBpbiBjaGVja2VyLmxpbnRlci5vcHRpb25zX3Byb3ZpZGVyczoNCiAgICAgICAgZm9yIG9wdGlvbnMgaW4gcHJvdmlkZXIub3B0aW9uczoNCiAgICAgICAgICAgIGlmIG9wdGlvbnNbMF0gPT0gb3B0aW9uOg0KICAgICAgICAgICAgICAgIHJldHVybiBnZXRhdHRyKHByb3ZpZGVyLmNvbmZpZywgb3B0aW9uLnJlcGxhY2UoIi0iLCAiXyIpKQ0KICAgIHJldHVybiBkZWZhdWx0DQoNCg0KZGVmIGRlcHJlY2F0ZWRfb3B0aW9uKHNob3J0bmFtZT1Ob25lLCBvcHRfdHlwZT1Ob25lLCBoZWxwX21zZz1Ob25lLCBkZXByZWNhdGlvbl9tc2c9Tm9uZSk6DQogICAgZGVmIF93YXJuX2RlcHJlY2F0ZWQob3B0aW9uLCBvcHRuYW1lLCAqYXJncyk6ICMgcHlsaW50OiBkaXNhYmxlPXVudXNlZC1hcmd1bWVudA0KICAgICAgICBpZiBkZXByZWNhdGlvbl9tc2c6DQogICAgICAgICAgICBzeXMuc3RkZXJyLndyaXRlKGRlcHJlY2F0aW9uX21zZyAlIChvcHRuYW1lLCkpDQoNCiAgICBvcHRpb24gPSB7DQogICAgICAgICdoZWxwJzogaGVscF9tc2csDQogICAgICAgICdoaWRlJzogVHJ1ZSwNCiAgICAgICAgJ3R5cGUnOiBvcHRfdHlwZSwNCiAgICAgICAgJ2FjdGlvbic6ICdjYWxsYmFjaycsDQogICAgICAgICdjYWxsYmFjayc6IF93YXJuX2RlcHJlY2F0ZWQsDQogICAgICAgICdkZXByZWNhdGVkJzogVHJ1ZQ0KICAgIH0NCiAgICBpZiBzaG9ydG5hbWU6DQogICAgICAgIG9wdGlvblsnc2hvcnRuYW1lJ10gPSBzaG9ydG5hbWUNCiAgICByZXR1cm4gb3B0aW9uDQoNCg0KZGVmIF9zcGxpdHN0cmlwKHN0cmluZywgc2VwPScsJyk6DQogICAgIiIicmV0dXJuIGEgbGlzdCBvZiBzdHJpcHBlZCBzdHJpbmcgYnkgc3BsaXR0aW5nIHRoZSBzdHJpbmcgZ2l2ZW4gYXMNCiAgICBhcmd1bWVudCBvbiBgc2VwYCAoJywnIGJ5IGRlZmF1bHQpLiBFbXB0eSBzdHJpbmcgYXJlIGRpc2NhcmRlZC4NCg0KICAgID4+PiBfc3BsaXRzdHJpcCgnYSwgYiwgYyAgICwgIDQsLCcpDQogICAgWydhJywgJ2InLCAnYycsICc0J10NCiAgICA+Pj4gX3NwbGl0c3RyaXAoJ2EnKQ0KICAgIFsnYSddDQogICAgPj4+IF9zcGxpdHN0cmlwKCdhLFxuYixcbmMsJykNCiAgICBbJ2EnLCAnYicsICdjJ10NCg0KICAgIDp0eXBlIHN0cmluZzogc3RyIG9yIHVuaWNvZGUNCiAgICA6cGFyYW0gc3RyaW5nOiBhIGNzdiBsaW5lDQoNCiAgICA6dHlwZSBzZXA6IHN0ciBvciB1bmljb2RlDQogICAgOnBhcmFtIHNlcDogZmllbGQgc2VwYXJhdG9yLCBkZWZhdWx0IHRvIHRoZSBjb21tYSAoJywnKQ0KDQogICAgOnJ0eXBlOiBzdHIgb3IgdW5pY29kZQ0KICAgIDpyZXR1cm46IHRoZSB1bnF1b3RlZCBzdHJpbmcgKG9yIHRoZSBpbnB1dCBzdHJpbmcgaWYgaXQgd2Fzbid0IHF1b3RlZCkNCiAgICAiIiINCiAgICByZXR1cm4gW3dvcmQuc3RyaXAoKSBmb3Igd29yZCBpbiBzdHJpbmcuc3BsaXQoc2VwKSBpZiB3b3JkLnN0cmlwKCldDQoNCg0KZGVmIF91bnF1b3RlKHN0cmluZyk6DQogICAgIiIicmVtb3ZlIG9wdGlvbmFsIHF1b3RlcyAoc2ltcGxlIG9yIGRvdWJsZSkgZnJvbSB0aGUgc3RyaW5nDQoNCiAgICA6dHlwZSBzdHJpbmc6IHN0ciBvciB1bmljb2RlDQogICAgOnBhcmFtIHN0cmluZzogYW4gb3B0aW9uYWxseSBxdW90ZWQgc3RyaW5nDQoNCiAgICA6cnR5cGU6IHN0ciBvciB1bmljb2RlDQogICAgOnJldHVybjogdGhlIHVucXVvdGVkIHN0cmluZyAob3IgdGhlIGlucHV0IHN0cmluZyBpZiBpdCB3YXNuJ3QgcXVvdGVkKQ0KICAgICIiIg0KICAgIGlmIG5vdCBzdHJpbmc6DQogICAgICAgIHJldHVybiBzdHJpbmcNCiAgICBpZiBzdHJpbmdbMF0gaW4gJyJcJyc6DQogICAgICAgIHN0cmluZyA9IHN0cmluZ1sxOl0NCiAgICBpZiBzdHJpbmdbLTFdIGluICciXCcnOg0KICAgICAgICBzdHJpbmcgPSBzdHJpbmdbOi0xXQ0KICAgIHJldHVybiBzdHJpbmcNCg0KDQpkZWYgX25vcm1hbGl6ZV90ZXh0KHRleHQsIGxpbmVfbGVuPTgwLCBpbmRlbnQ9JycpOg0KICAgICIiIldyYXAgdGhlIHRleHQgb24gdGhlIGdpdmVuIGxpbmUgbGVuZ3RoLiIiIg0KICAgIHJldHVybiAnXG4nLmpvaW4odGV4dHdyYXAud3JhcCh0ZXh0LCB3aWR0aD1saW5lX2xlbiwgaW5pdGlhbF9pbmRlbnQ9aW5kZW50LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50X2luZGVudD1pbmRlbnQpKQ0KDQoNCmRlZiBfY2hlY2tfY3N2KHZhbHVlKToNCiAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCAobGlzdCwgdHVwbGUpKToNCiAgICAgICAgcmV0dXJuIHZhbHVlDQogICAgcmV0dXJuIF9zcGxpdHN0cmlwKHZhbHVlKQ0KDQoNCmRlZiBfY29tbWVudChzdHJpbmcpOg0KICAgICIiInJldHVybiBzdHJpbmcgYXMgYSBjb21tZW50IiIiDQogICAgbGluZXMgPSBbbGluZS5zdHJpcCgpIGZvciBsaW5lIGluIHN0cmluZy5zcGxpdGxpbmVzKCldDQogICAgcmV0dXJuICcjICcgKyAoJyVzIyAnICUgb3MubGluZXNlcCkuam9pbihsaW5lcykNCg0KDQpkZWYgX2Zvcm1hdF9vcHRpb25fdmFsdWUob3B0ZGljdCwgdmFsdWUpOg0KICAgICIiInJldHVybiB0aGUgdXNlciBpbnB1dCdzIHZhbHVlIGZyb20gYSAnY29tcGlsZWQnIHZhbHVlIiIiDQogICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgKGxpc3QsIHR1cGxlKSk6DQogICAgICAgIHZhbHVlID0gJywnLmpvaW4oX2Zvcm1hdF9vcHRpb25fdmFsdWUob3B0ZGljdCwgaXRlbSkgZm9yIGl0ZW0gaW4gdmFsdWUpDQogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBkaWN0KToNCiAgICAgICAgdmFsdWUgPSAnLCcuam9pbignJXM6JXMnICUgKGssIHYpIGZvciBrLCB2IGluIHZhbHVlLml0ZW1zKCkpDQogICAgZWxpZiBoYXNhdHRyKHZhbHVlLCAnbWF0Y2gnKTogIyBvcHRkaWN0LmdldCgndHlwZScpID09ICdyZWdleHAnDQogICAgICAgICMgY29tcGlsZWQgcmVnZXhwDQogICAgICAgIHZhbHVlID0gdmFsdWUucGF0dGVybg0KICAgIGVsaWYgb3B0ZGljdC5nZXQoJ3R5cGUnKSA9PSAneW4nOg0KICAgICAgICB2YWx1ZSA9ICd5ZXMnIGlmIHZhbHVlIGVsc2UgJ25vJw0KICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyKSBhbmQgdmFsdWUuaXNzcGFjZSgpOg0KICAgICAgICB2YWx1ZSA9ICInJXMnIiAlIHZhbHVlDQogICAgcmV0dXJuIHZhbHVlDQoNCg0KZGVmIF9pbmlfZm9ybWF0X3NlY3Rpb24oc3RyZWFtLCBzZWN0aW9uLCBvcHRpb25zLCBkb2M9Tm9uZSk6DQogICAgIiIiZm9ybWF0IGFuIG9wdGlvbnMgc2VjdGlvbiB1c2luZyB0aGUgSU5JIGZvcm1hdCIiIg0KICAgIGlmIGRvYzoNCiAgICAgICAgcHJpbnQoX2NvbW1lbnQoZG9jKSwgZmlsZT1zdHJlYW0pDQogICAgcHJpbnQoJ1slc10nICUgc2VjdGlvbiwgZmlsZT1zdHJlYW0pDQogICAgX2luaV9mb3JtYXQoc3RyZWFtLCBvcHRpb25zKQ0KDQoNCmRlZiBfaW5pX2Zvcm1hdChzdHJlYW0sIG9wdGlvbnMpOg0KICAgICIiImZvcm1hdCBvcHRpb25zIHVzaW5nIHRoZSBJTkkgZm9ybWF0IiIiDQogICAgZm9yIG9wdG5hbWUsIG9wdGRpY3QsIHZhbHVlIGluIG9wdGlvbnM6DQogICAgICAgIHZhbHVlID0gX2Zvcm1hdF9vcHRpb25fdmFsdWUob3B0ZGljdCwgdmFsdWUpDQogICAgICAgIGhlbHBfb3B0ID0gb3B0ZGljdC5nZXQoJ2hlbHAnKQ0KICAgICAgICBpZiBoZWxwX29wdDoNCiAgICAgICAgICAgIGhlbHBfb3B0ID0gX25vcm1hbGl6ZV90ZXh0KGhlbHBfb3B0LCBsaW5lX2xlbj03OSwgaW5kZW50PScjICcpDQogICAgICAgICAgICBwcmludChmaWxlPXN0cmVhbSkNCiAgICAgICAgICAgIHByaW50KGhlbHBfb3B0LCBmaWxlPXN0cmVhbSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KGZpbGU9c3RyZWFtKQ0KICAgICAgICBpZiB2YWx1ZSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoJyMlcz0nICUgb3B0bmFtZSwgZmlsZT1zdHJlYW0pDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICB2YWx1ZSA9IHN0cih2YWx1ZSkuc3RyaXAoKQ0KICAgICAgICAgICAgaWYgcmUubWF0Y2gocideKFtcdy1dKywpK1tcdy1dKyQnLCBzdHIodmFsdWUpKToNCiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSAnXG4gJyArICcgJyAqIGxlbihvcHRuYW1lKQ0KICAgICAgICAgICAgICAgIHZhbHVlID0gc2VwYXJhdG9yLmpvaW4oDQogICAgICAgICAgICAgICAgICAgIHggKyAnLCcgZm9yIHggaW4gc3RyKHZhbHVlKS5zcGxpdCgnLCcpKQ0KICAgICAgICAgICAgICAgICMgcmVtb3ZlIHRyYWlsaW5nICcsJyBmcm9tIGxhc3QgZWxlbWVudCBvZiB0aGUgbGlzdA0KICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbOi0xXQ0KICAgICAgICAgICAgcHJpbnQoJyVzPSVzJyAlIChvcHRuYW1lLCB2YWx1ZSksIGZpbGU9c3RyZWFtKQ0KDQpmb3JtYXRfc2VjdGlvbiA9IF9pbmlfZm9ybWF0X3NlY3Rpb24NCg0KDQpkZWYgX3Jlc3RfZm9ybWF0X3NlY3Rpb24oc3RyZWFtLCBzZWN0aW9uLCBvcHRpb25zLCBkb2M9Tm9uZSk6DQogICAgIiIiZm9ybWF0IGFuIG9wdGlvbnMgc2VjdGlvbiB1c2luZyBhcyBSZVNUIGZvcm1hdHRlZCBvdXRwdXQiIiINCiAgICBpZiBzZWN0aW9uOg0KICAgICAgICBwcmludCgnJXNcbiVzJyAlIChzZWN0aW9uLCAiJyIqbGVuKHNlY3Rpb24pKSwgZmlsZT1zdHJlYW0pDQogICAgaWYgZG9jOg0KICAgICAgICBwcmludChfbm9ybWFsaXplX3RleHQoZG9jLCBsaW5lX2xlbj03OSwgaW5kZW50PScnKSwgZmlsZT1zdHJlYW0pDQogICAgICAgIHByaW50KGZpbGU9c3RyZWFtKQ0KICAgIGZvciBvcHRuYW1lLCBvcHRkaWN0LCB2YWx1ZSBpbiBvcHRpb25zOg0KICAgICAgICBoZWxwX29wdCA9IG9wdGRpY3QuZ2V0KCdoZWxwJykNCiAgICAgICAgcHJpbnQoJzolczonICUgb3B0bmFtZSwgZmlsZT1zdHJlYW0pDQogICAgICAgIGlmIGhlbHBfb3B0Og0KICAgICAgICAgICAgaGVscF9vcHQgPSBfbm9ybWFsaXplX3RleHQoaGVscF9vcHQsIGxpbmVfbGVuPTc5LCBpbmRlbnQ9JyAgJykNCiAgICAgICAgICAgIHByaW50KGhlbHBfb3B0LCBmaWxlPXN0cmVhbSkNCiAgICAgICAgaWYgdmFsdWU6DQogICAgICAgICAgICB2YWx1ZSA9IHN0cihfZm9ybWF0X29wdGlvbl92YWx1ZShvcHRkaWN0LCB2YWx1ZSkpDQogICAgICAgICAgICBwcmludChmaWxlPXN0cmVhbSkNCiAgICAgICAgICAgIHByaW50KCcgIERlZmF1bHQ6IGBgJXNgYCcgJSB2YWx1ZS5yZXBsYWNlKCJgYCAiLCAiYGBgYCBgYCIpLCBmaWxlPXN0cmVhbSkNCg=="
          },
          "hashes": [
            {
              "value": "E77503814A7162E93178147DA8DFF1A7",
              "algorithm": "md5"
            },
            {
              "value": "A26FB1EC874266A0B1B28F0ECC74A20EC9267AB9",
              "algorithm": "sha-1"
            },
            {
              "value": "C5FD522DF9D729A141AC92546D63938BEE94A4E228CF9F5EF3164644E4415AF7",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/__init__.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMDgsIDIwMTIgTE9HSUxBQiBTLkEuIChQYXJpcywgRlJBTkNFKSA8Y29udGFjdEBsb2dpbGFiLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQsIDIwMTYtMjAxNyBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE0IEFydW4gUGVyc2F1ZCA8YXJ1bkBudWJhdGkubmV0Pg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgSW9uZWwgQ3Jpc3RpYW4gTWFyaWVzIDxjb250YWN0QGlvbmVsbWMucm8+DQojIENvcHlyaWdodCAoYykgMjAxOCBOaWNrIERyb3pkIDxuaWNob2xhc2Ryb3pkQGdtYWlsLmNvbT4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQppbXBvcnQgc3lzDQoNCmZyb20gLl9fcGtnaW5mb19fIGltcG9ydCB2ZXJzaW9uIGFzIF9fdmVyc2lvbl9fDQoNCg0KZGVmIHJ1bl9weWxpbnQoKToNCiAgICAiIiJydW4gcHlsaW50IiIiDQogICAgZnJvbSBweWxpbnQubGludCBpbXBvcnQgUnVuDQogICAgdHJ5Og0KICAgICAgICBSdW4oc3lzLmFyZ3ZbMTpdKQ0KICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoNCiAgICAgICAgc3lzLmV4aXQoMSkNCg0KZGVmIHJ1bl9lcHlsaW50KCk6DQogICAgIiIicnVuIHB5bGludCIiIg0KICAgIGZyb20gcHlsaW50LmVweWxpbnQgaW1wb3J0IFJ1bg0KICAgIFJ1bigpDQoNCmRlZiBydW5fcHlyZXZlcnNlKCk6DQogICAgIiIicnVuIHB5cmV2ZXJzZSIiIg0KICAgIGZyb20gcHlsaW50LnB5cmV2ZXJzZS5tYWluIGltcG9ydCBSdW4NCiAgICBSdW4oc3lzLmFyZ3ZbMTpdKQ0KDQpkZWYgcnVuX3N5bWlsYXIoKToNCiAgICAiIiJydW4gc3ltaWxhciIiIg0KICAgIGZyb20gcHlsaW50LmNoZWNrZXJzLnNpbWlsYXIgaW1wb3J0IFJ1bg0KICAgIFJ1bihzeXMuYXJndlsxOl0pDQo="
          },
          "hashes": [
            {
              "value": "444E8618AFBF0CBCF270E2D4AC20F6A5",
              "algorithm": "md5"
            },
            {
              "value": "85DBF2D09A5CA68C6AE5E1247D319F5A2FD740E4",
              "algorithm": "sha-1"
            },
            {
              "value": "9F55F8EFFFDC618B0968D57641A7D5CCB259AC16ECAFDBFDEE5222B0CC87437E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/__main__.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "DQojIExpY2Vuc2VkIHVuZGVyIHRoZSBHUEw6IGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2dwbC0yLjAuaHRtbA0KIyBGb3IgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL1B5Q1FBL3B5bGludC9ibG9iL21hc3Rlci9DT1BZSU5HDQoNCiMhL3Vzci9iaW4vZW52IHB5dGhvbg0KaW1wb3J0IHB5bGludA0KcHlsaW50LnJ1bl9weWxpbnQoKQ0K"
          },
          "hashes": [
            {
              "value": "D419F82CF860A222BFB6ED60B6957266",
              "algorithm": "md5"
            },
            {
              "value": "F68AFE4EA95056EFD143C3A640B78264763B3C9C",
              "algorithm": "sha-1"
            },
            {
              "value": "49FB3B38DDA0ABA3887E64A555D29DB80BC44B4D086AE2BA2423BA8FD74A95A4",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/async.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxOCBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4KIyBDb3B5cmlnaHQgKGMpIDIwMTcgRGVyZWsgR3VzdGFmc29uIDxkZWd1c3RhZkBnbWFpbC5jb20+Cg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQoiIiJDaGVja2VyIGZvciBhbnl0aGluZyByZWxhdGVkIHRvIHRoZSBhc3luYyBwcm90b2NvbCAoUEVQIDQ5MikuIiIiDQoNCmltcG9ydCBzeXMNCg0KaW1wb3J0IGFzdHJvaWQNCmZyb20gYXN0cm9pZCBpbXBvcnQgZXhjZXB0aW9ucw0KDQpmcm9tIHB5bGludCBpbXBvcnQgY2hlY2tlcnMNCmZyb20gcHlsaW50LmNoZWNrZXJzIGltcG9ydCB1dGlscyBhcyBjaGVja2VyX3V0aWxzDQpmcm9tIHB5bGludCBpbXBvcnQgaW50ZXJmYWNlcw0KZnJvbSBweWxpbnQgaW1wb3J0IHV0aWxzDQoNCg0KY2xhc3MgQXN5bmNDaGVja2VyKGNoZWNrZXJzLkJhc2VDaGVja2VyKToNCiAgICBfX2ltcGxlbWVudHNfXyA9IGludGVyZmFjZXMuSUFzdHJvaWRDaGVja2VyDQogICAgbmFtZSA9ICdhc3luYycNCiAgICBtc2dzID0gew0KICAgICAgICAnRTE3MDAnOiAoJ1lpZWxkIGluc2lkZSBhc3luYyBmdW5jdGlvbicsDQogICAgICAgICAgICAgICAgICAneWllbGQtaW5zaWRlLWFzeW5jLWZ1bmN0aW9uJywNCiAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gYW4gYHlpZWxkYCBvciBgeWllbGQgZnJvbWAgc3RhdGVtZW50IGlzICcNCiAgICAgICAgICAgICAgICAgICdmb3VuZCBpbnNpZGUgYW4gYXN5bmMgZnVuY3Rpb24uJywNCiAgICAgICAgICAgICAgICAgIHsnbWludmVyc2lvbic6ICgzLCA1KX0pLA0KICAgICAgICAnRTE3MDEnOiAoIkFzeW5jIGNvbnRleHQgbWFuYWdlciAnJXMnIGRvZXNuJ3QgaW1wbGVtZW50IF9fYWVudGVyX18gYW5kIF9fYWV4aXRfXy4iLA0KICAgICAgICAgICAgICAgICAgJ25vdC1hc3luYy1jb250ZXh0LW1hbmFnZXInLA0KICAgICAgICAgICAgICAgICAgJ1VzZWQgd2hlbiBhbiBhc3luYyBjb250ZXh0IG1hbmFnZXIgaXMgdXNlZCB3aXRoIGFuIG9iamVjdCAnDQogICAgICAgICAgICAgICAgICAndGhhdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGFzeW5jIGNvbnRleHQgbWFuYWdlbWVudCBwcm90b2NvbC4nLA0KICAgICAgICAgICAgICAgICAgeydtaW52ZXJzaW9uJzogKDMsIDUpfSksDQogICAgfQ0KDQogICAgZGVmIG9wZW4oc2VsZik6DQogICAgICAgIHNlbGYuX2lnbm9yZV9taXhpbl9tZW1iZXJzID0gdXRpbHMuZ2V0X2dsb2JhbF9vcHRpb24oc2VsZiwgJ2lnbm9yZS1taXhpbi1tZW1iZXJzJykNCg0KICAgIEBjaGVja2VyX3V0aWxzLmNoZWNrX21lc3NhZ2VzKCd5aWVsZC1pbnNpZGUtYXN5bmMtZnVuY3Rpb24nKQ0KICAgIGRlZiB2aXNpdF9hc3luY2Z1bmN0aW9uZGVmKHNlbGYsIG5vZGUpOg0KICAgICAgICBmb3IgY2hpbGQgaW4gbm9kZS5ub2Rlc19vZl9jbGFzcyhhc3Ryb2lkLllpZWxkKToNCiAgICAgICAgICAgIGlmIGNoaWxkLnNjb3BlKCkgaXMgbm9kZSBhbmQgKHN5cy52ZXJzaW9uX2luZm9bOjJdID09ICgzLCA1KSBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNpbnN0YW5jZShjaGlsZCwgYXN0cm9pZC5ZaWVsZEZyb20pKToNCiAgICAgICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKCd5aWVsZC1pbnNpZGUtYXN5bmMtZnVuY3Rpb24nLCBub2RlPWNoaWxkKQ0KDQogICAgQGNoZWNrZXJfdXRpbHMuY2hlY2tfbWVzc2FnZXMoJ25vdC1hc3luYy1jb250ZXh0LW1hbmFnZXInKQ0KICAgIGRlZiB2aXNpdF9hc3luY3dpdGgoc2VsZiwgbm9kZSk6DQogICAgICAgIGZvciBjdHhfbWdyLCBfIGluIG5vZGUuaXRlbXM6DQogICAgICAgICAgICBpbmZlcmVkID0gY2hlY2tlcl91dGlscy5zYWZlX2luZmVyKGN0eF9tZ3IpDQogICAgICAgICAgICBpZiBpbmZlcmVkIGlzIE5vbmUgb3IgaW5mZXJlZCBpcyBhc3Ryb2lkLlVuaW5mZXJhYmxlOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoaW5mZXJlZCwgYXN0cm9pZC5JbnN0YW5jZSk6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBpbmZlcmVkLmdldGF0dHIoJ19fYWVudGVyX18nKQ0KICAgICAgICAgICAgICAgICAgICBpbmZlcmVkLmdldGF0dHIoJ19fYWV4aXRfXycpDQogICAgICAgICAgICAgICAgZXhjZXB0IGV4Y2VwdGlvbnMuTm90Rm91bmRFcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpbmZlcmVkLCBhc3Ryb2lkLkluc3RhbmNlKToNCiAgICAgICAgICAgICAgICAgICAgICAgICMgSWYgd2UgZG8gbm90IGtub3cgdGhlIGJhc2VzIG9mIHRoaXMgY2xhc3MsDQogICAgICAgICAgICAgICAgICAgICAgICAjIGp1c3Qgc2tpcCBpdC4NCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBjaGVja2VyX3V0aWxzLmhhc19rbm93bl9iYXNlcyhpbmZlcmVkKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgIyBKdXN0IGlnbm9yZSBtaXhpbiBjbGFzc2VzLg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5faWdub3JlX21peGluX21lbWJlcnM6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaW5mZXJlZC5uYW1lWy01Ol0ubG93ZXIoKSA9PSAnbWl4aW4nOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ25vdC1hc3luYy1jb250ZXh0LW1hbmFnZXInLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlPW5vZGUsIGFyZ3M9KGluZmVyZWQubmFtZSwgKSkNCg0KDQpkZWYgcmVnaXN0ZXIobGludGVyKToNCiAgICAiIiJyZXF1aXJlZCBtZXRob2QgdG8gYXV0byByZWdpc3RlciB0aGlzIGNoZWNrZXIiIiINCiAgICBsaW50ZXIucmVnaXN0ZXJfY2hlY2tlcihBc3luY0NoZWNrZXIobGludGVyKSkNCg=="
          },
          "hashes": [
            {
              "value": "2917B14F5B63F78E81BEB18B724F45B5",
              "algorithm": "md5"
            },
            {
              "value": "C0C5F6D72F55B0785084C7816718ACAFAEFC585F",
              "algorithm": "sha-1"
            },
            {
              "value": "8294EBA3DB91649C15571D922EB03454F4348394B98D9D7715D17BFB6F7EB73F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/base.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "7FAED2AFA38F1EA44989A79FBD916810",
              "algorithm": "md5"
            },
            {
              "value": "6247515717738803B91EA54CFED95D5FD602EB64",
              "algorithm": "sha-1"
            },
            {
              "value": "DFEDB36623C3B50302678C47DDF5C588EBA4D8C44E979ED48C4B540C8E8D3E98",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/classes.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "6C01263DEFEEF940D2962989B1614241",
              "algorithm": "md5"
            },
            {
              "value": "5BDF7DD9C7594013E601EFB8E95AA9D3C0D67337",
              "algorithm": "sha-1"
            },
            {
              "value": "37EFD885E0A92C2A14382140C3E3171A7AC2BBE031037DECE6CCB4F646A27802",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/design_analysis.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "5ACF717C08D833B76B8B6910A4B17D7E",
              "algorithm": "md5"
            },
            {
              "value": "4CFE4F5CBA0754E02097330031559B6D6A0492C7",
              "algorithm": "sha-1"
            },
            {
              "value": "7095A949689A240ED28A29A88419E2C454D3810F561DEB98A1E52F97AB409169",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/exceptions.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "8CC4104C90F94A017AB6B6929CF3B4B0",
              "algorithm": "md5"
            },
            {
              "value": "D96B6BE055F07C1E1E4EAA09331E446502BF2D68",
              "algorithm": "sha-1"
            },
            {
              "value": "025E976215C58F7350BD71CE66C81F36B49A69A45C2AAD073FD2D7CFFA48F971",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/format.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "2959F176F3248BD92B954B1032E0F4B6",
              "algorithm": "md5"
            },
            {
              "value": "D1281F141025B367EBA646E1499E4772B4CBDE4A",
              "algorithm": "sha-1"
            },
            {
              "value": "4032BB3C93C76553606AFF013118EF54CB283119DD4CC5E48A2E4AEF20C6911F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/imports.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "C7ED83D4E68E622A8D806CFB1364B38D",
              "algorithm": "md5"
            },
            {
              "value": "A5C08861B5269AB697BC95F93D0694F716DAD399",
              "algorithm": "sha-1"
            },
            {
              "value": "E33178D8A9682F8772C20F453D32E5F32BB0520F6E32C81F6E3A1426B8D5487D",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/logging.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "229CA56BC15C727AB65CF15639F1025D",
              "algorithm": "md5"
            },
            {
              "value": "62DA39630AC1E8A6A73AF01171507A1E77568DA1",
              "algorithm": "sha-1"
            },
            {
              "value": "9BF30675B95E6C03298BF440D5EDD8FBAB4D805B010660D63876308288290FB0",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/misc.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDA2LCAyMDA5LTIwMTMgTE9HSUxBQiBTLkEuIChQYXJpcywgRlJBTkNFKSA8Y29udGFjdEBsb2dpbGFiLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBHb29nbGUsIEluYy4NCiMgQ29weXJpZ2h0IChjKSAyMDE0LTIwMTggQ2xhdWRpdSBQb3BhIDxwY21hbnRpY29yZUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNCBCcmV0dCBDYW5ub24gPGJyZXR0QHB5dGhvbi5vcmc+DQojIENvcHlyaWdodCAoYykgMjAxNCBBbGV4YW5kcnUgQ29tYW4gPGZjb21hbkBiaXRkZWZlbmRlci5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNCBBcnVuIFBlcnNhdWQgPGFydW5AbnViYXRpLm5ldD4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IElvbmVsIENyaXN0aWFuIE1hcmllcyA8Y29udGFjdEBpb25lbG1jLnJvPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgxYF1a2FzeiBSb2dhbHNraSA8cm9nYWxza2kuOTFAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgZ2xlZ291eCA8Z2lsbGVzLmxlZ291eEBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IGhpcHBvOTEgPGd1aWxsYXVtZS5wZWlsbGV4QGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3IE1pa2hhaWwgRmVzZW5rbyA8cHJvZ2dnYUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBWaWxsZSBTa3l0dMOkIDx2aWxsZS5za3l0dGFAaWtpLmZpPg0KDQojIExpY2Vuc2VkIHVuZGVyIHRoZSBHUEw6IGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2dwbC0yLjAuaHRtbA0KIyBGb3IgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL1B5Q1FBL3B5bGludC9ibG9iL21hc3Rlci9DT1BZSU5HDQoNCg0KIiIiQ2hlY2sgc291cmNlIGNvZGUgaXMgYXNjaWkgb25seSBvciBoYXMgYW4gZW5jb2RpbmcgZGVjbGFyYXRpb24gKFBFUCAyNjMpIiIiDQoNCiMgcHlsaW50OiBkaXNhYmxlPVcwNTExDQoNCmltcG9ydCByZQ0KDQpmcm9tIHB5bGludC5pbnRlcmZhY2VzIGltcG9ydCBJUmF3Q2hlY2tlcg0KZnJvbSBweWxpbnQuY2hlY2tlcnMgaW1wb3J0IEJhc2VDaGVja2VyDQpmcm9tIHB5bGludC51dGlscyBpbXBvcnQgT1BUSU9OX1JHWCwgTWVzc2FnZXNIYW5kbGVyTWl4SW4NCg0KDQpjbGFzcyBCeUlkTWFuYWdlZE1lc3NhZ2VzQ2hlY2tlcihCYXNlQ2hlY2tlcik6DQoNCiAgICAiIiJjaGVja3MgZm9yIG1lc3NhZ2VzIHRoYXQgYXJlIGVuYWJsZWQgb3IgZGlzYWJsZWQgYnkgaWQgaW5zdGVhZCBvZiBzeW1ib2wuIiIiDQoNCiAgICBfX2ltcGxlbWVudHNfXyA9IElSYXdDaGVja2VyDQoNCiAgICAjIGNvbmZpZ3VyYXRpb24gc2VjdGlvbiBuYW1lDQogICAgbmFtZSA9ICdtaXNjZWxsYW5lb3VzJw0KICAgIG1zZ3MgPSB7J0kwMDIzJzogKCclcycsDQogICAgICAgICAgICAgICAgICAgICAgJ3VzZS1zeW1ib2xpYy1tZXNzYWdlLWluc3RlYWQnLA0KICAgICAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gYSBtZXNzYWdlIGlzIGVuYWJsZWQgb3IgZGlzYWJsZWQgYnkgaWQuJyksfQ0KDQogICAgb3B0aW9ucyA9ICgpDQoNCiAgICBkZWYgcHJvY2Vzc19tb2R1bGUoc2VsZiwgbW9kdWxlKToNCiAgICAgICAgIiIiaW5zcGVjdCB0aGUgc291cmNlIGZpbGUgdG8gZmluZCBtZXNzYWdlcyBhY3RpdmF0ZWQgb3IgZGVhY3RpdmF0ZWQgYnkgaWQuIiIiDQogICAgICAgIG1hbmFnZWRfbXNncyA9IE1lc3NhZ2VzSGFuZGxlck1peEluLmdldF9ieV9pZF9tYW5hZ2VkX21zZ3MoKQ0KICAgICAgICBmb3IgKG1vZF9uYW1lLCBtc2dfaWQsIG1zZ19zeW1ib2wsIGxpbmVubywgaXNfZGlzYWJsZWQpIGluIG1hbmFnZWRfbXNnczoNCiAgICAgICAgICAgIGlmIG1vZF9uYW1lID09IG1vZHVsZS5uYW1lOg0KICAgICAgICAgICAgICAgIGlmIGlzX2Rpc2FibGVkOg0KICAgICAgICAgICAgICAgICAgICB0eHQgPSAoIklkICd7aWRlbnR9JyBpcyB1c2VkIHRvIGRpc2FibGUgJ3tzeW1ib2x9JyBtZXNzYWdlIGVtaXNzaW9uIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvcm1hdChpZGVudD1tc2dfaWQsIHN5bWJvbD1tc2dfc3ltYm9sKSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICB0eHQgPSAoIklkICd7aWRlbnR9JyBpcyB1c2VkIHRvIGVuYWJsZSAne3N5bWJvbH0nIG1lc3NhZ2UgZW1pc3Npb24iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAuZm9ybWF0KGlkZW50PW1zZ19pZCwgc3ltYm9sPW1zZ19zeW1ib2wpKQ0KICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ3VzZS1zeW1ib2xpYy1tZXNzYWdlLWluc3RlYWQnLCBsaW5lPWxpbmVubywgYXJncz10eHQpDQogICAgICAgIE1lc3NhZ2VzSGFuZGxlck1peEluLmNsZWFyX2J5X2lkX21hbmFnZWRfbXNncygpDQoNCg0KY2xhc3MgRW5jb2RpbmdDaGVja2VyKEJhc2VDaGVja2VyKToNCg0KICAgICIiImNoZWNrcyBmb3I6DQogICAgKiB3YXJuaW5nIG5vdGVzIGluIHRoZSBjb2RlIGxpa2UgRklYTUUsIFhYWA0KICAgICogZW5jb2RpbmcgaXNzdWVzLg0KICAgICIiIg0KICAgIF9faW1wbGVtZW50c19fID0gSVJhd0NoZWNrZXINCg0KICAgICMgY29uZmlndXJhdGlvbiBzZWN0aW9uIG5hbWUNCiAgICBuYW1lID0gJ21pc2NlbGxhbmVvdXMnDQogICAgbXNncyA9IHsnVzA1MTEnOiAoJyVzJywNCiAgICAgICAgICAgICAgICAgICAgICAnZml4bWUnLA0KICAgICAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gYSB3YXJuaW5nIG5vdGUgYXMgRklYTUUgb3IgWFhYIGlzIGRldGVjdGVkLicpLA0KICAgICAgICAgICAgJ1cwNTEyJzogKCdDYW5ub3QgZGVjb2RlIHVzaW5nIGVuY29kaW5nICIlcyIsJw0KICAgICAgICAgICAgICAgICAgICAgICcgdW5leHBlY3RlZCBieXRlIGF0IHBvc2l0aW9uICVkJywNCiAgICAgICAgICAgICAgICAgICAgICAnaW52YWxpZC1lbmNvZGVkLWRhdGEnLA0KICAgICAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gYSBzb3VyY2UgbGluZSBjYW5ub3QgYmUgZGVjb2RlZCB1c2luZyB0aGUgc3BlY2lmaWVkICcNCiAgICAgICAgICAgICAgICAgICAgICAnc291cmNlIGZpbGUgZW5jb2RpbmcuJywNCiAgICAgICAgICAgICAgICAgICAgICB7J21heHZlcnNpb24nOiAoMywgMCl9KSx9DQoNCiAgICBvcHRpb25zID0gKCgnbm90ZXMnLA0KICAgICAgICAgICAgICAgIHsndHlwZSc6ICdjc3YnLCAnbWV0YXZhcic6ICc8Y29tbWEgc2VwYXJhdGVkIHZhbHVlcz4nLA0KICAgICAgICAgICAgICAgICAnZGVmYXVsdCc6ICgnRklYTUUnLCAnWFhYJywgJ1RPRE8nKSwNCiAgICAgICAgICAgICAgICAgJ2hlbHAnOiAoJ0xpc3Qgb2Ygbm90ZSB0YWdzIHRvIHRha2UgaW4gY29uc2lkZXJhdGlvbiwgJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VwYXJhdGVkIGJ5IGEgY29tbWEuJyl9KSwpDQoNCiAgICBkZWYgX2NoZWNrX25vdGUoc2VsZiwgbm90ZXMsIGxpbmVubywgbGluZSwgbW9kdWxlX2xhc3RfbGluZW5vKToNCiAgICAgICAgIiIiDQogICAgICAgIEFkZCB0aGUgbWVzc2FnZSAnZml4bWUnIGluIGNhc2UgYSBub3RlIGlzIGZvdW5kIGluIHRoZSBsaW5lLg0KDQogICAgICAgIDpwYXJhbSBub3RlczogcmVndWxhciBleHByZXNzaW9uIG9iamVjdCBtYXRjaGluZyBhbnkgbm90ZXMNCiAgICAgICAgICAgICAgICAgICAgICAoWFhYLCBUT0RPLCBGSVhNRSkgYmVoaW5kIGEgJyMnDQogICAgICAgIDp0eXBlIG5vdGVzOiByZS5wYXR0ZXJuIG9iamVjdA0KICAgICAgICA6cGFyYW0gbGluZW5vOiBsaW5lIG51bWJlcg0KICAgICAgICA6dHlwZSBsaW5lbm86IGludA0KICAgICAgICA6cGFyYW0gbGluZTogbGluZSB0byBiZSBjaGVja2VkDQogICAgICAgIDp0eXBlIGxpbmU6IHN0cg0KICAgICAgICA6cGFyYW0gbW9kdWxlX2xhc3RfbGluZW5vOiBsYXN0IGxpbmUgbnVtYmVyIG9mIHRoZSBtb2R1bGUgYXMgcGFyc2VkIGJ5IGFzdHJvaWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1heSBiZSBkaWZmZXJlbnQgZnJvbSByZWFsIGxhc3QgbGluZSBudW1iZXIgaW4gY2FzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudGVkIGxpbmVzIGV4aXN0IGF0IHRoZSBlbmQgb2YgdGhlIG1vZHVsZSkNCiAgICAgICAgOnR5cGUgbW9kdWxlX2xhc3RfbGluZW5vOiBpbnQNCiAgICAgICAgIiIiDQogICAgICAgIG1hdGNoID0gbm90ZXMuc2VhcmNoKGxpbmUpDQogICAgICAgIGlmIG5vdCBtYXRjaDoNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICAjIEluIGNhc2UgdGhlIG1vZHVsZSBlbmRzIHdpdGggY29tbWVudGVkIGxpbmVzLCB0aGUgYXN0cm9pZCBwYXJzZXINCiAgICAgICAgIyBkb24ndCB0YWtlIGludG8gYWNjb3VudCB0aG9zZSBsaW5lcywgdGhlbjoNCiAgICAgICAgIyAtIHRoZSBsaW5lIG51bWJlciBvZiB0aG9zZSBsaW5lcyBpcyBncmVhdGVyIHRoYW4gdGhlDQogICAgICAgICMgICBtb2R1bGUgbGFzdCBsaW5lIG51bWJlciAobW9kdWxlLnRvbGluZW5vKQ0KICAgICAgICAjIC0gYXN0cm9pZCBtb2R1bGUgb2JqZWN0IGNhbid0IGluZm9ybSBweWxpbnQNCiAgICAgICAgIyAgIG9mIGRpc2FibGVkIG1lc3NhZ2VzIGluIHRob3NlIGV4dHJhIGxpbmVzLg0KICAgICAgICBpZiBsaW5lbm8gPiBtb2R1bGVfbGFzdF9saW5lbm86DQogICAgICAgICAgICBkaXNhYmxlX29wdGlvbl9tYXRjaCA9IE9QVElPTl9SR1guc2VhcmNoKGxpbmUpDQogICAgICAgICAgICBpZiBkaXNhYmxlX29wdGlvbl9tYXRjaDoNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIF8sIHZhbHVlID0gZGlzYWJsZV9vcHRpb25fbWF0Y2guZ3JvdXAoMSkuc3BsaXQoJz0nLCAxKQ0KICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbX3ZhbC5zdHJpcCgpLnVwcGVyKCkgZm9yIF92YWwgaW4gdmFsdWUuc3BsaXQoJywnKV0NCiAgICAgICAgICAgICAgICAgICAgaWYgc2V0KHZhbHVlcykgJiBzZXQoc2VsZi5jb25maWcubm90ZXMpOg0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ2JhZC1pbmxpbmUtb3B0aW9uJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzPWRpc2FibGVfb3B0aW9uX21hdGNoLmdyb3VwKDEpLnN0cmlwKCksIGxpbmU9bGluZSkNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ2ZpeG1lJywgYXJncz1saW5lW21hdGNoLnN0YXJ0KDEpOl0ucnN0cmlwKCksIGxpbmU9bGluZW5vLA0KICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF9vZmZzZXQ9bWF0Y2guc3RhcnQoMSkpDQoNCiAgICBkZWYgX2NoZWNrX2VuY29kaW5nKHNlbGYsIGxpbmVubywgbGluZSwgZmlsZV9lbmNvZGluZyk6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJldHVybiBsaW5lLmRlY29kZShmaWxlX2VuY29kaW5nKQ0KICAgICAgICBleGNlcHQgVW5pY29kZURlY29kZUVycm9yIGFzIGV4Og0KICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnaW52YWxpZC1lbmNvZGVkLWRhdGEnLCBsaW5lPWxpbmVubywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncz0oZmlsZV9lbmNvZGluZywgZXguYXJnc1syXSkpDQogICAgICAgIGV4Y2VwdCBMb29rdXBFcnJvciBhcyBleDoNCiAgICAgICAgICAgIGlmIChsaW5lLnN0YXJ0c3dpdGgoJyMnKSBhbmQNCiAgICAgICAgICAgICAgICAgICAgImNvZGluZyIgaW4gbGluZSBhbmQgZmlsZV9lbmNvZGluZyBpbiBsaW5lKToNCiAgICAgICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKCdzeW50YXgtZXJyb3InLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZT1saW5lbm8sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzPSdDYW5ub3QgZGVjb2RlIHVzaW5nIGVuY29kaW5nICJ7fSIsJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIGJhZCBlbmNvZGluZycuZm9ybWF0KGZpbGVfZW5jb2RpbmcpKQ0KDQogICAgZGVmIHByb2Nlc3NfbW9kdWxlKHNlbGYsIG1vZHVsZSk6DQogICAgICAgICIiImluc3BlY3QgdGhlIHNvdXJjZSBmaWxlIHRvIGZpbmQgZW5jb2RpbmcgcHJvYmxlbSBvciBmaXhtZXMgbGlrZQ0KICAgICAgICBub3Rlcw0KICAgICAgICAiIiINCiAgICAgICAgaWYgc2VsZi5jb25maWcubm90ZXM6DQogICAgICAgICAgICBub3RlcyA9IHJlLmNvbXBpbGUoDQogICAgICAgICAgICAgICAgcicjXHMqKCVzKVxiJyAlICJ8Ii5qb2luKG1hcChyZS5lc2NhcGUsIHNlbGYuY29uZmlnLm5vdGVzKSksIHJlLkkpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBub3RlcyA9IE5vbmUNCiAgICAgICAgaWYgbW9kdWxlLmZpbGVfZW5jb2Rpbmc6DQogICAgICAgICAgICBlbmNvZGluZyA9IG1vZHVsZS5maWxlX2VuY29kaW5nDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBlbmNvZGluZyA9ICdhc2NpaScNCg0KICAgICAgICB3aXRoIG1vZHVsZS5zdHJlYW0oKSBhcyBzdHJlYW06DQogICAgICAgICAgICBmb3IgbGluZW5vLCBsaW5lIGluIGVudW1lcmF0ZShzdHJlYW0pOg0KICAgICAgICAgICAgICAgIGxpbmUgPSBzZWxmLl9jaGVja19lbmNvZGluZyhsaW5lbm8gKyAxLCBsaW5lLCBlbmNvZGluZykNCiAgICAgICAgICAgICAgICBpZiBsaW5lIGlzIG5vdCBOb25lIGFuZCBub3RlczoNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tfbm90ZShub3RlcywgbGluZW5vICsgMSwgbGluZSwgbW9kdWxlLnRvbGluZW5vKQ0KDQoNCmRlZiByZWdpc3RlcihsaW50ZXIpOg0KICAgICIiInJlcXVpcmVkIG1ldGhvZCB0byBhdXRvIHJlZ2lzdGVyIHRoaXMgY2hlY2tlciIiIg0KICAgIGxpbnRlci5yZWdpc3Rlcl9jaGVja2VyKEVuY29kaW5nQ2hlY2tlcihsaW50ZXIpKQ0KICAgIGxpbnRlci5yZWdpc3Rlcl9jaGVja2VyKEJ5SWRNYW5hZ2VkTWVzc2FnZXNDaGVja2VyKGxpbnRlcikpDQo="
          },
          "hashes": [
            {
              "value": "076EB34610ACB7599F618346834A3717",
              "algorithm": "md5"
            },
            {
              "value": "470DBF094D2581028AE7F2BA3C5E8A3D547F232F",
              "algorithm": "sha-1"
            },
            {
              "value": "3FF809F44709E43C9CE7D6BEA0F67137B26781B80483EC0B17633F46F5B6B1E5",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/newstyle.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "B2D021CB7ED8F0725B7071A71F9BE8CF",
              "algorithm": "md5"
            },
            {
              "value": "B3B41FFA3D0492510173AAA32D57A91FF7C2680E",
              "algorithm": "sha-1"
            },
            {
              "value": "6D4A0AC229E9E4238892228C43CD115B20B1294F54E0A4E517DC71A446F412BF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/python3.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "EB3E4C8D7F177E00F01FF26562BFC20A",
              "algorithm": "md5"
            },
            {
              "value": "C931473011F48B3115DA34806F686D96249B14D9",
              "algorithm": "sha-1"
            },
            {
              "value": "DFD987032C0342AFC07DC86128228BA1EFB65B12BB7FC3681C909B7584C0E32E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/raw_metrics.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMTAsIDIwMTMsIDIwMTUgTE9HSUxBQiBTLkEuIChQYXJpcywgRlJBTkNFKSA8Y29udGFjdEBsb2dpbGFiLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTMgR29vZ2xlLCBJbmMuDQojIENvcHlyaWdodCAoYykgMjAxNCBBcnVuIFBlcnNhdWQgPGFydW5AbnViYXRpLm5ldD4NCiMgQ29weXJpZ2h0IChjKSAyMDE1LTIwMTcgQ2xhdWRpdSBQb3BhIDxwY21hbnRpY29yZUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNSBNaWtlIEZyeXNpbmdlciA8dmFwaWVyQGdlbnRvby5vcmc+DQojIENvcHlyaWdodCAoYykgMjAxNSBJb25lbCBDcmlzdGlhbiBNYXJpZXMgPGNvbnRhY3RAaW9uZWxtYy5ybz4NCiMgQ29weXJpZ2h0IChjKSAyMDE2IEdsZW5uIE1hdHRoZXdzIDxnbGVubkBlLWRhZC5uZXQ+DQoNCiMgTGljZW5zZWQgdW5kZXIgdGhlIEdQTDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvZ3BsLTIuMC5odG1sDQojIEZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vUHlDUUEvcHlsaW50L2Jsb2IvbWFzdGVyL0NPUFlJTkcNCg0KIiIiIENvcHlyaWdodCAoYykgMjAwMy0yMDEwIExPR0lMQUIgUy5BLiAoUGFyaXMsIEZSQU5DRSkuDQogaHR0cDovL3d3dy5sb2dpbGFiLmZyLyAtLSBtYWlsdG86Y29udGFjdEBsb2dpbGFiLmZyDQoNClJhdyBtZXRyaWNzIGNoZWNrZXINCiIiIg0KDQppbXBvcnQgdG9rZW5pemUNCg0KZnJvbSBweWxpbnQuaW50ZXJmYWNlcyBpbXBvcnQgSVRva2VuQ2hlY2tlcg0KZnJvbSBweWxpbnQuZXhjZXB0aW9ucyBpbXBvcnQgRW1wdHlSZXBvcnRFcnJvcg0KZnJvbSBweWxpbnQuY2hlY2tlcnMgaW1wb3J0IEJhc2VUb2tlbkNoZWNrZXINCmZyb20gcHlsaW50LnJlcG9ydGVycyBpbXBvcnQgZGlmZl9zdHJpbmcNCmZyb20gcHlsaW50LnJlcG9ydGVycy51cmVwb3J0cy5ub2RlcyBpbXBvcnQgVGFibGUNCg0KDQpkZWYgcmVwb3J0X3Jhd19zdGF0cyhzZWN0LCBzdGF0cywgb2xkX3N0YXRzKToNCiAgICAiIiJjYWxjdWxhdGUgcGVyY2VudGFnZSBvZiBjb2RlIC8gZG9jIC8gY29tbWVudCAvIGVtcHR5DQogICAgIiIiDQogICAgdG90YWxfbGluZXMgPSBzdGF0c1sndG90YWxfbGluZXMnXQ0KICAgIGlmIG5vdCB0b3RhbF9saW5lczoNCiAgICAgICAgcmFpc2UgRW1wdHlSZXBvcnRFcnJvcigpDQogICAgc2VjdC5kZXNjcmlwdGlvbiA9ICclcyBsaW5lcyBoYXZlIGJlZW4gYW5hbHl6ZWQnICUgdG90YWxfbGluZXMNCiAgICBsaW5lcyA9ICgndHlwZScsICdudW1iZXInLCAnJScsICdwcmV2aW91cycsICdkaWZmZXJlbmNlJykNCiAgICBmb3Igbm9kZV90eXBlIGluICgnY29kZScsICdkb2NzdHJpbmcnLCAnY29tbWVudCcsICdlbXB0eScpOg0KICAgICAgICBrZXkgPSBub2RlX3R5cGUgKyAnX2xpbmVzJw0KICAgICAgICB0b3RhbCA9IHN0YXRzW2tleV0NCiAgICAgICAgcGVyY2VudCA9IGZsb2F0KHRvdGFsICogMTAwKSAvIHRvdGFsX2xpbmVzDQogICAgICAgIG9sZCA9IG9sZF9zdGF0cy5nZXQoa2V5LCBOb25lKQ0KICAgICAgICBpZiBvbGQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBkaWZmX3N0ciA9IGRpZmZfc3RyaW5nKG9sZCwgdG90YWwpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBvbGQsIGRpZmZfc3RyID0gJ05DJywgJ05DJw0KICAgICAgICBsaW5lcyArPSAobm9kZV90eXBlLCBzdHIodG90YWwpLCAnJS4yZicgJSBwZXJjZW50LA0KICAgICAgICAgICAgICAgICAgc3RyKG9sZCksIGRpZmZfc3RyKQ0KICAgIHNlY3QuYXBwZW5kKFRhYmxlKGNoaWxkcmVuPWxpbmVzLCBjb2xzPTUsIHJoZWFkZXJzPTEpKQ0KDQoNCmNsYXNzIFJhd01ldHJpY3NDaGVja2VyKEJhc2VUb2tlbkNoZWNrZXIpOg0KICAgICIiImRvZXMgbm90IGNoZWNrIGFueXRoaW5nIGJ1dCBnaXZlcyBzb21lIHJhdyBtZXRyaWNzIDoNCiAgICAqIHRvdGFsIG51bWJlciBvZiBsaW5lcw0KICAgICogdG90YWwgbnVtYmVyIG9mIGNvZGUgbGluZXMNCiAgICAqIHRvdGFsIG51bWJlciBvZiBkb2NzdHJpbmcgbGluZXMNCiAgICAqIHRvdGFsIG51bWJlciBvZiBjb21tZW50cyBsaW5lcw0KICAgICogdG90YWwgbnVtYmVyIG9mIGVtcHR5IGxpbmVzDQogICAgIiIiDQoNCiAgICBfX2ltcGxlbWVudHNfXyA9IChJVG9rZW5DaGVja2VyLCkNCg0KICAgICMgY29uZmlndXJhdGlvbiBzZWN0aW9uIG5hbWUNCiAgICBuYW1lID0gJ21ldHJpY3MnDQogICAgIyBjb25maWd1cmF0aW9uIG9wdGlvbnMNCiAgICBvcHRpb25zID0gKCkNCiAgICAjIG1lc3NhZ2VzDQogICAgbXNncyA9IHt9DQogICAgIyByZXBvcnRzDQogICAgcmVwb3J0cyA9ICgoJ1JQMDcwMScsICdSYXcgbWV0cmljcycsIHJlcG9ydF9yYXdfc3RhdHMpLCkNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBsaW50ZXIpOg0KICAgICAgICBCYXNlVG9rZW5DaGVja2VyLl9faW5pdF9fKHNlbGYsIGxpbnRlcikNCiAgICAgICAgc2VsZi5zdGF0cyA9IE5vbmUNCg0KICAgIGRlZiBvcGVuKHNlbGYpOg0KICAgICAgICAiIiJpbml0IHN0YXRpc3RpY3MiIiINCiAgICAgICAgc2VsZi5zdGF0cyA9IHNlbGYubGludGVyLmFkZF9zdGF0cyh0b3RhbF9saW5lcz0wLCBjb2RlX2xpbmVzPTAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlfbGluZXM9MCwgZG9jc3RyaW5nX2xpbmVzPTAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudF9saW5lcz0wKQ0KDQogICAgZGVmIHByb2Nlc3NfdG9rZW5zKHNlbGYsIHRva2Vucyk6DQogICAgICAgICIiInVwZGF0ZSBzdGF0cyIiIg0KICAgICAgICBpID0gMA0KICAgICAgICB0b2tlbnMgPSBsaXN0KHRva2VucykNCiAgICAgICAgd2hpbGUgaSA8IGxlbih0b2tlbnMpOg0KICAgICAgICAgICAgaSwgbGluZXNfbnVtYmVyLCBsaW5lX3R5cGUgPSBnZXRfdHlwZSh0b2tlbnMsIGkpDQogICAgICAgICAgICBzZWxmLnN0YXRzWyd0b3RhbF9saW5lcyddICs9IGxpbmVzX251bWJlcg0KICAgICAgICAgICAgc2VsZi5zdGF0c1tsaW5lX3R5cGVdICs9IGxpbmVzX251bWJlcg0KDQoNCkpVTksgPSAodG9rZW5pemUuTkwsIHRva2VuaXplLklOREVOVCwgdG9rZW5pemUuTkVXTElORSwgdG9rZW5pemUuRU5ETUFSS0VSKQ0KDQpkZWYgZ2V0X3R5cGUodG9rZW5zLCBzdGFydF9pbmRleCk6DQogICAgIiIicmV0dXJuIHRoZSBsaW5lIHR5cGUgOiBkb2NzdHJpbmcsIGNvbW1lbnQsIGNvZGUsIGVtcHR5IiIiDQogICAgaSA9IHN0YXJ0X2luZGV4DQogICAgdG9rX3R5cGUgPSB0b2tlbnNbaV1bMF0NCiAgICBzdGFydCA9IHRva2Vuc1tpXVsyXQ0KICAgIHBvcyA9IHN0YXJ0DQogICAgbGluZV90eXBlID0gTm9uZQ0KICAgIHdoaWxlIGkgPCBsZW4odG9rZW5zKSBhbmQgdG9rZW5zW2ldWzJdWzBdID09IHN0YXJ0WzBdOg0KICAgICAgICB0b2tfdHlwZSA9IHRva2Vuc1tpXVswXQ0KICAgICAgICBwb3MgPSB0b2tlbnNbaV1bM10NCiAgICAgICAgaWYgbGluZV90eXBlIGlzIE5vbmU6DQogICAgICAgICAgICBpZiB0b2tfdHlwZSA9PSB0b2tlbml6ZS5TVFJJTkc6DQogICAgICAgICAgICAgICAgbGluZV90eXBlID0gJ2RvY3N0cmluZ19saW5lcycNCiAgICAgICAgICAgIGVsaWYgdG9rX3R5cGUgPT0gdG9rZW5pemUuQ09NTUVOVDoNCiAgICAgICAgICAgICAgICBsaW5lX3R5cGUgPSAnY29tbWVudF9saW5lcycNCiAgICAgICAgICAgIGVsaWYgdG9rX3R5cGUgaW4gSlVOSzoNCiAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGxpbmVfdHlwZSA9ICdjb2RlX2xpbmVzJw0KICAgICAgICBpICs9IDENCiAgICBpZiBsaW5lX3R5cGUgaXMgTm9uZToNCiAgICAgICAgbGluZV90eXBlID0gJ2VtcHR5X2xpbmVzJw0KICAgIGVsaWYgaSA8IGxlbih0b2tlbnMpIGFuZCB0b2tlbnNbaV1bMF0gPT0gdG9rZW5pemUuTkVXTElORToNCiAgICAgICAgaSArPSAxDQogICAgcmV0dXJuIGksIHBvc1swXSAtIHN0YXJ0WzBdICsgMSwgbGluZV90eXBlDQoNCg0KZGVmIHJlZ2lzdGVyKGxpbnRlcik6DQogICAgIiIiIHJlcXVpcmVkIG1ldGhvZCB0byBhdXRvIHJlZ2lzdGVyIHRoaXMgY2hlY2tlciAiIiINCiAgICBsaW50ZXIucmVnaXN0ZXJfY2hlY2tlcihSYXdNZXRyaWNzQ2hlY2tlcihsaW50ZXIpKQ0K"
          },
          "hashes": [
            {
              "value": "929397F1578B4D3D4DC0457FDB44C350",
              "algorithm": "md5"
            },
            {
              "value": "22EF54EDDE0DB88D9997608FA04872C587BFCF17",
              "algorithm": "sha-1"
            },
            {
              "value": "C8C928038255E4AB9C2CCC7CA3EAC6A6D3AD1BE72A188ACC22DE064D3B65B54D",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/refactoring.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "70BD7A338CBD9CDECD5ADE2E61B84ED9",
              "algorithm": "md5"
            },
            {
              "value": "4A46DFB6C2DA224232EF6704E49B08B4BEDCB054",
              "algorithm": "sha-1"
            },
            {
              "value": "444828D1CDF86D7AF8F620D9FAB66332A1F03A1769D2C4E1B595478A40ABA0BF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/similar.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "E839FE0D8F95164997232DDE62F9CA8C",
              "algorithm": "md5"
            },
            {
              "value": "39E28286383F5A06D87871B6F6F16466C4833371",
              "algorithm": "sha-1"
            },
            {
              "value": "0F80DFFF6899BF3D1547089F309DBA4C22DA0298437D591520E17F8335CD2A94",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/spelling.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "EABE165C51E5888ADE5CF15BE02D5161",
              "algorithm": "md5"
            },
            {
              "value": "7552EB96072C9DDCFCD350D21D1A6021899C89C1",
              "algorithm": "sha-1"
            },
            {
              "value": "1554C2A16AD193AB13E051BA86DE0FC48F0F56DB1CF9CC641C20566AEE0CD0D9",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/stdlib.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "3D8E4F5DDBFEA207BDC83635AF228D72",
              "algorithm": "md5"
            },
            {
              "value": "C6D0BE256C6B17BA1A3419BD81B6D460E06B3B48",
              "algorithm": "sha-1"
            },
            {
              "value": "293C6822806A15E752323F7456ECEEBB43DCADABCE25C5CDF1E3BF3C6C04136B",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/strings.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "DF831EB226E8569EE121B00049937E76",
              "algorithm": "md5"
            },
            {
              "value": "629A0D583BD1D26361D516105CFA6607DECFF8B6",
              "algorithm": "sha-1"
            },
            {
              "value": "4CFF588EF82282CF8A24A5267878541E1E95DD7ECD7ACEF2DB75923F2F86173A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/typecheck.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "3ECE604833A900477EC8144478ABB3E3",
              "algorithm": "md5"
            },
            {
              "value": "ED49DF1392A665B30EEDCA7EB01FBCC90ECD4821",
              "algorithm": "sha-1"
            },
            {
              "value": "63FA06526C30BC4FD57C903A216FDFC34A4B68891B827CB2FEDBFA9F81AAF9F1",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/utils.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDA2LTIwMDcsIDIwMDktMjAxNCBMT0dJTEFCIFMuQS4gKFBhcmlzLCBGUkFOQ0UpIDxjb250YWN0QGxvZ2lsYWIuZnI+DQojIENvcHlyaWdodCAoYykgMjAwOSBNYWRzIEtpaWxlcmljaCA8bWFkc0BraWlsZXJpY2guY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTAgRGFuaWVsIEhhcmRpbmcgPGRoYXJkaW5nQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDEyLTIwMTQgR29vZ2xlLCBJbmMuDQojIENvcHlyaWdodCAoYykgMjAxMiBGRUxEIEJvcmlzIDxsb3RoaXJhbGRhbkBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxMy0yMDE4IENsYXVkaXUgUG9wYSA8cGNtYW50aWNvcmVAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQgQnJldHQgQ2Fubm9uIDxicmV0dEBweXRob24ub3JnPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQgUmljYXJkbyBHZW1pZ25hbmkgPHJpY2FyZG8uZ2VtaWduYW5pQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE0IEFydW4gUGVyc2F1ZCA8YXJ1bkBudWJhdGkubmV0Pg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgRG1pdHJ5IFByaWJ5c2ggPGRtYW5kQHlhbmRleC5ydT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IEZsb3JpYW4gQnJ1aGluIDxtZUB0aGUtY29tcGlsZXIub3JnPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgUmFkdSBDaW9yYmEgPHJhZHVAZGV2cmFuZG9tLnJvPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUgSW9uZWwgQ3Jpc3RpYW4gTWFyaWVzIDxjb250YWN0QGlvbmVsbWMucm8+DQojIENvcHlyaWdodCAoYykgMjAxNiwgMjAxOCBBc2hsZXkgV2hldHRlciA8YXNobGV5QGF3aGV0dGVyLmNvLnVrPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxNyDFgXVrYXN6IFJvZ2Fsc2tpIDxyb2dhbHNraS45MUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNi0yMDE3IE1vaXNlcyBMb3BleiA8bW95bG9wMjYwQHZhdXhvby5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNiBCcmlhbiBDLiBMYW5lIDxiY2xAcmVkaGF0LmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggaGlwcG85MSA8Z3VpbGxhdW1lLnBlaWxsZXhAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTcgdHRlbmhvZXZlLWFhIDx0dGVuaG9ldmVAYXBwYW5uaWUuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggQnJ5Y2UgR3VpbnRhIDxicnljZS5ndWludGFAcHJvdG9ubWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBCcnljZSBHdWludGEgPGJyeWNlLnBhdWwuZ3VpbnRhQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IFZpbGxlIFNreXR0w6QgPHZpbGxlLnNreXR0YUB1cGNsb3VkLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IEJyaWFuIFNoYWdpbmF3IDxicmlhbi5zaGFnaW5hd0B3YXJieXBhcmtlci5jb20+DQoNCiMgTGljZW5zZWQgdW5kZXIgdGhlIEdQTDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvZ3BsLTIuMC5odG1sDQojIEZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vUHlDUUEvcHlsaW50L2Jsb2IvbWFzdGVyL0NPUFlJTkcNCg0KIyBweWxpbnQ6IGRpc2FibGU9VzA2MTENCiIiInNvbWUgZnVuY3Rpb25zIHRoYXQgbWF5IGJlIHVzZWZ1bCBmb3IgdmFyaW91cyBjaGVja2Vycw0KIiIiDQppbXBvcnQgYnVpbHRpbnMNCmZyb20gZnVuY3Rvb2xzIGltcG9ydCBscnVfY2FjaGUsIHBhcnRpYWwsIHNpbmdsZWRpc3BhdGNoDQppbXBvcnQgaXRlcnRvb2xzDQppbXBvcnQgcmUNCmltcG9ydCBzeXMNCmltcG9ydCBzdHJpbmcNCg0KaW1wb3J0IGFzdHJvaWQNCmZyb20gYXN0cm9pZCBpbXBvcnQgYmFzZXMgYXMgX2Jhc2VzDQpmcm9tIGFzdHJvaWQgaW1wb3J0IHNjb3BlZF9ub2Rlcw0KDQoNCkJVSUxUSU5TX05BTUUgPSBidWlsdGlucy5fX25hbWVfXw0KQ09NUF9OT0RFX1RZUEVTID0gKGFzdHJvaWQuTGlzdENvbXAsIGFzdHJvaWQuU2V0Q29tcCwNCiAgICAgICAgICAgICAgICAgICBhc3Ryb2lkLkRpY3RDb21wLCBhc3Ryb2lkLkdlbmVyYXRvckV4cCkNClBZM0sgPSBzeXMudmVyc2lvbl9pbmZvWzBdID09IDMNCg0KaWYgbm90IFBZM0s6DQogICAgRVhDRVBUSU9OU19NT0RVTEUgPSAiZXhjZXB0aW9ucyINCmVsc2U6DQogICAgRVhDRVBUSU9OU19NT0RVTEUgPSAiYnVpbHRpbnMiDQpBQkNfTUVUSE9EUyA9IHsnYWJjLmFic3RyYWN0cHJvcGVydHknLCAnYWJjLmFic3RyYWN0bWV0aG9kJywNCiAgICAgICAgICAgICAgICdhYmMuYWJzdHJhY3RjbGFzc21ldGhvZCcsICdhYmMuYWJzdHJhY3RzdGF0aWNtZXRob2QnfQ0KSVRFUl9NRVRIT0QgPSAnX19pdGVyX18nDQpBSVRFUl9NRVRIT0QgPSAnX19haXRlcl9fJw0KTkVYVF9NRVRIT0QgPSAnX19uZXh0X18nDQpHRVRJVEVNX01FVEhPRCA9ICdfX2dldGl0ZW1fXycNClNFVElURU1fTUVUSE9EID0gJ19fc2V0aXRlbV9fJw0KREVMSVRFTV9NRVRIT0QgPSAnX19kZWxpdGVtX18nDQpDT05UQUlOU19NRVRIT0QgPSAnX19jb250YWluc19fJw0KS0VZU19NRVRIT0QgPSAna2V5cycNCkRBVEFDTEFTU19ERUNPUkFUT1IgPSAnZGF0YWNsYXNzJw0KREFUQUNMQVNTX0lNUE9SVCA9ICdkYXRhY2xhc3NlcycNCg0KIyBEaWN0aW9uYXJ5IHdoaWNoIG1hcHMgdGhlIG51bWJlciBvZiBleHBlY3RlZCBwYXJhbWV0ZXJzIGENCiMgc3BlY2lhbCBtZXRob2QgY2FuIGhhdmUgdG8gYSBzZXQgb2Ygc3BlY2lhbCBtZXRob2RzLg0KIyBUaGUgZm9sbG93aW5nIGtleXMgYXJlIHVzZWQgdG8gZGVub3RlIHRoZSBwYXJhbWV0ZXJzIHJlc3RyaWN0aW9uczoNCiMNCiMgKiBOb25lOiB2YXJpYWJsZSBudW1iZXIgb2YgcGFyYW1ldGVycw0KIyAqIG51bWJlcjogZXhhY3RseSB0aGF0IG51bWJlciBvZiBwYXJhbWV0ZXJzDQojICogdHVwbGU6IHRoaXMgYXJlIHRoZSBvZGQgb25lcy4gQmFzaWNhbGx5IGl0IG1lYW5zIHRoYXQgdGhlIGZ1bmN0aW9uDQojICAgICAgICAgIGNhbiB3b3JrIHdpdGggYW55IG51bWJlciBvZiBhcmd1bWVudHMgZnJvbSB0aGF0IHR1cGxlLA0KIyAgICAgICAgICBhbHRob3VnaCBpdCdzIGJlc3QgdG8gaW1wbGVtZW50IGl0IGluIG9yZGVyIHRvIGFjY2VwdA0KIyAgICAgICAgICBhbGwgb2YgdGhlbS4NCl9TUEVDSUFMX01FVEhPRFNfUEFSQU1TID0gew0KICAgIE5vbmU6ICgnX19uZXdfXycsICdfX2luaXRfXycsICdfX2NhbGxfXycpLA0KDQogICAgMDogKCdfX2RlbF9fJywgJ19fcmVwcl9fJywgJ19fc3RyX18nLCAnX19ieXRlc19fJywgJ19faGFzaF9fJywgJ19fYm9vbF9fJywNCiAgICAgICAgJ19fZGlyX18nLCAnX19sZW5fXycsICdfX2xlbmd0aF9oaW50X18nLCAnX19pdGVyX18nLCAnX19yZXZlcnNlZF9fJywNCiAgICAgICAgJ19fbmVnX18nLCAnX19wb3NfXycsICdfX2Fic19fJywgJ19faW52ZXJ0X18nLCAnX19jb21wbGV4X18nLCAnX19pbnRfXycsDQogICAgICAgICdfX2Zsb2F0X18nLCAnX19uZWdfXycsICdfX3Bvc19fJywgJ19fYWJzX18nLCAnX19jb21wbGV4X18nLCAnX19pbnRfXycsDQogICAgICAgICdfX2Zsb2F0X18nLCAnX19pbmRleF9fJywgJ19fZW50ZXJfXycsICdfX2FlbnRlcl9fJywgJ19fZ2V0bmV3YXJnc19leF9fJywNCiAgICAgICAgJ19fZ2V0bmV3YXJnc19fJywgJ19fZ2V0c3RhdGVfXycsICdfX3JlZHVjZV9fJywgJ19fY29weV9fJywNCiAgICAgICAgJ19fdW5pY29kZV9fJywgJ19fbm9uemVyb19fJywgJ19fYXdhaXRfXycsICdfX2FpdGVyX18nLCAnX19hbmV4dF9fJywNCiAgICAgICAgJ19fZnNwYXRoX18nKSwNCg0KICAgIDE6ICgnX19mb3JtYXRfXycsICdfX2x0X18nLCAnX19sZV9fJywgJ19fZXFfXycsICdfX25lX18nLCAnX19ndF9fJywNCiAgICAgICAgJ19fZ2VfXycsICdfX2dldGF0dHJfXycsICdfX2dldGF0dHJpYnV0ZV9fJywgJ19fZGVsYXR0cl9fJywNCiAgICAgICAgJ19fZGVsZXRlX18nLCAnX19pbnN0YW5jZWNoZWNrX18nLCAnX19zdWJjbGFzc2NoZWNrX18nLA0KICAgICAgICAnX19nZXRpdGVtX18nLCAnX19taXNzaW5nX18nLCAnX19kZWxpdGVtX18nLCAnX19jb250YWluc19fJywNCiAgICAgICAgJ19fYWRkX18nLCAnX19zdWJfXycsICdfX211bF9fJywgJ19fdHJ1ZWRpdl9fJywgJ19fZmxvb3JkaXZfXycsDQogICAgICAgICdfX21vZF9fJywgJ19fZGl2bW9kX18nLCAnX19sc2hpZnRfXycsICdfX3JzaGlmdF9fJywgJ19fYW5kX18nLA0KICAgICAgICAnX194b3JfXycsICdfX29yX18nLCAnX19yYWRkX18nLCAnX19yc3ViX18nLCAnX19ybXVsX18nLCAnX19ydHJ1ZWRpdl9fJywNCiAgICAgICAgJ19fcm1vZF9fJywgJ19fcmRpdm1vZF9fJywgJ19fcnBvd19fJywgJ19fcmxzaGlmdF9fJywgJ19fcnJzaGlmdF9fJywNCiAgICAgICAgJ19fcmFuZF9fJywgJ19fcnhvcl9fJywgJ19fcm9yX18nLCAnX19pYWRkX18nLCAnX19pc3ViX18nLCAnX19pbXVsX18nLA0KICAgICAgICAnX19pdHJ1ZWRpdl9fJywgJ19faWZsb29yZGl2X18nLCAnX19pbW9kX18nLCAnX19pbHNoaWZ0X18nLA0KICAgICAgICAnX19pcnNoaWZ0X18nLCAnX19pYW5kX18nLCAnX19peG9yX18nLCAnX19pb3JfXycsICdfX2lwb3dfXycsDQogICAgICAgICdfX3NldHN0YXRlX18nLCAnX19yZWR1Y2VfZXhfXycsICdfX2RlZXBjb3B5X18nLCAnX19jbXBfXycsDQogICAgICAgICdfX21hdG11bF9fJywgJ19fcm1hdG11bF9fJywgJ19fZGl2X18nKSwNCg0KICAgIDI6ICgnX19zZXRhdHRyX18nLCAnX19nZXRfXycsICdfX3NldF9fJywgJ19fc2V0aXRlbV9fJywgJ19fc2V0X25hbWVfXycpLA0KDQogICAgMzogKCdfX2V4aXRfXycsICdfX2FleGl0X18nKSwNCg0KICAgICgwLCAxKTogKCdfX3JvdW5kX18nLCApLA0KfQ0KDQpTUEVDSUFMX01FVEhPRFNfUEFSQU1TID0gew0KICAgIG5hbWU6IHBhcmFtcw0KICAgIGZvciBwYXJhbXMsIG1ldGhvZHMgaW4gX1NQRUNJQUxfTUVUSE9EU19QQVJBTVMuaXRlbXMoKQ0KICAgIGZvciBuYW1lIGluIG1ldGhvZHMNCn0NClBZTUVUSE9EUyA9IHNldChTUEVDSUFMX01FVEhPRFNfUEFSQU1TKQ0KDQoNCmNsYXNzIE5vU3VjaEFyZ3VtZW50RXJyb3IoRXhjZXB0aW9uKToNCiAgICBwYXNzDQoNCmRlZiBpc19pbnNpZGVfZXhjZXB0KG5vZGUpOg0KICAgICIiIlJldHVybnMgdHJ1ZSBpZiBub2RlIGlzIGluc2lkZSB0aGUgbmFtZSBvZiBhbiBleGNlcHQgaGFuZGxlci4iIiINCiAgICBjdXJyZW50ID0gbm9kZQ0KICAgIHdoaWxlIGN1cnJlbnQgYW5kIG5vdCBpc2luc3RhbmNlKGN1cnJlbnQucGFyZW50LCBhc3Ryb2lkLkV4Y2VwdEhhbmRsZXIpOg0KICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQNCg0KICAgIHJldHVybiBjdXJyZW50IGFuZCBjdXJyZW50IGlzIGN1cnJlbnQucGFyZW50Lm5hbWUNCg0KDQpkZWYgaXNfaW5zaWRlX2xhbWJkYShub2RlKToNCiAgICAjIHR5cGU6IChhc3Ryb2lkLk5vZGVORykgLT4gYm9vbA0KICAgICIiIlJldHVybiB0cnVlIGlmIGdpdmVuIG5vZGUgaXMgaW5zaWRlIGxhbWJkYSIiIg0KICAgIHBhcmVudCA9IG5vZGUucGFyZW50DQogICAgd2hpbGUgcGFyZW50IGlzIG5vdCBOb25lOg0KICAgICAgICBpZiBpc2luc3RhbmNlKHBhcmVudCwgYXN0cm9pZC5MYW1iZGEpOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudA0KICAgIHJldHVybiBGYWxzZQ0KDQoNCmRlZiBnZXRfYWxsX2VsZW1lbnRzKG5vZGUpOg0KICAgICIiIlJlY3Vyc2l2ZWx5IHJldHVybnMgYWxsIGF0b21zIGluIG5lc3RlZCBsaXN0cyBhbmQgdHVwbGVzLiIiIg0KICAgIGlmIGlzaW5zdGFuY2Uobm9kZSwgKGFzdHJvaWQuVHVwbGUsIGFzdHJvaWQuTGlzdCkpOg0KICAgICAgICBmb3IgY2hpbGQgaW4gbm9kZS5lbHRzOg0KICAgICAgICAgICAgZm9yIGUgaW4gZ2V0X2FsbF9lbGVtZW50cyhjaGlsZCk6DQogICAgICAgICAgICAgICAgeWllbGQgZQ0KICAgIGVsc2U6DQogICAgICAgIHlpZWxkIG5vZGUNCg0KDQpkZWYgY2xvYmJlcl9pbl9leGNlcHQobm9kZSk6DQogICAgIiIiQ2hlY2tzIGlmIGFuIGFzc2lnbm1lbnQgbm9kZSBpbiBhbiBleGNlcHQgaGFuZGxlciBjbG9iYmVycyBhbiBleGlzdGluZw0KICAgIHZhcmlhYmxlLg0KDQogICAgUmV0dXJucyAoVHJ1ZSwgYXJncyBmb3IgVzA2MjMpIGlmIGFzc2lnbm1lbnQgY2xvYmJlcnMgYW4gZXhpc3RpbmcgdmFyaWFibGUsDQogICAgKEZhbHNlLCBOb25lKSBvdGhlcndpc2UuDQogICAgIiIiDQogICAgaWYgaXNpbnN0YW5jZShub2RlLCBhc3Ryb2lkLkFzc2lnbkF0dHIpOg0KICAgICAgICByZXR1cm4gVHJ1ZSwgKG5vZGUuYXR0cm5hbWUsICdvYmplY3QgJXInICUgKG5vZGUuZXhwci5hc19zdHJpbmcoKSwpKQ0KICAgIGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0cm9pZC5Bc3NpZ25OYW1lKToNCiAgICAgICAgbmFtZSA9IG5vZGUubmFtZQ0KICAgICAgICBpZiBpc19idWlsdGluKG5hbWUpOg0KICAgICAgICAgICAgcmV0dXJuIChUcnVlLCAobmFtZSwgJ2J1aWx0aW5zJykpDQoNCiAgICAgICAgc3RtdHMgPSBub2RlLmxvb2t1cChuYW1lKVsxXQ0KICAgICAgICBpZiAoc3RtdHMgYW5kIG5vdCBpc2luc3RhbmNlKHN0bXRzWzBdLmFzc2lnbl90eXBlKCksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFzdHJvaWQuQXNzaWduLCBhc3Ryb2lkLkF1Z0Fzc2lnbiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN0cm9pZC5FeGNlcHRIYW5kbGVyKSkpOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUsIChuYW1lLCAnb3V0ZXIgc2NvcGUgKGxpbmUgJXMpJyAlIHN0bXRzWzBdLmZyb21saW5lbm8pDQogICAgcmV0dXJuIEZhbHNlLCBOb25lDQoNCg0KZGVmIGlzX3N1cGVyKG5vZGUpOg0KICAgICIiInJldHVybiBUcnVlIGlmIHRoZSBub2RlIGlzIHJlZmVyZW5jaW5nIHRoZSAic3VwZXIiIGJ1aWx0aW4gZnVuY3Rpb24NCiAgICAiIiINCiAgICBpZiBnZXRhdHRyKG5vZGUsICduYW1lJywgTm9uZSkgPT0gJ3N1cGVyJyBhbmQgXA0KICAgICAgICAgICBub2RlLnJvb3QoKS5uYW1lID09IEJVSUxUSU5TX05BTUU6DQogICAgICAgIHJldHVybiBUcnVlDQogICAgcmV0dXJuIEZhbHNlDQoNCmRlZiBpc19lcnJvcihub2RlKToNCiAgICAiIiJyZXR1cm4gdHJ1ZSBpZiB0aGUgZnVuY3Rpb24gZG9lcyBub3RoaW5nIGJ1dCByYWlzaW5nIGFuIGV4Y2VwdGlvbiIiIg0KICAgIGZvciBjaGlsZF9ub2RlIGluIG5vZGUuZ2V0X2NoaWxkcmVuKCk6DQogICAgICAgIGlmIGlzaW5zdGFuY2UoY2hpbGRfbm9kZSwgYXN0cm9pZC5SYWlzZSk6DQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KZGVmIGlzX3JhaXNpbmcoYm9keSk6DQogICAgIiIicmV0dXJuIHRydWUgaWYgdGhlIGdpdmVuIHN0YXRlbWVudCBub2RlIHJhaXNlIGFuIGV4Y2VwdGlvbiIiIg0KICAgIGZvciBub2RlIGluIGJvZHk6DQogICAgICAgIGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0cm9pZC5SYWlzZSk6DQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0KDQpidWlsdGlucyA9IGJ1aWx0aW5zLl9fZGljdF9fLmNvcHkoKQ0KU1BFQ0lBTF9CVUlMVElOUyA9ICgnX19idWlsdGluc19fJywpICMgJ19fcGF0aF9fJywgJ19fZmlsZV9fJykNCg0KZGVmIGlzX2J1aWx0aW5fb2JqZWN0KG5vZGUpOg0KICAgICIiIlJldHVybnMgVHJ1ZSBpZiB0aGUgZ2l2ZW4gbm9kZSBpcyBhbiBvYmplY3QgZnJvbSB0aGUgX19idWlsdGluX18gbW9kdWxlLiIiIg0KICAgIHJldHVybiBub2RlIGFuZCBub2RlLnJvb3QoKS5uYW1lID09IEJVSUxUSU5TX05BTUUNCg0KZGVmIGlzX2J1aWx0aW4obmFtZSk6DQogICAgIiIicmV0dXJuIHRydWUgaWYgPG5hbWU+IGNvdWxkIGJlIGNvbnNpZGVyZWQgYXMgYSBidWlsdGluIGRlZmluZWQgYnkgcHl0aG9uDQogICAgIiIiDQogICAgcmV0dXJuIG5hbWUgaW4gYnVpbHRpbnMgb3IgbmFtZSBpbiBTUEVDSUFMX0JVSUxUSU5TDQoNCmRlZiBpc19kZWZpbmVkX2JlZm9yZSh2YXJfbm9kZSk6DQogICAgIiIicmV0dXJuIFRydWUgaWYgdGhlIHZhcmlhYmxlIG5vZGUgaXMgZGVmaW5lZCBieSBhIHBhcmVudCBub2RlIChsaXN0LA0KICAgIHNldCwgZGljdCwgb3IgZ2VuZXJhdG9yIGNvbXByZWhlbnNpb24sIGxhbWJkYSkgb3IgaW4gYSBwcmV2aW91cyBzaWJsaW5nDQogICAgbm9kZSBvbiB0aGUgc2FtZSBsaW5lIChzdGF0ZW1lbnRfZGVmaW5pbmcgOyBzdGF0ZW1lbnRfdXNpbmcpDQogICAgIiIiDQogICAgdmFybmFtZSA9IHZhcl9ub2RlLm5hbWUNCiAgICBfbm9kZSA9IHZhcl9ub2RlLnBhcmVudA0KICAgIHdoaWxlIF9ub2RlOg0KICAgICAgICBpZiBpc2luc3RhbmNlKF9ub2RlLCAoQ09NUF9OT0RFX1RZUEVTLCBhc3Ryb2lkLkZvcikpOg0KICAgICAgICAgICAgZm9yIGFzc19ub2RlIGluIF9ub2RlLm5vZGVzX29mX2NsYXNzKGFzdHJvaWQuQXNzaWduTmFtZSk6DQogICAgICAgICAgICAgICAgaWYgYXNzX25vZGUubmFtZSA9PSB2YXJuYW1lOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICBlbGlmIGlzaW5zdGFuY2UoX25vZGUsIGFzdHJvaWQuV2l0aCk6DQogICAgICAgICAgICBmb3IgZXhwciwgaWRzIGluIF9ub2RlLml0ZW1zOg0KICAgICAgICAgICAgICAgIGlmIGV4cHIucGFyZW50X29mKHZhcl9ub2RlKToNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBpZiAoaWRzIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgaXNpbnN0YW5jZShpZHMsIGFzdHJvaWQuQXNzaWduTmFtZSkgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICBpZHMubmFtZSA9PSB2YXJuYW1lKToNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgZWxpZiBpc2luc3RhbmNlKF9ub2RlLCAoYXN0cm9pZC5MYW1iZGEsIGFzdHJvaWQuRnVuY3Rpb25EZWYpKToNCiAgICAgICAgICAgIGlmIF9ub2RlLmFyZ3MuaXNfYXJndW1lbnQodmFybmFtZSk6DQogICAgICAgICAgICAgICAgIyBJZiB0aGUgbmFtZSBpcyBmb3VuZCBpbnNpZGUgYSBkZWZhdWx0IHZhbHVlDQogICAgICAgICAgICAgICAgIyBvZiBhIGZ1bmN0aW9uLCB0aGVuIGxldCB0aGUgc2VhcmNoIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgIyBpbiB0aGUgcGFyZW50J3MgdHJlZS4NCiAgICAgICAgICAgICAgICBpZiBfbm9kZS5hcmdzLnBhcmVudF9vZih2YXJfbm9kZSk6DQogICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIF9ub2RlLmFyZ3MuZGVmYXVsdF92YWx1ZSh2YXJuYW1lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgX25vZGUgPSBfbm9kZS5wYXJlbnQNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBhc3Ryb2lkLk5vRGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICAgICAgaWYgZ2V0YXR0cihfbm9kZSwgJ25hbWUnLCBOb25lKSA9PSB2YXJuYW1lOg0KICAgICAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgIGVsaWYgaXNpbnN0YW5jZShfbm9kZSwgYXN0cm9pZC5FeGNlcHRIYW5kbGVyKToNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoX25vZGUubmFtZSwgYXN0cm9pZC5Bc3NpZ25OYW1lKToNCiAgICAgICAgICAgICAgICBhc3Nfbm9kZSA9IF9ub2RlLm5hbWUNCiAgICAgICAgICAgICAgICBpZiBhc3Nfbm9kZS5uYW1lID09IHZhcm5hbWU6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgIF9ub2RlID0gX25vZGUucGFyZW50DQogICAgIyBwb3NzaWJseSBtdWx0aXBsZSBzdGF0ZW1lbnRzIG9uIHRoZSBzYW1lIGxpbmUgdXNpbmcgc2VtaSBjb2xvbiBzZXBhcmF0b3INCiAgICBzdG10ID0gdmFyX25vZGUuc3RhdGVtZW50KCkNCiAgICBfbm9kZSA9IHN0bXQucHJldmlvdXNfc2libGluZygpDQogICAgbGluZW5vID0gc3RtdC5mcm9tbGluZW5vDQogICAgd2hpbGUgX25vZGUgYW5kIF9ub2RlLmZyb21saW5lbm8gPT0gbGluZW5vOg0KICAgICAgICBmb3IgYXNzX25vZGUgaW4gX25vZGUubm9kZXNfb2ZfY2xhc3MoYXN0cm9pZC5Bc3NpZ25OYW1lKToNCiAgICAgICAgICAgIGlmIGFzc19ub2RlLm5hbWUgPT0gdmFybmFtZToNCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICBmb3IgaW1wX25vZGUgaW4gX25vZGUubm9kZXNfb2ZfY2xhc3MoKGFzdHJvaWQuSW1wb3J0RnJvbSwgYXN0cm9pZC5JbXBvcnQpKToNCiAgICAgICAgICAgIGlmIHZhcm5hbWUgaW4gW25hbWVbMV0gb3IgbmFtZVswXSBmb3IgbmFtZSBpbiBpbXBfbm9kZS5uYW1lc106DQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgX25vZGUgPSBfbm9kZS5wcmV2aW91c19zaWJsaW5nKCkNCiAgICByZXR1cm4gRmFsc2UNCg0KZGVmIGlzX2RlZmF1bHRfYXJndW1lbnQobm9kZSk6DQogICAgIiIicmV0dXJuIHRydWUgaWYgdGhlIGdpdmVuIE5hbWUgbm9kZSBpcyB1c2VkIGluIGZ1bmN0aW9uIG9yIGxhbWJkYQ0KICAgIGRlZmF1bHQgYXJndW1lbnQncyB2YWx1ZQ0KICAgICIiIg0KICAgIHBhcmVudCA9IG5vZGUuc2NvcGUoKQ0KICAgIGlmIGlzaW5zdGFuY2UocGFyZW50LCAoYXN0cm9pZC5GdW5jdGlvbkRlZiwgYXN0cm9pZC5MYW1iZGEpKToNCiAgICAgICAgZm9yIGRlZmF1bHRfbm9kZSBpbiBwYXJlbnQuYXJncy5kZWZhdWx0czoNCiAgICAgICAgICAgIGZvciBkZWZhdWx0X25hbWVfbm9kZSBpbiBkZWZhdWx0X25vZGUubm9kZXNfb2ZfY2xhc3MoYXN0cm9pZC5OYW1lKToNCiAgICAgICAgICAgICAgICBpZiBkZWZhdWx0X25hbWVfbm9kZSBpcyBub2RlOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0KDQoNCmRlZiBpc19mdW5jX2RlY29yYXRvcihub2RlKToNCiAgICAiIiJyZXR1cm4gdHJ1ZSBpZiB0aGUgbmFtZSBpcyB1c2VkIGluIGZ1bmN0aW9uIGRlY29yYXRvciIiIg0KICAgIHBhcmVudCA9IG5vZGUucGFyZW50DQogICAgd2hpbGUgcGFyZW50IGlzIG5vdCBOb25lOg0KICAgICAgICBpZiBpc2luc3RhbmNlKHBhcmVudCwgYXN0cm9pZC5EZWNvcmF0b3JzKToNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgIGlmIChwYXJlbnQuaXNfc3RhdGVtZW50IG9yDQogICAgICAgICAgICAgICAgaXNpbnN0YW5jZShwYXJlbnQsIChhc3Ryb2lkLkxhbWJkYSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlZF9ub2Rlcy5Db21wcmVoZW5zaW9uU2NvcGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZWRfbm9kZXMuTGlzdENvbXApKSk6DQogICAgICAgICAgICBicmVhaw0KICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50DQogICAgcmV0dXJuIEZhbHNlDQoNCmRlZiBpc19hbmNlc3Rvcl9uYW1lKGZyYW1lLCBub2RlKToNCiAgICAiIiJyZXR1cm4gVHJ1ZSBpZiBgZnJhbWVgIGlzIGFuIGFzdHJvaWQuQ2xhc3Mgbm9kZSB3aXRoIGBub2RlYCBpbiB0aGUNCiAgICBzdWJ0cmVlIG9mIGl0cyBiYXNlcyBhdHRyaWJ1dGUNCiAgICAiIiINCiAgICB0cnk6DQogICAgICAgIGJhc2VzID0gZnJhbWUuYmFzZXMNCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIGZvciBiYXNlIGluIGJhc2VzOg0KICAgICAgICBpZiBub2RlIGluIGJhc2Uubm9kZXNfb2ZfY2xhc3MoYXN0cm9pZC5OYW1lKToNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgcmV0dXJuIEZhbHNlDQoNCmRlZiBhc3NpZ25fcGFyZW50KG5vZGUpOg0KICAgICIiInJldHVybiB0aGUgaGlnaGVyIHBhcmVudCB3aGljaCBpcyBub3QgYW4gQXNzaWduTmFtZSwgVHVwbGUgb3IgTGlzdCBub2RlDQogICAgIiIiDQogICAgd2hpbGUgbm9kZSBhbmQgaXNpbnN0YW5jZShub2RlLCAoYXN0cm9pZC5Bc3NpZ25OYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzdHJvaWQuVHVwbGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN0cm9pZC5MaXN0KSk6DQogICAgICAgIG5vZGUgPSBub2RlLnBhcmVudA0KICAgIHJldHVybiBub2RlDQoNCg0KZGVmIG92ZXJyaWRlc19hX21ldGhvZChjbGFzc19ub2RlLCBuYW1lKToNCiAgICAiIiJyZXR1cm4gVHJ1ZSBpZiA8bmFtZT4gaXMgYSBtZXRob2Qgb3ZlcnJpZGRlbiBmcm9tIGFuIGFuY2VzdG9yIiIiDQogICAgZm9yIGFuY2VzdG9yIGluIGNsYXNzX25vZGUuYW5jZXN0b3JzKCk6DQogICAgICAgIGlmIG5hbWUgaW4gYW5jZXN0b3IgYW5kIGlzaW5zdGFuY2UoYW5jZXN0b3JbbmFtZV0sIGFzdHJvaWQuRnVuY3Rpb25EZWYpOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICByZXR1cm4gRmFsc2UNCg0KZGVmIGNoZWNrX21lc3NhZ2VzKCptZXNzYWdlcyk6DQogICAgIiIiZGVjb3JhdG9yIHRvIHN0b3JlIG1lc3NhZ2VzIHRoYXQgYXJlIGhhbmRsZWQgYnkgYSBjaGVja2VyIG1ldGhvZCIiIg0KDQogICAgZGVmIHN0b3JlX21lc3NhZ2VzKGZ1bmMpOg0KICAgICAgICBmdW5jLmNoZWNrc19tc2dzID0gbWVzc2FnZXMNCiAgICAgICAgcmV0dXJuIGZ1bmMNCiAgICByZXR1cm4gc3RvcmVfbWVzc2FnZXMNCg0KY2xhc3MgSW5jb21wbGV0ZUZvcm1hdFN0cmluZyhFeGNlcHRpb24pOg0KICAgICIiIkEgZm9ybWF0IHN0cmluZyBlbmRlZCBpbiB0aGUgbWlkZGxlIG9mIGEgZm9ybWF0IHNwZWNpZmllci4iIiINCiAgICBwYXNzDQoNCmNsYXNzIFVuc3VwcG9ydGVkRm9ybWF0Q2hhcmFjdGVyKEV4Y2VwdGlvbik6DQogICAgIiIiQSBmb3JtYXQgY2hhcmFjdGVyIGluIGEgZm9ybWF0IHN0cmluZyBpcyBub3Qgb25lIG9mIHRoZSBzdXBwb3J0ZWQNCiAgICBmb3JtYXQgY2hhcmFjdGVycy4iIiINCiAgICBkZWYgX19pbml0X18oc2VsZiwgaW5kZXgpOg0KICAgICAgICBFeGNlcHRpb24uX19pbml0X18oc2VsZiwgaW5kZXgpDQogICAgICAgIHNlbGYuaW5kZXggPSBpbmRleA0KDQpkZWYgcGFyc2VfZm9ybWF0X3N0cmluZyhmb3JtYXRfc3RyaW5nKToNCiAgICAiIiJQYXJzZXMgYSBmb3JtYXQgc3RyaW5nLCByZXR1cm5pbmcgYSB0dXBsZSBvZiAoa2V5cywgbnVtX2FyZ3MpLCB3aGVyZSBrZXlzDQogICAgaXMgdGhlIHNldCBvZiBtYXBwaW5nIGtleXMgaW4gdGhlIGZvcm1hdCBzdHJpbmcsIGFuZCBudW1fYXJncyBpcyB0aGUgbnVtYmVyDQogICAgb2YgYXJndW1lbnRzIHJlcXVpcmVkIGJ5IHRoZSBmb3JtYXQgc3RyaW5nLiAgUmFpc2VzDQogICAgSW5jb21wbGV0ZUZvcm1hdFN0cmluZyBvciBVbnN1cHBvcnRlZEZvcm1hdENoYXJhY3RlciBpZiBhDQogICAgcGFyc2UgZXJyb3Igb2NjdXJzLiIiIg0KICAgIGtleXMgPSBzZXQoKQ0KICAgIG51bV9hcmdzID0gMA0KICAgIGRlZiBuZXh0X2NoYXIoaSk6DQogICAgICAgIGkgKz0gMQ0KICAgICAgICBpZiBpID09IGxlbihmb3JtYXRfc3RyaW5nKToNCiAgICAgICAgICAgIHJhaXNlIEluY29tcGxldGVGb3JtYXRTdHJpbmcNCiAgICAgICAgcmV0dXJuIChpLCBmb3JtYXRfc3RyaW5nW2ldKQ0KICAgIGkgPSAwDQogICAgd2hpbGUgaSA8IGxlbihmb3JtYXRfc3RyaW5nKToNCiAgICAgICAgY2hhciA9IGZvcm1hdF9zdHJpbmdbaV0NCiAgICAgICAgaWYgY2hhciA9PSAnJSc6DQogICAgICAgICAgICBpLCBjaGFyID0gbmV4dF9jaGFyKGkpDQogICAgICAgICAgICAjIFBhcnNlIHRoZSBtYXBwaW5nIGtleSAob3B0aW9uYWwpLg0KICAgICAgICAgICAga2V5ID0gTm9uZQ0KICAgICAgICAgICAgaWYgY2hhciA9PSAnKCc6DQogICAgICAgICAgICAgICAgZGVwdGggPSAxDQogICAgICAgICAgICAgICAgaSwgY2hhciA9IG5leHRfY2hhcihpKQ0KICAgICAgICAgICAgICAgIGtleV9zdGFydCA9IGkNCiAgICAgICAgICAgICAgICB3aGlsZSBkZXB0aCAhPSAwOg0KICAgICAgICAgICAgICAgICAgICBpZiBjaGFyID09ICcoJzoNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHRoICs9IDENCiAgICAgICAgICAgICAgICAgICAgZWxpZiBjaGFyID09ICcpJzoNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHRoIC09IDENCiAgICAgICAgICAgICAgICAgICAgaSwgY2hhciA9IG5leHRfY2hhcihpKQ0KICAgICAgICAgICAgICAgIGtleV9lbmQgPSBpIC0gMQ0KICAgICAgICAgICAgICAgIGtleSA9IGZvcm1hdF9zdHJpbmdba2V5X3N0YXJ0OmtleV9lbmRdDQoNCiAgICAgICAgICAgICMgUGFyc2UgdGhlIGNvbnZlcnNpb24gZmxhZ3MgKG9wdGlvbmFsKS4NCiAgICAgICAgICAgIHdoaWxlIGNoYXIgaW4gJyMwLSArJzoNCiAgICAgICAgICAgICAgICBpLCBjaGFyID0gbmV4dF9jaGFyKGkpDQogICAgICAgICAgICAjIFBhcnNlIHRoZSBtaW5pbXVtIGZpZWxkIHdpZHRoIChvcHRpb25hbCkuDQogICAgICAgICAgICBpZiBjaGFyID09ICcqJzoNCiAgICAgICAgICAgICAgICBudW1fYXJncyArPSAxDQogICAgICAgICAgICAgICAgaSwgY2hhciA9IG5leHRfY2hhcihpKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICB3aGlsZSBjaGFyIGluIHN0cmluZy5kaWdpdHM6DQogICAgICAgICAgICAgICAgICAgIGksIGNoYXIgPSBuZXh0X2NoYXIoaSkNCiAgICAgICAgICAgICMgUGFyc2UgdGhlIHByZWNpc2lvbiAob3B0aW9uYWwpLg0KICAgICAgICAgICAgaWYgY2hhciA9PSAnLic6DQogICAgICAgICAgICAgICAgaSwgY2hhciA9IG5leHRfY2hhcihpKQ0KICAgICAgICAgICAgICAgIGlmIGNoYXIgPT0gJyonOg0KICAgICAgICAgICAgICAgICAgICBudW1fYXJncyArPSAxDQogICAgICAgICAgICAgICAgICAgIGksIGNoYXIgPSBuZXh0X2NoYXIoaSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICB3aGlsZSBjaGFyIGluIHN0cmluZy5kaWdpdHM6DQogICAgICAgICAgICAgICAgICAgICAgICBpLCBjaGFyID0gbmV4dF9jaGFyKGkpDQogICAgICAgICAgICAjIFBhcnNlIHRoZSBsZW5ndGggbW9kaWZpZXIgKG9wdGlvbmFsKS4NCiAgICAgICAgICAgIGlmIGNoYXIgaW4gJ2hsTCc6DQogICAgICAgICAgICAgICAgaSwgY2hhciA9IG5leHRfY2hhcihpKQ0KICAgICAgICAgICAgIyBQYXJzZSB0aGUgY29udmVyc2lvbiB0eXBlIChtYW5kYXRvcnkpLg0KICAgICAgICAgICAgaWYgUFkzSzoNCiAgICAgICAgICAgICAgICBmbGFncyA9ICdkaW91eFhlRWZGZ0djcnMlYScNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZmxhZ3MgPSAnZGlvdXhYZUVmRmdHY3JzJScNCiAgICAgICAgICAgIGlmIGNoYXIgbm90IGluIGZsYWdzOg0KICAgICAgICAgICAgICAgIHJhaXNlIFVuc3VwcG9ydGVkRm9ybWF0Q2hhcmFjdGVyKGkpDQogICAgICAgICAgICBpZiBrZXk6DQogICAgICAgICAgICAgICAga2V5cy5hZGQoa2V5KQ0KICAgICAgICAgICAgZWxpZiBjaGFyICE9ICclJzoNCiAgICAgICAgICAgICAgICBudW1fYXJncyArPSAxDQogICAgICAgIGkgKz0gMQ0KICAgIHJldHVybiBrZXlzLCBudW1fYXJncw0KDQoNCmRlZiBpc19hdHRyX3Byb3RlY3RlZChhdHRybmFtZSk6DQogICAgIiIicmV0dXJuIFRydWUgaWYgYXR0cmlidXRlIG5hbWUgaXMgcHJvdGVjdGVkIChzdGFydCB3aXRoIF8gYW5kIHNvbWUgb3RoZXINCiAgICBkZXRhaWxzKSwgRmFsc2Ugb3RoZXJ3aXNlLg0KICAgICIiIg0KICAgIHJldHVybiBhdHRybmFtZVswXSA9PSAnXycgYW5kIGF0dHJuYW1lICE9ICdfJyBhbmQgbm90ICgNCiAgICAgICAgYXR0cm5hbWUuc3RhcnRzd2l0aCgnX18nKSBhbmQgYXR0cm5hbWUuZW5kc3dpdGgoJ19fJykpDQoNCmRlZiBub2RlX2ZyYW1lX2NsYXNzKG5vZGUpOg0KICAgICIiInJldHVybiBrbGFzcyBub2RlIGZvciBhIG1ldGhvZCBub2RlIChvciBhIHN0YXRpY21ldGhvZCBvciBhDQogICAgY2xhc3NtZXRob2QpLCByZXR1cm4gbnVsbCBvdGhlcndpc2UNCiAgICAiIiINCiAgICBrbGFzcyA9IG5vZGUuZnJhbWUoKQ0KDQogICAgd2hpbGUga2xhc3MgaXMgbm90IE5vbmUgYW5kIG5vdCBpc2luc3RhbmNlKGtsYXNzLCBhc3Ryb2lkLkNsYXNzRGVmKToNCiAgICAgICAgaWYga2xhc3MucGFyZW50IGlzIE5vbmU6DQogICAgICAgICAgICBrbGFzcyA9IE5vbmUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGtsYXNzID0ga2xhc3MucGFyZW50LmZyYW1lKCkNCg0KICAgIHJldHVybiBrbGFzcw0KDQoNCmRlZiBpc19hdHRyX3ByaXZhdGUoYXR0cm5hbWUpOg0KICAgICIiIkNoZWNrIHRoYXQgYXR0cmlidXRlIG5hbWUgaXMgcHJpdmF0ZSAoYXQgbGVhc3QgdHdvIGxlYWRpbmcgdW5kZXJzY29yZXMsDQogICAgYXQgbW9zdCBvbmUgdHJhaWxpbmcgdW5kZXJzY29yZSkNCiAgICAiIiINCiAgICByZWdleCA9IHJlLmNvbXBpbGUoJ15fezIsfS4qW15fXStfPyQnKQ0KICAgIHJldHVybiByZWdleC5tYXRjaChhdHRybmFtZSkNCg0KZGVmIGdldF9hcmd1bWVudF9mcm9tX2NhbGwoY2FsbF9ub2RlLCBwb3NpdGlvbj1Ob25lLCBrZXl3b3JkPU5vbmUpOg0KICAgICIiIlJldHVybnMgdGhlIHNwZWNpZmllZCBhcmd1bWVudCBmcm9tIGEgZnVuY3Rpb24gY2FsbC4NCg0KICAgIDpwYXJhbSBhc3Ryb2lkLkNhbGwgY2FsbF9ub2RlOiBOb2RlIHJlcHJlc2VudGluZyBhIGZ1bmN0aW9uIGNhbGwgdG8gY2hlY2suDQogICAgOnBhcmFtIGludCBwb3NpdGlvbjogcG9zaXRpb24gb2YgdGhlIGFyZ3VtZW50Lg0KICAgIDpwYXJhbSBzdHIga2V5d29yZDogdGhlIGtleXdvcmQgb2YgdGhlIGFyZ3VtZW50Lg0KDQogICAgOnJldHVybnM6IFRoZSBub2RlIHJlcHJlc2VudGluZyB0aGUgYXJndW1lbnQsIE5vbmUgaWYgdGhlIGFyZ3VtZW50IGlzIG5vdCBmb3VuZC4NCiAgICA6cnR5cGU6IGFzdHJvaWQuTmFtZQ0KICAgIDpyYWlzZXMgVmFsdWVFcnJvcjogaWYgYm90aCBwb3NpdGlvbiBhbmQga2V5d29yZCBhcmUgTm9uZS4NCiAgICA6cmFpc2VzIE5vU3VjaEFyZ3VtZW50RXJyb3I6IGlmIG5vIGFyZ3VtZW50IGF0IHRoZSBwcm92aWRlZCBwb3NpdGlvbiBvciB3aXRoDQogICAgdGhlIHByb3ZpZGVkIGtleXdvcmQuDQogICAgIiIiDQogICAgaWYgcG9zaXRpb24gaXMgTm9uZSBhbmQga2V5d29yZCBpcyBOb25lOg0KICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdNdXN0IHNwZWNpZnkgYXQgbGVhc3Qgb25lIG9mOiBwb3NpdGlvbiBvciBrZXl3b3JkLicpDQogICAgaWYgcG9zaXRpb24gaXMgbm90IE5vbmU6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJldHVybiBjYWxsX25vZGUuYXJnc1twb3NpdGlvbl0NCiAgICAgICAgZXhjZXB0IEluZGV4RXJyb3I6DQogICAgICAgICAgICBwYXNzDQogICAgaWYga2V5d29yZCBhbmQgY2FsbF9ub2RlLmtleXdvcmRzOg0KICAgICAgICBmb3IgYXJnIGluIGNhbGxfbm9kZS5rZXl3b3JkczoNCiAgICAgICAgICAgIGlmIGFyZy5hcmcgPT0ga2V5d29yZDoNCiAgICAgICAgICAgICAgICByZXR1cm4gYXJnLnZhbHVlDQoNCiAgICByYWlzZSBOb1N1Y2hBcmd1bWVudEVycm9yDQoNCmRlZiBpbmhlcml0X2Zyb21fc3RkX2V4KG5vZGUpOg0KICAgICIiIg0KICAgIFJldHVybiB0cnVlIGlmIHRoZSBnaXZlbiBjbGFzcyBub2RlIGlzIHN1YmNsYXNzIG9mDQogICAgZXhjZXB0aW9ucy5FeGNlcHRpb24uDQogICAgIiIiDQogICAgaWYgbm9kZS5uYW1lIGluICgnRXhjZXB0aW9uJywgJ0Jhc2VFeGNlcHRpb24nKSBcDQogICAgICAgICAgICBhbmQgbm9kZS5yb290KCkubmFtZSA9PSBFWENFUFRJT05TX01PRFVMRToNCiAgICAgICAgcmV0dXJuIFRydWUNCiAgICBpZiBub3QgaGFzYXR0cihub2RlLCAnYW5jZXN0b3JzJyk6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIHJldHVybiBhbnkoaW5oZXJpdF9mcm9tX3N0ZF9leChwYXJlbnQpDQogICAgICAgICAgICAgICBmb3IgcGFyZW50IGluIG5vZGUuYW5jZXN0b3JzKHJlY3Vycz1UcnVlKSkNCg0KDQpkZWYgZXJyb3Jfb2ZfdHlwZShoYW5kbGVyLCBlcnJvcl90eXBlKToNCiAgICAiIiINCiAgICBDaGVjayBpZiB0aGUgZ2l2ZW4gZXhjZXB0aW9uIGhhbmRsZXIgY2F0Y2hlcw0KICAgIHRoZSBnaXZlbiBlcnJvcl90eXBlLg0KDQogICAgVGhlICpoYW5kbGVyKiBwYXJhbWV0ZXIgaXMgYSBub2RlLCByZXByZXNlbnRpbmcgYW4gRXhjZXB0SGFuZGxlciBub2RlLg0KICAgIFRoZSAqZXJyb3JfdHlwZSogY2FuIGJlIGFuIGV4Y2VwdGlvbiwgc3VjaCBhcyBBdHRyaWJ1dGVFcnJvciwNCiAgICB0aGUgbmFtZSBvZiBhbiBleGNlcHRpb24sIG9yIGl0IGNhbiBiZSBhIHR1cGxlIG9mIGVycm9ycy4NCiAgICBUaGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gVHJ1ZSBpZiB0aGUgaGFuZGxlciBjYXRjaGVzIGFueSBvZiB0aGUNCiAgICBnaXZlbiBlcnJvcnMuDQogICAgIiIiDQogICAgZGVmIHN0cmluZ2lmeV9lcnJvcihlcnJvcik6DQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGVycm9yLCBzdHIpOg0KICAgICAgICAgICAgcmV0dXJuIGVycm9yLl9fbmFtZV9fDQogICAgICAgIHJldHVybiBlcnJvcg0KDQogICAgaWYgbm90IGlzaW5zdGFuY2UoZXJyb3JfdHlwZSwgdHVwbGUpOg0KICAgICAgICBlcnJvcl90eXBlID0gKGVycm9yX3R5cGUsICkNCiAgICBleHBlY3RlZF9lcnJvcnMgPSB7c3RyaW5naWZ5X2Vycm9yKGVycm9yKSBmb3IgZXJyb3IgaW4gZXJyb3JfdHlwZX0NCiAgICBpZiBub3QgaGFuZGxlci50eXBlOg0KICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBoYW5kbGVyLmNhdGNoKGV4cGVjdGVkX2Vycm9ycykNCg0KDQpkZWYgZGVjb3JhdGVkX3dpdGhfcHJvcGVydHkobm9kZSk6DQogICAgIiIiIERldGVjdCBpZiB0aGUgZ2l2ZW4gZnVuY3Rpb24gbm9kZSBpcyBkZWNvcmF0ZWQgd2l0aCBhIHByb3BlcnR5LiAiIiINCiAgICBpZiBub3Qgbm9kZS5kZWNvcmF0b3JzOg0KICAgICAgICByZXR1cm4gRmFsc2UNCiAgICBmb3IgZGVjb3JhdG9yIGluIG5vZGUuZGVjb3JhdG9ycy5ub2RlczoNCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoZGVjb3JhdG9yLCBhc3Ryb2lkLk5hbWUpOg0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaWYgX2lzX3Byb3BlcnR5X2RlY29yYXRvcihkZWNvcmF0b3IpOg0KICAgICAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgIGV4Y2VwdCBhc3Ryb2lkLkluZmVyZW5jZUVycm9yOg0KICAgICAgICAgICAgcGFzcw0KICAgIHJldHVybiBGYWxzZQ0KDQoNCmRlZiBfaXNfcHJvcGVydHlfZGVjb3JhdG9yKGRlY29yYXRvcik6DQogICAgZm9yIGluZmVyZWQgaW4gZGVjb3JhdG9yLmluZmVyKCk6DQogICAgICAgIGlmIGlzaW5zdGFuY2UoaW5mZXJlZCwgYXN0cm9pZC5DbGFzc0RlZik6DQogICAgICAgICAgICBpZiBpbmZlcmVkLnJvb3QoKS5uYW1lID09IEJVSUxUSU5TX05BTUUgYW5kIGluZmVyZWQubmFtZSA9PSAncHJvcGVydHknOg0KICAgICAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgICAgICBmb3IgYW5jZXN0b3IgaW4gaW5mZXJlZC5hbmNlc3RvcnMoKToNCiAgICAgICAgICAgICAgICBpZiBhbmNlc3Rvci5uYW1lID09ICdwcm9wZXJ0eScgYW5kIGFuY2VzdG9yLnJvb3QoKS5uYW1lID09IEJVSUxUSU5TX05BTUU6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgcmV0dXJuIE5vbmUNCg0KDQpkZWYgZGVjb3JhdGVkX3dpdGgoZnVuYywgcW5hbWVzKToNCiAgICAiIiJEZXRlcm1pbmUgaWYgdGhlIGBmdW5jYCBub2RlIGhhcyBhIGRlY29yYXRvciB3aXRoIHRoZSBxdWFsaWZpZWQgbmFtZSBgcW5hbWVgLiIiIg0KICAgIGRlY29yYXRvcnMgPSBmdW5jLmRlY29yYXRvcnMubm9kZXMgaWYgZnVuYy5kZWNvcmF0b3JzIGVsc2UgW10NCiAgICBmb3IgZGVjb3JhdG9yX25vZGUgaW4gZGVjb3JhdG9yczoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaWYgYW55KGkgaXMgbm90IE5vbmUgYW5kIGkucW5hbWUoKSBpbiBxbmFtZXMgZm9yIGkgaW4gZGVjb3JhdG9yX25vZGUuaW5mZXIoKSk6DQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgZXhjZXB0IGFzdHJvaWQuSW5mZXJlbmNlRXJyb3I6DQogICAgICAgICAgICBjb250aW51ZQ0KICAgIHJldHVybiBGYWxzZQ0KDQoNCkBscnVfY2FjaGUobWF4c2l6ZT0xMDI0KQ0KZGVmIHVuaW1wbGVtZW50ZWRfYWJzdHJhY3RfbWV0aG9kcyhub2RlLCBpc19hYnN0cmFjdF9jYj1Ob25lKToNCiAgICAiIiINCiAgICBHZXQgdGhlIHVuaW1wbGVtZW50ZWQgYWJzdHJhY3QgbWV0aG9kcyBmb3IgdGhlIGdpdmVuICpub2RlKi4NCg0KICAgIEEgbWV0aG9kIGNhbiBiZSBjb25zaWRlcmVkIGFic3RyYWN0IGlmIHRoZSBjYWxsYmFjayAqaXNfYWJzdHJhY3RfY2IqDQogICAgcmV0dXJucyBhIGBgVHJ1ZWBgIHZhbHVlLiBUaGUgY2hlY2sgZGVmYXVsdHMgdG8gdmVyaWZ5aW5nIHRoYXQNCiAgICBhIG1ldGhvZCBpcyBkZWNvcmF0ZWQgd2l0aCBhYnN0cmFjdCBtZXRob2RzLg0KICAgIFRoZSBmdW5jdGlvbiB3aWxsIHdvcmsgb25seSBmb3IgbmV3LXN0eWxlIGNsYXNzZXMuIEZvciBvbGQtc3R5bGUNCiAgICBjbGFzc2VzLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gYW4gZW1wdHkgZGljdGlvbmFyeS4NCiAgICBGb3IgdGhlIHJlc3Qgb2YgdGhlbSwgaXQgd2lsbCByZXR1cm4gYSBkaWN0aW9uYXJ5IG9mIGFic3RyYWN0IG1ldGhvZA0KICAgIG5hbWVzIGFuZCB0aGVpciBpbmZlcnJlZCBvYmplY3RzLg0KICAgICIiIg0KICAgIGlmIGlzX2Fic3RyYWN0X2NiIGlzIE5vbmU6DQogICAgICAgIGlzX2Fic3RyYWN0X2NiID0gcGFydGlhbChkZWNvcmF0ZWRfd2l0aCwgcW5hbWVzPUFCQ19NRVRIT0RTKQ0KICAgIHZpc2l0ZWQgPSB7fQ0KICAgIHRyeToNCiAgICAgICAgbXJvID0gcmV2ZXJzZWQobm9kZS5tcm8oKSkNCiAgICBleGNlcHQgTm90SW1wbGVtZW50ZWRFcnJvcjoNCiAgICAgICAgIyBPbGQgc3R5bGUgY2xhc3MsIGl0IHdpbGwgbm90IGhhdmUgYSBtcm8uDQogICAgICAgIHJldHVybiB7fQ0KICAgIGV4Y2VwdCBhc3Ryb2lkLlJlc29sdmVFcnJvcjoNCiAgICAgICAgIyBQcm9iYWJseSBpbmNvbnNpc3RlbnQgaGllcmFyY2h5LCBkb24ndHJ5DQogICAgICAgICMgdG8gZmlndXJlIHRoaXMgb3V0IGhlcmUuDQogICAgICAgIHJldHVybiB7fQ0KICAgIGZvciBhbmNlc3RvciBpbiBtcm86DQogICAgICAgIGZvciBvYmogaW4gYW5jZXN0b3IudmFsdWVzKCk6DQogICAgICAgICAgICBpbmZlcmVkID0gb2JqDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYXN0cm9pZC5Bc3NpZ25OYW1lKToNCiAgICAgICAgICAgICAgICBpbmZlcmVkID0gc2FmZV9pbmZlcihvYmopDQogICAgICAgICAgICAgICAgaWYgbm90IGluZmVyZWQ6DQogICAgICAgICAgICAgICAgICAgICMgTWlnaHQgYmUgYW4gYWJzdHJhY3QgZnVuY3Rpb24sDQogICAgICAgICAgICAgICAgICAgICMgYnV0IHNpbmNlIHdlIGRvbid0IGhhdmUgZW5vdWdoIGluZm9ybWF0aW9uDQogICAgICAgICAgICAgICAgICAgICMgaW4gb3JkZXIgdG8gdGFrZSB0aGlzIGRlY2lzaW9uLCB3ZSdyZSB0YWtpbmcNCiAgICAgICAgICAgICAgICAgICAgIyB0aGUgKnNhZmUqIGRlY2lzaW9uIGluc3RlYWQuDQogICAgICAgICAgICAgICAgICAgIGlmIG9iai5uYW1lIGluIHZpc2l0ZWQ6DQogICAgICAgICAgICAgICAgICAgICAgICBkZWwgdmlzaXRlZFtvYmoubmFtZV0NCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShpbmZlcmVkLCBhc3Ryb2lkLkZ1bmN0aW9uRGVmKToNCiAgICAgICAgICAgICAgICAgICAgaWYgb2JqLm5hbWUgaW4gdmlzaXRlZDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbCB2aXNpdGVkW29iai5uYW1lXQ0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpbmZlcmVkLCBhc3Ryb2lkLkZ1bmN0aW9uRGVmKToNCiAgICAgICAgICAgICAgICAjIEl0J3MgY3JpdGljYWwgdG8gdXNlIHRoZSBvcmlnaW5hbCBuYW1lLA0KICAgICAgICAgICAgICAgICMgc2luY2UgYWZ0ZXIgaW5mZXJyaW5nLCBhbiBvYmplY3QgY2FuIGJlIHNvbWV0aGluZw0KICAgICAgICAgICAgICAgICMgZWxzZSB0aGFuIGV4cGVjdGVkLCBhcyBpbiB0aGUgY2FzZSBvZiB0aGUNCiAgICAgICAgICAgICAgICAjIGZvbGxvd2luZyBhc3NpZ25tZW50Lg0KICAgICAgICAgICAgICAgICMNCiAgICAgICAgICAgICAgICAjIGNsYXNzIEE6DQogICAgICAgICAgICAgICAgIyAgICAgZGVmIGtleXMoc2VsZik6IHBhc3MNCiAgICAgICAgICAgICAgICAjICAgICBfX2l0ZXJfXyA9IGtleXMNCiAgICAgICAgICAgICAgICBhYnN0cmFjdCA9IGlzX2Fic3RyYWN0X2NiKGluZmVyZWQpDQogICAgICAgICAgICAgICAgaWYgYWJzdHJhY3Q6DQogICAgICAgICAgICAgICAgICAgIHZpc2l0ZWRbb2JqLm5hbWVdID0gaW5mZXJlZA0KICAgICAgICAgICAgICAgIGVsaWYgbm90IGFic3RyYWN0IGFuZCBvYmoubmFtZSBpbiB2aXNpdGVkOg0KICAgICAgICAgICAgICAgICAgICBkZWwgdmlzaXRlZFtvYmoubmFtZV0NCiAgICByZXR1cm4gdmlzaXRlZA0KDQoNCmRlZiBmaW5kX3RyeV9leGNlcHRfd3JhcHBlcl9ub2RlKG5vZGUpOg0KICAgICIiIlJldHVybiB0aGUgRXhjZXB0SGFuZGxlciBvciB0aGUgVHJ5RXhjZXB0IG5vZGUgaW4gd2hpY2ggdGhlIG5vZGUgaXMuIiIiDQogICAgY3VycmVudCA9IG5vZGUNCiAgICBpZ25vcmVzID0gKGFzdHJvaWQuRXhjZXB0SGFuZGxlciwgYXN0cm9pZC5UcnlFeGNlcHQpDQogICAgd2hpbGUgY3VycmVudCBhbmQgbm90IGlzaW5zdGFuY2UoY3VycmVudC5wYXJlbnQsIGlnbm9yZXMpOg0KICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQNCg0KICAgIGlmIGN1cnJlbnQgYW5kIGlzaW5zdGFuY2UoY3VycmVudC5wYXJlbnQsIGlnbm9yZXMpOg0KICAgICAgICByZXR1cm4gY3VycmVudC5wYXJlbnQNCiAgICByZXR1cm4gTm9uZQ0KDQoNCmRlZiBpc19mcm9tX2ZhbGxiYWNrX2Jsb2NrKG5vZGUpOg0KICAgICIiIkNoZWNrIGlmIHRoZSBnaXZlbiBub2RlIGlzIGZyb20gYSBmYWxsYmFjayBpbXBvcnQgYmxvY2suIiIiDQogICAgY29udGV4dCA9IGZpbmRfdHJ5X2V4Y2VwdF93cmFwcGVyX25vZGUobm9kZSkNCiAgICBpZiBub3QgY29udGV4dDoNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICBpZiBpc2luc3RhbmNlKGNvbnRleHQsIGFzdHJvaWQuRXhjZXB0SGFuZGxlcik6DQogICAgICAgIG90aGVyX2JvZHkgPSBjb250ZXh0LnBhcmVudC5ib2R5DQogICAgICAgIGhhbmRsZXJzID0gY29udGV4dC5wYXJlbnQuaGFuZGxlcnMNCiAgICBlbHNlOg0KICAgICAgICBvdGhlcl9ib2R5ID0gaXRlcnRvb2xzLmNoYWluLmZyb21faXRlcmFibGUoDQogICAgICAgICAgICBoYW5kbGVyLmJvZHkgZm9yIGhhbmRsZXIgaW4gY29udGV4dC5oYW5kbGVycykNCiAgICAgICAgaGFuZGxlcnMgPSBjb250ZXh0LmhhbmRsZXJzDQoNCiAgICBoYXNfZmFsbGJhY2tfaW1wb3J0cyA9IGFueShpc2luc3RhbmNlKGltcG9ydF9ub2RlLCAoYXN0cm9pZC5JbXBvcnRGcm9tLCBhc3Ryb2lkLkltcG9ydCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGltcG9ydF9ub2RlIGluIG90aGVyX2JvZHkpDQogICAgaWdub3Jlc19pbXBvcnRfZXJyb3IgPSBfZXhjZXB0X2hhbmRsZXJzX2lnbm9yZXNfZXhjZXB0aW9uKGhhbmRsZXJzLCBJbXBvcnRFcnJvcikNCiAgICByZXR1cm4gaWdub3Jlc19pbXBvcnRfZXJyb3Igb3IgaGFzX2ZhbGxiYWNrX2ltcG9ydHMNCg0KDQpkZWYgX2V4Y2VwdF9oYW5kbGVyc19pZ25vcmVzX2V4Y2VwdGlvbihoYW5kbGVycywgZXhjZXB0aW9uKToNCiAgICBmdW5jID0gcGFydGlhbChlcnJvcl9vZl90eXBlLCBlcnJvcl90eXBlPShleGNlcHRpb24sICkpDQogICAgcmV0dXJuIGFueShtYXAoZnVuYywgaGFuZGxlcnMpKQ0KDQoNCmRlZiBnZXRfZXhjZXB0aW9uX2hhbmRsZXJzKG5vZGUsIGV4Y2VwdGlvbj1FeGNlcHRpb24pOg0KICAgICIiIlJldHVybiB0aGUgY29sbGVjdGlvbnMgb2YgaGFuZGxlcnMgaGFuZGxpbmcgdGhlIGV4Y2VwdGlvbiBpbiBhcmd1bWVudHMuDQoNCiAgICBBcmdzOg0KICAgICAgICBub2RlIChhc3Ryb2lkLk5vZGVORyk6IEEgbm9kZSB0aGF0IGlzIHBvdGVudGlhbGx5IHdyYXBwZWQgaW4gYSB0cnkgZXhjZXB0Lg0KICAgICAgICBleGNlcHRpb24gKGJ1aWx0aW4uRXhjZXB0aW9uIG9yIHN0cik6IGV4Y2VwdGlvbiBvciBuYW1lIG9mIHRoZSBleGNlcHRpb24uDQoNCiAgICBSZXR1cm5zOg0KICAgICAgICBsaXN0OiB0aGUgY29sbGVjdGlvbiBvZiBoYW5kbGVycyB0aGF0IGFyZSBoYW5kbGluZyB0aGUgZXhjZXB0aW9uIG9yIE5vbmUuDQoNCiAgICAiIiINCiAgICBjb250ZXh0ID0gZmluZF90cnlfZXhjZXB0X3dyYXBwZXJfbm9kZShub2RlKQ0KICAgIGlmIGlzaW5zdGFuY2UoY29udGV4dCwgYXN0cm9pZC5UcnlFeGNlcHQpOg0KICAgICAgICByZXR1cm4gWw0KICAgICAgICAgICAgaGFuZGxlciBmb3IgaGFuZGxlciBpbiBjb250ZXh0LmhhbmRsZXJzIGlmIGVycm9yX29mX3R5cGUoaGFuZGxlciwgZXhjZXB0aW9uKQ0KICAgICAgICBdDQogICAgcmV0dXJuIE5vbmUNCg0KDQpkZWYgaXNfbm9kZV9pbnNpZGVfdHJ5X2V4Y2VwdChub2RlKToNCiAgICAiIiJDaGVjayBpZiB0aGUgbm9kZSBpcyBkaXJlY3RseSB1bmRlciBhIFRyeS9FeGNlcHQgc3RhdGVtZW50Lg0KICAgIChidXQgbm90IHVuZGVyIGFuIEV4Y2VwdEhhbmRsZXIhKQ0KDQogICAgQXJnczoNCiAgICAgICAgbm9kZSAoYXN0cm9pZC5SYWlzZSk6IHRoZSBub2RlIHJhaXNpbmcgdGhlIGV4Y2VwdGlvbi4NCg0KICAgIFJldHVybnM6DQogICAgICAgIGJvb2w6IFRydWUgaWYgdGhlIG5vZGUgaXMgaW5zaWRlIGEgdHJ5L2V4Y2VwdCBzdGF0ZW1lbnQsIEZhbHNlIG90aGVyd2lzZS4NCiAgICAiIiINCiAgICBjb250ZXh0ID0gZmluZF90cnlfZXhjZXB0X3dyYXBwZXJfbm9kZShub2RlKQ0KICAgIHJldHVybiBpc2luc3RhbmNlKGNvbnRleHQsIGFzdHJvaWQuVHJ5RXhjZXB0KQ0KDQoNCmRlZiBub2RlX2lnbm9yZXNfZXhjZXB0aW9uKG5vZGUsIGV4Y2VwdGlvbj1FeGNlcHRpb24pOg0KICAgICIiIkNoZWNrIGlmIHRoZSBub2RlIGlzIGluIGEgVHJ5RXhjZXB0IHdoaWNoIGhhbmRsZXMgdGhlIGdpdmVuIGV4Y2VwdGlvbi4NCg0KICAgIElmIHRoZSBleGNlcHRpb24gaXMgbm90IGdpdmVuLCB0aGUgZnVuY3Rpb24gaXMgZ29pbmcgdG8gbG9vayBmb3IgYmFyZQ0KICAgIGV4Y2VwdHMuDQogICAgIiIiDQogICAgbWFuYWdpbmdfaGFuZGxlcnMgPSBnZXRfZXhjZXB0aW9uX2hhbmRsZXJzKG5vZGUsIGV4Y2VwdGlvbikNCiAgICBpZiBub3QgbWFuYWdpbmdfaGFuZGxlcnM6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIHJldHVybiBhbnkobWFuYWdpbmdfaGFuZGxlcnMpDQoNCg0KZGVmIGNsYXNzX2lzX2Fic3RyYWN0KG5vZGUpOg0KICAgICIiInJldHVybiB0cnVlIGlmIHRoZSBnaXZlbiBjbGFzcyBub2RlIHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIGFuIGFic3RyYWN0DQogICAgY2xhc3MNCiAgICAiIiINCiAgICBmb3IgbWV0aG9kIGluIG5vZGUubWV0aG9kcygpOg0KICAgICAgICBpZiBtZXRob2QucGFyZW50LmZyYW1lKCkgaXMgbm9kZToNCiAgICAgICAgICAgIGlmIG1ldGhvZC5pc19hYnN0cmFjdChwYXNzX2lzX2Fic3RyYWN0PUZhbHNlKToNCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0KDQoNCmRlZiBfc3VwcG9ydHNfcHJvdG9jb2xfbWV0aG9kKHZhbHVlLCBhdHRyKToNCiAgICB0cnk6DQogICAgICAgIGF0dHJpYnV0ZXMgPSB2YWx1ZS5nZXRhdHRyKGF0dHIpDQogICAgZXhjZXB0IGFzdHJvaWQuTm90Rm91bmRFcnJvcjoNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICBmaXJzdCA9IGF0dHJpYnV0ZXNbMF0NCiAgICBpZiBpc2luc3RhbmNlKGZpcnN0LCBhc3Ryb2lkLkFzc2lnbk5hbWUpOg0KICAgICAgICBpZiBpc2luc3RhbmNlKGZpcnN0LnBhcmVudC52YWx1ZSwgYXN0cm9pZC5Db25zdCk6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICByZXR1cm4gVHJ1ZQ0KDQoNCmRlZiBpc19jb21wcmVoZW5zaW9uKG5vZGUpOg0KICAgIGNvbXByZWhlbnNpb25zID0gKGFzdHJvaWQuTGlzdENvbXAsDQogICAgICAgICAgICAgICAgICAgICAgYXN0cm9pZC5TZXRDb21wLA0KICAgICAgICAgICAgICAgICAgICAgIGFzdHJvaWQuRGljdENvbXAsDQogICAgICAgICAgICAgICAgICAgICAgYXN0cm9pZC5HZW5lcmF0b3JFeHApDQogICAgcmV0dXJuIGlzaW5zdGFuY2Uobm9kZSwgY29tcHJlaGVuc2lvbnMpDQoNCg0KZGVmIF9zdXBwb3J0c19tYXBwaW5nX3Byb3RvY29sKHZhbHVlKToNCiAgICByZXR1cm4gKA0KICAgICAgICBfc3VwcG9ydHNfcHJvdG9jb2xfbWV0aG9kKHZhbHVlLCBHRVRJVEVNX01FVEhPRCkNCiAgICAgICAgYW5kIF9zdXBwb3J0c19wcm90b2NvbF9tZXRob2QodmFsdWUsIEtFWVNfTUVUSE9EKQ0KICAgICkNCg0KDQpkZWYgX3N1cHBvcnRzX21lbWJlcnNoaXBfdGVzdF9wcm90b2NvbCh2YWx1ZSk6DQogICAgcmV0dXJuIF9zdXBwb3J0c19wcm90b2NvbF9tZXRob2QodmFsdWUsIENPTlRBSU5TX01FVEhPRCkNCg0KDQpkZWYgX3N1cHBvcnRzX2l0ZXJhdGlvbl9wcm90b2NvbCh2YWx1ZSk6DQogICAgcmV0dXJuICgNCiAgICAgICAgX3N1cHBvcnRzX3Byb3RvY29sX21ldGhvZCh2YWx1ZSwgSVRFUl9NRVRIT0QpDQogICAgICAgIG9yIF9zdXBwb3J0c19wcm90b2NvbF9tZXRob2QodmFsdWUsIEdFVElURU1fTUVUSE9EKQ0KICAgICkNCg0KDQpkZWYgX3N1cHBvcnRzX2FzeW5jX2l0ZXJhdGlvbl9wcm90b2NvbCh2YWx1ZSk6DQogICAgcmV0dXJuIF9zdXBwb3J0c19wcm90b2NvbF9tZXRob2QodmFsdWUsIEFJVEVSX01FVEhPRCkNCg0KDQpkZWYgX3N1cHBvcnRzX2dldGl0ZW1fcHJvdG9jb2wodmFsdWUpOg0KICAgIHJldHVybiBfc3VwcG9ydHNfcHJvdG9jb2xfbWV0aG9kKHZhbHVlLCBHRVRJVEVNX01FVEhPRCkNCg0KDQpkZWYgX3N1cHBvcnRzX3NldGl0ZW1fcHJvdG9jb2wodmFsdWUpOg0KICAgIHJldHVybiBfc3VwcG9ydHNfcHJvdG9jb2xfbWV0aG9kKHZhbHVlLCBTRVRJVEVNX01FVEhPRCkNCg0KDQpkZWYgX3N1cHBvcnRzX2RlbGl0ZW1fcHJvdG9jb2wodmFsdWUpOg0KICAgIHJldHVybiBfc3VwcG9ydHNfcHJvdG9jb2xfbWV0aG9kKHZhbHVlLCBERUxJVEVNX01FVEhPRCkNCg0KDQpkZWYgX2lzX2Fic3RyYWN0X2NsYXNzX25hbWUobmFtZSk6DQogICAgbG5hbWUgPSBuYW1lLmxvd2VyKCkNCiAgICBpc19taXhpbiA9IGxuYW1lLmVuZHN3aXRoKCdtaXhpbicpDQogICAgaXNfYWJzdHJhY3QgPSBsbmFtZS5zdGFydHN3aXRoKCdhYnN0cmFjdCcpDQogICAgaXNfYmFzZSA9IGxuYW1lLnN0YXJ0c3dpdGgoJ2Jhc2UnKSBvciBsbmFtZS5lbmRzd2l0aCgnYmFzZScpDQogICAgcmV0dXJuIGlzX21peGluIG9yIGlzX2Fic3RyYWN0IG9yIGlzX2Jhc2UNCg0KDQpkZWYgaXNfaW5zaWRlX2Fic3RyYWN0X2NsYXNzKG5vZGUpOg0KICAgIHdoaWxlIG5vZGUgaXMgbm90IE5vbmU6DQogICAgICAgIGlmIGlzaW5zdGFuY2Uobm9kZSwgYXN0cm9pZC5DbGFzc0RlZik6DQogICAgICAgICAgICBpZiBjbGFzc19pc19hYnN0cmFjdChub2RlKToNCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICAgICAgbmFtZSA9IGdldGF0dHIobm9kZSwgJ25hbWUnLCBOb25lKQ0KICAgICAgICAgICAgaWYgbmFtZSBpcyBub3QgTm9uZSBhbmQgX2lzX2Fic3RyYWN0X2NsYXNzX25hbWUobmFtZSk6DQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50DQogICAgcmV0dXJuIEZhbHNlDQoNCg0KZGVmIF9zdXBwb3J0c19wcm90b2NvbCh2YWx1ZSwgcHJvdG9jb2xfY2FsbGJhY2spOg0KICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGFzdHJvaWQuQ2xhc3NEZWYpOg0KICAgICAgICBpZiBub3QgaGFzX2tub3duX2Jhc2VzKHZhbHVlKToNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgICMgY2xhc3NvYmogY2FuIG9ubHkgYmUgaXRlcmFibGUgaWYgaXQgaGFzIGFuIGl0ZXJhYmxlIG1ldGFjbGFzcw0KICAgICAgICBtZXRhID0gdmFsdWUubWV0YWNsYXNzKCkNCiAgICAgICAgaWYgbWV0YSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGlmIHByb3RvY29sX2NhbGxiYWNrKG1ldGEpOg0KICAgICAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgYXN0cm9pZC5CYXNlSW5zdGFuY2UpOg0KICAgICAgICBpZiBub3QgaGFzX2tub3duX2Jhc2VzKHZhbHVlKToNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgIGlmIHZhbHVlLmhhc19keW5hbWljX2dldGF0dHIoKToNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgIGlmIHByb3RvY29sX2NhbGxiYWNrKHZhbHVlKToNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQoNCiAgICAjIFRPRE86IHRoaXMgaXMgbm90IG5lZWRlZCBpbiBhc3Ryb2lkIDIuMCwgd2hlcmUgd2UgY2FuDQogICAgIyBjaGVjayB0aGUgdHlwZSB1c2luZyBhIHZpcnR1YWwgYmFzZSBjbGFzcyBpbnN0ZWFkLg0KICAgIGlmIChpc2luc3RhbmNlKHZhbHVlLCBfYmFzZXMuUHJveHkpDQogICAgICAgICAgICBhbmQgaXNpbnN0YW5jZSh2YWx1ZS5fcHJveGllZCwgYXN0cm9pZC5CYXNlSW5zdGFuY2UpDQogICAgICAgICAgICBhbmQgaGFzX2tub3duX2Jhc2VzKHZhbHVlLl9wcm94aWVkKSk6DQogICAgICAgIHZhbHVlID0gdmFsdWUuX3Byb3hpZWQNCiAgICAgICAgcmV0dXJuIHByb3RvY29sX2NhbGxiYWNrKHZhbHVlKQ0KDQogICAgcmV0dXJuIEZhbHNlDQoNCg0KZGVmIGlzX2l0ZXJhYmxlKHZhbHVlLCBjaGVja19hc3luYz1GYWxzZSk6DQogICAgaWYgY2hlY2tfYXN5bmM6DQogICAgICAgIHByb3RvY29sX2NoZWNrID0gX3N1cHBvcnRzX2FzeW5jX2l0ZXJhdGlvbl9wcm90b2NvbA0KICAgIGVsc2U6DQogICAgICAgIHByb3RvY29sX2NoZWNrID0gX3N1cHBvcnRzX2l0ZXJhdGlvbl9wcm90b2NvbA0KICAgIHJldHVybiBfc3VwcG9ydHNfcHJvdG9jb2wodmFsdWUsIHByb3RvY29sX2NoZWNrKQ0KDQoNCmRlZiBpc19tYXBwaW5nKHZhbHVlKToNCiAgICByZXR1cm4gX3N1cHBvcnRzX3Byb3RvY29sKHZhbHVlLCBfc3VwcG9ydHNfbWFwcGluZ19wcm90b2NvbCkNCg0KDQpkZWYgc3VwcG9ydHNfbWVtYmVyc2hpcF90ZXN0KHZhbHVlKToNCiAgICBzdXBwb3J0ZWQgPSBfc3VwcG9ydHNfcHJvdG9jb2wodmFsdWUsIF9zdXBwb3J0c19tZW1iZXJzaGlwX3Rlc3RfcHJvdG9jb2wpDQogICAgcmV0dXJuIHN1cHBvcnRlZCBvciBpc19pdGVyYWJsZSh2YWx1ZSkNCg0KDQpkZWYgc3VwcG9ydHNfZ2V0aXRlbSh2YWx1ZSk6DQogICAgcmV0dXJuIF9zdXBwb3J0c19wcm90b2NvbCh2YWx1ZSwgX3N1cHBvcnRzX2dldGl0ZW1fcHJvdG9jb2wpDQoNCg0KZGVmIHN1cHBvcnRzX3NldGl0ZW0odmFsdWUpOg0KICAgIHJldHVybiBfc3VwcG9ydHNfcHJvdG9jb2wodmFsdWUsIF9zdXBwb3J0c19zZXRpdGVtX3Byb3RvY29sKQ0KDQoNCmRlZiBzdXBwb3J0c19kZWxpdGVtKHZhbHVlKToNCiAgICByZXR1cm4gX3N1cHBvcnRzX3Byb3RvY29sKHZhbHVlLCBfc3VwcG9ydHNfZGVsaXRlbV9wcm90b2NvbCkNCg0KDQojIFRPRE8oY3BvcGEpOiBkZXByZWNhdGUgdGhlc2Ugb3IgbGVhdmUgdGhlbSBhcyBhbGlhc2VzPw0KQGxydV9jYWNoZShtYXhzaXplPTEwMjQpDQpkZWYgc2FmZV9pbmZlcihub2RlLCBjb250ZXh0PU5vbmUpOg0KICAgICIiIlJldHVybiB0aGUgaW5mZXJyZWQgdmFsdWUgZm9yIHRoZSBnaXZlbiBub2RlLg0KDQogICAgUmV0dXJuIE5vbmUgaWYgaW5mZXJlbmNlIGZhaWxlZCBvciBpZiB0aGVyZSBpcyBzb21lIGFtYmlndWl0eSAobW9yZSB0aGFuDQogICAgb25lIG5vZGUgaGFzIGJlZW4gaW5mZXJyZWQpLg0KICAgICIiIg0KICAgIHRyeToNCiAgICAgICAgaW5mZXJpdCA9IG5vZGUuaW5mZXIoY29udGV4dD1jb250ZXh0KQ0KICAgICAgICB2YWx1ZSA9IG5leHQoaW5mZXJpdCkNCiAgICBleGNlcHQgYXN0cm9pZC5JbmZlcmVuY2VFcnJvcjoNCiAgICAgICAgcmV0dXJuIE5vbmUNCiAgICB0cnk6DQogICAgICAgIG5leHQoaW5mZXJpdCkNCiAgICAgICAgcmV0dXJuIE5vbmUgIyBOb25lIGlmIHRoZXJlIGlzIGFtYmlndWl0eSBvbiB0aGUgaW5mZXJyZWQgbm9kZQ0KICAgIGV4Y2VwdCBhc3Ryb2lkLkluZmVyZW5jZUVycm9yOg0KICAgICAgICByZXR1cm4gTm9uZSAjIHRoZXJlIGlzIHNvbWUga2luZCBvZiBhbWJpZ3VpdHkNCiAgICBleGNlcHQgU3RvcEl0ZXJhdGlvbjoNCiAgICAgICAgcmV0dXJuIHZhbHVlDQoNCg0KZGVmIGhhc19rbm93bl9iYXNlcyhrbGFzcywgY29udGV4dD1Ob25lKToNCiAgICAiIiJSZXR1cm4gdHJ1ZSBpZiBhbGwgYmFzZSBjbGFzc2VzIG9mIGEgY2xhc3MgY291bGQgYmUgaW5mZXJyZWQuIiIiDQogICAgdHJ5Og0KICAgICAgICByZXR1cm4ga2xhc3MuX2FsbF9iYXNlc19rbm93bg0KICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoNCiAgICAgICAgcGFzcw0KICAgIGZvciBiYXNlIGluIGtsYXNzLmJhc2VzOg0KICAgICAgICByZXN1bHQgPSBzYWZlX2luZmVyKGJhc2UsIGNvbnRleHQ9Y29udGV4dCkNCiAgICAgICAgIyBUT0RPOiBjaGVjayBmb3IgQS0+Qi0+QS0+QiBwYXR0ZXJuIGluIGNsYXNzIHN0cnVjdHVyZSB0b28/DQogICAgICAgIGlmIChub3QgaXNpbnN0YW5jZShyZXN1bHQsIGFzdHJvaWQuQ2xhc3NEZWYpIG9yDQogICAgICAgICAgICAgICAgcmVzdWx0IGlzIGtsYXNzIG9yDQogICAgICAgICAgICAgICAgbm90IGhhc19rbm93bl9iYXNlcyhyZXN1bHQsIGNvbnRleHQ9Y29udGV4dCkpOg0KICAgICAgICAgICAga2xhc3MuX2FsbF9iYXNlc19rbm93biA9IEZhbHNlDQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICBrbGFzcy5fYWxsX2Jhc2VzX2tub3duID0gVHJ1ZQ0KICAgIHJldHVybiBUcnVlDQoNCg0KZGVmIGlzX25vbmUobm9kZSk6DQogICAgcmV0dXJuIChub2RlIGlzIE5vbmUgb3INCiAgICAgICAgICAgIChpc2luc3RhbmNlKG5vZGUsIGFzdHJvaWQuQ29uc3QpIGFuZCBub2RlLnZhbHVlIGlzIE5vbmUpIG9yDQogICAgICAgICAgICAoaXNpbnN0YW5jZShub2RlLCBhc3Ryb2lkLk5hbWUpICBhbmQgbm9kZS5uYW1lID09ICdOb25lJykNCiAgICAgICAgICAgKQ0KDQoNCmRlZiBub2RlX3R5cGUobm9kZSk6DQogICAgIiIiUmV0dXJuIHRoZSBpbmZlcnJlZCB0eXBlIGZvciBgbm9kZWANCg0KICAgIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgcG9zc2libGUgdHlwZSwgb3IgaWYgaW5mZXJyZWQgdHlwZSBpcyBVbmluZmVyYWJsZSBvciBOb25lLA0KICAgIHJldHVybiBOb25lDQogICAgIiIiDQogICAgIyBjaGVjayB0aGVyZSBpcyBvbmx5IG9uZSBwb3NzaWJsZSB0eXBlIGZvciB0aGUgYXNzaWduIG5vZGUuIEVsc2Ugd2UNCiAgICAjIGRvbid0IGhhbmRsZSBpdCBmb3Igbm93DQogICAgdHlwZXMgPSBzZXQoKQ0KICAgIHRyeToNCiAgICAgICAgZm9yIHZhcl90eXBlIGluIG5vZGUuaW5mZXIoKToNCiAgICAgICAgICAgIGlmIHZhcl90eXBlID09IGFzdHJvaWQuVW5pbmZlcmFibGUgb3IgaXNfbm9uZSh2YXJfdHlwZSk6DQogICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIHR5cGVzLmFkZCh2YXJfdHlwZSkNCiAgICAgICAgICAgIGlmIGxlbih0eXBlcykgPiAxOg0KICAgICAgICAgICAgICAgIHJldHVybiBOb25lDQogICAgZXhjZXB0IGFzdHJvaWQuSW5mZXJlbmNlRXJyb3I6DQogICAgICAgIHJldHVybiBOb25lDQogICAgcmV0dXJuIHR5cGVzLnBvcCgpIGlmIHR5cGVzIGVsc2UgTm9uZQ0KDQoNCmRlZiBpc19yZWdpc3RlcmVkX2luX3NpbmdsZWRpc3BhdGNoX2Z1bmN0aW9uKG5vZGUpOg0KICAgICIiIkNoZWNrIGlmIHRoZSBnaXZlbiBmdW5jdGlvbiBub2RlIGlzIGEgc2luZ2xlZGlzcGF0Y2ggZnVuY3Rpb24uIiIiDQoNCiAgICBzaW5nbGVkaXNwYXRjaF9xbmFtZXMgPSAoDQogICAgICAgICdmdW5jdG9vbHMuc2luZ2xlZGlzcGF0Y2gnLA0KICAgICAgICAnc2luZ2xlZGlzcGF0Y2guc2luZ2xlZGlzcGF0Y2gnDQogICAgKQ0KDQogICAgaWYgbm90IGlzaW5zdGFuY2Uobm9kZSwgYXN0cm9pZC5GdW5jdGlvbkRlZik6DQogICAgICAgIHJldHVybiBGYWxzZQ0KDQogICAgZGVjb3JhdG9ycyA9IG5vZGUuZGVjb3JhdG9ycy5ub2RlcyBpZiBub2RlLmRlY29yYXRvcnMgZWxzZSBbXQ0KICAgIGZvciBkZWNvcmF0b3IgaW4gZGVjb3JhdG9yczoNCiAgICAgICAgIyBmdW5jLnJlZ2lzdGVyIGFyZSBmdW5jdGlvbiBjYWxscw0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShkZWNvcmF0b3IsIGFzdHJvaWQuQ2FsbCk6DQogICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgIGZ1bmMgPSBkZWNvcmF0b3IuZnVuYw0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShmdW5jLCBhc3Ryb2lkLkF0dHJpYnV0ZSkgb3IgZnVuYy5hdHRybmFtZSAhPSAncmVnaXN0ZXInOg0KICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmdW5jX2RlZiA9IG5leHQoZnVuYy5leHByLmluZmVyKCkpDQogICAgICAgIGV4Y2VwdCBhc3Ryb2lkLkluZmVyZW5jZUVycm9yOg0KICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICBpZiBpc2luc3RhbmNlKGZ1bmNfZGVmLCBhc3Ryb2lkLkZ1bmN0aW9uRGVmKToNCiAgICAgICAgICAgICMgcHlsaW50OiBkaXNhYmxlPXJlZHVuZGFudC1rZXl3b3JkLWFyZzsgc29tZSBmbG93IGluZmVyZW5jZSBnb2VzIHdyb25nIGhlcmUNCiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0ZWRfd2l0aChmdW5jX2RlZiwgc2luZ2xlZGlzcGF0Y2hfcW5hbWVzKQ0KDQogICAgcmV0dXJuIEZhbHNlDQoNCg0KZGVmIGdldF9ub2RlX2xhc3RfbGluZW5vKG5vZGUpOg0KICAgICIiIg0KICAgIEdldCB0aGUgbGFzdCBsaW5lbm8gb2YgdGhlIGdpdmVuIG5vZGUuIEZvciBhIHNpbXBsZSBzdGF0ZW1lbnQgdGhpcyB3aWxsIGp1c3QgYmUgbm9kZS5saW5lbm8sDQogICAgYnV0IGZvciBhIG5vZGUgdGhhdCBoYXMgY2hpbGQgc3RhdGVtZW50cyAoZS5nLiBhIG1ldGhvZCkgdGhpcyB3aWxsIGJlIHRoZSBsaW5lbm8gb2YgdGhlIGxhc3QNCiAgICBjaGlsZCBzdGF0ZW1lbnQgcmVjdXJzaXZlbHkuDQogICAgIiIiDQogICAgIyAnZmluYWxib2R5JyBpcyBhbHdheXMgdGhlIGxhc3QgY2xhdXNlIGluIGEgdHJ5IHN0YXRlbWVudCwgaWYgcHJlc2VudA0KICAgIGlmIGdldGF0dHIobm9kZSwgJ2ZpbmFsYm9keScsIEZhbHNlKToNCiAgICAgICAgcmV0dXJuIGdldF9ub2RlX2xhc3RfbGluZW5vKG5vZGUuZmluYWxib2R5Wy0xXSkNCiAgICAjIEZvciBpZiwgd2hpbGUsIGFuZCBmb3Igc3RhdGVtZW50cyAnb3JlbHNlJyBpcyBhbHdheXMgdGhlIGxhc3QgY2xhdXNlLg0KICAgICMgRm9yIHRyeSBzdGF0ZW1lbnRzICdvcmVsc2UnIGlzIHRoZSBsYXN0IGluIHRoZSBhYnNlbmNlIG9mIGEgJ2ZpbmFsYm9keScNCiAgICBpZiBnZXRhdHRyKG5vZGUsICdvcmVsc2UnLCBGYWxzZSk6DQogICAgICAgIHJldHVybiBnZXRfbm9kZV9sYXN0X2xpbmVubyhub2RlLm9yZWxzZVstMV0pDQogICAgIyB0cnkgc3RhdGVtZW50cyBoYXZlIHRoZSAnaGFuZGxlcnMnIGxhc3QgaWYgdGhlcmUgaXMgbm8gJ29yZWxzZScgb3IgJ2ZpbmFsYm9keScNCiAgICBpZiBnZXRhdHRyKG5vZGUsICdoYW5kbGVycycsIEZhbHNlKToNCiAgICAgICAgcmV0dXJuIGdldF9ub2RlX2xhc3RfbGluZW5vKG5vZGUuaGFuZGxlcnNbLTFdKQ0KICAgICMgQWxsIGNvbXBvdW5kIHN0YXRlbWVudHMgaGF2ZSBhICdib2R5Jw0KICAgIGlmIGdldGF0dHIobm9kZSwgJ2JvZHknLCBGYWxzZSk6DQogICAgICAgIHJldHVybiBnZXRfbm9kZV9sYXN0X2xpbmVubyhub2RlLmJvZHlbLTFdKQ0KICAgICMgTm90IGEgY29tcG91bmQgc3RhdGVtZW50DQogICAgcmV0dXJuIG5vZGUubGluZW5vDQoNCg0KZGVmIGlzX2VudW1fY2xhc3Mobm9kZSk6DQogICAgIiIiQ2hlY2sgaWYgYSBjbGFzcyBkZWZpbml0aW9uIGRlZmluZXMgYW4gRW51bSBjbGFzcy4NCg0KICAgIDpwYXJhbSBub2RlOiBUaGUgY2xhc3Mgbm9kZSB0byBjaGVjay4NCiAgICA6dHlwZSBub2RlOiBhc3Ryb2lkLkNsYXNzRGVmDQoNCiAgICA6cmV0dXJuczogVHJ1ZSBpZiB0aGUgZ2l2ZW4gbm9kZSByZXByZXNlbnRzIGFuIEVudW0gY2xhc3MuIEZhbHNlIG90aGVyd2lzZS4NCiAgICA6cnR5cGU6IGJvb2wNCiAgICAiIiINCiAgICBmb3IgYmFzZSBpbiBub2RlLmJhc2VzOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpbmZlcnJlZF9iYXNlcyA9IGJhc2UuaW5mZXJyZWQoKQ0KICAgICAgICBleGNlcHQgYXN0cm9pZC5JbmZlcmVuY2VFcnJvcjoNCiAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgZm9yIGFuY2VzdG9yIGluIGluZmVycmVkX2Jhc2VzOg0KICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoYW5jZXN0b3IsIGFzdHJvaWQuQ2xhc3NEZWYpOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgICAgIGlmIGFuY2VzdG9yLm5hbWUgPT0gJ0VudW0nIGFuZCBhbmNlc3Rvci5yb290KCkubmFtZSA9PSAnZW51bSc6DQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCg0KICAgIHJldHVybiBGYWxzZQ0KDQoNCmRlZiBpc19kYXRhY2xhc3Mobm9kZSk6DQogICAgIiIiQ2hlY2sgaWYgYSBjbGFzcyBkZWZpbml0aW9uIGRlZmluZXMgYSBQeXRob24gMy43KyBkYXRhY2xhc3MNCg0KICAgIDpwYXJhbSBub2RlOiBUaGUgY2xhc3Mgbm9kZSB0byBjaGVjay4NCiAgICA6dHlwZSBub2RlOiBhc3Ryb2lkLkNsYXNzRGVmDQoNCiAgICA6cmV0dXJuczogVHJ1ZSBpZiB0aGUgZ2l2ZW4gbm9kZSByZXByZXNlbnRzIGEgZGF0YWNsYXNzIGNsYXNzLiBGYWxzZSBvdGhlcndpc2UuDQogICAgOnJ0eXBlOiBib29sDQogICAgIiIiDQogICAgaWYgbm90IG5vZGUuZGVjb3JhdG9yczoNCiAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgZm9yIGRlY29yYXRvciBpbiBub2RlLmRlY29yYXRvcnMubm9kZXM6DQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGRlY29yYXRvciwgKGFzdHJvaWQuTmFtZSwgYXN0cm9pZC5BdHRyaWJ1dGUpKToNCiAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGlmIGlzaW5zdGFuY2UoZGVjb3JhdG9yLCBhc3Ryb2lkLk5hbWUpOg0KICAgICAgICAgICAgbmFtZSA9IGRlY29yYXRvci5uYW1lDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBuYW1lID0gZGVjb3JhdG9yLmF0dHJuYW1lDQogICAgICAgIGlmIG5hbWUgPT0gREFUQUNMQVNTX0RFQ09SQVRPUiBhbmQgREFUQUNMQVNTX0RFQ09SQVRPUiBpbiBub2RlLnJvb3QoKS5sb2NhbHM6DQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgIHJldHVybiBGYWxzZQ0KDQoNCmRlZiBpc19wb3N0cG9uZWRfZXZhbHVhdGlvbl9lbmFibGVkKG5vZGUpOg0KICAgICIiIkNoZWNrIGlmIHRoZSBwb3N0cG9uZWQgZXZhbHVhdGlvbiBvZiBhbm5vdGF0aW9ucyBpcyBlbmFibGVkIiIiDQogICAgbmFtZSA9ICdhbm5vdGF0aW9ucycNCiAgICBtb2R1bGUgPSBub2RlLnJvb3QoKQ0KICAgIHN0bXQgPSBtb2R1bGUubG9jYWxzLmdldChuYW1lKQ0KICAgIHJldHVybiBzdG10IGFuZCBpc2luc3RhbmNlKHN0bXRbMF0sIGFzdHJvaWQuSW1wb3J0RnJvbSkgYW5kIHN0bXRbMF0ubW9kbmFtZSA9PSAnX19mdXR1cmVfXycNCg0KDQpkZWYgaXNfc3ViY2xhc3Nfb2Yobm9kZV9hLCBub2RlX2IpOg0KICAgICIiIg0KICAgIENoZWNrIGlmIGZpcnN0IG5vZGUgaXMgYSBzdWJjbGFzcyBvZiBzZWNvbmQgbm9kZS4NCiAgICA6cGFyYW0gbm9kZV9hOiBOb2RlIHRvIGNoZWNrIGZvciBzdWJjbGFzcy4NCiAgICA6dHlwZSBub2RlX2E6IGFzdHJvaWQuQ2xhc3NEZWYNCiAgICA6cGFyYW0gbm9kZV9iOiBOb2RlIHRvIGNoZWNrIGZvciBzdXBlcmNsYXNzLg0KICAgIDp0eXBlIG5vZGVfYjogYXN0cm9pZC5DbGFzc0RlZg0KICAgIDpyZXR1cm5zOiBUcnVlIGlmIG5vZGVfYSBpcyBkZXJpdmVkIGZyb20gbm9kZV9iLiBGYWxzZSBvdGhlcndpc2UuDQogICAgOnJ0eXBlOiBib29sDQogICAgIiIiDQogICAgaWYgbm90IGFueShpc2luc3RhbmNlKG5vZGUsIGFzdHJvaWQuQ2xhc3NEZWYpIGZvciBub2RlIGluIChub2RlX2EsIG5vZGVfYikpOg0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgIHJldHVybiBub2RlX2IubmFtZSBpbiB7YmFzZS5uYW1lIGZvciBiYXNlIGluIG5vZGVfYS5iYXNlc30NCg=="
          },
          "hashes": [
            {
              "value": "739D1AF96522AB54196E5336FA853E18",
              "algorithm": "md5"
            },
            {
              "value": "A5E28ADF287C374A92959F19E5BF512F6BA0CD8B",
              "algorithm": "sha-1"
            },
            {
              "value": "824B9D5AAC56D46452B78E1BF5BEFE6C00BC5FE5E9F84DDD4FB86A4CBD3F58F4",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/variables.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "5056A9E083E08926236AB8471307B6C4",
              "algorithm": "md5"
            },
            {
              "value": "99A4CE185A075D2D1479061AAB942EEB3A14787A",
              "algorithm": "sha-1"
            },
            {
              "value": "A46E6558D57638C6F2ECE86553086BB3DF0C15E0D7BFC51FA9902A2155126074",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/checkers/__init__.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMDYtMjAxNCBMT0dJTEFCIFMuQS4gKFBhcmlzLCBGUkFOQ0UpIDxjb250YWN0QGxvZ2lsYWIuZnI+DQojIENvcHlyaWdodCAoYykgMjAxMy0yMDE0IEdvb2dsZSwgSW5jLg0KIyBDb3B5cmlnaHQgKGMpIDIwMTMgYnVja0B5ZWxwLmNvbSA8YnVja0B5ZWxwLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcgQ2xhdWRpdSBQb3BhIDxwY21hbnRpY29yZUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNCBCcmV0dCBDYW5ub24gPGJyZXR0QHB5dGhvbi5vcmc+DQojIENvcHlyaWdodCAoYykgMjAxNCBBcnVuIFBlcnNhdWQgPGFydW5AbnViYXRpLm5ldD4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IElvbmVsIENyaXN0aWFuIE1hcmllcyA8Y29udGFjdEBpb25lbG1jLnJvPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgTW9pc2VzIExvcGV6IDxtb3lsb3AyNjBAdmF1eG9vLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggQnJ5Y2UgR3VpbnRhIDxicnljZS5wYXVsLmd1aW50YUBnbWFpbC5jb20+DQoNCiMgTGljZW5zZWQgdW5kZXIgdGhlIEdQTDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvZ3BsLTIuMC5odG1sDQojIEZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vUHlDUUEvcHlsaW50L2Jsb2IvbWFzdGVyL0NPUFlJTkcNCg0KIiIidXRpbGl0aWVzIG1ldGhvZHMgYW5kIGNsYXNzZXMgZm9yIGNoZWNrZXJzDQoNCkJhc2UgaWQgb2Ygc3RhbmRhcmQgY2hlY2tlcnMgKHVzZWQgaW4gbXNnIGFuZCByZXBvcnQgaWRzKToNCjAxOiBiYXNlDQowMjogY2xhc3Nlcw0KMDM6IGZvcm1hdA0KMDQ6IGltcG9ydA0KMDU6IG1pc2MNCjA2OiB2YXJpYWJsZXMNCjA3OiBleGNlcHRpb25zDQowODogc2ltaWxhcg0KMDk6IGRlc2lnbl9hbmFseXNpcw0KMTA6IG5ld3N0eWxlDQoxMTogdHlwZWNoZWNrDQoxMjogbG9nZ2luZw0KMTM6IHN0cmluZ19mb3JtYXQNCjE0OiBzdHJpbmdfY29uc3RhbnQNCjE1OiBzdGRsaWINCjE2OiBweXRob24zDQoxNzogcmVmYWN0b3JpbmcNCjE4LTUwOiBub3QgeWV0IHVzZWQ6IHJlc2VydmVkIGZvciBmdXR1cmUgaW50ZXJuYWwgY2hlY2tlcnMuDQo1MS05OTogcGVyaGFwcyB1c2VkOiByZXNlcnZlZCBmb3IgZXh0ZXJuYWwgY2hlY2tlcnMNCg0KVGhlIHJhd19tZXRyaWNzIGNoZWNrZXIgaGFzIG5vIG51bWJlciBhc3NvY2lhdGVkIHNpbmNlIGl0IGRvZXNuJ3QgZW1pdCBhbnkNCm1lc3NhZ2VzIG5vciByZXBvcnRzLiBYWFggbm90IHRydWUsIGVtaXQgYSAwNyByZXBvcnQgIQ0KDQoiIiINCg0KaW1wb3J0IHN5cw0KaW1wb3J0IHRva2VuaXplDQppbXBvcnQgd2FybmluZ3MNCg0KZnJvbSBweWxpbnQuY29uZmlnIGltcG9ydCBPcHRpb25zUHJvdmlkZXJNaXhJbg0KZnJvbSBweWxpbnQucmVwb3J0ZXJzIGltcG9ydCBkaWZmX3N0cmluZw0KZnJvbSBweWxpbnQudXRpbHMgaW1wb3J0IHJlZ2lzdGVyX3BsdWdpbnMNCmZyb20gcHlsaW50LmludGVyZmFjZXMgaW1wb3J0IFVOREVGSU5FRA0KDQoNCmRlZiB0YWJsZV9saW5lc19mcm9tX3N0YXRzKHN0YXRzLCBvbGRfc3RhdHMsIGNvbHVtbnMpOg0KICAgICIiImdldCB2YWx1ZXMgbGlzdGVkIGluIDxjb2x1bW5zPiBmcm9tIDxzdGF0cz4gYW5kIDxvbGRfc3RhdHM+LA0KICAgIGFuZCByZXR1cm4gYSBmb3JtYXRlZCBsaXN0IG9mIHZhbHVlcywgZGVzaWduZWQgdG8gYmUgZ2l2ZW4gdG8gYQ0KICAgIHVyZXBvcnQuVGFibGUgb2JqZWN0DQogICAgIiIiDQogICAgbGluZXMgPSBbXQ0KICAgIGZvciBtX3R5cGUgaW4gY29sdW1uczoNCiAgICAgICAgbmV3ID0gc3RhdHNbbV90eXBlXQ0KICAgICAgICBmb3JtYXQgPSBzdHIgIyBweWxpbnQ6IGRpc2FibGU9cmVkZWZpbmVkLWJ1aWx0aW4NCiAgICAgICAgaWYgaXNpbnN0YW5jZShuZXcsIGZsb2F0KToNCiAgICAgICAgICAgIGZvcm1hdCA9IGxhbWJkYSBudW06ICclLjNmJyAlIG51bQ0KICAgICAgICBvbGQgPSBvbGRfc3RhdHMuZ2V0KG1fdHlwZSkNCiAgICAgICAgaWYgb2xkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZGlmZl9zdHIgPSBkaWZmX3N0cmluZyhvbGQsIG5ldykNCiAgICAgICAgICAgIG9sZCA9IGZvcm1hdChvbGQpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBvbGQsIGRpZmZfc3RyID0gJ05DJywgJ05DJw0KICAgICAgICBsaW5lcyArPSAobV90eXBlLnJlcGxhY2UoJ18nLCAnICcpLCBmb3JtYXQobmV3KSwgb2xkLCBkaWZmX3N0cikNCiAgICByZXR1cm4gbGluZXMNCg0KDQpjbGFzcyBCYXNlQ2hlY2tlcihPcHRpb25zUHJvdmlkZXJNaXhJbik6DQogICAgIiIiYmFzZSBjbGFzcyBmb3IgY2hlY2tlcnMiIiINCiAgICAjIGNoZWNrZXIgbmFtZSAoeW91IG1heSByZXVzZSBhbiBleGlzdGluZyBvbmUpDQogICAgbmFtZSA9IE5vbmUNCiAgICAjIG9wdGlvbnMgbGV2ZWwgKDAgd2lsbCBiZSBkaXNwbGF5aW5nIGluIC0taGVscCwgMSBpbiAtLWxvbmctaGVscCkNCiAgICBsZXZlbCA9IDENCiAgICAjIG9yZGVyZWQgbGlzdCBvZiBvcHRpb25zIHRvIGNvbnRyb2wgdGhlIGNrZWNrZXIgYmVoYXZpb3VyDQogICAgb3B0aW9ucyA9ICgpDQogICAgIyBtZXNzYWdlcyBpc3N1ZWQgYnkgdGhpcyBjaGVja2VyDQogICAgbXNncyA9IHt9DQogICAgIyByZXBvcnRzIGlzc3VlZCBieSB0aGlzIGNoZWNrZXINCiAgICByZXBvcnRzID0gKCkNCiAgICAjIG1hcmsgdGhpcyBjaGVja2VyIGFzIGVuYWJsZWQgb3Igbm90Lg0KICAgIGVuYWJsZWQgPSBUcnVlDQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgbGludGVyPU5vbmUpOg0KICAgICAgICAiIiJjaGVja2VyIGluc3RhbmNlcyBzaG91bGQgaGF2ZSB0aGUgbGludGVyIGFzIGFyZ3VtZW50DQoNCiAgICAgICAgbGludGVyIGlzIGFuIG9iamVjdCBpbXBsZW1lbnRpbmcgSUxpbnRlcg0KICAgICAgICAiIiINCiAgICAgICAgaWYgc2VsZi5uYW1lIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5uYW1lID0gc2VsZi5uYW1lLmxvd2VyKCkNCiAgICAgICAgT3B0aW9uc1Byb3ZpZGVyTWl4SW4uX19pbml0X18oc2VsZikNCiAgICAgICAgc2VsZi5saW50ZXIgPSBsaW50ZXINCg0KICAgIGRlZiBhZGRfbWVzc2FnZShzZWxmLCBtc2dfaWQsIGxpbmU9Tm9uZSwgbm9kZT1Ob25lLCBhcmdzPU5vbmUsIGNvbmZpZGVuY2U9VU5ERUZJTkVELA0KICAgICAgICAgICAgICAgICAgICBjb2xfb2Zmc2V0PU5vbmUpOg0KICAgICAgICAiIiJhZGQgYSBtZXNzYWdlIG9mIGEgZ2l2ZW4gdHlwZSIiIg0KICAgICAgICBzZWxmLmxpbnRlci5hZGRfbWVzc2FnZShtc2dfaWQsIGxpbmUsIG5vZGUsIGFyZ3MsIGNvbmZpZGVuY2UsIGNvbF9vZmZzZXQpDQoNCiAgICAjIGR1bW15IG1ldGhvZHMgaW1wbGVtZW50aW5nIHRoZSBJQ2hlY2tlciBpbnRlcmZhY2UNCg0KICAgIGRlZiBvcGVuKHNlbGYpOg0KICAgICAgICAiIiJjYWxsZWQgYmVmb3JlIHZpc2l0aW5nIHByb2plY3QgKGkuZSBzZXQgb2YgbW9kdWxlcykiIiINCg0KICAgIGRlZiBjbG9zZShzZWxmKToNCiAgICAgICAgIiIiY2FsbGVkIGFmdGVyIHZpc2l0aW5nIHByb2plY3QgKGkuZSBzZXQgb2YgbW9kdWxlcykiIiINCg0KDQpjbGFzcyBCYXNlVG9rZW5DaGVja2VyKEJhc2VDaGVja2VyKToNCiAgICAiIiJCYXNlIGNsYXNzIGZvciBjaGVja2VycyB0aGF0IHdhbnQgdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHRva2VuIHN0cmVhbS4iIiINCg0KICAgIGRlZiBwcm9jZXNzX3Rva2VucyhzZWxmLCB0b2tlbnMpOg0KICAgICAgICAiIiJTaG91bGQgYmUgb3ZlcnJpZGRlbiBieSBzdWJjbGFzc2VzLiIiIg0KICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCkNCg0KDQpkZWYgaW5pdGlhbGl6ZShsaW50ZXIpOg0KICAgICIiImluaXRpYWxpemUgbGludGVyIHdpdGggY2hlY2tlcnMgaW4gdGhpcyBwYWNrYWdlICIiIg0KICAgIHJlZ2lzdGVyX3BsdWdpbnMobGludGVyLCBfX3BhdGhfX1swXSkNCg0KX19hbGxfXyA9ICgnQmFzZUNoZWNrZXInLCAnaW5pdGlhbGl6ZScpDQo="
          },
          "hashes": [
            {
              "value": "2F8C6CE3FE001641B23E6D558656E904",
              "algorithm": "md5"
            },
            {
              "value": "2E9BBB501FD7D2A209BB953E767B99F4CBCBAE9A",
              "algorithm": "sha-1"
            },
            {
              "value": "767F40FBC60A69BFD65232243138C2BD0A723C79CAEE4EF3F57B25238320FA96",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/bad_builtin.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMTYgQ2xhdWRpdSBQb3BhIDxwY21hbnRpY29yZUBnbWFpbC5jb20+DQoNCiMgTGljZW5zZWQgdW5kZXIgdGhlIEdQTDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvZ3BsLTIuMC5odG1sDQojIEZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vUHlDUUEvcHlsaW50L2Jsb2IvbWFzdGVyL0NPUFlJTkcNCg0KIiIiQ2hlY2tlciBmb3IgZGVwcmVjYXRlZCBidWlsdGlucy4iIiINCmltcG9ydCBzeXMNCg0KaW1wb3J0IGFzdHJvaWQNCmZyb20gcHlsaW50LmNoZWNrZXJzIGltcG9ydCBCYXNlQ2hlY2tlcg0KZnJvbSBweWxpbnQuY2hlY2tlcnMudXRpbHMgaW1wb3J0IGNoZWNrX21lc3NhZ2VzDQpmcm9tIHB5bGludC5pbnRlcmZhY2VzIGltcG9ydCBJQXN0cm9pZENoZWNrZXINCg0KDQpCQURfRlVOQ1RJT05TID0gWydtYXAnLCAnZmlsdGVyJ10NCmlmIHN5cy52ZXJzaW9uX2luZm8gPCAoMywgMCk6DQogICAgQkFEX0ZVTkNUSU9OUy5hcHBlbmQoJ2lucHV0JykNCiMgU29tZSBoaW50cyByZWdhcmRpbmcgdGhlIHVzZSBvZiBiYWQgYnVpbHRpbnMuDQpCVUlMVElOX0hJTlRTID0gew0KICAgICdtYXAnOiAnVXNpbmcgYSBsaXN0IGNvbXByZWhlbnNpb24gY2FuIGJlIGNsZWFyZXIuJywNCn0NCkJVSUxUSU5fSElOVFNbJ2ZpbHRlciddID0gQlVJTFRJTl9ISU5UU1snbWFwJ10NCg0KDQpjbGFzcyBCYWRCdWlsdGluQ2hlY2tlcihCYXNlQ2hlY2tlcik6DQoNCiAgICBfX2ltcGxlbWVudHNfXyA9IChJQXN0cm9pZENoZWNrZXIsICkNCiAgICBuYW1lID0gJ2RlcHJlY2F0ZWRfYnVpbHRpbnMnDQogICAgbXNncyA9IHsnVzAxNDEnOiAoJ1VzZWQgYnVpbHRpbiBmdW5jdGlvbiAlcycsDQogICAgICAgICAgICAgICAgICAgICAgJ2JhZC1idWlsdGluJywNCiAgICAgICAgICAgICAgICAgICAgICAnVXNlZCB3aGVuIGEgYmxhY2sgbGlzdGVkIGJ1aWx0aW4gZnVuY3Rpb24gaXMgdXNlZCAoc2VlIHRoZSAnDQogICAgICAgICAgICAgICAgICAgICAgJ2JhZC1mdW5jdGlvbiBvcHRpb24pLiBVc3VhbCBibGFjayBsaXN0ZWQgZnVuY3Rpb25zIGFyZSB0aGUgb25lcyAnDQogICAgICAgICAgICAgICAgICAgICAgJ2xpa2UgbWFwLCBvciBmaWx0ZXIgLCB3aGVyZSBQeXRob24gb2ZmZXJzIG5vdyBzb21lIGNsZWFuZXIgJw0KICAgICAgICAgICAgICAgICAgICAgICdhbHRlcm5hdGl2ZSBsaWtlIGxpc3QgY29tcHJlaGVuc2lvbi4nKSwNCiAgICAgICAgICAgfQ0KDQogICAgb3B0aW9ucyA9ICgoJ2JhZC1mdW5jdGlvbnMnLA0KICAgICAgICAgICAgICAgIHsnZGVmYXVsdCcgOiBCQURfRlVOQ1RJT05TLA0KICAgICAgICAgICAgICAgICAndHlwZScgOidjc3YnLCAnbWV0YXZhcicgOiAnPGJ1aWx0aW4gZnVuY3Rpb24gbmFtZXM+JywNCiAgICAgICAgICAgICAgICAgJ2hlbHAnIDogJ0xpc3Qgb2YgYnVpbHRpbnMgZnVuY3Rpb24gbmFtZXMgdGhhdCBzaG91bGQgbm90IGJlICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZWQsIHNlcGFyYXRlZCBieSBhIGNvbW1hJ30NCiAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICkNCg0KICAgIEBjaGVja19tZXNzYWdlcygnYmFkLWJ1aWx0aW4nKQ0KICAgIGRlZiB2aXNpdF9jYWxsKHNlbGYsIG5vZGUpOg0KICAgICAgICBpZiBpc2luc3RhbmNlKG5vZGUuZnVuYywgYXN0cm9pZC5OYW1lKToNCiAgICAgICAgICAgIG5hbWUgPSBub2RlLmZ1bmMubmFtZQ0KICAgICAgICAgICAgIyBpZ25vcmUgdGhlIG5hbWUgaWYgaXQncyBub3QgYSBidWlsdGluIChpLmUuIG5vdCBkZWZpbmVkIGluIHRoZQ0KICAgICAgICAgICAgIyBsb2NhbHMgbm9yIGdsb2JhbHMgc2NvcGUpDQogICAgICAgICAgICBpZiBub3QgKG5hbWUgaW4gbm9kZS5mcmFtZSgpIG9yIG5hbWUgaW4gbm9kZS5yb290KCkpOg0KICAgICAgICAgICAgICAgIGlmIG5hbWUgaW4gc2VsZi5jb25maWcuYmFkX2Z1bmN0aW9uczoNCiAgICAgICAgICAgICAgICAgICAgaGludCA9IEJVSUxUSU5fSElOVFMuZ2V0KG5hbWUpDQogICAgICAgICAgICAgICAgICAgIGlmIGhpbnQ6DQogICAgICAgICAgICAgICAgICAgICAgICBhcmdzID0gIiVyLiAlcyIgJSAobmFtZSwgaGludCkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MgPSByZXByKG5hbWUpDQogICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ2JhZC1idWlsdGluJywgbm9kZT1ub2RlLCBhcmdzPWFyZ3MpDQoNCg0KZGVmIHJlZ2lzdGVyKGxpbnRlcik6DQogICAgIiIiUmVxdWlyZWQgbWV0aG9kIHRvIGF1dG8gcmVnaXN0ZXIgdGhpcyBjaGVja2VyLg0KDQogICAgOnBhcmFtIGxpbnRlcjogTWFpbiBpbnRlcmZhY2Ugb2JqZWN0IGZvciBQeWxpbnQgcGx1Z2lucw0KICAgIDp0eXBlIGxpbnRlcjogUHlsaW50IG9iamVjdA0KICAgICIiIg0KICAgIGxpbnRlci5yZWdpc3Rlcl9jaGVja2VyKEJhZEJ1aWx0aW5DaGVja2VyKGxpbnRlcikpDQo="
          },
          "hashes": [
            {
              "value": "802720F0A748FBD15091D0066FB5022C",
              "algorithm": "md5"
            },
            {
              "value": "100C63EE7E1D4C361E1F0994AD201B1766F77527",
              "algorithm": "sha-1"
            },
            {
              "value": "264C84082BC1F4A16F74049638935270A8D5E61B3C6A1554AAD105B716BCE2D9",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/check_docs.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSBCcnVubyBEYW5pZWwgPGJydW5vLmRhbmllbEBibHVlLXlvbmRlci5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNS0yMDE2IENsYXVkaXUgUG9wYSA8cGNtYW50aWNvcmVAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgQXNobGV5IFdoZXR0ZXIgPGFzaGxleUBhd2hldHRlci5jby51az4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQppbXBvcnQgd2FybmluZ3MNCg0KZnJvbSBweWxpbnQuZXh0ZW5zaW9ucyBpbXBvcnQgZG9jcGFyYW1zDQoNCg0KZGVmIHJlZ2lzdGVyKGxpbnRlcik6DQogICAgIiIiUmVxdWlyZWQgbWV0aG9kIHRvIGF1dG8gcmVnaXN0ZXIgdGhpcyBjaGVja2VyLg0KDQogICAgOnBhcmFtIGxpbnRlcjogTWFpbiBpbnRlcmZhY2Ugb2JqZWN0IGZvciBQeWxpbnQgcGx1Z2lucw0KICAgIDp0eXBlIGxpbnRlcjogUHlsaW50IG9iamVjdA0KICAgICIiIg0KICAgIHdhcm5pbmdzLndhcm4oIlRoaXMgcGx1Z2luIGlzIGRlcHJlY2F0ZWQsIHVzZSBweWxpbnQuZXh0ZW5zaW9ucy5kb2NwYXJhbXMgaW5zdGVhZC4iLA0KICAgICAgICAgICAgICAgICAgRGVwcmVjYXRpb25XYXJuaW5nKQ0KICAgIGxpbnRlci5yZWdpc3Rlcl9jaGVja2VyKGRvY3BhcmFtcy5Eb2NzdHJpbmdQYXJhbWV0ZXJDaGVja2VyKGxpbnRlcikpDQo="
          },
          "hashes": [
            {
              "value": "50CF82737BD3AF542DE38F67B7E62A6D",
              "algorithm": "md5"
            },
            {
              "value": "31C26168158800572B32ED34873D6EDD2CE33D11",
              "algorithm": "sha-1"
            },
            {
              "value": "DDBD8C7284199813DD180E0DF5C2910ED63F8DC40411D3CF8329B9ED70A44F4E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/check_elif.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDE1IExPR0lMQUIgUy5BLiAoUGFyaXMsIEZSQU5DRSkgPGNvbnRhY3RAbG9naWxhYi5mcj4NCiMgQ29weXJpZ2h0IChjKSAyMDE2LTIwMTcgQ2xhdWRpdSBQb3BhIDxwY21hbnRpY29yZUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNiBHbGVubiBNYXR0aGV3cyA8Z2xtYXR0aGVAY2lzY28uY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggVmlsbGUgU2t5dHTDpCA8dmlsbGUuc2t5dHRhQHVwY2xvdWQuY29tPg0KDQojIExpY2Vuc2VkIHVuZGVyIHRoZSBHUEw6IGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2dwbC0yLjAuaHRtbA0KIyBGb3IgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL1B5Q1FBL3B5bGludC9ibG9iL21hc3Rlci9DT1BZSU5HDQoNCmltcG9ydCBhc3Ryb2lkDQpmcm9tIHB5bGludC5jaGVja2VycyBpbXBvcnQgQmFzZVRva2VuQ2hlY2tlcg0KZnJvbSBweWxpbnQuY2hlY2tlcnMudXRpbHMgaW1wb3J0IGNoZWNrX21lc3NhZ2VzDQpmcm9tIHB5bGludC5pbnRlcmZhY2VzIGltcG9ydCBJVG9rZW5DaGVja2VyLCBJQXN0cm9pZENoZWNrZXINCg0KDQpjbGFzcyBFbHNlaWZVc2VkQ2hlY2tlcihCYXNlVG9rZW5DaGVja2VyKToNCiAgICAiIiJDaGVja3MgZm9yIHVzZSBvZiAiZWxzZSBpZiIgd2hlbiBhbiAiZWxpZiIgY291bGQgYmUgdXNlZA0KICAgICIiIg0KDQogICAgX19pbXBsZW1lbnRzX18gPSAoSVRva2VuQ2hlY2tlciwgSUFzdHJvaWRDaGVja2VyKQ0KICAgIG5hbWUgPSAnZWxzZV9pZl91c2VkJw0KICAgIG1zZ3MgPSB7J1I1NTAxJzogKCdDb25zaWRlciB1c2luZyAiZWxpZiIgaW5zdGVhZCBvZiAiZWxzZSBpZiInLA0KICAgICAgICAgICAgICAgICAgICAgICdlbHNlLWlmLXVzZWQnLA0KICAgICAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gYW4gZWxzZSBzdGF0ZW1lbnQgaXMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgJw0KICAgICAgICAgICAgICAgICAgICAgICdhbiBpZiBzdGF0ZW1lbnQgYW5kIGRvZXMgbm90IGNvbnRhaW4gc3RhdGVtZW50cyB0aGF0ICcNCiAgICAgICAgICAgICAgICAgICAgICAnd291bGQgYmUgdW5yZWxhdGVkIHRvIGl0LicpLA0KICAgICAgICAgICB9DQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgbGludGVyPU5vbmUpOg0KICAgICAgICBCYXNlVG9rZW5DaGVja2VyLl9faW5pdF9fKHNlbGYsIGxpbnRlcikNCiAgICAgICAgc2VsZi5faW5pdCgpDQoNCiAgICBkZWYgX2luaXQoc2VsZik6DQogICAgICAgIHNlbGYuX2VsaWZzID0gW10NCiAgICAgICAgc2VsZi5faWZfY291bnRlciA9IDANCg0KICAgIGRlZiBwcm9jZXNzX3Rva2VucyhzZWxmLCB0b2tlbnMpOg0KICAgICAgICAjIFByb2Nlc3MgdG9rZW5zIGFuZCBsb29rIGZvciAnaWYnIG9yICdlbGlmJw0KICAgICAgICBmb3IgXywgdG9rZW4sIF8sIF8sIF8gaW4gdG9rZW5zOg0KICAgICAgICAgICAgaWYgdG9rZW4gPT0gJ2VsaWYnOg0KICAgICAgICAgICAgICAgIHNlbGYuX2VsaWZzLmFwcGVuZChUcnVlKQ0KICAgICAgICAgICAgZWxpZiB0b2tlbiA9PSAnaWYnOg0KICAgICAgICAgICAgICAgIHNlbGYuX2VsaWZzLmFwcGVuZChGYWxzZSkNCg0KICAgIGRlZiBsZWF2ZV9tb2R1bGUoc2VsZiwgXyk6DQogICAgICAgIHNlbGYuX2luaXQoKQ0KDQogICAgZGVmIHZpc2l0X2lmZXhwKHNlbGYsIF8pOg0KICAgICAgICBzZWxmLl9pZl9jb3VudGVyICs9IDENCg0KICAgIGRlZiB2aXNpdF9jb21wcmVoZW5zaW9uKHNlbGYsIG5vZGUpOg0KICAgICAgICBzZWxmLl9pZl9jb3VudGVyICs9IGxlbihub2RlLmlmcykNCg0KICAgIEBjaGVja19tZXNzYWdlcygnZWxzZS1pZi11c2VkJykNCiAgICBkZWYgdmlzaXRfaWYoc2VsZiwgbm9kZSk6DQogICAgICAgIGlmIGlzaW5zdGFuY2Uobm9kZS5wYXJlbnQsIGFzdHJvaWQuSWYpOg0KICAgICAgICAgICAgb3JlbHNlID0gbm9kZS5wYXJlbnQub3JlbHNlDQogICAgICAgICAgICAjIGN1cnJlbnQgaWYgbm9kZSBtdXN0IGRpcmVjdGx5IGZvbGxvdyBhbiAiZWxzZSINCiAgICAgICAgICAgIGlmIG9yZWxzZSBhbmQgb3JlbHNlID09IFtub2RlXToNCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5fZWxpZnNbc2VsZi5faWZfY291bnRlcl06DQogICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ2Vsc2UtaWYtdXNlZCcsIG5vZGU9bm9kZSkNCiAgICAgICAgc2VsZi5faWZfY291bnRlciArPSAxDQoNCg0KZGVmIHJlZ2lzdGVyKGxpbnRlcik6DQogICAgIiIiUmVxdWlyZWQgbWV0aG9kIHRvIGF1dG8gcmVnaXN0ZXIgdGhpcyBjaGVja2VyLg0KDQogICAgOnBhcmFtIGxpbnRlcjogTWFpbiBpbnRlcmZhY2Ugb2JqZWN0IGZvciBQeWxpbnQgcGx1Z2lucw0KICAgIDp0eXBlIGxpbnRlcjogUHlsaW50IG9iamVjdA0KICAgICIiIg0KICAgIGxpbnRlci5yZWdpc3Rlcl9jaGVja2VyKEVsc2VpZlVzZWRDaGVja2VyKGxpbnRlcikpDQo="
          },
          "hashes": [
            {
              "value": "AC73161440DFEAF905AAA7AAE454216F",
              "algorithm": "md5"
            },
            {
              "value": "2FFBE6CD5D217D7ACA4370DA5F3DD8C8FE785D92",
              "algorithm": "sha-1"
            },
            {
              "value": "E550858059A3457FC591A991BF5931C8ABA659C532FD6DEF20A98E17E801CB2E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/comparetozero.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDE2IEFsZXhhbmRlciBUb2Rvcm92IDxhdG9kb3JvdkBvdGIuYmc+DQojIENvcHlyaWdodCAoYykgMjAxNyBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQoiIiJMb29rcyBmb3IgIGNvbXBhcmlzb25zIHRvIGVtcHR5IHN0cmluZy4iIiINCg0KaW1wb3J0IGl0ZXJ0b29scw0KDQppbXBvcnQgYXN0cm9pZA0KDQpmcm9tIHB5bGludCBpbXBvcnQgaW50ZXJmYWNlcw0KZnJvbSBweWxpbnQgaW1wb3J0IGNoZWNrZXJzDQpmcm9tIHB5bGludC5jaGVja2VycyBpbXBvcnQgdXRpbHMNCg0KDQpkZWYgX2lzX2NvbnN0YW50X3plcm8obm9kZSk6DQogICAgcmV0dXJuIGlzaW5zdGFuY2Uobm9kZSwgYXN0cm9pZC5Db25zdCkgYW5kIG5vZGUudmFsdWUgPT0gMA0KDQoNCmNsYXNzIENvbXBhcmVUb1plcm9DaGVja2VyKGNoZWNrZXJzLkJhc2VDaGVja2VyKToNCiAgICAiIiJDaGVja3MgZm9yIGNvbXBhcmlzb25zIHRvIHplcm8uDQogICAgTW9zdCBvZiB0aGUgdGltZXMgeW91IHNob3VsZCB1c2UgdGhlIGZhY3QgdGhhdCBpbnRlZ2VycyB3aXRoIGEgdmFsdWUgb2YgMCBhcmUgZmFsc2UuDQogICAgQW4gZXhjZXB0aW9uIHRvIHRoaXMgcnVsZSBpcyB3aGVuIDAgaXMgYWxsb3dlZCBpbiB0aGUgcHJvZ3JhbSBhbmQgaGFzIGENCiAgICBkaWZmZXJlbnQgbWVhbmluZyB0aGFuIE5vbmUhDQogICAgIiIiDQoNCiAgICBfX2ltcGxlbWVudHNfXyA9IChpbnRlcmZhY2VzLklBc3Ryb2lkQ2hlY2tlciwpDQoNCiAgICAjIGNvbmZpZ3VyYXRpb24gc2VjdGlvbiBuYW1lDQogICAgbmFtZSA9ICdjb21wYXJlLXRvLXplcm8nDQogICAgbXNncyA9IHsnQzIwMDEnOiAoJ0F2b2lkIGNvbXBhcmlzb25zIHRvIHplcm8nLA0KICAgICAgICAgICAgICAgICAgICAgICdjb21wYXJlLXRvLXplcm8nLA0KICAgICAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gUHlsaW50IGRldGVjdHMgY29tcGFyaXNvbiB0byBhIDAgY29uc3RhbnQuJyksDQogICAgICAgICAgIH0NCg0KICAgIHByaW9yaXR5ID0gLTINCiAgICBvcHRpb25zID0gKCkNCg0KICAgIEB1dGlscy5jaGVja19tZXNzYWdlcygnY29tcGFyZS10by16ZXJvJykNCiAgICBkZWYgdmlzaXRfY29tcGFyZShzZWxmLCBub2RlKToNCiAgICAgICAgX29wZXJhdG9ycyA9IFsnIT0nLCAnPT0nLCAnaXMgbm90JywgJ2lzJ10NCiAgICAgICAgIyBub3RlOiBhc3Ryb2lkLkNvbXBhcmUgaGFzIHRoZSBsZWZ0IG1vc3Qgb3BlcmFuZCBpbiBub2RlLmxlZnQNCiAgICAgICAgIyB3aGlsZSB0aGUgcmVzdCBhcmUgYSBsaXN0IG9mIHR1cGxlcyBpbiBub2RlLm9wcw0KICAgICAgICAjIHRoZSBmb3JtYXQgb2YgdGhlIHR1cGxlIGlzICgnY29tcGFyZSBvcGVyYXRvciBzaWduJywgbm9kZSkNCiAgICAgICAgIyBoZXJlIHdlIHNxdWFzaCBldmVyeXRoaW5nIGludG8gYG9wc2AgdG8gbWFrZSBpdCBlYXNpZXIgZm9yIHByb2Nlc3NpbmcgbGF0ZXINCiAgICAgICAgb3BzID0gWygnJywgbm9kZS5sZWZ0KV0NCiAgICAgICAgb3BzLmV4dGVuZChub2RlLm9wcykNCiAgICAgICAgb3BzID0gbGlzdChpdGVydG9vbHMuY2hhaW4oKm9wcykpDQoNCiAgICAgICAgZm9yIG9wc19pZHggaW4gcmFuZ2UobGVuKG9wcykgLSAyKToNCiAgICAgICAgICAgIG9wXzEgPSBvcHNbb3BzX2lkeF0NCiAgICAgICAgICAgIG9wXzIgPSBvcHNbb3BzX2lkeCArIDFdDQogICAgICAgICAgICBvcF8zID0gb3BzW29wc19pZHggKyAyXQ0KICAgICAgICAgICAgZXJyb3JfZGV0ZWN0ZWQgPSBGYWxzZQ0KDQogICAgICAgICAgICAjIDAgPz8gWA0KICAgICAgICAgICAgaWYgX2lzX2NvbnN0YW50X3plcm8ob3BfMSkgYW5kIG9wXzIgaW4gX29wZXJhdG9ycyArIFsnPCddOg0KICAgICAgICAgICAgICAgIGVycm9yX2RldGVjdGVkID0gVHJ1ZQ0KICAgICAgICAgICAgIyBYID8/IDANCiAgICAgICAgICAgIGVsaWYgb3BfMiBpbiBfb3BlcmF0b3JzICsgWyc+J10gYW5kIF9pc19jb25zdGFudF96ZXJvKG9wXzMpOg0KICAgICAgICAgICAgICAgIGVycm9yX2RldGVjdGVkID0gVHJ1ZQ0KDQogICAgICAgICAgICBpZiBlcnJvcl9kZXRlY3RlZDoNCiAgICAgICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKCdjb21wYXJlLXRvLXplcm8nLCBub2RlPW5vZGUpDQoNCg0KZGVmIHJlZ2lzdGVyKGxpbnRlcik6DQogICAgIiIiUmVxdWlyZWQgbWV0aG9kIHRvIGF1dG8gcmVnaXN0ZXIgdGhpcyBjaGVja2VyLiIiIg0KICAgIGxpbnRlci5yZWdpc3Rlcl9jaGVja2VyKENvbXBhcmVUb1plcm9DaGVja2VyKGxpbnRlcikpDQo="
          },
          "hashes": [
            {
              "value": "9214C57D2F5B29EA04C827AA515B1651",
              "algorithm": "md5"
            },
            {
              "value": "EC0AC2BF8A65B4E8DCAAAC85933517CC5F14A548",
              "algorithm": "sha-1"
            },
            {
              "value": "3844418FACD4E93A7CF611AB1C3EFE6E6023C29F25E631ECD85CFA5C6823C107",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/docparams.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "B53260EDF54CC55895C4E255640B2DE5",
              "algorithm": "md5"
            },
            {
              "value": "B92A501B53F415698070135720712B0959E1B4CE",
              "algorithm": "sha-1"
            },
            {
              "value": "BAF0ACB8063F1CB053DAA2A21199070FBC0BFEC7E113856E945381BDD398DBF9",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/docstyle.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDE2LTIwMTcgQ2xhdWRpdSBQb3BhIDxwY21hbnRpY29yZUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNiDFgXVrYXN6IFJvZ2Fsc2tpIDxyb2dhbHNraS45MUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNiBMdWlzIEVzY29iYXIgPGxlc2NvYmFyQHZhdXhvby5jb20+DQoNCiMgTGljZW5zZWQgdW5kZXIgdGhlIEdQTDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvZ3BsLTIuMC5odG1sDQojIEZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vUHlDUUEvcHlsaW50L2Jsb2IvbWFzdGVyL0NPUFlJTkcNCg0KaW1wb3J0IGxpbmVjYWNoZQ0KDQpmcm9tIHB5bGludCBpbXBvcnQgY2hlY2tlcnMNCmZyb20gcHlsaW50LmludGVyZmFjZXMgaW1wb3J0IElBc3Ryb2lkQ2hlY2tlciwgSElHSA0KZnJvbSBweWxpbnQuY2hlY2tlcnMudXRpbHMgaW1wb3J0IGNoZWNrX21lc3NhZ2VzDQoNCg0KY2xhc3MgRG9jU3RyaW5nU3R5bGVDaGVja2VyKGNoZWNrZXJzLkJhc2VDaGVja2VyKToNCiAgICAiIiJDaGVja3MgZm9ybWF0IG9mIGRvY3N0cmluZ3MgYmFzZWQgb24gUEVQIDAyNTciIiINCg0KICAgIF9faW1wbGVtZW50c19fID0gSUFzdHJvaWRDaGVja2VyDQogICAgbmFtZSA9ICdkb2NzdHlsZScNCg0KICAgIG1zZ3MgPSB7DQogICAgICAgICdDMDE5OCc6ICgnQmFkIGRvY3N0cmluZyBxdW90ZXMgaW4gJXMsIGV4cGVjdGVkICIiIiwgZ2l2ZW4gJXMnLA0KICAgICAgICAgICAgICAgICAgJ2JhZC1kb2NzdHJpbmctcXVvdGVzJywNCiAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gYSBkb2NzdHJpbmcgZG9lcyBub3QgaGF2ZSB0cmlwbGUgZG91YmxlIHF1b3Rlcy4nKSwNCiAgICAgICAgJ0MwMTk5JzogKCdGaXJzdCBsaW5lIGVtcHR5IGluICVzIGRvY3N0cmluZycsDQogICAgICAgICAgICAgICAgICAnZG9jc3RyaW5nLWZpcnN0LWxpbmUtZW1wdHknLA0KICAgICAgICAgICAgICAgICAgJ1VzZWQgd2hlbiBhIGJsYW5rIGxpbmUgaXMgZm91bmQgYXQgdGhlIGJlZ2lubmluZyBvZiBhIGRvY3N0cmluZy4nKSwNCiAgICAgICAgfQ0KDQogICAgQGNoZWNrX21lc3NhZ2VzKCdkb2NzdHJpbmctZmlyc3QtbGluZS1lbXB0eScsICdiYWQtZG9jc3RyaW5nLXF1b3RlcycpDQogICAgZGVmIHZpc2l0X21vZHVsZShzZWxmLCBub2RlKToNCiAgICAgICAgc2VsZi5fY2hlY2tfZG9jc3RyaW5nKCdtb2R1bGUnLCBub2RlKQ0KDQogICAgZGVmIHZpc2l0X2NsYXNzZGVmKHNlbGYsIG5vZGUpOg0KICAgICAgICBzZWxmLl9jaGVja19kb2NzdHJpbmcoJ2NsYXNzJywgbm9kZSkNCg0KICAgIGRlZiB2aXNpdF9mdW5jdGlvbmRlZihzZWxmLCBub2RlKToNCiAgICAgICAgZnR5cGUgPSAnbWV0aG9kJyBpZiBub2RlLmlzX21ldGhvZCgpIGVsc2UgJ2Z1bmN0aW9uJw0KICAgICAgICBzZWxmLl9jaGVja19kb2NzdHJpbmcoZnR5cGUsIG5vZGUpDQoNCiAgICB2aXNpdF9hc3luY2Z1bmN0aW9uZGVmID0gdmlzaXRfZnVuY3Rpb25kZWYNCg0KICAgIGRlZiBfY2hlY2tfZG9jc3RyaW5nKHNlbGYsIG5vZGVfdHlwZSwgbm9kZSk6DQogICAgICAgIGRvY3N0cmluZyA9IG5vZGUuZG9jDQogICAgICAgIGlmIGRvY3N0cmluZyBhbmQgZG9jc3RyaW5nWzBdID09ICdcbic6DQogICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKCdkb2NzdHJpbmctZmlyc3QtbGluZS1lbXB0eScsIG5vZGU9bm9kZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncz0obm9kZV90eXBlLCksIGNvbmZpZGVuY2U9SElHSCkNCg0KICAgICAgICAjIFVzZSAibGluZWNhY2hlIiwgaW5zdGVhZCBvZiBub2RlLmFzX3N0cmluZygpLCBiZWNhdXNlIHRoZSBsYXR0ZXINCiAgICAgICAgIyBsb29zZXMgdGhlIG9yaWdpbmFsIGZvcm0gb2YgdGhlIGRvY3N0cmluZ3MuDQoNCiAgICAgICAgaWYgZG9jc3RyaW5nOg0KICAgICAgICAgICAgbGluZW5vID0gbm9kZS5mcm9tbGluZW5vICsgMQ0KICAgICAgICAgICAgbGluZSA9IGxpbmVjYWNoZS5nZXRsaW5lKG5vZGUucm9vdCgpLmZpbGUsIGxpbmVubykubHN0cmlwKCkNCiAgICAgICAgICAgIGlmIGxpbmUgYW5kIGxpbmUuZmluZCgnIiIiJykgPT0gMDoNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIGlmIGxpbmUgYW5kICdcJ1wnXCcnIGluIGxpbmU6DQogICAgICAgICAgICAgICAgcXVvdGVzID0gJ1wnXCdcJycNCiAgICAgICAgICAgIGVsaWYgbGluZSBhbmQgbGluZVswXSA9PSAnIic6DQogICAgICAgICAgICAgICAgcXVvdGVzID0gJyInDQogICAgICAgICAgICBlbGlmIGxpbmUgYW5kIGxpbmVbMF0gPT0gJ1wnJzoNCiAgICAgICAgICAgICAgICBxdW90ZXMgPSAnXCcnDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHF1b3RlcyA9IEZhbHNlDQogICAgICAgICAgICBpZiBxdW90ZXM6DQogICAgICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnYmFkLWRvY3N0cmluZy1xdW90ZXMnLCBub2RlPW5vZGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzPShub2RlX3R5cGUsIHF1b3RlcyksIGNvbmZpZGVuY2U9SElHSCkNCg0KDQpkZWYgcmVnaXN0ZXIobGludGVyKToNCiAgICAiIiJSZXF1aXJlZCBtZXRob2QgdG8gYXV0byByZWdpc3RlciB0aGlzIGNoZWNrZXIuDQoNCiAgICA6cGFyYW0gbGludGVyOiBNYWluIGludGVyZmFjZSBvYmplY3QgZm9yIFB5bGludCBwbHVnaW5zDQogICAgOnR5cGUgbGludGVyOiBQeWxpbnQgb2JqZWN0DQogICAgIiIiDQogICAgbGludGVyLnJlZ2lzdGVyX2NoZWNrZXIoRG9jU3RyaW5nU3R5bGVDaGVja2VyKGxpbnRlcikpDQo="
          },
          "hashes": [
            {
              "value": "1D724D964D33D18D03DCFE705232F15F",
              "algorithm": "md5"
            },
            {
              "value": "8B3DEA2BFD34E8CD2F286FE8D38E3C099DF1C6F9",
              "algorithm": "sha-1"
            },
            {
              "value": "CD6FBA5C9081B9917F4C19DC37E54453E6E30AD67173683FF37FB9B408E418E4",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/emptystring.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDE2IEFsZXhhbmRlciBUb2Rvcm92IDxhdG9kb3JvdkBvdGIuYmc+DQojIENvcHlyaWdodCAoYykgMjAxNyBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQoiIiJMb29rcyBmb3IgIGNvbXBhcmlzb25zIHRvIGVtcHR5IHN0cmluZy4iIiINCg0KaW1wb3J0IGl0ZXJ0b29scw0KDQppbXBvcnQgYXN0cm9pZA0KDQpmcm9tIHB5bGludCBpbXBvcnQgaW50ZXJmYWNlcw0KZnJvbSBweWxpbnQgaW1wb3J0IGNoZWNrZXJzDQpmcm9tIHB5bGludC5jaGVja2VycyBpbXBvcnQgdXRpbHMNCg0KDQpkZWYgX2lzX2NvbnN0YW50X2VtcHR5X3N0cihub2RlKToNCiAgICByZXR1cm4gaXNpbnN0YW5jZShub2RlLCBhc3Ryb2lkLkNvbnN0KSBhbmQgbm9kZS52YWx1ZSA9PSAnJw0KDQoNCmNsYXNzIENvbXBhcmVUb0VtcHR5U3RyaW5nQ2hlY2tlcihjaGVja2Vycy5CYXNlQ2hlY2tlcik6DQogICAgIiIiQ2hlY2tzIGZvciBjb21wYXJpc29ucyB0byBlbXB0eSBzdHJpbmcuDQogICAgTW9zdCBvZiB0aGUgdGltZXMgeW91IHNob3VsZCB1c2UgdGhlIGZhY3QgdGhhdCBlbXB0eSBzdHJpbmdzIGFyZSBmYWxzZS4NCiAgICBBbiBleGNlcHRpb24gdG8gdGhpcyBydWxlIGlzIHdoZW4gYW4gZW1wdHkgc3RyaW5nIHZhbHVlIGlzIGFsbG93ZWQgaW4gdGhlIHByb2dyYW0NCiAgICBhbmQgaGFzIGEgZGlmZmVyZW50IG1lYW5pbmcgdGhhbiBOb25lIQ0KICAgICIiIg0KDQogICAgX19pbXBsZW1lbnRzX18gPSAoaW50ZXJmYWNlcy5JQXN0cm9pZENoZWNrZXIsKQ0KDQogICAgIyBjb25maWd1cmF0aW9uIHNlY3Rpb24gbmFtZQ0KICAgIG5hbWUgPSAnY29tcGFyZS10by1lbXB0eS1zdHJpbmcnDQogICAgbXNncyA9IHsnQzE5MDEnOiAoJ0F2b2lkIGNvbXBhcmlzb25zIHRvIGVtcHR5IHN0cmluZycsDQogICAgICAgICAgICAgICAgICAgICAgJ2NvbXBhcmUtdG8tZW1wdHktc3RyaW5nJywNCiAgICAgICAgICAgICAgICAgICAgICAnVXNlZCB3aGVuIFB5bGludCBkZXRlY3RzIGNvbXBhcmlzb24gdG8gYW4gZW1wdHkgc3RyaW5nIGNvbnN0YW50LicpLA0KICAgICAgICAgICB9DQoNCiAgICBwcmlvcml0eSA9IC0yDQogICAgb3B0aW9ucyA9ICgpDQoNCiAgICBAdXRpbHMuY2hlY2tfbWVzc2FnZXMoJ2NvbXBhcmUtdG8tZW1wdHktc3RyaW5nJykNCiAgICBkZWYgdmlzaXRfY29tcGFyZShzZWxmLCBub2RlKToNCiAgICAgICAgX29wZXJhdG9ycyA9IFsnIT0nLCAnPT0nLCAnaXMgbm90JywgJ2lzJ10NCiAgICAgICAgIyBub3RlOiBhc3Ryb2lkLkNvbXBhcmUgaGFzIHRoZSBsZWZ0IG1vc3Qgb3BlcmFuZCBpbiBub2RlLmxlZnQNCiAgICAgICAgIyB3aGlsZSB0aGUgcmVzdCBhcmUgYSBsaXN0IG9mIHR1cGxlcyBpbiBub2RlLm9wcw0KICAgICAgICAjIHRoZSBmb3JtYXQgb2YgdGhlIHR1cGxlIGlzICgnY29tcGFyZSBvcGVyYXRvciBzaWduJywgbm9kZSkNCiAgICAgICAgIyBoZXJlIHdlIHNxdWFzaCBldmVyeXRoaW5nIGludG8gYG9wc2AgdG8gbWFrZSBpdCBlYXNpZXIgZm9yIHByb2Nlc3NpbmcgbGF0ZXINCiAgICAgICAgb3BzID0gWygnJywgbm9kZS5sZWZ0KV0NCiAgICAgICAgb3BzLmV4dGVuZChub2RlLm9wcykNCiAgICAgICAgb3BzID0gbGlzdChpdGVydG9vbHMuY2hhaW4oKm9wcykpDQoNCiAgICAgICAgZm9yIG9wc19pZHggaW4gcmFuZ2UobGVuKG9wcykgLSAyKToNCiAgICAgICAgICAgIG9wXzEgPSBvcHNbb3BzX2lkeF0NCiAgICAgICAgICAgIG9wXzIgPSBvcHNbb3BzX2lkeCArIDFdDQogICAgICAgICAgICBvcF8zID0gb3BzW29wc19pZHggKyAyXQ0KICAgICAgICAgICAgZXJyb3JfZGV0ZWN0ZWQgPSBGYWxzZQ0KDQogICAgICAgICAgICAjIHggPz8gIiINCiAgICAgICAgICAgIGlmIF9pc19jb25zdGFudF9lbXB0eV9zdHIob3BfMSkgYW5kIG9wXzIgaW4gX29wZXJhdG9yczoNCiAgICAgICAgICAgICAgICBlcnJvcl9kZXRlY3RlZCA9IFRydWUNCiAgICAgICAgICAgICMgJycgPz8gWA0KICAgICAgICAgICAgZWxpZiBvcF8yIGluIF9vcGVyYXRvcnMgYW5kIF9pc19jb25zdGFudF9lbXB0eV9zdHIob3BfMyk6DQogICAgICAgICAgICAgICAgZXJyb3JfZGV0ZWN0ZWQgPSBUcnVlDQoNCiAgICAgICAgICAgIGlmIGVycm9yX2RldGVjdGVkOg0KICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ2NvbXBhcmUtdG8tZW1wdHktc3RyaW5nJywgbm9kZT1ub2RlKQ0KDQoNCmRlZiByZWdpc3RlcihsaW50ZXIpOg0KICAgICIiIlJlcXVpcmVkIG1ldGhvZCB0byBhdXRvIHJlZ2lzdGVyIHRoaXMgY2hlY2tlci4iIiINCiAgICBsaW50ZXIucmVnaXN0ZXJfY2hlY2tlcihDb21wYXJlVG9FbXB0eVN0cmluZ0NoZWNrZXIobGludGVyKSkNCg=="
          },
          "hashes": [
            {
              "value": "33BDBD7803B052F54D3AD95E8FEA4157",
              "algorithm": "md5"
            },
            {
              "value": "48560A5119E6F229C894D40685CAA350609915AD",
              "algorithm": "sha-1"
            },
            {
              "value": "567404B0005C7A444BDCB88A05F707CEF791595C64BAD44CA4C722011C48186D",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/mccabe.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "6936E1B9B3118D0171F8D9C7FC9FE0BC",
              "algorithm": "md5"
            },
            {
              "value": "847BCF7FB4B418775DF41C5FC1F693D0947EAE7A",
              "algorithm": "sha-1"
            },
            {
              "value": "3DFB6182F4F6B28D9436437F6C6F11B7DE60C3629839FD63F415ED62DE9D837E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/overlapping_exceptions.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQoiIiJMb29rcyBmb3Igb3ZlcmxhcHBpbmcgZXhjZXB0aW9ucy4iIiINCg0KaW1wb3J0IGFzdHJvaWQNCg0KZnJvbSBweWxpbnQgaW1wb3J0IGludGVyZmFjZXMNCmZyb20gcHlsaW50IGltcG9ydCBjaGVja2Vycw0KZnJvbSBweWxpbnQuY2hlY2tlcnMgaW1wb3J0IHV0aWxzDQoNCmZyb20gcHlsaW50LmNoZWNrZXJzLmV4Y2VwdGlvbnMgaW1wb3J0IF9hbm5vdGF0ZWRfdW5wYWNrX2luZmVyDQoNCg0KY2xhc3MgT3ZlcmxhcHBpbmdFeGNlcHRpb25zQ2hlY2tlcihjaGVja2Vycy5CYXNlQ2hlY2tlcik6DQogICAgIiIiQ2hlY2tzIGZvciB0d28gb3IgbW9yZSBleGNlcHRpb25zIGluIHRoZSBzYW1lIGV4Y2VwdGlvbiBoYW5kbGVyDQogICAgY2xhdXNlIHRoYXQgYXJlIGlkZW50aWNhbCBvciBwYXJ0cyBvZiB0aGUgc2FtZSBpbmhlcml0YW5jZSBoaWVyYXJjaHkNCiAgICAoaS5lLiBvdmVybGFwcGluZykuIiIiDQoNCiAgICBfX2ltcGxlbWVudHNfXyA9IGludGVyZmFjZXMuSUFzdHJvaWRDaGVja2VyDQoNCiAgICBuYW1lID0gJ292ZXJsYXAtZXhjZXB0Jw0KICAgIG1zZ3MgPSB7J1cwNzE0JzogKCdPdmVybGFwcGluZyBleGNlcHRpb25zICglcyknLA0KICAgICAgICAgICAgICAgICAgICAgICdvdmVybGFwcGluZy1leGNlcHQnLA0KICAgICAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gZXhjZXB0aW9ucyBpbiBoYW5kbGVyIG92ZXJsYXAgb3IgYXJlIGlkZW50aWNhbCcpfQ0KICAgIHByaW9yaXR5ID0gLTINCiAgICBvcHRpb25zID0gKCkNCg0KICAgIEB1dGlscy5jaGVja19tZXNzYWdlcygnb3ZlcmxhcHBpbmctZXhjZXB0JykNCiAgICBkZWYgdmlzaXRfdHJ5ZXhjZXB0KHNlbGYsIG5vZGUpOg0KICAgICAgICAiIiJjaGVjayBmb3IgZW1wdHkgZXhjZXB0IiIiDQogICAgICAgIGZvciBoYW5kbGVyIGluIG5vZGUuaGFuZGxlcnM6DQogICAgICAgICAgICBpZiBoYW5kbGVyLnR5cGUgaXMgTm9uZToNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShoYW5kbGVyLnR5cGUsIGFzdHJvaWQuQm9vbE9wKToNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGV4Y3MgPSBsaXN0KF9hbm5vdGF0ZWRfdW5wYWNrX2luZmVyKGhhbmRsZXIudHlwZSkpDQogICAgICAgICAgICBleGNlcHQgYXN0cm9pZC5JbmZlcmVuY2VFcnJvcjoNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgICAgICBoYW5kbGVkX2luX2NsYXVzZSA9IFtdDQogICAgICAgICAgICBmb3IgcGFydCwgZXhjIGluIGV4Y3M6DQogICAgICAgICAgICAgICAgaWYgZXhjIGlzIGFzdHJvaWQuVW5pbmZlcmFibGU6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgaWYgKGlzaW5zdGFuY2UoZXhjLCBhc3Ryb2lkLkluc3RhbmNlKSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmluaGVyaXRfZnJvbV9zdGRfZXgoZXhjKSk6DQogICAgICAgICAgICAgICAgICAgICMgcHlsaW50OiBkaXNhYmxlPXByb3RlY3RlZC1hY2Nlc3MNCiAgICAgICAgICAgICAgICAgICAgZXhjID0gZXhjLl9wcm94aWVkDQoNCiAgICAgICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShleGMsIGFzdHJvaWQuQ2xhc3NEZWYpOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgICAgICAgICAgZXhjX2FuY2VzdG9ycyA9IFthbmMgZm9yIGFuYyBpbiBleGMuYW5jZXN0b3JzKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoYW5jLCBhc3Ryb2lkLkNsYXNzRGVmKV0NCg0KICAgICAgICAgICAgICAgIGZvciBwcmV2X3BhcnQsIHByZXZfZXhjIGluIGhhbmRsZWRfaW5fY2xhdXNlOg0KICAgICAgICAgICAgICAgICAgICBwcmV2X2V4Y19hbmNlc3RvcnMgPSBbYW5jIGZvciBhbmMgaW4gcHJldl9leGMuYW5jZXN0b3JzKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoYW5jLCBhc3Ryb2lkLkNsYXNzRGVmKV0NCiAgICAgICAgICAgICAgICAgICAgaWYgZXhjID09IHByZXZfZXhjOg0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRfbWVzc2FnZSgnb3ZlcmxhcHBpbmctZXhjZXB0JywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZT1oYW5kbGVyLnR5cGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M9JyVzIGFuZCAlcyBhcmUgdGhlIHNhbWUnICUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByZXZfcGFydC5hc19zdHJpbmcoKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQuYXNfc3RyaW5nKCkpKQ0KICAgICAgICAgICAgICAgICAgICBlbGlmIChwcmV2X2V4YyBpbiBleGNfYW5jZXN0b3JzIG9yDQogICAgICAgICAgICAgICAgICAgICAgICAgIGV4YyBpbiBwcmV2X2V4Y19hbmNlc3RvcnMpOg0KICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IgPSBwYXJ0IGlmIGV4YyBpbiBwcmV2X2V4Y19hbmNlc3RvcnMgZWxzZSBwcmV2X3BhcnQNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NlbmRhbnQgPSBwYXJ0IGlmIHByZXZfZXhjIGluIGV4Y19hbmNlc3RvcnMgZWxzZSBwcmV2X3BhcnQNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkX21lc3NhZ2UoJ292ZXJsYXBwaW5nLWV4Y2VwdCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU9aGFuZGxlci50eXBlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzPSclcyBpcyBhbiBhbmNlc3RvciBjbGFzcyBvZiAlcycgJQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYW5jZXN0b3IuYXNfc3RyaW5nKCksIGRlc2NlbmRhbnQuYXNfc3RyaW5nKCkpKQ0KICAgICAgICAgICAgICAgIGhhbmRsZWRfaW5fY2xhdXNlICs9IFsocGFydCwgZXhjKV0NCg0KDQpkZWYgcmVnaXN0ZXIobGludGVyKToNCiAgICAiIiJSZXF1aXJlZCBtZXRob2QgdG8gYXV0byByZWdpc3RlciB0aGlzIGNoZWNrZXIuIiIiDQogICAgbGludGVyLnJlZ2lzdGVyX2NoZWNrZXIoT3ZlcmxhcHBpbmdFeGNlcHRpb25zQ2hlY2tlcihsaW50ZXIpKQ0K"
          },
          "hashes": [
            {
              "value": "4C6DDAFC99AC2126F6F300979BDBC0F9",
              "algorithm": "md5"
            },
            {
              "value": "7BECD3AC4BFFAC1CF929BD901AE041BC2249DC1D",
              "algorithm": "sha-1"
            },
            {
              "value": "10CF9B3DE96E9F1BD5024216C41FC1224ADB0FFD7ED61EA2EC6CCD21D8BD13B8",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/redefined_variable_type.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDE2LTIwMTcgQ2xhdWRpdSBQb3BhIDxwY21hbnRpY29yZUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNiBHbGVubiBNYXR0aGV3cyA8Z2xtYXR0aGVAY2lzY28uY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggU3VzaG9iaGl0IDwzMTk4Nzc2OStzdXNob2JoaXQyN0B1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBWaWxsZSBTa3l0dMOkIDx2aWxsZS5za3l0dGFAdXBjbG91ZC5jb20+DQoNCiMgTGljZW5zZWQgdW5kZXIgdGhlIEdQTDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvZ3BsLTIuMC5odG1sDQojIEZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vUHlDUUEvcHlsaW50L2Jsb2IvbWFzdGVyL0NPUFlJTkcNCg0KaW1wb3J0IGFzdHJvaWQNCmZyb20gcHlsaW50LmNoZWNrZXJzIGltcG9ydCBCYXNlQ2hlY2tlcg0KZnJvbSBweWxpbnQuY2hlY2tlcnMudXRpbHMgaW1wb3J0IGNoZWNrX21lc3NhZ2VzLCBpc19ub25lLCBub2RlX3R5cGUNCmZyb20gcHlsaW50LmludGVyZmFjZXMgaW1wb3J0IElBc3Ryb2lkQ2hlY2tlcg0KDQoNCkJVSUxUSU5TID0gJ2J1aWx0aW5zJw0KDQoNCmNsYXNzIE11bHRpcGxlVHlwZXNDaGVja2VyKEJhc2VDaGVja2VyKToNCiAgICAiIiJDaGVja3MgZm9yIHZhcmlhYmxlIHR5cGUgcmVkZWZpbml0aW9ucyAoTm9uZVR5cGUgZXhjZXB0ZWQpDQoNCiAgICBBdCBhIGZ1bmN0aW9uLCBtZXRob2QsIGNsYXNzIG9yIG1vZHVsZSBzY29wZQ0KDQogICAgVGhpcyBydWxlIGNvdWxkIGJlIGltcHJvdmVkOg0KDQogICAgLSBDdXJyZW50bHksIGlmIGFuIGF0dHJpYnV0ZSBpcyBzZXQgdG8gZGlmZmVyZW50IHR5cGVzIGluIDIgbWV0aG9kcyBvZiBhDQogICAgICBzYW1lIGNsYXNzLCBpdCB3b24ndCBiZSBkZXRlY3RlZCAoc2VlIGZ1bmN0aW9uYWwgdGVzdCkNCiAgICAtIE9uZSBjb3VsZCBpbXByb3ZlIHRoZSBzdXBwb3J0IGZvciBpbmZlcmVuY2Ugb24gYXNzaWdubWVudCB3aXRoIHR1cGxlcywNCiAgICAgIGlmZXhwciwgZXRjLiBBbHNvIGl0IHdvdWxkIGJlIGdyZWF0IHRvIGhhdmUgc3VwcG9ydCBmb3IgaW5mZXJlbmNlIG9uDQogICAgICBzdHIuc3BsaXQoKQ0KICAgICIiIg0KICAgIF9faW1wbGVtZW50c19fID0gSUFzdHJvaWRDaGVja2VyDQoNCiAgICBuYW1lID0gJ211bHRpcGxlX3R5cGVzJw0KICAgIG1zZ3MgPSB7J1IwMjA0JzogKCdSZWRlZmluaXRpb24gb2YgJXMgdHlwZSBmcm9tICVzIHRvICVzJywNCiAgICAgICAgICAgICAgICAgICAgICAncmVkZWZpbmVkLXZhcmlhYmxlLXR5cGUnLA0KICAgICAgICAgICAgICAgICAgICAgICdVc2VkIHdoZW4gdGhlIHR5cGUgb2YgYSB2YXJpYWJsZSBjaGFuZ2VzIGluc2lkZSBhICcNCiAgICAgICAgICAgICAgICAgICAgICAnbWV0aG9kIG9yIGEgZnVuY3Rpb24uJw0KICAgICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgfQ0KDQogICAgZGVmIHZpc2l0X2NsYXNzZGVmKHNlbGYsIF8pOg0KICAgICAgICBzZWxmLl9hc3NpZ25zLmFwcGVuZCh7fSkNCg0KICAgIEBjaGVja19tZXNzYWdlcygncmVkZWZpbmVkLXZhcmlhYmxlLXR5cGUnKQ0KICAgIGRlZiBsZWF2ZV9jbGFzc2RlZihzZWxmLCBfKToNCiAgICAgICAgc2VsZi5fY2hlY2tfYW5kX2FkZF9tZXNzYWdlcygpDQoNCiAgICB2aXNpdF9mdW5jdGlvbmRlZiA9IHZpc2l0X2NsYXNzZGVmDQogICAgbGVhdmVfZnVuY3Rpb25kZWYgPSBsZWF2ZV9tb2R1bGUgPSBsZWF2ZV9jbGFzc2RlZg0KDQogICAgZGVmIHZpc2l0X21vZHVsZShzZWxmLCBfKToNCiAgICAgICAgc2VsZi5fYXNzaWducyA9IFt7fV0NCg0KICAgIGRlZiBfY2hlY2tfYW5kX2FkZF9tZXNzYWdlcyhzZWxmKToNCiAgICAgICAgYXNzaWducyA9IHNlbGYuX2Fzc2lnbnMucG9wKCkNCiAgICAgICAgZm9yIG5hbWUsIGFyZ3MgaW4gYXNzaWducy5pdGVtcygpOg0KICAgICAgICAgICAgaWYgbGVuKGFyZ3MpIDw9IDE6DQogICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIG9yaWdfbm9kZSwgb3JpZ190eXBlID0gYXJnc1swXQ0KICAgICAgICAgICAgIyBDaGVjayBpZiB0aGVyZSBpcyBhIHR5cGUgaW4gdGhlIGZvbGxvd2luZyBub2RlcyB0aGF0IHdvdWxkIGJlDQogICAgICAgICAgICAjIGRpZmZlcmVudCBmcm9tIG9yaWdfdHlwZS4NCiAgICAgICAgICAgIGZvciByZWRlZl9ub2RlLCByZWRlZl90eXBlIGluIGFyZ3NbMTpdOg0KICAgICAgICAgICAgICAgIGlmIHJlZGVmX3R5cGUgPT0gb3JpZ190eXBlOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgICMgaWYgYSB2YXJpYWJsZSBpcyBkZWZpbmVkIHRvIHNldmVyYWwgdHlwZXMgaW4gYW4gaWYgbm9kZSwNCiAgICAgICAgICAgICAgICAjIHRoaXMgaXMgbm90IGFjdHVhbGx5IHJlZGVmaW5pbmcuDQogICAgICAgICAgICAgICAgb3JpZ19wYXJlbnQgPSBvcmlnX25vZGUucGFyZW50DQogICAgICAgICAgICAgICAgcmVkZWZfcGFyZW50ID0gcmVkZWZfbm9kZS5wYXJlbnQNCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKG9yaWdfcGFyZW50LCBhc3Ryb2lkLklmKToNCiAgICAgICAgICAgICAgICAgICAgaWYgb3JpZ19wYXJlbnQgPT0gcmVkZWZfcGFyZW50Og0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZGVmX25vZGUgaW4gb3JpZ19wYXJlbnQub3JlbHNlIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnX25vZGUgbm90IGluIG9yaWdfcGFyZW50Lm9yZWxzZSk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ19ub2RlLCBvcmlnX3R5cGUgPSByZWRlZl9ub2RlLCByZWRlZl90eXBlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgZWxpZiAoaXNpbnN0YW5jZShyZWRlZl9wYXJlbnQsIGFzdHJvaWQuSWYpIGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICByZWRlZl9wYXJlbnQgaW4gb3JpZ19wYXJlbnQubm9kZXNfb2ZfY2xhc3MoYXN0cm9pZC5JZikpOg0KICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ19ub2RlLCBvcmlnX3R5cGUgPSByZWRlZl9ub2RlLCByZWRlZl90eXBlDQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgIG9yaWdfdHlwZSA9IG9yaWdfdHlwZS5yZXBsYWNlKEJVSUxUSU5TICsgIi4iLCAnJykNCiAgICAgICAgICAgICAgICByZWRlZl90eXBlID0gcmVkZWZfdHlwZS5yZXBsYWNlKEJVSUxUSU5TICsgIi4iLCAnJykNCiAgICAgICAgICAgICAgICBzZWxmLmFkZF9tZXNzYWdlKCdyZWRlZmluZWQtdmFyaWFibGUtdHlwZScsIG5vZGU9cmVkZWZfbm9kZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M9KG5hbWUsIG9yaWdfdHlwZSwgcmVkZWZfdHlwZSkpDQogICAgICAgICAgICAgICAgYnJlYWsNCg0KICAgIGRlZiB2aXNpdF9hc3NpZ24oc2VsZiwgbm9kZSk6DQogICAgICAgICMgd2UgZG9uJ3QgaGFuZGxlIG11bHRpcGxlIGFzc2lnbm1lbnQgbm9yIHNsaWNlIGFzc2lnbm1lbnQNCiAgICAgICAgdGFyZ2V0ID0gbm9kZS50YXJnZXRzWzBdDQogICAgICAgIGlmIGlzaW5zdGFuY2UodGFyZ2V0LCAoYXN0cm9pZC5UdXBsZSwgYXN0cm9pZC5TdWJzY3JpcHQpKToNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICAjIGlnbm9yZSBOb25lVHlwZQ0KICAgICAgICBpZiBpc19ub25lKG5vZGUpOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIF90eXBlID0gbm9kZV90eXBlKG5vZGUudmFsdWUpDQogICAgICAgIGlmIF90eXBlOg0KICAgICAgICAgICAgc2VsZi5fYXNzaWduc1stMV0uc2V0ZGVmYXVsdCh0YXJnZXQuYXNfc3RyaW5nKCksIFtdKS5hcHBlbmQoDQogICAgICAgICAgICAgICAgKG5vZGUsIF90eXBlLnB5dHlwZSgpKSkNCg0KDQpkZWYgcmVnaXN0ZXIobGludGVyKToNCiAgICAiIiJSZXF1aXJlZCBtZXRob2QgdG8gYXV0byByZWdpc3RlciB0aGlzIGNoZWNrZXIuDQoNCiAgICA6cGFyYW0gbGludGVyOiBNYWluIGludGVyZmFjZSBvYmplY3QgZm9yIFB5bGludCBwbHVnaW5zDQogICAgOnR5cGUgbGludGVyOiBQeWxpbnQgb2JqZWN0DQogICAgIiIiDQogICAgbGludGVyLnJlZ2lzdGVyX2NoZWNrZXIoTXVsdGlwbGVUeXBlc0NoZWNrZXIobGludGVyKSkNCg=="
          },
          "hashes": [
            {
              "value": "08F48A20CD8A285487A0562129C46751",
              "algorithm": "md5"
            },
            {
              "value": "DC92A8F5018C7384471D47E0255807DCF870E7B7",
              "algorithm": "sha-1"
            },
            {
              "value": "2F01D92C1A62F7BDD4DD8ED4E52F374ADB346F4458763849410ED5699B5FCE77",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/extensions/_check_docs_utils.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "7A8AFA570F23303372599F88B57395E4",
              "algorithm": "md5"
            },
            {
              "value": "6903937E26CBDD07C6DA2EB79EF39EBDD1785313",
              "algorithm": "sha-1"
            },
            {
              "value": "54711CD30B3A9551271C9CDFF2DDB1B2ED82FAF2483255F970FBD98D92F89F8F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/pyreverse/diadefslib.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "BE4915AF37B73A3A89CBB47FE899DFEA",
              "algorithm": "md5"
            },
            {
              "value": "0CA69F9D01E457AC4E10F1C4E9DDC69BB0CD9E9A",
              "algorithm": "sha-1"
            },
            {
              "value": "752A937E8804529BD16C01A944DDF7473386C3D4AE824C2BDCA199B867A4EDFD",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/pyreverse/diagrams.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "E6A818B4BC7AFBBE5558DBDBC88DBB1F",
              "algorithm": "md5"
            },
            {
              "value": "2A08476AEC39CA0B5B1E7B88BFACEFA11E2625CA",
              "algorithm": "sha-1"
            },
            {
              "value": "B8FE72D3AEB4B2B3986EB50C93BDDB24B9D3AF0810BAB1538CDCCE124CA9C9FF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/pyreverse/inspector.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "A2F282DF01406F6E9D1D7DDCBC1ED9F3",
              "algorithm": "md5"
            },
            {
              "value": "43087606797CA13AF6D0621FF272823C90DEB02A",
              "algorithm": "sha-1"
            },
            {
              "value": "92C35833BAC702970D4495DFC8DE7F948880C6706B19493FFDB5EBA04110FE60",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/pyreverse/main.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCwgMjAxMi0yMDE0IExPR0lMQUIgUy5BLiAoUGFyaXMsIEZSQU5DRSkgPGNvbnRhY3RAbG9naWxhYi5mcj4NCiMgQ29weXJpZ2h0IChjKSAyMDE0IEJyZXR0IENhbm5vbiA8YnJldHRAcHl0aG9uLm9yZz4NCiMgQ29weXJpZ2h0IChjKSAyMDE0IEFydW4gUGVyc2F1ZCA8YXJ1bkBudWJhdGkubmV0Pg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxOCBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IElvbmVsIENyaXN0aWFuIE1hcmllcyA8Y29udGFjdEBpb25lbG1jLnJvPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTYgQWxleGFuZGVyIFBlcnZha292IDxmcm9zdC5uemNyNEBqYWdtb3J0LmNvbT4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQoiIiINCiAgJXByb2cgW29wdGlvbnNdIDxwYWNrYWdlcz4NCg0KICBjcmVhdGUgVU1MIGRpYWdyYW1zIGZvciBjbGFzc2VzIGFuZCBtb2R1bGVzIGluIDxwYWNrYWdlcz4NCiIiIg0KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBwcmludF9mdW5jdGlvbg0KDQppbXBvcnQgb3MNCmltcG9ydCBzdWJwcm9jZXNzDQppbXBvcnQgc3lzDQoNCmZyb20gcHlsaW50LmNvbmZpZyBpbXBvcnQgQ29uZmlndXJhdGlvbk1peEluDQpmcm9tIHB5bGludC5weXJldmVyc2UuaW5zcGVjdG9yIGltcG9ydCBMaW5rZXIsIHByb2plY3RfZnJvbV9maWxlcw0KZnJvbSBweWxpbnQucHlyZXZlcnNlLmRpYWRlZnNsaWIgaW1wb3J0IERpYWRlZnNIYW5kbGVyDQpmcm9tIHB5bGludC5weXJldmVyc2UgaW1wb3J0IHdyaXRlcg0KZnJvbSBweWxpbnQucHlyZXZlcnNlLnV0aWxzIGltcG9ydCBpbnNlcnRfZGVmYXVsdF9vcHRpb25zDQoNCk9QVElPTlMgPSAoDQogICAgKCJmaWx0ZXItbW9kZSIsDQogICAgIGRpY3Qoc2hvcnQ9J2YnLCBkZWZhdWx0PSdQVUJfT05MWScsIGRlc3Q9J21vZGUnLCB0eXBlPSdzdHJpbmcnLA0KICAgICAgICAgIGFjdGlvbj0nc3RvcmUnLCBtZXRhdmFyPSc8bW9kZT4nLA0KICAgICAgICAgIGhlbHA9IiIiZmlsdGVyIGF0dHJpYnV0ZXMgYW5kIGZ1bmN0aW9ucyBhY2NvcmRpbmcgdG8NCiAgICA8bW9kZT4uIENvcnJlY3QgbW9kZXMgYXJlIDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUFVCX09OTFknIGZpbHRlciBhbGwgbm9uIHB1YmxpYyBhdHRyaWJ1dGVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtERUZBVUxUXSwgZXF1aXZhbGVudCB0byBQUklWQVRFK1NQRUNJQUxfQQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBTEwnIG5vIGZpbHRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTUEVDSUFMJyBmaWx0ZXIgUHl0aG9uIHNwZWNpYWwgZnVuY3Rpb25zDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBjb25zdHJ1Y3Rvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPVEhFUicgZmlsdGVyIHByb3RlY3RlZCBhbmQgcHJpdmF0ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzIiIiKSksDQoNCiAgICAoImNsYXNzIiwNCiAgICAgZGljdChzaG9ydD0nYycsIGFjdGlvbj0iYXBwZW5kIiwgbWV0YXZhcj0iPGNsYXNzPiIsIGRlc3Q9ImNsYXNzZXMiLCBkZWZhdWx0PVtdLA0KICAgICAgICAgIGhlbHA9ImNyZWF0ZSBhIGNsYXNzIGRpYWdyYW0gd2l0aCBhbGwgY2xhc3NlcyByZWxhdGVkIHRvIDxjbGFzcz47XA0KIHRoaXMgdXNlcyBieSBkZWZhdWx0IHRoZSBvcHRpb25zIC1BU215IikpLA0KDQogICAgKCJzaG93LWFuY2VzdG9ycyIsDQogICAgIGRpY3Qoc2hvcnQ9ImEiLCBhY3Rpb249InN0b3JlIiwgbWV0YXZhcj0nPGFuY2VzdG9yPicsIHR5cGU9J2ludCcsDQogICAgICAgICAgaGVscD0nc2hvdyA8YW5jZXN0b3I+IGdlbmVyYXRpb25zIG9mIGFuY2VzdG9yIGNsYXNzZXMgbm90IGluIDxwcm9qZWN0cz4nKSksDQogICAgKCJhbGwtYW5jZXN0b3JzIiwNCiAgICAgZGljdChzaG9ydD0iQSIsIGRlZmF1bHQ9Tm9uZSwNCiAgICAgICAgICBoZWxwPSJzaG93IGFsbCBhbmNlc3RvcnMgb2ZmIGFsbCBjbGFzc2VzIGluIDxwcm9qZWN0cz4iKSksDQogICAgKCJzaG93LWFzc29jaWF0ZWQiLA0KICAgICBkaWN0KHNob3J0PSdzJywgYWN0aW9uPSJzdG9yZSIsIG1ldGF2YXI9Jzxhc3NfbGV2ZWw+JywgdHlwZT0naW50JywNCiAgICAgICAgICBoZWxwPSdzaG93IDxhc3NfbGV2ZWw+IGxldmVscyBvZiBhc3NvY2lhdGVkIGNsYXNzZXMgbm90IGluIDxwcm9qZWN0cz4nKSksDQogICAgKCJhbGwtYXNzb2NpYXRlZCIsDQogICAgIGRpY3Qoc2hvcnQ9J1MnLCBkZWZhdWx0PU5vbmUsDQogICAgICAgICAgaGVscD0nc2hvdyByZWN1cnNpdmVseSBhbGwgYXNzb2NpYXRlZCBvZmYgYWxsIGFzc29jaWF0ZWQgY2xhc3NlcycpKSwNCiAgICAoInNob3ctYnVpbHRpbiIsDQogICAgIGRpY3Qoc2hvcnQ9ImIiLCBhY3Rpb249InN0b3JlX3RydWUiLCBkZWZhdWx0PUZhbHNlLA0KICAgICAgICAgIGhlbHA9J2luY2x1ZGUgYnVpbHRpbiBvYmplY3RzIGluIHJlcHJlc2VudGF0aW9uIG9mIGNsYXNzZXMnKSksDQoNCiAgICAoIm1vZHVsZS1uYW1lcyIsDQogICAgIGRpY3Qoc2hvcnQ9Im0iLCBkZWZhdWx0PU5vbmUsIHR5cGU9J3luJywgbWV0YXZhcj0nW3luXScsDQogICAgICAgICAgaGVscD0naW5jbHVkZSBtb2R1bGUgbmFtZSBpbiByZXByZXNlbnRhdGlvbiBvZiBjbGFzc2VzJykpLA0KICAgICMgVE9ETyA6IGdlbmVyYXRlIGRlcGVuZGVuY2llcyBsaWtlIGluIHB5bGludA0KICAgICMgKCJwYWNrYWdlLWRlcGVuZGVuY2llcyIsDQogICAgIyBkaWN0KHNob3J0PSJNIiwgYWN0aW9uPSJzdG9yZSIsIG1ldGF2YXI9JzxwYWNrYWdlX2RlcHRoPicsIHR5cGU9J2ludCcsDQogICAgIyAgICAgaGVscD0nc2hvdyA8cGFja2FnZV9kZXB0aD4gbW9kdWxlIGRlcGVuZGVuY2llcyBiZXlvbmQgbW9kdWxlcyBpbiBcDQogICAgIyA8cHJvamVjdHM+IChmb3IgdGhlIHBhY2thZ2UgZGlhZ3JhbSknKSksDQogICAgKCJvbmx5LWNsYXNzbmFtZXMiLA0KICAgICBkaWN0KHNob3J0PSdrJywgYWN0aW9uPSJzdG9yZV90cnVlIiwgZGVmYXVsdD1GYWxzZSwNCiAgICAgICAgICBoZWxwPSJkb24ndCBzaG93IGF0dHJpYnV0ZXMgYW5kIG1ldGhvZHMgaW4gdGhlIGNsYXNzIGJveGVzOyBcDQp0aGlzIGRpc2FibGVzIC1mIHZhbHVlcyIpKSwNCiAgICAoIm91dHB1dCIsIGRpY3Qoc2hvcnQ9Im8iLCBkZXN0PSJvdXRwdXRfZm9ybWF0IiwgYWN0aW9uPSJzdG9yZSIsDQogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ9ImRvdCIsIG1ldGF2YXI9Ijxmb3JtYXQ+IiwNCiAgICAgICAgICAgICAgICAgICAgaGVscD0iY3JlYXRlIGEgKi48Zm9ybWF0PiBvdXRwdXQgZmlsZSBpZiBmb3JtYXQgYXZhaWxhYmxlLiIpKSwNCiAgICAoImlnbm9yZSIsIHsndHlwZScgOiAiY3N2IiwgJ21ldGF2YXInIDogIjxmaWxlWyxmaWxlLi4uXT4iLA0KICAgICAgICAgICAgICAgICdkZXN0JyA6ICJibGFja19saXN0IiwgImRlZmF1bHQiIDogKCdDVlMnLCksDQogICAgICAgICAgICAgICAgJ2hlbHAnIDogIkFkZCBmaWxlcyBvciBkaXJlY3RvcmllcyB0byB0aGUgYmxhY2tsaXN0LiBUaGV5ICINCiAgICAgICAgICAgICAgICAgICAgICAgICAic2hvdWxkIGJlIGJhc2UgbmFtZXMsIG5vdCBwYXRocy4ifSksDQogICAgKCJwcm9qZWN0IiwgeydkZWZhdWx0JzogIiIsICd0eXBlJyA6ICdzdHJpbmcnLCAnc2hvcnQnOiAncCcsDQogICAgICAgICAgICAgICAgICdtZXRhdmFyJzogJzxwcm9qZWN0IG5hbWU+JywgJ2hlbHAnOiAnc2V0IHRoZSBwcm9qZWN0IG5hbWUuJ30pLA0KKQ0KDQoNCmRlZiBfY2hlY2tfZ3JhcGh2aXpfYXZhaWxhYmxlKG91dHB1dF9mb3JtYXQpOg0KICAgICIiImNoZWNrIGlmIHdlIG5lZWQgZ3JhcGh2aXogZm9yIGRpZmZlcmVudCBvdXRwdXQgZm9ybWF0IiIiDQogICAgdHJ5Og0KICAgICAgICBzdWJwcm9jZXNzLmNhbGwoWydkb3QnLCAnLVYnXSwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUpDQogICAgZXhjZXB0IE9TRXJyb3I6DQogICAgICAgIHByaW50KCJUaGUgb3V0cHV0IGZvcm1hdCAnJXMnIGlzIGN1cnJlbnRseSBub3QgYXZhaWxhYmxlLlxuIg0KICAgICAgICAgICAgICAiUGxlYXNlIGluc3RhbGwgJ0dyYXBodml6JyB0byBoYXZlIG90aGVyIG91dHB1dCBmb3JtYXRzICINCiAgICAgICAgICAgICAgInRoYW4gJ2RvdCcgb3IgJ3ZjZycuIiAlIG91dHB1dF9mb3JtYXQpDQogICAgICAgIHN5cy5leGl0KDMyKQ0KDQoNCg0KY2xhc3MgUnVuKENvbmZpZ3VyYXRpb25NaXhJbik6DQogICAgIiIiYmFzZSBjbGFzcyBwcm92aWRpbmcgY29tbW9uIGJlaGF2aW91ciBmb3IgcHlyZXZlcnNlIGNvbW1hbmRzIiIiDQoNCiAgICBvcHRpb25zID0gT1BUSU9OUw0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFyZ3MpOg0KICAgICAgICBDb25maWd1cmF0aW9uTWl4SW4uX19pbml0X18oc2VsZiwgdXNhZ2U9X19kb2NfXykNCiAgICAgICAgaW5zZXJ0X2RlZmF1bHRfb3B0aW9ucygpDQogICAgICAgIGFyZ3MgPSBzZWxmLmxvYWRfY29tbWFuZF9saW5lX2NvbmZpZ3VyYXRpb24oKQ0KICAgICAgICBpZiBzZWxmLmNvbmZpZy5vdXRwdXRfZm9ybWF0IG5vdCBpbiAoJ2RvdCcsICd2Y2cnKToNCiAgICAgICAgICAgIF9jaGVja19ncmFwaHZpel9hdmFpbGFibGUoc2VsZi5jb25maWcub3V0cHV0X2Zvcm1hdCkNCg0KICAgICAgICBzeXMuZXhpdChzZWxmLnJ1bihhcmdzKSkNCg0KICAgIGRlZiBydW4oc2VsZiwgYXJncyk6DQogICAgICAgICIiImNoZWNraW5nIGFyZ3VtZW50cyBhbmQgcnVuIHByb2plY3QiIiINCiAgICAgICAgaWYgbm90IGFyZ3M6DQogICAgICAgICAgICBwcmludChzZWxmLmhlbHAoKSkNCiAgICAgICAgICAgIHJldHVybiAxDQogICAgICAgICMgaW5zZXJ0IGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgdG8gdGhlIHB5dGhvbiBwYXRoIHRvIHJlY29nbml6ZQ0KICAgICAgICAjIGRlcGVuZGVuY2llcyB0byBsb2NhbCBtb2R1bGVzIGV2ZW4gaWYgY3dkIGlzIG5vdCBpbiB0aGUgUFlUSE9OUEFUSA0KICAgICAgICBzeXMucGF0aC5pbnNlcnQoMCwgb3MuZ2V0Y3dkKCkpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHByb2plY3QgPSBwcm9qZWN0X2Zyb21fZmlsZXMoYXJncywgcHJvamVjdF9uYW1lPXNlbGYuY29uZmlnLnByb2plY3QsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsYWNrX2xpc3Q9c2VsZi5jb25maWcuYmxhY2tfbGlzdCkNCiAgICAgICAgICAgIGxpbmtlciA9IExpbmtlcihwcm9qZWN0LCB0YWc9VHJ1ZSkNCiAgICAgICAgICAgIGhhbmRsZXIgPSBEaWFkZWZzSGFuZGxlcihzZWxmLmNvbmZpZykNCiAgICAgICAgICAgIGRpYWRlZnMgPSBoYW5kbGVyLmdldF9kaWFkZWZzKHByb2plY3QsIGxpbmtlcikNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHN5cy5wYXRoLnBvcCgwKQ0KDQogICAgICAgIGlmIHNlbGYuY29uZmlnLm91dHB1dF9mb3JtYXQgPT0gInZjZyI6DQogICAgICAgICAgICB3cml0ZXIuVkNHV3JpdGVyKHNlbGYuY29uZmlnKS53cml0ZShkaWFkZWZzKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgd3JpdGVyLkRvdFdyaXRlcihzZWxmLmNvbmZpZykud3JpdGUoZGlhZGVmcykNCiAgICAgICAgcmV0dXJuIDANCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIFJ1bihzeXMuYXJndlsxOl0pDQo="
          },
          "hashes": [
            {
              "value": "381A62B6CDAC4B9BCD6222166D5FA5D8",
              "algorithm": "md5"
            },
            {
              "value": "30275E24E20A3462163BD5FEB1E3BDA1EA91A2A1",
              "algorithm": "sha-1"
            },
            {
              "value": "882957578183F3A7315AE1FA08E7034DEF300865A053A6BA545B0A5647C26F81",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/pyreverse/utils.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "31DBC15DE7A81887199DA4A826CEA728",
              "algorithm": "md5"
            },
            {
              "value": "ADCDCCE88DF1405F0AEE0323E13D5B889274DE2E",
              "algorithm": "sha-1"
            },
            {
              "value": "19E4D09627431B2D08EF1D3D4549D7200BB10B2A52DFE90820033C46545C8399",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/pyreverse/writer.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "509797BAF4AC1DB01BFBD57E1A052125",
              "algorithm": "md5"
            },
            {
              "value": "AB629374A10EECA428BA90D8DADA2F42570B9586",
              "algorithm": "sha-1"
            },
            {
              "value": "B623146DAEC2F15A9180C840963A5D66598690EE3F2AE8E595ED796D0FCEDAA1",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/reporters/json.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMTQgVmxhZCBUZW1pYW4gPHZsYWR0ZW1pYW5AZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNyBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IElvbmVsIENyaXN0aWFuIE1hcmllcyA8Y29udGFjdEBpb25lbG1jLnJvPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTcgZ3VpbGxhdW1lMiA8Z3VpbGxhdW1lLnBlaWxsZXhAZ21haWwuY29sPg0KDQojIExpY2Vuc2VkIHVuZGVyIHRoZSBHUEw6IGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2dwbC0yLjAuaHRtbA0KIyBGb3IgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL1B5Q1FBL3B5bGludC9ibG9iL21hc3Rlci9DT1BZSU5HDQoNCiIiIkpTT04gcmVwb3J0ZXIiIiINCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYWJzb2x1dGVfaW1wb3J0LCBwcmludF9mdW5jdGlvbg0KDQppbXBvcnQgY2dpDQppbXBvcnQganNvbg0KaW1wb3J0IHN5cw0KDQpmcm9tIHB5bGludC5pbnRlcmZhY2VzIGltcG9ydCBJUmVwb3J0ZXINCmZyb20gcHlsaW50LnJlcG9ydGVycyBpbXBvcnQgQmFzZVJlcG9ydGVyDQoNCg0KY2xhc3MgSlNPTlJlcG9ydGVyKEJhc2VSZXBvcnRlcik6DQogICAgIiIiUmVwb3J0IG1lc3NhZ2VzIGFuZCBsYXlvdXRzIGluIEpTT04uIiIiDQoNCiAgICBfX2ltcGxlbWVudHNfXyA9IElSZXBvcnRlcg0KICAgIG5hbWUgPSAnanNvbicNCiAgICBleHRlbnNpb24gPSAnanNvbicNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBvdXRwdXQ9c3lzLnN0ZG91dCk6DQogICAgICAgIEJhc2VSZXBvcnRlci5fX2luaXRfXyhzZWxmLCBvdXRwdXQpDQogICAgICAgIHNlbGYubWVzc2FnZXMgPSBbXQ0KDQogICAgZGVmIGhhbmRsZV9tZXNzYWdlKHNlbGYsIG1zZyk6DQogICAgICAgICIiIk1hbmFnZSBtZXNzYWdlIG9mIGRpZmZlcmVudCB0eXBlIGFuZCBpbiB0aGUgY29udGV4dCBvZiBwYXRoLiIiIg0KICAgICAgICBzZWxmLm1lc3NhZ2VzLmFwcGVuZCh7DQogICAgICAgICAgICAndHlwZSc6IG1zZy5jYXRlZ29yeSwNCiAgICAgICAgICAgICdtb2R1bGUnOiBtc2cubW9kdWxlLA0KICAgICAgICAgICAgJ29iaic6IG1zZy5vYmosDQogICAgICAgICAgICAnbGluZSc6IG1zZy5saW5lLA0KICAgICAgICAgICAgJ2NvbHVtbic6IG1zZy5jb2x1bW4sDQogICAgICAgICAgICAncGF0aCc6IG1zZy5wYXRoLA0KICAgICAgICAgICAgJ3N5bWJvbCc6IG1zZy5zeW1ib2wsDQogICAgICAgICAgICAjIHB5bGludDogZGlzYWJsZT1kZXByZWNhdGVkLW1ldGhvZDsgZGVwcmVjYXRlZCBzaW5jZSAzLjIuDQogICAgICAgICAgICAnbWVzc2FnZSc6IGNnaS5lc2NhcGUobXNnLm1zZyBvciAnJyksDQogICAgICAgICAgICAnbWVzc2FnZS1pZCc6IG1zZy5tc2dfaWQsDQogICAgICAgIH0pDQoNCiAgICBkZWYgZGlzcGxheV9tZXNzYWdlcyhzZWxmLCBsYXlvdXQpOg0KICAgICAgICAiIiJMYXVuY2ggbGF5b3V0cyBkaXNwbGF5IiIiDQogICAgICAgIGlmIHNlbGYubWVzc2FnZXM6DQogICAgICAgICAgICBwcmludChqc29uLmR1bXBzKHNlbGYubWVzc2FnZXMsIGluZGVudD00KSwgZmlsZT1zZWxmLm91dCkNCg0KICAgIGRlZiBkaXNwbGF5X3JlcG9ydHMoc2VsZiwgbGF5b3V0KTogIyBweWxpbnQ6IGRpc2FibGU9YXJndW1lbnRzLWRpZmZlcg0KICAgICAgICAiIiJEb24ndCBkbyBub3RoaW5nIGluIHRoaXMgcmVwb3J0ZXIuIiIiDQoNCiAgICBkZWYgX2Rpc3BsYXkoc2VsZiwgbGF5b3V0KToNCiAgICAgICAgIiIiRG9uJ3QgZG8gbm90aGluZy4iIiINCg0KDQpkZWYgcmVnaXN0ZXIobGludGVyKToNCiAgICAiIiJSZWdpc3RlciB0aGUgcmVwb3J0ZXIgY2xhc3NlcyB3aXRoIHRoZSBsaW50ZXIuIiIiDQogICAgbGludGVyLnJlZ2lzdGVyX3JlcG9ydGVyKEpTT05SZXBvcnRlcikNCg=="
          },
          "hashes": [
            {
              "value": "A4168B8ECA327B64FEAE84079845F44B",
              "algorithm": "md5"
            },
            {
              "value": "5F42F2862F9FE7ECDB82EFF6DBC484EAD6A1D277",
              "algorithm": "sha-1"
            },
            {
              "value": "59B31A546301928039318764E4BF66DCED9F1438F8643066295E022DA59E6014",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/reporters/text.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "EDB923745783491187AEF0CACDD1534B",
              "algorithm": "md5"
            },
            {
              "value": "F096B868A4E55791B04AB97EC1D29B7942B41EA2",
              "algorithm": "sha-1"
            },
            {
              "value": "3B6B76530FEBF5354BE47D33C1A7716D4713931399752554FA7A03BFA0F0FF8C",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/reporters/__init__.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgQ29weXJpZ2h0IChjKSAyMDA2LCAyMDEwLCAyMDEyLTIwMTQgTE9HSUxBQiBTLkEuIChQYXJpcywgRlJBTkNFKSA8Y29udGFjdEBsb2dpbGFiLmZyPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBHb29nbGUsIEluYy4NCiMgQ29weXJpZ2h0IChjKSAyMDEyIEZFTEQgQm9yaXMgPGxvdGhpcmFsZGFuQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcgQ2xhdWRpdSBQb3BhIDxwY21hbnRpY29yZUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxNCBCcmV0dCBDYW5ub24gPGJyZXR0QHB5dGhvbi5vcmc+DQojIENvcHlyaWdodCAoYykgMjAxNCBSaWNhcmRvIEdlbWlnbmFuaSA8cmljYXJkby5nZW1pZ25hbmlAZ21haWwuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTQgQXJ1biBQZXJzYXVkIDxhcnVuQG51YmF0aS5uZXQ+DQojIENvcHlyaWdodCAoYykgMjAxNSBTaW11IFRvbmkgPHNpbXV0b25pQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE1IElvbmVsIENyaXN0aWFuIE1hcmllcyA8Y29udGFjdEBpb25lbG1jLnJvPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTcgS8OhcmkgVHJpc3RhbiBIZWxnYXNvbiA8a3RoZWxnYXNvbkBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBzc29sYW5raSA8c3VzaG9iaGl0c29sYW5raUBnbWFpbC5jb20+DQojIENvcHlyaWdodCAoYykgMjAxOCBTdXNob2JoaXQgPDMxOTg3NzY5K3N1c2hvYmhpdDI3QHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IFZpbGxlIFNreXR0w6QgPHZpbGxlLnNreXR0YUB1cGNsb3VkLmNvbT4NCg0KIyBMaWNlbnNlZCB1bmRlciB0aGUgR1BMOiBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL29sZC1saWNlbnNlcy9ncGwtMi4wLmh0bWwNCiMgRm9yIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9QeUNRQS9weWxpbnQvYmxvYi9tYXN0ZXIvQ09QWUlORw0KDQoiIiJ1dGlsaXRpZXMgbWV0aG9kcyBhbmQgY2xhc3NlcyBmb3IgcmVwb3J0ZXJzIiIiDQpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IHByaW50X2Z1bmN0aW9uDQoNCmltcG9ydCBzeXMNCmltcG9ydCBsb2NhbGUNCmltcG9ydCBvcw0KaW1wb3J0IHdhcm5pbmdzDQoNCg0KQ01QUyA9IFsnPScsICctJywgJysnXQ0KDQojIHB5M2sgaGFzIG5vIG1vcmUgY21wIGJ1aWx0aW4NCmlmIHN5cy52ZXJzaW9uX2luZm8gPj0gKDMsIDApOg0KICAgIGRlZiBjbXAoYSwgYik6ICMgcHlsaW50OiBkaXNhYmxlPXJlZGVmaW5lZC1idWlsdGluDQogICAgICAgIHJldHVybiAoYSA+IGIpIC0gKGEgPCBiKQ0KDQpkZWYgZGlmZl9zdHJpbmcob2xkLCBuZXcpOg0KICAgICIiImdpdmVuIGFuIG9sZCBhbmQgbmV3IGludCB2YWx1ZSwgcmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUNCiAgICBkaWZmZXJlbmNlDQogICAgIiIiDQogICAgZGlmZiA9IGFicyhvbGQgLSBuZXcpDQogICAgZGlmZl9zdHIgPSAiJXMlcyIgJSAoQ01QU1tjbXAob2xkLCBuZXcpXSwgZGlmZiBhbmQgKCclLjJmJyAlIGRpZmYpIG9yICcnKQ0KICAgIHJldHVybiBkaWZmX3N0cg0KDQoNCmNsYXNzIEJhc2VSZXBvcnRlcjoNCiAgICAiIiJiYXNlIGNsYXNzIGZvciByZXBvcnRlcnMNCg0KICAgIHN5bWJvbHM6IHNob3cgc2hvcnQgc3ltYm9saWMgbmFtZXMgZm9yIG1lc3NhZ2VzLg0KICAgICIiIg0KDQogICAgZXh0ZW5zaW9uID0gJycNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBvdXRwdXQ9Tm9uZSk6DQogICAgICAgIHNlbGYubGludGVyID0gTm9uZQ0KICAgICAgICBzZWxmLnNlY3Rpb24gPSAwDQogICAgICAgIHNlbGYub3V0ID0gTm9uZQ0KICAgICAgICBzZWxmLm91dF9lbmNvZGluZyA9IE5vbmUNCiAgICAgICAgc2VsZi5zZXRfb3V0cHV0KG91dHB1dCkNCiAgICAgICAgIyBCdWlsZCB0aGUgcGF0aCBwcmVmaXggdG8gc3RyaXAgdG8gZ2V0IHJlbGF0aXZlIHBhdGhzDQogICAgICAgIHNlbGYucGF0aF9zdHJpcF9wcmVmaXggPSBvcy5nZXRjd2QoKSArIG9zLnNlcA0KDQogICAgZGVmIGhhbmRsZV9tZXNzYWdlKHNlbGYsIG1zZyk6DQogICAgICAgICIiIkhhbmRsZSBhIG5ldyBtZXNzYWdlIHRyaWdnZXJlZCBvbiB0aGUgY3VycmVudCBmaWxlLiIiIg0KDQogICAgZGVmIHNldF9vdXRwdXQoc2VsZiwgb3V0cHV0PU5vbmUpOg0KICAgICAgICAiIiJzZXQgb3V0cHV0IHN0cmVhbSIiIg0KICAgICAgICBzZWxmLm91dCA9IG91dHB1dCBvciBzeXMuc3Rkb3V0DQoNCiAgICBkZWYgd3JpdGVsbihzZWxmLCBzdHJpbmc9JycpOg0KICAgICAgICAiIiJ3cml0ZSBhIGxpbmUgaW4gdGhlIG91dHB1dCBidWZmZXIiIiINCiAgICAgICAgcHJpbnQoc3RyaW5nLCBmaWxlPXNlbGYub3V0KQ0KDQogICAgZGVmIGRpc3BsYXlfcmVwb3J0cyhzZWxmLCBsYXlvdXQpOg0KICAgICAgICAiIiJkaXNwbGF5IHJlc3VsdHMgZW5jYXBzdWxhdGVkIGluIHRoZSBsYXlvdXQgdHJlZSIiIg0KICAgICAgICBzZWxmLnNlY3Rpb24gPSAwDQogICAgICAgIGlmIGhhc2F0dHIobGF5b3V0LCAncmVwb3J0X2lkJyk6DQogICAgICAgICAgICBsYXlvdXQuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uZGF0YSArPSAnICglcyknICUgbGF5b3V0LnJlcG9ydF9pZA0KICAgICAgICBzZWxmLl9kaXNwbGF5KGxheW91dCkNCg0KICAgIGRlZiBfZGlzcGxheShzZWxmLCBsYXlvdXQpOg0KICAgICAgICAiIiJkaXNwbGF5IHRoZSBsYXlvdXQiIiINCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigpDQoNCiAgICBkZWYgZGlzcGxheV9tZXNzYWdlcyhzZWxmLCBsYXlvdXQpOg0KICAgICAgICAiIiJIb29rIGZvciBkaXNwbGF5aW5nIHRoZSBtZXNzYWdlcyBvZiB0aGUgcmVwb3J0ZXINCg0KICAgICAgICBUaGlzIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSB1bmRlcmx5aW5nIG1lc3NhZ2VzDQogICAgICAgIG5lZWRzIHRvIGJlIGRpc3BsYXllZC4gRm9yIHNvbWUgcmVwb3J0ZXJzLCBpdCBwcm9iYWJseQ0KICAgICAgICBkb2Vzbid0IG1ha2Ugc2Vuc2UgdG8gZGlzcGxheSBtZXNzYWdlcyBhcyBzb29uIGFzIHRoZXkNCiAgICAgICAgYXJlIGF2YWlsYWJsZSwgc28gc29tZSBtZWNoYW5pc20gb2Ygc3RvcmluZyB0aGVtIGNvdWxkIGJlIHVzZWQuDQogICAgICAgIFRoaXMgbWV0aG9kIGNhbiBiZSBpbXBsZW1lbnRlZCB0byBkaXNwbGF5IHRoZW0gYWZ0ZXIgdGhleSd2ZQ0KICAgICAgICBiZWVuIGFnZ3JlZ2F0ZWQuDQogICAgICAgICIiIg0KDQogICAgIyBFdmVudCBjYWxsYmFja3MNCg0KICAgIGRlZiBvbl9zZXRfY3VycmVudF9tb2R1bGUoc2VsZiwgbW9kdWxlLCBmaWxlcGF0aCk6DQogICAgICAgICIiIkhvb2sgY2FsbGVkIHdoZW4gYSBtb2R1bGUgc3RhcnRzIHRvIGJlIGFuYWx5c2VkLiIiIg0KDQogICAgZGVmIG9uX2Nsb3NlKHNlbGYsIHN0YXRzLCBwcmV2aW91c19zdGF0cyk6DQogICAgICAgICIiIkhvb2sgY2FsbGVkIHdoZW4gYSBtb2R1bGUgZmluaXNoZWQgYW5hbHl6aW5nLiIiIg0KDQoNCmNsYXNzIENvbGxlY3RpbmdSZXBvcnRlcihCYXNlUmVwb3J0ZXIpOg0KICAgICIiImNvbGxlY3RzIG1lc3NhZ2VzIiIiDQoNCiAgICBuYW1lID0gJ2NvbGxlY3RvcicNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgQmFzZVJlcG9ydGVyLl9faW5pdF9fKHNlbGYpDQogICAgICAgIHNlbGYubWVzc2FnZXMgPSBbXQ0KDQogICAgZGVmIGhhbmRsZV9tZXNzYWdlKHNlbGYsIG1zZyk6DQogICAgICAgIHNlbGYubWVzc2FnZXMuYXBwZW5kKG1zZykNCg0KICAgIF9kaXNwbGF5ID0gTm9uZQ0KDQoNCmRlZiBpbml0aWFsaXplKGxpbnRlcik6DQogICAgIiIiaW5pdGlhbGl6ZSBsaW50ZXIgd2l0aCByZXBvcnRlcnMgaW4gdGhpcyBwYWNrYWdlICIiIg0KICAgIGZyb20gcHlsaW50IGltcG9ydCB1dGlscw0KICAgIHV0aWxzLnJlZ2lzdGVyX3BsdWdpbnMobGludGVyLCBfX3BhdGhfX1swXSkNCg=="
          },
          "hashes": [
            {
              "value": "E88286A3F0956072B957D2F0FAE976FD",
              "algorithm": "md5"
            },
            {
              "value": "CC2D3F4990117019BD534831CCA0CC7503B8319C",
              "algorithm": "sha-1"
            },
            {
              "value": "FBA8ACFE0BD8E4F1FB97F1490D106E9C23372578F6FAA29D5B9C5204BC4993F3",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/reporters/ureports/nodes.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNiBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IHNzb2xhbmtpIDxzdXNob2JoaXRzb2xhbmtpQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IFN1c2hvYmhpdCA8MzE5ODc3Njkrc3VzaG9iaGl0MjdAdXNlcnMubm9yZXBseS5naXRodWIuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggTmljayBEcm96ZCA8bmljaG9sYXNkcm96ZEBnbWFpbC5jb20+DQoNCiMgTGljZW5zZWQgdW5kZXIgdGhlIEdQTDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvZ3BsLTIuMC5odG1sDQojIEZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vUHlDUUEvcHlsaW50L2Jsb2IvbWFzdGVyL0NPUFlJTkcNCg0KIiIiTWljcm8gcmVwb3J0cyBvYmplY3RzLg0KDQpBIG1pY3JvIHJlcG9ydCBpcyBhIHRyZWUgb2YgbGF5b3V0IGFuZCBjb250ZW50IG9iamVjdHMuDQoiIiINCg0KDQpjbGFzcyBWTm9kZToNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuaWQ9Tm9uZSk6DQogICAgICAgIHNlbGYuaWQgPSBuaWQNCiAgICAgICAgIyBuYXZpZ2F0aW9uDQogICAgICAgIHNlbGYucGFyZW50ID0gTm9uZQ0KICAgICAgICBzZWxmLmNoaWxkcmVuID0gW10NCg0KICAgIGRlZiBfX2l0ZXJfXyhzZWxmKToNCiAgICAgICAgcmV0dXJuIGl0ZXIoc2VsZi5jaGlsZHJlbikNCg0KICAgIGRlZiBhcHBlbmQoc2VsZiwgY2hpbGQpOg0KICAgICAgICAiIiJhZGQgYSBub2RlIHRvIGNoaWxkcmVuIiIiDQogICAgICAgIHNlbGYuY2hpbGRyZW4uYXBwZW5kKGNoaWxkKQ0KICAgICAgICBjaGlsZC5wYXJlbnQgPSBzZWxmDQoNCiAgICBkZWYgaW5zZXJ0KHNlbGYsIGluZGV4LCBjaGlsZCk6DQogICAgICAgICIiImluc2VydCBhIGNoaWxkIG5vZGUiIiINCiAgICAgICAgc2VsZi5jaGlsZHJlbi5pbnNlcnQoaW5kZXgsIGNoaWxkKQ0KICAgICAgICBjaGlsZC5wYXJlbnQgPSBzZWxmDQoNCiAgICBkZWYgX2dldF92aXNpdF9uYW1lKHNlbGYpOg0KICAgICAgICAiIiINCiAgICAgICAgcmV0dXJuIHRoZSB2aXNpdCBuYW1lIGZvciB0aGUgbWl4ZWQgY2xhc3MuIFdoZW4gY2FsbGluZyAnYWNjZXB0JywgdGhlDQogICAgICAgIG1ldGhvZCA8J3Zpc2l0XycgKyBuYW1lIHJldHVybmVkIGJ5IHRoaXMgbWV0aG9kPiB3aWxsIGJlIGNhbGxlZCBvbiB0aGUNCiAgICAgICAgdmlzaXRvcg0KICAgICAgICAiIiINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgIyBweWxpbnQ6IGRpc2FibGU9bm8tbWVtYmVyDQogICAgICAgICAgICByZXR1cm4gc2VsZi5UWVBFLnJlcGxhY2UoJy0nLCAnXycpDQogICAgICAgICMgcHlsaW50OiBkaXNhYmxlPWJyb2FkLWV4Y2VwdA0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLmxvd2VyKCkNCg0KICAgIGRlZiBhY2NlcHQoc2VsZiwgdmlzaXRvciwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgZnVuYyA9IGdldGF0dHIodmlzaXRvciwgJ3Zpc2l0XyVzJyAlIHNlbGYuX2dldF92aXNpdF9uYW1lKCkpDQogICAgICAgIHJldHVybiBmdW5jKHNlbGYsICphcmdzLCAqKmt3YXJncykNCg0KICAgIGRlZiBsZWF2ZShzZWxmLCB2aXNpdG9yLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICBmdW5jID0gZ2V0YXR0cih2aXNpdG9yLCAnbGVhdmVfJXMnICUgc2VsZi5fZ2V0X3Zpc2l0X25hbWUoKSkNCiAgICAgICAgcmV0dXJuIGZ1bmMoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKQ0KDQoNCmNsYXNzIEJhc2VMYXlvdXQoVk5vZGUpOg0KICAgICIiImJhc2UgY29udGFpbmVyIG5vZGUNCg0KICAgIGF0dHJpYnV0ZXMNCiAgICAqIGNoaWxkcmVuIDogY29tcG9uZW50cyBpbiB0aGlzIHRhYmxlIChpLmUuIHRoZSB0YWJsZSdzIGNlbGxzKQ0KICAgICIiIg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjaGlsZHJlbj0oKSwgKiprd2FyZ3MpOg0KICAgICAgICBzdXBlcihCYXNlTGF5b3V0LCBzZWxmKS5fX2luaXRfXygqKmt3YXJncykNCiAgICAgICAgZm9yIGNoaWxkIGluIGNoaWxkcmVuOg0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShjaGlsZCwgVk5vZGUpOg0KICAgICAgICAgICAgICAgIHNlbGYuYXBwZW5kKGNoaWxkKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBzZWxmLmFkZF90ZXh0KGNoaWxkKQ0KDQogICAgZGVmIGFwcGVuZChzZWxmLCBjaGlsZCk6DQogICAgICAgICIiIm92ZXJyaWRkZW4gdG8gZGV0ZWN0IHByb2JsZW1zIGVhc2lseSIiIg0KICAgICAgICBhc3NlcnQgY2hpbGQgbm90IGluIHNlbGYucGFyZW50cygpDQogICAgICAgIFZOb2RlLmFwcGVuZChzZWxmLCBjaGlsZCkNCg0KICAgIGRlZiBwYXJlbnRzKHNlbGYpOg0KICAgICAgICAiIiJyZXR1cm4gdGhlIGFuY2VzdG9yIG5vZGVzIiIiDQogICAgICAgIGFzc2VydCBzZWxmLnBhcmVudCBpcyBub3Qgc2VsZg0KICAgICAgICBpZiBzZWxmLnBhcmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIFtdDQogICAgICAgIHJldHVybiBbc2VsZi5wYXJlbnRdICsgc2VsZi5wYXJlbnQucGFyZW50cygpDQoNCiAgICBkZWYgYWRkX3RleHQoc2VsZiwgdGV4dCk6DQogICAgICAgICIiInNob3J0Y3V0IHRvIGFkZCB0ZXh0IGRhdGEiIiINCiAgICAgICAgc2VsZi5jaGlsZHJlbi5hcHBlbmQoVGV4dCh0ZXh0KSkNCg0KDQojIG5vbiBjb250YWluZXIgbm9kZXMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCmNsYXNzIFRleHQoVk5vZGUpOg0KICAgICIiImEgdGV4dCBwb3J0aW9uDQoNCiAgICBhdHRyaWJ1dGVzIDoNCiAgICAqIGRhdGEgOiB0aGUgdGV4dCB2YWx1ZSBhcyBhbiBlbmNvZGVkIG9yIHVuaWNvZGUgc3RyaW5nDQogICAgIiIiDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRhdGEsIGVzY2FwZWQ9VHJ1ZSwgKiprd2FyZ3MpOg0KICAgICAgICBzdXBlcihUZXh0LCBzZWxmKS5fX2luaXRfXygqKmt3YXJncykNCiAgICAgICAgI2lmIGlzaW5zdGFuY2UoZGF0YSwgdW5pY29kZSk6DQogICAgICAgICMgICAgZGF0YSA9IGRhdGEuZW5jb2RlKCdhc2NpaScpDQogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKGRhdGEsIHN0ciksIGRhdGEuX19jbGFzc19fDQogICAgICAgIHNlbGYuZXNjYXBlZCA9IGVzY2FwZWQNCiAgICAgICAgc2VsZi5kYXRhID0gZGF0YQ0KDQoNCmNsYXNzIFZlcmJhdGltVGV4dChUZXh0KToNCiAgICAiIiJhIHZlcmJhdGltIHRleHQsIGRpc3BsYXkgdGhlIHJhdyBkYXRhDQoNCiAgICBhdHRyaWJ1dGVzIDoNCiAgICAqIGRhdGEgOiB0aGUgdGV4dCB2YWx1ZSBhcyBhbiBlbmNvZGVkIG9yIHVuaWNvZGUgc3RyaW5nDQogICAgIiIiDQoNCiMgY29udGFpbmVyIG5vZGVzICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCg0KY2xhc3MgU2VjdGlvbihCYXNlTGF5b3V0KToNCiAgICAiIiJhIHNlY3Rpb24NCg0KICAgIGF0dHJpYnV0ZXMgOg0KICAgICogQmFzZUxheW91dCBhdHRyaWJ1dGVzDQoNCiAgICBhIHRpdGxlIG1heSBhbHNvIGJlIGdpdmVuIHRvIHRoZSBjb25zdHJ1Y3RvciwgaXQnbGwgYmUgYWRkZWQNCiAgICBhcyBhIGZpcnN0IGVsZW1lbnQNCiAgICBhIGRlc2NyaXB0aW9uIG1heSBhbHNvIGJlIGdpdmVuIHRvIHRoZSBjb25zdHJ1Y3RvciwgaXQnbGwgYmUgYWRkZWQNCiAgICBhcyBhIGZpcnN0IHBhcmFncmFwaA0KICAgICIiIg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCB0aXRsZT1Ob25lLCBkZXNjcmlwdGlvbj1Ob25lLCAqKmt3YXJncyk6DQogICAgICAgIHN1cGVyKFNlY3Rpb24sIHNlbGYpLl9faW5pdF9fKCoqa3dhcmdzKQ0KICAgICAgICBpZiBkZXNjcmlwdGlvbjoNCiAgICAgICAgICAgIHNlbGYuaW5zZXJ0KDAsIFBhcmFncmFwaChbVGV4dChkZXNjcmlwdGlvbildKSkNCiAgICAgICAgaWYgdGl0bGU6DQogICAgICAgICAgICBzZWxmLmluc2VydCgwLCBUaXRsZShjaGlsZHJlbj0odGl0bGUsKSkpDQoNCg0KY2xhc3MgRXZhbHVhdGlvblNlY3Rpb24oU2VjdGlvbik6DQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgbWVzc2FnZSwgKiprd2FyZ3MpOg0KICAgICAgICBzdXBlcihFdmFsdWF0aW9uU2VjdGlvbiwgc2VsZikuX19pbml0X18oKiprd2FyZ3MpDQogICAgICAgIHRpdGxlID0gUGFyYWdyYXBoKCkNCiAgICAgICAgdGl0bGUuYXBwZW5kKFRleHQoIi0iICogbGVuKG1lc3NhZ2UpKSkNCiAgICAgICAgc2VsZi5hcHBlbmQodGl0bGUpDQoNCiAgICAgICAgbWVzc2FnZV9ib2R5ID0gUGFyYWdyYXBoKCkNCiAgICAgICAgbWVzc2FnZV9ib2R5LmFwcGVuZChUZXh0KG1lc3NhZ2UpKQ0KICAgICAgICBzZWxmLmFwcGVuZChtZXNzYWdlX2JvZHkpDQoNCg0KY2xhc3MgVGl0bGUoQmFzZUxheW91dCk6DQogICAgIiIiYSB0aXRsZQ0KDQogICAgYXR0cmlidXRlcyA6DQogICAgKiBCYXNlTGF5b3V0IGF0dHJpYnV0ZXMNCg0KICAgIEEgdGl0bGUgbXVzdCBub3QgY29udGFpbnMgYSBzZWN0aW9uIG5vciBhIHBhcmFncmFwaCENCiAgICAiIiINCg0KDQpjbGFzcyBQYXJhZ3JhcGgoQmFzZUxheW91dCk6DQogICAgIiIiYSBzaW1wbGUgdGV4dCBwYXJhZ3JhcGgNCg0KICAgIGF0dHJpYnV0ZXMgOg0KICAgICogQmFzZUxheW91dCBhdHRyaWJ1dGVzDQoNCiAgICBBIHBhcmFncmFwaCBtdXN0IG5vdCBjb250YWlucyBhIHNlY3Rpb24gIQ0KICAgICIiIg0KDQoNCmNsYXNzIFRhYmxlKEJhc2VMYXlvdXQpOg0KICAgICIiInNvbWUgdGFidWxhciBkYXRhDQoNCiAgICBhdHRyaWJ1dGVzIDoNCiAgICAqIEJhc2VMYXlvdXQgYXR0cmlidXRlcw0KICAgICogY29scyA6IHRoZSBudW1iZXIgb2YgY29sdW1ucyBvZiB0aGUgdGFibGUgKFJFUVVJUkVEKQ0KICAgICogcmhlYWRlcnMgOiB0aGUgZmlyc3Qgcm93J3MgZWxlbWVudHMgYXJlIHRhYmxlJ3MgaGVhZGVyDQogICAgKiBjaGVhZGVycyA6IHRoZSBmaXJzdCBjb2wncyBlbGVtZW50cyBhcmUgdGFibGUncyBoZWFkZXINCiAgICAqIHRpdGxlIDogdGhlIHRhYmxlJ3Mgb3B0aW9uYWwgdGl0bGUNCiAgICAiIiINCiAgICBkZWYgX19pbml0X18oc2VsZiwgY29scywgdGl0bGU9Tm9uZSwNCiAgICAgICAgICAgICAgICAgcmhlYWRlcnM9MCwgY2hlYWRlcnM9MCwNCiAgICAgICAgICAgICAgICAgKiprd2FyZ3MpOg0KICAgICAgICBzdXBlcihUYWJsZSwgc2VsZikuX19pbml0X18oKiprd2FyZ3MpDQogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKGNvbHMsIGludCkNCiAgICAgICAgc2VsZi5jb2xzID0gY29scw0KICAgICAgICBzZWxmLnRpdGxlID0gdGl0bGUNCiAgICAgICAgc2VsZi5yaGVhZGVycyA9IHJoZWFkZXJzDQogICAgICAgIHNlbGYuY2hlYWRlcnMgPSBjaGVhZGVycw0K"
          },
          "hashes": [
            {
              "value": "DEAE2281B80E4EB27575AA175F82C19E",
              "algorithm": "md5"
            },
            {
              "value": "D1F10AE4A75178B5BB27EA9537762B7BA46FEA45",
              "algorithm": "sha-1"
            },
            {
              "value": "B362BFEECE90F5574502AE3DF81671799CE40C687A1D4F1632FB0ABF4FFD60BA",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/reporters/ureports/text_writer.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNiBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IEFudGhvbnkgU290dGlsZSA8YXNvdHRpbGVAdW1pY2guZWR1Pg0KDQojIExpY2Vuc2VkIHVuZGVyIHRoZSBHUEw6IGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvb2xkLWxpY2Vuc2VzL2dwbC0yLjAuaHRtbA0KIyBGb3IgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL1B5Q1FBL3B5bGludC9ibG9iL21hc3Rlci9DT1BZSU5HDQoNCiIiIlRleHQgZm9ybWF0dGluZyBkcml2ZXJzIGZvciB1cmVwb3J0cyIiIg0KDQpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IHByaW50X2Z1bmN0aW9uDQoNCmZyb20gcHlsaW50LnJlcG9ydGVycy51cmVwb3J0cyBpbXBvcnQgQmFzZVdyaXRlcg0KDQoNClRJVExFX1VOREVSTElORVMgPSBbJycsICc9JywgJy0nLCAnYCcsICcuJywgJ34nLCAnXiddDQpCVUxMRVRTID0gWycqJywgJy0nXQ0KDQpjbGFzcyBUZXh0V3JpdGVyKEJhc2VXcml0ZXIpOg0KICAgICIiImZvcm1hdCBsYXlvdXRzIGFzIHRleHQNCiAgICAoUmVTdHJ1Y3R1cmVkIGluc3BpcmF0aW9uIGJ1dCBub3QgdG90YWxseSBoYW5kbGVkIHlldCkNCiAgICAiIiINCiAgICBkZWYgYmVnaW5fZm9ybWF0KHNlbGYpOg0KICAgICAgICBzdXBlcihUZXh0V3JpdGVyLCBzZWxmKS5iZWdpbl9mb3JtYXQoKQ0KICAgICAgICBzZWxmLmxpc3RfbGV2ZWwgPSAwDQoNCiAgICBkZWYgdmlzaXRfc2VjdGlvbihzZWxmLCBsYXlvdXQpOg0KICAgICAgICAiIiJkaXNwbGF5IGEgc2VjdGlvbiBhcyB0ZXh0DQogICAgICAgICIiIg0KICAgICAgICBzZWxmLnNlY3Rpb24gKz0gMQ0KICAgICAgICBzZWxmLndyaXRlbG4oKQ0KICAgICAgICBzZWxmLmZvcm1hdF9jaGlsZHJlbihsYXlvdXQpDQogICAgICAgIHNlbGYuc2VjdGlvbiAtPSAxDQogICAgICAgIHNlbGYud3JpdGVsbigpDQoNCiAgICBkZWYgdmlzaXRfZXZhbHVhdGlvbnNlY3Rpb24oc2VsZiwgbGF5b3V0KToNCiAgICAgICAgIiIiRGlzcGxheSBhbiBldmFsdWF0aW9uIHNlY3Rpb24gYXMgYSB0ZXh0LiIiIg0KICAgICAgICBzZWxmLnNlY3Rpb24gKz0gMQ0KICAgICAgICBzZWxmLmZvcm1hdF9jaGlsZHJlbihsYXlvdXQpDQogICAgICAgIHNlbGYuc2VjdGlvbiAtPSAxDQogICAgICAgIHNlbGYud3JpdGVsbigpDQoNCiAgICBkZWYgdmlzaXRfdGl0bGUoc2VsZiwgbGF5b3V0KToNCiAgICAgICAgdGl0bGUgPSAnJy5qb2luKGxpc3Qoc2VsZi5jb21wdXRlX2NvbnRlbnQobGF5b3V0KSkpDQogICAgICAgIHNlbGYud3JpdGVsbih0aXRsZSkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc2VsZi53cml0ZWxuKFRJVExFX1VOREVSTElORVNbc2VsZi5zZWN0aW9uXSAqIGxlbih0aXRsZSkpDQogICAgICAgIGV4Y2VwdCBJbmRleEVycm9yOg0KICAgICAgICAgICAgcHJpbnQoIkZJWE1FIFRJVExFIFRPTyBERUVQLiBUVVJOSU5HIFRJVExFIElOVE8gVEVYVCIpDQoNCiAgICBkZWYgdmlzaXRfcGFyYWdyYXBoKHNlbGYsIGxheW91dCk6DQogICAgICAgICIiImVudGVyIGEgcGFyYWdyYXBoIiIiDQogICAgICAgIHNlbGYuZm9ybWF0X2NoaWxkcmVuKGxheW91dCkNCiAgICAgICAgc2VsZi53cml0ZWxuKCkNCg0KICAgIGRlZiB2aXNpdF90YWJsZShzZWxmLCBsYXlvdXQpOg0KICAgICAgICAiIiJkaXNwbGF5IGEgdGFibGUgYXMgdGV4dCIiIg0KICAgICAgICB0YWJsZV9jb250ZW50ID0gc2VsZi5nZXRfdGFibGVfY29udGVudChsYXlvdXQpDQogICAgICAgICMgZ2V0IGNvbHVtbnMgd2lkdGgNCiAgICAgICAgY29sc193aWR0aCA9IFswXSpsZW4odGFibGVfY29udGVudFswXSkNCiAgICAgICAgZm9yIHJvdyBpbiB0YWJsZV9jb250ZW50Og0KICAgICAgICAgICAgZm9yIGluZGV4LCBjb2wgaW4gZW51bWVyYXRlKHJvdyk6DQogICAgICAgICAgICAgICAgY29sc193aWR0aFtpbmRleF0gPSBtYXgoY29sc193aWR0aFtpbmRleF0sIGxlbihjb2wpKQ0KICAgICAgICBzZWxmLmRlZmF1bHRfdGFibGUobGF5b3V0LCB0YWJsZV9jb250ZW50LCBjb2xzX3dpZHRoKQ0KICAgICAgICBzZWxmLndyaXRlbG4oKQ0KDQogICAgZGVmIGRlZmF1bHRfdGFibGUoc2VsZiwgbGF5b3V0LCB0YWJsZV9jb250ZW50LCBjb2xzX3dpZHRoKToNCiAgICAgICAgIiIiZm9ybWF0IGEgdGFibGUiIiINCiAgICAgICAgY29sc193aWR0aCA9IFtzaXplKzEgZm9yIHNpemUgaW4gY29sc193aWR0aF0NCiAgICAgICAgZm9ybWF0X3N0cmluZ3MgPSAnICcuam9pbihbJyUlLSVzcyddICogbGVuKGNvbHNfd2lkdGgpKQ0KICAgICAgICBmb3JtYXRfc3RyaW5ncyA9IGZvcm1hdF9zdHJpbmdzICUgdHVwbGUoY29sc193aWR0aCkNCiAgICAgICAgZm9ybWF0X3N0cmluZ3MgPSBmb3JtYXRfc3RyaW5ncy5zcGxpdCgnICcpDQogICAgICAgIHRhYmxlX2xpbmVzZXAgPSAnXG4rJyArICcrJy5qb2luKFsnLScqdyBmb3IgdyBpbiBjb2xzX3dpZHRoXSkgKyAnK1xuJw0KICAgICAgICBoZWFkc2VwID0gJ1xuKycgKyAnKycuam9pbihbJz0nKncgZm9yIHcgaW4gY29sc193aWR0aF0pICsgJytcbicNCiAgICAgICAgIyBGSVhNRTogbGF5b3V0LmNoZWFkZXJzDQogICAgICAgIHNlbGYud3JpdGUodGFibGVfbGluZXNlcCkNCiAgICAgICAgZm9yIGluZGV4LCBsaW5lIGluIGVudW1lcmF0ZSh0YWJsZV9jb250ZW50KToNCiAgICAgICAgICAgIHNlbGYud3JpdGUoJ3wnKQ0KICAgICAgICAgICAgZm9yIGxpbmVfaW5kZXgsIGF0X2luZGV4IGluIGVudW1lcmF0ZShsaW5lKToNCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKGZvcm1hdF9zdHJpbmdzW2xpbmVfaW5kZXhdICUgYXRfaW5kZXgpDQogICAgICAgICAgICAgICAgc2VsZi53cml0ZSgnfCcpDQogICAgICAgICAgICBpZiBpbmRleCA9PSAwIGFuZCBsYXlvdXQucmhlYWRlcnM6DQogICAgICAgICAgICAgICAgc2VsZi53cml0ZShoZWFkc2VwKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKHRhYmxlX2xpbmVzZXApDQoNCiAgICBkZWYgdmlzaXRfdmVyYmF0aW10ZXh0KHNlbGYsIGxheW91dCk6DQogICAgICAgICIiImRpc3BsYXkgYSB2ZXJiYXRpbSBsYXlvdXQgYXMgdGV4dCAoc28gZGlmZmljdWx0IDspDQogICAgICAgICIiIg0KICAgICAgICBzZWxmLndyaXRlbG4oJzo6XG4nKQ0KICAgICAgICBmb3IgbGluZSBpbiBsYXlvdXQuZGF0YS5zcGxpdGxpbmVzKCk6DQogICAgICAgICAgICBzZWxmLndyaXRlbG4oJyAgICAnICsgbGluZSkNCiAgICAgICAgc2VsZi53cml0ZWxuKCkNCg0KICAgIGRlZiB2aXNpdF90ZXh0KHNlbGYsIGxheW91dCk6DQogICAgICAgICIiImFkZCBzb21lIHRleHQiIiINCiAgICAgICAgc2VsZi53cml0ZSgnJXMnICUgbGF5b3V0LmRhdGEpDQo="
          },
          "hashes": [
            {
              "value": "6D77F7916BCA6541823084EF02DC3286",
              "algorithm": "md5"
            },
            {
              "value": "5D6DFD3E7E368293769E8FD930E737A47BA2D065",
              "algorithm": "sha-1"
            },
            {
              "value": "8C5EBA71217B220495ED862C9D47233DCF8C4415A4459F2E47D818D0B731E92C",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/pylint/reporters/ureports/__init__.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": "IyBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNiBDbGF1ZGl1IFBvcGEgPHBjbWFudGljb3JlQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IHNzb2xhbmtpIDxzdXNob2JoaXRzb2xhbmtpQGdtYWlsLmNvbT4NCiMgQ29weXJpZ2h0IChjKSAyMDE4IFN1c2hvYmhpdCA8MzE5ODc3Njkrc3VzaG9iaGl0MjdAdXNlcnMubm9yZXBseS5naXRodWIuY29tPg0KIyBDb3B5cmlnaHQgKGMpIDIwMTggQW50aG9ueSBTb3R0aWxlIDxhc290dGlsZUB1bWljaC5lZHU+DQoNCiMgTGljZW5zZWQgdW5kZXIgdGhlIEdQTDogaHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9vbGQtbGljZW5zZXMvZ3BsLTIuMC5odG1sDQojIEZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vUHlDUUEvcHlsaW50L2Jsb2IvbWFzdGVyL0NPUFlJTkcNCg0KIiIiVW5pdmVyc2FsIHJlcG9ydCBvYmplY3RzIGFuZCBzb21lIGZvcm1hdHRpbmcgZHJpdmVycy4NCg0KQSB3YXkgdG8gY3JlYXRlIHNpbXBsZSByZXBvcnRzIHVzaW5nIHB5dGhvbiBvYmplY3RzLCBwcmltYXJpbHkgZGVzaWduZWQgdG8gYmUNCmZvcm1hdHRlZCBhcyB0ZXh0IGFuZCBodG1sLg0KIiIiDQppbXBvcnQgb3MNCmltcG9ydCBzeXMNCg0KZnJvbSBpbyBpbXBvcnQgU3RyaW5nSU8NCg0KDQpjbGFzcyBCYXNlV3JpdGVyOg0KICAgICIiImJhc2UgY2xhc3MgZm9yIHVyZXBvcnQgd3JpdGVycyIiIg0KDQogICAgZGVmIGZvcm1hdChzZWxmLCBsYXlvdXQsIHN0cmVhbT1Ob25lLCBlbmNvZGluZz1Ob25lKToNCiAgICAgICAgIiIiZm9ybWF0IGFuZCB3cml0ZSB0aGUgZ2l2ZW4gbGF5b3V0IGludG8gdGhlIHN0cmVhbSBvYmplY3QNCg0KICAgICAgICB1bmljb2RlIHBvbGljeTogdW5pY29kZSBzdHJpbmdzIG1heSBiZSBmb3VuZCBpbiB0aGUgbGF5b3V0Ow0KICAgICAgICB0cnkgdG8gY2FsbCBzdHJlYW0ud3JpdGUgd2l0aCBpdCwgYnV0IGdpdmUgaXQgYmFjayBlbmNvZGVkIHVzaW5nDQogICAgICAgIHRoZSBnaXZlbiBlbmNvZGluZyBpZiBpdCBmYWlscw0KICAgICAgICAiIiINCiAgICAgICAgaWYgc3RyZWFtIGlzIE5vbmU6DQogICAgICAgICAgICBzdHJlYW0gPSBzeXMuc3Rkb3V0DQogICAgICAgIGlmIG5vdCBlbmNvZGluZzoNCiAgICAgICAgICAgIGVuY29kaW5nID0gZ2V0YXR0cihzdHJlYW0sICdlbmNvZGluZycsICdVVEYtOCcpDQogICAgICAgIHNlbGYuZW5jb2RpbmcgPSBlbmNvZGluZyBvciAnVVRGLTgnDQogICAgICAgIHNlbGYub3V0ID0gc3RyZWFtDQogICAgICAgIHNlbGYuYmVnaW5fZm9ybWF0KCkNCiAgICAgICAgbGF5b3V0LmFjY2VwdChzZWxmKQ0KICAgICAgICBzZWxmLmVuZF9mb3JtYXQoKQ0KDQogICAgZGVmIGZvcm1hdF9jaGlsZHJlbihzZWxmLCBsYXlvdXQpOg0KICAgICAgICAiIiJyZWN1cnNlIG9uIHRoZSBsYXlvdXQgY2hpbGRyZW4gYW5kIGNhbGwgdGhlaXIgYWNjZXB0IG1ldGhvZA0KICAgICAgICAoc2VlIHRoZSBWaXNpdG9yIHBhdHRlcm4pDQogICAgICAgICIiIg0KICAgICAgICBmb3IgY2hpbGQgaW4gZ2V0YXR0cihsYXlvdXQsICdjaGlsZHJlbicsICgpKToNCiAgICAgICAgICAgIGNoaWxkLmFjY2VwdChzZWxmKQ0KDQogICAgZGVmIHdyaXRlbG4oc2VsZiwgc3RyaW5nPScnKToNCiAgICAgICAgIiIid3JpdGUgYSBsaW5lIGluIHRoZSBvdXRwdXQgYnVmZmVyIiIiDQogICAgICAgIHNlbGYud3JpdGUoc3RyaW5nICsgb3MubGluZXNlcCkNCg0KICAgIGRlZiB3cml0ZShzZWxmLCBzdHJpbmcpOg0KICAgICAgICAiIiJ3cml0ZSBhIHN0cmluZyBpbiB0aGUgb3V0cHV0IGJ1ZmZlciIiIg0KICAgICAgICBzZWxmLm91dC53cml0ZShzdHJpbmcpDQoNCiAgICBkZWYgYmVnaW5fZm9ybWF0KHNlbGYpOg0KICAgICAgICAiIiJiZWdpbiB0byBmb3JtYXQgYSBsYXlvdXQiIiINCiAgICAgICAgc2VsZi5zZWN0aW9uID0gMA0KDQogICAgZGVmIGVuZF9mb3JtYXQoc2VsZik6DQogICAgICAgICIiImZpbmlzaGVkIHRvIGZvcm1hdCBhIGxheW91dCIiIg0KDQogICAgZGVmIGdldF90YWJsZV9jb250ZW50KHNlbGYsIHRhYmxlKToNCiAgICAgICAgIiIidHJpY2sgdG8gZ2V0IHRhYmxlIGNvbnRlbnQgd2l0aG91dCBhY3R1YWxseSB3cml0aW5nIGl0DQoNCiAgICAgICAgcmV0dXJuIGFuIGFsaWduZWQgbGlzdCBvZiBsaXN0cyBjb250YWluaW5nIHRhYmxlIGNlbGxzIHZhbHVlcyBhcyBzdHJpbmcNCiAgICAgICAgIiIiDQogICAgICAgIHJlc3VsdCA9IFtbXV0NCiAgICAgICAgY29scyA9IHRhYmxlLmNvbHMNCiAgICAgICAgZm9yIGNlbGwgaW4gc2VsZi5jb21wdXRlX2NvbnRlbnQodGFibGUpOg0KICAgICAgICAgICAgaWYgY29scyA9PSAwOg0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoW10pDQogICAgICAgICAgICAgICAgY29scyA9IHRhYmxlLmNvbHMNCiAgICAgICAgICAgIGNvbHMgLT0gMQ0KICAgICAgICAgICAgcmVzdWx0Wy0xXS5hcHBlbmQoY2VsbCkNCiAgICAgICAgIyBmaWxsIG1pc3NpbmcgY2VsbHMNCiAgICAgICAgd2hpbGUgbGVuKHJlc3VsdFstMV0pIDwgY29sczoNCiAgICAgICAgICAgIHJlc3VsdFstMV0uYXBwZW5kKCcnKQ0KICAgICAgICByZXR1cm4gcmVzdWx0DQoNCiAgICBkZWYgY29tcHV0ZV9jb250ZW50KHNlbGYsIGxheW91dCk6DQogICAgICAgICIiInRyaWNrIHRvIGNvbXB1dGUgdGhlIGZvcm1hdHRpbmcgb2YgY2hpbGRyZW4gbGF5b3V0IGJlZm9yZSBhY3R1YWxseQ0KICAgICAgICB3cml0aW5nIGl0DQoNCiAgICAgICAgcmV0dXJuIGFuIGl0ZXJhdG9yIG9uIHN0cmluZ3MgKG9uZSBmb3IgZWFjaCBjaGlsZCBlbGVtZW50KQ0KICAgICAgICAiIiINCiAgICAgICAgIyBQYXRjaCB0aGUgdW5kZXJseWluZyBvdXRwdXQgc3RyZWFtIHdpdGggYSBmcmVzaC1nZW5lcmF0ZWQgc3RyZWFtLA0KICAgICAgICAjIHdoaWNoIGlzIHVzZWQgdG8gc3RvcmUgYSB0ZW1wb3JhcnkgcmVwcmVzZW50YXRpb24gb2YgYSBjaGlsZA0KICAgICAgICAjIG5vZGUuDQogICAgICAgIG91dCA9IHNlbGYub3V0DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGZvciBjaGlsZCBpbiBsYXlvdXQuY2hpbGRyZW46DQogICAgICAgICAgICAgICAgc3RyZWFtID0gU3RyaW5nSU8oKQ0KICAgICAgICAgICAgICAgIHNlbGYub3V0ID0gc3RyZWFtDQogICAgICAgICAgICAgICAgY2hpbGQuYWNjZXB0KHNlbGYpDQogICAgICAgICAgICAgICAgeWllbGQgc3RyZWFtLmdldHZhbHVlKCkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHNlbGYub3V0ID0gb3V0DQo="
          },
          "hashes": [
            {
              "value": "8D0E40EEA79FCB40D2B67640079ED58D",
              "algorithm": "md5"
            },
            {
              "value": "787AB2C8EF6CDC60EEB8130CE47F3FD24A936212",
              "algorithm": "sha-1"
            },
            {
              "value": "23F07AD2E8C4D1F79B615FB65DDB8C25772FD7C5FFE276D561F2E08C59011DFE",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/pylint/setup.py": {
          "mimeType": "text/python",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "5FE8A5337D461F316A25C8A5E79A044B",
              "algorithm": "md5"
            },
            {
              "value": "8015D6BB029E2502839A6883472660FBF23E6B46",
              "algorithm": "sha-1"
            },
            {
              "value": "649FCD854DCB6FAFCA20E1FA5B0416717D04FA4489645D1BF69D4B07CAF844B2",
              "algorithm": "sha-256"
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "E0012(bad-option-value)",
          "level": "error",
          "message": {
            "text": "Bad option value 'W0704'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 42,
                  "charOffset": 48,
                  "charLength": 41,
                  "snippet": {
                    "text": "# pylint: disable=W0404,W0622,W0704,W0613"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"base_dir\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 37,
                  "charOffset": 1707,
                  "charLength": 36,
                  "snippet": {
                    "text": "base_dir = os.path.dirname(__file__)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0122(exec-used)",
          "level": "warning",
          "message": {
            "text": "Use of exec"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 32,
                  "charOffset": 1837,
                  "charLength": 28,
                  "snippet": {
                    "text": " exec(f.read(), __pkginfo__)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"modname\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 33,
                  "charOffset": 1867,
                  "charLength": 32,
                  "snippet": {
                    "text": "modname = __pkginfo__['modname']"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"distname\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 48,
                  "charOffset": 1901,
                  "charLength": 47,
                  "snippet": {
                    "text": "distname = __pkginfo__.get('distname', modname)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"scripts\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 41,
                  "charOffset": 1950,
                  "charLength": 40,
                  "snippet": {
                    "text": "scripts = __pkginfo__.get('scripts', [])"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"data_files\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 49,
                  "charOffset": 1992,
                  "charLength": 48,
                  "snippet": {
                    "text": "data_files = __pkginfo__.get('data_files', None)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"include_dirs\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 51,
                  "charOffset": 2042,
                  "charLength": 50,
                  "snippet": {
                    "text": "include_dirs = __pkginfo__.get('include_dirs', [])"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"ext_modules\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 51,
                  "charOffset": 2094,
                  "charLength": 50,
                  "snippet": {
                    "text": "ext_modules = __pkginfo__.get('ext_modules', None)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"install_requires\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 61,
                  "charOffset": 2146,
                  "charLength": 60,
                  "snippet": {
                    "text": "install_requires = __pkginfo__.get('install_requires', None)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"dependency_links\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 59,
                  "charOffset": 2208,
                  "charLength": 58,
                  "snippet": {
                    "text": "dependency_links = __pkginfo__.get('dependency_links', [])"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"extras_require\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 55,
                  "charOffset": 2268,
                  "charLength": 54,
                  "snippet": {
                    "text": "extras_require = __pkginfo__.get('extras_require', {})"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"readme_path\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 43,
                  "charOffset": 2326,
                  "charLength": 42,
                  "snippet": {
                    "text": "readme_path = join(base_dir, 'README.rst')"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"long_description\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 8,
                  "endLine": 63,
                  "endColumn": 41,
                  "charOffset": 2441,
                  "charLength": 33,
                  "snippet": {
                    "text": " long_description = stream.read()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"long_description\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 4,
                  "endLine": 65,
                  "endColumn": 26,
                  "charOffset": 2486,
                  "charLength": 22,
                  "snippet": {
                    "text": " long_description = ''"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Class name \"easy_install\" doesn't conform to PascalCase naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 4,
                  "endLine": 126,
                  "endColumn": 55,
                  "charOffset": 4653,
                  "charLength": 51,
                  "snippet": {
                    "text": " class easy_install(easy_install_lib.easy_install):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 4,
                  "endLine": 126,
                  "endColumn": 55,
                  "charOffset": 4653,
                  "charLength": 51,
                  "snippet": {
                    "text": " class easy_install(easy_install_lib.easy_install):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0221(arguments-differ)",
          "level": "warning",
          "message": {
            "text": "Parameters differ from overridden 'byte_compile' method"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 8,
                  "endLine": 130,
                  "endColumn": 39,
                  "charOffset": 4903,
                  "charLength": 31,
                  "snippet": {
                    "text": " def byte_compile(self, files):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0412(ungrouped-imports)",
          "level": "warning",
          "message": {
            "text": "Imports from package os are not grouped"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/setup.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 40,
                  "charOffset": 1269,
                  "charLength": 39,
                  "snippet": {
                    "text": "from os.path import isdir, exists, join"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO(cpopa): this module contains the logic for the"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 2,
                  "endLine": 38,
                  "endColumn": 54,
                  "charOffset": 1813,
                  "charLength": 52,
                  "snippet": {
                    "text": " TODO(cpopa): this module contains the logic for the"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "FIXME"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 10,
                  "endLine": 237,
                  "endColumn": 16,
                  "charOffset": 8512,
                  "charLength": 6,
                  "snippet": {
                    "text": " FIXME"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO handle here undeclared options appearing in the config file"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 22,
                  "endLine": 688,
                  "endColumn": 87,
                  "charOffset": 26598,
                  "charLength": 65,
                  "snippet": {
                    "text": " TODO handle here undeclared options appearing in the config file"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0402(deprecated-module)",
          "level": "warning",
          "message": {
            "text": "Uses of a deprecated module 'optparse'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 16,
                  "charOffset": 2228,
                  "charLength": 15,
                  "snippet": {
                    "text": "import optparse"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 25,
                  "charOffset": 2332,
                  "charLength": 24,
                  "snippet": {
                    "text": "from pylint import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 24,
                  "charOffset": 2844,
                  "charLength": 23,
                  "snippet": {
                    "text": "def load_results(base):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 1,
                  "endLine": 90,
                  "endColumn": 33,
                  "charOffset": 3209,
                  "charLength": 32,
                  "snippet": {
                    "text": "def save_results(results, base):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (14/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 21,
                  "charOffset": 3712,
                  "charLength": 20,
                  "snippet": {
                    "text": "def find_pylintrc():"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _check_csv of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 13,
                  "endLine": 156,
                  "endColumn": 37,
                  "charOffset": 5770,
                  "charLength": 24,
                  "snippet": {
                    "text": " utils._check_csv(value)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _check_csv of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 11,
                  "endLine": 172,
                  "endColumn": 35,
                  "charOffset": 6345,
                  "charLength": 24,
                  "snippet": {
                    "text": " utils._check_csv(value)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _unquote of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 11,
                  "endLine": 200,
                  "endColumn": 33,
                  "charOffset": 7213,
                  "charLength": 22,
                  "snippet": {
                    "text": " utils._unquote(value)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _unquote of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 14,
                  "endLine": 204,
                  "endColumn": 30,
                  "charOffset": 7270,
                  "charLength": 16,
                  "snippet": {
                    "text": " utils._unquote,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _long_opts of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 14,
                  "endLine": 256,
                  "endColumn": 39,
                  "charOffset": 9121,
                  "charLength": 25,
                  "snippet": {
                    "text": " option._long_opts[0][2:]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _all_options of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 19,
                  "endLine": 258,
                  "endColumn": 69,
                  "charOffset": 9176,
                  "charLength": 50,
                  "snippet": {
                    "text": " self.parser.options_manager._all_options[optname]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _format_option_value of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 16,
                  "endLine": 265,
                  "endColumn": 59,
                  "charOffset": 9472,
                  "charLength": 43,
                  "snippet": {
                    "text": " utils._format_option_value(optdict, value)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 1,
                  "endLine": 286,
                  "endColumn": 31,
                  "charOffset": 10096,
                  "charLength": 30,
                  "snippet": {
                    "text": "class Option(optparse.Option):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 1,
                  "endLine": 336,
                  "endColumn": 43,
                  "charOffset": 12378,
                  "charLength": 42,
                  "snippet": {
                    "text": "class OptionParser(optparse.OptionParser):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'options_manager' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 8,
                  "endLine": 491,
                  "endColumn": 51,
                  "charOffset": 17692,
                  "charLength": 43,
                  "snippet": {
                    "text": " self.cmdline_parser.options_manager = self"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 4,
                  "endLine": 398,
                  "endColumn": 58,
                  "charOffset": 14746,
                  "charLength": 54,
                  "snippet": {
                    "text": " def format_head(self, optparser, pkginfo, section=1):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _get_prog_name of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 18,
                  "endLine": 401,
                  "endColumn": 45,
                  "charOffset": 14857,
                  "charLength": 27,
                  "snippet": {
                    "text": " optparser._get_prog_name()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 4,
                  "endLine": 413,
                  "endColumn": 36,
                  "charOffset": 15440,
                  "charLength": 32,
                  "snippet": {
                    "text": " def format_title(pgm, section):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 4,
                  "endLine": 418,
                  "endColumn": 51,
                  "charOffset": 15616,
                  "charLength": 47,
                  "snippet": {
                    "text": " def format_short_description(pgm, short_desc):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 4,
                  "endLine": 425,
                  "endColumn": 30,
                  "charOffset": 15765,
                  "charLength": 26,
                  "snippet": {
                    "text": " def format_synopsis(pgm):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 4,
                  "endLine": 436,
                  "endColumn": 49,
                  "charOffset": 15907,
                  "charLength": 45,
                  "snippet": {
                    "text": " def format_long_description(pgm, long_desc):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 4,
                  "endLine": 448,
                  "endColumn": 30,
                  "charOffset": 16317,
                  "charLength": 26,
                  "snippet": {
                    "text": " def format_tail(pkginfo):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'output_level' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 858,
                  "startColumn": 4,
                  "endLine": 858,
                  "endColumn": 35,
                  "charOffset": 33423,
                  "charLength": 31,
                  "snippet": {
                    "text": " formatter.output_level = level"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0902(too-many-instance-attributes)",
          "level": "note",
          "message": {
            "text": "Too many instance attributes (10/7)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 1,
                  "endLine": 470,
                  "endColumn": 27,
                  "charOffset": 16764,
                  "charLength": 26,
                  "snippet": {
                    "text": "class OptionsManagerMixIn:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 4,
                  "endLine": 486,
                  "endColumn": 53,
                  "charOffset": 17391,
                  "charLength": 49,
                  "snippet": {
                    "text": " def reset_parsers(self, usage='', version=None):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 4,
                  "endLine": 518,
                  "endColumn": 66,
                  "charOffset": 19109,
                  "charLength": 62,
                  "snippet": {
                    "text": " def add_option_group(self, group_name, _, options, provider):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _sections of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 38,
                  "endLine": 530,
                  "endColumn": 69,
                  "charOffset": 19745,
                  "charLength": 31,
                  "snippet": {
                    "text": " self.cfgfile_parser._sections:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 4,
                  "endLine": 536,
                  "endColumn": 72,
                  "charOffset": 19991,
                  "charLength": 68,
                  "snippet": {
                    "text": " def add_optik_option(self, provider, optikcontainer, opt, optdict):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 4,
                  "endLine": 618,
                  "endColumn": 65,
                  "charOffset": 23550,
                  "charLength": 61,
                  "snippet": {
                    "text": " def generate_manpage(self, pkginfo, section=1, stream=None):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (16/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 4,
                  "endLine": 629,
                  "endColumn": 64,
                  "charOffset": 24023,
                  "charLength": 60,
                  "snippet": {
                    "text": " def read_config_file(self, config_file=None, verbose=None):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Argument name \"p\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 639,
                  "startColumn": 12,
                  "endLine": 639,
                  "endColumn": 64,
                  "charOffset": 24487,
                  "charLength": 52,
                  "snippet": {
                    "text": " def helpfunc(option, opt, val, p, level=helplevel):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"fp\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 68,
                  "endLine": 661,
                  "endColumn": 72,
                  "charOffset": 25604,
                  "charLength": 4,
                  "snippet": {
                    "text": " fp:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _sections of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 37,
                  "endLine": 665,
                  "endColumn": 64,
                  "charOffset": 25726,
                  "charLength": 27,
                  "snippet": {
                    "text": "(parser._sections.items()):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _sections of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 20,
                  "endLine": 667,
                  "endColumn": 60,
                  "charOffset": 25825,
                  "charLength": 40,
                  "snippet": {
                    "text": " parser._sections[sect.upper()] = values"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 4,
                  "endLine": 695,
                  "endColumn": 54,
                  "charOffset": 26875,
                  "charLength": 50,
                  "snippet": {
                    "text": " def load_configuration_from_config(self, config):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (14/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 771,
                  "startColumn": 4,
                  "endLine": 771,
                  "endColumn": 69,
                  "charOffset": 29768,
                  "charLength": 65,
                  "snippet": {
                    "text": " def set_option(self, optname, value, action=None, optdict=None):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/config.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 827,
                  "startColumn": 4,
                  "endLine": 827,
                  "endColumn": 48,
                  "charOffset": 32210,
                  "charLength": 44,
                  "snippet": {
                    "text": " def options_and_values(self, options=None):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/epylint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 1,
                  "endLine": 168,
                  "endColumn": 11,
                  "charOffset": 6585,
                  "charLength": 10,
                  "snippet": {
                    "text": "def Run():"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (8/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/graph.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 4,
                  "endLine": 30,
                  "endColumn": 71,
                  "charOffset": 929,
                  "charLength": 67,
                  "snippet": {
                    "text": " def __init__(self, graphname, rankdir=None, size=None, ratio=None,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/interfaces.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 4,
                  "endLine": 33,
                  "endColumn": 42,
                  "charOffset": 1420,
                  "charLength": 38,
                  "snippet": {
                    "text": " def is_implemented_by(cls, instance):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/interfaces.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 17,
                  "charOffset": 1343,
                  "charLength": 16,
                  "snippet": {
                    "text": "class Interface:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO(cpopa): we should have a better API for this."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 10,
                  "endLine": 614,
                  "endColumn": 61,
                  "charOffset": 26612,
                  "charLength": 51,
                  "snippet": {
                    "text": " TODO(cpopa): we should have a better API for this."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX to be correct we need to keep module_msgs_state for every"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 930,
                  "startColumn": 14,
                  "endLine": 930,
                  "endColumn": 76,
                  "charOffset": 40177,
                  "charLength": 62,
                  "snippet": {
                    "text": " XXX to be correct we need to keep module_msgs_state for every"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX code below needs refactoring to be more reporter agnostic"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 14,
                  "endLine": 1046,
                  "endColumn": 76,
                  "charOffset": 45479,
                  "charLength": 62,
                  "snippet": {
                    "text": " XXX code below needs refactoring to be more reporter agnostic"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "FIXME"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1441,
                  "startColumn": 66,
                  "endLine": 1441,
                  "endColumn": 72,
                  "charOffset": 62730,
                  "charLength": 6,
                  "snippet": {
                    "text": " FIXME"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1464/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 28,
                  "charOffset": 3286,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 30,
                  "charOffset": 3315,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 80,
                  "endColumn": 29,
                  "charOffset": 3346,
                  "charLength": 28,
                  "snippet": {
                    "text": "from pylint import reporters"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'exceptions' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 30,
                  "charOffset": 3376,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import exceptions"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 25,
                  "charOffset": 3407,
                  "charLength": 24,
                  "snippet": {
                    "text": "from pylint import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'config' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 1,
                  "endLine": 83,
                  "endColumn": 26,
                  "charOffset": 3433,
                  "charLength": 25,
                  "snippet": {
                    "text": "from pylint import config"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name '__pkginfo__' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 1,
                  "endLine": 84,
                  "endColumn": 39,
                  "charOffset": 3460,
                  "charLength": 38,
                  "snippet": {
                    "text": "from pylint.__pkginfo__ import version"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.__pkginfo__'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 1,
                  "endLine": 84,
                  "endColumn": 39,
                  "charOffset": 3460,
                  "charLength": 38,
                  "snippet": {
                    "text": "from pylint.__pkginfo__ import version"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 60,
                  "charOffset": 3500,
                  "charLength": 59,
                  "snippet": {
                    "text": "from pylint.reporters.ureports import nodes as report_nodes"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters.ureports'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 60,
                  "charOffset": 3500,
                  "charLength": 59,
                  "snippet": {
                    "text": "from pylint.reporters.ureports import nodes as report_nodes"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 4,
                  "endLine": 229,
                  "endColumn": 48,
                  "charOffset": 8605,
                  "charLength": 44,
                  "snippet": {
                    "text": " class ChildLinter(multiprocessing.Process):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Instance of 'PyLinter' has no 'msg_status' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 40,
                  "endLine": 274,
                  "endColumn": 59,
                  "charOffset": 10640,
                  "charLength": 19,
                  "snippet": {
                    "text": " linter.msg_status)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_python3_porting_mode' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 12,
                  "endLine": 235,
                  "endColumn": 59,
                  "charOffset": 8905,
                  "charLength": 47,
                  "snippet": {
                    "text": " self._python3_porting_mode = self._config.pop("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_plugins' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 12,
                  "endLine": 237,
                  "endColumn": 62,
                  "charOffset": 9012,
                  "charLength": 50,
                  "snippet": {
                    "text": " self._plugins = self._config.pop('plugins', None)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 4,
                  "endLine": 303,
                  "endColumn": 24,
                  "charOffset": 11603,
                  "charLength": 20,
                  "snippet": {
                    "text": " def make_options():"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 4,
                  "endLine": 503,
                  "endColumn": 36,
                  "charOffset": 22098,
                  "charLength": 32,
                  "snippet": {
                    "text": " def load_default_plugins(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _check_csv of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 24,
                  "endLine": 561,
                  "endColumn": 48,
                  "charOffset": 24487,
                  "charLength": 24,
                  "snippet": {
                    "text": " utils._check_csv(value)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 4,
                  "endLine": 582,
                  "endColumn": 49,
                  "charOffset": 25365,
                  "charLength": 45,
                  "snippet": {
                    "text": " def register_reporter(self, reporter_class):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 4,
                  "endLine": 585,
                  "endColumn": 28,
                  "charOffset": 25480,
                  "charLength": 24,
                  "snippet": {
                    "text": " def report_order(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 4,
                  "endLine": 618,
                  "endColumn": 40,
                  "charOffset": 26761,
                  "charLength": 36,
                  "snippet": {
                    "text": " def disable_noerror_messages(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _msgs_by_category of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 30,
                  "endLine": 619,
                  "endColumn": 73,
                  "charOffset": 26828,
                  "charLength": 43,
                  "snippet": {
                    "text": " self.msgs_store._msgs_by_category.items():"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (16/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 4,
                  "endLine": 677,
                  "endColumn": 38,
                  "charOffset": 29285,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _splitstrip of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 29,
                  "endLine": 711,
                  "endColumn": 55,
                  "charOffset": 30990,
                  "charLength": 26,
                  "snippet": {
                    "text": " utils._splitstrip(value):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (14/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 4,
                  "endLine": 677,
                  "endColumn": 38,
                  "charOffset": 29285,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _format_option_value of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 816,
                  "startColumn": 44,
                  "endLine": 816,
                  "endColumn": 72,
                  "charOffset": 35889,
                  "charLength": 28,
                  "snippet": {
                    "text": " utils._format_option_value("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (21/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 4,
                  "endLine": 822,
                  "endColumn": 48,
                  "charOffset": 36124,
                  "charLength": 44,
                  "snippet": {
                    "text": " def _parallel_task(self, files_or_modules):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Instance of 'PyLinter' has no 'msg_status' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 12,
                  "endLine": 896,
                  "endColumn": 42,
                  "charOffset": 38700,
                  "charLength": 30,
                  "snippet": {
                    "text": " self.msg_status |= msg_status"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (17/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 906,
                  "startColumn": 4,
                  "endLine": 906,
                  "endColumn": 43,
                  "charOffset": 38997,
                  "charLength": 39,
                  "snippet": {
                    "text": " def _do_check(self, files_or_modules):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0904(too-many-public-methods)",
          "level": "note",
          "message": {
            "text": "Too many public methods (23/20)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 1,
                  "endLine": 278,
                  "endColumn": 43,
                  "charOffset": 10713,
                  "charLength": 42,
                  "snippet": {
                    "text": "class PyLinter(config.OptionsManagerMixIn,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"cb\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1171,
                  "startColumn": 16,
                  "endLine": 1171,
                  "endColumn": 49,
                  "charOffset": 50629,
                  "charLength": 33,
                  "snippet": {
                    "text": " cb, takearg = search_for[option]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _unquote of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1353,
                  "startColumn": 25,
                  "endLine": 1353,
                  "endColumn": 68,
                  "charOffset": 58977,
                  "charLength": 43,
                  "snippet": {
                    "text": " utils._unquote(config_parser.get('MASTER',"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _splitstrip of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1357,
                  "startColumn": 22,
                  "endLine": 1357,
                  "endColumn": 41,
                  "charOffset": 59255,
                  "charLength": 19,
                  "snippet": {
                    "text": " utils._splitstrip("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Instance of 'PyLinter' has no 'msg_status' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1400,
                  "startColumn": 25,
                  "endLine": 1400,
                  "endColumn": 49,
                  "charOffset": 61095,
                  "charLength": 24,
                  "snippet": {
                    "text": "(self.linter.msg_status)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (14/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1225,
                  "startColumn": 4,
                  "endLine": 1225,
                  "endColumn": 59,
                  "charOffset": 52328,
                  "charLength": 55,
                  "snippet": {
                    "text": " def __init__(self, args, reporter=None, do_exit=True):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0915(too-many-statements)",
          "level": "note",
          "message": {
            "text": "Too many statements (53/50)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1225,
                  "startColumn": 4,
                  "endLine": 1225,
                  "endColumn": 59,
                  "charOffset": 52328,
                  "charLength": 55,
                  "snippet": {
                    "text": " def __init__(self, args, reporter=None, do_exit=True):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _splitstrip of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1408,
                  "startColumn": 29,
                  "endLine": 1408,
                  "endColumn": 55,
                  "charOffset": 61426,
                  "charLength": 26,
                  "snippet": {
                    "text": "(utils._splitstrip(value))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name '__pkginfo__' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1427,
                  "startColumn": 8,
                  "endLine": 1427,
                  "endColumn": 39,
                  "charOffset": 62117,
                  "charLength": 31,
                  "snippet": {
                    "text": " from pylint import __pkginfo__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _splitstrip of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1433,
                  "startColumn": 44,
                  "endLine": 1433,
                  "endColumn": 70,
                  "charOffset": 62411,
                  "charLength": 26,
                  "snippet": {
                    "text": "(utils._splitstrip(value))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1450,
                  "startColumn": 4,
                  "endLine": 1450,
                  "endColumn": 48,
                  "charOffset": 63035,
                  "charLength": 44,
                  "snippet": {
                    "text": " def cb_verbose_mode(self, *args, **kwargs):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/lint.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1453,
                  "startColumn": 1,
                  "endLine": 1453,
                  "endColumn": 63,
                  "charOffset": 63112,
                  "charLength": 62,
                  "snippet": {
                    "text": "def cb_list_confidence_levels(option, optname, value, parser):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 28,
                  "charOffset": 1555,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 41,
                  "charOffset": 1584,
                  "charLength": 40,
                  "snippet": {
                    "text": "from pylint.utils import PyLintASTWalker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 41,
                  "charOffset": 1584,
                  "charLength": 40,
                  "snippet": {
                    "text": "from pylint.utils import PyLintASTWalker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 42,
                  "charOffset": 1626,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.reporters import BaseReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 42,
                  "charOffset": 1626,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.reporters import BaseReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 40,
                  "charOffset": 1669,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.interfaces import IReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 40,
                  "charOffset": 1669,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.interfaces import IReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'lint' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 33,
                  "charOffset": 1710,
                  "charLength": 32,
                  "snippet": {
                    "text": "from pylint.lint import PyLinter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.lint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 33,
                  "charOffset": 1710,
                  "charLength": 32,
                  "snippet": {
                    "text": "from pylint.lint import PyLinter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 4,
                  "endLine": 102,
                  "endColumn": 21,
                  "charOffset": 3868,
                  "charLength": 17,
                  "snippet": {
                    "text": " def reset(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 4,
                  "endLine": 122,
                  "endColumn": 24,
                  "charOffset": 4538,
                  "charLength": 20,
                  "snippet": {
                    "text": " def finalize(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 4,
                  "endLine": 131,
                  "endColumn": 55,
                  "charOffset": 4791,
                  "charLength": 51,
                  "snippet": {
                    "text": " def on_set_current_module(self, module, filepath):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 41,
                  "charOffset": 4995,
                  "charLength": 40,
                  "snippet": {
                    "text": "class MinimalTestReporter(BaseReporter):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 4,
                  "endLine": 143,
                  "endColumn": 35,
                  "charOffset": 5042,
                  "charLength": 31,
                  "snippet": {
                    "text": " def handle_message(self, msg):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 4,
                  "endLine": 146,
                  "endColumn": 55,
                  "charOffset": 5115,
                  "charLength": 51,
                  "snippet": {
                    "text": " def on_set_current_module(self, module, filepath):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0613(unused-argument)",
          "level": "warning",
          "message": {
            "text": "Unused argument 'module'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 36,
                  "endLine": 146,
                  "endColumn": 55,
                  "charOffset": 5147,
                  "charLength": 19,
                  "snippet": {
                    "text": " module, filepath):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0613(unused-argument)",
          "level": "warning",
          "message": {
            "text": "Unused argument 'filepath'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 44,
                  "endLine": 146,
                  "endColumn": 55,
                  "charOffset": 5155,
                  "charLength": 11,
                  "snippet": {
                    "text": " filepath):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'messages' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 8,
                  "endLine": 147,
                  "endColumn": 27,
                  "charOffset": 5175,
                  "charLength": 19,
                  "snippet": {
                    "text": " self.messages = []"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 48,
                  "charOffset": 5223,
                  "charLength": 47,
                  "snippet": {
                    "text": "class Message(collections.namedtuple('Message',"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 4,
                  "endLine": 154,
                  "endColumn": 80,
                  "charOffset": 5365,
                  "charLength": 76,
                  "snippet": {
                    "text": " def __new__(cls, msg_id, line=None, node=None, args=None, confidence=None):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 4,
                  "endLine": 175,
                  "endColumn": 32,
                  "charOffset": 6046,
                  "charLength": 28,
                  "snippet": {
                    "text": " def release_messages(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 4,
                  "endLine": 181,
                  "endColumn": 84,
                  "charOffset": 6181,
                  "charLength": 80,
                  "snippet": {
                    "text": " def add_message(self, msg_id, line=None, node=None, args=None, confidence=None,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (7/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 4,
                  "endLine": 181,
                  "endColumn": 84,
                  "charOffset": 6181,
                  "charLength": 80,
                  "snippet": {
                    "text": " def add_message(self, msg_id, line=None, node=None, args=None, confidence=None,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 4,
                  "endLine": 186,
                  "endColumn": 65,
                  "charOffset": 6468,
                  "charLength": 61,
                  "snippet": {
                    "text": " def is_message_enabled(self, *unused_args, **unused_kwargs):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 4,
                  "endLine": 189,
                  "endColumn": 35,
                  "charOffset": 6557,
                  "charLength": 31,
                  "snippet": {
                    "text": " def add_stats(self, **kwargs):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 4,
                  "endLine": 195,
                  "endColumn": 33,
                  "charOffset": 6719,
                  "charLength": 29,
                  "snippet": {
                    "text": " def options_providers(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 4,
                  "endLine": 219,
                  "endColumn": 28,
                  "charOffset": 7471,
                  "charLength": 24,
                  "snippet": {
                    "text": " def setup_method(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Method name \"assertNoMessages\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 4,
                  "endLine": 227,
                  "endColumn": 32,
                  "charOffset": 7792,
                  "charLength": 28,
                  "snippet": {
                    "text": " def assertNoMessages(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Method name \"assertAddsMessages\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 4,
                  "endLine": 233,
                  "endColumn": 45,
                  "charOffset": 7989,
                  "charLength": 41,
                  "snippet": {
                    "text": " def assertAddsMessages(self, *messages):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'linter' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 8,
                  "endLine": 220,
                  "endColumn": 39,
                  "charOffset": 7504,
                  "charLength": 31,
                  "snippet": {
                    "text": " self.linter = UnittestLinter()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'checker' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 8,
                  "endLine": 221,
                  "endColumn": 86,
                  "charOffset": 7544,
                  "charLength": 78,
                  "snippet": {
                    "text": " self.checker = self.CHECKER_CLASS(self.linter) # pylint: disable=not-callable"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"test_reporter\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 1,
                  "endLine": 255,
                  "endColumn": 31,
                  "charOffset": 8870,
                  "charLength": 30,
                  "snippet": {
                    "text": "test_reporter = TestReporter()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"linter\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/testutils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 1,
                  "endLine": 256,
                  "endColumn": 20,
                  "charOffset": 8902,
                  "charLength": 19,
                  "snippet": {
                    "text": "linter = PyLinter()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX measured in bytes for utf-8, divide by two for chars?"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 43,
                  "endLine": 439,
                  "endColumn": 101,
                  "charOffset": 17622,
                  "charLength": 58,
                  "snippet": {
                    "text": " XXX measured in bytes for utf-8, divide by two for chars?"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "FIXME p3k : the SyntaxError is a Python bug and should be"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1053,
                  "startColumn": 18,
                  "endLine": 1053,
                  "endColumn": 76,
                  "charOffset": 43599,
                  "charLength": 58,
                  "snippet": {
                    "text": " FIXME p3k : the SyntaxError is a Python bug and should be"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX : should be possible to merge needed_checkers and add_checker"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1113,
                  "startColumn": 10,
                  "endLine": 1113,
                  "endColumn": 76,
                  "charOffset": 46084,
                  "charLength": 66,
                  "snippet": {
                    "text": " XXX : should be possible to merge needed_checkers and add_checker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1358/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 80,
                  "charOffset": 2628,
                  "charLength": 79,
                  "snippet": {
                    "text": "from pylint.interfaces import IRawChecker, ITokenChecker, UNDEFINED, implements"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 80,
                  "charOffset": 2628,
                  "charLength": 79,
                  "snippet": {
                    "text": "from pylint.interfaces import IRawChecker, ITokenChecker, UNDEFINED, implements"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 52,
                  "charOffset": 2709,
                  "charLength": 51,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.nodes import Section"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters.ureports.nodes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 52,
                  "charOffset": 2709,
                  "charLength": 51,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.nodes import Section"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'exceptions' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 89,
                  "charOffset": 2762,
                  "charLength": 88,
                  "snippet": {
                    "text": "from pylint.exceptions import InvalidMessageError, UnknownMessageError, EmptyReportError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.exceptions'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 89,
                  "charOffset": 2762,
                  "charLength": 88,
                  "snippet": {
                    "text": "from pylint.exceptions import InvalidMessageError, UnknownMessageError, EmptyReportError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 20,
                  "charOffset": 3590,
                  "charLength": 19,
                  "snippet": {
                    "text": "class WarningScope:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 20,
                  "charOffset": 3590,
                  "charLength": 19,
                  "snippet": {
                    "text": "class WarningScope:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 4,
                  "endLine": 108,
                  "endColumn": 65,
                  "charOffset": 3954,
                  "charLength": 61,
                  "snippet": {
                    "text": " def __new__(cls, msg_id, symbol, location, msg, confidence):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 1,
                  "endLine": 140,
                  "endColumn": 22,
                  "charOffset": 5090,
                  "charLength": 21,
                  "snippet": {
                    "text": "def category_id(cid):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 1,
                  "endLine": 153,
                  "endColumn": 56,
                  "charOffset": 5539,
                  "charLength": 55,
                  "snippet": {
                    "text": "def decoding_stream(stream, encoding, errors='strict'):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 1,
                  "endLine": 161,
                  "endColumn": 29,
                  "charOffset": 5816,
                  "charLength": 28,
                  "snippet": {
                    "text": "def tokenize_module(module):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 1,
                  "endLine": 166,
                  "endColumn": 50,
                  "charOffset": 5971,
                  "charLength": 49,
                  "snippet": {
                    "text": "def build_message_def(checker, msgid, msg_tuple):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 1,
                  "endLine": 187,
                  "endColumn": 25,
                  "charOffset": 6794,
                  "charLength": 24,
                  "snippet": {
                    "text": "class MessageDefinition:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0902(too-many-instance-attributes)",
          "level": "note",
          "message": {
            "text": "Too many instance attributes (9/7)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 1,
                  "endLine": 187,
                  "endColumn": 25,
                  "charOffset": 6794,
                  "charLength": 24,
                  "snippet": {
                    "text": "class MessageDefinition:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (10/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 4,
                  "endLine": 188,
                  "endColumn": 66,
                  "charOffset": 6823,
                  "charLength": 62,
                  "snippet": {
                    "text": " def __init__(self, checker, msgid, msg, descr, symbol, scope,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 4,
                  "endLine": 262,
                  "endColumn": 39,
                  "charOffset": 9630,
                  "charLength": 35,
                  "snippet": {
                    "text": " def clear_by_id_managed_msgs(cls):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 4,
                  "endLine": 266,
                  "endColumn": 37,
                  "charOffset": 9732,
                  "charLength": 33,
                  "snippet": {
                    "text": " def get_by_id_managed_msgs(cls):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 4,
                  "endLine": 292,
                  "endColumn": 96,
                  "charOffset": 11010,
                  "charLength": 92,
                  "snippet": {
                    "text": " def _set_msg_status(self, msgid, enable, scope='package', line=None, ignore_unknown=False):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _msgs_by_category of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 26,
                  "endLine": 306,
                  "endColumn": 72,
                  "charOffset": 11646,
                  "charLength": 46,
                  "snippet": {
                    "text": " self.msgs_store._msgs_by_category.get(catid):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _alternative_names of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 33,
                  "endLine": 315,
                  "endColumn": 64,
                  "charOffset": 12042,
                  "charLength": 31,
                  "snippet": {
                    "text": " msgs_store._alternative_names:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (18/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 4,
                  "endLine": 292,
                  "endColumn": 96,
                  "charOffset": 11010,
                  "charLength": 92,
                  "snippet": {
                    "text": " def _set_msg_status(self, msgid, enable, scope='package', line=None, ignore_unknown=False):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _module_msgs_state of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 23,
                  "endLine": 368,
                  "endColumn": 66,
                  "charOffset": 14155,
                  "charLength": 43,
                  "snippet": {
                    "text": " self.file_state._module_msgs_state[msgid]:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _module_msgs_state of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 19,
                  "endLine": 393,
                  "endColumn": 67,
                  "charOffset": 15178,
                  "charLength": 48,
                  "snippet": {
                    "text": " self.file_state._module_msgs_state[msgid][line]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _raw_module_msgs_state of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 40,
                  "endLine": 401,
                  "endColumn": 79,
                  "charOffset": 15740,
                  "charLength": 39,
                  "snippet": {
                    "text": " self.file_state._raw_module_msgs_state"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (7/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 4,
                  "endLine": 405,
                  "endColumn": 92,
                  "charOffset": 15902,
                  "charLength": 88,
                  "snippet": {
                    "text": " def add_message(self, msg_descr, line=None, node=None, args=None, confidence=UNDEFINED,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (17/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 4,
                  "endLine": 405,
                  "endColumn": 92,
                  "charOffset": 15902,
                  "charLength": 88,
                  "snippet": {
                    "text": " def add_message(self, msg_descr, line=None, node=None, args=None, confidence=UNDEFINED,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (13/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 4,
                  "endLine": 405,
                  "endColumn": 92,
                  "charOffset": 15902,
                  "charLength": 88,
                  "snippet": {
                    "text": " def add_message(self, msg_descr, line=None, node=None, args=None, confidence=UNDEFINED,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (17/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 4,
                  "endLine": 604,
                  "endColumn": 65,
                  "charOffset": 24704,
                  "charLength": 61,
                  "snippet": {
                    "text": " def _collect_block_lines(self, msgs_store, node, msg_state):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (14/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 4,
                  "endLine": 604,
                  "endColumn": 65,
                  "charOffset": 24704,
                  "charLength": 61,
                  "snippet": {
                    "text": " def _collect_block_lines(self, msgs_store, node, msg_state):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (7/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 4,
                  "endLine": 669,
                  "endColumn": 63,
                  "charOffset": 27694,
                  "charLength": 59,
                  "snippet": {
                    "text": " def handle_ignored_message(self, state_scope, msgid, line,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 4,
                  "endLine": 684,
                  "endColumn": 62,
                  "charOffset": 28396,
                  "charLength": 58,
                  "snippet": {
                    "text": " def iter_spurious_suppression_messages(self, msgs_store):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 4,
                  "endLine": 696,
                  "endColumn": 45,
                  "charOffset": 29098,
                  "charLength": 41,
                  "snippet": {
                    "text": " def get_effective_max_line_number(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (17/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 1,
                  "endLine": 1024,
                  "endColumn": 65,
                  "charOffset": 42394,
                  "charLength": 64,
                  "snippet": {
                    "text": "def expand_modules(files_or_modules, black_list, black_list_re):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (17/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 1,
                  "endLine": 1024,
                  "endColumn": 65,
                  "charOffset": 42394,
                  "charLength": 64,
                  "snippet": {
                    "text": "def expand_modules(files_or_modules, black_list, black_list_re):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1094,
                  "startColumn": 1,
                  "endLine": 1094,
                  "endColumn": 23,
                  "charOffset": 45413,
                  "charLength": 22,
                  "snippet": {
                    "text": "class PyLintASTWalker:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"cb\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 12,
                  "endLine": 1158,
                  "endColumn": 38,
                  "charOffset": 48029,
                  "charLength": 26,
                  "snippet": {
                    "text": " cb in visit_events or ():"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"cb\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 12,
                  "endLine": 1163,
                  "endColumn": 38,
                  "charOffset": 48200,
                  "charLength": 26,
                  "snippet": {
                    "text": " cb in leave_events or ():"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 1,
                  "endLine": 1215,
                  "endColumn": 91,
                  "charOffset": 50154,
                  "charLength": 90,
                  "snippet": {
                    "text": "def deprecated_option(shortname=None, opt_type=None, help_msg=None, deprecation_msg=None):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"format_section\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1339,
                  "startColumn": 1,
                  "endLine": 1339,
                  "endColumn": 37,
                  "charOffset": 54284,
                  "charLength": 36,
                  "snippet": {
                    "text": "format_section = _ini_format_section"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing module docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 77,
                  "charLength": 76,
                  "snippet": {
                    "text": "# Copyright (c) 2008, 2012 LOGILAB S.A. (Paris, FRANCE) <contact@logilab.fr>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'lint' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 4,
                  "endLine": 17,
                  "endColumn": 32,
                  "charOffset": 590,
                  "charLength": 28,
                  "snippet": {
                    "text": " from pylint.lint import Run"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.lint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 4,
                  "endLine": 17,
                  "endColumn": 32,
                  "charOffset": 590,
                  "charLength": 28,
                  "snippet": {
                    "text": " from pylint.lint import Run"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'epylint' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 4,
                  "endLine": 25,
                  "endColumn": 35,
                  "charOffset": 756,
                  "charLength": 31,
                  "snippet": {
                    "text": " from pylint.epylint import Run"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.epylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 4,
                  "endLine": 25,
                  "endColumn": 35,
                  "charOffset": 756,
                  "charLength": 31,
                  "snippet": {
                    "text": " from pylint.epylint import Run"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 4,
                  "endLine": 30,
                  "endColumn": 42,
                  "charOffset": 852,
                  "charLength": 38,
                  "snippet": {
                    "text": " from pylint.pyreverse.main import Run"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.main'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 4,
                  "endLine": 30,
                  "endColumn": 42,
                  "charOffset": 852,
                  "charLength": 38,
                  "snippet": {
                    "text": " from pylint.pyreverse.main import Run"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 4,
                  "endLine": 35,
                  "endColumn": 44,
                  "charOffset": 963,
                  "charLength": 40,
                  "snippet": {
                    "text": " from pylint.checkers.similar import Run"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.similar'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 4,
                  "endLine": 35,
                  "endColumn": 44,
                  "charOffset": 963,
                  "charLength": 40,
                  "snippet": {
                    "text": " from pylint.checkers.similar import Run"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing module docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__main__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Module 'pylint' has no 'run_pylint' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/__main__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 20,
                  "charOffset": 192,
                  "charLength": 19,
                  "snippet": {
                    "text": "pylint.run_pylint()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 28,
                  "charOffset": 410,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 51,
                  "charOffset": 439,
                  "charLength": 50,
                  "snippet": {
                    "text": "from pylint.checkers import utils as checker_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 51,
                  "charOffset": 439,
                  "charLength": 50,
                  "snippet": {
                    "text": "from pylint.checkers import utils as checker_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 30,
                  "charOffset": 491,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 25,
                  "charOffset": 522,
                  "charLength": 24,
                  "snippet": {
                    "text": "from pylint import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 42,
                  "charOffset": 552,
                  "charLength": 41,
                  "snippet": {
                    "text": "class AsyncChecker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 20,
                  "charOffset": 1310,
                  "charLength": 16,
                  "snippet": {
                    "text": " def open(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 4,
                  "endLine": 40,
                  "endColumn": 44,
                  "charOffset": 1491,
                  "charLength": 40,
                  "snippet": {
                    "text": " def visit_asyncfunctiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 4,
                  "endLine": 47,
                  "endColumn": 37,
                  "charOffset": 1896,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_asyncwith(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_ignore_mixin_members' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/async.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 8,
                  "endLine": 37,
                  "endColumn": 91,
                  "charOffset": 1335,
                  "charLength": 83,
                  "snippet": {
                    "text": " self._ignore_mixin_members = utils.get_global_option(self, 'ignore-mixin-members')"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1946/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 28,
                  "charOffset": 2302,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'exceptions' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 30,
                  "charOffset": 2331,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import exceptions"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 30,
                  "charOffset": 2362,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 34,
                  "charOffset": 2393,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 34,
                  "charOffset": 2393,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 29,
                  "charOffset": 2428,
                  "charLength": 28,
                  "snippet": {
                    "text": "from pylint import reporters"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 55,
                  "charOffset": 2458,
                  "charLength": 54,
                  "snippet": {
                    "text": "from pylint.checkers.utils import get_node_last_lineno"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 55,
                  "charOffset": 2458,
                  "charLength": 54,
                  "snippet": {
                    "text": "from pylint.checkers.utils import get_node_last_lineno"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 62,
                  "charOffset": 2514,
                  "charLength": 61,
                  "snippet": {
                    "text": "from pylint.reporters.ureports import nodes as reporter_nodes"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters.ureports'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 62,
                  "charOffset": 2514,
                  "charLength": 61,
                  "snippet": {
                    "text": "from pylint.reporters.ureports import nodes as reporter_nodes"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 34,
                  "charOffset": 2577,
                  "charLength": 33,
                  "snippet": {
                    "text": "import pylint.utils as lint_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 34,
                  "charOffset": 2577,
                  "charLength": 33,
                  "snippet": {
                    "text": "import pylint.utils as lint_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 19,
                  "charOffset": 2616,
                  "charLength": 18,
                  "snippet": {
                    "text": "class NamingStyle:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 4,
                  "endLine": 73,
                  "endColumn": 35,
                  "charOffset": 3029,
                  "charLength": 31,
                  "snippet": {
                    "text": " def get_regex(cls, name_type):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 19,
                  "charOffset": 2616,
                  "charLength": 18,
                  "snippet": {
                    "text": "class NamingStyle:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 35,
                  "charOffset": 3561,
                  "charLength": 34,
                  "snippet": {
                    "text": "class SnakeCaseStyle(NamingStyle):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 35,
                  "charOffset": 4055,
                  "charLength": 34,
                  "snippet": {
                    "text": "class CamelCaseStyle(NamingStyle):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 1,
                  "endLine": 108,
                  "endColumn": 36,
                  "charOffset": 4547,
                  "charLength": 35,
                  "snippet": {
                    "text": "class PascalCaseStyle(NamingStyle):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 1,
                  "endLine": 118,
                  "endColumn": 35,
                  "charOffset": 5024,
                  "charLength": 34,
                  "snippet": {
                    "text": "class UpperCaseStyle(NamingStyle):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 29,
                  "charOffset": 5489,
                  "charLength": 28,
                  "snippet": {
                    "text": "class AnyStyle(NamingStyle):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 29,
                  "charOffset": 5489,
                  "charLength": 28,
                  "snippet": {
                    "text": "class AnyStyle(NamingStyle):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 1,
                  "endLine": 387,
                  "endColumn": 43,
                  "charOffset": 15053,
                  "charLength": 42,
                  "snippet": {
                    "text": "class _BasicChecker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 1,
                  "endLine": 392,
                  "endColumn": 40,
                  "charOffset": 15170,
                  "charLength": 39,
                  "snippet": {
                    "text": "class BasicErrorChecker(_BasicChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 4,
                  "endLine": 470,
                  "endColumn": 36,
                  "charOffset": 19664,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_classdef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 4,
                  "endLine": 475,
                  "endColumn": 34,
                  "charOffset": 19869,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_assign(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 4,
                  "endLine": 508,
                  "endColumn": 39,
                  "charOffset": 21338,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 591,
                  "startColumn": 4,
                  "endLine": 591,
                  "endColumn": 34,
                  "charOffset": 24841,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_return(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 4,
                  "endLine": 596,
                  "endColumn": 33,
                  "charOffset": 25062,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_yield(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 600,
                  "startColumn": 4,
                  "endLine": 600,
                  "endColumn": 37,
                  "charOffset": 25197,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_yieldfrom(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 4,
                  "endLine": 604,
                  "endColumn": 36,
                  "charOffset": 25348,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_continue(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 4,
                  "endLine": 608,
                  "endColumn": 33,
                  "charOffset": 25476,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_break(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 4,
                  "endLine": 612,
                  "endColumn": 31,
                  "charOffset": 25607,
                  "charLength": 27,
                  "snippet": {
                    "text": " def visit_for(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 4,
                  "endLine": 616,
                  "endColumn": 33,
                  "charOffset": 25732,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_while(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 4,
                  "endLine": 649,
                  "endColumn": 36,
                  "charOffset": 27021,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_nonlocal(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 854,
                  "startColumn": 4,
                  "endLine": 854,
                  "endColumn": 30,
                  "charOffset": 36858,
                  "charLength": 26,
                  "snippet": {
                    "text": " def visit_if(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 858,
                  "startColumn": 4,
                  "endLine": 858,
                  "endColumn": 33,
                  "charOffset": 36999,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_ifexp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 4,
                  "endLine": 862,
                  "endColumn": 41,
                  "charOffset": 37143,
                  "charLength": 37,
                  "snippet": {
                    "text": " def visit_comprehension(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (10/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 4,
                  "endLine": 966,
                  "endColumn": 34,
                  "charOffset": 41812,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_lambda(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (13/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 4,
                  "endLine": 966,
                  "endColumn": 34,
                  "charOffset": 41812,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_lambda(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1218,
                  "startColumn": 20,
                  "endLine": 1218,
                  "endColumn": 57,
                  "charOffset": 52797,
                  "charLength": 37,
                  "snippet": {
                    "text": "(argument._proxied.name == 'dict' and"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1219,
                  "startColumn": 48,
                  "endLine": 1219,
                  "endColumn": 69,
                  "charOffset": 52883,
                  "charLength": 21,
                  "snippet": {
                    "text": "(argument._proxied)):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1223,
                  "startColumn": 39,
                  "endLine": 1223,
                  "endColumn": 71,
                  "charOffset": 53132,
                  "charLength": 32,
                  "snippet": {
                    "text": " argument._proxied.ancestors()):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (17/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1195,
                  "startColumn": 4,
                  "endLine": 1195,
                  "endColumn": 37,
                  "charOffset": 51777,
                  "charLength": 33,
                  "snippet": {
                    "text": " def _check_reversed(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1247,
                  "startColumn": 4,
                  "endLine": 1247,
                  "endColumn": 32,
                  "charOffset": 54244,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_with(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1326,
                  "startColumn": 1,
                  "endLine": 1326,
                  "endColumn": 34,
                  "charOffset": 57320,
                  "charLength": 33,
                  "snippet": {
                    "text": "class NameChecker(_BasicChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1389,
                  "startColumn": 4,
                  "endLine": 1389,
                  "endColumn": 20,
                  "charOffset": 60163,
                  "charLength": 16,
                  "snippet": {
                    "text": " def open(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1429,
                  "startColumn": 4,
                  "endLine": 1429,
                  "endColumn": 34,
                  "charOffset": 61941,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_module(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1433,
                  "startColumn": 4,
                  "endLine": 1433,
                  "endColumn": 68,
                  "charOffset": 62076,
                  "charLength": 64,
                  "snippet": {
                    "text": " def leave_module(self, node): # pylint: disable=unused-argument"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1452,
                  "startColumn": 4,
                  "endLine": 1452,
                  "endColumn": 36,
                  "charOffset": 63015,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_classdef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1460,
                  "startColumn": 4,
                  "endLine": 1460,
                  "endColumn": 39,
                  "charOffset": 63442,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1482,
                  "startColumn": 4,
                  "endLine": 1482,
                  "endColumn": 34,
                  "charOffset": 64442,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_global(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'stats' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1390,
                  "startColumn": 8,
                  "endLine": 1390,
                  "endColumn": 61,
                  "charOffset": 60188,
                  "charLength": 53,
                  "snippet": {
                    "text": " self.stats = self.linter.add_stats(badname_module=0,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1588,
                  "startColumn": 1,
                  "endLine": 1588,
                  "endColumn": 39,
                  "charOffset": 69263,
                  "charLength": 38,
                  "snippet": {
                    "text": "class DocStringChecker(_BasicChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1615,
                  "startColumn": 4,
                  "endLine": 1615,
                  "endColumn": 20,
                  "charOffset": 70533,
                  "charLength": 16,
                  "snippet": {
                    "text": " def open(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1622,
                  "startColumn": 4,
                  "endLine": 1622,
                  "endColumn": 34,
                  "charOffset": 70892,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_module(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1626,
                  "startColumn": 4,
                  "endLine": 1626,
                  "endColumn": 36,
                  "charOffset": 71043,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_classdef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1640,
                  "startColumn": 4,
                  "endLine": 1640,
                  "endColumn": 39,
                  "charOffset": 71577,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'stats' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1616,
                  "startColumn": 8,
                  "endLine": 1616,
                  "endColumn": 66,
                  "charOffset": 70558,
                  "charLength": 58,
                  "snippet": {
                    "text": " self.stats = self.linter.add_stats(undocumented_module=0,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 4,
                  "endLine": 1712,
                  "endColumn": 32,
                  "charOffset": 75031,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_pass(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1703,
                  "startColumn": 1,
                  "endLine": 1703,
                  "endColumn": 34,
                  "charOffset": 74657,
                  "charLength": 33,
                  "snippet": {
                    "text": "class PassChecker(_BasicChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1717,
                  "startColumn": 1,
                  "endLine": 1717,
                  "endColumn": 52,
                  "charOffset": 75181,
                  "charLength": 51,
                  "snippet": {
                    "text": "class LambdaForComprehensionChecker(_BasicChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1886,
                  "startColumn": 4,
                  "endLine": 1886,
                  "endColumn": 35,
                  "charOffset": 83182,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_compare(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/base.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1755,
                  "startColumn": 1,
                  "endLine": 1755,
                  "endColumn": 40,
                  "charOffset": 76593,
                  "charLength": 39,
                  "snippet": {
                    "text": "class ComparisonChecker(_BasicChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 61,
                  "endLine": 796,
                  "endColumn": 65,
                  "charOffset": 33442,
                  "charLength": 4,
                  "snippet": {
                    "text": " XXX"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX infer to be more safe and less dirty ??"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 14,
                  "endLine": 1092,
                  "endColumn": 58,
                  "charOffset": 46074,
                  "charLength": 44,
                  "snippet": {
                    "text": " XXX infer to be more safe and less dirty ??"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX refactor, probably much simpler now that E0201 is in type checker"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1147,
                  "startColumn": 10,
                  "endLine": 1147,
                  "endColumn": 80,
                  "charOffset": 48490,
                  "charLength": 70,
                  "snippet": {
                    "text": " XXX refactor, probably much simpler now that E0201 is in type checker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1547/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 46,
                  "charOffset": 2024,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 46,
                  "charOffset": 2024,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 40,
                  "charOffset": 2071,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 40,
                  "charOffset": 2071,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 36,
                  "charOffset": 2112,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.checkers.utils import ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 36,
                  "charOffset": 2112,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.checkers.utils import ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 43,
                  "charOffset": 2475,
                  "charLength": 42,
                  "snippet": {
                    "text": "from pylint.utils import get_global_option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 43,
                  "charOffset": 2475,
                  "charLength": 42,
                  "snippet": {
                    "text": "from pylint.utils import get_global_option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 27,
                  "endLine": 337,
                  "endColumn": 42,
                  "charOffset": 12994,
                  "charLength": 15,
                  "snippet": {
                    "text": " bound._proxied"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 31,
                  "endLine": 339,
                  "endColumn": 49,
                  "charOffset": 13106,
                  "charLength": 18,
                  "snippet": {
                    "text": " func_obj._proxied"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (15/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 4,
                  "endLine": 688,
                  "endColumn": 37,
                  "charOffset": 28103,
                  "charLength": 33,
                  "snippet": {
                    "text": " def leave_classdef(self, cnode):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (15/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 4,
                  "endLine": 747,
                  "endColumn": 39,
                  "charOffset": 31069,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (16/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 4,
                  "endLine": 810,
                  "endColumn": 57,
                  "charOffset": 34089,
                  "charLength": 53,
                  "snippet": {
                    "text": " def _check_useless_super_delegation(self, function):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (10/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 4,
                  "endLine": 810,
                  "endColumn": 57,
                  "charOffset": 34089,
                  "charLength": 53,
                  "snippet": {
                    "text": " def _check_useless_super_delegation(self, function):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (16/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 4,
                  "endLine": 810,
                  "endColumn": 57,
                  "charOffset": 34089,
                  "charLength": 53,
                  "snippet": {
                    "text": " def _check_useless_super_delegation(self, function):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 984,
                  "startColumn": 4,
                  "endLine": 984,
                  "endColumn": 38,
                  "charOffset": 41411,
                  "charLength": 34,
                  "snippet": {
                    "text": " def visit_assignattr(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 996,
                  "startColumn": 20,
                  "endLine": 996,
                  "endColumn": 37,
                  "charOffset": 41922,
                  "charLength": 17,
                  "snippet": {
                    "text": " infered._proxied"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1030,
                  "startColumn": 4,
                  "endLine": 1030,
                  "endColumn": 41,
                  "charOffset": 43593,
                  "charLength": 37,
                  "snippet": {
                    "text": " def visit_assign(self, assign_node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1250,
                  "startColumn": 4,
                  "endLine": 1250,
                  "endColumn": 68,
                  "charOffset": 53248,
                  "charLength": 64,
                  "snippet": {
                    "text": " def _check_first_arg_config(self, first, config, node, message,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1319,
                  "startColumn": 39,
                  "endLine": 1319,
                  "endColumn": 77,
                  "charOffset": 56159,
                  "charLength": 38,
                  "snippet": {
                    "text": "(klass._proxied, astroid.ClassDef) and"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1320,
                  "startColumn": 46,
                  "endLine": 1320,
                  "endColumn": 66,
                  "charOffset": 56244,
                  "charLength": 20,
                  "snippet": {
                    "text": "(klass._proxied) and"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1321,
                  "startColumn": 28,
                  "endLine": 1321,
                  "endColumn": 61,
                  "charOffset": 56293,
                  "charLength": 33,
                  "snippet": {
                    "text": " klass._proxied.name == 'super'):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (13/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1287,
                  "startColumn": 4,
                  "endLine": 1287,
                  "endColumn": 33,
                  "charOffset": 54715,
                  "charLength": 29,
                  "snippet": {
                    "text": " def _check_init(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1422,
                  "startColumn": 4,
                  "endLine": 1422,
                  "endColumn": 39,
                  "charOffset": 60921,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/classes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 1,
                  "endLine": 1394,
                  "endColumn": 42,
                  "charOffset": 59496,
                  "charLength": 41,
                  "snippet": {
                    "text": "class SpecialMethodsChecker(BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 46,
                  "charOffset": 1049,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 46,
                  "charOffset": 1049,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 40,
                  "charOffset": 1096,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 40,
                  "charOffset": 1096,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 51,
                  "charOffset": 1137,
                  "charLength": 50,
                  "snippet": {
                    "text": "from pylint.checkers import utils as checker_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 51,
                  "charOffset": 1137,
                  "charLength": 50,
                  "snippet": {
                    "text": "from pylint.checkers import utils as checker_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 49,
                  "charOffset": 1189,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 49,
                  "charOffset": 1189,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/design_analysis.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 25,
                  "charOffset": 1239,
                  "charLength": 24,
                  "snippet": {
                    "text": "from pylint import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: explain why"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 14,
                  "endLine": 226,
                  "endColumn": 32,
                  "charOffset": 9934,
                  "charLength": 18,
                  "snippet": {
                    "text": " TODO: explain why"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 28,
                  "charOffset": 1340,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 34,
                  "charOffset": 1369,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 34,
                  "charOffset": 1369,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 30,
                  "charOffset": 1404,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 4,
                  "endLine": 146,
                  "endColumn": 27,
                  "charOffset": 6802,
                  "charLength": 23,
                  "snippet": {
                    "text": " def visit(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 4,
                  "endLine": 161,
                  "endColumn": 32,
                  "charOffset": 7298,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_name(self, name):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 4,
                  "endLine": 167,
                  "endColumn": 32,
                  "charOffset": 7492,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, call):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 4,
                  "endLine": 184,
                  "endColumn": 34,
                  "charOffset": 8127,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_const(self, const):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 4,
                  "endLine": 190,
                  "endColumn": 40,
                  "charOffset": 8438,
                  "charLength": 36,
                  "snippet": {
                    "text": " def visit_instance(self, instance):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 4,
                  "endLine": 198,
                  "endColumn": 35,
                  "charOffset": 8696,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_classdef(self, cls):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 4,
                  "endLine": 206,
                  "endColumn": 39,
                  "charOffset": 9051,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_tuple(self, tuple_node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 4,
                  "endLine": 255,
                  "endColumn": 20,
                  "charOffset": 10925,
                  "charLength": 16,
                  "snippet": {
                    "text": " def open(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 4,
                  "endLine": 263,
                  "endColumn": 33,
                  "charOffset": 11329,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_raise(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (15/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 4,
                  "endLine": 392,
                  "endColumn": 37,
                  "charOffset": 17080,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_tryexcept(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_builtin_exceptions' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 8,
                  "endLine": 256,
                  "endColumn": 57,
                  "charOffset": 10950,
                  "charLength": 49,
                  "snippet": {
                    "text": " self._builtin_exceptions = _builtin_exceptions()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO tabs should not be replaced by some random (8) number of spaces"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 6,
                  "endLine": 209,
                  "endColumn": 75,
                  "charOffset": 8655,
                  "charLength": 69,
                  "snippet": {
                    "text": " TODO tabs should not be replaced by some random (8) number of spaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX block visit of child nodes"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 997,
                  "startColumn": 21,
                  "endLine": 997,
                  "endColumn": 52,
                  "charOffset": 42381,
                  "charLength": 31,
                  "snippet": {
                    "text": " XXX block visit of child nodes"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1148/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 74,
                  "charOffset": 2384,
                  "charLength": 73,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker, IAstroidChecker, IRawChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 74,
                  "charOffset": 2384,
                  "charLength": 73,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker, IAstroidChecker, IRawChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 45,
                  "charOffset": 2459,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.checkers import BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 45,
                  "charOffset": 2459,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.checkers import BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 49,
                  "charOffset": 2505,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 49,
                  "charOffset": 2505,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 50,
                  "charOffset": 2555,
                  "charLength": 49,
                  "snippet": {
                    "text": "from pylint.utils import WarningScope, OPTION_RGX"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 50,
                  "charOffset": 2555,
                  "charLength": 49,
                  "snippet": {
                    "text": "from pylint.utils import WarningScope, OPTION_RGX"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 4,
                  "endLine": 236,
                  "endColumn": 23,
                  "charOffset": 9761,
                  "charLength": 19,
                  "snippet": {
                    "text": " def __init__(self,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 1,
                  "endLine": 229,
                  "endColumn": 24,
                  "charOffset": 9549,
                  "charLength": 23,
                  "snippet": {
                    "text": "class _ContinuedIndent:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Function name \"_Indentations\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 1,
                  "endLine": 275,
                  "endColumn": 26,
                  "charOffset": 10989,
                  "charLength": 25,
                  "snippet": {
                    "text": "def _Indentations(*args):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Function name \"_BeforeBlockIndentations\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 1,
                  "endLine": 280,
                  "endColumn": 49,
                  "charOffset": 11115,
                  "charLength": 48,
                  "snippet": {
                    "text": "def _BeforeBlockIndentations(single, with_body):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 4,
                  "endLine": 299,
                  "endColumn": 26,
                  "charOffset": 11795,
                  "charLength": 22,
                  "snippet": {
                    "text": " def token(self, idx):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 4,
                  "endLine": 302,
                  "endColumn": 25,
                  "charOffset": 11861,
                  "charLength": 21,
                  "snippet": {
                    "text": " def type(self, idx):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 4,
                  "endLine": 305,
                  "endColumn": 31,
                  "charOffset": 11926,
                  "charLength": 27,
                  "snippet": {
                    "text": " def start_line(self, idx):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 4,
                  "endLine": 308,
                  "endColumn": 30,
                  "charOffset": 12000,
                  "charLength": 26,
                  "snippet": {
                    "text": " def start_col(self, idx):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 4,
                  "endLine": 311,
                  "endColumn": 25,
                  "charOffset": 12073,
                  "charLength": 21,
                  "snippet": {
                    "text": " def line(self, idx):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 4,
                  "endLine": 342,
                  "endColumn": 27,
                  "charOffset": 13135,
                  "charLength": 23,
                  "snippet": {
                    "text": " def has_content(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 4,
                  "endLine": 384,
                  "endColumn": 76,
                  "charOffset": 14471,
                  "charLength": 72,
                  "snippet": {
                    "text": " def add_block_warning(self, token_position, state, valid_indentations):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 4,
                  "endLine": 464,
                  "endColumn": 25,
                  "charOffset": 18381,
                  "charLength": 21,
                  "snippet": {
                    "text": " def pop_token(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 4,
                  "endLine": 577,
                  "endColumn": 38,
                  "charOffset": 23446,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_module(self, module):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (7/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 4,
                  "endLine": 582,
                  "endColumn": 57,
                  "charOffset": 23639,
                  "charLength": 53,
                  "snippet": {
                    "text": " def _check_keyword_parentheses(self, tokens, start):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (19/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 4,
                  "endLine": 582,
                  "endColumn": 57,
                  "charOffset": 23639,
                  "charLength": 53,
                  "snippet": {
                    "text": " def _check_keyword_parentheses(self, tokens, start):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (20/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 4,
                  "endLine": 751,
                  "endColumn": 49,
                  "charOffset": 30780,
                  "charLength": 45,
                  "snippet": {
                    "text": " def _check_space(self, tokens, i, policies):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"ok\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 16,
                  "endLine": 789,
                  "endColumn": 88,
                  "charOffset": 32200,
                  "charLength": 72,
                  "snippet": {
                    "text": " ok, policy, position in zip(good_space, policies, ('before', 'after')):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (17/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 829,
                  "startColumn": 4,
                  "endLine": 829,
                  "endColumn": 38,
                  "charOffset": 33514,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _pragma_lineno of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 916,
                  "startColumn": 35,
                  "endLine": 916,
                  "endColumn": 79,
                  "charOffset": 37914,
                  "charLength": 44,
                  "snippet": {
                    "text": "(self.linter._pragma_lineno.get, names)), 1)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (17/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 829,
                  "startColumn": 4,
                  "endLine": 829,
                  "endColumn": 38,
                  "charOffset": 33514,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0915(too-many-statements)",
          "level": "note",
          "message": {
            "text": "Too many statements (56/50)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 829,
                  "startColumn": 4,
                  "endLine": 829,
                  "endColumn": 38,
                  "charOffset": 33514,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_keywords_with_parens' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 8,
                  "endLine": 578,
                  "endColumn": 43,
                  "charOffset": 23489,
                  "charLength": 35,
                  "snippet": {
                    "text": " self._keywords_with_parens = set()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_last_line_ending' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 845,
                  "startColumn": 8,
                  "endLine": 845,
                  "endColumn": 38,
                  "charOffset": 34128,
                  "charLength": 30,
                  "snippet": {
                    "text": " self._last_line_ending = None"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_last_line_ending' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 8,
                  "endLine": 932,
                  "endColumn": 45,
                  "charOffset": 38662,
                  "charLength": 37,
                  "snippet": {
                    "text": " self._last_line_ending = line_ending"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_current_line' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/format.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 8,
                  "endLine": 848,
                  "endColumn": 69,
                  "charOffset": 34202,
                  "charLength": 61,
                  "snippet": {
                    "text": " self._current_line = ContinuedLineState(tokens, self.config)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 46,
                  "charOffset": 1891,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 46,
                  "charOffset": 1891,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 43,
                  "charOffset": 1938,
                  "charLength": 42,
                  "snippet": {
                    "text": "from pylint.utils import get_global_option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 43,
                  "charOffset": 1938,
                  "charLength": 42,
                  "snippet": {
                    "text": "from pylint.utils import get_global_option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'exceptions' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 47,
                  "charOffset": 1982,
                  "charLength": 46,
                  "snippet": {
                    "text": "from pylint.exceptions import EmptyReportError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.exceptions'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 47,
                  "charOffset": 1982,
                  "charLength": 46,
                  "snippet": {
                    "text": "from pylint.exceptions import EmptyReportError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 40,
                  "charOffset": 2030,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 40,
                  "charOffset": 2030,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 36,
                  "charOffset": 2071,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.checkers.utils import ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 36,
                  "charOffset": 2071,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.checkers.utils import ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'graph' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 48,
                  "charOffset": 2189,
                  "charLength": 47,
                  "snippet": {
                    "text": "from pylint.graph import get_cycles, DotBackend"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.graph'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 48,
                  "charOffset": 2189,
                  "charLength": 47,
                  "snippet": {
                    "text": "from pylint.graph import get_cycles, DotBackend"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 68,
                  "charOffset": 2238,
                  "charLength": 67,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.nodes import VerbatimText, Paragraph"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters.ureports.nodes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 68,
                  "charOffset": 2238,
                  "charLength": 67,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.nodes import VerbatimText, Paragraph"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 64,
                  "charOffset": 3301,
                  "charLength": 63,
                  "snippet": {
                    "text": "def _get_first_import(node, context, name, base, level, alias):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0902(too-many-instance-attributes)",
          "level": "note",
          "message": {
            "text": "Too many instance attributes (10/7)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 1,
                  "endLine": 255,
                  "endColumn": 35,
                  "charOffset": 9980,
                  "charLength": 34,
                  "snippet": {
                    "text": "class ImportsChecker(BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 4,
                  "endLine": 446,
                  "endColumn": 34,
                  "charOffset": 17994,
                  "charLength": 30,
                  "snippet": {
                    "text": " def leave_module(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 4,
                  "endLine": 466,
                  "endColumn": 51,
                  "charOffset": 18931,
                  "charLength": 47,
                  "snippet": {
                    "text": " def compute_first_non_import_node(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 4,
                  "endLine": 498,
                  "endColumn": 39,
                  "charOffset": 20505,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (19/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 4,
                  "endLine": 581,
                  "endColumn": 50,
                  "charOffset": 24071,
                  "charLength": 46,
                  "snippet": {
                    "text": " def _check_imports_order(self, _module_node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (14/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 4,
                  "endLine": 581,
                  "endColumn": 50,
                  "charOffset": 24071,
                  "charLength": 46,
                  "snippet": {
                    "text": " def _check_imports_order(self, _module_node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_excluded_edges' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 8,
                  "endLine": 374,
                  "endColumn": 60,
                  "charOffset": 14984,
                  "charLength": 52,
                  "snippet": {
                    "text": " self._excluded_edges = collections.defaultdict(set)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_ignored_modules' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/imports.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 8,
                  "endLine": 375,
                  "endColumn": 51,
                  "charOffset": 15045,
                  "charLength": 43,
                  "snippet": {
                    "text": " self._ignored_modules = get_global_option("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 28,
                  "charOffset": 1045,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 30,
                  "charOffset": 1074,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 34,
                  "charOffset": 1105,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 34,
                  "charOffset": 1105,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 49,
                  "charOffset": 1140,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 49,
                  "charOffset": 1140,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 33,
                  "endLine": 159,
                  "endColumn": 58,
                  "charOffset": 7133,
                  "charLength": 25,
                  "snippet": {
                    "text": " inferred._proxied.parent"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 41,
                  "endLine": 164,
                  "endColumn": 64,
                  "charOffset": 7494,
                  "charLength": 23,
                  "snippet": {
                    "text": " inferred._proxied.name"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_logging_names' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 8,
                  "endLine": 121,
                  "endColumn": 36,
                  "charOffset": 5577,
                  "charLength": 28,
                  "snippet": {
                    "text": " self._logging_names = set()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_logging_modules' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 8,
                  "endLine": 124,
                  "endColumn": 50,
                  "charOffset": 5668,
                  "charLength": 42,
                  "snippet": {
                    "text": " self._logging_modules = set(logging_mods)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_from_imports' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/logging.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 8,
                  "endLine": 125,
                  "endColumn": 32,
                  "charOffset": 5719,
                  "charLength": 24,
                  "snippet": {
                    "text": " self._from_imports = {}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/misc.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 42,
                  "charOffset": 1023,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.interfaces import IRawChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/misc.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 42,
                  "charOffset": 1023,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.interfaces import IRawChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/misc.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 40,
                  "charOffset": 1066,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/misc.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 40,
                  "charOffset": 1066,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/misc.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 58,
                  "charOffset": 1107,
                  "charLength": 57,
                  "snippet": {
                    "text": "from pylint.utils import OPTION_RGX, MessagesHandlerMixIn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/misc.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 58,
                  "charOffset": 1107,
                  "charLength": 57,
                  "snippet": {
                    "text": "from pylint.utils import OPTION_RGX, MessagesHandlerMixIn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/misc.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 47,
                  "charOffset": 1170,
                  "charLength": 46,
                  "snippet": {
                    "text": "class ByIdManagedMessagesChecker(BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/misc.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 36,
                  "charOffset": 2434,
                  "charLength": 35,
                  "snippet": {
                    "text": "class EncodingChecker(BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/newstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 82,
                  "charOffset": 777,
                  "charLength": 81,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker, INFERENCE, INFERENCE_FAILURE, HIGH"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/newstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 82,
                  "charOffset": 777,
                  "charLength": 81,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker, INFERENCE, INFERENCE_FAILURE, HIGH"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/newstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 40,
                  "charOffset": 860,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/newstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 40,
                  "charOffset": 860,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/newstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 36,
                  "charOffset": 901,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.checkers.utils import ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/newstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 36,
                  "charOffset": 901,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.checkers.utils import ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (17/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/newstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 4,
                  "endLine": 110,
                  "endColumn": 39,
                  "charOffset": 4621,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1062/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 40,
                  "charOffset": 1686,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint import checkers, interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 40,
                  "charOffset": 1686,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint import checkers, interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 87,
                  "charOffset": 1727,
                  "charLength": 86,
                  "snippet": {
                    "text": "from pylint.checkers.utils import node_ignores_exception, find_try_except_wrapper_node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 87,
                  "charOffset": 1727,
                  "charLength": 86,
                  "snippet": {
                    "text": "from pylint.checkers.utils import node_ignores_exception, find_try_except_wrapper_node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 59,
                  "charOffset": 1815,
                  "charLength": 58,
                  "snippet": {
                    "text": "from pylint.interfaces import INFERENCE_FAILURE, INFERENCE"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 59,
                  "charOffset": 1815,
                  "charLength": 58,
                  "snippet": {
                    "text": "from pylint.interfaces import INFERENCE_FAILURE, INFERENCE"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 38,
                  "charOffset": 1875,
                  "charLength": 37,
                  "snippet": {
                    "text": "from pylint.utils import WarningScope"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 38,
                  "charOffset": 1875,
                  "charLength": 37,
                  "snippet": {
                    "text": "from pylint.utils import WarningScope"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 34,
                  "charOffset": 1914,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 34,
                  "charOffset": 1914,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (8/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 33,
                  "charOffset": 3377,
                  "charLength": 32,
                  "snippet": {
                    "text": "def _in_iterating_context(node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (15/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 33,
                  "charOffset": 3377,
                  "charLength": 32,
                  "snippet": {
                    "text": "def _in_iterating_context(node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 1,
                  "endLine": 155,
                  "endColumn": 44,
                  "charOffset": 5764,
                  "charLength": 43,
                  "snippet": {
                    "text": "class Python3Checker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 4,
                  "endLine": 597,
                  "endColumn": 89,
                  "charOffset": 28816,
                  "charLength": 85,
                  "snippet": {
                    "text": " def add_message(self, msg_id, always_warn=False,  # pylint: disable=arguments-differ"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 4,
                  "endLine": 611,
                  "endColumn": 30,
                  "charOffset": 29528,
                  "charLength": 26,
                  "snippet": {
                    "text": " def visit_if(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 4,
                  "endLine": 614,
                  "endColumn": 30,
                  "charOffset": 29635,
                  "charLength": 26,
                  "snippet": {
                    "text": " def leave_if(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 4,
                  "endLine": 617,
                  "endColumn": 33,
                  "charOffset": 29722,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_ifexp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 4,
                  "endLine": 620,
                  "endColumn": 33,
                  "charOffset": 29832,
                  "charLength": 29,
                  "snippet": {
                    "text": " def leave_ifexp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 4,
                  "endLine": 628,
                  "endColumn": 39,
                  "charOffset": 30137,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 4,
                  "endLine": 649,
                  "endColumn": 37,
                  "charOffset": 31285,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_arguments(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 4,
                  "endLine": 655,
                  "endColumn": 36,
                  "charOffset": 31522,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_listcomp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 4,
                  "endLine": 704,
                  "endColumn": 33,
                  "charOffset": 33329,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_print(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 717,
                  "startColumn": 4,
                  "endLine": 717,
                  "endColumn": 38,
                  "charOffset": 34048,
                  "charLength": 34,
                  "snippet": {
                    "text": " def visit_importfrom(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 737,
                  "startColumn": 4,
                  "endLine": 737,
                  "endColumn": 34,
                  "charOffset": 35051,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_import(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 4,
                  "endLine": 747,
                  "endColumn": 36,
                  "charOffset": 35521,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_classdef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 4,
                  "endLine": 755,
                  "endColumn": 33,
                  "charOffset": 35944,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_binop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 4,
                  "endLine": 817,
                  "endColumn": 32,
                  "charOffset": 38323,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (23/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 4,
                  "endLine": 817,
                  "endColumn": 32,
                  "charOffset": 38323,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 908,
                  "startColumn": 4,
                  "endLine": 908,
                  "endColumn": 38,
                  "charOffset": 43121,
                  "charLength": 34,
                  "snippet": {
                    "text": " def visit_assignattr(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 912,
                  "startColumn": 4,
                  "endLine": 912,
                  "endColumn": 35,
                  "charOffset": 43265,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_delattr(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 984,
                  "startColumn": 4,
                  "endLine": 984,
                  "endColumn": 32,
                  "charOffset": 46296,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_repr(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0904(too-many-public-methods)",
          "level": "note",
          "message": {
            "text": "Too many public methods (23/20)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 1,
                  "endLine": 155,
                  "endColumn": 44,
                  "charOffset": 5764,
                  "charLength": 43,
                  "snippet": {
                    "text": "class Python3Checker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 1,
                  "endLine": 1014,
                  "endColumn": 54,
                  "charOffset": 47219,
                  "charLength": 53,
                  "snippet": {
                    "text": "class Python3TokenChecker(checkers.BaseTokenChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1045,
                  "startColumn": 4,
                  "endLine": 1045,
                  "endColumn": 38,
                  "charOffset": 48648,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 1,
                  "endLine": 1014,
                  "endColumn": 54,
                  "charOffset": 47219,
                  "charLength": 53,
                  "snippet": {
                    "text": "class Python3TokenChecker(checkers.BaseTokenChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/python3.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1060,
                  "startColumn": 1,
                  "endLine": 1060,
                  "endColumn": 22,
                  "charOffset": 49453,
                  "charLength": 21,
                  "snippet": {
                    "text": "def register(linter):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 44,
                  "charOffset": 735,
                  "charLength": 43,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 44,
                  "charOffset": 735,
                  "charLength": 43,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'exceptions' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 47,
                  "charOffset": 780,
                  "charLength": 46,
                  "snippet": {
                    "text": "from pylint.exceptions import EmptyReportError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.exceptions'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 47,
                  "charOffset": 780,
                  "charLength": 46,
                  "snippet": {
                    "text": "from pylint.exceptions import EmptyReportError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 45,
                  "charOffset": 828,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.checkers import BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 45,
                  "charOffset": 828,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.checkers import BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 41,
                  "charOffset": 874,
                  "charLength": 40,
                  "snippet": {
                    "text": "from pylint.reporters import diff_string"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 41,
                  "charOffset": 874,
                  "charLength": 40,
                  "snippet": {
                    "text": "from pylint.reporters import diff_string"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 50,
                  "charOffset": 916,
                  "charLength": 49,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.nodes import Table"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters.ureports.nodes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/raw_metrics.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 50,
                  "charOffset": 916,
                  "charLength": 49,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.nodes import Table"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1259/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 30,
                  "charOffset": 1417,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 28,
                  "charOffset": 1448,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 39,
                  "charOffset": 1477,
                  "charLength": 38,
                  "snippet": {
                    "text": "from pylint import utils as lint_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 34,
                  "charOffset": 1517,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 34,
                  "charOffset": 1517,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 4,
                  "endLine": 211,
                  "endColumn": 20,
                  "charOffset": 10487,
                  "charLength": 16,
                  "snippet": {
                    "text": " def open(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (9/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 4,
                  "endLine": 241,
                  "endColumn": 44,
                  "charOffset": 11643,
                  "charLength": 40,
                  "snippet": {
                    "text": " def _check_simplifiable_if(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 4,
                  "endLine": 311,
                  "endColumn": 38,
                  "charOffset": 14898,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 4,
                  "endLine": 328,
                  "endColumn": 31,
                  "charOffset": 15804,
                  "charLength": 27,
                  "snippet": {
                    "text": " def leave_module(self, _):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 4,
                  "endLine": 332,
                  "endColumn": 37,
                  "charOffset": 15913,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_tryexcept(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 4,
                  "endLine": 358,
                  "endColumn": 31,
                  "charOffset": 16980,
                  "charLength": 27,
                  "snippet": {
                    "text": " def visit_for(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 4,
                  "endLine": 365,
                  "endColumn": 41,
                  "charOffset": 17247,
                  "charLength": 37,
                  "snippet": {
                    "text": " def visit_excepthandler(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 4,
                  "endLine": 370,
                  "endColumn": 32,
                  "charOffset": 17486,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_with(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 4,
                  "endLine": 421,
                  "endColumn": 30,
                  "charOffset": 20023,
                  "charLength": 26,
                  "snippet": {
                    "text": " def visit_if(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 4,
                  "endLine": 429,
                  "endColumn": 39,
                  "charOffset": 20363,
                  "charLength": 35,
                  "snippet": {
                    "text": " def leave_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 4,
                  "endLine": 441,
                  "endColumn": 33,
                  "charOffset": 20916,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_raise(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 4,
                  "endLine": 476,
                  "endColumn": 32,
                  "charOffset": 22600,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 4,
                  "endLine": 682,
                  "endColumn": 34,
                  "charOffset": 31557,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_boolop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 4,
                  "endLine": 714,
                  "endColumn": 34,
                  "charOffset": 33004,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_assign(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 4,
                  "endLine": 776,
                  "endColumn": 37,
                  "charOffset": 35723,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_augassign(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 813,
                  "startColumn": 4,
                  "endLine": 813,
                  "endColumn": 39,
                  "charOffset": 37267,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (10/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 4,
                  "endLine": 838,
                  "endColumn": 43,
                  "charOffset": 38371,
                  "charLength": 39,
                  "snippet": {
                    "text": " def _is_node_return_ended(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_nested_blocks' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 8,
                  "endLine": 433,
                  "endColumn": 33,
                  "charOffset": 20590,
                  "charLength": 25,
                  "snippet": {
                    "text": " self._nested_blocks = []"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_nested_blocks' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 12,
                  "endLine": 522,
                  "endColumn": 41,
                  "charOffset": 24704,
                  "charLength": 29,
                  "snippet": {
                    "text": " self._nested_blocks = [node]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 939,
                  "startColumn": 1,
                  "endLine": 939,
                  "endColumn": 51,
                  "charOffset": 43110,
                  "charLength": 50,
                  "snippet": {
                    "text": "class RecommandationChecker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 962,
                  "startColumn": 4,
                  "endLine": 962,
                  "endColumn": 32,
                  "charOffset": 44302,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (9/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 975,
                  "startColumn": 4,
                  "endLine": 975,
                  "endColumn": 31,
                  "charOffset": 44821,
                  "charLength": 27,
                  "snippet": {
                    "text": " def visit_for(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (16/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 975,
                  "startColumn": 4,
                  "endLine": 975,
                  "endColumn": 31,
                  "charOffset": 44821,
                  "charLength": 27,
                  "snippet": {
                    "text": " def visit_for(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1053,
                  "startColumn": 4,
                  "endLine": 1053,
                  "endColumn": 35,
                  "charOffset": 48272,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_unaryop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (7/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1053,
                  "startColumn": 4,
                  "endLine": 1053,
                  "endColumn": 35,
                  "charOffset": 48272,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_unaryop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1030,
                  "startColumn": 1,
                  "endLine": 1030,
                  "endColumn": 40,
                  "charOffset": 47224,
                  "charLength": 39,
                  "snippet": {
                    "text": "class NotChecker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1142,
                  "startColumn": 4,
                  "endLine": 1142,
                  "endColumn": 32,
                  "charOffset": 51629,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/refactoring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1170,
                  "startColumn": 4,
                  "endLine": 1170,
                  "endColumn": 35,
                  "charOffset": 52950,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_compare(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX should use regex in checkers/format to avoid cutting"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 14,
                  "endLine": 158,
                  "endColumn": 71,
                  "charOffset": 6403,
                  "charLength": 57,
                  "snippet": {
                    "text": " XXX should use regex in checkers/format to avoid cutting"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 41,
                  "charOffset": 1012,
                  "charLength": 40,
                  "snippet": {
                    "text": "from pylint.utils import decoding_stream"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 41,
                  "charOffset": 1012,
                  "charLength": 40,
                  "snippet": {
                    "text": "from pylint.utils import decoding_stream"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 42,
                  "charOffset": 1054,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.interfaces import IRawChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 42,
                  "charOffset": 1054,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.interfaces import IRawChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 64,
                  "charOffset": 1097,
                  "charLength": 63,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker, table_lines_from_stats"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 64,
                  "charOffset": 1097,
                  "charLength": 63,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker, table_lines_from_stats"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 50,
                  "charOffset": 1162,
                  "charLength": 49,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.nodes import Table"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters.ureports.nodes'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 50,
                  "charOffset": 1162,
                  "charLength": 49,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.nodes import Table"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _real_lines of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 24,
                  "endLine": 90,
                  "endColumn": 58,
                  "charOffset": 3674,
                  "charLength": 34,
                  "snippet": {
                    "text": " lineset._real_lines[idx:idx+num]:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (16/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 4,
                  "endLine": 98,
                  "endColumn": 48,
                  "charOffset": 4073,
                  "charLength": 44,
                  "snippet": {
                    "text": " def _find_common(self, lineset1, lineset2):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 4,
                  "endLine": 167,
                  "endColumn": 59,
                  "charOffset": 6700,
                  "charLength": 55,
                  "snippet": {
                    "text": " def __init__(self, name, lines, ignore_comments=False,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _real_lines of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/similar.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 24,
                  "endLine": 316,
                  "endColumn": 58,
                  "charOffset": 12559,
                  "charLength": 34,
                  "snippet": {
                    "text": " lineset._real_lines[idx:idx+num]:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 18,
                  "charOffset": 1434,
                  "charLength": 14,
                  "snippet": {
                    "text": " class Filter:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 18,
                  "charOffset": 1434,
                  "charLength": 14,
                  "snippet": {
                    "text": " class Filter:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 4,
                  "endLine": 40,
                  "endColumn": 19,
                  "charOffset": 1526,
                  "charLength": 15,
                  "snippet": {
                    "text": " class Chunker:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 4,
                  "endLine": 40,
                  "endColumn": 19,
                  "charOffset": 1526,
                  "charLength": 15,
                  "snippet": {
                    "text": " class Chunker:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 61,
                  "charOffset": 1561,
                  "charLength": 60,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker, IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 61,
                  "charOffset": 1561,
                  "charLength": 60,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker, IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 45,
                  "charOffset": 1623,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.checkers import BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 45,
                  "charOffset": 1623,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.checkers import BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 49,
                  "charOffset": 1669,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 49,
                  "charOffset": 1669,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"br\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 26,
                  "charOffset": 1749,
                  "charLength": 22,
                  "snippet": {
                    "text": " br = enchant.Broker()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"dicts\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 28,
                  "charOffset": 1776,
                  "charLength": 24,
                  "snippet": {
                    "text": " dicts = br.list_dicts()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"dict_choices\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 4,
                  "endLine": 51,
                  "endColumn": 48,
                  "charOffset": 1805,
                  "charLength": 44,
                  "snippet": {
                    "text": " dict_choices = [''] + [d[0] for d in dicts]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"dicts\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 4,
                  "endLine": 52,
                  "endColumn": 59,
                  "charOffset": 1854,
                  "charLength": 55,
                  "snippet": {
                    "text": " dicts = [\"%s (%s)\" % (d[0], d[1].name) for d in dicts]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"dicts\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 4,
                  "endLine": 53,
                  "endColumn": 29,
                  "charOffset": 1914,
                  "charLength": 25,
                  "snippet": {
                    "text": " dicts = \", \".join(dicts)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"instr\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 4,
                  "endLine": 54,
                  "endColumn": 15,
                  "charOffset": 1944,
                  "charLength": 11,
                  "snippet": {
                    "text": " instr = \"\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"dicts\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 4,
                  "endLine": 56,
                  "endColumn": 19,
                  "charOffset": 1967,
                  "charLength": 15,
                  "snippet": {
                    "text": " dicts = \"none\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"dict_choices\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 4,
                  "endLine": 57,
                  "endColumn": 24,
                  "charOffset": 1987,
                  "charLength": 20,
                  "snippet": {
                    "text": " dict_choices = ['']"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"instr\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 4,
                  "endLine": 58,
                  "endColumn": 66,
                  "charOffset": 2012,
                  "charLength": 62,
                  "snippet": {
                    "text": " instr = \" To make it working install python-enchant package.\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 38,
                  "charOffset": 2080,
                  "charLength": 37,
                  "snippet": {
                    "text": "class WordsWithDigigtsFilter(Filter):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 36,
                  "charOffset": 2305,
                  "charLength": 35,
                  "snippet": {
                    "text": "class WordsWithUnderscores(Filter):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 30,
                  "charOffset": 2500,
                  "charLength": 29,
                  "snippet": {
                    "text": "class CamelCasedWord(Filter):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 95,
                  "endColumn": 32,
                  "charOffset": 2893,
                  "charLength": 31,
                  "snippet": {
                    "text": "class SphinxDirectives(Filter):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 4,
                  "endLine": 114,
                  "endColumn": 20,
                  "charOffset": 3505,
                  "charLength": 16,
                  "snippet": {
                    "text": " def next(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_offset' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 16,
                  "endLine": 120,
                  "endColumn": 33,
                  "charOffset": 3704,
                  "charLength": 17,
                  "snippet": {
                    "text": " self._offset = 0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_offset' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 29,
                  "charOffset": 3897,
                  "charLength": 17,
                  "snippet": {
                    "text": " self._offset = 0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_offset' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 16,
                  "endLine": 129,
                  "endColumn": 33,
                  "charOffset": 4094,
                  "charLength": 17,
                  "snippet": {
                    "text": " self._offset = 0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_text' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 16,
                  "endLine": 121,
                  "endColumn": 32,
                  "charOffset": 3738,
                  "charLength": 16,
                  "snippet": {
                    "text": " self._text = ''"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_text' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 12,
                  "endLine": 124,
                  "endColumn": 35,
                  "charOffset": 3861,
                  "charLength": 23,
                  "snippet": {
                    "text": " self._text = post_text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_text' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 16,
                  "endLine": 128,
                  "endColumn": 32,
                  "charOffset": 4061,
                  "charLength": 16,
                  "snippet": {
                    "text": " self._text = ''"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_text' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 12,
                  "endLine": 142,
                  "endColumn": 52,
                  "charOffset": 4581,
                  "charLength": 40,
                  "snippet": {
                    "text": " self._text = pre_text + ' ' + post_text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 110,
                  "endColumn": 37,
                  "charOffset": 3359,
                  "charLength": 36,
                  "snippet": {
                    "text": "class ForwardSlashChunkder(Chunker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 4,
                  "endLine": 192,
                  "endColumn": 20,
                  "charOffset": 7063,
                  "charLength": 16,
                  "snippet": {
                    "text": " def open(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 4,
                  "endLine": 234,
                  "endColumn": 21,
                  "charOffset": 8919,
                  "charLength": 17,
                  "snippet": {
                    "text": " def close(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"m\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 16,
                  "endLine": 283,
                  "endColumn": 64,
                  "charOffset": 11074,
                  "charLength": 48,
                  "snippet": {
                    "text": " m = re.search(r\"(\\W|^)(%s)(\\W|$)\" % word, line)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (14/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 4,
                  "endLine": 238,
                  "endColumn": 54,
                  "charOffset": 9023,
                  "charLength": 50,
                  "snippet": {
                    "text": " def _check_spelling(self, msgid, line, line_num):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 4,
                  "endLine": 299,
                  "endColumn": 38,
                  "charOffset": 11711,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 4,
                  "endLine": 316,
                  "endColumn": 34,
                  "charOffset": 12418,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_module(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 4,
                  "endLine": 322,
                  "endColumn": 36,
                  "charOffset": 12598,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_classdef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 4,
                  "endLine": 328,
                  "endColumn": 39,
                  "charOffset": 12780,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'initialized' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 8,
                  "endLine": 193,
                  "endColumn": 33,
                  "charOffset": 7088,
                  "charLength": 25,
                  "snippet": {
                    "text": " self.initialized = False"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'initialized' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 8,
                  "endLine": 232,
                  "endColumn": 32,
                  "charOffset": 8888,
                  "charLength": 24,
                  "snippet": {
                    "text": " self.initialized = True"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'private_dict_file' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 8,
                  "endLine": 194,
                  "endColumn": 38,
                  "charOffset": 7122,
                  "charLength": 30,
                  "snippet": {
                    "text": " self.private_dict_file = None"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'private_dict_file' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 12,
                  "endLine": 215,
                  "endColumn": 43,
                  "charOffset": 8027,
                  "charLength": 31,
                  "snippet": {
                    "text": " self.private_dict_file = open("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'ignore_list' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 8,
                  "endLine": 202,
                  "endColumn": 93,
                  "charOffset": 7308,
                  "charLength": 85,
                  "snippet": {
                    "text": " self.ignore_list = [w.strip() for w in self.config.spelling_ignore_words.split(\",\")]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'spelling_dict' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 12,
                  "endLine": 213,
                  "endColumn": 54,
                  "charOffset": 7904,
                  "charLength": 42,
                  "snippet": {
                    "text": " self.spelling_dict = enchant.DictWithPWL("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'spelling_dict' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 12,
                  "endLine": 218,
                  "endColumn": 57,
                  "charOffset": 8148,
                  "charLength": 45,
                  "snippet": {
                    "text": " self.spelling_dict = enchant.Dict(dict_name)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'unknown_words' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 12,
                  "endLine": 221,
                  "endColumn": 39,
                  "charOffset": 8262,
                  "charLength": 27,
                  "snippet": {
                    "text": " self.unknown_words = set()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tokenizer' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/spelling.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 8,
                  "endLine": 223,
                  "endColumn": 50,
                  "charOffset": 8300,
                  "charLength": 42,
                  "snippet": {
                    "text": " self.tokenizer = get_tokenizer(dict_name,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 46,
                  "charOffset": 1327,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 46,
                  "charOffset": 1327,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 40,
                  "charOffset": 1374,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 40,
                  "charOffset": 1374,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 34,
                  "charOffset": 1415,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 34,
                  "charOffset": 1415,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (7/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 27,
                  "charOffset": 1781,
                  "charLength": 26,
                  "snippet": {
                    "text": "def _check_mode_str(mode):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 34,
                  "charOffset": 2575,
                  "charLength": 33,
                  "snippet": {
                    "text": "class StdlibChecker(BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Method name \"_check_for_preexec_fn_in_Popen\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 4,
                  "endLine": 217,
                  "endColumn": 52,
                  "charOffset": 9135,
                  "charLength": 48,
                  "snippet": {
                    "text": " def _check_for_preexec_fn_in_Popen(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 4,
                  "endLine": 265,
                  "endColumn": 35,
                  "charOffset": 11448,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_unaryop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 4,
                  "endLine": 270,
                  "endColumn": 30,
                  "charOffset": 11611,
                  "charLength": 26,
                  "snippet": {
                    "text": " def visit_if(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 4,
                  "endLine": 274,
                  "endColumn": 33,
                  "charOffset": 11732,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_ifexp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 4,
                  "endLine": 278,
                  "endColumn": 34,
                  "charOffset": 11856,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_boolop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/stdlib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 4,
                  "endLine": 384,
                  "endColumn": 87,
                  "charOffset": 15919,
                  "charLength": 83,
                  "snippet": {
                    "text": " def _check_invalid_envvar_value(self, node, infer, message, call_arg, allow_none):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: skip (for now) format nodes which don't have"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 10,
                  "endLine": 359,
                  "endColumn": 61,
                  "charOffset": 15911,
                  "charLength": 51,
                  "snippet": {
                    "text": " TODO: skip (for now) format nodes which don't have"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO(mbp): Octal characters are quite an edge case today; people may"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 6,
                  "endLine": 552,
                  "endColumn": 75,
                  "charOffset": 24569,
                  "charLength": 69,
                  "snippet": {
                    "text": " TODO(mbp): Octal characters are quite an edge case today; people may"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO(mbp): Maybe give a separate warning about the rarely-used"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 10,
                  "endLine": 601,
                  "endColumn": 73,
                  "charOffset": 26846,
                  "charLength": 63,
                  "snippet": {
                    "text": " TODO(mbp): Maybe give a separate warning about the rarely-used"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO(mbp): We could give the column of the problem character, but"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 10,
                  "endLine": 604,
                  "endColumn": 76,
                  "charOffset": 26955,
                  "charLength": 66,
                  "snippet": {
                    "text": " TODO(mbp): We could give the column of the problem character, but"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 74,
                  "charOffset": 1195,
                  "charLength": 73,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker, IAstroidChecker, IRawChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 74,
                  "charOffset": 1195,
                  "charLength": 73,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker, IAstroidChecker, IRawChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 58,
                  "charOffset": 1270,
                  "charLength": 57,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker, BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 58,
                  "charOffset": 1270,
                  "charLength": 57,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker, BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 34,
                  "charOffset": 1329,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 34,
                  "charOffset": 1329,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 49,
                  "charOffset": 1364,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 49,
                  "charOffset": 1364,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 4,
                  "endLine": 128,
                  "endColumn": 49,
                  "charOffset": 6317,
                  "charLength": 45,
                  "snippet": {
                    "text": " def split_format_field_names(format_string):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 4,
                  "endLine": 142,
                  "endColumn": 49,
                  "charOffset": 6770,
                  "charLength": 45,
                  "snippet": {
                    "text": " def split_format_field_names(format_string):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _formatter_field_name_split of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 37,
                  "endLine": 144,
                  "endColumn": 81,
                  "charOffset": 6867,
                  "charLength": 44,
                  "snippet": {
                    "text": " format_string._formatter_field_name_split()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 4,
                  "endLine": 252,
                  "endColumn": 33,
                  "charOffset": 10803,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_binop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (18/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 4,
                  "endLine": 252,
                  "endColumn": 33,
                  "charOffset": 10803,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_binop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"e\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 8,
                  "endLine": 265,
                  "endColumn": 54,
                  "charOffset": 11222,
                  "charLength": 46,
                  "snippet": {
                    "text": " except utils.UnsupportedFormatCharacter as e:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"c\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 12,
                  "endLine": 266,
                  "endColumn": 39,
                  "charOffset": 11281,
                  "charLength": 27,
                  "snippet": {
                    "text": " c = format_string[e.index]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (26/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 4,
                  "endLine": 252,
                  "endColumn": 33,
                  "charOffset": 10803,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_binop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0915(too-many-statements)",
          "level": "note",
          "message": {
            "text": "Too many statements (51/50)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 4,
                  "endLine": 252,
                  "endColumn": 33,
                  "charOffset": 10803,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_binop(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 4,
                  "endLine": 341,
                  "endColumn": 32,
                  "charOffset": 14999,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (8/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 4,
                  "endLine": 357,
                  "endColumn": 45,
                  "charOffset": 15809,
                  "charLength": 41,
                  "snippet": {
                    "text": " def _check_new_format(self, node, func):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (19/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 4,
                  "endLine": 357,
                  "endColumn": 45,
                  "charOffset": 15809,
                  "charLength": 41,
                  "snippet": {
                    "text": " def _check_new_format(self, node, func):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (24/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 4,
                  "endLine": 440,
                  "endColumn": 65,
                  "charOffset": 19423,
                  "charLength": 61,
                  "snippet": {
                    "text": " def _check_new_format_specifiers(self, node, fields, named):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0915(too-many-statements)",
          "level": "note",
          "message": {
            "text": "Too many statements (62/50)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 4,
                  "endLine": 440,
                  "endColumn": 65,
                  "charOffset": 19423,
                  "charLength": 61,
                  "snippet": {
                    "text": " def _check_new_format_specifiers(self, node, fields, named):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 559,
                  "startColumn": 4,
                  "endLine": 559,
                  "endColumn": 38,
                  "charOffset": 24860,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_module(self, module):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 4,
                  "endLine": 562,
                  "endColumn": 38,
                  "charOffset": 24979,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 4,
                  "endLine": 569,
                  "endColumn": 54,
                  "charOffset": 25346,
                  "charLength": 50,
                  "snippet": {
                    "text": " def process_string_token(self, token, start_row):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"c\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 15,
                  "endLine": 570,
                  "endColumn": 38,
                  "charOffset": 25412,
                  "charLength": 23,
                  "snippet": {
                    "text": " c in enumerate(token):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_unicode_literals' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/strings.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 8,
                  "endLine": 560,
                  "endColumn": 77,
                  "charOffset": 24903,
                  "charLength": 69,
                  "snippet": {
                    "text": " self._unicode_literals = 'unicode_literals' in module.future_imports"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: maybe we need an ABC for checking if an object is a scoped node"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 6,
                  "endLine": 127,
                  "endColumn": 76,
                  "charOffset": 4735,
                  "charLength": 70,
                  "snippet": {
                    "text": " TODO: maybe we need an ABC for checking if an object is a scoped node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: replace with a Callable check"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 10,
                  "endLine": 375,
                  "endColumn": 46,
                  "charOffset": 15880,
                  "charLength": 36,
                  "snippet": {
                    "text": " TODO: replace with a Callable check"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX method / function"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 18,
                  "endLine": 760,
                  "endColumn": 40,
                  "charOffset": 32077,
                  "charLength": 22,
                  "snippet": {
                    "text": " XXX method / function"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: since astroid doesn't understand descriptors very well"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 859,
                  "startColumn": 10,
                  "endLine": 859,
                  "endColumn": 71,
                  "charOffset": 36456,
                  "charLength": 61,
                  "snippet": {
                    "text": " TODO: since astroid doesn't understand descriptors very well"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX is that even possible?"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1031,
                  "startColumn": 44,
                  "endLine": 1031,
                  "endColumn": 71,
                  "charOffset": 44050,
                  "charLength": 27,
                  "snippet": {
                    "text": " XXX is that even possible?"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO(cpopa): this should be removed after PyCQA/astroid/issues/177"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1064,
                  "startColumn": 18,
                  "endLine": 1064,
                  "endColumn": 85,
                  "charOffset": 45535,
                  "charLength": 67,
                  "snippet": {
                    "text": " TODO(cpopa): this should be removed after PyCQA/astroid/issues/177"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1458/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 57,
                  "charOffset": 2315,
                  "charLength": 56,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker, INFERENCE"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 57,
                  "charOffset": 2315,
                  "charLength": 56,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker, INFERENCE"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 40,
                  "charOffset": 2373,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 40,
                  "charOffset": 2373,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 36,
                  "charOffset": 2414,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.checkers.utils import ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 36,
                  "charOffset": 2414,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.checkers.utils import ("
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 43,
                  "charOffset": 2810,
                  "charLength": 42,
                  "snippet": {
                    "text": "from pylint.utils import get_global_option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 43,
                  "charOffset": 2810,
                  "charLength": 42,
                  "snippet": {
                    "text": "from pylint.utils import get_global_option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (15/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 1,
                  "endLine": 316,
                  "endColumn": 86,
                  "charOffset": 13286,
                  "charLength": 85,
                  "snippet": {
                    "text": "def _emit_no_member(node, owner, owner_name, ignored_mixins=True, ignored_none=True):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 4,
                  "endLine": 657,
                  "endColumn": 20,
                  "charOffset": 27797,
                  "charLength": 16,
                  "snippet": {
                    "text": " def open(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 4,
                  "endLine": 670,
                  "endColumn": 39,
                  "charOffset": 28466,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 4,
                  "endLine": 679,
                  "endColumn": 36,
                  "charOffset": 28819,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_classdef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 4,
                  "endLine": 705,
                  "endColumn": 38,
                  "charOffset": 29841,
                  "charLength": 34,
                  "snippet": {
                    "text": " def visit_assignattr(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 4,
                  "endLine": 709,
                  "endColumn": 35,
                  "charOffset": 29985,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_delattr(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 785,
                  "startColumn": 29,
                  "endLine": 785,
                  "endColumn": 44,
                  "charOffset": 33363,
                  "charLength": 15,
                  "snippet": {
                    "text": " owner._proxied"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (16/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 4,
                  "endLine": 713,
                  "endColumn": 37,
                  "charOffset": 30118,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_attribute(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 20,
                  "endLine": 869,
                  "endColumn": 63,
                  "charOffset": 36814,
                  "charLength": 43,
                  "snippet": {
                    "text": " klass._proxied.getattr(node.func.attrname)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (24/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 4,
                  "endLine": 898,
                  "endColumn": 32,
                  "charOffset": 37889,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0915(too-many-statements)",
          "level": "note",
          "message": {
            "text": "Too many statements (86/50)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 4,
                  "endLine": 898,
                  "endColumn": 32,
                  "charOffset": 37889,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1076,
                  "startColumn": 4,
                  "endLine": 1076,
                  "endColumn": 36,
                  "charOffset": 46158,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_extslice(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1082,
                  "startColumn": 4,
                  "endLine": 1082,
                  "endColumn": 33,
                  "charOffset": 46428,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_index(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (11/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1082,
                  "startColumn": 4,
                  "endLine": 1082,
                  "endColumn": 33,
                  "charOffset": 46428,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_index(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1156,
                  "startColumn": 4,
                  "endLine": 1156,
                  "endColumn": 33,
                  "charOffset": 49761,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_slice(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1212,
                  "startColumn": 4,
                  "endLine": 1212,
                  "endColumn": 32,
                  "charOffset": 51964,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_with(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1309,
                  "startColumn": 4,
                  "endLine": 1309,
                  "endColumn": 35,
                  "charOffset": 56628,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_compare(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"op\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1313,
                  "startColumn": 8,
                  "endLine": 1313,
                  "endColumn": 32,
                  "charOffset": 56722,
                  "charLength": 24,
                  "snippet": {
                    "text": " op, right = node.ops[0]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1321,
                  "startColumn": 4,
                  "endLine": 1321,
                  "endColumn": 37,
                  "charOffset": 57038,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_subscript(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1416,
                  "startColumn": 4,
                  "endLine": 1416,
                  "endColumn": 31,
                  "charOffset": 60627,
                  "charLength": 27,
                  "snippet": {
                    "text": " def visit_for(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1420,
                  "startColumn": 4,
                  "endLine": 1420,
                  "endColumn": 36,
                  "charOffset": 60742,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_asyncfor(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1424,
                  "startColumn": 4,
                  "endLine": 1424,
                  "endColumn": 37,
                  "charOffset": 60880,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_yieldfrom(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1428,
                  "startColumn": 4,
                  "endLine": 1428,
                  "endColumn": 32,
                  "charOffset": 61019,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1435,
                  "startColumn": 4,
                  "endLine": 1435,
                  "endColumn": 36,
                  "charOffset": 61263,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_listcomp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1440,
                  "startColumn": 4,
                  "endLine": 1440,
                  "endColumn": 36,
                  "charOffset": 61449,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_dictcomp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1445,
                  "startColumn": 4,
                  "endLine": 1445,
                  "endColumn": 35,
                  "charOffset": 61609,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_setcomp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/typecheck.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1450,
                  "startColumn": 4,
                  "endLine": 1450,
                  "endColumn": 40,
                  "charOffset": 61768,
                  "charLength": 36,
                  "snippet": {
                    "text": " def visit_generatorexp(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: this is not needed in astroid 2.0, where we can"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 6,
                  "endLine": 782,
                  "endColumn": 60,
                  "charOffset": 28477,
                  "charLength": 54,
                  "snippet": {
                    "text": " TODO: this is not needed in astroid 2.0, where we can"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO(cpopa): deprecate these or leave them as aliases?"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 2,
                  "endLine": 822,
                  "endColumn": 57,
                  "charOffset": 29656,
                  "charLength": 55,
                  "snippet": {
                    "text": " TODO(cpopa): deprecate these or leave them as aliases?"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: check for A-&gt;B-&gt;A-&gt;B pattern in class structure too?"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 10,
                  "endLine": 852,
                  "endColumn": 69,
                  "charOffset": 30644,
                  "charLength": 59,
                  "snippet": {
                    "text": " TODO: check for A->B->A->B pattern in class structure too?"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1015/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 1,
                  "endLine": 117,
                  "endColumn": 38,
                  "charOffset": 5039,
                  "charLength": 37,
                  "snippet": {
                    "text": "class NoSuchArgumentError(Exception):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"e\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 16,
                  "endLine": 144,
                  "endColumn": 46,
                  "charOffset": 5893,
                  "charLength": 30,
                  "snippet": {
                    "text": " e in get_all_elements(child):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Constant name \"builtins\" doesn't conform to UPPER_CASE naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 1,
                  "endLine": 194,
                  "endColumn": 36,
                  "charOffset": 7548,
                  "charLength": 35,
                  "snippet": {
                    "text": "builtins = builtins.__dict__.copy()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (8/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 206,
                  "endColumn": 33,
                  "charOffset": 7994,
                  "charLength": 32,
                  "snippet": {
                    "text": "def is_defined_before(var_node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (21/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 206,
                  "endColumn": 33,
                  "charOffset": 7994,
                  "charLength": 32,
                  "snippet": {
                    "text": "def is_defined_before(var_node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (20/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 1,
                  "endLine": 337,
                  "endColumn": 40,
                  "charOffset": 13044,
                  "charLength": 39,
                  "snippet": {
                    "text": "def parse_format_string(format_string):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (13/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 1,
                  "endLine": 540,
                  "endColumn": 63,
                  "charOffset": 20134,
                  "charLength": 62,
                  "snippet": {
                    "text": "def unimplemented_abstract_methods(node, is_abstract_cb=None):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 1,
                  "endLine": 703,
                  "endColumn": 28,
                  "charOffset": 26063,
                  "charLength": 27,
                  "snippet": {
                    "text": "def is_comprehension(node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 1,
                  "endLine": 753,
                  "endColumn": 36,
                  "charOffset": 27480,
                  "charLength": 35,
                  "snippet": {
                    "text": "def is_inside_abstract_class(node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 785,
                  "startColumn": 27,
                  "endLine": 785,
                  "endColumn": 65,
                  "charOffset": 28658,
                  "charLength": 38,
                  "snippet": {
                    "text": "(value._proxied, astroid.BaseInstance)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 786,
                  "startColumn": 32,
                  "endLine": 786,
                  "endColumn": 50,
                  "charOffset": 28729,
                  "charLength": 18,
                  "snippet": {
                    "text": "(value._proxied)):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 787,
                  "startColumn": 16,
                  "endLine": 787,
                  "endColumn": 31,
                  "charOffset": 28764,
                  "charLength": 15,
                  "snippet": {
                    "text": " value._proxied"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (7/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 1,
                  "endLine": 765,
                  "endColumn": 50,
                  "charOffset": 27859,
                  "charLength": 49,
                  "snippet": {
                    "text": "def _supports_protocol(value, protocol_callback):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 1,
                  "endLine": 793,
                  "endColumn": 43,
                  "charOffset": 28846,
                  "charLength": 42,
                  "snippet": {
                    "text": "def is_iterable(value, check_async=False):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 1,
                  "endLine": 801,
                  "endColumn": 23,
                  "charOffset": 29096,
                  "charLength": 22,
                  "snippet": {
                    "text": "def is_mapping(value):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 1,
                  "endLine": 805,
                  "endColumn": 37,
                  "charOffset": 29190,
                  "charLength": 36,
                  "snippet": {
                    "text": "def supports_membership_test(value):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 1,
                  "endLine": 810,
                  "endColumn": 29,
                  "charOffset": 29355,
                  "charLength": 28,
                  "snippet": {
                    "text": "def supports_getitem(value):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 1,
                  "endLine": 814,
                  "endColumn": 29,
                  "charOffset": 29455,
                  "charLength": 28,
                  "snippet": {
                    "text": "def supports_setitem(value):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 818,
                  "startColumn": 1,
                  "endLine": 818,
                  "endColumn": 29,
                  "charOffset": 29555,
                  "charLength": 28,
                  "snippet": {
                    "text": "def supports_delitem(value):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _all_bases_known of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 847,
                  "startColumn": 15,
                  "endLine": 847,
                  "endColumn": 38,
                  "charOffset": 30486,
                  "charLength": 23,
                  "snippet": {
                    "text": " klass._all_bases_known"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _all_bases_known of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 12,
                  "endLine": 856,
                  "endColumn": 43,
                  "charOffset": 30873,
                  "charLength": 31,
                  "snippet": {
                    "text": " klass._all_bases_known = False"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _all_bases_known of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 858,
                  "startColumn": 4,
                  "endLine": 858,
                  "endColumn": 34,
                  "charOffset": 30935,
                  "charLength": 30,
                  "snippet": {
                    "text": " klass._all_bases_known = True"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 862,
                  "startColumn": 1,
                  "endLine": 862,
                  "endColumn": 19,
                  "charOffset": 30988,
                  "charLength": 18,
                  "snippet": {
                    "text": "def is_none(node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: this should be improved in issue astroid #46"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 6,
                  "endLine": 193,
                  "endColumn": 57,
                  "charOffset": 7822,
                  "charLength": 51,
                  "snippet": {
                    "text": " TODO: this should be improved in issue astroid #46"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "FIXME: should only ignore them if it's assigned latter"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 10,
                  "endLine": 795,
                  "endColumn": 65,
                  "charOffset": 33782,
                  "charLength": 55,
                  "snippet": {
                    "text": " FIXME: should only ignore them if it's assigned latter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "FIXME: other message if name is not the latest part of"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1509,
                  "startColumn": 14,
                  "endLine": 1509,
                  "endColumn": 69,
                  "charOffset": 66620,
                  "charLength": 55,
                  "snippet": {
                    "text": " FIXME: other message if name is not the latest part of"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0302(too-many-lines)",
          "level": "warning",
          "message": {
            "text": "Too many lines in module (1605/1000)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 66,
                  "charOffset": 2213,
                  "charLength": 65,
                  "snippet": {
                    "text": "from pylint.checkers.utils import is_postponed_evaluation_enabled"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 66,
                  "charOffset": 2213,
                  "charLength": 65,
                  "snippet": {
                    "text": "from pylint.checkers.utils import is_postponed_evaluation_enabled"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 82,
                  "charOffset": 2280,
                  "charLength": 81,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker, INFERENCE, INFERENCE_FAILURE, HIGH"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 82,
                  "charOffset": 2280,
                  "charLength": 81,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker, INFERENCE, INFERENCE_FAILURE, HIGH"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 43,
                  "charOffset": 2363,
                  "charLength": 42,
                  "snippet": {
                    "text": "from pylint.utils import get_global_option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 43,
                  "charOffset": 2363,
                  "charLength": 42,
                  "snippet": {
                    "text": "from pylint.utils import get_global_option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 40,
                  "charOffset": 2407,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 40,
                  "charOffset": 2407,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 34,
                  "charOffset": 2448,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 34,
                  "charOffset": 2448,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"s\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 8,
                  "endLine": 162,
                  "endColumn": 33,
                  "charOffset": 6311,
                  "charLength": 25,
                  "snippet": {
                    "text": " s in (scope, def_scope):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 4,
                  "endLine": 395,
                  "endColumn": 26,
                  "charOffset": 16741,
                  "charLength": 22,
                  "snippet": {
                    "text": " def to_consume(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 4,
                  "endLine": 399,
                  "endColumn": 24,
                  "charOffset": 16825,
                  "charLength": 20,
                  "snippet": {
                    "text": " def consumed(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 4,
                  "endLine": 403,
                  "endColumn": 26,
                  "charOffset": 16905,
                  "charLength": 22,
                  "snippet": {
                    "text": " def scope_type(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 4,
                  "endLine": 414,
                  "endColumn": 41,
                  "charOffset": 17215,
                  "charLength": 37,
                  "snippet": {
                    "text": " def get_next_to_consume(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 4,
                  "endLine": 507,
                  "endColumn": 31,
                  "charOffset": 21444,
                  "charLength": 27,
                  "snippet": {
                    "text": " def visit_for(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 4,
                  "endLine": 528,
                  "endColumn": 31,
                  "charOffset": 22328,
                  "charLength": 27,
                  "snippet": {
                    "text": " def leave_for(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (13/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 4,
                  "endLine": 566,
                  "endColumn": 46,
                  "charOffset": 23892,
                  "charLength": 42,
                  "snippet": {
                    "text": " def _check_all(self, node, not_consumed):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (20/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 630,
                  "startColumn": 4,
                  "endLine": 630,
                  "endColumn": 44,
                  "charOffset": 26549,
                  "charLength": 40,
                  "snippet": {
                    "text": " def _check_imports(self, not_consumed):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (6/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 4,
                  "endLine": 783,
                  "endColumn": 80,
                  "charOffset": 33175,
                  "charLength": 76,
                  "snippet": {
                    "text": " def _check_is_unused(self, name, node, stmt, global_names, nonlocal_names):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (10/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 4,
                  "endLine": 783,
                  "endColumn": 80,
                  "charOffset": 33175,
                  "charLength": 76,
                  "snippet": {
                    "text": " def _check_is_unused(self, name, node, stmt, global_names, nonlocal_names):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (20/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 4,
                  "endLine": 783,
                  "endColumn": 80,
                  "charOffset": 33175,
                  "charLength": 76,
                  "snippet": {
                    "text": " def _check_is_unused(self, name, node, stmt, global_names, nonlocal_names):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1018,
                  "startColumn": 4,
                  "endLine": 1018,
                  "endColumn": 41,
                  "charOffset": 43797,
                  "charLength": 37,
                  "snippet": {
                    "text": " def visit_excepthandler(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 4,
                  "endLine": 1024,
                  "endColumn": 38,
                  "charOffset": 44066,
                  "charLength": 34,
                  "snippet": {
                    "text": " def visit_assignname(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 4,
                  "endLine": 1028,
                  "endColumn": 35,
                  "charOffset": 44205,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_delname(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (9/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1049,
                  "startColumn": 4,
                  "endLine": 1049,
                  "endColumn": 67,
                  "charOffset": 44990,
                  "charLength": 63,
                  "snippet": {
                    "text": " def _is_variable_violation(node, name, defnode, stmt, defstmt,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (15/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1049,
                  "startColumn": 4,
                  "endLine": 1049,
                  "endColumn": 67,
                  "charOffset": 44990,
                  "charLength": 63,
                  "snippet": {
                    "text": " def _is_variable_violation(node, name, defnode, stmt, defstmt,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0914(too-many-locals)",
          "level": "note",
          "message": {
            "text": "Too many local variables (19/15)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 4,
                  "endLine": 1174,
                  "endColumn": 32,
                  "charOffset": 50724,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_name(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0912(too-many-branches)",
          "level": "note",
          "message": {
            "text": "Too many branches (26/12)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 4,
                  "endLine": 1174,
                  "endColumn": 32,
                  "charOffset": 50724,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_name(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0915(too-many-statements)",
          "level": "note",
          "message": {
            "text": "Too many statements (58/50)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 4,
                  "endLine": 1174,
                  "endColumn": 32,
                  "charOffset": 50724,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_name(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0911(too-many-return-statements)",
          "level": "note",
          "message": {
            "text": "Too many return statements (7/6)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1485,
                  "startColumn": 4,
                  "endLine": 1485,
                  "endColumn": 63,
                  "charOffset": 65589,
                  "charLength": 59,
                  "snippet": {
                    "text": " def _check_module_attrs(self, node, module, module_names):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0904(too-many-public-methods)",
          "level": "note",
          "message": {
            "text": "Too many public methods (24/20)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 1,
                  "endLine": 427,
                  "endColumn": 37,
                  "charOffset": 17754,
                  "charLength": 36,
                  "snippet": {
                    "text": "class VariablesChecker(BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _metaclass of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1557,
                  "startColumn": 15,
                  "endLine": 1557,
                  "endColumn": 33,
                  "charOffset": 68467,
                  "charLength": 18,
                  "snippet": {
                    "text": " klass._metaclass:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _metaclass of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1565,
                  "startColumn": 22,
                  "endLine": 1565,
                  "endColumn": 55,
                  "charOffset": 68753,
                  "charLength": 33,
                  "snippet": {
                    "text": "(klass._metaclass, astroid.Name):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _metaclass of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1566,
                  "startColumn": 19,
                  "endLine": 1566,
                  "endColumn": 41,
                  "charOffset": 68806,
                  "charLength": 22,
                  "snippet": {
                    "text": " klass._metaclass.name"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _metaclass of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1582,
                  "startColumn": 26,
                  "endLine": 1582,
                  "endColumn": 59,
                  "charOffset": 69381,
                  "charLength": 33,
                  "snippet": {
                    "text": "(klass._metaclass, astroid.Name):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _metaclass of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1583,
                  "startColumn": 23,
                  "endLine": 1583,
                  "endColumn": 45,
                  "charOffset": 69438,
                  "charLength": 22,
                  "snippet": {
                    "text": " klass._metaclass.name"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _metaclass of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1584,
                  "startColumn": 28,
                  "endLine": 1584,
                  "endColumn": 66,
                  "charOffset": 69489,
                  "charLength": 38,
                  "snippet": {
                    "text": "(klass._metaclass, astroid.Attribute):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _metaclass of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/variables.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1585,
                  "startColumn": 23,
                  "endLine": 1585,
                  "endColumn": 52,
                  "charOffset": 69551,
                  "charLength": 29,
                  "snippet": {
                    "text": " klass._metaclass.as_string()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'config' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 47,
                  "charOffset": 1347,
                  "charLength": 46,
                  "snippet": {
                    "text": "from pylint.config import OptionsProviderMixIn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.config'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 47,
                  "charOffset": 1347,
                  "charLength": 46,
                  "snippet": {
                    "text": "from pylint.config import OptionsProviderMixIn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 41,
                  "charOffset": 1395,
                  "charLength": 40,
                  "snippet": {
                    "text": "from pylint.reporters import diff_string"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 41,
                  "charOffset": 1395,
                  "charLength": 40,
                  "snippet": {
                    "text": "from pylint.reporters import diff_string"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 42,
                  "charOffset": 1437,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.utils import register_plugins"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 42,
                  "charOffset": 1437,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.utils import register_plugins"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 40,
                  "charOffset": 1480,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.interfaces import UNDEFINED"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 40,
                  "charOffset": 1480,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.interfaces import UNDEFINED"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0913(too-many-arguments)",
          "level": "note",
          "message": {
            "text": "Too many arguments (7/5)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/checkers/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 4,
                  "endLine": 98,
                  "endColumn": 89,
                  "charOffset": 3078,
                  "charLength": 85,
                  "snippet": {
                    "text": " def add_message(self, msg_id, line=None, node=None, args=None, confidence=UNDEFINED,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 40,
                  "charOffset": 283,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 40,
                  "charOffset": 283,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 49,
                  "charOffset": 324,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 49,
                  "charOffset": 324,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 46,
                  "charOffset": 374,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 46,
                  "charOffset": 374,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 38,
                  "charOffset": 707,
                  "charLength": 37,
                  "snippet": {
                    "text": "class BadBuiltinChecker(BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 4,
                  "endLine": 46,
                  "endColumn": 32,
                  "charOffset": 1620,
                  "charLength": 28,
                  "snippet": {
                    "text": " def visit_call(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/bad_builtin.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 38,
                  "charOffset": 707,
                  "charLength": 37,
                  "snippet": {
                    "text": "class BadBuiltinChecker(BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing module docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_docs.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 70,
                  "charLength": 69,
                  "snippet": {
                    "text": "# Copyright (c) 2014-2015 Bruno Daniel <bruno.daniel@blue-yonder.com>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'extensions' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_docs.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 40,
                  "charOffset": 369,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.extensions import docparams"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.extensions'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_docs.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 40,
                  "charOffset": 369,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.extensions import docparams"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing module docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 45,
                  "charOffset": 451,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.checkers import BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 45,
                  "charOffset": 451,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.checkers import BaseTokenChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 49,
                  "charOffset": 497,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 49,
                  "charOffset": 497,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 61,
                  "charOffset": 547,
                  "charLength": 60,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker, IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 61,
                  "charOffset": 547,
                  "charLength": 60,
                  "snippet": {
                    "text": "from pylint.interfaces import ITokenChecker, IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 38,
                  "charOffset": 1346,
                  "charLength": 34,
                  "snippet": {
                    "text": " def process_tokens(self, tokens):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 4,
                  "endLine": 45,
                  "endColumn": 31,
                  "charOffset": 1634,
                  "charLength": 27,
                  "snippet": {
                    "text": " def leave_module(self, _):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 4,
                  "endLine": 48,
                  "endColumn": 30,
                  "charOffset": 1690,
                  "charLength": 26,
                  "snippet": {
                    "text": " def visit_ifexp(self, _):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 4,
                  "endLine": 51,
                  "endColumn": 41,
                  "charOffset": 1754,
                  "charLength": 37,
                  "snippet": {
                    "text": " def visit_comprehension(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/check_elif.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 30,
                  "charOffset": 1878,
                  "charLength": 26,
                  "snippet": {
                    "text": " def visit_if(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/comparetozero.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 30,
                  "charOffset": 383,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/comparetozero.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 28,
                  "charOffset": 414,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/comparetozero.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 34,
                  "charOffset": 443,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/comparetozero.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 34,
                  "charOffset": 443,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/comparetozero.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 4,
                  "endLine": 43,
                  "endColumn": 35,
                  "charOffset": 1279,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_compare(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/comparetozero.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50,
                  "charOffset": 580,
                  "charLength": 49,
                  "snippet": {
                    "text": "class CompareToZeroChecker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 46,
                  "charOffset": 1040,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 46,
                  "charOffset": 1040,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 40,
                  "charOffset": 1087,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 40,
                  "charOffset": 1087,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 51,
                  "charOffset": 1128,
                  "charLength": 50,
                  "snippet": {
                    "text": "from pylint.checkers import utils as checker_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 51,
                  "charOffset": 1128,
                  "charLength": 50,
                  "snippet": {
                    "text": "from pylint.checkers import utils as checker_utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'extensions' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 52,
                  "charOffset": 1180,
                  "charLength": 51,
                  "snippet": {
                    "text": "import pylint.extensions._check_docs_utils as utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.extensions._check_docs_utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 52,
                  "charOffset": 1180,
                  "charLength": 51,
                  "snippet": {
                    "text": "import pylint.extensions._check_docs_utils as utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 4,
                  "endLine": 155,
                  "endColumn": 56,
                  "charOffset": 7516,
                  "charLength": 52,
                  "snippet": {
                    "text": " def check_functiondef_params(self, node, node_doc):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 4,
                  "endLine": 184,
                  "endColumn": 57,
                  "charOffset": 8762,
                  "charLength": 53,
                  "snippet": {
                    "text": " def check_functiondef_returns(self, node, node_doc):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 4,
                  "endLine": 196,
                  "endColumn": 56,
                  "charOffset": 9271,
                  "charLength": 52,
                  "snippet": {
                    "text": " def check_functiondef_yields(self, node, node_doc):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 4,
                  "endLine": 206,
                  "endColumn": 33,
                  "charOffset": 9630,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_raise(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 4,
                  "endLine": 234,
                  "endColumn": 34,
                  "charOffset": 10567,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_return(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 4,
                  "endLine": 267,
                  "endColumn": 33,
                  "charOffset": 11557,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_yield(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 4,
                  "endLine": 297,
                  "endColumn": 37,
                  "charOffset": 12471,
                  "charLength": 33,
                  "snippet": {
                    "text": " def visit_yieldfrom(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docparams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 4,
                  "endLine": 426,
                  "endColumn": 80,
                  "charOffset": 18461,
                  "charLength": 76,
                  "snippet": {
                    "text": " def check_single_constructor_params(self, class_doc, init_doc, class_node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing module docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 28,
                  "charOffset": 382,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 52,
                  "charOffset": 411,
                  "charLength": 51,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker, HIGH"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 52,
                  "charOffset": 411,
                  "charLength": 51,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker, HIGH"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 49,
                  "charOffset": 464,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 49,
                  "charOffset": 464,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 34,
                  "charOffset": 1186,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_module(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 4,
                  "endLine": 35,
                  "endColumn": 36,
                  "charOffset": 1270,
                  "charLength": 32,
                  "snippet": {
                    "text": " def visit_classdef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/docstyle.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 4,
                  "endLine": 38,
                  "endColumn": 39,
                  "charOffset": 1355,
                  "charLength": 35,
                  "snippet": {
                    "text": " def visit_functiondef(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/emptystring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 30,
                  "charOffset": 383,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/emptystring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 28,
                  "charOffset": 414,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/emptystring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 34,
                  "charOffset": 443,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/emptystring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 34,
                  "charOffset": 443,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/emptystring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 4,
                  "endLine": 43,
                  "endColumn": 35,
                  "charOffset": 1351,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_compare(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/emptystring.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 57,
                  "charOffset": 586,
                  "charLength": 56,
                  "snippet": {
                    "text": "class CompareToEmptyStringChecker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 28,
                  "charOffset": 553,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 49,
                  "charOffset": 582,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 49,
                  "charOffset": 582,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 52,
                  "charOffset": 632,
                  "charLength": 51,
                  "snippet": {
                    "text": "from pylint.interfaces import HIGH, IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 52,
                  "charOffset": 632,
                  "charLength": 51,
                  "snippet": {
                    "text": "from pylint.interfaces import HIGH, IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 35,
                  "charOffset": 689,
                  "charLength": 34,
                  "snippet": {
                    "text": "class PathGraph(Mccabe_PathGraph):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 61,
                  "charOffset": 857,
                  "charLength": 60,
                  "snippet": {
                    "text": "class PathGraphingAstVisitor(Mccabe_PathGraphingAstVisitor):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"className\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "endLine": 39,
                  "endColumn": 39,
                  "charOffset": 1331,
                  "charLength": 27,
                  "snippet": {
                    "text": " className = klass.__name__"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Variable name \"le\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 16,
                  "endLine": 116,
                  "endColumn": 34,
                  "charOffset": 4209,
                  "charLength": 18,
                  "snippet": {
                    "text": " le in loose_ends:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tail' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 12,
                  "endLine": 48,
                  "endColumn": 33,
                  "charOffset": 1669,
                  "charLength": 21,
                  "snippet": {
                    "text": " self.tail = pathnode"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tail' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 12,
                  "endLine": 54,
                  "endColumn": 31,
                  "charOffset": 1932,
                  "charLength": 19,
                  "snippet": {
                    "text": " self.tail = bottom"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tail' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "endLine": 57,
                  "endColumn": 29,
                  "charOffset": 2021,
                  "charLength": 17,
                  "snippet": {
                    "text": " self.tail = node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tail' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 8,
                  "endLine": 82,
                  "endColumn": 25,
                  "charOffset": 2888,
                  "charLength": 17,
                  "snippet": {
                    "text": " self.tail = node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tail' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 8,
                  "endLine": 100,
                  "endColumn": 25,
                  "charOffset": 3645,
                  "charLength": 17,
                  "snippet": {
                    "text": " self.tail = node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tail' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 12,
                  "endLine": 104,
                  "endColumn": 29,
                  "charOffset": 3788,
                  "charLength": 17,
                  "snippet": {
                    "text": " self.tail = node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tail' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 12,
                  "endLine": 108,
                  "endColumn": 29,
                  "charOffset": 3929,
                  "charLength": 17,
                  "snippet": {
                    "text": " self.tail = node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'tail' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 12,
                  "endLine": 118,
                  "endColumn": 31,
                  "charOffset": 4288,
                  "charLength": 19,
                  "snippet": {
                    "text": " self.tail = bottom"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'graph' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 12,
                  "endLine": 56,
                  "endColumn": 41,
                  "charOffset": 1979,
                  "charLength": 29,
                  "snippet": {
                    "text": " self.graph = PathGraph(node)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'graph' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 12,
                  "endLine": 89,
                  "endColumn": 41,
                  "charOffset": 3134,
                  "charLength": 29,
                  "snippet": {
                    "text": " self.graph = PathGraph(node)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/mccabe.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 1,
                  "endLine": 121,
                  "endColumn": 49,
                  "charOffset": 4313,
                  "charLength": 48,
                  "snippet": {
                    "text": "class McCabeMethodChecker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/overlapping_exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 30,
                  "charOffset": 240,
                  "charLength": 29,
                  "snippet": {
                    "text": "from pylint import interfaces"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/overlapping_exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 28,
                  "charOffset": 271,
                  "charLength": 27,
                  "snippet": {
                    "text": "from pylint import checkers"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/overlapping_exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 34,
                  "charOffset": 300,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/overlapping_exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 34,
                  "charOffset": 300,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/overlapping_exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 63,
                  "charOffset": 337,
                  "charLength": 62,
                  "snippet": {
                    "text": "from pylint.checkers.exceptions import _annotated_unpack_infer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.exceptions'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/overlapping_exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 63,
                  "charOffset": 337,
                  "charLength": 62,
                  "snippet": {
                    "text": "from pylint.checkers.exceptions import _annotated_unpack_infer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/overlapping_exceptions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 58,
                  "charOffset": 405,
                  "charLength": 57,
                  "snippet": {
                    "text": "class OverlappingExceptionsChecker(checkers.BaseChecker):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing module docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 24,
                  "charLength": 23,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 40,
                  "charOffset": 459,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 40,
                  "charOffset": 459,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.checkers import BaseChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 69,
                  "charOffset": 500,
                  "charLength": 68,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages, is_none, node_type"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 69,
                  "charOffset": 500,
                  "charLength": 68,
                  "snippet": {
                    "text": "from pylint.checkers.utils import check_messages, is_none, node_type"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 46,
                  "charOffset": 570,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 46,
                  "charOffset": 570,
                  "charLength": 45,
                  "snippet": {
                    "text": "from pylint.interfaces import IAstroidChecker"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 4,
                  "endLine": 42,
                  "endColumn": 33,
                  "charOffset": 1519,
                  "charLength": 29,
                  "snippet": {
                    "text": " def visit_classdef(self, _):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 4,
                  "endLine": 46,
                  "endColumn": 33,
                  "charOffset": 1637,
                  "charLength": 29,
                  "snippet": {
                    "text": " def leave_classdef(self, _):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 4,
                  "endLine": 52,
                  "endColumn": 31,
                  "charOffset": 1810,
                  "charLength": 27,
                  "snippet": {
                    "text": " def visit_module(self, _):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 4,
                  "endLine": 86,
                  "endColumn": 34,
                  "charOffset": 3497,
                  "charLength": 30,
                  "snippet": {
                    "text": " def visit_assign(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute '_assigns' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/redefined_variable_type.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 8,
                  "endLine": 53,
                  "endColumn": 29,
                  "charOffset": 1846,
                  "charLength": 21,
                  "snippet": {
                    "text": " self._assigns = [{}]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 34,
                  "charOffset": 978,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 34,
                  "charOffset": 978,
                  "charLength": 33,
                  "snippet": {
                    "text": "from pylint.checkers import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Argument name \"s\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 26,
                  "charOffset": 1017,
                  "charLength": 25,
                  "snippet": {
                    "text": "def space_indentation(s):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 53,
                  "charOffset": 4983,
                  "charLength": 52,
                  "snippet": {
                    "text": "def docstringify(docstring, default_type='default'):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 1,
                  "endLine": 163,
                  "endColumn": 17,
                  "charOffset": 5381,
                  "charLength": 16,
                  "snippet": {
                    "text": "class Docstring:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 4,
                  "endLine": 180,
                  "endColumn": 24,
                  "charOffset": 5885,
                  "charLength": 20,
                  "snippet": {
                    "text": " def is_valid(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 4,
                  "endLine": 183,
                  "endColumn": 26,
                  "charOffset": 5934,
                  "charLength": 22,
                  "snippet": {
                    "text": " def exceptions(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 4,
                  "endLine": 186,
                  "endColumn": 26,
                  "charOffset": 5985,
                  "charLength": 22,
                  "snippet": {
                    "text": " def has_params(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 4,
                  "endLine": 189,
                  "endColumn": 27,
                  "charOffset": 6036,
                  "charLength": 23,
                  "snippet": {
                    "text": " def has_returns(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 4,
                  "endLine": 192,
                  "endColumn": 25,
                  "charOffset": 6088,
                  "charLength": 21,
                  "snippet": {
                    "text": " def has_rtype(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 4,
                  "endLine": 195,
                  "endColumn": 36,
                  "charOffset": 6138,
                  "charLength": 32,
                  "snippet": {
                    "text": " def has_property_returns(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 4,
                  "endLine": 198,
                  "endColumn": 33,
                  "charOffset": 6199,
                  "charLength": 29,
                  "snippet": {
                    "text": " def has_property_type(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 4,
                  "endLine": 201,
                  "endColumn": 26,
                  "charOffset": 6257,
                  "charLength": 22,
                  "snippet": {
                    "text": " def has_yields(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 4,
                  "endLine": 204,
                  "endColumn": 31,
                  "charOffset": 6308,
                  "charLength": 27,
                  "snippet": {
                    "text": " def has_yields_type(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 4,
                  "endLine": 207,
                  "endColumn": 32,
                  "charOffset": 6364,
                  "charLength": 28,
                  "snippet": {
                    "text": " def match_param_docs(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 4,
                  "endLine": 210,
                  "endColumn": 43,
                  "charOffset": 6428,
                  "charLength": 39,
                  "snippet": {
                    "text": " def params_documented_elsewhere(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 1,
                  "endLine": 214,
                  "endColumn": 34,
                  "charOffset": 6545,
                  "charLength": 33,
                  "snippet": {
                    "text": "class SphinxDocstring(Docstring):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 1,
                  "endLine": 402,
                  "endColumn": 34,
                  "charOffset": 12707,
                  "charLength": 33,
                  "snippet": {
                    "text": "class GoogleDocstring(Docstring):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 4,
                  "endLine": 615,
                  "endColumn": 43,
                  "charOffset": 19311,
                  "charLength": 39,
                  "snippet": {
                    "text": " def min_section_indent(section_match):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/extensions/_check_docs_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 1,
                  "endLine": 664,
                  "endColumn": 39,
                  "charOffset": 20838,
                  "charLength": 38,
                  "snippet": {
                    "text": "class NumpyDocstring(GoogleDocstring):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diadefslib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 67,
                  "charOffset": 994,
                  "charLength": 66,
                  "snippet": {
                    "text": "from pylint.pyreverse.diagrams import PackageDiagram, ClassDiagram"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.diagrams'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diadefslib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 67,
                  "charOffset": 994,
                  "charLength": 66,
                  "snippet": {
                    "text": "from pylint.pyreverse.diagrams import PackageDiagram, ClassDiagram"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diadefslib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 49,
                  "charOffset": 1062,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.pyreverse.utils import LocalsVisitor"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diadefslib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 49,
                  "charOffset": 1062,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.pyreverse.utils import LocalsVisitor"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diadefslib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 31,
                  "endLine": 102,
                  "endColumn": 49,
                  "charOffset": 4069,
                  "charLength": 18,
                  "snippet": {
                    "text": " ass_node._proxied"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'pkgdiagram' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diadefslib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 12,
                  "endLine": 139,
                  "endColumn": 78,
                  "charOffset": 5437,
                  "charLength": 66,
                  "snippet": {
                    "text": " self.pkgdiagram = PackageDiagram('packages %s' % node.name, mode)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'pkgdiagram' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diadefslib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 12,
                  "endLine": 141,
                  "endColumn": 35,
                  "charOffset": 5531,
                  "charLength": 23,
                  "snippet": {
                    "text": " self.pkgdiagram = None"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diadefslib.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 1,
                  "endLine": 205,
                  "endColumn": 22,
                  "charOffset": 7691,
                  "charLength": 21,
                  "snippet": {
                    "text": "class DiadefsHandler:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 61,
                  "charOffset": 587,
                  "charLength": 60,
                  "snippet": {
                    "text": "from pylint.pyreverse.utils import is_interface, FilterMixIn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 61,
                  "charOffset": 587,
                  "charLength": 60,
                  "snippet": {
                    "text": "from pylint.pyreverse.utils import is_interface, FilterMixIn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'checkers' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 58,
                  "charOffset": 649,
                  "charLength": 57,
                  "snippet": {
                    "text": "from pylint.checkers.utils import decorated_with_property"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.checkers.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 58,
                  "charOffset": 649,
                  "charLength": 57,
                  "snippet": {
                    "text": "from pylint.checkers.utils import decorated_with_property"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 14,
                  "charOffset": 712,
                  "charLength": 13,
                  "snippet": {
                    "text": "class Figure:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 28,
                  "charOffset": 774,
                  "charLength": 27,
                  "snippet": {
                    "text": "class Relationship(Figure):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (0/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 29,
                  "charOffset": 1124,
                  "charLength": 28,
                  "snippet": {
                    "text": "class DiagramEntity(Figure):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 4,
                  "endLine": 56,
                  "endColumn": 39,
                  "charOffset": 1738,
                  "charLength": 35,
                  "snippet": {
                    "text": " def get_relationships(self, role):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 27,
                  "endLine": 117,
                  "endColumn": 45,
                  "charOffset": 4118,
                  "charLength": 18,
                  "snippet": {
                    "text": " ass_node._proxied"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _proxied of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/diagrams.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 32,
                  "endLine": 185,
                  "endColumn": 47,
                  "charOffset": 6699,
                  "charLength": 15,
                  "snippet": {
                    "text": " value._proxied"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "FIXME: what if __implements__ = (MyIFace, MyParent.__implements__)..."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 6,
                  "endLine": 48,
                  "endColumn": 76,
                  "charOffset": 1420,
                  "charLength": 70,
                  "snippet": {
                    "text": " FIXME: what if __implements__ = (MyIFace, MyParent.__implements__)..."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO: don't use get_module_part,"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 22,
                  "endLine": 273,
                  "endColumn": 55,
                  "charOffset": 9142,
                  "charLength": 33,
                  "snippet": {
                    "text": " TODO: don't use get_module_part,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "XXX why is first file defining the project.path ?"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 10,
                  "endLine": 352,
                  "endColumn": 60,
                  "charOffset": 12133,
                  "charLength": 50,
                  "snippet": {
                    "text": " XXX why is first file defining the project.path ?"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 35,
                  "charOffset": 825,
                  "charLength": 34,
                  "snippet": {
                    "text": "from pylint.pyreverse import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 35,
                  "charOffset": 825,
                  "charLength": 34,
                  "snippet": {
                    "text": "from pylint.pyreverse import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _handled of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 8,
                  "endLine": 207,
                  "endColumn": 29,
                  "charOffset": 6756,
                  "charLength": 21,
                  "snippet": {
                    "text": " node._handled = True"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0902(too-many-instance-attributes)",
          "level": "note",
          "message": {
            "text": "Too many instance attributes (9/7)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 1,
                  "endLine": 307,
                  "endColumn": 15,
                  "charOffset": 10538,
                  "charLength": 14,
                  "snippet": {
                    "text": "class Project:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 4,
                  "endLine": 320,
                  "endColumn": 32,
                  "charOffset": 10972,
                  "charLength": 28,
                  "snippet": {
                    "text": " def add_module(self, node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 4,
                  "endLine": 324,
                  "endColumn": 32,
                  "charOffset": 11081,
                  "charLength": 28,
                  "snippet": {
                    "text": " def get_module(self, name):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/inspector.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 4,
                  "endLine": 327,
                  "endColumn": 28,
                  "charOffset": 11150,
                  "charLength": 24,
                  "snippet": {
                    "text": " def get_children(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "TODO : generate dependencies like in pylint"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 6,
                  "endLine": 66,
                  "endColumn": 50,
                  "charOffset": 2858,
                  "charLength": 44,
                  "snippet": {
                    "text": " TODO : generate dependencies like in pylint"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'config' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 45,
                  "charOffset": 733,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.config import ConfigurationMixIn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.config'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 45,
                  "charOffset": 733,
                  "charLength": 44,
                  "snippet": {
                    "text": "from pylint.config import ConfigurationMixIn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 66,
                  "charOffset": 779,
                  "charLength": 65,
                  "snippet": {
                    "text": "from pylint.pyreverse.inspector import Linker, project_from_files"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.inspector'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 66,
                  "charOffset": 779,
                  "charLength": 65,
                  "snippet": {
                    "text": "from pylint.pyreverse.inspector import Linker, project_from_files"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 55,
                  "charOffset": 846,
                  "charLength": 54,
                  "snippet": {
                    "text": "from pylint.pyreverse.diadefslib import DiadefsHandler"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.diadefslib'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 55,
                  "charOffset": 846,
                  "charLength": 54,
                  "snippet": {
                    "text": "from pylint.pyreverse.diadefslib import DiadefsHandler"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 36,
                  "charOffset": 902,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.pyreverse import writer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 36,
                  "charOffset": 902,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.pyreverse import writer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 58,
                  "charOffset": 939,
                  "charLength": 57,
                  "snippet": {
                    "text": "from pylint.pyreverse.utils import insert_default_options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 58,
                  "charOffset": 939,
                  "charLength": 57,
                  "snippet": {
                    "text": "from pylint.pyreverse.utils import insert_default_options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 31,
                  "charOffset": 4440,
                  "charLength": 30,
                  "snippet": {
                    "text": "class Run(ConfigurationMixIn):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "FIXME: use set ?"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 34,
                  "endLine": 198,
                  "endColumn": 51,
                  "charOffset": 6067,
                  "charLength": 17,
                  "snippet": {
                    "text": " FIXME: use set ?"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 24,
                  "charOffset": 2444,
                  "charLength": 23,
                  "snippet": {
                    "text": "def is_interface(node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 24,
                  "charOffset": 2525,
                  "charLength": 23,
                  "snippet": {
                    "text": "def is_exception(node):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0903(too-few-public-methods)",
          "level": "note",
          "message": {
            "text": "Too few public methods (1/2)"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 110,
                  "endColumn": 19,
                  "charOffset": 3021,
                  "charLength": 18,
                  "snippet": {
                    "text": "class FilterMixIn:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 48,
                  "charOffset": 737,
                  "charLength": 47,
                  "snippet": {
                    "text": "from pylint.pyreverse.utils import is_exception"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.utils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 48,
                  "charOffset": 737,
                  "charLength": 47,
                  "snippet": {
                    "text": "from pylint.pyreverse.utils import is_exception"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'pyreverse' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 49,
                  "charOffset": 786,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.pyreverse.vcgutils import VCGPrinter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.pyreverse.vcgutils'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 49,
                  "charOffset": 786,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.pyreverse.vcgutils import VCGPrinter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'graph' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 36,
                  "charOffset": 836,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.graph import DotBackend"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.graph'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 36,
                  "charOffset": 836,
                  "charLength": 35,
                  "snippet": {
                    "text": "from pylint.graph import DotBackend"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'file_name' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 8,
                  "endLine": 106,
                  "endColumn": 35,
                  "charOffset": 4462,
                  "charLength": 27,
                  "snippet": {
                    "text": " self.file_name = file_name"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'graph_file' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/pyreverse/writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 8,
                  "endLine": 151,
                  "endColumn": 48,
                  "charOffset": 6162,
                  "charLength": 40,
                  "snippet": {
                    "text": " self.graph_file = open(file_name, 'w+')"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/json.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 40,
                  "charOffset": 521,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.interfaces import IReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/json.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 40,
                  "charOffset": 521,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.interfaces import IReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/json.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 42,
                  "charOffset": 562,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.reporters import BaseReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/json.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 42,
                  "charOffset": 562,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.reporters import BaseReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0613(unused-argument)",
          "level": "warning",
          "message": {
            "text": "Unused argument 'layout'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/json.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 31,
                  "endLine": 46,
                  "endColumn": 40,
                  "charOffset": 1471,
                  "charLength": 9,
                  "snippet": {
                    "text": " layout):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'interfaces' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 40,
                  "charOffset": 1059,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.interfaces import IReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.interfaces'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 40,
                  "charOffset": 1059,
                  "charLength": 39,
                  "snippet": {
                    "text": "from pylint.interfaces import IReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 42,
                  "charOffset": 1100,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.reporters import BaseReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 42,
                  "charOffset": 1100,
                  "charLength": 41,
                  "snippet": {
                    "text": "from pylint.reporters import BaseReporter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 25,
                  "charOffset": 1143,
                  "charLength": 24,
                  "snippet": {
                    "text": "from pylint import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 61,
                  "charOffset": 1169,
                  "charLength": 60,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.text_writer import TextWriter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters.ureports.text_writer'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 61,
                  "charOffset": 1169,
                  "charLength": 60,
                  "snippet": {
                    "text": "from pylint.reporters.ureports.text_writer import TextWriter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0212(protected-access)",
          "level": "warning",
          "message": {
            "text": "Access to a protected member _splitstrip of a client class"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 22,
                  "endLine": 79,
                  "endColumn": 47,
                  "charOffset": 2369,
                  "charLength": 25,
                  "snippet": {
                    "text": " utils._splitstrip(style)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 4,
                  "endLine": 135,
                  "endColumn": 55,
                  "charOffset": 4167,
                  "charLength": 51,
                  "snippet": {
                    "text": " def on_set_current_module(self, module, filepath):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0613(unused-argument)",
          "level": "warning",
          "message": {
            "text": "Unused argument 'module'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 36,
                  "endLine": 135,
                  "endColumn": 55,
                  "charOffset": 4199,
                  "charLength": 19,
                  "snippet": {
                    "text": " module, filepath):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0613(unused-argument)",
          "level": "warning",
          "message": {
            "text": "Unused argument 'filepath'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/text.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 44,
                  "endLine": 135,
                  "endColumn": 55,
                  "charOffset": 4207,
                  "charLength": 11,
                  "snippet": {
                    "text": " filepath):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Argument name \"a\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 55,
                  "charOffset": 1237,
                  "charLength": 51,
                  "snippet": {
                    "text": " def cmp(a, b): # pylint: disable=redefined-builtin"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Argument name \"b\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 55,
                  "charOffset": 1237,
                  "charLength": 51,
                  "snippet": {
                    "text": " def cmp(a, b): # pylint: disable=redefined-builtin"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing function docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 55,
                  "charOffset": 1237,
                  "charLength": 51,
                  "snippet": {
                    "text": " def cmp(a, b): # pylint: disable=redefined-builtin"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'utils' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 4,
                  "endLine": 120,
                  "endColumn": 29,
                  "charOffset": 3880,
                  "charLength": 25,
                  "snippet": {
                    "text": " from pylint import utils"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0103(invalid-name)",
          "level": "warning",
          "message": {
            "text": "Attribute name \"id\" doesn't conform to snake_case naming style"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/nodes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 8,
                  "endLine": 18,
                  "endColumn": 22,
                  "charOffset": 570,
                  "charLength": 14,
                  "snippet": {
                    "text": " self.id = nid"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/nodes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 13,
                  "charOffset": 512,
                  "charLength": 12,
                  "snippet": {
                    "text": "class VNode:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/nodes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 48,
                  "charOffset": 1473,
                  "charLength": 44,
                  "snippet": {
                    "text": " def accept(self, visitor, *args, **kwargs):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/nodes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 4,
                  "endLine": 53,
                  "endColumn": 47,
                  "charOffset": 1638,
                  "charLength": 43,
                  "snippet": {
                    "text": " def leave(self, visitor, *args, **kwargs):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing class docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/nodes.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 134,
                  "endColumn": 34,
                  "charOffset": 4050,
                  "charLength": 33,
                  "snippet": {
                    "text": "class EvaluationSection(Section):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0511(fixme)",
          "level": "warning",
          "message": {
            "text": "FIXME: layout.cheaders"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 10,
                  "endLine": 73,
                  "endColumn": 33,
                  "charOffset": 2572,
                  "charLength": 23,
                  "snippet": {
                    "text": " FIXME: layout.cheaders"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0611(no-name-in-module)",
          "level": "error",
          "message": {
            "text": "No name 'reporters' in module 'pylint'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 49,
                  "charOffset": 364,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.reporters.ureports import BaseWriter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E0401(import-error)",
          "level": "error",
          "message": {
            "text": "Unable to import 'pylint.reporters.ureports'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 49,
                  "charOffset": 364,
                  "charLength": 48,
                  "snippet": {
                    "text": "from pylint.reporters.ureports import BaseWriter"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 4,
                  "endLine": 21,
                  "endColumn": 28,
                  "charOffset": 631,
                  "charLength": 24,
                  "snippet": {
                    "text": " def begin_format(self):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Instance of 'TextWriter' has no 'section' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 26,
                  "charOffset": 832,
                  "charLength": 18,
                  "snippet": {
                    "text": " self.section += 1"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Instance of 'TextWriter' has no 'section' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 8,
                  "endLine": 31,
                  "endColumn": 26,
                  "charOffset": 921,
                  "charLength": 18,
                  "snippet": {
                    "text": " self.section -= 1"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Instance of 'TextWriter' has no 'section' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 26,
                  "charOffset": 1078,
                  "charLength": 18,
                  "snippet": {
                    "text": " self.section += 1"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Instance of 'TextWriter' has no 'section' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 8,
                  "endLine": 38,
                  "endColumn": 26,
                  "charOffset": 1143,
                  "charLength": 18,
                  "snippet": {
                    "text": " self.section -= 1"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "C0111(missing-docstring)",
          "level": "warning",
          "message": {
            "text": "Missing method docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 4,
                  "endLine": 41,
                  "endColumn": 35,
                  "charOffset": 1192,
                  "charLength": 31,
                  "snippet": {
                    "text": " def visit_title(self, layout):"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "E1101(no-member)",
          "level": "error",
          "message": {
            "text": "Instance of 'TextWriter' has no 'section' member"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 42,
                  "endLine": 45,
                  "endColumn": 70,
                  "charOffset": 1370,
                  "charLength": 28,
                  "snippet": {
                    "text": "[self.section] * len(title))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'list_level' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/text_writer.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 8,
                  "endLine": 23,
                  "endColumn": 28,
                  "charOffset": 712,
                  "charLength": 20,
                  "snippet": {
                    "text": " self.list_level = 0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'encoding' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 8,
                  "endLine": 34,
                  "endColumn": 44,
                  "charOffset": 1188,
                  "charLength": 36,
                  "snippet": {
                    "text": " self.encoding = encoding or 'UTF-8'"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'out' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 8,
                  "endLine": 35,
                  "endColumn": 26,
                  "charOffset": 1233,
                  "charLength": 18,
                  "snippet": {
                    "text": " self.out = stream"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'out' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 16,
                  "endLine": 93,
                  "endColumn": 34,
                  "charOffset": 3111,
                  "charLength": 18,
                  "snippet": {
                    "text": " self.out = stream"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'out' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 12,
                  "endLine": 97,
                  "endColumn": 27,
                  "charOffset": 3237,
                  "charLength": 15,
                  "snippet": {
                    "text": " self.out = out"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "W0201(attribute-defined-outside-init)",
          "level": "warning",
          "message": {
            "text": "Attribute 'section' defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 8,
                  "endLine": 57,
                  "endColumn": 25,
                  "charOffset": 1907,
                  "charLength": 17,
                  "snippet": {
                    "text": " self.section = 0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0801(duplicate-code)",
          "level": "note",
          "message": {
            "text": "Similar lines in 2 files\n==pylint.pylint.extensions.comparetozero:42\n==pylint.pylint.extensions.emptystring:42\n    def visit_compare(self, node):\n        _operators = ['!=', '==', 'is not', 'is']\n        # note: astroid.Compare has the left most operand in node.left\n        # while the rest are a list of tuples in node.ops\n        # the format of the tuple is ('compare operator sign', node)\n        # here we squash everything into `ops` to make it easier for processing later\n        ops = [('', node.left)]\n        ops.extend(node.ops)\n        ops = list(itertools.chain(*ops))\n\n        for ops_idx in range(len(ops) - 2):\n            op_1 = ops[ops_idx]\n            op_2 = ops[ops_idx + 1]\n            op_3 = ops[ops_idx + 2]\n            error_detected = False\n\n            # 0 ?? X"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 63,
                  "charLength": 62,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2016 Claudiu Popa <pcmanticore@gmail.com>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0801(duplicate-code)",
          "level": "note",
          "message": {
            "text": "Similar lines in 3 files\n==pylint.pylint.checkers.refactoring:1177\n==pylint.pylint.extensions.comparetozero:48\n==pylint.pylint.extensions.emptystring:48\n        ops = [('', node.left)]\n        ops.extend(node.ops)\n        ops = list(itertools.chain(*ops))\n\n        for ops_idx in range(len(ops) - 2):\n            op_1 = ops[ops_idx]\n            op_2 = ops[ops_idx + 1]\n            op_3 = ops[ops_idx + 2]\n            error_detected = False\n\n            # x ?? \"\""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 63,
                  "charLength": 62,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2016 Claudiu Popa <pcmanticore@gmail.com>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0801(duplicate-code)",
          "level": "note",
          "message": {
            "text": "Similar lines in 2 files\n==pylint.pylint.checkers.classes:396\n==pylint.pylint.checkers.utils:833\n        return None  # no values infered\n    try:\n        next(inferit)\n        return None  # there is ambiguity on the inferred node\n    except astroid.InferenceError:\n        return None  # there is some kind of ambiguity\n    except StopIteration:\n        return value\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 63,
                  "charLength": 62,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2016 Claudiu Popa <pcmanticore@gmail.com>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0801(duplicate-code)",
          "level": "note",
          "message": {
            "text": "Similar lines in 2 files\n==pylint.pylint.extensions.comparetozero:9\n==pylint.pylint.extensions.emptystring:9\nimport itertools\n\nimport astroid\n\nfrom pylint import interfaces\nfrom pylint import checkers\nfrom pylint.checkers import utils\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 63,
                  "charLength": 62,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2016 Claudiu Popa <pcmanticore@gmail.com>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "R0801(duplicate-code)",
          "level": "note",
          "message": {
            "text": "Similar lines in 2 files\n==pylint.pylint.checkers.python3:907\n==pylint.pylint.checkers.typecheck:704\n    def visit_assignattr(self, node):\n        if isinstance(node.assign_type(), astroid.AugAssign):\n            self.visit_attribute(node)\n\n    def visit_delattr(self, node):\n        self.visit_attribute(node)\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/pylint/pylint/reporters/ureports/__init__.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 63,
                  "charLength": 62,
                  "snippet": {
                    "text": "# Copyright (c) 2015-2016 Claudiu Popa <pcmanticore@gmail.com>"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}