{
  "$schema": "http://json.schemastore.org/sarif-2.0.0",
  "version": "2.0.0",
  "runs": [
    {
      "tool": {
        "name": "TSLint"
      },
      "originalUriBaseIds": {
        "SRCROOT": "file:///c:/testdata/"
      },
      "files": {
        "#SRCROOT#src/tslint/scripts/generate-changelog.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDE3IFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCi8qKg0KICogR2VuZXJhdGVzIGVudHJpZXMgZm9yIENIQU5HRUxPRy5tZCBmcm9tIHB1bGwgcmVxdWVzdHMNCiAqDQogKiBSZWFkcyBjaGFuZ2Vsb2cgZW50cmllcyBmcm9tIHB1bGwgcmVxdWVzdHMgbWVyZ2VkIHNpbmNlIHRoZSBsYXN0IHJlbGVhc2UgdGFnLg0KICogQ2hhbmdlbG9nIGVudHJpZXMgYXJlIGxpbmVzIHdpdGhpbiB0aGUgZmlyc3QgUFIgY29tbWVudCB0aGF0IG1hdGNoZXMgL15cW1thLXpcLV0rXF0vIGxpa2UgYFtuZXctcnVsZV1gIGFuZCBgW2J1Z2ZpeF1gDQogKi8NCg0KLy8gdHNsaW50OmRpc2FibGU6bm8tY29uc29sZQ0KDQppbXBvcnQgR2l0SHViQXBpID0gcmVxdWlyZSgiZ2l0aHViIik7DQppbXBvcnQgKiBhcyBmcyBmcm9tICJmcyI7DQppbXBvcnQgKiBhcyBvcyBmcm9tICJvcyI7DQppbXBvcnQgKiBhcyBwYXRoIGZyb20gInBhdGgiOw0KDQppbXBvcnQgeyBjYW1lbGl6ZSB9IGZyb20gIi4uL2xpYi91dGlscyI7DQoNCmNvbnN0IGdpdGh1YiA9IG5ldyBHaXRIdWJBcGkoew0KICAgIGhvc3Q6ICJhcGkuZ2l0aHViLmNvbSIsDQogICAgcHJvdG9jb2w6ICJodHRwcyIsDQogICAgdGltZW91dDogNTAwMCwNCn0pOw0KDQpjb25zdCByZXBvSW5mbyA9IHsNCiAgICBvd25lcjogInBhbGFudGlyIiwNCiAgICByZXBvOiAidHNsaW50IiwNCn07DQoNCmNvbnN0IHRva2VuRmlsZSA9IHBhdGguam9pbihvcy5ob21lZGlyKCksICJnaXRodWJfdG9rZW4udHh0Iik7DQoNCi8vIGF1dGhlbnRpY2F0ZQ0KY29uc3QgYXV0aDogR2l0SHViQXBpLkF1dGggPSB7DQogICAgdG9rZW46IGZzLnJlYWRGaWxlU3luYyh0b2tlbkZpbGUsICJ1dGY4IikudG9TdHJpbmcoKS50cmltKCksDQogICAgdHlwZTogIm9hdXRoIiwNCn07DQpjb25zb2xlLmxvZygiVXNpbmcgT0F1dGggdG9rZW4gIiArIGF1dGgudG9rZW4gKyAiXG4iKTsNCg0KLy8gcHJvY2Vzcy5lbnYuTk9ERV9UTFNfUkVKRUNUX1VOQVVUSE9SSVpFRCA9ICIwIjsgLy8gaWdub3JlcyBUTFMgY2VydGlmaWNhdGUgZXJyb3INCmdpdGh1Yi5hdXRoZW50aWNhdGUoYXV0aCk7DQoNCmNvbnN0IGNvbW1pdHM6IElDb21taXRbXSA9IFtdOw0KZ2l0aHViLnJlcG9zLmdldExhdGVzdFJlbGVhc2UocmVwb0luZm8pLnRoZW4oKHZhbHVlKSA9PiB7DQogICAgY29uc29sZS5sb2coIkdldHRpbmcgY29tbWl0cyAiICsgdmFsdWUudGFnX25hbWUgKyAiLi5tYXN0ZXIiKTsNCiAgICAvLyBnZXQgdGhlIGNvbW1pdHMgYmV0d2VlbiB0aGUgbW9zdCByZWNlbnQgcmVsZWFzZSBhbmQgdGhlIGhlYWQgb2YgbWFzdGVyDQogICAgcmV0dXJuIGdpdGh1Yi5yZXBvcy5jb21wYXJlQ29tbWl0cyh7DQogICAgICAgIGJhc2U6IHZhbHVlLnRhZ19uYW1lLA0KICAgICAgICBoZWFkOiAibWFzdGVyIiwNCiAgICAgICAgLi4ucmVwb0luZm8sDQogICAgfSk7DQp9KS50aGVuKCh2YWx1ZSkgPT4gew0KICAgIC8vIGZvciBlYWNoIGNvbW1pdCwgZ2V0IHRoZSBQUiwgYW5kIGV4dHJhY3QgY2hhbmdlbG9nIGVudHJpZXMNCiAgICBjb25zdCBwcm9taXNlczogQXJyYXk8UHJvbWlzZTxhbnk+PiA9IFtdOw0KICAgIGZvciAoY29uc3QgY29tbWl0SW5mbyBvZiB2YWx1ZS5jb21taXRzKSB7DQogICAgICAgIGNvbnN0IGNvbW1pdDogSUNvbW1pdCA9IHsNCiAgICAgICAgICAgIGZpZWxkczogW10sDQogICAgICAgICAgICBzaGE6IGNvbW1pdEluZm8uc2hhLA0KICAgICAgICAgICAgc3VibWl0dGVyOiBjb21taXRJbmZvLmNvbW1pdC5hdXRob3IubmFtZSAhPSBudWxsID8gY29tbWl0SW5mby5jb21taXQuYXV0aG9yLm5hbWUgOiBjb21taXRJbmZvLmF1dGhvci5sb2dpbiwNCiAgICAgICAgICAgIHRpdGxlOiBjb21taXRJbmZvLmNvbW1pdC5tZXNzYWdlLA0KICAgICAgICB9Ow0KICAgICAgICBjb21taXRzLnB1c2goY29tbWl0KTsNCg0KICAgICAgICAvLyBjaGVjayBmb3IgYSBwdWxsIHJlcXVlc3QgbnVtYmVyIGluIHRoZSBjb21taXQgdGl0bGUNCiAgICAgICAgY29uc3QgbWF0Y2ggPSAoY29tbWl0SW5mby5jb21taXQubWVzc2FnZSBhcyBzdHJpbmcpLm1hdGNoKC9cKCMoXGQrKVwpLyk7DQogICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7DQogICAgICAgICAgICBjb21taXQucHVzaFJlcXVlc3ROdW0gPSBOdW1iZXIucGFyc2VJbnQobWF0Y2hbMV0sIDEwKTsNCg0KICAgICAgICAgICAgLy8gZ2V0IHRoZSBQUiB0ZXh0DQogICAgICAgICAgICBwcm9taXNlcy5wdXNoKGdpdGh1Yi5pc3N1ZXMuZ2V0KHsNCiAgICAgICAgICAgICAgICBudW1iZXI6IGNvbW1pdC5wdXNoUmVxdWVzdE51bSwNCiAgICAgICAgICAgICAgICAuLi5yZXBvSW5mbywNCiAgICAgICAgICAgIH0pLnRoZW4oKGNvbW1lbnQpID0+IHsNCiAgICAgICAgICAgICAgICAvLyBleHRyYWN0IHRoZSBjaGFuZ2Vsb2cgZW50cmllcw0KICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gKGNvbW1lbnQuYm9keSBhcyBzdHJpbmcpLnNwbGl0KCJcclxuIik7DQogICAgICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkTWF0Y2ggPSBsaW5lLm1hdGNoKC9eKFxbW2EtelwtXStcXSkvKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkTWF0Y2gpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1pdC5maWVsZHMucHVzaCh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBmaWVsZE1hdGNoWzFdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGFkZExpbmtzKGxpbmUpICsgIiAoIyIgKyBjb21taXQucHVzaFJlcXVlc3ROdW0gKyAiKSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pKTsNCiAgICAgICAgfQ0KDQogICAgfQ0KICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7DQp9KS50aGVuKCgpID0+IHsNCiAgICBjb25zdCBlbnRyaWVzOiBJRmllbGRbXSA9IFtdOw0KICAgIGNvbnN0IG5vRmllbGRzOiBzdHJpbmdbXSA9IFtdOw0KICAgIGNvbnN0IGNvbnRyaWJ1dG9ycyA9IG5ldyBTZXQ8c3RyaW5nPigpOw0KICAgIGZvciAoY29uc3QgY29tbWl0IG9mIGNvbW1pdHMpIHsNCiAgICAgICAgaWYgKGNvbW1pdC5maWVsZHMubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBjb21taXQuZmllbGRzKSB7DQogICAgICAgICAgICAgICAgaWYgKGZpZWxkLnRhZyAhPT0gIltuby1sb2ddIikgew0KICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLnB1c2goZmllbGQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIG5vRmllbGRzLnB1c2goY29tbWl0LnRpdGxlKTsNCiAgICAgICAgfQ0KICAgICAgICBjb250cmlidXRvcnMuYWRkKGNvbW1pdC5zdWJtaXR0ZXIpOw0KICAgIH0NCiAgICBlbnRyaWVzLnNvcnQoKGEsIGIpID0+IHsNCiAgICAgICAgcmV0dXJuIGEudGFnLmxvY2FsZUNvbXBhcmUoYi50YWcpOw0KICAgIH0pOw0KDQogICAgY29uc29sZS5sb2coIlxuLS0tLSBmb3JtYXR0ZWQgY2hhbmdlbG9nIGVudHJpZXM6IC0tLS0iKTsNCiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHsNCiAgICAgICAgY29uc29sZS5sb2coIi0gIiArIGVudHJ5LnRleHQpOw0KICAgIH0NCg0KICAgIGNvbnNvbGUubG9nKCJcbi0tLS0gUFJzIHdpdGggbWlzc2luZyBjaGFuZ2Vsb2cgZW50cmllczogLS0tLSIpOw0KICAgIGZvciAoY29uc3QgbWlzc2luZyBvZiBub0ZpZWxkcykgew0KICAgICAgICBjb25zb2xlLmxvZygiLSAiICsgbWlzc2luZy5yZXBsYWNlKC9bXHJcbl0rLywgIlxyXG4gICAgIikpOw0KICAgIH0NCg0KICAgIGNvbnNvbGUubG9nKCJcbi0tLS0gdGhhbmtzIC0tLS0iKTsNCiAgICBjb25zb2xlLmxvZygiVGhhbmtzIHRvIG91ciBjb250cmlidXRvcnMhIik7DQogICAgY29udHJpYnV0b3JzLmZvckVhY2goKGNvbnRyaWJ1dG9yKSA9PiB7DQogICAgICAgIGNvbnNvbGUubG9nKCItICIgKyBjb250cmlidXRvcik7DQogICAgfSk7DQp9KS5jYXRjaCgoZXJyb3IpID0+IHsNCiAgICBjb25zb2xlLmxvZygiRXJyb3I6IiArIGVycm9yKTsNCn0pOw0KDQpjb25zdCBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBib29sZWFuPigpOw0KDQpmdW5jdGlvbiBpc1J1bGUocnVsZU5hbWU6IHN0cmluZyk6IGJvb2xlYW4gew0KICAgIGxldCByZXN1bHQgPSBjYWNoZS5nZXQocnVsZU5hbWUpOw0KICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICByZXN1bHQgPSBmcy5leGlzdHNTeW5jKGAuL3NyYy9ydWxlcy8ke2NhbWVsaXplKHJ1bGVOYW1lKX1SdWxlLnRzYCk7DQogICAgICAgIGNhY2hlLnNldChydWxlTmFtZSwgcmVzdWx0KTsNCiAgICB9DQogICAgcmV0dXJuIHJlc3VsdDsNCn0NCg0KLyoqIFJlcGxhY2UgcnVsZSBuYW1lcyB3aXRoIGxpbmtzIHRvIHRoZSBkb2NzIHdlYnNpdGUgKi8NCmZ1bmN0aW9uIGFkZExpbmtzKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7DQogICAgbGV0IHJlc3VsdCA9ICIiOw0KICAgIGxldCBsYXN0SW5kZXggPSAwOw0KICAgIC8vIG1hdGNoIGV2ZXJ5dGhpbmcgdGhhdCBsb29rcyBsaWtlIGEgcnVsZSBuYW1lIGFuZCBpcyBlbmNsb3NlZCBpbiBiYWNrdGlja3MNCiAgICBjb25zdCByZWdleCA9IC9gKFthLXpdWy1hLXpdKlthLXpdKStgL2c7DQogICAgbGV0IG1hdGNoID0gcmVnZXguZXhlYyh0ZXh0KTsNCiAgICB3aGlsZSAobWF0Y2ggIT09IG51bGwpIHsNCiAgICAgICAgaWYgKGlzUnVsZShtYXRjaFsxXSkpIHsNCiAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgbWF0Y2guaW5kZXgpICsgYFske21hdGNoWzBdfV0oaHR0cHM6Ly9wYWxhbnRpci5naXRodWIuaW8vdHNsaW50L3J1bGVzLyR7bWF0Y2hbMV19LylgOw0KICAgICAgICAgICAgbGFzdEluZGV4ID0gcmVnZXgubGFzdEluZGV4Ow0KICAgICAgICB9DQogICAgICAgIG1hdGNoID0gcmVnZXguZXhlYyh0ZXh0KTsNCiAgICB9DQogICAgcmV0dXJuIHJlc3VsdCArIHRleHQuc2xpY2UobGFzdEluZGV4KTsNCn0NCg0KaW50ZXJmYWNlIElGaWVsZCB7DQogICAgdGFnOiBzdHJpbmc7DQogICAgdGV4dDogc3RyaW5nOw0KfQ0KDQppbnRlcmZhY2UgSUNvbW1pdCB7DQogICAgcHVzaFJlcXVlc3RCb2R5Pzogc3RyaW5nOw0KICAgIHB1c2hSZXF1ZXN0TnVtPzogbnVtYmVyOw0KICAgIHN1Ym1pdHRlcjogc3RyaW5nOw0KICAgIHNoYTogc3RyaW5nOw0KICAgIHRpdGxlOiBzdHJpbmc7DQogICAgZmllbGRzOiBJRmllbGRbXTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "B7356857F294DF6B23F46200FE7B64D6",
              "algorithm": "md5"
            },
            {
              "value": "41545B6E165F16DA3953989928F1F4FDD824ECBA",
              "algorithm": "sha-1"
            },
            {
              "value": "CCD76703D3DFD926D36DB78DD3E8FBB1417A8B46FADB4889D9143A440D98E8F8",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/configs/all.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "4C676E0B468CB83734332B8836ECB011",
              "algorithm": "md5"
            },
            {
              "value": "EC6C658E017EC2BFFA7769966CC2900A9166E476",
              "algorithm": "sha-1"
            },
            {
              "value": "F2DB1B722582BB57AB78CF923CD75D72AAEF689E857589AE06633E5B7603E8F2",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/configuration.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "2399B0F399D2B2B7319459F950EFE210",
              "algorithm": "md5"
            },
            {
              "value": "811D5FDA96FA6E7F0D02D3B0BB5C1960F8A58925",
              "algorithm": "sha-1"
            },
            {
              "value": "C40376227036C7F4DC300D50F601116679ECB693754C08136873F4BD72978597",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/enableDisableRules.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "C4D0CCA1CB28FE166B23E4F67D6DD92D",
              "algorithm": "md5"
            },
            {
              "value": "3C075855ED6322AA206EC002CDD4A4E828ECA46E",
              "algorithm": "sha-1"
            },
            {
              "value": "C93BA4F8732429554D992DE0CDF44C6CAC010A57422C877B23F090EC3FF85F79",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/error.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KY29uc3Qgc2hvd25XYXJuaW5ncyA9IG5ldyBTZXQ8c3RyaW5nPigpOw0KDQovKioNCiAqIEdlbmVyaWMgZXJyb3IgdHlwaW5nIGZvciBFY21hU2NyaXB0IGVycm9ycw0KICogRGVmaW5lIGBFcnJvcmAgaGVyZSB0byBhdm9pZCB1c2luZyBgRXJyb3JgIGZyb20gQHR5cGVzL25vZGUuDQogKiBVc2luZyB0aGUgYG5vZGVgIHZlcnNpb24gY2F1c2VzIGEgY29tcGlsYXRpb24gZXJyb3Igd2hlbiB0aGlzIGNvZGUgaXMgdXNlZCBhcyBhbiBucG0gbGlicmFyeSBpZiBAdHlwZXMvbm9kZSBpcyBub3QgYWxyZWFkeSBpbXBvcnRlZC4NCiAqLw0KZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXJyb3Igew0KICAgIHB1YmxpYyBuYW1lPzogc3RyaW5nOw0KICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7DQogICAgcHVibGljIHN0YWNrPzogc3RyaW5nOw0KICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpOw0KfQ0KDQovKioNCiAqIFVzZWQgdG8gZXhpdCB0aGUgcHJvZ3JhbSBhbmQgZGlzcGxheSBhIGZyaWVuZGx5IG1lc3NhZ2Ugd2l0aG91dCB0aGUgY2FsbHN0YWNrLg0KICovDQpleHBvcnQgY2xhc3MgRmF0YWxFcnJvciBleHRlbmRzIEVycm9yIHsNCiAgICBwdWJsaWMgc3RhdGljIE5BTUUgPSAiRmF0YWxFcnJvciI7DQogICAgY29uc3RydWN0b3IocHVibGljIG1lc3NhZ2U6IHN0cmluZywgcHVibGljIGlubmVyRXJyb3I/OiBFcnJvcikgew0KICAgICAgICBzdXBlcihtZXNzYWdlKTsNCiAgICAgICAgdGhpcy5uYW1lID0gRmF0YWxFcnJvci5OQU1FOw0KDQogICAgICAgIC8vIEZpeCBwcm90b3R5cGUgY2hhaW4gZm9yIHRhcmdldCBFUzUNCiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEZhdGFsRXJyb3IucHJvdG90eXBlKTsNCiAgICB9DQp9DQoNCmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yKHBvc3NpYmxlRXJyb3I6IGFueSk6IHBvc3NpYmxlRXJyb3IgaXMgRXJyb3Igew0KICAgIHJldHVybiBwb3NzaWJsZUVycm9yICE9IHVuZGVmaW5lZCAmJiAocG9zc2libGVFcnJvciBhcyBFcnJvcikubWVzc2FnZSAhPT0gdW5kZWZpbmVkOw0KfQ0KDQpleHBvcnQgZnVuY3Rpb24gc2hvd1dhcm5pbmdPbmNlKG1lc3NhZ2U6IHN0cmluZykgew0KICAgIGlmICghc2hvd25XYXJuaW5ncy5oYXMobWVzc2FnZSkpIHsNCiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpOw0KICAgICAgICBzaG93bldhcm5pbmdzLmFkZChtZXNzYWdlKTsNCiAgICB9DQp9DQoNCmV4cG9ydCBmdW5jdGlvbiBzaG93UnVsZUNyYXNoV2FybmluZyhtZXNzYWdlOiBzdHJpbmcsIHJ1bGVOYW1lOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcpIHsNCiAgICBjb25zb2xlLndhcm4oYFRoZSAnJHtydWxlTmFtZX0nIHJ1bGUgdGhyZXcgYW4gZXJyb3IgaW4gJyR7ZmlsZU5hbWV9JzpcbiR7bWVzc2FnZX1gKTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "766CA36D7EF8044E381328D727A3E8CA",
              "algorithm": "md5"
            },
            {
              "value": "55A1C18E77ACB601DA1CC65DA0E54CDBD7D70C6E",
              "algorithm": "sha-1"
            },
            {
              "value": "FCE00D9F411D3AB3A5ACFFEB846B2EDC09824306F8DA7AAF1577566306EFCB53",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/formatterLoader.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgZnMgZnJvbSAiZnMiOw0KaW1wb3J0ICogYXMgcGF0aCBmcm9tICJwYXRoIjsNCmltcG9ydCAqIGFzIHJlc29sdmUgZnJvbSAicmVzb2x2ZSI7DQppbXBvcnQgeyBGb3JtYXR0ZXJDb25zdHJ1Y3RvciB9IGZyb20gIi4vaW5kZXgiOw0KaW1wb3J0IHsgY2FtZWxpemUgfSBmcm9tICIuL3V0aWxzIjsNCg0KY29uc3QgQ09SRV9GT1JNQVRURVJTX0RJUkVDVE9SWSA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICJmb3JtYXR0ZXJzIik7DQoNCmV4cG9ydCBmdW5jdGlvbiBmaW5kRm9ybWF0dGVyKG5hbWU6IHN0cmluZyB8IEZvcm1hdHRlckNvbnN0cnVjdG9yLCBmb3JtYXR0ZXJzRGlyZWN0b3J5Pzogc3RyaW5nKTogRm9ybWF0dGVyQ29uc3RydWN0b3IgfCB1bmRlZmluZWQgew0KICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gImZ1bmN0aW9uIikgew0KICAgICAgICByZXR1cm4gbmFtZTsNCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAic3RyaW5nIikgew0KICAgICAgICBuYW1lID0gbmFtZS50cmltKCk7DQogICAgICAgIGNvbnN0IGNhbWVsaXplZE5hbWUgPSBjYW1lbGl6ZShgJHtuYW1lfUZvcm1hdHRlcmApOw0KDQogICAgICAgIC8vIGZpcnN0IGNoZWNrIGZvciBjb3JlIGZvcm1hdHRlcnMNCiAgICAgICAgbGV0IEZvcm1hdHRlciA9IGxvYWRGb3JtYXR0ZXIoQ09SRV9GT1JNQVRURVJTX0RJUkVDVE9SWSwgY2FtZWxpemVkTmFtZSwgdHJ1ZSk7DQogICAgICAgIGlmIChGb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuIEZvcm1hdHRlcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIHRoZW4gY2hlY2sgZm9yIHJ1bGVzIHdpdGhpbiB0aGUgZmlyc3QgbGV2ZWwgb2YgcnVsZXNEaXJlY3RvcnkNCiAgICAgICAgaWYgKGZvcm1hdHRlcnNEaXJlY3RvcnkgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgRm9ybWF0dGVyID0gbG9hZEZvcm1hdHRlcihmb3JtYXR0ZXJzRGlyZWN0b3J5LCBjYW1lbGl6ZWROYW1lKTsNCiAgICAgICAgICAgIGlmIChGb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBGb3JtYXR0ZXI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBlbHNlIHRyeSB0byByZXNvbHZlIGFzIG1vZHVsZQ0KICAgICAgICByZXR1cm4gbG9hZEZvcm1hdHRlck1vZHVsZShuYW1lKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAvLyBJZiBhbiBzb21ldGhpbmcgZWxzZSBpcyBwYXNzZWQgYXMgYSBuYW1lIChlLmcuIG9iamVjdCkNCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOYW1lIG9mIHR5cGUgJHt0eXBlb2YgbmFtZX0gaXMgbm90IHN1cHBvcnRlZC5gKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGxvYWRGb3JtYXR0ZXIoZGlyZWN0b3J5OiBzdHJpbmcsIG5hbWU6IHN0cmluZywgaXNDb3JlPzogYm9vbGVhbik6IEZvcm1hdHRlckNvbnN0cnVjdG9yIHwgdW5kZWZpbmVkIHsNCiAgICBjb25zdCBmb3JtYXR0ZXJQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbihkaXJlY3RvcnksIG5hbWUpKTsNCiAgICBsZXQgZnVsbFBhdGg6IHN0cmluZzsNCiAgICBpZiAoaXNDb3JlKSB7DQogICAgICAgIGZ1bGxQYXRoID0gYCR7Zm9ybWF0dGVyUGF0aH0uanNgOw0KICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZnVsbFBhdGgpKSB7DQogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOw0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgLy8gUmVzb2x2ZSB1c2luZyBub2RlJ3MgcGF0aCByZXNvbHV0aW9uIHRvIGFsbG93IGRldmVsb3BlcnMgdG8gd3JpdGUgY3VzdG9tIGZvcm1hdHRlcnMgaW4gVHlwZVNjcmlwdCB3aGljaCBjYW4gYmUgbG9hZGVkIGJ5IFRTLU5vZGUNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGZ1bGxQYXRoID0gcmVxdWlyZS5yZXNvbHZlKGZvcm1hdHRlclBhdGgpOw0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIChyZXF1aXJlKGZ1bGxQYXRoKSBhcyB7IEZvcm1hdHRlcjogRm9ybWF0dGVyQ29uc3RydWN0b3IgfSkuRm9ybWF0dGVyOw0KfQ0KDQpmdW5jdGlvbiBsb2FkRm9ybWF0dGVyTW9kdWxlKG5hbWU6IHN0cmluZyk6IEZvcm1hdHRlckNvbnN0cnVjdG9yIHwgdW5kZWZpbmVkIHsNCiAgICBsZXQgc3JjOiBzdHJpbmc7DQogICAgdHJ5IHsNCiAgICAgICAgLy8gZmlyc3QgdHJ5IHRvIGZpbmQgYSBtb2R1bGUgaW4gdGhlIGRlcGVuZGVuY2llcyBvZiB0aGUgY3VycmVudGx5IGxpbnRlZCBwcm9qZWN0DQogICAgICAgIHNyYyA9IHJlc29sdmUuc3luYyhuYW1lLCB7YmFzZWRpcjogcHJvY2Vzcy5jd2QoKX0pOw0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gbG9jYWwgbW9kdWxlLCB0cnkgcmVsYXRpdmUgdG8gdGhlIGluc3RhbGxhdGlvbiBvZiBUU0xpbnQgKG1pZ2h0IGJlIGdsb2JhbCkNCiAgICAgICAgICAgIHNyYyA9IHJlcXVpcmUucmVzb2x2ZShuYW1lKTsNCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiAocmVxdWlyZShzcmMpIGFzIHsgRm9ybWF0dGVyOiBGb3JtYXR0ZXJDb25zdHJ1Y3RvciB9KS5Gb3JtYXR0ZXI7DQp9DQo="
          },
          "hashes": [
            {
              "value": "697D27862960CEBBF4157BCDAAF2A66D",
              "algorithm": "md5"
            },
            {
              "value": "282D5424CE79992D66B006621B8D14615B64E3FF",
              "algorithm": "sha-1"
            },
            {
              "value": "95D15628CFAE60E0083AF9CB44691B430EF55041FBBF8B43E0014C483372CE0F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/formatters/checkstyleFormatter.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgQWJzdHJhY3RGb3JtYXR0ZXIgfSBmcm9tICIuLi9sYW5ndWFnZS9mb3JtYXR0ZXIvYWJzdHJhY3RGb3JtYXR0ZXIiOw0KaW1wb3J0IHsgSUZvcm1hdHRlck1ldGFkYXRhIH0gZnJvbSAiLi4vbGFuZ3VhZ2UvZm9ybWF0dGVyL2Zvcm1hdHRlciI7DQppbXBvcnQgeyBSdWxlRmFpbHVyZSB9IGZyb20gIi4uL2xhbmd1YWdlL3J1bGUvcnVsZSI7DQoNCmltcG9ydCAqIGFzIFV0aWxzIGZyb20gIi4uL3V0aWxzIjsNCg0KZXhwb3J0IGNsYXNzIEZvcm1hdHRlciBleHRlbmRzIEFic3RyYWN0Rm9ybWF0dGVyIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBJRm9ybWF0dGVyTWV0YWRhdGEgPSB7DQogICAgICAgIGZvcm1hdHRlck5hbWU6ICJjaGVja3N0eWxlIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJGb3JtYXRzIGVycm9ycyBhcyB0aHJvdWdoIHRoZXkgd2VyZSBDaGVja3N0eWxlIG91dHB1dC4iLA0KICAgICAgICBkZXNjcmlwdGlvbkRldGFpbHM6IFV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEltaXRhdGVzIHRoZSBYTUxMb2dnZXIgZnJvbSBDaGVja3N0eWxlIDQuMy4gQWxsIGZhaWx1cmVzIGhhdmUgdGhlICd3YXJuaW5nJyBzZXZlcml0eS5gLA0KICAgICAgICBzYW1wbGU6IFV0aWxzLmRlZGVudGANCiAgICAgICAgPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCiAgICAgICAgPGNoZWNrc3R5bGUgdmVyc2lvbj0iNC4zIj4NCiAgICAgICAgICAgIDxmaWxlIG5hbWU9Im15RmlsZS50cyI+DQogICAgICAgICAgICAgICAgPGVycm9yIGxpbmU9IjEiIGNvbHVtbj0iMTQiIHNldmVyaXR5PSJ3YXJuaW5nIiBtZXNzYWdlPSJNaXNzaW5nIHNlbWljb2xvbiIgc291cmNlPSJmYWlsdXJlLnRzbGludC5zZW1pY29sb24iIC8+DQogICAgICAgICAgICA8L2ZpbGU+DQogICAgICAgIDwvY2hlY2tzdHlsZT5gLA0KICAgICAgICBjb25zdW1lcjogIm1hY2hpbmUiLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBmb3JtYXQoZmFpbHVyZXM6IFJ1bGVGYWlsdXJlW10pOiBzdHJpbmcgew0KICAgICAgICBsZXQgb3V0cHV0ID0gJzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8+PGNoZWNrc3R5bGUgdmVyc2lvbj0iNC4zIj4nOw0KDQogICAgICAgIGlmIChmYWlsdXJlcy5sZW5ndGggIT09IDApIHsNCiAgICAgICAgICAgIGNvbnN0IGZhaWx1cmVzU29ydGVkID0gZmFpbHVyZXMuc29ydCgNCiAgICAgICAgICAgICAgICAoYSwgYikgPT4gYS5nZXRGaWxlTmFtZSgpLmxvY2FsZUNvbXBhcmUoYi5nZXRGaWxlTmFtZSgpKSk7DQogICAgICAgICAgICBsZXQgcHJldmlvdXNGaWxlbmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7DQogICAgICAgICAgICBmb3IgKGNvbnN0IGZhaWx1cmUgb2YgZmFpbHVyZXNTb3J0ZWQpIHsNCiAgICAgICAgICAgICAgICBjb25zdCBzZXZlcml0eSA9IGZhaWx1cmUuZ2V0UnVsZVNldmVyaXR5KCk7DQogICAgICAgICAgICAgICAgaWYgKGZhaWx1cmUuZ2V0RmlsZU5hbWUoKSAhPT0gcHJldmlvdXNGaWxlbmFtZSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNGaWxlbmFtZSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9ICI8L2ZpbGU+IjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0ZpbGVuYW1lID0gZmFpbHVyZS5nZXRGaWxlTmFtZSgpOw0KICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYDxmaWxlIG5hbWU9IiR7dGhpcy5lc2NhcGVYbWwoZmFpbHVyZS5nZXRGaWxlTmFtZSgpKX0iPmA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIG91dHB1dCArPSBgPGVycm9yIGxpbmU9IiR7ZmFpbHVyZS5nZXRTdGFydFBvc2l0aW9uKCkuZ2V0TGluZUFuZENoYXJhY3RlcigpLmxpbmUgKyAxfSIgYDsNCiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYGNvbHVtbj0iJHtmYWlsdXJlLmdldFN0YXJ0UG9zaXRpb24oKS5nZXRMaW5lQW5kQ2hhcmFjdGVyKCkuY2hhcmFjdGVyICsgMX0iIGA7DQogICAgICAgICAgICAgICAgb3V0cHV0ICs9IGBzZXZlcml0eT0iJHtzZXZlcml0eX0iIGA7DQogICAgICAgICAgICAgICAgb3V0cHV0ICs9IGBtZXNzYWdlPSIke3RoaXMuZXNjYXBlWG1sKGZhaWx1cmUuZ2V0RmFpbHVyZSgpKX0iIGA7DQogICAgICAgICAgICAgICAgLy8gY2hlY2tzdHlsZSBwYXJzZXIgd2FudHMgInNvdXJjZSIgdG8gaGF2ZSBzdHJ1Y3R1cmUgbGlrZSA8YW55dGhpbmc+ZG90PGNhdGVnb3J5PmRvdDx0eXBlPg0KICAgICAgICAgICAgICAgIG91dHB1dCArPSBgc291cmNlPSJmYWlsdXJlLnRzbGludC4ke3RoaXMuZXNjYXBlWG1sKGZhaWx1cmUuZ2V0UnVsZU5hbWUoKSl9IiAvPmA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAocHJldmlvdXNGaWxlbmFtZSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIG91dHB1dCArPSAiPC9maWxlPiI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBvdXRwdXQgKz0gIjwvY2hlY2tzdHlsZT4iOw0KICAgICAgICByZXR1cm4gb3V0cHV0Ow0KICAgIH0NCg0KICAgIHByaXZhdGUgZXNjYXBlWG1sKHN0cjogc3RyaW5nKTogc3RyaW5nIHsNCiAgICAgICAgcmV0dXJuIHN0cg0KICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgIiZhbXA7IikNCiAgICAgICAgICAgIC5yZXBsYWNlKC88L2csICImbHQ7IikNCiAgICAgICAgICAgIC5yZXBsYWNlKC8+L2csICImZ3Q7IikNCiAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csICImIzM5OyIpDQogICAgICAgICAgICAucmVwbGFjZSgvIi9nLCAiJnF1b3Q7Iik7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "43884B55813295371EC3FC7810814E7E",
              "algorithm": "md5"
            },
            {
              "value": "BD3D91D9E1EA0DF1D1531E67FC6E6CFD49F6EDB6",
              "algorithm": "sha-1"
            },
            {
              "value": "8EA0A14AA56906BC9AD7D5DD404F087F27748D1B40E2277511B7886C410CB223",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/formatters/codeFrameFormatter.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgQWJzdHJhY3RGb3JtYXR0ZXIgfSBmcm9tICIuLi9sYW5ndWFnZS9mb3JtYXR0ZXIvYWJzdHJhY3RGb3JtYXR0ZXIiOw0KaW1wb3J0IHsgSUZvcm1hdHRlck1ldGFkYXRhIH0gZnJvbSAiLi4vbGFuZ3VhZ2UvZm9ybWF0dGVyL2Zvcm1hdHRlciI7DQppbXBvcnQgeyBSdWxlRmFpbHVyZSB9IGZyb20gIi4uL2xhbmd1YWdlL3J1bGUvcnVsZSI7DQoNCmltcG9ydCBjb2RlRnJhbWUgPSByZXF1aXJlKCJiYWJlbC1jb2RlLWZyYW1lIik7DQppbXBvcnQgY2hhbGsgZnJvbSAiY2hhbGsiOw0KDQppbXBvcnQgKiBhcyBVdGlscyBmcm9tICIuLi91dGlscyI7DQoNCmV4cG9ydCBjbGFzcyBGb3JtYXR0ZXIgZXh0ZW5kcyBBYnN0cmFjdEZvcm1hdHRlciB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogSUZvcm1hdHRlck1ldGFkYXRhID0gew0KICAgICAgICBmb3JtYXR0ZXJOYW1lOiAiY29kZUZyYW1lIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJGcmFtZWQgZm9ybWF0dGVyIHdoaWNoIGNyZWF0ZXMgYSBmcmFtZSBvZiBlcnJvciBjb2RlLiIsDQogICAgICAgIGRlc2NyaXB0aW9uRGV0YWlsczogVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgUHJpbnRzIHN5bnRheCBoaWdobGlnaHRlZCBjb2RlIGluIGEgZnJhbWUgd2l0aCBhIHBvaW50ZXIgdG8gd2hlcmUNCiAgICAgICAgICAgIGV4YWN0bHkgbGludCBlcnJvciBpcyBoYXBwZW5pbmcuYCwNCiAgICAgICAgc2FtcGxlOiBVdGlscy5kZWRlbnRgDQogICAgICAgICAgICBzcmMvY29tcG9uZW50cy9QYXltZW50LnRzeA0KICAgICAgICAgICAgUGFyZW50aGVzZXMgYXJlIHJlcXVpcmVkIGFyb3VuZCB0aGUgcGFyYW1ldGVycyBvZiBhbiBhcnJvdyBmdW5jdGlvbiBkZWZpbml0aW9uIChhcnJvdy1wYXJlbnMpDQogICAgICAgICAgICAgIDIxIHwgICAgIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpIHsNCiAgICAgICAgICAgICAgMjIgfCAgICAgICAgIHRoaXMuaW5wdXQuZm9jdXMoKTsNCiAgICAgICAgICAgID4gMjMgfCAgICAgICAgIGxvYWRTdHJpcGUoKS50aGVuKFN0cmlwZSA9PiBTdHJpcGUucGF5KCkpOw0KICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICBeDQogICAgICAgICAgICAgIDI0IHwgICAgIH0NCiAgICAgICAgICAgICAgMjUgfA0KICAgICAgICAgICAgICAyNiB8ICAgICBwdWJsaWMgcmVuZGVyKCkge2AsDQogICAgICAgIGNvbnN1bWVyOiAiaHVtYW4iLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBmb3JtYXQoZmFpbHVyZXM6IFJ1bGVGYWlsdXJlW10pOiBzdHJpbmcgew0KICAgICAgICBpZiAodHlwZW9mIGZhaWx1cmVzWzBdID09PSAidW5kZWZpbmVkIikgew0KICAgICAgICAgICAgcmV0dXJuICJcbiI7DQogICAgICAgIH0NCiAgICAgICAgZmFpbHVyZXMgPSB0aGlzLnNvcnRGYWlsdXJlcyhmYWlsdXJlcyk7DQoNCiAgICAgICAgY29uc3Qgb3V0cHV0TGluZXM6IHN0cmluZ1tdID0gW107DQoNCiAgICAgICAgbGV0IGN1cnJlbnRGaWxlOiBzdHJpbmcgfCB1bmRlZmluZWQ7DQoNCiAgICAgICAgZm9yIChjb25zdCBmYWlsdXJlIG9mIGZhaWx1cmVzKSB7DQogICAgICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGZhaWx1cmUuZ2V0RmlsZU5hbWUoKTsNCg0KICAgICAgICAgICAgLy8gT3V0cHV0IHRoZSBuYW1lIG9mIGVhY2ggZmlsZSBvbmNlDQogICAgICAgICAgICBpZiAoY3VycmVudEZpbGUgIT09IGZpbGVOYW1lKSB7DQogICAgICAgICAgICAgICAgb3V0cHV0TGluZXMucHVzaCgiIik7DQogICAgICAgICAgICAgICAgb3V0cHV0TGluZXMucHVzaChmaWxlTmFtZSk7DQogICAgICAgICAgICAgICAgY3VycmVudEZpbGUgPSBmaWxlTmFtZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgbGV0IGZhaWx1cmVTdHJpbmcgPSBmYWlsdXJlLmdldEZhaWx1cmUoKTsNCiAgICAgICAgICAgIGZhaWx1cmVTdHJpbmcgPSBmYWlsdXJlLmdldFJ1bGVTZXZlcml0eSgpID09PSAid2FybmluZyIgPyBjaGFsay55ZWxsb3coZmFpbHVyZVN0cmluZykgOiBjaGFsay5yZWQoZmFpbHVyZVN0cmluZyk7DQoNCiAgICAgICAgICAgIC8vIFJ1bGUNCiAgICAgICAgICAgIGxldCBydWxlTmFtZSA9IGZhaWx1cmUuZ2V0UnVsZU5hbWUoKTsNCiAgICAgICAgICAgIHJ1bGVOYW1lID0gY2hhbGsuZ3JheShgKCR7cnVsZU5hbWV9KWApOw0KDQogICAgICAgICAgICAvLyBGcmFtZQ0KICAgICAgICAgICAgY29uc3QgbGluZUFuZENoYXJhY3RlciA9IGZhaWx1cmUuZ2V0U3RhcnRQb3NpdGlvbigpLmdldExpbmVBbmRDaGFyYWN0ZXIoKTsNCiAgICAgICAgICAgIGNvbnN0IGZyYW1lID0gY29kZUZyYW1lKA0KICAgICAgICAgICAgICAgIGZhaWx1cmUuZ2V0UmF3TGluZXMoKSwNCiAgICAgICAgICAgICAgICBsaW5lQW5kQ2hhcmFjdGVyLmxpbmUgKyAxLCAvLyBiYWJlbC1jb2RlLWZyYW1lIGlzIDEgaW5kZXgNCiAgICAgICAgICAgICAgICBsaW5lQW5kQ2hhcmFjdGVyLmNoYXJhY3RlciwNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGZvcmNlQ29sb3I6IGNoYWxrLmVuYWJsZWQsDQogICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodENvZGU6IHRydWUsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICk7DQoNCiAgICAgICAgICAgIC8vIE91cHV0DQogICAgICAgICAgICBvdXRwdXRMaW5lcy5wdXNoKGAke2ZhaWx1cmVTdHJpbmd9ICR7cnVsZU5hbWV9YCk7DQogICAgICAgICAgICBvdXRwdXRMaW5lcy5wdXNoKGZyYW1lKTsNCiAgICAgICAgICAgIG91dHB1dExpbmVzLnB1c2goIiIpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gUmVtb3ZlcyBpbml0aWFsIGJsYW5rIGxpbmUNCiAgICAgICAgaWYgKG91dHB1dExpbmVzWzBdID09PSAiIikgew0KICAgICAgICAgICAgb3V0cHV0TGluZXMuc2hpZnQoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBgJHtvdXRwdXRMaW5lcy5qb2luKCJcbiIpfVxuYDsNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "16C8B243E5C3EA72D867CD53F40F1143",
              "algorithm": "md5"
            },
            {
              "value": "3760D27B43DCDC3202E831F5B87D6EC32DD2F8C4",
              "algorithm": "sha-1"
            },
            {
              "value": "682F9FE006AB01A4C53083856F4991B81497537BDDB172D39DDC95F7DE1E04CD",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/formatters/tapFormatter.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgQWJzdHJhY3RGb3JtYXR0ZXIgfSBmcm9tICIuLi9sYW5ndWFnZS9mb3JtYXR0ZXIvYWJzdHJhY3RGb3JtYXR0ZXIiOw0KaW1wb3J0IHsgSUZvcm1hdHRlck1ldGFkYXRhIH0gZnJvbSAiLi4vbGFuZ3VhZ2UvZm9ybWF0dGVyL2Zvcm1hdHRlciI7DQppbXBvcnQgeyBSdWxlRmFpbHVyZSB9IGZyb20gIi4uL2xhbmd1YWdlL3J1bGUvcnVsZSI7DQoNCmltcG9ydCAqIGFzIFV0aWxzIGZyb20gIi4uL3V0aWxzIjsNCg0KZXhwb3J0IGNsYXNzIEZvcm1hdHRlciBleHRlbmRzIEFic3RyYWN0Rm9ybWF0dGVyIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBJRm9ybWF0dGVyTWV0YWRhdGEgPSB7DQogICAgICAgIGZvcm1hdHRlck5hbWU6ICJ0YXAiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkZvcm1hdHMgb3V0cHV0IGFzIFRBUCBzdHJlYW0uIiwNCiAgICAgICAgZGVzY3JpcHRpb25EZXRhaWxzOiAiUHJvdmlkZXMgZXJyb3IgbWVzc2FnZXMgb3V0cHV0IGluIFRBUDEzIGZvcm1hdCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYW55IFRBUCBmb3JtYXR0ZXIuIiwNCiAgICAgICAgc2FtcGxlOiBVdGlscy5kZWRlbnRgDQogICAgICAgICAgICBUQVAgdmVyc2lvbiAxMw0KICAgICAgICAgICAgMS4uMQ0KICAgICAgICAgICAgbm90IG9rIDEgLSBTb21lIGVycm9yDQogICAgICAgICAgICAgIC0tLQ0KICAgICAgICAgICAgICBtZXNzYWdlOiBWYXJpYWJsZSBoYXMgYW55IHR5cGUNCiAgICAgICAgICAgICAgc2V2ZXJpdHk6IGVycm9yDQogICAgICAgICAgICAgIGRhdGE6DQogICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBuby1hbnkNCiAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IHRlc3QtZmlsZS50cw0KICAgICAgICAgICAgICAgICBsaW5lOiAxMA0KICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IDEwDQogICAgICAgICAgICAgICAgIGZhaWx1cmVTdHJpbmc6IFNvbWUgZXJyb3INCiAgICAgICAgICAgICAgICAgcmF3TGluZXM6IFNvbWUgcmF3IG91dHB1dA0KICAgICAgICAgICAgICAuLi5gLA0KICAgICAgICBjb25zdW1lcjogIm1hY2hpbmUiLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBmb3JtYXQoZmFpbHVyZXM6IFJ1bGVGYWlsdXJlW10pOiBzdHJpbmcgew0KICAgICAgICBsZXQgb3V0cHV0OiBzdHJpbmdbXSA9IFsiVEFQIHZlcnNpb24gMTMiXTsNCg0KICAgICAgICBpZiAoZmFpbHVyZXMubGVuZ3RoID09PSAwKSB7DQogICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuY29uY2F0KFsNCiAgICAgICAgICAgICAgICAiMS4uMCAjIFNLSVAgTm8gZmFpbHVyZXMiLA0KICAgICAgICAgICAgXSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuY29uY2F0KFtgMS4uJHtmYWlsdXJlcy5sZW5ndGh9YF0pLmNvbmNhdCh0aGlzLm1hcFRvTWVzc2FnZXMoZmFpbHVyZXMpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBgJHtvdXRwdXQuam9pbigiXG4iKX1cbmA7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBtYXBUb01lc3NhZ2VzKGZhaWx1cmVzOiBSdWxlRmFpbHVyZVtdKTogc3RyaW5nW10gew0KICAgICAgICByZXR1cm4gZmFpbHVyZXMubWFwKChmYWlsdXJlOiBSdWxlRmFpbHVyZSwgaTogbnVtYmVyKSA9PiB7DQogICAgICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGZhaWx1cmUuZ2V0RmlsZU5hbWUoKTsNCiAgICAgICAgICAgIGNvbnN0IGZhaWx1cmVTdHJpbmcgPSBmYWlsdXJlLmdldEZhaWx1cmUoKTsNCiAgICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gZmFpbHVyZS5nZXRSdWxlTmFtZSgpOw0KICAgICAgICAgICAgY29uc3QgZmFpbHVyZU1lc3NhZ2UgPSBmYWlsdXJlLmdldEZhaWx1cmUoKTsNCiAgICAgICAgICAgIGNvbnN0IGZhaWx1cmVTZXZlcml0eSA9IGZhaWx1cmUuZ2V0UnVsZVNldmVyaXR5KCk7DQogICAgICAgICAgICBjb25zdCBmYWlsdXJlUmF3ID0gZmFpbHVyZS5nZXRSYXdMaW5lcygpOw0KICAgICAgICAgICAgY29uc3QgbGluZUFuZENoYXJhY3RlciA9IGZhaWx1cmUuZ2V0U3RhcnRQb3NpdGlvbigpLmdldExpbmVBbmRDaGFyYWN0ZXIoKTsNCg0KICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmRlZGVudGANCiAgICAgICAgICAgICAgICBub3Qgb2sgJHtTdHJpbmcoaSArIDEpfSAtICR7ZmFpbHVyZU1lc3NhZ2V9DQogICAgICAgICAgICAgICAgICAtLS0NCiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgOiAke2ZhaWx1cmVNZXNzYWdlfQ0KICAgICAgICAgICAgICAgICAgc2V2ZXJpdHk6ICR7ZmFpbHVyZVNldmVyaXR5fQ0KICAgICAgICAgICAgICAgICAgZGF0YToNCiAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6ICR7cnVsZU5hbWV9DQogICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiAke2ZpbGVOYW1lfQ0KICAgICAgICAgICAgICAgICAgICBsaW5lOiAke1N0cmluZyhsaW5lQW5kQ2hhcmFjdGVyLmxpbmUpfQ0KICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6ICR7U3RyaW5nKGxpbmVBbmRDaGFyYWN0ZXIuY2hhcmFjdGVyKX0NCiAgICAgICAgICAgICAgICAgICAgZmFpbHVyZVN0cmluZzogJHtmYWlsdXJlU3RyaW5nfQ0KICAgICAgICAgICAgICAgICAgICByYXdMaW5lczogJHtmYWlsdXJlUmF3fQ0KICAgICAgICAgICAgICAgICAgLi4uYDsNCiAgICAgICAgfSk7DQoNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "00C88BE00CFBDD3C245078688B4C63CF",
              "algorithm": "md5"
            },
            {
              "value": "DC54CF680FBBF4E1D5D4C5FD59F41832F855722D",
              "algorithm": "sha-1"
            },
            {
              "value": "D624E1AA0F035F962D2C44DE5A2CDC48C3916D680CB25255D8BC8C6FF98D0763",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/formatters/verboseFormatter.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgQWJzdHJhY3RGb3JtYXR0ZXIgfSBmcm9tICIuLi9sYW5ndWFnZS9mb3JtYXR0ZXIvYWJzdHJhY3RGb3JtYXR0ZXIiOw0KaW1wb3J0IHsgSUZvcm1hdHRlck1ldGFkYXRhIH0gZnJvbSAiLi4vbGFuZ3VhZ2UvZm9ybWF0dGVyL2Zvcm1hdHRlciI7DQppbXBvcnQgeyBSdWxlRmFpbHVyZSB9IGZyb20gIi4uL2xhbmd1YWdlL3J1bGUvcnVsZSI7DQoNCmV4cG9ydCBjbGFzcyBGb3JtYXR0ZXIgZXh0ZW5kcyBBYnN0cmFjdEZvcm1hdHRlciB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogSUZvcm1hdHRlck1ldGFkYXRhID0gew0KICAgICAgICBmb3JtYXR0ZXJOYW1lOiAidmVyYm9zZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiVGhlIGh1bWFuLXJlYWRhYmxlIGZvcm1hdHRlciB3aGljaCBpbmNsdWRlcyB0aGUgcnVsZSBuYW1lIGluIG1lc3NhZ2VzLiIsDQogICAgICAgIGRlc2NyaXB0aW9uRGV0YWlsczogIlRoZSBvdXRwdXQgaXMgdGhlIHNhbWUgYXMgdGhlIHByb3NlIGZvcm1hdHRlciB3aXRoIHRoZSBydWxlIG5hbWUgaW5jbHVkZWQiLA0KICAgICAgICBzYW1wbGU6ICJFUlJPUjogKHNlbWljb2xvbikgbXlGaWxlLnRzWzEsIDE0XTogTWlzc2luZyBzZW1pY29sb24iLA0KICAgICAgICBjb25zdW1lcjogImh1bWFuIiwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgZm9ybWF0KGZhaWx1cmVzOiBSdWxlRmFpbHVyZVtdKTogc3RyaW5nIHsNCiAgICAgICAgZmFpbHVyZXMgPSB0aGlzLnNvcnRGYWlsdXJlcyhmYWlsdXJlcyk7DQogICAgICAgIHJldHVybiBgJHt0aGlzLm1hcFRvTWVzc2FnZXMoZmFpbHVyZXMpLmpvaW4oIlxuIil9XG5gOw0KICAgIH0NCg0KICAgIHByaXZhdGUgbWFwVG9NZXNzYWdlcyhmYWlsdXJlczogUnVsZUZhaWx1cmVbXSk6IHN0cmluZ1tdIHsNCiAgICAgICAgcmV0dXJuIGZhaWx1cmVzLm1hcCgoZmFpbHVyZTogUnVsZUZhaWx1cmUpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gZmFpbHVyZS5nZXRGaWxlTmFtZSgpOw0KICAgICAgICAgICAgY29uc3QgZmFpbHVyZVN0cmluZyA9IGZhaWx1cmUuZ2V0RmFpbHVyZSgpOw0KICAgICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBmYWlsdXJlLmdldFJ1bGVOYW1lKCk7DQoNCiAgICAgICAgICAgIGNvbnN0IGxpbmVBbmRDaGFyYWN0ZXIgPSBmYWlsdXJlLmdldFN0YXJ0UG9zaXRpb24oKS5nZXRMaW5lQW5kQ2hhcmFjdGVyKCk7DQogICAgICAgICAgICBjb25zdCBwb3NpdGlvblR1cGxlID0gYFske2xpbmVBbmRDaGFyYWN0ZXIubGluZSArIDF9LCAke2xpbmVBbmRDaGFyYWN0ZXIuY2hhcmFjdGVyICsgMX1dYDsNCg0KICAgICAgICAgICAgcmV0dXJuIGAke2ZhaWx1cmUuZ2V0UnVsZVNldmVyaXR5KCkudG9VcHBlckNhc2UoKX06ICgke3J1bGVOYW1lfSkgJHtmaWxlTmFtZX0ke3Bvc2l0aW9uVHVwbGV9OiAke2ZhaWx1cmVTdHJpbmd9YDsNCiAgICAgICAgfSk7DQoNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "0680C58BD93E4417DFA25D05D8E26788",
              "algorithm": "md5"
            },
            {
              "value": "2EF7C46F517C0359E3B56075BAE764112FCB92AB",
              "algorithm": "sha-1"
            },
            {
              "value": "C1D03BFB795E61C365711A8D23D8ED04F08F4D4E434DEB81DD55C609622BF65A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/formatters/vsoFormatter.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgQWJzdHJhY3RGb3JtYXR0ZXIgfSBmcm9tICIuLi9sYW5ndWFnZS9mb3JtYXR0ZXIvYWJzdHJhY3RGb3JtYXR0ZXIiOw0KaW1wb3J0IHsgSUZvcm1hdHRlck1ldGFkYXRhIH0gZnJvbSAiLi4vbGFuZ3VhZ2UvZm9ybWF0dGVyL2Zvcm1hdHRlciI7DQppbXBvcnQgeyBSdWxlRmFpbHVyZSB9IGZyb20gIi4uL2xhbmd1YWdlL3J1bGUvcnVsZSI7DQoNCmltcG9ydCAqIGFzIFV0aWxzIGZyb20gIi4uL3V0aWxzIjsNCg0KZXhwb3J0IGNsYXNzIEZvcm1hdHRlciBleHRlbmRzIEFic3RyYWN0Rm9ybWF0dGVyIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBJRm9ybWF0dGVyTWV0YWRhdGEgPSB7DQogICAgICAgIGZvcm1hdHRlck5hbWU6ICJ2c28iLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkZvcm1hdHMgb3V0cHV0IGFzIFZTTy9URlMgbG9nZ2luZyBjb21tYW5kcy4iLA0KICAgICAgICBkZXNjcmlwdGlvbkRldGFpbHM6IFV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEludGVncmF0ZXMgd2l0aCBWaXN1YWwgU3R1ZGlvIE9ubGluZSBhbmQgVGVhbSBGb3VuZGF0aW9uIFNlcnZlciBieSBvdXRwdXR0aW5nIGVycm9ycw0KICAgICAgICAgICAgYXMgJ3dhcm5pbmcnIGxvZ2dpbmcgY29tbWFuZHMuYCwNCiAgICAgICAgc2FtcGxlOiAiIyN2c29bdGFzay5sb2dpc3N1ZSB0eXBlPXdhcm5pbmc7c291cmNlcGF0aD1teUZpbGUudHM7bGluZW51bWJlcj0xO2NvbHVtbm51bWJlcj0xNDtjb2RlPXNlbWljb2xvbjtdTWlzc2luZyBzZW1pY29sb24iLA0KICAgICAgICBjb25zdW1lcjogIm1hY2hpbmUiLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBmb3JtYXQoZmFpbHVyZXM6IFJ1bGVGYWlsdXJlW10pOiBzdHJpbmcgew0KICAgICAgICBjb25zdCBvdXRwdXRMaW5lcyA9IGZhaWx1cmVzLm1hcCgoZmFpbHVyZTogUnVsZUZhaWx1cmUpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gZmFpbHVyZS5nZXRGaWxlTmFtZSgpOw0KICAgICAgICAgICAgY29uc3QgZmFpbHVyZVN0cmluZyA9IGZhaWx1cmUuZ2V0RmFpbHVyZSgpOw0KICAgICAgICAgICAgY29uc3QgbGluZUFuZENoYXJhY3RlciA9IGZhaWx1cmUuZ2V0U3RhcnRQb3NpdGlvbigpLmdldExpbmVBbmRDaGFyYWN0ZXIoKTsNCiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lQW5kQ2hhcmFjdGVyLmxpbmUgKyAxOw0KICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gbGluZUFuZENoYXJhY3Rlci5jaGFyYWN0ZXIgKyAxOw0KICAgICAgICAgICAgY29uc3QgY29kZSA9IGZhaWx1cmUuZ2V0UnVsZU5hbWUoKTsNCiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBgc291cmNlcGF0aD0ke2ZpbGVOYW1lfTtsaW5lbnVtYmVyPSR7bGluZX07Y29sdW1ubnVtYmVyPSR7Y2hhcmFjdGVyfTtjb2RlPSR7Y29kZX07YDsNCg0KICAgICAgICAgICAgcmV0dXJuIGAjI3Zzb1t0YXNrLmxvZ2lzc3VlIHR5cGU9d2FybmluZzske3Byb3BlcnRpZXN9XSR7ZmFpbHVyZVN0cmluZ31gOw0KICAgICAgICB9KTsNCg0KICAgICAgICByZXR1cm4gYCR7b3V0cHV0TGluZXMuam9pbigiXG4iKX1cbmA7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "D295FCD08FC35FBB444937B2007D7C7A",
              "algorithm": "md5"
            },
            {
              "value": "AB958F7E0836942541B0F8E31DD8126AE53D6738",
              "algorithm": "sha-1"
            },
            {
              "value": "66256E9DF1ED53A4F676C4402DAA63D9C92B6BB078B897513DFB6F265CC4BAAF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/index.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgQ29uZmlndXJhdGlvbiBmcm9tICIuL2NvbmZpZ3VyYXRpb24iOw0KaW1wb3J0ICogYXMgRm9ybWF0dGVycyBmcm9tICIuL2Zvcm1hdHRlcnMiOw0KaW1wb3J0IHsgRm9ybWF0dGVyQ29uc3RydWN0b3IgfSBmcm9tICIuL2xhbmd1YWdlL2Zvcm1hdHRlci9mb3JtYXR0ZXIiOw0KaW1wb3J0IHsgUnVsZUZhaWx1cmUgfSBmcm9tICIuL2xhbmd1YWdlL3J1bGUvcnVsZSI7DQppbXBvcnQgKiBhcyBSdWxlcyBmcm9tICIuL3J1bGVzIjsNCmltcG9ydCAqIGFzIFRlc3QgZnJvbSAiLi90ZXN0IjsNCmltcG9ydCAqIGFzIFV0aWxzIGZyb20gIi4vdXRpbHMiOw0KDQpleHBvcnQgeyBDb25maWd1cmF0aW9uLCBGb3JtYXR0ZXJzLCBSdWxlcywgVGVzdCwgVXRpbHMgfTsNCg0KZXhwb3J0ICogZnJvbSAiLi9saW50ZXIiOw0KZXhwb3J0ICogZnJvbSAiLi9sYW5ndWFnZS9ydWxlL3J1bGUiOw0KZXhwb3J0ICogZnJvbSAiLi9lbmFibGVEaXNhYmxlUnVsZXMiOw0KZXhwb3J0ICogZnJvbSAiLi9mb3JtYXR0ZXJMb2FkZXIiOw0KZXhwb3J0ICogZnJvbSAiLi9ydWxlTG9hZGVyIjsNCmV4cG9ydCAqIGZyb20gIi4vbGFuZ3VhZ2UvdXRpbHMiOw0KZXhwb3J0ICogZnJvbSAiLi9sYW5ndWFnZS93YWxrZXIiOw0KZXhwb3J0ICogZnJvbSAiLi9sYW5ndWFnZS9mb3JtYXR0ZXIvZm9ybWF0dGVyIjsNCg0KZXhwb3J0IGludGVyZmFjZSBMaW50UmVzdWx0IHsNCiAgICBlcnJvckNvdW50OiBudW1iZXI7DQogICAgd2FybmluZ0NvdW50OiBudW1iZXI7DQogICAgZmFpbHVyZXM6IFJ1bGVGYWlsdXJlW107DQogICAgZml4ZXM/OiBSdWxlRmFpbHVyZVtdOw0KICAgIGZvcm1hdDogc3RyaW5nIHwgRm9ybWF0dGVyQ29uc3RydWN0b3I7DQogICAgb3V0cHV0OiBzdHJpbmc7DQp9DQoNCmV4cG9ydCBpbnRlcmZhY2UgSUxpbnRlck9wdGlvbnMgew0KICAgIGZpeDogYm9vbGVhbjsNCiAgICBmb3JtYXR0ZXI/OiBzdHJpbmcgfCBGb3JtYXR0ZXJDb25zdHJ1Y3RvcjsNCiAgICBmb3JtYXR0ZXJzRGlyZWN0b3J5Pzogc3RyaW5nOw0KICAgIHF1aWV0PzogYm9vbGVhbjsNCiAgICBydWxlc0RpcmVjdG9yeT86IHN0cmluZyB8IHN0cmluZ1tdOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "BFF14569B4D45742A1E91F860EF201D0",
              "algorithm": "md5"
            },
            {
              "value": "1AEBA63C451B5CB3FA576CA725F84D6ECC30FF0A",
              "algorithm": "sha-1"
            },
            {
              "value": "49707C89F01F9171D162FD8D5C0C328D5E83D4BF2A5D7D603CA9B4FDA33AACC8",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/language/formatter/formatter.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgUnVsZUZhaWx1cmUgfSBmcm9tICIuLi9ydWxlL3J1bGUiOw0KDQpleHBvcnQgaW50ZXJmYWNlIElGb3JtYXR0ZXJNZXRhZGF0YSB7DQogICAgLyoqDQogICAgICogVGhlIG5hbWUgb2YgdGhlIGZvcm1hdHRlci4NCiAgICAgKi8NCiAgICBmb3JtYXR0ZXJOYW1lOiBzdHJpbmc7DQoNCiAgICAvKioNCiAgICAgKiBBIHNob3J0LCBvbmUgbGluZSBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoZSBmb3JtYXR0ZXIgZG9lcy4NCiAgICAgKi8NCiAgICBkZXNjcmlwdGlvbjogc3RyaW5nOw0KDQogICAgLyoqDQogICAgICogTW9yZSBlbGFib3JhdGUgZGV0YWlscyBhYm91dCB0aGUgZm9ybWF0dGVyLg0KICAgICAqLw0KICAgIGRlc2NyaXB0aW9uRGV0YWlscz86IHN0cmluZzsNCg0KICAgIC8qKg0KICAgICAqIFNhbXBsZSBvdXRwdXQgZnJvbSB0aGUgZm9ybWF0dGVyLg0KICAgICAqLw0KICAgIHNhbXBsZTogc3RyaW5nOw0KDQogICAgLyoqDQogICAgICogU2FtcGxlIG91dHB1dCBmcm9tIHRoZSBmb3JtYXR0ZXIuDQogICAgICovDQogICAgY29uc3VtZXI6IENvbnN1bWVyVHlwZTsNCn0NCg0KZXhwb3J0IHR5cGUgQ29uc3VtZXJUeXBlID0gImh1bWFuIiB8ICJtYWNoaW5lIjsNCg0KZXhwb3J0IGludGVyZmFjZSBGb3JtYXR0ZXJDb25zdHJ1Y3RvciB7DQogICAgbmV3KCk6IElGb3JtYXR0ZXI7DQp9DQoNCmV4cG9ydCBpbnRlcmZhY2UgSUZvcm1hdHRlciB7DQogICAgLyoqDQogICAgICogRm9ybWF0cyBsaW50ZXIgcmVzdWx0cw0KICAgICAqIEBwYXJhbSBmYWlsdXJlcyBMaW50ZXIgZmFpbHVyZXMgdGhhdCB3ZXJlIG5vdCBmaXhlZA0KICAgICAqIEBwYXJhbSBmaXhlcyBGaXhlZCBsaW50ZXIgZmFpbHVyZXMuIEF2YWlsYWJsZSB3aGVuIHRoZSBgLS1maXhgIGFyZ3VtZW50IGlzIHVzZWQgb24gdGhlIGNvbW1hbmQgbGluZQ0KICAgICAqLw0KICAgIGZvcm1hdChmYWlsdXJlczogUnVsZUZhaWx1cmVbXSwgZml4ZXM/OiBSdWxlRmFpbHVyZVtdKTogc3RyaW5nOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "E7FA9219A0E8B03F0FF3A9B16AB57866",
              "algorithm": "md5"
            },
            {
              "value": "1D90A07FC5D5ED54FF961B819BCE504A6E601C46",
              "algorithm": "sha-1"
            },
            {
              "value": "2C2718447D6352F666C89304092321E0C1583BBD4A923FE7577370CA4322AFC6",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/language/rule/abstractRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IElXYWxrZXIsIFdhbGtDb250ZXh0IH0gZnJvbSAiLi4vd2Fsa2VyIjsNCmltcG9ydCB7IElPcHRpb25zLCBJUnVsZSwgSVJ1bGVNZXRhZGF0YSwgUnVsZUZhaWx1cmUsIFJ1bGVTZXZlcml0eSB9IGZyb20gIi4vcnVsZSI7DQoNCmV4cG9ydCB0eXBlIE5vSW5mZXI8VD4gPSBUICYge1tLIGluIGtleW9mIFRdOiBUW0tdfTsNCg0KZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0UnVsZSBpbXBsZW1lbnRzIElSdWxlIHsNCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBJUnVsZU1ldGFkYXRhOw0KICAgIHByb3RlY3RlZCByZWFkb25seSBydWxlQXJndW1lbnRzOiBhbnlbXTsNCiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcnVsZVNldmVyaXR5OiBSdWxlU2V2ZXJpdHk7DQogICAgcHVibGljIHJ1bGVOYW1lOiBzdHJpbmc7DQoNCiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IElPcHRpb25zKSB7DQogICAgICAgIHRoaXMucnVsZU5hbWUgPSBvcHRpb25zLnJ1bGVOYW1lOw0KICAgICAgICB0aGlzLnJ1bGVBcmd1bWVudHMgPSBvcHRpb25zLnJ1bGVBcmd1bWVudHM7DQogICAgICAgIHRoaXMucnVsZVNldmVyaXR5ID0gb3B0aW9ucy5ydWxlU2V2ZXJpdHk7DQogICAgfQ0KDQogICAgcHVibGljIGdldE9wdGlvbnMoKTogSU9wdGlvbnMgew0KICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhYnN0cmFjdCBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogUnVsZUZhaWx1cmVbXTsNCg0KICAgIHB1YmxpYyBhcHBseVdpdGhXYWxrZXIod2Fsa2VyOiBJV2Fsa2VyKTogUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHdhbGtlci53YWxrKHdhbGtlci5nZXRTb3VyY2VGaWxlKCkpOw0KICAgICAgICByZXR1cm4gd2Fsa2VyLmdldEZhaWx1cmVzKCk7DQogICAgfQ0KDQogICAgcHVibGljIGlzRW5hYmxlZCgpOiBib29sZWFuIHsNCiAgICAgICAgcmV0dXJuIHRoaXMucnVsZVNldmVyaXR5ICE9PSAib2ZmIjsNCiAgICB9DQoNCiAgICBwcm90ZWN0ZWQgYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwgd2Fsa0ZuOiAoY3R4OiBXYWxrQ29udGV4dDx2b2lkPikgPT4gdm9pZCk6IFJ1bGVGYWlsdXJlW107DQogICAgcHJvdGVjdGVkIGFwcGx5V2l0aEZ1bmN0aW9uPFQ+KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIHdhbGtGbjogKGN0eDogV2Fsa0NvbnRleHQ8VD4pID0+IHZvaWQsIG9wdGlvbnM6IE5vSW5mZXI8VD4pOiBSdWxlRmFpbHVyZVtdOw0KICAgIHByb3RlY3RlZCBhcHBseVdpdGhGdW5jdGlvbjxULCBVPigNCiAgICAgICAgc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwNCiAgICAgICAgd2Fsa0ZuOiAoY3R4OiBXYWxrQ29udGV4dDxUPiwgcHJvZ3JhbU9yQ2hlY2tlcjogVSkgPT4gdm9pZCwNCiAgICAgICAgb3B0aW9uczogTm9JbmZlcjxUPiwNCiAgICAgICAgY2hlY2tlcjogTm9JbmZlcjxVPiwNCiAgICApOiBSdWxlRmFpbHVyZVtdOw0KICAgIHByb3RlY3RlZCBhcHBseVdpdGhGdW5jdGlvbjxULCBVPigNCiAgICAgICAgc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwNCiAgICAgICAgd2Fsa0ZuOiAoY3R4OiBXYWxrQ29udGV4dDxUIHwgdm9pZD4sIHByb2dyYW1PckNoZWNrZXI/OiBVKSA9PiB2b2lkLA0KICAgICAgICBvcHRpb25zPzogVCwNCiAgICAgICAgcHJvZ3JhbU9yQ2hlY2tlcj86IFUsDQogICAgKTogUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIGNvbnN0IGN0eCA9IG5ldyBXYWxrQ29udGV4dChzb3VyY2VGaWxlLCB0aGlzLnJ1bGVOYW1lLCBvcHRpb25zKTsNCiAgICAgICAgd2Fsa0ZuKGN0eCwgcHJvZ3JhbU9yQ2hlY2tlcik7DQogICAgICAgIHJldHVybiBjdHguZmFpbHVyZXM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQGRlcHJlY2F0ZWQNCiAgICAgKiBGYWlsdXJlcyB3aWxsIGJlIGZpbHRlcmVkIGJhc2VkIG9uIGB0c2xpbnQ6ZGlzYWJsZWAgY29tbWVudHMgYnkgdHNsaW50Lg0KICAgICAqIFRoaXMgbWV0aG9kIG5vdyBkb2VzIG5vdGhpbmcuDQogICAgICovDQogICAgcHJvdGVjdGVkIGZpbHRlckZhaWx1cmVzKGZhaWx1cmVzOiBSdWxlRmFpbHVyZVtdKSB7IHJldHVybiBmYWlsdXJlczsgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "A2E70C936829683828C536FBDCE2CF37",
              "algorithm": "md5"
            },
            {
              "value": "F34750CCCD3883DCF66922F4B39D0242275BE4EB",
              "algorithm": "sha-1"
            },
            {
              "value": "739D4CBFF6D49FA43E3164A0A5B9F31877BB6C3EC9C6CE507047675D50EBD8AF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/language/rule/rule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "38902E2C3575CF7D9818CE87DBB858E6",
              "algorithm": "md5"
            },
            {
              "value": "EBAE6F84BF1A0FC6852D4A41B7C264B66614196A",
              "algorithm": "sha-1"
            },
            {
              "value": "97D3589FE0849BF6858FFC6FAA97416E7516736C8EB711CB7E1154E80F66C745",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/language/utils.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgcGF0aCBmcm9tICJwYXRoIjsNCmltcG9ydCB7IGlzQmxvY2tTY29wZWRWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCwgaXNJZGVudGlmaWVyLCBpc1ByZWZpeFVuYXJ5RXhwcmVzc2lvbiB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IElEaXNhYmxlZEludGVydmFsLCBSdWxlRmFpbHVyZSB9IGZyb20gIi4vcnVsZS9ydWxlIjsNCg0KZXhwb3J0IGZ1bmN0aW9uIGdldFNvdXJjZUZpbGUoZmlsZU5hbWU6IHN0cmluZywgc291cmNlOiBzdHJpbmcpOiB0cy5Tb3VyY2VGaWxlIHsNCiAgICBjb25zdCBub3JtYWxpemVkTmFtZSA9IHBhdGgubm9ybWFsaXplKGZpbGVOYW1lKS5yZXBsYWNlKC9cXC9nLCAiLyIpOw0KICAgIHJldHVybiB0cy5jcmVhdGVTb3VyY2VGaWxlKG5vcm1hbGl6ZWROYW1lLCBzb3VyY2UsIHRzLlNjcmlwdFRhcmdldC5FUzUsIC8qc2V0UGFyZW50Tm9kZXMqLyB0cnVlKTsNCn0NCg0KLyoqIEBkZXByZWNhdGVkIFNlZSBJRGlzYWJsZWRJbnRlcnZhbC4gKi8NCmV4cG9ydCBmdW5jdGlvbiBkb2VzSW50ZXJzZWN0KGZhaWx1cmU6IFJ1bGVGYWlsdXJlLCBkaXNhYmxlZEludGVydmFsczogSURpc2FibGVkSW50ZXJ2YWxbXSk6IGJvb2xlYW4geyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIGRlcHJlY2F0aW9uDQogICAgcmV0dXJuIGRpc2FibGVkSW50ZXJ2YWxzLnNvbWUoKGludGVydmFsKSA9PiB7DQogICAgICAgIGNvbnN0IG1heFN0YXJ0ID0gTWF0aC5tYXgoaW50ZXJ2YWwuc3RhcnRQb3NpdGlvbiwgZmFpbHVyZS5nZXRTdGFydFBvc2l0aW9uKCkuZ2V0UG9zaXRpb24oKSk7DQogICAgICAgIGNvbnN0IG1pbkVuZCA9IE1hdGgubWluKGludGVydmFsLmVuZFBvc2l0aW9uLCBmYWlsdXJlLmdldEVuZFBvc2l0aW9uKCkuZ2V0UG9zaXRpb24oKSk7DQogICAgICAgIHJldHVybiBtYXhTdGFydCA8PSBtaW5FbmQ7DQogICAgfSk7DQp9DQoNCi8qKg0KICogQHJldHVybnMgdHJ1ZSBpZiBhbnkgbW9kaWZpZXIga2luZHMgcGFzc2VkIGFsb25nIGV4aXN0IGluIHRoZSBnaXZlbiBtb2RpZmllcnMgYXJyYXkNCiAqDQogKiBAZGVwcmVjYXRlZCB1c2UgYGhhc01vZGlmaWVyYCBmcm9tIGB0c3V0aWxzYA0KICovDQpleHBvcnQgZnVuY3Rpb24gaGFzTW9kaWZpZXIobW9kaWZpZXJzOiB0cy5Nb2RpZmllcnNBcnJheSB8IHVuZGVmaW5lZCwgLi4ubW9kaWZpZXJLaW5kczogdHMuU3ludGF4S2luZFtdKTogYm9vbGVhbiB7DQogICAgaWYgKG1vZGlmaWVycyA9PT0gdW5kZWZpbmVkIHx8IG1vZGlmaWVyS2luZHMubGVuZ3RoID09PSAwKSB7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoDQogICAgICAgIChtKSA9PiBtb2RpZmllcktpbmRzLnNvbWUoKGspID0+IG0ua2luZCA9PT0gaykpOw0KfQ0KDQovKioNCiAqIERldGVybWluZXMgaWYgdGhlIGFwcHJvcHJpYXRlIGJpdCBpbiB0aGUgcGFyZW50IChWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCkgaXMgc2V0LA0KICogd2hpY2ggaW5kaWNhdGVzIHRoaXMgaXMgYSAibGV0IiBvciAiY29uc3QiLg0KICoNCiAqIEBkZXByZWNhdGVkIHVzZSBgaXNCbG9ja1Njb3BlZFZhcmlhYmxlRGVjbGFyYXRpb25MaXN0YCBmcm9tIGB0c3V0aWxzYA0KICovDQpleHBvcnQgZnVuY3Rpb24gaXNCbG9ja1Njb3BlZFZhcmlhYmxlKG5vZGU6IHRzLlZhcmlhYmxlRGVjbGFyYXRpb24gfCB0cy5WYXJpYWJsZVN0YXRlbWVudCk6IGJvb2xlYW4gew0KICAgIGlmIChub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuVmFyaWFibGVEZWNsYXJhdGlvbikgew0KICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudCE7DQogICAgICAgIHJldHVybiBwYXJlbnQua2luZCA9PT0gdHMuU3ludGF4S2luZC5DYXRjaENsYXVzZSB8fCBpc0Jsb2NrU2NvcGVkVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QocGFyZW50KTsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gaXNCbG9ja1Njb3BlZFZhcmlhYmxlRGVjbGFyYXRpb25MaXN0KG5vZGUuZGVjbGFyYXRpb25MaXN0KTsNCiAgICB9DQp9DQoNCi8qKiBAZGVwcmVjYXRlZCB1c2UgYGlzQmxvY2tTY29wZWRWYXJpYWJsZURlY2xhcmF0aW9uTGlzdGAgYW5kIGBnZXREZWNsYXJhdGlvbk9mQmluZGluZ0VsZW1lbnRgIGZyb20gYHRzdXRpbHNgICovDQpleHBvcnQgZnVuY3Rpb24gaXNCbG9ja1Njb3BlZEJpbmRpbmdFbGVtZW50KG5vZGU6IHRzLkJpbmRpbmdFbGVtZW50KTogYm9vbGVhbiB7DQogICAgY29uc3QgdmFyaWFibGVEZWNsYXJhdGlvbiA9IGdldEJpbmRpbmdFbGVtZW50VmFyaWFibGVEZWNsYXJhdGlvbihub2RlKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpkZXByZWNhdGlvbg0KICAgIC8vIGlmIG5vIHZhcmlhYmxlIGRlY2xhcmF0aW9uLCBpdCBtdXN0IGJlIGEgZnVuY3Rpb24gcGFyYW0sIHdoaWNoIGlzIGJsb2NrIHNjb3BlZA0KICAgIHJldHVybiAodmFyaWFibGVEZWNsYXJhdGlvbiA9PT0gbnVsbCkgfHwgaXNCbG9ja1Njb3BlZFZhcmlhYmxlKHZhcmlhYmxlRGVjbGFyYXRpb24pOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOmRlcHJlY2F0aW9uDQp9DQoNCi8qKiBAZGVwcmVjYXRlZCB1c2UgYGdldERlY2xhcmF0aW9uT2ZCaW5kaW5nRWxlbWVudGAgZnJvbSBgdHN1dGlsc2AgKi8NCmV4cG9ydCBmdW5jdGlvbiBnZXRCaW5kaW5nRWxlbWVudFZhcmlhYmxlRGVjbGFyYXRpb24obm9kZTogdHMuQmluZGluZ0VsZW1lbnQpOiB0cy5WYXJpYWJsZURlY2xhcmF0aW9uIHwgbnVsbCB7DQogICAgbGV0IGN1cnJlbnRQYXJlbnQgPSBub2RlLnBhcmVudCEgYXMgdHMuTm9kZTsNCiAgICB3aGlsZSAoY3VycmVudFBhcmVudC5raW5kICE9PSB0cy5TeW50YXhLaW5kLlZhcmlhYmxlRGVjbGFyYXRpb24pIHsNCiAgICAgICAgaWYgKGN1cnJlbnRQYXJlbnQucGFyZW50ID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBmdW5jdGlvbiBwYXJhbWV0ZXIsIG5vIHZhcmlhYmxlIGRlY2xhcmF0aW9uDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5wYXJlbnQ7DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIGN1cnJlbnRQYXJlbnQgYXMgdHMuVmFyaWFibGVEZWNsYXJhdGlvbjsNCn0NCg0KLyoqDQogKiBGaW5kcyBhIGNoaWxkIG9mIGEgZ2l2ZW4gbm9kZSB3aXRoIGEgZ2l2ZW4ga2luZC4NCiAqIE5vdGU6IFRoaXMgdXNlcyBgbm9kZS5nZXRDaGlsZHJlbigpYCwgd2hpY2ggZG9lcyBleHRyYSBwYXJzaW5nIHdvcmsgdG8gaW5jbHVkZSB0b2tlbnMuDQogKg0KICogQGRlcHJlY2F0ZWQgdXNlIGBnZXRDaGlsZE9mS2luZGAgZnJvbSBgdHN1dGlsc2ANCiAqLw0KZXhwb3J0IGZ1bmN0aW9uIGNoaWxkT2ZLaW5kKG5vZGU6IHRzLk5vZGUsIGtpbmQ6IHRzLlN5bnRheEtpbmQpOiB0cy5Ob2RlIHwgdW5kZWZpbmVkIHsNCiAgICByZXR1cm4gbm9kZS5nZXRDaGlsZHJlbigpLmZpbmQoKGNoaWxkKSA9PiBjaGlsZC5raW5kID09PSBraW5kKTsNCn0NCg0KLyoqDQogKiBAcmV0dXJucyB0cnVlIGlmIHNvbWUgYW5jZXN0b3Igb2YgYG5vZGVgIHNhdGlzZmllcyBgcHJlZGljYXRlYCwgaW5jbHVkaW5nIGBub2RlYCBpdHNlbGYuDQogKg0KICogQGRlcHJlY2F0ZWQgbm8gbG9uZ2VyIHVzZWQsIHVzZSBhIGB3aGlsZWAgbG9vcCBpbnN0ZWFkDQogKi8NCmV4cG9ydCBmdW5jdGlvbiBzb21lQW5jZXN0b3Iobm9kZTogdHMuTm9kZSwgcHJlZGljYXRlOiAobjogdHMuTm9kZSkgPT4gYm9vbGVhbik6IGJvb2xlYW4gew0KICAgIHJldHVybiBwcmVkaWNhdGUobm9kZSkgfHwgKG5vZGUucGFyZW50ICE9PSB1bmRlZmluZWQgJiYgc29tZUFuY2VzdG9yKG5vZGUucGFyZW50LCBwcmVkaWNhdGUpKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpkZXByZWNhdGlvbg0KfQ0KDQpleHBvcnQgZnVuY3Rpb24gYW5jZXN0b3JXaGVyZTxUIGV4dGVuZHMgdHMuTm9kZSA9IHRzLk5vZGU+KA0KICAgIG5vZGU6IHRzLk5vZGUsDQogICAgcHJlZGljYXRlOiAoKG46IHRzLk5vZGUpID0+IG4gaXMgVCkgfCAoKG46IHRzLk5vZGUpID0+IGJvb2xlYW4pLA0KKTogVCB8IHVuZGVmaW5lZCB7DQogICAgbGV0IGN1cjogdHMuTm9kZSB8IHVuZGVmaW5lZCA9IG5vZGU7DQogICAgZG8gew0KICAgICAgICBpZiAocHJlZGljYXRlKGN1cikpIHsNCiAgICAgICAgICAgIHJldHVybiBjdXI7DQogICAgICAgIH0NCiAgICAgICAgY3VyID0gY3VyLnBhcmVudDsNCiAgICB9IHdoaWxlIChjdXIgIT09IHVuZGVmaW5lZCk7DQogICAgcmV0dXJuIHVuZGVmaW5lZDsNCn0NCg0KLyoqIEBkZXByZWNhdGVkIHVzZSBgaXNCaW5hcnlFeHByZXNzaW9uKG5vZGUpICYmIGlzQXNzaWdubWVudEtpbmQobm9kZS5vcGVyYXRvclRva2VuLmtpbmQpYCB3aXRoIGZ1bmN0aW9ucyBmcm9tIGB0c3V0aWxzYCAqLw0KZXhwb3J0IGZ1bmN0aW9uIGlzQXNzaWdubWVudChub2RlOiB0cy5Ob2RlKSB7DQogICAgaWYgKG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5CaW5hcnlFeHByZXNzaW9uKSB7DQogICAgICAgIGNvbnN0IGJpbmFyeUV4cHJlc3Npb24gPSBub2RlIGFzIHRzLkJpbmFyeUV4cHJlc3Npb247DQogICAgICAgIHJldHVybiBiaW5hcnlFeHByZXNzaW9uLm9wZXJhdG9yVG9rZW4ua2luZCA+PSB0cy5TeW50YXhLaW5kLkZpcnN0QXNzaWdubWVudA0KICAgICAgICAgICAgJiYgYmluYXJ5RXhwcmVzc2lvbi5vcGVyYXRvclRva2VuLmtpbmQgPD0gdHMuU3ludGF4S2luZC5MYXN0QXNzaWdubWVudDsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KfQ0KDQovKioNCiAqIEJpdHdpc2UgY2hlY2sgZm9yIG5vZGUgZmxhZ3MuDQogKg0KICogQGRlcHJlY2F0ZWQgdXNlIGBpc05vZGVGbGFnU2V0YCBmcm9tIGB0c3V0aWxzYA0KICovDQpleHBvcnQgZnVuY3Rpb24gaXNOb2RlRmxhZ1NldChub2RlOiB0cy5Ob2RlLCBmbGFnVG9DaGVjazogdHMuTm9kZUZsYWdzKTogYm9vbGVhbiB7DQogICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2UNCiAgICByZXR1cm4gKG5vZGUuZmxhZ3MgJiBmbGFnVG9DaGVjaykgIT09IDA7DQp9DQoNCi8qKg0KICogQml0d2lzZSBjaGVjayBmb3IgY29tYmluZWQgbm9kZSBmbGFncy4NCiAqDQogKiBAZGVwcmVjYXRlZCBubyBsb25nZXIgdXNlZA0KICovDQpleHBvcnQgZnVuY3Rpb24gaXNDb21iaW5lZE5vZGVGbGFnU2V0KG5vZGU6IHRzLk5vZGUsIGZsYWdUb0NoZWNrOiB0cy5Ob2RlRmxhZ3MpOiBib29sZWFuIHsNCiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZQ0KICAgIHJldHVybiAodHMuZ2V0Q29tYmluZWROb2RlRmxhZ3Mobm9kZSkgJiBmbGFnVG9DaGVjaykgIT09IDA7DQp9DQoNCi8qKg0KICogQml0d2lzZSBjaGVjayBmb3IgY29tYmluZWQgbW9kaWZpZXIgZmxhZ3MuDQogKg0KICogQGRlcHJlY2F0ZWQgbm8gbG9uZ2VyIHVzZWQNCiAqLw0KZXhwb3J0IGZ1bmN0aW9uIGlzQ29tYmluZWRNb2RpZmllckZsYWdTZXQobm9kZTogdHMuTm9kZSwgZmxhZ1RvQ2hlY2s6IHRzLk1vZGlmaWVyRmxhZ3MpOiBib29sZWFuIHsNCiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZQ0KICAgIHJldHVybiAodHMuZ2V0Q29tYmluZWRNb2RpZmllckZsYWdzKG5vZGUpICYgZmxhZ1RvQ2hlY2spICE9PSAwOw0KfQ0KDQovKioNCiAqIEJpdHdpc2UgY2hlY2sgZm9yIHR5cGUgZmxhZ3MuDQogKg0KICogQGRlcHJlY2F0ZWQgdXNlIGBpc1R5cGVGbGFnU2V0YCBmcm9tIGB0c3V0aWxzYA0KICovDQpleHBvcnQgZnVuY3Rpb24gaXNUeXBlRmxhZ1NldCh0eXBlOiB0cy5UeXBlLCBmbGFnVG9DaGVjazogdHMuVHlwZUZsYWdzKTogYm9vbGVhbiB7DQogICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2UNCiAgICByZXR1cm4gKHR5cGUuZmxhZ3MgJiBmbGFnVG9DaGVjaykgIT09IDA7DQp9DQoNCi8qKg0KICogQml0d2lzZSBjaGVjayBmb3Igc3ltYm9sIGZsYWdzLg0KICoNCiAqIEBkZXByZWNhdGVkIHVzZSBgaXNTeW1ib2xGbGFnU2V0YCBmcm9tIGB0c3V0aWxzYA0KICovDQpleHBvcnQgZnVuY3Rpb24gaXNTeW1ib2xGbGFnU2V0KHN5bWJvbDogdHMuU3ltYm9sLCBmbGFnVG9DaGVjazogdHMuU3ltYm9sRmxhZ3MpOiBib29sZWFuIHsNCiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZQ0KICAgIHJldHVybiAoc3ltYm9sLmZsYWdzICYgZmxhZ1RvQ2hlY2spICE9PSAwOw0KfQ0KDQovKioNCiAqIEJpdHdpc2UgY2hlY2sgZm9yIG9iamVjdCBmbGFncy4NCiAqIERvZXMgbm90IHdvcmsgd2l0aCBUeXBlU2NyaXB0IDIuMC54DQogKg0KICogQGRlcHJlY2F0ZWQgdXNlIGBpc09iamVjdEZsYWdTZXRgIGZyb20gYHRzdXRpbHNgDQogKi8NCmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdEZsYWdTZXQob2JqZWN0VHlwZTogdHMuT2JqZWN0VHlwZSwgZmxhZ1RvQ2hlY2s6IHRzLk9iamVjdEZsYWdzKTogYm9vbGVhbiB7DQogICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2UNCiAgICByZXR1cm4gKG9iamVjdFR5cGUub2JqZWN0RmxhZ3MgJiBmbGFnVG9DaGVjaykgIT09IDA7DQp9DQoNCi8qKg0KICogQHJldHVybnMgdHJ1ZSBpZiBkZWNsIGlzIGEgbmVzdGVkIG1vZHVsZSBkZWNsYXJhdGlvbiwgaS5lLiByZXByZXNlbnRzIGEgc2VnbWVudCBvZiBhIGRvdHRlZCBtb2R1bGUgcGF0aC4NCiAqDQogKiBAZGVwcmVjYXRlZCB1c2UgYGRlY2wucGFyZW50IS5raW5kID09PSB0cy5TeW50YXhLaW5kLk1vZHVsZURlY2xhcmF0aW9uYA0KICovDQpleHBvcnQgZnVuY3Rpb24gaXNOZXN0ZWRNb2R1bGVEZWNsYXJhdGlvbihkZWNsOiB0cy5Nb2R1bGVEZWNsYXJhdGlvbikgew0KICAgIC8vIGluIGEgZGVjbGFyYXRpb24gZXhwcmVzc2lvbiBsaWtlICdtb2R1bGUgYS5iLmMnIC0gJ2EnIGlzIHRoZSB0b3AgbGV2ZWwgbW9kdWxlIGRlY2xhcmF0aW9uIG5vZGUgYW5kICdiJyBhbmQgJ2MnDQogICAgLy8gYXJlIG5lc3RlZCB0aGVyZWZvcmUgd2UgY2FuIGRlcGVuZCB0aGF0IGEgbm9kZSdzIHBvc2l0aW9uIHdpbGwgb25seSBtYXRjaCB3aXRoIGl0cyBuYW1lJ3MgcG9zaXRpb24gZm9yIG5lc3RlZA0KICAgIC8vIG5vZGVzDQogICAgcmV0dXJuIGRlY2wubmFtZS5wb3MgPT09IGRlY2wucG9zOw0KfQ0KDQpleHBvcnQgZnVuY3Rpb24gdW53cmFwUGFyZW50aGVzZXMobm9kZTogdHMuRXhwcmVzc2lvbikgew0KICAgIHdoaWxlIChub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuUGFyZW50aGVzaXplZEV4cHJlc3Npb24pIHsNCiAgICAgICAgbm9kZSA9IChub2RlIGFzIHRzLlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKS5leHByZXNzaW9uOw0KICAgIH0NCiAgICByZXR1cm4gbm9kZTsNCn0NCg0KLyoqIEBkZXByZWNhdGVkIHVzZSBgaXNGdW5jdGlvblNjb3BlQm91bmRhcnlgIGZyb20gYHRzdXRpbHNgICovDQpleHBvcnQgZnVuY3Rpb24gaXNTY29wZUJvdW5kYXJ5KG5vZGU6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICByZXR1cm4gbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRGVjbGFyYXRpb24NCiAgICAgICAgfHwgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRXhwcmVzc2lvbg0KICAgICAgICB8fCBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuUHJvcGVydHlBc3NpZ25tZW50DQogICAgICAgIHx8IG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5TaG9ydGhhbmRQcm9wZXJ0eUFzc2lnbm1lbnQNCiAgICAgICAgfHwgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLk1ldGhvZERlY2xhcmF0aW9uDQogICAgICAgIHx8IG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5Db25zdHJ1Y3Rvcg0KICAgICAgICB8fCBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTW9kdWxlRGVjbGFyYXRpb24NCiAgICAgICAgfHwgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLkFycm93RnVuY3Rpb24NCiAgICAgICAgfHwgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uDQogICAgICAgIHx8IG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5DbGFzc0RlY2xhcmF0aW9uDQogICAgICAgIHx8IG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5DbGFzc0V4cHJlc3Npb24NCiAgICAgICAgfHwgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLkludGVyZmFjZURlY2xhcmF0aW9uDQogICAgICAgIHx8IG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5HZXRBY2Nlc3Nvcg0KICAgICAgICB8fCBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuU2V0QWNjZXNzb3INCiAgICAgICAgfHwgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLlNvdXJjZUZpbGUgJiYgdHMuaXNFeHRlcm5hbE1vZHVsZShub2RlIGFzIHRzLlNvdXJjZUZpbGUpOw0KfQ0KDQovKiogQGRlcHJlY2F0ZWQgdXNlIGBpc0Jsb2NrU2NvcGVCb3VuZGFyeWAgZnJvbSBgdHN1dGlsc2AgKi8NCmV4cG9ydCBmdW5jdGlvbiBpc0Jsb2NrU2NvcGVCb3VuZGFyeShub2RlOiB0cy5Ob2RlKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIGlzU2NvcGVCb3VuZGFyeShub2RlKSAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOmRlcHJlY2F0aW9uDQogICAgICAgIHx8IG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5CbG9jaw0KICAgICAgICB8fCBpc0xvb3Aobm9kZSkgLy8gdHNsaW50OmRpc2FibGUtbGluZTpkZXByZWNhdGlvbg0KICAgICAgICB8fCBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuV2l0aFN0YXRlbWVudA0KICAgICAgICB8fCBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuU3dpdGNoU3RhdGVtZW50DQogICAgICAgIHx8IG5vZGUucGFyZW50ICE9PSB1bmRlZmluZWQNCiAgICAgICAgICAgICYmIChub2RlLnBhcmVudC5raW5kID09PSB0cy5TeW50YXhLaW5kLlRyeVN0YXRlbWVudA0KICAgICAgICAgICAgfHwgbm9kZS5wYXJlbnQua2luZCA9PT0gdHMuU3ludGF4S2luZC5JZlN0YXRlbWVudCk7DQp9DQoNCi8qKiBAZGVwcmVjYXRlZCB1c2UgYGlzSXRlcmF0aW9uU3RhdGVtZW50YCBmcm9tIGB0c3V0aWxzYCBvciBgdHlwZXNjcmlwdGAgKi8NCmV4cG9ydCBmdW5jdGlvbiBpc0xvb3Aobm9kZTogdHMuTm9kZSk6IG5vZGUgaXMgdHMuSXRlcmF0aW9uU3RhdGVtZW50IHsNCiAgIHJldHVybiBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuRG9TdGF0ZW1lbnQNCiAgICAgICAgfHwgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLldoaWxlU3RhdGVtZW50DQogICAgICAgIHx8IG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5Gb3JTdGF0ZW1lbnQNCiAgICAgICAgfHwgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLkZvckluU3RhdGVtZW50DQogICAgICAgIHx8IG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5Gb3JPZlN0YXRlbWVudDsNCn0NCg0KLyoqDQogKiBAcmV0dXJucyBXaGV0aGVyIG5vZGUgaXMgYSBudW1lcmljIGV4cHJlc3Npb24uDQogKi8NCmV4cG9ydCBmdW5jdGlvbiBpc051bWVyaWMobm9kZTogdHMuRXhwcmVzc2lvbikgew0KICAgIHdoaWxlIChpc1ByZWZpeFVuYXJ5RXhwcmVzc2lvbihub2RlKSAmJg0KICAgICAgICAgICAobm9kZS5vcGVyYXRvciA9PT0gdHMuU3ludGF4S2luZC5QbHVzVG9rZW4gfHwgbm9kZS5vcGVyYXRvciA9PT0gdHMuU3ludGF4S2luZC5NaW51c1Rva2VuKSkgew0KICAgICAgICBub2RlID0gbm9kZS5vcGVyYW5kOw0KICAgIH0NCg0KICAgIHJldHVybiBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTnVtZXJpY0xpdGVyYWwgfHwNCiAgICAgICAgaXNJZGVudGlmaWVyKG5vZGUpICYmIChub2RlLnRleHQgPT09ICJOYU4iIHx8IG5vZGUudGV4dCA9PT0gIkluZmluaXR5Iik7DQp9DQoNCmV4cG9ydCBpbnRlcmZhY2UgVG9rZW5Qb3NpdGlvbiB7DQogICAgLyoqIFRoZSBzdGFydCBvZiB0aGUgdG9rZW4gaW5jbHVkaW5nIGFsbCB0cml2aWEgYmVmb3JlIGl0ICovDQogICAgZnVsbFN0YXJ0OiBudW1iZXI7DQogICAgLyoqIFRoZSBzdGFydCBvZiB0aGUgdG9rZW4gKi8NCiAgICB0b2tlblN0YXJ0OiBudW1iZXI7DQogICAgLyoqIFRoZSBlbmQgb2YgdGhlIHRva2VuICovDQogICAgZW5kOiBudW1iZXI7DQp9DQpleHBvcnQgdHlwZSBGb3JFYWNoVG9rZW5DYWxsYmFjayA9IChmdWxsVGV4dDogc3RyaW5nLCBraW5kOiB0cy5TeW50YXhLaW5kLCBwb3M6IFRva2VuUG9zaXRpb24sIHBhcmVudDogdHMuTm9kZSkgPT4gdm9pZDsNCmV4cG9ydCB0eXBlIEZvckVhY2hDb21tZW50Q2FsbGJhY2sgPSAoZnVsbFRleHQ6IHN0cmluZywga2luZDogdHMuU3ludGF4S2luZCwgcG9zOiBUb2tlblBvc2l0aW9uKSA9PiB2b2lkOw0KZXhwb3J0IHR5cGUgRmlsdGVyQ2FsbGJhY2sgPSAobm9kZTogdHMuTm9kZSkgPT4gYm9vbGVhbjsNCg0KLyoqDQogKiBJdGVyYXRlIG92ZXIgYWxsIHRva2VucyBvZiBgbm9kZWANCiAqDQogKiBAZGVzY3JpcHRpb24gSnNEb2MgY29tbWVudHMgYXJlIHRyZWF0ZWQgbGlrZSByZWd1bGFyIGNvbW1lbnRzIGFuZCBvbmx5IHZpc2l0ZWQgaWYgYHNraXBUcml2aWFgID09PSBmYWxzZS4NCiAqDQogKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSB3aG9zZSB0b2tlbnMgc2hvdWxkIGJlIHZpc2l0ZWQNCiAqIEBwYXJhbSBza2lwVHJpdmlhIElmIHNldCB0byBmYWxzZSBhbGwgdHJpdmlhIHByZWNlZWRpbmcgYG5vZGVgIG9yIGFueSBvZiBpdHMgY2hpbGRyZW4gaXMgaW5jbHVkZWQNCiAqIEBwYXJhbSBjYiBJcyBjYWxsZWQgZm9yIGV2ZXJ5IHRva2VuIG9mIGBub2RlYC4gSXQgZ2V0cyB0aGUgZnVsbCB0ZXh0IG9mIHRoZSBTb3VyY2VGaWxlIGFuZCB0aGUgcG9zaXRpb24gb2YgdGhlIHRva2VuIHdpdGhpbiB0aGF0IHRleHQuDQogKiBAcGFyYW0gZmlsdGVyIElmIHByb3ZpZGVkLCB3aWxsIGJlIGNhbGxlZCBmb3IgZXZlcnkgTm9kZSBhbmQgVG9rZW4gZm91bmQuIElmIGl0IHJldHVybnMgZmFsc2UgYGNiYCB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIHRoaXMgc3VidHJlZS4NCiAqDQogKiBAZGVwcmVjYXRlZCB1c2UgYGZvckVhY2hUb2tlbmAgb3IgYGZvckVhY2hUb2tlbldpdGhUcml2aWFgIGZyb20gYHRzdXRpbHNgDQogKi8NCmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoVG9rZW4obm9kZTogdHMuTm9kZSwgc2tpcFRyaXZpYTogYm9vbGVhbiwgY2I6IEZvckVhY2hUb2tlbkNhbGxiYWNrLCBmaWx0ZXI/OiBGaWx0ZXJDYWxsYmFjaykgew0KICAgIC8vIHRoaXMgZnVuY3Rpb24gd2lsbCBtb3N0IGxpa2VseSBiZSBjYWxsZWQgd2l0aCBTb3VyY2VGaWxlIGFueXdheXMsIHNvIHRoZXJlIGlzIG5vIG5lZWQgZm9yIGFuIGFkZGl0aW9uYWwgcGFyYW1ldGVyDQogICAgY29uc3Qgc291cmNlRmlsZSA9IG5vZGUuZ2V0U291cmNlRmlsZSgpOw0KICAgIGNvbnN0IGZ1bGxUZXh0ID0gc291cmNlRmlsZS50ZXh0Ow0KICAgIGNvbnN0IGl0ZXJhdGVGbiA9IGZpbHRlciA9PT0gdW5kZWZpbmVkID8gaXRlcmF0ZUNoaWxkcmVuIDogaXRlcmF0ZVdpdGhGaWx0ZXI7DQogICAgY29uc3QgaGFuZGxlVHJpdmlhID0gc2tpcFRyaXZpYSA/IHVuZGVmaW5lZCA6IGNyZWF0ZVRyaXZpYUhhbmRsZXIoc291cmNlRmlsZSwgY2IpOw0KDQogICAgaXRlcmF0ZUZuKG5vZGUpOw0KDQogICAgLy8gdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHNhdmUgdGhlIGlmIGNvbmRpdGlvbiBmb3IgdGhlIGNvbW1vbiBjYXNlIHdoZXJlIG5vIGZpbHRlciBpcyBwcm92aWRlZA0KICAgIGZ1bmN0aW9uIGl0ZXJhdGVXaXRoRmlsdGVyKGNoaWxkOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChmaWx0ZXIhKGNoaWxkKSkgew0KICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdGVDaGlsZHJlbihjaGlsZCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpdGVyYXRlQ2hpbGRyZW4oY2hpbGQ6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGNoaWxkLmtpbmQgPCB0cy5TeW50YXhLaW5kLkZpcnN0Tm9kZSB8fA0KICAgICAgICAgICAgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHRvIHR5cGVzY3JpcHQgMi4wLjEwDQogICAgICAgICAgICAvLyBKc3hUZXh0IHdhcyBubyBUb2tlbiwgYnV0IGEgTm9kZSBpbiB0aGF0IHZlcnNpb24NCiAgICAgICAgICAgIGNoaWxkLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSnN4VGV4dCkgew0KICAgICAgICAgICAgLy8gd2UgZm91bmQgYSB0b2tlbiwgdG9rZW5zIGhhdmUgbm8gY2hpbGRyZW4sIHN0b3AgcmVjdXJzaW5nIGhlcmUNCiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCk7DQogICAgICAgIH0NCiAgICAgICAgLyogRXhjbHVkZSBldmVyeXRoaW5nIGNvbnRhaW5lZCBpbiBKc0RvYywgaXQgd2lsbCBiZSBoYW5kbGVkIHdpdGggdGhlIG90aGVyIHRyaXZpYSBhbnl3YXkuDQogICAgICAgICAqIFdoZW4gd2Ugd291bGQgaGFuZGxlIEpzRG9jIHRva2VucyBsaWtlIHJlZ3VsYXIgb25lcywgd2Ugd291bGQgc2NhbiBzb21lIHRyaXZpYSBtdWx0aXBsZSB0aW1lcy4NCiAgICAgICAgICogRXZlbiB3b3JzZSwgd2Ugd291bGQgc2NhbiBmb3IgdHJpdmlhIGluc2lkZSB0aGUgSnNEb2MgY29tbWVudCwgd2hpY2ggeWllbGRzIHVuZXhwZWN0ZWQgcmVzdWx0cy4qLw0KICAgICAgICBpZiAoY2hpbGQua2luZCAhPT0gdHMuU3ludGF4S2luZC5KU0RvY0NvbW1lbnQpIHsNCiAgICAgICAgICAgIC8vIHJlY3Vyc2UgaW50byBOb2RlJ3MgY2hpbGRyZW4gdG8gZmluZCB0b2tlbnMNCiAgICAgICAgICAgIHJldHVybiBjaGlsZC5nZXRDaGlsZHJlbihzb3VyY2VGaWxlKS5mb3JFYWNoKGl0ZXJhdGVGbik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjYWxsYmFjayh0b2tlbjogdHMuTm9kZSkgew0KICAgICAgICBjb25zdCB0b2tlblN0YXJ0ID0gdG9rZW4uZ2V0U3RhcnQoc291cmNlRmlsZSk7DQogICAgICAgIGlmICghc2tpcFRyaXZpYSAmJiB0b2tlblN0YXJ0ICE9PSB0b2tlbi5wb3MpIHsNCiAgICAgICAgICAgIC8vIHdlIG9ubHkgaGF2ZSB0byBoYW5kbGUgdHJpdmlhIGJlZm9yZSBlYWNoIHRva2VuLCBiZWNhdXNlIHRoZXJlIGlzIG5vdGhpbmcgYWZ0ZXIgRW5kT2ZGaWxlVG9rZW4NCiAgICAgICAgICAgIGhhbmRsZVRyaXZpYSEodG9rZW4ucG9zLCB0b2tlblN0YXJ0LCB0b2tlbik7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGNiKGZ1bGxUZXh0LCB0b2tlbi5raW5kLCB7dG9rZW5TdGFydCwgZnVsbFN0YXJ0OiB0b2tlbi5wb3MsIGVuZDogdG9rZW4uZW5kfSwgdG9rZW4ucGFyZW50ISk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBjcmVhdGVUcml2aWFIYW5kbGVyKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIGNiOiBGb3JFYWNoVG9rZW5DYWxsYmFjaykgew0KICAgIGNvbnN0IGZ1bGxUZXh0ID0gc291cmNlRmlsZS50ZXh0Ow0KICAgIGNvbnN0IHNjYW5uZXIgPSB0cy5jcmVhdGVTY2FubmVyKHNvdXJjZUZpbGUubGFuZ3VhZ2VWZXJzaW9uLCBmYWxzZSwgc291cmNlRmlsZS5sYW5ndWFnZVZhcmlhbnQsIGZ1bGxUZXh0KTsNCiAgICAvKioNCiAgICAgKiBTY2FuIHRoZSBzcGVjaWZpZWQgcmFuZ2UgdG8gZ2V0IGFsbCB0cml2aWEgdG9rZW5zLg0KICAgICAqIFRoaXMgaW5jbHVkZXMgdHJhaWxpbmcgdHJpdmlhIG9mIHRoZSBsYXN0IHRva2VuIGFuZCB0aGUgbGVhZGluZyB0cml2aWEgb2YgdGhlIGN1cnJlbnQgdG9rZW4NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBoYW5kbGVUcml2aWEoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIsIHRva2VuOiB0cy5Ob2RlKSB7DQogICAgICAgIGNvbnN0IHBhcmVudCA9IHRva2VuLnBhcmVudCE7DQogICAgICAgIC8vIHByZXZlbnQgZmFsc2UgcG9zaXRpdmVzIGJ5IG5vdCBzY2FubmluZyBpbnNpZGUgSnN4VGV4dA0KICAgICAgICBpZiAoIWNhbkhhdmVMZWFkaW5nVHJpdmlhKHRva2VuLmtpbmQsIHBhcmVudCkpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBzY2FubmVyLnNldFRleHRQb3Moc3RhcnQpOw0KICAgICAgICBsZXQgcG9zaXRpb246IG51bWJlcjsNCiAgICAgICAgLy8gd2Ugb25seSBnZXQgaGVyZSBpZiBzdGFydCAhPT0gZW5kLCBzbyB3ZSBjYW4gc2NhbiBhdCBsZWFzdCBvbmUgdGltZQ0KICAgICAgICBkbyB7DQogICAgICAgICAgICBjb25zdCBraW5kID0gc2Nhbm5lci5zY2FuKCk7DQogICAgICAgICAgICBwb3NpdGlvbiA9IHNjYW5uZXIuZ2V0VGV4dFBvcygpOw0KICAgICAgICAgICAgY2IoZnVsbFRleHQsIGtpbmQsIHt0b2tlblN0YXJ0OiBzY2FubmVyLmdldFRva2VuUG9zKCksIGVuZDogcG9zaXRpb24sIGZ1bGxTdGFydDogc3RhcnR9LCBwYXJlbnQpOw0KICAgICAgICB9IHdoaWxlIChwb3NpdGlvbiA8IGVuZCk7DQogICAgfQ0KDQogICAgcmV0dXJuIGhhbmRsZVRyaXZpYTsNCn0NCg0KLyoqDQogKiBJdGVyYXRlIG92ZXIgYWxsIGNvbW1lbnRzIG93bmVkIGJ5IGBub2RlYCBvciBpdHMgY2hpbGRyZW4NCiAqDQogKiBAZGVwcmVjYXRlZCB1c2UgYGZvckVhY2hDb21tZW50YCBmcm9tIGB0c3V0aWxzYA0KICovDQpleHBvcnQgZnVuY3Rpb24gZm9yRWFjaENvbW1lbnQobm9kZTogdHMuTm9kZSwgY2I6IEZvckVhY2hDb21tZW50Q2FsbGJhY2spIHsNCiAgICAvKiBWaXNpdCBhbGwgdG9rZW5zIGFuZCBza2lwIHRyaXZpYS4NCiAgICAgICBDb21tZW50IHJhbmdlcyBiZXR3ZWVuIHRva2VucyBhcmUgcGFyc2VkIHdpdGhvdXQgdGhlIG5lZWQgb2YgYSBzY2FubmVyLg0KICAgICAgIGZvckVhY2hUb2tlbiBhbHNvIGRvZXMgaW50ZW50aW9uYWxseSBub3QgcGF5IGF0dGVudGlvbiB0byB0aGUgY29ycmVjdCBjb21tZW50IG93bmVyc2hpcCBvZiBub2RlcyBhcyBpdCBhbHdheXMNCiAgICAgICBzY2FucyBhbGwgdHJpdmlhIGJlZm9yZSBlYWNoIHRva2VuLCB3aGljaCBjb3VsZCBpbmNsdWRlIHRyYWlsaW5nIGNvbW1lbnRzIG9mIHRoZSBwcmV2aW91cyB0b2tlbi4NCiAgICAgICBDb21tZW50IG9ud2Vyc2hpcCBpcyBkb25lIHJpZ2h0IGluIHRoaXMgZnVuY3Rpb24qLw0KICAgIHJldHVybiBmb3JFYWNoVG9rZW4obm9kZSwgdHJ1ZSwgKGZ1bGxUZXh0LCB0b2tlbktpbmQsIHBvcywgcGFyZW50KSA9PiB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6ZGVwcmVjYXRpb24NCiAgICAgICAgLy8gZG9uJ3Qgc2VhcmNoIGZvciBjb21tZW50cyBpbnNpZGUgSnN4VGV4dA0KICAgICAgICBpZiAoY2FuSGF2ZUxlYWRpbmdUcml2aWEodG9rZW5LaW5kLCBwYXJlbnQpKSB7DQogICAgICAgICAgICAvLyBDb21tZW50cyBiZWZvcmUgdGhlIGZpcnN0IHRva2VuIChwb3MuZnVsbFN0YXJ0ID09PSAwKSBhcmUgYWxsIGNvbnNpZGVyZWQgbGVhZGluZyBjb21tZW50cywgc28gbm8gbmVlZCBmb3Igc3BlY2lhbCB0cmVhdG1lbnQNCiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRzID0gdHMuZ2V0TGVhZGluZ0NvbW1lbnRSYW5nZXMoZnVsbFRleHQsIHBvcy5mdWxsU3RhcnQpOw0KICAgICAgICAgICAgaWYgKGNvbW1lbnRzICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvbW1lbnQgb2YgY29tbWVudHMpIHsNCiAgICAgICAgICAgICAgICAgICAgY2IoZnVsbFRleHQsIGNvbW1lbnQua2luZCwge2Z1bGxTdGFydDogcG9zLmZ1bGxTdGFydCwgdG9rZW5TdGFydDogY29tbWVudC5wb3MsIGVuZDogY29tbWVudC5lbmR9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKGNhbkhhdmVUcmFpbGluZ1RyaXZpYSh0b2tlbktpbmQsIHBhcmVudCkpIHsNCiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRzID0gdHMuZ2V0VHJhaWxpbmdDb21tZW50UmFuZ2VzKGZ1bGxUZXh0LCBwb3MuZW5kKTsNCiAgICAgICAgICAgIGlmIChjb21tZW50cyAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb21tZW50IG9mIGNvbW1lbnRzKSB7DQogICAgICAgICAgICAgICAgICAgIGNiKGZ1bGxUZXh0LCBjb21tZW50LmtpbmQsIHtmdWxsU3RhcnQ6IHBvcy5mdWxsU3RhcnQsIHRva2VuU3RhcnQ6IGNvbW1lbnQucG9zLCBlbmQ6IGNvbW1lbnQuZW5kfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfSk7DQp9DQoNCi8qKiBFeGNsdWRlIGxlYWRpbmcgcG9zaXRpb25zIHRoYXQgd291bGQgbGVhZCB0byBzY2FubmluZyBmb3IgdHJpdmlhIGluc2lkZSBKc3hUZXh0ICovDQpmdW5jdGlvbiBjYW5IYXZlTGVhZGluZ1RyaXZpYSh0b2tlbktpbmQ6IHRzLlN5bnRheEtpbmQsIHBhcmVudDogdHMuTm9kZSk6IGJvb2xlYW4gew0KICAgIHN3aXRjaCAodG9rZW5LaW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Kc3hUZXh0Og0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyB0aGVyZSBpcyBubyB0cml2aWEgYmVmb3JlIEpzeFRleHQNCg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuT3BlbkJyYWNlVG9rZW46DQogICAgICAgICAgICAvLyBiZWZvcmUgYSBKc3hFeHByZXNzaW9uIGluc2lkZSBhIEpzeEVsZW1lbnQncyBib2R5IGNhbiBvbmx5IGJlIG90aGVyIEpzeENoaWxkLCBidXQgbm8gdHJpdmlhDQogICAgICAgICAgICByZXR1cm4gcGFyZW50LmtpbmQgIT09IHRzLlN5bnRheEtpbmQuSnN4RXhwcmVzc2lvbiB8fCBwYXJlbnQucGFyZW50IS5raW5kICE9PSB0cy5TeW50YXhLaW5kLkpzeEVsZW1lbnQ7DQoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkxlc3NUaGFuVG9rZW46DQogICAgICAgICAgICBzd2l0Y2ggKHBhcmVudC5raW5kKSB7DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkpzeENsb3NpbmdFbGVtZW50Og0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHdvdWxkIGJlIGluc2lkZSB0aGUgZWxlbWVudCBib2R5DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkpzeE9wZW5pbmdFbGVtZW50Og0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Kc3hTZWxmQ2xvc2luZ0VsZW1lbnQ6DQogICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGNhbiBvbmx5IGJlIGxlYWRpbmcgdHJpdmlhIGlmIHdlIGFyZSBhdCB0aGUgZW5kIG9mIHRoZSB0b3AgbGV2ZWwgZWxlbWVudA0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50LnBhcmVudCEucGFyZW50IS5raW5kICE9PSB0cy5TeW50YXhLaW5kLkpzeEVsZW1lbnQ7DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCn0NCg0KLyoqIEV4Y2x1ZGUgdHJhaWxpbmcgcG9zaXRpb25zIHRoYXQgd291bGQgbGVhZCB0byBzY2FubmluZyBmb3IgdHJpdmlhIGluc2lkZSBKc3hUZXh0ICovDQpmdW5jdGlvbiBjYW5IYXZlVHJhaWxpbmdUcml2aWEodG9rZW5LaW5kOiB0cy5TeW50YXhLaW5kLCBwYXJlbnQ6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICBzd2l0Y2ggKHRva2VuS2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSnN4VGV4dDoNCiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIHRyaXZpYSBhZnRlciBKc3hUZXh0DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNsb3NlQnJhY2VUb2tlbjoNCiAgICAgICAgICAgIC8vIGFmdGVyIGEgSnN4RXhwcmVzc2lvbiBpbnNpZGUgYSBKc3hFbGVtZW50J3MgYm9keSBjYW4gb25seSBiZSBvdGhlciBKc3hDaGlsZCwgYnV0IG5vIHRyaXZpYQ0KICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5raW5kICE9PSB0cy5TeW50YXhLaW5kLkpzeEV4cHJlc3Npb24gfHwgcGFyZW50LnBhcmVudCEua2luZCAhPT0gdHMuU3ludGF4S2luZC5Kc3hFbGVtZW50Ow0KDQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5HcmVhdGVyVGhhblRva2VuOg0KICAgICAgICAgICAgc3dpdGNoIChwYXJlbnQua2luZCkgew0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Kc3hPcGVuaW5nRWxlbWVudDoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyB3b3VsZCBiZSBpbnNpZGUgdGhlIGVsZW1lbnQNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSnN4Q2xvc2luZ0VsZW1lbnQ6DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkpzeFNlbGZDbG9zaW5nRWxlbWVudDoNCiAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgY2FuIG9ubHkgYmUgdHJhaWxpbmcgdHJpdmlhIGlmIHdlIGFyZSBhdCB0aGUgZW5kIG9mIHRoZSB0b3AgbGV2ZWwgZWxlbWVudA0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50LnBhcmVudCEucGFyZW50IS5raW5kICE9PSB0cy5TeW50YXhLaW5kLkpzeEVsZW1lbnQ7DQoNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KfQ0KDQovKioNCiAqIENoZWNrcyBpZiB0aGVyZSBhcmUgYW55IGNvbW1lbnRzIGJldHdlZW4gYHBvc2l0aW9uYCBhbmQgdGhlIG5leHQgbm9uLXRyaXZpYSB0b2tlbg0KICoNCiAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRvIHNjYW4NCiAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgcG9zaXRpb24gaW5zaWRlIGB0ZXh0YCB3aGVyZSB0byBzdGFydCBzY2FubmluZy4gTWFrZSBzdXJlIHRoYXQgdGhpcyBpcyBhIHZhbGlkIHN0YXJ0IHBvc2l0aW9uLg0KICogICAgICAgICAgICAgICAgIFRoaXMgdmFsdWUgaXMgdHlwaWNhbGx5IG9idGFpbmVkIGZyb20gYG5vZGUuZ2V0RnVsbFN0YXJ0KClgIG9yIGBub2RlLmdldEVuZCgpYA0KICovDQpleHBvcnQgZnVuY3Rpb24gaGFzQ29tbWVudEFmdGVyUG9zaXRpb24odGV4dDogc3RyaW5nLCBwb3NpdGlvbjogbnVtYmVyKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIHRzLmdldFRyYWlsaW5nQ29tbWVudFJhbmdlcyh0ZXh0LCBwb3NpdGlvbikgIT09IHVuZGVmaW5lZCB8fA0KICAgICAgICAgICB0cy5nZXRMZWFkaW5nQ29tbWVudFJhbmdlcyh0ZXh0LCBwb3NpdGlvbikgIT09IHVuZGVmaW5lZDsNCn0NCg0KZXhwb3J0IGludGVyZmFjZSBFcXVhbHNLaW5kIHsNCiAgICBpc1Bvc2l0aXZlOiBib29sZWFuOyAvLyBUcnVlIGZvciAiPT09IiBhbmQgIj09Ig0KICAgIGlzU3RyaWN0OiBib29sZWFuOyAvLyBUcnVlIGZvciAiPT09IiBhbmQgIiE9PSINCn0NCg0KZXhwb3J0IGZ1bmN0aW9uIGdldEVxdWFsc0tpbmQobm9kZTogdHMuQmluYXJ5T3BlcmF0b3JUb2tlbik6IEVxdWFsc0tpbmQgfCB1bmRlZmluZWQgew0KICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5FcXVhbHNFcXVhbHNUb2tlbjoNCiAgICAgICAgICAgIHJldHVybiB7IGlzUG9zaXRpdmU6IHRydWUsIGlzU3RyaWN0OiBmYWxzZSB9Ow0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRXF1YWxzRXF1YWxzRXF1YWxzVG9rZW46DQogICAgICAgICAgICByZXR1cm4geyBpc1Bvc2l0aXZlOiB0cnVlLCBpc1N0cmljdDogdHJ1ZSB9Ow0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRXhjbGFtYXRpb25FcXVhbHNUb2tlbjoNCiAgICAgICAgICAgIHJldHVybiB7IGlzUG9zaXRpdmU6IGZhbHNlLCBpc1N0cmljdDogZmFsc2UgfTsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkV4Y2xhbWF0aW9uRXF1YWxzRXF1YWxzVG9rZW46DQogICAgICAgICAgICByZXR1cm4geyBpc1Bvc2l0aXZlOiBmYWxzZSwgaXNTdHJpY3Q6IHRydWUgfTsNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KfQ0KDQpleHBvcnQgZnVuY3Rpb24gaXNTdHJpY3ROdWxsQ2hlY2tzRW5hYmxlZChvcHRpb25zOiB0cy5Db21waWxlck9wdGlvbnMpOiBib29sZWFuIHsNCiAgICByZXR1cm4gb3B0aW9ucy5zdHJpY3ROdWxsQ2hlY2tzID09PSB0cnVlIHx8DQogICAgICAgIChvcHRpb25zLnN0cmljdCA9PT0gdHJ1ZSAmJiBvcHRpb25zLnN0cmljdE51bGxDaGVja3MgIT09IGZhbHNlKTsNCn0NCg0KZXhwb3J0IGZ1bmN0aW9uIGlzTmVnYXRpdmVOdW1iZXJMaXRlcmFsKG5vZGU6IHRzLk5vZGUpOiBub2RlIGlzIHRzLlByZWZpeFVuYXJ5RXhwcmVzc2lvbiAmIHsgb3BlcmFuZDogdHMuTnVtZXJpY0xpdGVyYWwgfSB7DQogICAgcmV0dXJuIGlzUHJlZml4VW5hcnlFeHByZXNzaW9uKG5vZGUpICYmDQogICAgICAgIG5vZGUub3BlcmF0b3IgPT09IHRzLlN5bnRheEtpbmQuTWludXNUb2tlbiAmJg0KICAgICAgICBub2RlLm9wZXJhbmQua2luZCA9PT0gdHMuU3ludGF4S2luZC5OdW1lcmljTGl0ZXJhbDsNCn0NCg0KLyoqIFdyYXBwZXIgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCB0eXBlc2NyaXB0QDwyLjMuMSAqLw0KZXhwb3J0IGZ1bmN0aW9uIGlzV2hpdGVTcGFjZShjaDogbnVtYmVyKTogYm9vbGVhbiB7DQogICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lDQogICAgcmV0dXJuICh0cy5pc1doaXRlU3BhY2VMaWtlIHx8ICh0cyBhcyBhbnkpLmlzV2hpdGVTcGFjZSkoY2gpOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "66CA39B532F8191EA5FF396F431902F7",
              "algorithm": "md5"
            },
            {
              "value": "A8DC80E2AA7AF4D856D162DD670D6D4933197DC6",
              "algorithm": "sha-1"
            },
            {
              "value": "87D0E2DC1F632947E363C1E596DAD5AED36997F723EB7F5F01B59630A630F8B5",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/language/walker/blockScopeAwareRuleWalker.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IElPcHRpb25zIH0gZnJvbSAiLi4vcnVsZS9ydWxlIjsNCmltcG9ydCB7IGlzQmxvY2tTY29wZUJvdW5kYXJ5IH0gZnJvbSAiLi4vdXRpbHMiOw0KaW1wb3J0IHsgU2NvcGVBd2FyZVJ1bGVXYWxrZXIgfSBmcm9tICIuL3Njb3BlQXdhcmVSdWxlV2Fsa2VyIjsNCg0KLy8gdHNsaW50OmRpc2FibGU6ZGVwcmVjYXRpb24gKGV4dGVuZHMgZGVwcmVjYXRlZCBjbGFzcyBhbmQgdXNlcyBkZXByZWNhdGVkIHV0aWxzIC0gZG9lc24ndCBtYXR0ZXIgYmVjYXVzZSBpdCdzIGRlcHJlY2F0ZWQsIHRvbykNCg0KLyoqDQogKiBAZGVwcmVjYXRlZCBTZWUgY29tbWVudCBvbiBTY29wZUF3YXJlUnVsZVdhbGtlci4NCiAqDQogKiBBbiBBU1Qgd2Fsa2VyIHRoYXQgaXMgYXdhcmUgb2YgYmxvY2sgc2NvcGVzIGluIGFkZGl0aW9uIHRvIHJlZ3VsYXIgc2NvcGVzLiBCbG9jayBzY29wZXMNCiAqIGFyZSBhIHN1cGVyc2V0IG9mIHJlZ3VsYXIgc2NvcGVzIChuZXcgYmxvY2sgc2NvcGVzIGFyZSBjcmVhdGVkIG1vcmUgZnJlcXVlbnRseSBpbiBhIHByb2dyYW0pLg0KICovDQpleHBvcnQgYWJzdHJhY3QgY2xhc3MgQmxvY2tTY29wZUF3YXJlUnVsZVdhbGtlcjxULCBVPiBleHRlbmRzIFNjb3BlQXdhcmVSdWxlV2Fsa2VyPFQ+IHsNCiAgICBwcml2YXRlIHJlYWRvbmx5IGJsb2NrU2NvcGVTdGFjazogVVtdOw0KDQogICAgY29uc3RydWN0b3Ioc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwgb3B0aW9uczogSU9wdGlvbnMpIHsNCiAgICAgICAgc3VwZXIoc291cmNlRmlsZSwgb3B0aW9ucyk7DQoNCiAgICAgICAgLy8gaW5pdGlhbGl6ZSB3aXRoIGdsb2JhbCBzY29wZSBpZiBmaWxlIGlzIG5vdCBhIG1vZHVsZQ0KICAgICAgICB0aGlzLmJsb2NrU2NvcGVTdGFjayA9IHRzLmlzRXh0ZXJuYWxNb2R1bGUoc291cmNlRmlsZSkgPyBbXSA6IFt0aGlzLmNyZWF0ZUJsb2NrU2NvcGUoc291cmNlRmlsZSldOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGVCbG9ja1Njb3BlKG5vZGU6IHRzLk5vZGUpOiBVOw0KDQogICAgLy8gZ2V0IGFsbCBibG9jayBzY29wZXMgYXZhaWxhYmxlIGF0IHRoaXMgZGVwdGgNCiAgICBwdWJsaWMgZ2V0QWxsQmxvY2tTY29wZXMoKTogVVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tTY29wZVN0YWNrOw0KICAgIH0NCg0KICAgIHB1YmxpYyBnZXRDdXJyZW50QmxvY2tTY29wZSgpOiBVIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tTY29wZVN0YWNrW3RoaXMuYmxvY2tTY29wZVN0YWNrLmxlbmd0aCAtIDFdOw0KICAgIH0NCg0KICAgIHB1YmxpYyBnZXRDdXJyZW50QmxvY2tEZXB0aCgpOiBudW1iZXIgew0KICAgICAgICByZXR1cm4gdGhpcy5ibG9ja1Njb3BlU3RhY2subGVuZ3RoOw0KICAgIH0NCg0KICAgIC8vIGNhbGxiYWNrIG5vdGlmaWVyIHdoZW4gYSBibG9jayBzY29wZSBiZWdpbnMNCiAgICBwdWJsaWMgb25CbG9ja1Njb3BlU3RhcnQoKSB7DQogICAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICAvLyBjYWxsYmFjayBub3RpZmllciB3aGVuIGEgYmxvY2sgc2NvcGUgZW5kcw0KICAgIHB1YmxpYyBvbkJsb2NrU2NvcGVFbmQoKSB7DQogICAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICBwdWJsaWMgZmluZEJsb2NrU2NvcGUocHJlZGljYXRlOiAoc2NvcGU6IFUpID0+IGJvb2xlYW4pIHsNCiAgICAgICAgLy8gbG9vayB0aHJvdWdoIGJsb2NrIHNjb3BlcyBmcm9tIGxvY2FsIC0+IGdsb2JhbA0KICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5ibG9ja1Njb3BlU3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsNCiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUodGhpcy5ibG9ja1Njb3BlU3RhY2tbaV0pKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tTY29wZVN0YWNrW2ldOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KDQogICAgcHJvdGVjdGVkIHZpc2l0Tm9kZShub2RlOiB0cy5Ob2RlKSB7DQogICAgICAgIGNvbnN0IGlzTmV3QmxvY2tTY29wZSA9IHRoaXMuaXNCbG9ja1Njb3BlQm91bmRhcnkobm9kZSk7DQoNCiAgICAgICAgaWYgKGlzTmV3QmxvY2tTY29wZSkgew0KICAgICAgICAgICAgdGhpcy5ibG9ja1Njb3BlU3RhY2sucHVzaCh0aGlzLmNyZWF0ZUJsb2NrU2NvcGUobm9kZSkpOw0KICAgICAgICAgICAgdGhpcy5vbkJsb2NrU2NvcGVTdGFydCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgc3VwZXIudmlzaXROb2RlKG5vZGUpOw0KDQogICAgICAgIGlmIChpc05ld0Jsb2NrU2NvcGUpIHsNCiAgICAgICAgICAgIHRoaXMub25CbG9ja1Njb3BlRW5kKCk7DQogICAgICAgICAgICB0aGlzLmJsb2NrU2NvcGVTdGFjay5wb3AoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgaXNCbG9ja1Njb3BlQm91bmRhcnkobm9kZTogdHMuTm9kZSk6IGJvb2xlYW4gew0KICAgICAgICByZXR1cm4gaXNCbG9ja1Njb3BlQm91bmRhcnkobm9kZSk7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "AF99833895379817B92A43DC9C929DA4",
              "algorithm": "md5"
            },
            {
              "value": "CD9609B4DACFEAF3821040DB67465518A80214FC",
              "algorithm": "sha-1"
            },
            {
              "value": "6CF3F491A1342D68B01A33A4E11AB2E6BCCEF4AA4115DBAB5C75538FC7179695",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/language/walker/walkContext.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IEZpeCwgUnVsZUZhaWx1cmUgfSBmcm9tICIuLi9ydWxlL3J1bGUiOw0KDQpleHBvcnQgY2xhc3MgV2Fsa0NvbnRleHQ8VD4gew0KICAgIHB1YmxpYyByZWFkb25seSBmYWlsdXJlczogUnVsZUZhaWx1cmVbXSA9IFtdOw0KDQogICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIHB1YmxpYyByZWFkb25seSBydWxlTmFtZTogc3RyaW5nLCBwdWJsaWMgcmVhZG9ubHkgb3B0aW9uczogVCkge30NCg0KICAgIC8qKiBBZGQgYSBmYWlsdXJlIHdpdGggYW55IGFyYml0cmFyeSBzcGFuLiBQcmVmZXIgYGFkZEZhaWx1cmVBdE5vZGVgIGlmIHBvc3NpYmxlLiAqLw0KICAgIHB1YmxpYyBhZGRGYWlsdXJlQXQoc3RhcnQ6IG51bWJlciwgd2lkdGg6IG51bWJlciwgZmFpbHVyZTogc3RyaW5nLCBmaXg/OiBGaXgpIHsNCiAgICAgICAgdGhpcy5hZGRGYWlsdXJlKHN0YXJ0LCBzdGFydCArIHdpZHRoLCBmYWlsdXJlLCBmaXgpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhZGRGYWlsdXJlKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyLCBmYWlsdXJlOiBzdHJpbmcsIGZpeD86IEZpeCkgew0KICAgICAgICBjb25zdCBmaWxlTGVuZ3RoID0gdGhpcy5zb3VyY2VGaWxlLmVuZDsNCiAgICAgICAgdGhpcy5mYWlsdXJlcy5wdXNoKA0KICAgICAgICAgICAgbmV3IFJ1bGVGYWlsdXJlKHRoaXMuc291cmNlRmlsZSwgTWF0aC5taW4oc3RhcnQsIGZpbGVMZW5ndGgpLCBNYXRoLm1pbihlbmQsIGZpbGVMZW5ndGgpLCBmYWlsdXJlLCB0aGlzLnJ1bGVOYW1lLCBmaXgpLA0KICAgICAgICApOw0KICAgIH0NCg0KICAgIC8qKiBBZGQgYSBmYWlsdXJlIHVzaW5nIGEgbm9kZSdzIHNwYW4uICovDQogICAgcHVibGljIGFkZEZhaWx1cmVBdE5vZGUobm9kZTogdHMuTm9kZSwgZmFpbHVyZTogc3RyaW5nLCBmaXg/OiBGaXgpIHsNCiAgICAgICAgdGhpcy5hZGRGYWlsdXJlKG5vZGUuZ2V0U3RhcnQodGhpcy5zb3VyY2VGaWxlKSwgbm9kZS5nZXRFbmQoKSwgZmFpbHVyZSwgZml4KTsNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "FA5E2583E1A18E5E268BF921E7640487",
              "algorithm": "md5"
            },
            {
              "value": "DB52AAF30A42CC8A6D18EBA071FC9226F8630189",
              "algorithm": "sha-1"
            },
            {
              "value": "B615282DCAC5BC216ED90085794174A0FA7DAAA91D30C3DCB1299CB5146B9F1A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/linter.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "6589F5FF6AE1921FD90D41341DE847E3",
              "algorithm": "md5"
            },
            {
              "value": "BF84CA83652541710F5B173237D73A5E0BF6FB5A",
              "algorithm": "sha-1"
            },
            {
              "value": "F07CD918C99DD73E3784AE8DDBBCBE96B03DB517AE9D1D56F1697FCB8DDEE0AD",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/ruleLoader.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgZnMgZnJvbSAiZnMiOw0KaW1wb3J0ICogYXMgcGF0aCBmcm9tICJwYXRoIjsNCg0KaW1wb3J0IHsgRmF0YWxFcnJvciwgc2hvd1dhcm5pbmdPbmNlIH0gZnJvbSAiLi9lcnJvciI7DQppbXBvcnQgeyBJT3B0aW9ucywgSVJ1bGUsIFJ1bGVDb25zdHJ1Y3RvciB9IGZyb20gIi4vbGFuZ3VhZ2UvcnVsZS9ydWxlIjsNCmltcG9ydCB7IGFycmF5aWZ5LCBjYW1lbGl6ZSwgZGVkZW50LCBmaW5kIH0gZnJvbSAiLi91dGlscyI7DQoNCmNvbnN0IENPUkVfUlVMRVNfRElSRUNUT1JZID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgInJ1bGVzIik7DQpjb25zdCBjYWNoZWRSdWxlcyA9IG5ldyBNYXA8c3RyaW5nLCBSdWxlQ29uc3RydWN0b3IgfCAibm90LWZvdW5kIj4oKTsNCg0KZXhwb3J0IGZ1bmN0aW9uIGxvYWRSdWxlcyhydWxlT3B0aW9uc0xpc3Q6IElPcHRpb25zW10sDQogICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVzRGlyZWN0b3JpZXM/OiBzdHJpbmcgfCBzdHJpbmdbXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNKcyA9IGZhbHNlKTogSVJ1bGVbXSB7DQogICAgY29uc3QgcnVsZXM6IElSdWxlW10gPSBbXTsNCiAgICBjb25zdCBub3RGb3VuZFJ1bGVzOiBzdHJpbmdbXSA9IFtdOw0KICAgIGNvbnN0IG5vdEFsbG93ZWRJbkpzUnVsZXM6IHN0cmluZ1tdID0gW107DQoNCiAgICBmb3IgKGNvbnN0IHJ1bGVPcHRpb25zIG9mIHJ1bGVPcHRpb25zTGlzdCkgew0KICAgICAgICBpZiAocnVsZU9wdGlvbnMucnVsZVNldmVyaXR5ID09PSAib2ZmIikgew0KICAgICAgICAgICAgLy8gUGVyZjogZG9uJ3QgYm90aGVyIGZpbmRpbmcgdGhlIHJ1bGUgaWYgaXQncyBkaXNhYmxlZC4NCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlT3B0aW9ucy5ydWxlTmFtZTsNCiAgICAgICAgY29uc3QgUnVsZSA9IGZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlc0RpcmVjdG9yaWVzKTsNCiAgICAgICAgaWYgKFJ1bGUgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgbm90Rm91bmRSdWxlcy5wdXNoKHJ1bGVOYW1lKTsNCiAgICAgICAgfSBlbHNlIGlmIChpc0pzICYmIFJ1bGUubWV0YWRhdGEgIT09IHVuZGVmaW5lZCAmJiBSdWxlLm1ldGFkYXRhLnR5cGVzY3JpcHRPbmx5KSB7DQogICAgICAgICAgICBub3RBbGxvd2VkSW5Kc1J1bGVzLnB1c2gocnVsZU5hbWUpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgY29uc3QgcnVsZSA9IG5ldyBSdWxlKHJ1bGVPcHRpb25zKTsNCiAgICAgICAgICAgIGlmIChydWxlLmlzRW5hYmxlZCgpKSB7DQogICAgICAgICAgICAgICAgcnVsZXMucHVzaChydWxlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKFJ1bGUubWV0YWRhdGEgIT09IHVuZGVmaW5lZCAmJiBCb29sZWFuKFJ1bGUubWV0YWRhdGEuZGVwcmVjYXRpb25NZXNzYWdlKSkgew0KICAgICAgICAgICAgICAgIHNob3dXYXJuaW5nT25jZShgJHtSdWxlLm1ldGFkYXRhLnJ1bGVOYW1lfSBpcyBkZXByZWNhdGVkLiAke1J1bGUubWV0YWRhdGEuZGVwcmVjYXRpb25NZXNzYWdlfWApOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgaWYgKG5vdEZvdW5kUnVsZXMubGVuZ3RoID4gMCkgew0KICAgICAgICBjb25zdCB3YXJuaW5nID0gZGVkZW50YA0KICAgICAgICAgICAgQ291bGQgbm90IGZpbmQgaW1wbGVtZW50YXRpb25zIGZvciB0aGUgZm9sbG93aW5nIHJ1bGVzIHNwZWNpZmllZCBpbiB0aGUgY29uZmlndXJhdGlvbjoNCiAgICAgICAgICAgICAgICAke25vdEZvdW5kUnVsZXMuam9pbigiXG4gICAgICAgICAgICAgICAgIil9DQogICAgICAgICAgICBUcnkgdXBncmFkaW5nIFRTTGludCBhbmQvb3IgZW5zdXJpbmcgdGhhdCB5b3UgaGF2ZSBhbGwgbmVjZXNzYXJ5IGN1c3RvbSBydWxlcyBpbnN0YWxsZWQuDQogICAgICAgICAgICBJZiBUU0xpbnQgd2FzIHJlY2VudGx5IHVwZ3JhZGVkLCB5b3UgbWF5IGhhdmUgb2xkIHJ1bGVzIGNvbmZpZ3VyZWQgd2hpY2ggbmVlZCB0byBiZSBjbGVhbmVkIHVwLg0KICAgICAgICBgOw0KDQogICAgICAgIHNob3dXYXJuaW5nT25jZSh3YXJuaW5nKTsNCiAgICB9DQogICAgaWYgKG5vdEFsbG93ZWRJbkpzUnVsZXMubGVuZ3RoID4gMCkgew0KICAgICAgICBjb25zdCB3YXJuaW5nID0gZGVkZW50YA0KICAgICAgICAgICAgRm9sbG93aW5nIHJ1bGVzIHNwZWNpZmllZCBpbiBjb25maWd1cmF0aW9uIGNvdWxkbid0IGJlIGFwcGxpZWQgdG8gLmpzIG9yIC5qc3ggZmlsZXM6DQogICAgICAgICAgICAgICAgJHtub3RBbGxvd2VkSW5Kc1J1bGVzLmpvaW4oIlxuICAgICAgICAgICAgICAgICIpfQ0KICAgICAgICAgICAgTWFrZSBzdXJlIHRvIGV4Y2x1ZGUgdGhlbSBmcm9tICJqc1J1bGVzIiBzZWN0aW9uIG9mIHlvdXIgdHNsaW50Lmpzb24uDQogICAgICAgIGA7DQoNCiAgICAgICAgc2hvd1dhcm5pbmdPbmNlKHdhcm5pbmcpOw0KICAgIH0NCiAgICBpZiAocnVsZXMubGVuZ3RoID09PSAwKSB7DQogICAgICAgIGNvbnN0IGZpbGVUeXBlID0gaXNKcyA/ICJKYXZhU2NyaXB0IiA6ICJUeXBlU2NyaXB0IjsNCiAgICAgICAgc2hvd1dhcm5pbmdPbmNlKGBObyB2YWxpZCBydWxlcyBoYXZlIGJlZW4gc3BlY2lmaWVkIGZvciAke2ZpbGVUeXBlfSBmaWxlc2ApOw0KICAgIH0NCiAgICByZXR1cm4gcnVsZXM7DQp9DQoNCi8qKiBAaW50ZXJuYWwgcHJpdmF0ZSBBUEkgKi8NCmV4cG9ydCBmdW5jdGlvbiBmaW5kUnVsZShuYW1lOiBzdHJpbmcsIHJ1bGVzRGlyZWN0b3JpZXM/OiBzdHJpbmcgfCBzdHJpbmdbXSk6IFJ1bGVDb25zdHJ1Y3RvciB8IHVuZGVmaW5lZCB7DQogICAgY29uc3QgY2FtZWxpemVkTmFtZSA9IHRyYW5zZm9ybU5hbWUobmFtZSk7DQogICAgLy8gZmlyc3QgY2hlY2sgZm9yIGNvcmUgcnVsZXMNCiAgICBjb25zdCBSdWxlID0gbG9hZENhY2hlZFJ1bGUoQ09SRV9SVUxFU19ESVJFQ1RPUlksIGNhbWVsaXplZE5hbWUpOw0KICAgIHJldHVybiBSdWxlICE9PSB1bmRlZmluZWQgPyBSdWxlIDoNCiAgICAgICAgLy8gdGhlbiBjaGVjayBmb3IgcnVsZXMgd2l0aGluIHRoZSBmaXJzdCBsZXZlbCBvZiBydWxlc0RpcmVjdG9yeQ0KICAgICAgICBmaW5kKGFycmF5aWZ5KHJ1bGVzRGlyZWN0b3JpZXMpLCAoZGlyKSA9PiBsb2FkQ2FjaGVkUnVsZShkaXIsIGNhbWVsaXplZE5hbWUsIHRydWUpKTsNCn0NCg0KZnVuY3Rpb24gdHJhbnNmb3JtTmFtZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcgew0KICAgIC8vIGNhbWVsaXplIHN0cmlwcyBvdXQgbGVhZGluZyBhbmQgdHJhaWxpbmcgdW5kZXJzY29yZXMgYW5kIGRhc2hlcywgc28gbWFrZSBzdXJlIHRoZXkgYXJlbid0IHBhc3NlZCB0byBjYW1lbGl6ZQ0KICAgIC8vIHRoZSByZWdleCBtYXRjaGVzIHRoZSBncm91cHMgKGxlYWRpbmcgdW5kZXJzY29yZXMgYW5kIGRhc2hlcykob3RoZXIgY2hhcmFjdGVycykodHJhaWxpbmcgdW5kZXJzY29yZXMgYW5kIGRhc2hlcykNCiAgICBjb25zdCBuYW1lTWF0Y2ggPSBuYW1lLm1hdGNoKC9eKFstX10qKSguKj8pKFstX10qKSQvKTsNCiAgICBpZiAobmFtZU1hdGNoID09PSBudWxsKSB7DQogICAgICAgIHJldHVybiBgJHtuYW1lfVJ1bGVgOw0KICAgIH0NCiAgICByZXR1cm4gYCR7bmFtZU1hdGNoWzFdfSR7Y2FtZWxpemUobmFtZU1hdGNoWzJdKX0ke25hbWVNYXRjaFszXX1SdWxlYDsNCn0NCg0KLyoqDQogKiBAcGFyYW0gZGlyZWN0b3J5IC0gQW4gYWJzb2x1dGUgcGF0aCB0byBhIGRpcmVjdG9yeSBvZiBydWxlcw0KICogQHBhcmFtIHJ1bGVOYW1lIC0gQSBuYW1lIG9mIGEgcnVsZSBpbiBmaWxlbmFtZSBmb3JtYXQuIGV4KSAic29tZUxpbnRSdWxlIg0KICovDQpmdW5jdGlvbiBsb2FkUnVsZShkaXJlY3Rvcnk6IHN0cmluZywgcnVsZU5hbWU6IHN0cmluZyk6IFJ1bGVDb25zdHJ1Y3RvciB8ICJub3QtZm91bmQiIHsNCiAgICBsZXQgcnVsZUZ1bGxQYXRoOiBzdHJpbmc7DQogICAgdHJ5IHsNCiAgICAgICAgLy8gUmVzb2x2ZSB1c2luZyBub2RlJ3MgcGF0aCByZXNvbHV0aW9uIHRvIGFsbG93IGRldmVsb3BlcnMgdG8gd3JpdGUgY3VzdG9tIHJ1bGVzIGluIFR5cGVTY3JpcHQgd2hpY2ggY2FuIGJlIGxvYWRlZCBieSBUUy1Ob2RlDQogICAgICAgIHJ1bGVGdWxsUGF0aCA9IHJlcXVpcmUucmVzb2x2ZShwYXRoLmpvaW4oZGlyZWN0b3J5LCBydWxlTmFtZSkpOw0KICAgIH0gY2F0Y2ggew0KICAgICAgICByZXR1cm4gIm5vdC1mb3VuZCI7DQogICAgfQ0KICAgIHJldHVybiAocmVxdWlyZShydWxlRnVsbFBhdGgpIGFzIHsgUnVsZTogUnVsZUNvbnN0cnVjdG9yIH0pLlJ1bGU7DQp9DQoNCmZ1bmN0aW9uIGxvYWRDYWNoZWRSdWxlKGRpcmVjdG9yeTogc3RyaW5nLCBydWxlTmFtZTogc3RyaW5nLCBpc0N1c3RvbVBhdGg/OiBib29sZWFuKTogUnVsZUNvbnN0cnVjdG9yIHwgdW5kZWZpbmVkIHsNCiAgICAvLyB1c2UgY2FjaGVkIHZhbHVlIGlmIGF2YWlsYWJsZQ0KICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5qb2luKGRpcmVjdG9yeSwgcnVsZU5hbWUpOw0KICAgIGNvbnN0IGNhY2hlZFJ1bGUgPSBjYWNoZWRSdWxlcy5nZXQoZnVsbFBhdGgpOw0KICAgIGlmIChjYWNoZWRSdWxlICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgcmV0dXJuIGNhY2hlZFJ1bGUgPT09ICJub3QtZm91bmQiID8gdW5kZWZpbmVkIDogY2FjaGVkUnVsZTsNCiAgICB9DQoNCiAgICAvLyB0cmVhdCBkaXJlY3RvcnkgYXMgYSByZWxhdGl2ZSBwYXRoICh3aGljaCBuZWVkcyB0byBiZSByZXNvbHZlZCkgaWYgaXQncyBhIGN1c3RvbSBydWxlIGRpcmVjdG9yeQ0KICAgIGxldCBhYnNvbHV0ZVBhdGg6IHN0cmluZyA9IGRpcmVjdG9yeTsNCiAgICBpZiAoaXNDdXN0b21QYXRoKSB7DQogICAgICAgIGFic29sdXRlUGF0aCA9IHBhdGgucmVzb2x2ZShkaXJlY3RvcnkpOw0KICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoYWJzb2x1dGVQYXRoKSkgew0KICAgICAgICAgICAgdGhyb3cgbmV3IEZhdGFsRXJyb3IoYENvdWxkIG5vdCBmaW5kIGN1c3RvbSBydWxlIGRpcmVjdG9yeTogJHthYnNvbHV0ZVBhdGh9YCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBjb25zdCBSdWxlID0gbG9hZFJ1bGUoYWJzb2x1dGVQYXRoLCBydWxlTmFtZSk7DQoNCiAgICBjYWNoZWRSdWxlcy5zZXQoZnVsbFBhdGgsIFJ1bGUpOw0KICAgIHJldHVybiBSdWxlID09PSAibm90LWZvdW5kIiA/IHVuZGVmaW5lZCA6IFJ1bGU7DQp9DQo="
          },
          "hashes": [
            {
              "value": "0DFFAB8915E618D468B53EE7B43FF227",
              "algorithm": "md5"
            },
            {
              "value": "B7814C585F4F1A737129C7B1A019213886A59D38",
              "algorithm": "sha-1"
            },
            {
              "value": "92684B01108C95E1A0AE697DB1855E22A859A82F87374ECFCB7B67B73EE8CF30",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/adjacentOverloadSignaturesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJhZGphY2VudC1vdmVybG9hZC1zaWduYXR1cmVzIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJFbmZvcmNlcyBmdW5jdGlvbiBvdmVybG9hZHMgdG8gYmUgY29uc2VjdXRpdmUuIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICByYXRpb25hbGU6ICJJbXByb3ZlcyByZWFkYWJpbGl0eSBhbmQgb3JnYW5pemF0aW9uIGJ5IGdyb3VwaW5nIG5hdHVyYWxseSByZWxhdGVkIGl0ZW1zIHRvZ2V0aGVyLiIsDQogICAgICAgIHR5cGU6ICJ0eXBlc2NyaXB0IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyhuYW1lOiBzdHJpbmcpOiBzdHJpbmcgew0KICAgICAgICByZXR1cm4gYEFsbCAnJHtuYW1lfScgc2lnbmF0dXJlcyBzaG91bGQgYmUgYWRqYWNlbnRgOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsayk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPik6IHZvaWQgew0KICAgIGNvbnN0IHsgc291cmNlRmlsZSB9ID0gY3R4Ow0KICAgIHZpc2l0U3RhdGVtZW50cyhzb3VyY2VGaWxlLnN0YXRlbWVudHMpOw0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZTogdHMuTm9kZSk6IHZvaWQgew0KICAgICAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1vZHVsZUJsb2NrOg0KICAgICAgICAgICAgICAgIHZpc2l0U3RhdGVtZW50cygobm9kZSBhcyB0cy5Nb2R1bGVCbG9jaykuc3RhdGVtZW50cyk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5JbnRlcmZhY2VEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5DbGFzc0RlY2xhcmF0aW9uOg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlR5cGVMaXRlcmFsOiB7DQogICAgICAgICAgICAgICAgY29uc3QgeyBtZW1iZXJzIH0gPSBub2RlIGFzIHRzLkludGVyZmFjZURlY2xhcmF0aW9uIHwgdHMuQ2xhc3NEZWNsYXJhdGlvbiB8IHRzLlR5cGVMaXRlcmFsTm9kZTsNCiAgICAgICAgICAgICAgICBhZGRGYWlsdXJlcyhnZXRNaXNwbGFjZWRPdmVybG9hZHM8dHMuVHlwZUVsZW1lbnQgfCB0cy5DbGFzc0VsZW1lbnQ+KG1lbWJlcnMsIChtZW1iZXIpID0+DQogICAgICAgICAgICAgICAgICAgIHV0aWxzLmlzU2lnbmF0dXJlRGVjbGFyYXRpb24obWVtYmVyKSA/IGdldE92ZXJsb2FkS2V5KG1lbWJlcikgOiB1bmRlZmluZWQpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KDQogICAgZnVuY3Rpb24gdmlzaXRTdGF0ZW1lbnRzKHN0YXRlbWVudHM6IFJlYWRvbmx5QXJyYXk8dHMuU3RhdGVtZW50Pik6IHZvaWQgew0KICAgICAgICBhZGRGYWlsdXJlcyhnZXRNaXNwbGFjZWRPdmVybG9hZHMoc3RhdGVtZW50cywgKHN0YXRlbWVudCkgPT4NCiAgICAgICAgICAgIHV0aWxzLmlzRnVuY3Rpb25EZWNsYXJhdGlvbihzdGF0ZW1lbnQpICYmIHN0YXRlbWVudC5uYW1lICE9PSB1bmRlZmluZWQgPyBzdGF0ZW1lbnQubmFtZS50ZXh0IDogdW5kZWZpbmVkKSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gYWRkRmFpbHVyZXMobWlzcGxhY2VkT3ZlcmxvYWRzOiBSZWFkb25seUFycmF5PHRzLlNpZ25hdHVyZURlY2xhcmF0aW9uPik6IHZvaWQgew0KICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgbWlzcGxhY2VkT3ZlcmxvYWRzKSB7DQogICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HKHByaW50T3ZlcmxvYWQobm9kZSkpKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KLyoqICdnZXRPdmVybG9hZE5hbWUnIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciBub2RlcyB0aGF0IGNhbm5vdCBiZSBvdmVybG9hZHMsIGUuZy4gYSBgY29uc3RgIGRlY2xhcmF0aW9uLiAqLw0KZnVuY3Rpb24gZ2V0TWlzcGxhY2VkT3ZlcmxvYWRzPFQgZXh0ZW5kcyB0cy5Ob2RlPigNCiAgICBvdmVybG9hZHM6IFJlYWRvbmx5QXJyYXk8VD4sDQogICAgZ2V0S2V5OiAobm9kZTogVCkgPT4gc3RyaW5nIHwgdW5kZWZpbmVkKTogdHMuU2lnbmF0dXJlRGVjbGFyYXRpb25bXSB7DQogICAgY29uc3QgcmVzdWx0OiB0cy5TaWduYXR1cmVEZWNsYXJhdGlvbltdID0gW107DQogICAgbGV0IGxhc3RLZXk6IHN0cmluZyB8IHVuZGVmaW5lZDsNCiAgICBjb25zdCBzZWVuID0gbmV3IFNldDxzdHJpbmc+KCk7DQogICAgZm9yIChjb25zdCBub2RlIG9mIG92ZXJsb2Fkcykgew0KICAgICAgICBpZiAobm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLlNlbWljb2xvbkNsYXNzRWxlbWVudCkgew0KICAgICAgICAgICAgY29udGludWU7DQogICAgICAgIH0NCg0KICAgICAgICBjb25zdCBrZXkgPSBnZXRLZXkobm9kZSk7DQogICAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgaWYgKHNlZW4uaGFzKGtleSkgJiYgbGFzdEtleSAhPT0ga2V5KSB7DQogICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZSBhcyBhbnkgYXMgdHMuU2lnbmF0dXJlRGVjbGFyYXRpb24pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgc2Vlbi5hZGQoa2V5KTsNCiAgICAgICAgICAgIGxhc3RLZXkgPSBrZXk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBsYXN0S2V5ID0gdW5kZWZpbmVkOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiByZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaW50T3ZlcmxvYWQobm9kZTogdHMuU2lnbmF0dXJlRGVjbGFyYXRpb24pOiBzdHJpbmcgew0KICAgIGNvbnN0IGluZm8gPSBnZXRPdmVybG9hZEluZm8obm9kZSk7DQogICAgcmV0dXJuIHR5cGVvZiBpbmZvID09PSAic3RyaW5nIiA/IGluZm8gOiBpbmZvID09PSB1bmRlZmluZWQgPyAiPHVua25vd24+IiA6IGluZm8ubmFtZTsNCn0NCg0KZXhwb3J0IGZ1bmN0aW9uIGdldE92ZXJsb2FkS2V5KG5vZGU6IHRzLlNpZ25hdHVyZURlY2xhcmF0aW9uKTogc3RyaW5nIHwgdW5kZWZpbmVkIHsNCiAgICBjb25zdCBpbmZvID0gZ2V0T3ZlcmxvYWRJbmZvKG5vZGUpOw0KICAgIGlmIChpbmZvID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQoNCiAgICBjb25zdCBbY29tcHV0ZWQsIG5hbWVdID0gdHlwZW9mIGluZm8gPT09ICJzdHJpbmciID8gW2ZhbHNlLCBpbmZvXSA6IFtpbmZvLmNvbXB1dGVkLCBpbmZvLm5hbWVdOw0KICAgIGNvbnN0IGlzU3RhdGljID0gdXRpbHMuaGFzTW9kaWZpZXIobm9kZS5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuU3RhdGljS2V5d29yZCk7DQogICAgcmV0dXJuIChjb21wdXRlZCA/ICIwIiA6ICIxIikgKyAoaXNTdGF0aWMgPyAiMCIgOiAiMSIpICsgbmFtZTsNCn0NCg0KZnVuY3Rpb24gZ2V0T3ZlcmxvYWRJbmZvKG5vZGU6IHRzLlNpZ25hdHVyZURlY2xhcmF0aW9uKTogc3RyaW5nIHwgeyBuYW1lOiBzdHJpbmc7IGNvbXB1dGVkPzogYm9vbGVhbiB9IHwgdW5kZWZpbmVkIHsNCiAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ29uc3RydWN0U2lnbmF0dXJlOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ29uc3RydWN0b3I6DQogICAgICAgICAgICByZXR1cm4gImNvbnN0cnVjdG9yIjsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNhbGxTaWduYXR1cmU6DQogICAgICAgICAgICByZXR1cm4gIigpIjsNCiAgICAgICAgZGVmYXVsdDogew0KICAgICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBub2RlOw0KICAgICAgICAgICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHN3aXRjaCAobmFtZS5raW5kKSB7DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLklkZW50aWZpZXI6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lLnRleHQ7DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNvbXB1dGVkUHJvcGVydHlOYW1lOg0KICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGV4cHJlc3Npb24gfSA9IG5hbWU7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlscy5pc0xpdGVyYWxFeHByZXNzaW9uKGV4cHJlc3Npb24pID8gZXhwcmVzc2lvbi50ZXh0IDogeyBuYW1lOiBleHByZXNzaW9uLmdldFRleHQoKSwgY29tcHV0ZWQ6IHRydWUgfTsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbHMuaXNMaXRlcmFsRXhwcmVzc2lvbihuYW1lKSA/IG5hbWUudGV4dCA6IHVuZGVmaW5lZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "9468ADDF2B44BD98488E74E0E4B7791A",
              "algorithm": "md5"
            },
            {
              "value": "8CC1225447CDB504BCAC9189F379372AE535557D",
              "algorithm": "sha-1"
            },
            {
              "value": "EE4D256B033C999D6E6DF2A23EF85234953CCAAA56B5F782DA6C94488BF1E03F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/alignRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "FEE9F1E6BC2F1C156DDE2A711C062D0C",
              "algorithm": "md5"
            },
            {
              "value": "019AB7ED47E9561695D7B4B64EEB43710ECAE743",
              "algorithm": "sha-1"
            },
            {
              "value": "A389744B4264E78804EB8CF87E51661C3F7F1923970DA87F1E3E953B6F05E2EA",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/arrayTypeRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "48B9ED1A299CAA0A7D28B92BF12B59F6",
              "algorithm": "md5"
            },
            {
              "value": "761503750EEBBAE1DAE81A87DCC3413A18DFD169",
              "algorithm": "sha-1"
            },
            {
              "value": "D4A09B64367843FB44E449B2B5CD794C5EC0BEBA061BA3E5311298DDE4C451DF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/arrowParensRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0Q2hpbGRPZktpbmQsIGlzQXJyb3dGdW5jdGlvbiB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpjb25zdCBCQU5fU0lOR0xFX0FSR19QQVJFTlMgPSAiYmFuLXNpbmdsZS1hcmctcGFyZW5zIjsNCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIGJhblNpbmdsZUFyZ1BhcmVuczogYm9vbGVhbjsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImFycm93LXBhcmVucyIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiUmVxdWlyZXMgcGFyZW50aGVzZXMgYXJvdW5kIHRoZSBwYXJhbWV0ZXJzIG9mIGFycm93IGZ1bmN0aW9uIGRlZmluaXRpb25zLiIsDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICAgICAgcmF0aW9uYWxlOiAiTWFpbnRhaW5zIHN0eWxpc3RpYyBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGFycm93IGZ1bmN0aW9uIGRlZmluaXRpb25zLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBJZiBcYCR7QkFOX1NJTkdMRV9BUkdfUEFSRU5TfVxgIGlzIHNwZWNpZmllZCwgdGhlbiBhcnJvdyBmdW5jdGlvbnMgd2l0aCBvbmUgcGFyYW1ldGVyDQogICAgICAgICAgICBtdXN0IG5vdCBoYXZlIHBhcmVudGhlc2VzIGlmIHJlbW92aW5nIHRoZW0gaXMgYWxsb3dlZCBieSBUeXBlU2NyaXB0LmAsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgZW51bTogW0JBTl9TSU5HTEVfQVJHX1BBUkVOU10sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZSwgW3RydWUsIEJBTl9TSU5HTEVfQVJHX1BBUkVOU11dLA0KICAgICAgICB0eXBlOiAic3R5bGUiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19NSVNTSU5HID0gIlBhcmVudGhlc2VzIGFyZSByZXF1aXJlZCBhcm91bmQgdGhlIHBhcmFtZXRlcnMgb2YgYW4gYXJyb3cgZnVuY3Rpb24gZGVmaW5pdGlvbiI7DQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19FWElTVFMgPSAiUGFyZW50aGVzZXMgYXJlIHByb2hpYml0ZWQgYXJvdW5kIHRoZSBwYXJhbWV0ZXIgaW4gdGhpcyBzaW5nbGUgcGFyYW1ldGVyIGFycm93IGZ1bmN0aW9uIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsaywgew0KICAgICAgICAgICAgYmFuU2luZ2xlQXJnUGFyZW5zOiB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihCQU5fU0lOR0xFX0FSR19QQVJFTlMpICE9PSAtMSwNCiAgICAgICAgfSk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDxPcHRpb25zPikgew0KICAgIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzQXJyb3dGdW5jdGlvbihub2RlKSAmJiBwYXJlbnNBcmVPcHRpb25hbChub2RlKSkgew0KICAgICAgICAgICAgY29uc3Qgb3BlblBhcmVuID0gZ2V0Q2hpbGRPZktpbmQobm9kZSwgdHMuU3ludGF4S2luZC5PcGVuUGFyZW5Ub2tlbik7DQogICAgICAgICAgICBpZiAob3BlblBhcmVuID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICBpZiAoIWN0eC5vcHRpb25zLmJhblNpbmdsZUFyZ1BhcmVucykgew0KICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXIgPSBub2RlLnBhcmFtZXRlcnNbMF07DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gcGFyYW1ldGVyLmdldFN0YXJ0KGN0eC5zb3VyY2VGaWxlKTsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gcGFyYW1ldGVyLmVuZDsNCiAgICAgICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmUoc3RhcnQsIGVuZCwgUnVsZS5GQUlMVVJFX1NUUklOR19NSVNTSU5HLCBbDQogICAgICAgICAgICAgICAgICAgICAgICBMaW50LlJlcGxhY2VtZW50LmFwcGVuZFRleHQoc3RhcnQsICIoIiksDQogICAgICAgICAgICAgICAgICAgICAgICBMaW50LlJlcGxhY2VtZW50LmFwcGVuZFRleHQoZW5kLCAiKSIpLA0KICAgICAgICAgICAgICAgICAgICBdKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGVsc2UgaWYgKGN0eC5vcHRpb25zLmJhblNpbmdsZUFyZ1BhcmVucykgew0KICAgICAgICAgICAgICAgIGNvbnN0IGNsb3NlUGFyZW4gPSBnZXRDaGlsZE9mS2luZChub2RlLCB0cy5TeW50YXhLaW5kLkNsb3NlUGFyZW5Ub2tlbikhOw0KICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJCZWZvcmVPcGVuUGFyZW4gPSBjdHguc291cmNlRmlsZS50ZXh0LnN1YnN0cmluZyhvcGVuUGFyZW4ucG9zIC0gMSwgb3BlblBhcmVuLnBvcyk7DQogICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZVZhbHVlID0gY2hhckJlZm9yZU9wZW5QYXJlbi5tYXRjaCgvW2Etel0vaSkgIT09IG51bGwgPyAiICIgOiAiIjsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLnBhcmFtZXRlcnNbMF0sIFJ1bGUuRkFJTFVSRV9TVFJJTkdfRVhJU1RTLCBbDQogICAgICAgICAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQucmVwbGFjZUZyb21UbyhvcGVuUGFyZW4ucG9zLCBub2RlLnBhcmFtZXRlcnNbMF0uZ2V0U3RhcnQoY3R4LnNvdXJjZUZpbGUpLCByZXBsYWNlVmFsdWUpLA0KICAgICAgICAgICAgICAgICAgICBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZUZyb21Ubyhub2RlLnBhcmFtZXRlcnNbMF0uZW5kLCBjbG9zZVBhcmVuLmVuZCksDQogICAgICAgICAgICAgICAgXSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfQ0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGNiKTsNCn0NCg0KZnVuY3Rpb24gcGFyZW5zQXJlT3B0aW9uYWwobm9kZTogdHMuQXJyb3dGdW5jdGlvbikgew0KICAgIHJldHVybiBub2RlLnBhcmFtZXRlcnMubGVuZ3RoID09PSAxICYmDQogICAgICAgIG5vZGUudHlwZVBhcmFtZXRlcnMgPT09IHVuZGVmaW5lZCAmJg0KICAgICAgICBub2RlLnR5cGUgPT09IHVuZGVmaW5lZCAmJg0KICAgICAgICBpc1NpbXBsZVBhcmFtZXRlcihub2RlLnBhcmFtZXRlcnNbMF0pOw0KfQ0KDQpmdW5jdGlvbiBpc1NpbXBsZVBhcmFtZXRlcihwYXJhbWV0ZXI6IHRzLlBhcmFtZXRlckRlY2xhcmF0aW9uKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIHBhcmFtZXRlci5uYW1lLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSWRlbnRpZmllcg0KICAgICAgICAmJiBwYXJhbWV0ZXIuZG90RG90RG90VG9rZW4gPT09IHVuZGVmaW5lZA0KICAgICAgICAmJiBwYXJhbWV0ZXIuaW5pdGlhbGl6ZXIgPT09IHVuZGVmaW5lZA0KICAgICAgICAmJiBwYXJhbWV0ZXIucXVlc3Rpb25Ub2tlbiA9PT0gdW5kZWZpbmVkDQogICAgICAgICYmIHBhcmFtZXRlci50eXBlID09PSB1bmRlZmluZWQ7DQp9DQo="
          },
          "hashes": [
            {
              "value": "16DC36A593BE13ED6F5ED8A75BBB5628",
              "algorithm": "md5"
            },
            {
              "value": "80A47115B2EE8869D9C1423E79DC6C88C2B457E5",
              "algorithm": "sha-1"
            },
            {
              "value": "120D98FA26AA138B594F61673882576C97DE818FF35FB50028E3FC3C59989839",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/arrowReturnShorthandRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQppbXBvcnQgeyBoYXNDb21tZW50QWZ0ZXJQb3NpdGlvbiB9IGZyb20gIi4uL2xhbmd1YWdlL3V0aWxzIjsNCmltcG9ydCB7IGNvZGVFeGFtcGxlcyB9IGZyb20gIi4vY29kZS1leGFtcGxlcy9hcnJvd1JldHVyblNob3J0aGFuZC5leGFtcGxlcyI7DQoNCmNvbnN0IE9QVElPTl9NVUxUSUxJTkUgPSAibXVsdGlsaW5lIjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImFycm93LXJldHVybi1zaG9ydGhhbmQiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIlN1Z2dlc3RzIHRvIGNvbnZlcnQgYCgpID0+IHsgcmV0dXJuIHg7IH1gIHRvIGAoKSA9PiB4YC4iLA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBJZiBcYCR7T1BUSU9OX01VTFRJTElORX1cYCBpcyBzcGVjaWZpZWQsIHRoZW4gdGhpcyB3aWxsIHdhcm4gZXZlbiBpZiB0aGUgZnVuY3Rpb24gc3BhbnMgbXVsdGlwbGUgbGluZXMuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICBlbnVtOiBbT1BUSU9OX01VTFRJTElORV0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbDQogICAgICAgICAgICB0cnVlLA0KICAgICAgICAgICAgW3RydWUsIE9QVElPTl9NVUxUSUxJTkVdLA0KICAgICAgICBdLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgSXQncyB1bm5lY2Vzc2FyeSB0byBpbmNsdWRlIFxgcmV0dXJuXGAgYW5kIFxge31cYCBicmFja2V0cyBpbiBhcnJvdyBsYW1iZGFzLg0KICAgICAgICAgICAgTGVhdmluZyB0aGVtIG91dCByZXN1bHRzIGluIHNpbXBsZXIgYW5kIGVhc2llciB0byByZWFkIGNvZGUuDQogICAgICAgIGAsDQogICAgICAgIHR5cGU6ICJzdHlsZSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICAgICAgY29kZUV4YW1wbGVzLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcoaXNPYmplY3RMaXRlcmFsOiBib29sZWFuKTogc3RyaW5nIHsNCiAgICAgICAgY29uc3Qgc3RhcnQgPSAiVGhpcyBhcnJvdyBmdW5jdGlvbiBib2R5IGNhbiBiZSBzaW1wbGlmaWVkIGJ5IG9taXR0aW5nIHRoZSBjdXJseSBicmFjZXMgYW5kIHRoZSBrZXl3b3JkICdyZXR1cm4nIjsNCiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgKGlzT2JqZWN0TGl0ZXJhbCA/ICIsIGFuZCB3cmFwcGluZyB0aGUgb2JqZWN0IGxpdGVyYWwgaW4gcGFyZW50aGVzZXMuIiA6ICIuIik7DQogICAgfQ0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB7IG11bHRpbGluZTogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX01VTFRJTElORSkgIT09IC0xIH0pOw0KICAgIH0NCn0NCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIG11bHRpbGluZTogYm9vbGVhbjsNCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8T3B0aW9ucz4pOiB2b2lkIHsNCiAgICBjb25zdCB7IHNvdXJjZUZpbGUsIG9wdGlvbnM6IHsgbXVsdGlsaW5lIH0gfSA9IGN0eDsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKHV0aWxzLmlzQXJyb3dGdW5jdGlvbihub2RlKSAmJiB1dGlscy5pc0Jsb2NrKG5vZGUuYm9keSkpIHsNCiAgICAgICAgICAgIGNvbnN0IGV4cHIgPSBnZXRTaW1wbGVSZXR1cm5FeHByZXNzaW9uKG5vZGUuYm9keSk7DQogICAgICAgICAgICBpZiAoZXhwciAhPT0gdW5kZWZpbmVkICYmIChtdWx0aWxpbmUgfHwgdXRpbHMuaXNTYW1lTGluZShzb3VyY2VGaWxlLCBub2RlLmJvZHkuZ2V0U3RhcnQoc291cmNlRmlsZSksIG5vZGUuYm9keS5lbmQpKSkgew0KICAgICAgICAgICAgICAgIGNvbnN0IGlzT2JqZWN0TGl0ZXJhbCA9IGV4cHIua2luZCA9PT0gdHMuU3ludGF4S2luZC5PYmplY3RMaXRlcmFsRXhwcmVzc2lvbjsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLmJvZHksIFJ1bGUuRkFJTFVSRV9TVFJJTkcoaXNPYmplY3RMaXRlcmFsKSwgY3JlYXRlRml4KG5vZGUsIG5vZGUuYm9keSwgZXhwciwgc291cmNlRmlsZS50ZXh0KSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQoNCmZ1bmN0aW9uIGNyZWF0ZUZpeChhcnJvd0Z1bmN0aW9uOiB0cy5GdW5jdGlvbkxpa2VEZWNsYXJhdGlvbiwgYm9keTogdHMuQmxvY2ssIGV4cHI6IHRzLkV4cHJlc3Npb24sIHRleHQ6IHN0cmluZyk6IExpbnQuRml4IHwgdW5kZWZpbmVkIHsNCiAgICBjb25zdCBzdGF0ZW1lbnQgPSBleHByLnBhcmVudCE7DQogICAgY29uc3QgcmV0dXJuS2V5d29yZCA9IHV0aWxzLmdldENoaWxkT2ZLaW5kKHN0YXRlbWVudCwgdHMuU3ludGF4S2luZC5SZXR1cm5LZXl3b3JkKSE7DQogICAgY29uc3QgYXJyb3cgPSB1dGlscy5nZXRDaGlsZE9mS2luZChhcnJvd0Z1bmN0aW9uLCB0cy5TeW50YXhLaW5kLkVxdWFsc0dyZWF0ZXJUaGFuVG9rZW4pITsNCiAgICBjb25zdCBvcGVuQnJhY2UgPSB1dGlscy5nZXRDaGlsZE9mS2luZChib2R5LCB0cy5TeW50YXhLaW5kLk9wZW5CcmFjZVRva2VuKSE7DQogICAgY29uc3QgY2xvc2VCcmFjZSA9IHV0aWxzLmdldENoaWxkT2ZLaW5kKGJvZHksIHRzLlN5bnRheEtpbmQuQ2xvc2VCcmFjZVRva2VuKSE7DQogICAgY29uc3Qgc2VtaWNvbG9uID0gdXRpbHMuZ2V0Q2hpbGRPZktpbmQoc3RhdGVtZW50LCB0cy5TeW50YXhLaW5kLlNlbWljb2xvblRva2VuKTsNCg0KICAgIGNvbnN0IGFueUNvbW1lbnRzID0gaGFzQ29tbWVudHMoYXJyb3cpIHx8IGhhc0NvbW1lbnRzKG9wZW5CcmFjZSkgfHwgaGFzQ29tbWVudHMoc3RhdGVtZW50KSB8fCBoYXNDb21tZW50cyhyZXR1cm5LZXl3b3JkKSB8fA0KICAgICAgICBoYXNDb21tZW50cyhleHByKSB8fCAoc2VtaWNvbG9uICE9PSB1bmRlZmluZWQgJiYgaGFzQ29tbWVudHMoc2VtaWNvbG9uKSkgfHwgaGFzQ29tbWVudHMoY2xvc2VCcmFjZSk7DQogICAgcmV0dXJuIGFueUNvbW1lbnRzID8gdW5kZWZpbmVkIDogWw0KICAgICAgICAvLyBPYmplY3QgbGl0ZXJhbCBtdXN0IGJlIHdyYXBwZWQgaW4gYCgpYA0KICAgICAgICAuLi4oZXhwci5raW5kID09PSB0cy5TeW50YXhLaW5kLk9iamVjdExpdGVyYWxFeHByZXNzaW9uID8gWw0KICAgICAgICAgICAgTGludC5SZXBsYWNlbWVudC5hcHBlbmRUZXh0KGV4cHIuZ2V0U3RhcnQoKSwgIigiKSwNCiAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQuYXBwZW5kVGV4dChleHByLmdldEVuZCgpLCAiKSIpLA0KICAgICAgICBdIDogW10pLA0KICAgICAgICAvLyAiIHsiDQogICAgICAgIExpbnQuUmVwbGFjZW1lbnQuZGVsZXRlRnJvbVRvKGFycm93LmVuZCwgb3BlbkJyYWNlLmVuZCksDQogICAgICAgIC8vICJyZXR1cm4gIg0KICAgICAgICBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZUZyb21UbyhzdGF0ZW1lbnQuZ2V0U3RhcnQoKSwgZXhwci5nZXRTdGFydCgpKSwNCiAgICAgICAgLy8gIiB9IiAobWF5IGluY2x1ZGUgc2VtaWNvbG9uKQ0KICAgICAgICBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZUZyb21UbyhleHByLmVuZCwgY2xvc2VCcmFjZS5lbmQpLA0KICAgIF07DQoNCiAgICBmdW5jdGlvbiBoYXNDb21tZW50cyhub2RlOiB0cy5Ob2RlKTogYm9vbGVhbiB7DQogICAgICAgIHJldHVybiBoYXNDb21tZW50QWZ0ZXJQb3NpdGlvbih0ZXh0LCBub2RlLmdldEVuZCgpKTsNCiAgICB9DQp9DQoNCi8qKiBHaXZlbiBgeyByZXR1cm4geDsgfWAsIHJldHVybiBgeGAuICovDQpmdW5jdGlvbiBnZXRTaW1wbGVSZXR1cm5FeHByZXNzaW9uKGJsb2NrOiB0cy5CbG9jayk6IHRzLkV4cHJlc3Npb24gfCB1bmRlZmluZWQgew0KICAgIHJldHVybiBibG9jay5zdGF0ZW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBibG9jay5zdGF0ZW1lbnRzWzBdLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuUmV0dXJuU3RhdGVtZW50DQogICAgICAgID8gKGJsb2NrLnN0YXRlbWVudHNbMF0gYXMgdHMuUmV0dXJuU3RhdGVtZW50KS5leHByZXNzaW9uDQogICAgICAgIDogdW5kZWZpbmVkOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "9902EFE9C1E423FF9407E5000DFCFE18",
              "algorithm": "md5"
            },
            {
              "value": "F0500195A150B8073FB43892BC216C028A6F4589",
              "algorithm": "sha-1"
            },
            {
              "value": "7BFD955B0CB917AFA5AC37DEE1A8EC22B2ECFF4BF868286F291B158BB1FE3F91",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/awaitPromiseRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNBd2FpdEV4cHJlc3Npb24sIGlzRm9yT2ZTdGF0ZW1lbnQsIGlzVHlwZUZsYWdTZXQsIGlzVHlwZVJlZmVyZW5jZSwgaXNVbmlvbk9ySW50ZXJzZWN0aW9uVHlwZSB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLlR5cGVkUnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImF3YWl0LXByb21pc2UiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIldhcm5zIGZvciBhbiBhd2FpdGVkIHZhbHVlIHRoYXQgaXMgbm90IGEgUHJvbWlzZS4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgQSBsaXN0IG9mICdzdHJpbmcnIG5hbWVzIG9mIGFueSBhZGRpdGlvbmFsIGNsYXNzZXMgdGhhdCBzaG91bGQgYWxzbyBiZSB0cmVhdGVkIGFzIFByb21pc2VzLg0KICAgICAgICAgICAgRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgdXNpbmcgYSBjbGFzcyBjYWxsZWQgJ0Z1dHVyZScgdGhhdCBpbXBsZW1lbnRzIHRoZSBUaGVuYWJsZSBpbnRlcmZhY2UsDQogICAgICAgICAgICB5b3UgbWlnaHQgdGVsbCB0aGUgcnVsZSB0byBjb25zaWRlciB0eXBlIHJlZmVyZW5jZXMgd2l0aCB0aGUgbmFtZSAnRnV0dXJlJyBhcyB2YWxpZCBQcm9taXNlLWxpa2UNCiAgICAgICAgICAgIHR5cGVzLiBOb3RlIHRoYXQgdGhpcyBydWxlIGRvZXNuJ3QgY2hlY2sgZm9yIHR5cGUgYXNzaWduYWJpbGl0eSBvciBjb21wYXRpYmlsaXR5OyBpdCBqdXN0IGNoZWNrcw0KICAgICAgICAgICAgdHlwZSByZWZlcmVuY2UgbmFtZXMuDQogICAgICAgIGAsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJsaXN0IiwNCiAgICAgICAgICAgIGxpc3RUeXBlOiB7DQogICAgICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgICAgICBpdGVtczoge3R5cGU6ICJzdHJpbmcifSwNCiAgICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZSwgW3RydWUsICJUaGVuYWJsZSJdXSwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIFdoaWxlIGl0IGlzIHZhbGlkIEphdmFTY3JpcHQgdG8gYXdhaXQgYSBub24tUHJvbWlzZS1saWtlIHZhbHVlIChpdCB3aWxsIHJlc29sdmUgaW1tZWRpYXRlbHkpLA0KICAgICAgICAgICAgdGhpcyBwYXR0ZXJuIGlzIG9mdGVuIGEgcHJvZ3JhbW1lciBlcnJvciBhbmQgdGhlIHJlc3VsdGluZyBzZW1hbnRpY3MgY2FuIGJlIHVuaW50dWl0aXZlLg0KDQogICAgICAgICAgICBBd2FpdGluZyBub24tUHJvbWlzZS1saWtlIHZhbHVlcyBvZnRlbiBpcyBhbiBpbmRpY2F0aW9uIG9mIHByb2dyYW1tZXIgZXJyb3IsIHN1Y2ggYXMNCiAgICAgICAgICAgIGZvcmdldHRpbmcgdG8gYWRkIHBhcmVudGhlc2lzIHRvIGNhbGwgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBQcm9taXNlLg0KICAgICAgICBgLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgICAgICByZXF1aXJlc1R5cGVJbmZvOiB0cnVlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiSW52YWxpZCAnYXdhaXQnIG9mIGEgbm9uLVByb21pc2UgdmFsdWUuIjsNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfRk9SX0FXQUlUX09GID0gIkludmFsaWQgJ2Zvci1hd2FpdC1vZicgb2YgYSBub24tQXN5bmNJdGVyYWJsZSB2YWx1ZS4iOw0KDQogICAgcHVibGljIGFwcGx5V2l0aFByb2dyYW0oc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwgcHJvZ3JhbTogdHMuUHJvZ3JhbSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIGNvbnN0IHByb21pc2VUeXBlcyA9IG5ldyBTZXQoWyJQcm9taXNlIiwgLi4udGhpcy5ydWxlQXJndW1lbnRzIGFzIHN0cmluZ1tdXSk7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHByb21pc2VUeXBlcywgcHJvZ3JhbS5nZXRUeXBlQ2hlY2tlcigpKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PFNldDxzdHJpbmc+PiwgdGM6IHRzLlR5cGVDaGVja2VyKSB7DQogICAgY29uc3QgcHJvbWlzZVR5cGVzID0gY3R4Lm9wdGlvbnM7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgY2IpOw0KDQogICAgZnVuY3Rpb24gY2Iobm9kZTogdHMuTm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAoaXNBd2FpdEV4cHJlc3Npb24obm9kZSkgJiYgIWNvbnRhaW5zVHlwZSh0Yy5nZXRUeXBlQXRMb2NhdGlvbihub2RlLmV4cHJlc3Npb24pLCBpc1Byb21pc2VUeXBlKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0gZWxzZSBpZiAoaXNGb3JPZlN0YXRlbWVudChub2RlKSAmJiBub2RlLmF3YWl0TW9kaWZpZXIgIT09IHVuZGVmaW5lZCAmJg0KICAgICAgICAgICAgICAgICAgICFjb250YWluc1R5cGUodGMuZ2V0VHlwZUF0TG9jYXRpb24obm9kZS5leHByZXNzaW9uKSwgaXNBc3luY0l0ZXJhYmxlKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZS5leHByZXNzaW9uLCBSdWxlLkZBSUxVUkVfRk9SX0FXQUlUX09GKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBpc1Byb21pc2VUeXBlKG5hbWU6IHN0cmluZykgew0KICAgICAgICByZXR1cm4gcHJvbWlzZVR5cGVzLmhhcyhuYW1lKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGNvbnRhaW5zVHlwZSh0eXBlOiB0cy5UeXBlLCBwcmVkaWNhdGU6IChuYW1lOiBzdHJpbmcpID0+IGJvb2xlYW4pOiBib29sZWFuIHsNCiAgICBpZiAoaXNUeXBlRmxhZ1NldCh0eXBlLCB0cy5UeXBlRmxhZ3MuQW55KSkgew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgaWYgKGlzVHlwZVJlZmVyZW5jZSh0eXBlKSkgew0KICAgICAgICB0eXBlID0gdHlwZS50YXJnZXQ7DQogICAgfQ0KICAgIGlmICh0eXBlLnN5bWJvbCAhPT0gdW5kZWZpbmVkICYmIHByZWRpY2F0ZSh0eXBlLnN5bWJvbC5uYW1lKSkgew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgaWYgKGlzVW5pb25PckludGVyc2VjdGlvblR5cGUodHlwZSkpIHsNCiAgICAgICAgcmV0dXJuIHR5cGUudHlwZXMuc29tZSgodCkgPT4gY29udGFpbnNUeXBlKHQsIHByZWRpY2F0ZSkpOw0KICAgIH0NCiAgICBjb25zdCBiYXNlcyA9IHR5cGUuZ2V0QmFzZVR5cGVzKCk7DQogICAgcmV0dXJuIGJhc2VzICE9PSB1bmRlZmluZWQgJiYgYmFzZXMuc29tZSgodCkgPT4gY29udGFpbnNUeXBlKHQsIHByZWRpY2F0ZSkpOw0KfQ0KDQpmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUobmFtZTogc3RyaW5nKSB7DQogICAgcmV0dXJuIG5hbWUgPT09ICJBc3luY0l0ZXJhYmxlIiB8fCBuYW1lID09PSAiQXN5bmNJdGVyYWJsZUl0ZXJhdG9yIjsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "0E13C0EEA51D2F5EF3595D15BA86EBF5",
              "algorithm": "md5"
            },
            {
              "value": "61652065074889838AB735B17D1AE173561088C6",
              "algorithm": "sha-1"
            },
            {
              "value": "F1EE239D6D53DC85B3366B628EE3542A986B5781C7E3FEF16754C0E788C7FCE0",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/banCommaOperatorRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCaW5hcnlFeHByZXNzaW9uIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBtYXgtbGluZS1sZW5ndGggKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAiYmFuLWNvbW1hLW9wZXJhdG9yIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJEaXNhbGxvd3MgdGhlIGNvbW1hIG9wZXJhdG9yIHRvIGJlIHVzZWQuIiwNCiAgICAgICAgZGVzY3JpcHRpb25EZXRhaWxzOiAiW1JlYWQgbW9yZSBhYm91dCB0aGUgY29tbWEgb3BlcmF0b3IgaGVyZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL0NvbW1hX09wZXJhdG9yKS4iLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgVXNpbmcgdGhlIGNvbW1hIG9wZXJhdG9yIGNhbiBjcmVhdGUgYSBwb3RlbnRpYWwgZm9yIG1hbnkgbm9uLW9idmlvdXMgYnVncyBvciBsZWFkIHRvIG1pc3VuZGVyc3RhbmRpbmcgb2YgY29kZS4NCg0KICAgICAgICAgICAgIyMjIEV4YW1wbGVzDQogICAgICAgICAgICBcYFxgXGANCiAgICAgICAgICAgIGZvbygoYmFyLCBiYXopKTsgLy8gZXZhbHVhdGVzIHRvICdmb28oYmF6KScgYmVjYXVzZSBvZiB0aGUgZXh0cmEgcGFyZW5zIC0gY29uZnVzaW5nIGFuZCBub3Qgb2J2aW91cw0KICAgICAgICAgICAgXGBcYFxgDQoNCiAgICAgICAgICAgIFxgXGBcYA0KICAgICAgICAgICAgc3dpdGNoIChmb28pIHsNCiAgICAgICAgICAgICAgICBjYXNlIDEsIDI6IC8vIGVxdWFscyAnY2FzZSAyJyAtIHByb2JhYmx5IGludGVuZGVkICdjYXNlIDE6IGNhc2UyOicNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgY2FzZSAzOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBcYFxgXGANCg0KICAgICAgICAgICAgXGBcYFxgDQogICAgICAgICAgICBsZXQgeCA9ICh5ID0gMSwgeiA9IDIpOyAvLyB4IGlzIGVxdWFsIHRvIDIgLSB0aGlzIG1heSBub3QgYmUgaW1tZWRpYXRlbHkgb2J2aW91cy4NCiAgICAgICAgICAgIFxgXGBcYA0KICAgICAgICBgLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICIiLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIG1heC1saW5lLWxlbmd0aCAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJEbyBub3QgdXNlIGNvbW1hIG9wZXJhdG9yIGhlcmUgYmVjYXVzZSBpdCBjYW4gYmUgZWFzaWx5IG1pc3VuZGVyc3Rvb2Qgb3IgbGVhZCB0byB1bmludGVuZGVkIGJ1Z3MuIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsayk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPikgew0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzQmluYXJ5RXhwcmVzc2lvbihub2RlKSAmJiBub2RlLm9wZXJhdG9yVG9rZW4ua2luZCA9PT0gdHMuU3ludGF4S2luZC5Db21tYVRva2VuICYmICFpc0Zvckxvb3BJbmNyZW1lbnRvcihub2RlKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQoNCmZ1bmN0aW9uIGlzRm9yTG9vcEluY3JlbWVudG9yKG5vZGU6IHRzLk5vZGUpIHsNCiAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudCE7DQogICAgcmV0dXJuIHBhcmVudC5raW5kID09PSB0cy5TeW50YXhLaW5kLkZvclN0YXRlbWVudCAmJiAocGFyZW50IGFzIHRzLkZvclN0YXRlbWVudCkuaW5jcmVtZW50b3IgPT09IG5vZGU7DQp9DQo="
          },
          "hashes": [
            {
              "value": "9110345369E0FEEC937A6A9EB73D09EF",
              "algorithm": "md5"
            },
            {
              "value": "FF040E0D98502376A3739EDAC9DE1E14FFB2639D",
              "algorithm": "sha-1"
            },
            {
              "value": "8FD46E19240676F93283A519B3CD929C71BE5C09747F5D048B0B5352C0D5DCFA",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/banRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCmltcG9ydCB7IGlzQ2FsbEV4cHJlc3Npb24sIGlzSWRlbnRpZmllciwgaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KaW50ZXJmYWNlIEZ1bmN0aW9uQmFuIHsNCiAgICBuYW1lOiBzdHJpbmc7DQogICAgbWVzc2FnZT86IHN0cmluZzsNCn0NCmludGVyZmFjZSBNZXRob2RCYW4gZXh0ZW5kcyBGdW5jdGlvbkJhbiB7DQogICAgb2JqZWN0OiBzdHJpbmdbXTsNCn0NCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIGZ1bmN0aW9uczogRnVuY3Rpb25CYW5bXTsNCiAgICBtZXRob2RzOiBNZXRob2RCYW5bXTsNCn0NCg0KaW50ZXJmYWNlIE9wdGlvbnNJbnB1dCB7DQogICAgbmFtZTogc3RyaW5nIHwgc3RyaW5nW107DQogICAgbWVzc2FnZT86IHN0cmluZzsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImJhbiIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiQmFucyB0aGUgdXNlIG9mIHNwZWNpZmljIGZ1bmN0aW9ucyBvciBnbG9iYWwgbWV0aG9kcy4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgQSBsaXN0IG9mIGJhbm5lZCBmdW5jdGlvbnMgb3IgbWV0aG9kcyBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdDoNCg0KICAgICAgICAgICAgKiBiYW5uaW5nIGZ1bmN0aW9uczoNCiAgICAgICAgICAgICAgKiBqdXN0IHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbjogXGAiZnVuY3Rpb25OYW1lIlxgDQogICAgICAgICAgICAgICogdGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIGluIGFuIGFycmF5IHdpdGggb25lIGVsZW1lbnQ6IFxgWyJmdW5jdGlvbk5hbWUiXVxgDQogICAgICAgICAgICAgICogYW4gb2JqZWN0IGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OiBcYHsibmFtZSI6ICJmdW5jdGlvbk5hbWUiLCAibWVzc2FnZSI6ICJvcHRpb25hbCBleHBsYW5hdGlvbiBtZXNzYWdlIn1cYA0KICAgICAgICAgICAgKiBiYW5uaW5nIG1ldGhvZHM6DQogICAgICAgICAgICAgICogYW4gYXJyYXkgd2l0aCB0aGUgb2JqZWN0IG5hbWUsIG1ldGhvZCBuYW1lIGFuZCBvcHRpb25hbCBtZXNzYWdlOiBcYFsiZnVuY3Rpb25OYW1lIiwgIm1ldGhvZE5hbWUiLCAib3B0aW9uYWwgbWVzc2FnZSJdXGANCiAgICAgICAgICAgICAgKiBhbiBvYmplY3QgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6IFxgeyJuYW1lIjogWyJvYmplY3ROYW1lIiwgIm1ldGhvZE5hbWUiXSwgIm1lc3NhZ2UiOiAib3B0aW9uYWwgbWVzc2FnZSJ9XGANCiAgICAgICAgICAgICAgICAqIHlvdSBjYW4gYWxzbyBiYW4gZGVlcGx5IG5lc3RlZCBtZXRob2RzOiBcYHsibmFtZSI6IFsiZm9vIiwgImJhciIsICJiYXoiXX1cYCBiYW5zIFxgZm9vLmJhci5iYXooKVxgDQogICAgICAgICAgICAgICAgKiB0aGUgZmlyc3QgZWxlbWVudCBjYW4gY29udGFpbiBhIHdpbGRjYXJkIChcYCpcYCkgdGhhdCBtYXRjaGVzIGV2ZXJ5dGhpbmcuIFxgeyJuYW1lIjogWyIqIiwgImZvckVhY2giXX1cYCBiYW5zXA0KICAgICAgICAgICAgICAgICAgXGBbXS5mb3JFYWNoKC4uLilcYCwgXGAkKC4uLikuZm9yRWFjaCguLi4pXGAsIFxgYXJyLmZvckVhY2goLi4uKVxgLCBldGMuDQogICAgICAgICAgICBgLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAibGlzdCIsDQogICAgICAgICAgICBsaXN0VHlwZTogew0KICAgICAgICAgICAgICAgIGFueU9mOiBbDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHt0eXBlOiAic3RyaW5nIn0sDQogICAgICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg6IDEsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg6IDMsDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJvYmplY3QiLA0KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55T2Y6IFsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAic3RyaW5nIn0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogImFycmF5IiwgaXRlbXM6IHt0eXBlOiAic3RyaW5nIn0sIG1pbkxlbmd0aDogMX0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB7dHlwZTogInN0cmluZyJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBbIm5hbWUiXSwNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFsNCiAgICAgICAgICAgIFsNCiAgICAgICAgICAgICAgICB0cnVlLA0KICAgICAgICAgICAgICAgICJldmFsIiwNCiAgICAgICAgICAgICAgICB7bmFtZTogIiQiLCBtZXNzYWdlOiAicGxlYXNlIGRvbid0In0sDQogICAgICAgICAgICAgICAgWyJkZXNjcmliZSIsICJvbmx5Il0sDQogICAgICAgICAgICAgICAge25hbWU6IFsiaXQiLCAib25seSJdLCBtZXNzYWdlOiAiZG9uJ3QgZm9jdXMgdGVzdHMifSwNCiAgICAgICAgICAgICAgICB7bmFtZTogWyJjaGFpIiwgImFzc2VydCIsICJlcXVhbCJdLCBtZXNzYWdlOiAiVXNlICdzdHJpY3RFcXVhbCcgaW5zdGVhZC4ifSwNCiAgICAgICAgICAgICAgICB7bmFtZTogWyIqIiwgImZvckVhY2giXSwgbWVzc2FnZTogIlVzZSBhIHJlZ3VsYXIgZm9yIGxvb3AgaW5zdGVhZC4ifSwNCiAgICAgICAgICAgIF0sDQogICAgICAgIF0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfRkFDVE9SWShleHByZXNzaW9uOiBzdHJpbmcsIG1lc3NhZ2VBZGRpdGlvbj86IHN0cmluZykgew0KICAgICAgICByZXR1cm4gYENhbGxzIHRvICcke2V4cHJlc3Npb259JyBhcmUgbm90IGFsbG93ZWQuJHttZXNzYWdlQWRkaXRpb24gIT09IHVuZGVmaW5lZCA/IGAgJHttZXNzYWdlQWRkaXRpb259YCA6ICIifWA7DQogICAgfQ0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhXYWxrZXIobmV3IEJhbkZ1bmN0aW9uV2Fsa2VyKHNvdXJjZUZpbGUsIHRoaXMucnVsZU5hbWUsIHBhcnNlT3B0aW9ucyh0aGlzLnJ1bGVBcmd1bWVudHMpKSk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBwYXJzZU9wdGlvbnMoYXJnczogQXJyYXk8c3RyaW5nIHwgc3RyaW5nW10gfCBPcHRpb25zSW5wdXQ+KTogT3B0aW9ucyB7DQogICAgY29uc3QgZnVuY3Rpb25zOiBGdW5jdGlvbkJhbltdID0gW107DQogICAgY29uc3QgbWV0aG9kczogTWV0aG9kQmFuW10gPSBbXTsNCiAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7DQogICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAic3RyaW5nIikgew0KICAgICAgICAgICAgZnVuY3Rpb25zLnB1c2goe25hbWU6IGFyZ30pOw0KICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkgew0KICAgICAgICAgICAgc3dpdGNoIChhcmcubGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgY2FzZSAwOg0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlIDE6DQogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9ucy5wdXNoKHtuYW1lOiBhcmdbMF19KTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5wdXNoKHtvYmplY3Q6IFthcmdbMF1dLCBuYW1lOiBhcmdbMV0sIG1lc3NhZ2U6IGFyZ1syXX0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGFyZy5uYW1lKSkgew0KICAgICAgICAgICAgZnVuY3Rpb25zLnB1c2goYXJnIGFzIEZ1bmN0aW9uQmFuKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHN3aXRjaCAoYXJnLm5hbWUubGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgY2FzZSAwOg0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlIDE6DQogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9ucy5wdXNoKHtuYW1lOiBhcmcubmFtZVswXSwgbWVzc2FnZTogYXJnLm1lc3NhZ2V9KTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5wdXNoKHtuYW1lOiBhcmcubmFtZVthcmcubmFtZS5sZW5ndGggLSAxXSwgb2JqZWN0OiBhcmcubmFtZS5zbGljZSgwLCAtMSksIG1lc3NhZ2U6IGFyZy5tZXNzYWdlfSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHsgZnVuY3Rpb25zLCBtZXRob2RzIH07DQp9DQoNCmNsYXNzIEJhbkZ1bmN0aW9uV2Fsa2VyIGV4dGVuZHMgTGludC5BYnN0cmFjdFdhbGtlcjxPcHRpb25zPiB7DQogICAgcHVibGljIHdhbGsoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSkgew0KICAgICAgICBjb25zdCBjYiA9IChub2RlOiB0cy5Ob2RlKTogdm9pZCA9PiB7DQogICAgICAgICAgICBpZiAoaXNDYWxsRXhwcmVzc2lvbihub2RlKSkgew0KICAgICAgICAgICAgICAgIGlmIChpc0lkZW50aWZpZXIobm9kZS5leHByZXNzaW9uKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrRnVuY3Rpb25CYW4obm9kZS5leHByZXNzaW9uKTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbikpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0Zvck9iamVjdE1ldGhvZEJhbihub2RlLmV4cHJlc3Npb24pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgICAgICB9Ow0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGNiKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGNoZWNrRm9yT2JqZWN0TWV0aG9kQmFuKGV4cHJlc3Npb246IHRzLlByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbikgew0KICAgICAgICBmb3IgKGNvbnN0IGJhbiBvZiB0aGlzLm9wdGlvbnMubWV0aG9kcykgew0KICAgICAgICAgICAgaWYgKGV4cHJlc3Npb24ubmFtZS50ZXh0ICE9PSBiYW4ubmFtZSkgeyBjb250aW51ZTsgfQ0KICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSBleHByZXNzaW9uLmV4cHJlc3Npb247DQogICAgICAgICAgICBmb3IgKGxldCBpID0gYmFuLm9iamVjdC5sZW5ndGggLSAxOyBpID4gMDsgLS1pKSB7DQogICAgICAgICAgICAgICAgaWYgKCFpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihjdXJyZW50KSB8fCBjdXJyZW50Lm5hbWUudGV4dCAhPT0gYmFuLm9iamVjdFtpXSkgeyBjb250aW51ZTsgfQ0KICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmV4cHJlc3Npb247DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoYmFuLm9iamVjdFswXSA9PT0gIioiIHx8DQogICAgICAgICAgICAgICAgaXNJZGVudGlmaWVyKGN1cnJlbnQpICYmIGN1cnJlbnQudGV4dCA9PT0gYmFuLm9iamVjdFswXSkgew0KICAgICAgICAgICAgICAgIHRoaXMuYWRkRmFpbHVyZUF0Tm9kZShleHByZXNzaW9uLCBSdWxlLkZBSUxVUkVfU1RSSU5HX0ZBQ1RPUlkoYCR7YmFuLm9iamVjdC5qb2luKCIuIil9LiR7YmFuLm5hbWV9YCwgYmFuLm1lc3NhZ2UpKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgY2hlY2tGdW5jdGlvbkJhbihuYW1lOiB0cy5JZGVudGlmaWVyKSB7DQogICAgICAgIGNvbnN0IHt0ZXh0fSA9IG5hbWU7DQogICAgICAgIGZvciAoY29uc3QgYmFuIG9mIHRoaXMub3B0aW9ucy5mdW5jdGlvbnMpIHsNCiAgICAgICAgICAgIGlmIChiYW4ubmFtZSA9PT0gdGV4dCkgew0KICAgICAgICAgICAgICAgIHRoaXMuYWRkRmFpbHVyZUF0Tm9kZShuYW1lLCBSdWxlLkZBSUxVUkVfU1RSSU5HX0ZBQ1RPUlkodGV4dCwgYmFuLm1lc3NhZ2UpKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "BBD0D8FFE69A65D2BEC22CCB77DD0C54",
              "algorithm": "md5"
            },
            {
              "value": "F216D8F8403F78414EDFB11B6D9928EC5F72CF18",
              "algorithm": "sha-1"
            },
            {
              "value": "EA825C857A4C295182D88459B7417AE3F5A845E54766AA3F648DBF6B4FF570E0",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/banTypesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNUeXBlUmVmZXJlbmNlTm9kZSB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQppbnRlcmZhY2UgT3B0aW9uIHsNCiAgICBwYXR0ZXJuOiBSZWdFeHA7DQogICAgbWVzc2FnZT86IHN0cmluZzsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImJhbi10eXBlcyIsDQogICAgICAgIGRlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEJhbnMgc3BlY2lmaWMgdHlwZXMgZnJvbSBiZWluZyB1c2VkLiBEb2VzIG5vdCBiYW4gdGhlDQogICAgICAgICAgICBjb3JyZXNwb25kaW5nIHJ1bnRpbWUgb2JqZWN0cyBmcm9tIGJlaW5nIHVzZWQuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogImxpc3QiLA0KICAgICAgICAgICAgbGlzdFR5cGU6IHsNCiAgICAgICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgICAgIGl0ZW1zOiB7IHR5cGU6ICJzdHJpbmciIH0sDQogICAgICAgICAgICAgICAgbWluTGVuZ3RoOiAxLA0KICAgICAgICAgICAgICAgIG1heExlbmd0aDogMiwNCiAgICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBBIGxpc3Qgb2YgXGBbInJlZ2V4IiwgIm9wdGlvbmFsIGV4cGxhbmF0aW9uIGhlcmUiXVxgLCB3aGljaCBiYW5zDQogICAgICAgICAgICB0eXBlcyB0aGF0IG1hdGNoIFxgcmVnZXhcYGAsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbW3RydWUsIFsiT2JqZWN0IiwgIlVzZSB7fSBpbnN0ZWFkLiJdLCBbIlN0cmluZyJdXV0sDQogICAgICAgIHR5cGU6ICJ0eXBlc2NyaXB0IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19GQUNUT1JZKHR5cGVOYW1lOiBzdHJpbmcsIG1lc3NhZ2VBZGRpdGlvbj86IHN0cmluZykgew0KICAgICAgICByZXR1cm4gYERvbid0IHVzZSAnJHt0eXBlTmFtZX0nIGFzIGEgdHlwZS4ke21lc3NhZ2VBZGRpdGlvbiAhPT0gdW5kZWZpbmVkID8gYCAke21lc3NhZ2VBZGRpdGlvbn1gIDogIiJ9YDsNCiAgICB9DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHRoaXMucnVsZUFyZ3VtZW50cy5tYXAocGFyc2VPcHRpb24pKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHBhcnNlT3B0aW9uKFtwYXR0ZXJuLCBtZXNzYWdlXTogW3N0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkXSk6IE9wdGlvbiB7DQogICAgcmV0dXJuIHttZXNzYWdlLCBwYXR0ZXJuOiBuZXcgUmVnRXhwKGBeJHtwYXR0ZXJufSRgKX07DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PE9wdGlvbltdPikgew0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzVHlwZVJlZmVyZW5jZU5vZGUobm9kZSkpIHsNCiAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lID0gbm9kZS5nZXRUZXh0KGN0eC5zb3VyY2VGaWxlKTsNCiAgICAgICAgICAgIGZvciAoY29uc3QgYmFuIG9mIGN0eC5vcHRpb25zKSB7DQogICAgICAgICAgICAgICAgaWYgKGJhbi5wYXR0ZXJuLnRlc3QodHlwZU5hbWUpKSB7DQogICAgICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfRkFDVE9SWSh0eXBlTmFtZSwgYmFuLm1lc3NhZ2UpKTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "13B7E7BED8C6C3520AD496406FD31234",
              "algorithm": "md5"
            },
            {
              "value": "77446F2E49515A49C295B63ABCE109EBD7898DCA",
              "algorithm": "sha-1"
            },
            {
              "value": "EEFEDB3A8768BC40ED759DE103604CB89638152855FDEEB721E2AB3D85E28C81",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/binaryExpressionOperandOrderRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCaW5hcnlFeHByZXNzaW9uIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQppbXBvcnQgeyBpc05lZ2F0aXZlTnVtYmVyTGl0ZXJhbCB9IGZyb20gIi4uL2xhbmd1YWdlL3V0aWxzIjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImJpbmFyeS1leHByZXNzaW9uLW9wZXJhbmQtb3JkZXIiLA0KICAgICAgICBkZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBJbiBhIGJpbmFyeSBleHByZXNzaW9uLCBhIGxpdGVyYWwgc2hvdWxkIGFsd2F5cyBiZSBvbiB0aGUgcmlnaHQtaGFuZCBzaWRlIGlmIHBvc3NpYmxlLg0KICAgICAgICAgICAgRm9yIGV4YW1wbGUsIHByZWZlciAneCArIDEnIG92ZXIgJzEgKyB4Jy5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBFeHByZXNzaW9ucyBsaWtlIFxgMSArIHhcYCBhcmUgc29tZXRpbWVzIHJlZmVycmVkIHRvIGFzICJZb2RhIiBleHByZXNzaW9ucyBiZWNhdXNlIHRoZXkgcmVhZA0KICAgICAgICAgICAgb3Bwb3NpdGUgdG8gaG93IHdlIHdvdWxkIG5vcm1hbGx5IHNwZWFrIHRoZSBleHByZXNzaW9uLg0KDQogICAgICAgICAgICBTdGlja2luZyB0byBhIGNvbnNpc3RlbnQgZ3JhbW1hciBmb3IgY29uZGl0aW9ucyBoZWxwcyBrZWVwIGNvZGUgcmVhZGFibGUgYW5kIHVuZGVyc3RhbmRhYmxlLg0KICAgICAgICBgLA0KICAgICAgICB0eXBlOiAic3R5bGUiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJMaXRlcmFsIGV4cHJlc3Npb24gc2hvdWxkIGJlIG9uIHRoZSByaWdodC1oYW5kIHNpZGUgb2YgYSBiaW5hcnkgZXhwcmVzc2lvbi4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KTogdm9pZCB7DQogICAgdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlKSB7DQogICAgICAgIGlmIChpc0JpbmFyeUV4cHJlc3Npb24obm9kZSkgJiYgaXNMaXRlcmFsKG5vZGUubGVmdCkgJiYgIWlzTGl0ZXJhbChub2RlLnJpZ2h0KSAmJiAhaXNBbGxvd2VkT3JkZXJlZE9wZXJhdG9yKG5vZGUpKSB7DQogICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgfQ0KICAgICAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0KDQovKiogQWxsb3dzIGNlcnRhaW4gaW5oZXJlbnRseSBvcmRlcmVkIG9wZXJhdG9ycyB0aGF0IGNhbid0IGVhc2lseSBiZSB3cml0dGVuIHdpdGggdGhlIGxpdGVyYWwgb24gdGhlIHJpZ2h0LiAqLw0KZnVuY3Rpb24gaXNBbGxvd2VkT3JkZXJlZE9wZXJhdG9yKG5vZGU6IHRzLkJpbmFyeUV4cHJlc3Npb24pOiBib29sZWFuIHsNCiAgICBzd2l0Y2ggKG5vZGUub3BlcmF0b3JUb2tlbi5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5QbHVzVG9rZW46DQogICAgICAgICAgICAvLyBBbGxvdyBgImZvbyIgKyB4YCBidXQgbm90IGAxICsgeGAuDQogICAgICAgICAgICByZXR1cm4gbm9kZS5sZWZ0LmtpbmQgPT09IHRzLlN5bnRheEtpbmQuU3RyaW5nTGl0ZXJhbDsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1pbnVzVG9rZW46DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5TbGFzaFRva2VuOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUGVyY2VudFRva2VuOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTGVzc1RoYW5MZXNzVGhhblRva2VuOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuR3JlYXRlclRoYW5HcmVhdGVyVGhhblRva2VuOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuR3JlYXRlclRoYW5HcmVhdGVyVGhhbkdyZWF0ZXJUaGFuVG9rZW46DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Bc3Rlcmlza0FzdGVyaXNrVG9rZW46DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5JbktleXdvcmQ6DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Db21tYVRva2VuOg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBpc0xpdGVyYWwobm9kZTogdHMuRXhwcmVzc2lvbik6IGJvb2xlYW4gew0KICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5TdHJpbmdMaXRlcmFsOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTnVtZXJpY0xpdGVyYWw6DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5UcnVlS2V5d29yZDoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkZhbHNlS2V5d29yZDoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk51bGxLZXl3b3JkOg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5JZGVudGlmaWVyOg0KICAgICAgICAgICAgcmV0dXJuIChub2RlIGFzIHRzLklkZW50aWZpZXIpLm9yaWdpbmFsS2V5d29yZEtpbmQgPT09IHRzLlN5bnRheEtpbmQuVW5kZWZpbmVkS2V5d29yZDsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlByZWZpeFVuYXJ5RXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiBpc05lZ2F0aXZlTnVtYmVyTGl0ZXJhbChub2RlKTsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uOg0KICAgICAgICAgICAgcmV0dXJuIGlzTGl0ZXJhbCgobm9kZSBhcyB0cy5QYXJlbnRoZXNpemVkRXhwcmVzc2lvbikuZXhwcmVzc2lvbik7DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "655F5FED10B40C1D3E03623A76E84491",
              "algorithm": "md5"
            },
            {
              "value": "1C329F5DF71F35EAD3CCA0B05B08D0CCC7F04966",
              "algorithm": "sha-1"
            },
            {
              "value": "1DB4616DD10651F2963E7E4567F4B412811337C89954E0F8FAB9FDA2360895BF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/callableTypesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0Q2hpbGRPZktpbmQsIGlzQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uLCBpc0lkZW50aWZpZXIsIGlzSW50ZXJmYWNlRGVjbGFyYXRpb24sIGlzVHlwZUxpdGVyYWxOb2RlIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJjYWxsYWJsZS10eXBlcyIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiQW4gaW50ZXJmYWNlIG9yIGxpdGVyYWwgdHlwZSB3aXRoIGp1c3QgYSBjYWxsIHNpZ25hdHVyZSBjYW4gYmUgd3JpdHRlbiBhcyBhIGZ1bmN0aW9uIHR5cGUuIiwNCiAgICAgICAgcmF0aW9uYWxlOiAic3R5bGUiLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIHR5cGU6ICJzdHlsZSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19GQUNUT1JZKHR5cGU6IHN0cmluZywgc2lnU3VnZ2VzdGlvbjogc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBgJHt0eXBlfSBoYXMgb25seSBhIGNhbGwgc2lnbmF0dXJlIOKAlCB1c2UgXGAke3NpZ1N1Z2dlc3Rpb259XGAgaW5zdGVhZC5gOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsayk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPikgew0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKChpc0ludGVyZmFjZURlY2xhcmF0aW9uKG5vZGUpICYmIG5vU3VwZXJ0eXBlKG5vZGUpIHx8IGlzVHlwZUxpdGVyYWxOb2RlKG5vZGUpKQ0KICAgICAgICAgICAgJiYgbm9kZS5tZW1iZXJzLmxlbmd0aCA9PT0gMSkgew0KICAgICAgICAgICAgY29uc3QgbWVtYmVyID0gbm9kZS5tZW1iZXJzWzBdOw0KICAgICAgICAgICAgaWYgKGlzQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uKG1lbWJlcikgJiYNCiAgICAgICAgICAgICAgICAvLyBhdm9pZCBiYWQgcGFyc2UNCiAgICAgICAgICAgICAgICBtZW1iZXIudHlwZSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbiA9IHJlbmRlclN1Z2dlc3Rpb24obWVtYmVyLCBub2RlLCBjdHguc291cmNlRmlsZSk7DQogICAgICAgICAgICAgICAgY29uc3QgZml4U3RhcnQgPSBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuVHlwZUxpdGVyYWwNCiAgICAgICAgICAgICAgICAgICAgPyBub2RlLmdldFN0YXJ0KGN0eC5zb3VyY2VGaWxlKQ0KICAgICAgICAgICAgICAgICAgICA6IGdldENoaWxkT2ZLaW5kKG5vZGUsIHRzLlN5bnRheEtpbmQuSW50ZXJmYWNlS2V5d29yZCkhLmdldFN0YXJ0KGN0eC5zb3VyY2VGaWxlKTsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZSgNCiAgICAgICAgICAgICAgICAgICAgbWVtYmVyLA0KICAgICAgICAgICAgICAgICAgICBSdWxlLkZBSUxVUkVfU1RSSU5HX0ZBQ1RPUlkobm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLlR5cGVMaXRlcmFsID8gIlR5cGUgbGl0ZXJhbCIgOiAiSW50ZXJmYWNlIiwgc3VnZ2VzdGlvbiksDQogICAgICAgICAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQucmVwbGFjZUZyb21UbyhmaXhTdGFydCwgbm9kZS5lbmQsIHN1Z2dlc3Rpb24pLA0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQoNCi8qKiBUcnVlIGlmIHRoZXJlIGlzIG5vIHN1cGVydHlwZSBvciBpZiB0aGUgc3VwZXJ0eXBlIGlzIGBGdW5jdGlvbmAuICovDQpmdW5jdGlvbiBub1N1cGVydHlwZShub2RlOiB0cy5JbnRlcmZhY2VEZWNsYXJhdGlvbik6IGJvb2xlYW4gew0KICAgIGlmIChub2RlLmhlcml0YWdlQ2xhdXNlcyA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCiAgICBpZiAobm9kZS5oZXJpdGFnZUNsYXVzZXMubGVuZ3RoICE9PSAxKSB7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQogICAgY29uc3QgZXhwciA9IG5vZGUuaGVyaXRhZ2VDbGF1c2VzWzBdLnR5cGVzWzBdLmV4cHJlc3Npb247DQogICAgcmV0dXJuIGlzSWRlbnRpZmllcihleHByKSAmJiBleHByLnRleHQgPT09ICJGdW5jdGlvbiI7DQp9DQoNCmZ1bmN0aW9uIHJlbmRlclN1Z2dlc3Rpb24oY2FsbDogdHMuQ2FsbFNpZ25hdHVyZURlY2xhcmF0aW9uLA0KICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IHRzLkludGVyZmFjZURlY2xhcmF0aW9uIHwgdHMuVHlwZUxpdGVyYWxOb2RlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogc3RyaW5nIHsNCg0KICAgIGNvbnN0IHN0YXJ0ID0gY2FsbC5nZXRTdGFydChzb3VyY2VGaWxlKTsNCiAgICBjb25zdCBjb2xvblBvcyA9IGNhbGwudHlwZSEucG9zIC0gMSAtIHN0YXJ0Ow0KICAgIGNvbnN0IHRleHQgPSBzb3VyY2VGaWxlLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBjYWxsLmVuZCk7DQoNCiAgICBsZXQgc3VnZ2VzdGlvbiA9IGAke3RleHQuc3Vic3RyKDAsIGNvbG9uUG9zKX0gPT4ke3RleHQuc3Vic3RyKGNvbG9uUG9zICsgMSl9YDsNCiAgICBpZiAoc2hvdWxkV3JhcFN1Z2dlc3Rpb24ocGFyZW50LnBhcmVudCEpKSB7DQogICAgICAgIHN1Z2dlc3Rpb24gPSBgKCR7c3VnZ2VzdGlvbn0pYDsNCiAgICB9DQogICAgaWYgKHBhcmVudC5raW5kID09PSB0cy5TeW50YXhLaW5kLkludGVyZmFjZURlY2xhcmF0aW9uKSB7DQogICAgICAgIGlmIChwYXJlbnQudHlwZVBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuIGB0eXBlJHtzb3VyY2VGaWxlLnRleHQuc3Vic3RyaW5nKHBhcmVudC5uYW1lLnBvcywgcGFyZW50LnR5cGVQYXJhbWV0ZXJzLmVuZCArIDEpfSA9ICR7c3VnZ2VzdGlvbn1gOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGB0eXBlICR7cGFyZW50Lm5hbWUudGV4dH0gPSAke3N1Z2dlc3Rpb259YDsNCiAgICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gc3VnZ2VzdGlvbi5lbmRzV2l0aCgiOyIpID8gc3VnZ2VzdGlvbi5zbGljZSgwLCAtMSkgOiBzdWdnZXN0aW9uOw0KfQ0KDQpmdW5jdGlvbiBzaG91bGRXcmFwU3VnZ2VzdGlvbihwYXJlbnQ6IHRzLk5vZGUpIHsNCiAgICBzd2l0Y2ggKHBhcmVudC5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5VbmlvblR5cGU6DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5JbnRlcnNlY3Rpb25UeXBlOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQXJyYXlUeXBlOg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "5FCF0FF0033CBB7186F802CD1647FED0",
              "algorithm": "md5"
            },
            {
              "value": "E5B8712FEBA380031A67843C3B6B186B7DE9B2A4",
              "algorithm": "sha-1"
            },
            {
              "value": "71E54761B306EF4F3A52F19D1329D66BE19346FBC1FA52D5F1F1F0AAD5EBCC10",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/code-examples/arrowReturnShorthand.examples.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTggUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi8uLi9pbmRleCI7DQoNCi8vIHRzbGludDpkaXNhYmxlOiBvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMNCmV4cG9ydCBjb25zdCBjb2RlRXhhbXBsZXMgPSBbDQogICAgew0KICAgICAgICBkZXNjcmlwdGlvbjogIkVuZm9yY2VzIHVzYWdlIG9mIHRoZSBzaG9ydGhhbmQgcmV0dXJuIHN5bnRheCB3aGVuIGFuIGFycm93IGZ1bmN0aW9uJ3MgYm9keSBkb2VzIG5vdCBzcGFuIG11bHRpcGxlIGxpbmVzLiIsDQogICAgICAgIGNvbmZpZzogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICAicnVsZXMiOiB7ICJhcnJvdy1yZXR1cm4tc2hvcnRoYW5kIjogdHJ1ZSB9DQogICAgICAgIGAsDQogICAgICAgIHBhc3M6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgY29uc3QgY2FsYyA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4gKHsgYWRkOiB4ICsgeSwgc3ViOiB4IC0geSwgbXVsOiB4ICogeSB9KTsNCiAgICAgICAgICAgIGNvbnN0IGNhbGMyID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHsgYWRkOiB4ICsgeSwgc3ViOiB4IC0geSwgbXVsOiB4ICogeSB9DQogICAgICAgICAgICB9Ow0KICAgICAgICBgLA0KICAgICAgICBmYWlsOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIGNvbnN0IGNhbGMgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHsgcmV0dXJuIHsgYWRkOiB4ICsgeSwgc3ViOiB4IC0geSwgbXVsOiB4ICogeSB9IH07DQogICAgICAgICAgICBjb25zdCBjYWxjMiA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4gew0KICAgICAgICAgICAgICAgIHJldHVybiB7IGFkZDogeCArIHksIHN1YjogeCAtIHksIG11bDogeCAqIHkgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICBgLA0KICAgIH0sDQogICAgew0KICAgICAgICBkZXNjcmlwdGlvbjogIkVuZm9yY2VzIHVzYWdlIG9mIHRoZSBzaG9ydGhhbmQgcmV0dXJuIHN5bnRheCBldmVuIHdoZW4gYW4gYXJyb3cgZnVuY3Rpb24ncyBib2R5IHNwYW5zIG11bHRpcGxlIGxpbmVzLiIsDQogICAgICAgIGNvbmZpZzogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICAicnVsZXMiOiB7ICJhcnJvdy1yZXR1cm4tc2hvcnRoYW5kIjogW3RydWUsICJtdWx0aWxpbmUiXSB9DQogICAgICAgIGAsDQogICAgICAgIHBhc3M6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgY29uc3QgY2FsYyA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4gKHsgYWRkOiB4ICsgeSwgc3ViOiB4IC0geSwgbXVsOiB4ICogeSB9KTsNCiAgICAgICAgICAgIGNvbnN0IGNhbGMyID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9Pg0KICAgICAgICAgICAgICAgICh7IGFkZDogeCArIHksIHN1YjogeCAtIHksIG11bDogeCAqIHkgfSk7DQogICAgICAgIGAsDQogICAgICAgIGZhaWw6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgY29uc3QgY2FsYyA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4geyByZXR1cm4geyBhZGQ6IHggKyB5LCBzdWI6IHggLSB5LCBtdWw6IHggKiB5IH0gfTsNCiAgICAgICAgICAgIGNvbnN0IGNhbGMyID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHsgYWRkOiB4ICsgeSwgc3ViOiB4IC0geSwgbXVsOiB4ICogeSB9DQogICAgICAgICAgICB9Ow0KICAgICAgIGAsDQogICAgfSwNCl07DQo="
          },
          "hashes": [
            {
              "value": "E7EB67CF4F619B48B9CDACCD28E714BB",
              "algorithm": "md5"
            },
            {
              "value": "3CB1E049F61C56D0AB9E1277621047FE77F50C8B",
              "algorithm": "sha-1"
            },
            {
              "value": "AD7D7A7349D9E883867539DD3C67A3A4A83D9D75D38B3C87B7FB2ED5CCB0BFF1",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/code-examples/oneVariablePerDeclaration.examples.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTggUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi8uLi9pbmRleCI7DQoNCi8vIHRzbGludDpkaXNhYmxlOiBvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMNCmV4cG9ydCBjb25zdCBjb2RlRXhhbXBsZXMgPSBbDQogICAgew0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyBtdWx0aXBsZSB2YXJpYWJsZSBkZWZpbml0aW9ucyBpbiB0aGUgc2FtZSBkZWNsYXJhdGlvbiBzdGF0ZW1lbnQuIiwNCiAgICAgICAgY29uZmlnOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgICJydWxlcyI6IHsgIm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb24iOiB0cnVlIH0NCiAgICAgICAgYCwNCiAgICAgICAgcGFzczogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBjb25zdCBmb28gPSAxOw0KICAgICAgICAgICAgY29uc3QgYmFyID0gJzInOw0KICAgICAgICBgLA0KICAgICAgICBmYWlsOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIGNvbnN0IGZvbyA9IDEsIGJhciA9ICcyJzsNCiAgICAgICBgLA0KICAgIH0sDQogICAgew0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyBtdWx0aXBsZSB2YXJpYWJsZSBkZWZpbml0aW9ucyBpbiB0aGUgc2FtZSBkZWNsYXJhdGlvbiBzdGF0ZW1lbnQgYnV0IGFsbG93cyB0aGVtIGluIGZvci1sb29wcy4iLA0KICAgICAgICBjb25maWc6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgInJ1bGVzIjogeyAib25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvbiI6IFt0cnVlLCAiaWdub3JlLWZvci1sb29wIl0gfQ0KICAgICAgICBgLA0KICAgICAgICBwYXNzOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gMTA7IGkgPCAxMDsgaSsrKSB7DQogICAgICAgICAgICAgICAgZG9Tb21ldGhpbmcoaiwgaSk7DQogICAgICAgICAgICB9DQogICAgICAgIGAsDQogICAgfSwNCl07DQo="
          },
          "hashes": [
            {
              "value": "2D0AC403A1F7F7ED30E6492B5FA2D9E2",
              "algorithm": "md5"
            },
            {
              "value": "B6B0476300C73C5D03C91A8A263C89B02A8D9E76",
              "algorithm": "sha-1"
            },
            {
              "value": "CAF2FEE0E2A509E7CE1469232164F15220FA487D00D7BC94E403ABB176CDE3AE",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/commentFormatRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "F4A4B08FD893C5A4E8DBC39C26758498",
              "algorithm": "md5"
            },
            {
              "value": "779117F7D779CF82461732187FF12235B39BD5C4",
              "algorithm": "sha-1"
            },
            {
              "value": "E823994EC5DAD6525185D3BFEF8EEA1C2087ED49B1692D8494910231D015E659",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/completed-docs/exclusionFactory.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaGFzT3duUHJvcGVydHkgfSBmcm9tICIuLi8uLi91dGlscyI7DQppbXBvcnQgeyBEb2NUeXBlIH0gZnJvbSAiLi4vY29tcGxldGVkRG9jc1J1bGUiOw0KaW1wb3J0IHsgQmxvY2tFeGNsdXNpb24sIElCbG9ja0V4Y2x1c2lvbkRlc2NyaXB0b3IgfSBmcm9tICIuL2Jsb2NrRXhjbHVzaW9uIjsNCmltcG9ydCB7IENsYXNzRXhjbHVzaW9uLCBJQ2xhc3NFeGNsdXNpb25EZXNjcmlwdG9yIH0gZnJvbSAiLi9jbGFzc0V4Y2x1c2lvbiI7DQppbXBvcnQgeyBFeGNsdXNpb24gfSBmcm9tICIuL2V4Y2x1c2lvbiI7DQppbXBvcnQgeyBJSW5wdXRFeGNsdXNpb25EZXNjcmlwdG9ycywgSW5wdXRFeGNsdXNpb25EZXNjcmlwdG9yIH0gZnJvbSAiLi9leGNsdXNpb25EZXNjcmlwdG9ycyI7DQppbXBvcnQgeyBJVGFnRXhjbHVzaW9uRGVzY3JpcHRvciwgVGFnRXhjbHVzaW9uIH0gZnJvbSAiLi90YWdFeGNsdXNpb24iOw0KDQpleHBvcnQgdHlwZSBFeGNsdXNpb25zTWFwID0gTWFwPERvY1R5cGUsIEFycmF5PEV4Y2x1c2lvbjxhbnk+Pj47DQoNCmV4cG9ydCBjbGFzcyBFeGNsdXNpb25GYWN0b3J5IHsNCiAgICBwdWJsaWMgY29uc3RydWN0RXhjbHVzaW9uc01hcChydWxlQXJndW1lbnRzOiBJSW5wdXRFeGNsdXNpb25EZXNjcmlwdG9yc1tdKTogRXhjbHVzaW9uc01hcCB7DQogICAgICAgIGNvbnN0IGV4Y2x1c2lvbnNNYXA6IEV4Y2x1c2lvbnNNYXAgPSBuZXcgTWFwKCk7DQoNCiAgICAgICAgZm9yIChjb25zdCBydWxlQXJndW1lbnQgb2YgcnVsZUFyZ3VtZW50cykgew0KICAgICAgICAgICAgdGhpcy5hZGRSZXF1aXJlbWVudHMoZXhjbHVzaW9uc01hcCwgcnVsZUFyZ3VtZW50KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBleGNsdXNpb25zTWFwOw0KICAgIH0NCg0KICAgIHByaXZhdGUgYWRkUmVxdWlyZW1lbnRzKGV4Y2x1c2lvbnNNYXA6IEV4Y2x1c2lvbnNNYXAsIGRlc2NyaXB0b3JzOiBJSW5wdXRFeGNsdXNpb25EZXNjcmlwdG9ycykgew0KICAgICAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3JzID09PSAic3RyaW5nIikgew0KICAgICAgICAgICAgZXhjbHVzaW9uc01hcC5zZXQoZGVzY3JpcHRvcnMsIHRoaXMuY3JlYXRlUmVxdWlyZW1lbnRzRm9yRG9jVHlwZShkZXNjcmlwdG9ycywge30pKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGZvciAoY29uc3QgZG9jVHlwZSBpbiBkZXNjcmlwdG9ycykgew0KICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5KGRlc2NyaXB0b3JzLCBkb2NUeXBlKSkgew0KICAgICAgICAgICAgICAgIGV4Y2x1c2lvbnNNYXAuc2V0KGRvY1R5cGUgYXMgRG9jVHlwZSwgdGhpcy5jcmVhdGVSZXF1aXJlbWVudHNGb3JEb2NUeXBlKGRvY1R5cGUgYXMgRG9jVHlwZSwgZGVzY3JpcHRvcnNbZG9jVHlwZV0pKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgY3JlYXRlUmVxdWlyZW1lbnRzRm9yRG9jVHlwZShkb2NUeXBlOiBEb2NUeXBlLCBkZXNjcmlwdG9yOiBJbnB1dEV4Y2x1c2lvbkRlc2NyaXB0b3IpIHsNCiAgICAgICAgY29uc3QgcmVxdWlyZW1lbnRzID0gW107DQoNCiAgICAgICAgaWYgKGRvY1R5cGUgPT09ICJtZXRob2RzIiB8fCBkb2NUeXBlID09PSAicHJvcGVydGllcyIpIHsNCiAgICAgICAgICAgIHJlcXVpcmVtZW50cy5wdXNoKG5ldyBDbGFzc0V4Y2x1c2lvbihkZXNjcmlwdG9yIGFzIElDbGFzc0V4Y2x1c2lvbkRlc2NyaXB0b3IpKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJlcXVpcmVtZW50cy5wdXNoKG5ldyBCbG9ja0V4Y2x1c2lvbihkZXNjcmlwdG9yIGFzIElCbG9ja0V4Y2x1c2lvbkRlc2NyaXB0b3IpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgoZGVzY3JpcHRvciBhcyBJVGFnRXhjbHVzaW9uRGVzY3JpcHRvcikudGFncyAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICByZXF1aXJlbWVudHMucHVzaChuZXcgVGFnRXhjbHVzaW9uKGRlc2NyaXB0b3IgYXMgSVRhZ0V4Y2x1c2lvbkRlc2NyaXB0b3IpKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiByZXF1aXJlbWVudHM7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "F70D7DFA97DB903C766947AB82127910",
              "algorithm": "md5"
            },
            {
              "value": "559F1A81342F2927914E21872ED9FAFA2D04B779",
              "algorithm": "sha-1"
            },
            {
              "value": "28DA9CF0F9E035C2C7524D45A62F64906A1CB027D5BDAB2D8DEE9773089006AB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/completedDocsRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "A97F0520162DA7DA65C0F67C1826D21E",
              "algorithm": "md5"
            },
            {
              "value": "90326E3FD59C8EACA54B9A9E7BAE00B15FB0D744",
              "algorithm": "sha-1"
            },
            {
              "value": "0088F36E5A4F26B4E21A8950C35B1D80BD3960FDC4E0EE2D30F16ED2398491F9",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/curlyRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "BECCD9E33FC96E65E805F56D7B24D9F6",
              "algorithm": "md5"
            },
            {
              "value": "B07F42538B2B2324C435382DCA1E74A93080B1A5",
              "algorithm": "sha-1"
            },
            {
              "value": "E301BA61FCAFF303265F503F34FE8F67B47D7EB9AA442E95F8F67EF8B29217F7",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/deprecationRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "C3943EB9245BFBD581E8ED101623B537",
              "algorithm": "md5"
            },
            {
              "value": "04A98201925AB8FA003628B745AD105530CE228B",
              "algorithm": "sha-1"
            },
            {
              "value": "E99D2DDCAC25F05C86BB66F8038101F9BE3AD5DECB1A3882B20D52AF5B7A38F1",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/eoflineRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAiZW9mbGluZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRW5zdXJlcyB0aGUgZmlsZSBlbmRzIHdpdGggYSBuZXdsaW5lLiIsDQogICAgICAgIGRlc2NyaXB0aW9uRGV0YWlsczogIkZpeCBmb3Igc2luZ2xlLWxpbmUgZmlsZXMgaXMgbm90IHN1cHBvcnRlZC4iLA0KICAgICAgICByYXRpb25hbGU6ICJJdCBpcyBhIFtzdGFuZGFyZCBjb252ZW50aW9uXShodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvNzI5NjkyLzMxMjQyODgpIHRvIGVuZCBmaWxlcyB3aXRoIGEgbmV3bGluZS4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICAgICAgdHlwZTogIm1haW50YWluYWJpbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJmaWxlIHNob3VsZCBlbmQgd2l0aCBhIG5ld2xpbmUiOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICBjb25zdCBsZW5ndGggPSBzb3VyY2VGaWxlLnRleHQubGVuZ3RoOw0KICAgICAgICBpZiAobGVuZ3RoID09PSAwIHx8IC8vIGlmIHRoZSBmaWxlIGlzIGVtcHR5LCBpdCAiZW5kcyB3aXRoIGEgbmV3bGluZSIsIHNvIGRvbid0IHJldHVybiBhIGZhaWx1cmUNCiAgICAgICAgICAgIHNvdXJjZUZpbGUudGV4dFtsZW5ndGggLSAxXSA9PT0gIlxuIikgew0KICAgICAgICAgICAgcmV0dXJuIFtdOw0KICAgICAgICB9DQoNCiAgICAgICAgbGV0IGZpeDogTGludC5GaXggfCB1bmRlZmluZWQ7DQogICAgICAgIGNvbnN0IGxpbmVzID0gc291cmNlRmlsZS5nZXRMaW5lU3RhcnRzKCk7DQogICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSB7DQogICAgICAgICAgICBmaXggPSBMaW50LlJlcGxhY2VtZW50LmFwcGVuZFRleHQobGVuZ3RoLCBzb3VyY2VGaWxlLnRleHRbbGluZXNbMV0gLSAyXSA9PT0gIlxyIiA/ICJcclxuIiA6ICJcbiIpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIFtuZXcgTGludC5SdWxlRmFpbHVyZShzb3VyY2VGaWxlLCBsZW5ndGgsIGxlbmd0aCwgUnVsZS5GQUlMVVJFX1NUUklORywgdGhpcy5ydWxlTmFtZSwgZml4KV07DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "A706F84D3DCD045302D21A8423580FCA",
              "algorithm": "md5"
            },
            {
              "value": "AF83BF1783185EB77E7A03CE18DD748F49E2A3BF",
              "algorithm": "sha-1"
            },
            {
              "value": "0270F27FA768F5C2884116CBA4F1C62FE5F58B922647461D8E88AE0E6385D1DC",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/fileHeaderRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImZpbGUtaGVhZGVyIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJFbmZvcmNlcyBhIGNlcnRhaW4gaGVhZGVyIGNvbW1lbnQgZm9yIGFsbCBmaWxlcywgbWF0Y2hlZCBieSBhIHJlZ3VsYXIgZXhwcmVzc2lvbi4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgVGhlIGZpcnN0IG9wdGlvbiwgd2hpY2ggaXMgbWFuZGF0b3J5LCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGFsbCBoZWFkZXJzIHNob3VsZCBtYXRjaC4NCiAgICAgICAgICAgIFRoZSBzZWNvbmQgYXJndW1lbnQsIHdoaWNoIGlzIG9wdGlvbmFsLCBpcyBhIHN0cmluZyB0aGF0IHNob3VsZCBiZSBpbnNlcnRlZCBhcyBhIGhlYWRlciBjb21tZW50DQogICAgICAgICAgICBpZiBmaXhpbmcgaXMgZW5hYmxlZCBhbmQgbm8gaGVhZGVyIHRoYXQgbWF0Y2hlcyB0aGUgZmlyc3QgYXJndW1lbnQgaXMgZm91bmQuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgIGl0ZW1zOiBbDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIF0sDQogICAgICAgICAgICBhZGRpdGlvbmFsSXRlbXM6IGZhbHNlLA0KICAgICAgICAgICAgbWluTGVuZ3RoOiAxLA0KICAgICAgICAgICAgbWF4TGVuZ3RoOiAyLA0KICAgICAgICB9LA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW1t0cnVlLCAiQ29weXJpZ2h0IFxcZHs0fSIsICJDb3B5cmlnaHQgMjAxNyJdXSwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgICAgICB0eXBlOiAic3R5bGUiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJtaXNzaW5nIGZpbGUgaGVhZGVyIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgY29uc3QgeyB0ZXh0IH0gPSBzb3VyY2VGaWxlOw0KICAgICAgICBjb25zdCBoZWFkZXJGb3JtYXQgPSBuZXcgUmVnRXhwKHRoaXMucnVsZUFyZ3VtZW50c1swXSBhcyBzdHJpbmcpOw0KICAgICAgICBjb25zdCB0ZXh0VG9JbnNlcnQgPSB0aGlzLnJ1bGVBcmd1bWVudHNbMV0gYXMgc3RyaW5nIHwgdW5kZWZpbmVkOw0KDQogICAgICAgIC8vIGlnbm9yZSBzaGViYW5nIGlmIGl0IGV4aXN0cw0KICAgICAgICBsZXQgb2Zmc2V0ID0gdGV4dC5zdGFydHNXaXRoKCIjISIpID8gdGV4dC5pbmRleE9mKCJcbiIpIDogMDsNCiAgICAgICAgLy8gcmV0dXJucyB0aGUgdGV4dCBvZiB0aGUgZmlyc3QgY29tbWVudCBvciB1bmRlZmluZWQNCiAgICAgICAgY29uc3QgY29tbWVudFRleHQgPSB0cy5mb3JFYWNoTGVhZGluZ0NvbW1lbnRSYW5nZSgNCiAgICAgICAgICAgIHRleHQsDQogICAgICAgICAgICBvZmZzZXQsDQogICAgICAgICAgICAocG9zLCBlbmQsIGtpbmQpID0+IHRleHQuc3Vic3RyaW5nKHBvcyArIDIsIGtpbmQgPT09IHRzLlN5bnRheEtpbmQuU2luZ2xlTGluZUNvbW1lbnRUcml2aWEgPyBlbmQgOiBlbmQgLSAyKSk7DQoNCiAgICAgICAgaWYgKGNvbW1lbnRUZXh0ID09PSB1bmRlZmluZWQgfHwgIWhlYWRlckZvcm1hdC50ZXN0KGNvbW1lbnRUZXh0KSkgew0KICAgICAgICAgICAgY29uc3QgaXNFcnJvckF0U3RhcnQgPSBvZmZzZXQgPT09IDA7DQogICAgICAgICAgICBpZiAoIWlzRXJyb3JBdFN0YXJ0KSB7DQogICAgICAgICAgICAgICAgKytvZmZzZXQ7IC8vIHNob3cgd2FybmluZyBpbiBuZXh0IGxpbmUgYWZ0ZXIgc2hlYmFuZw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgbGVhZGluZ05ld2xpbmVzID0gaXNFcnJvckF0U3RhcnQgPyAwIDogMTsNCiAgICAgICAgICAgIGNvbnN0IHRyYWlsaW5nTmV3bGluZXMgPSBpc0Vycm9yQXRTdGFydCA/IDIgOiAxOw0KDQogICAgICAgICAgICBjb25zdCBmaXggPSB0ZXh0VG9JbnNlcnQgIT09IHVuZGVmaW5lZA0KICAgICAgICAgICAgICAgID8gTGludC5SZXBsYWNlbWVudC5hcHBlbmRUZXh0KG9mZnNldCwgdGhpcy5jcmVhdGVDb21tZW50KHNvdXJjZUZpbGUsIHRleHRUb0luc2VydCwgbGVhZGluZ05ld2xpbmVzLCB0cmFpbGluZ05ld2xpbmVzKSkNCiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDsNCiAgICAgICAgICAgIHJldHVybiBbbmV3IExpbnQuUnVsZUZhaWx1cmUoc291cmNlRmlsZSwgb2Zmc2V0LCBvZmZzZXQsIFJ1bGUuRkFJTFVSRV9TVFJJTkcsIHRoaXMucnVsZU5hbWUsIGZpeCldOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBbXTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGNyZWF0ZUNvbW1lbnQoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwgY29tbWVudFRleHQ6IHN0cmluZywgbGVhZGluZ05ld2xpbmVzID0gMSwgdHJhaWxpbmdOZXdsaW5lcyA9IDEpIHsNCiAgICAgICAgY29uc3QgbWF5YmVDYXJyaWFnZVJldHVybiA9IHNvdXJjZUZpbGUudGV4dFtzb3VyY2VGaWxlLmdldExpbmVFbmRPZlBvc2l0aW9uKDApXSA9PT0gIlxyIiA/ICJcciIgOiAiIjsNCiAgICAgICAgY29uc3QgbGluZUVuZGluZyA9IGAke21heWJlQ2FycmlhZ2VSZXR1cm59XG5gOw0KICAgICAgICByZXR1cm4gbGluZUVuZGluZy5yZXBlYXQobGVhZGluZ05ld2xpbmVzKSArIFsNCiAgICAgICAgICAgICIvKiEiLA0KICAgICAgICAgICAgLy8gc3BsaXQgb24gYm90aCB0eXBlcyBvZiBsaW5lIGVuZGluZ3MgaW4gY2FzZSB1c2VycyBqdXN0IHR5cGVkICJcbiIgaW4gdGhlaXIgY29uZmlncw0KICAgICAgICAgICAgLy8gYnV0IGFyZSB3b3JraW5nIGluIGZpbGVzIHdpdGggXHJcbiBsaW5lIGVuZGluZ3MNCiAgICAgICAgICAgIC8vIFRyaW0gdHJhaWxpbmcgc3BhY2VzIHRvIHBsYXkgbmljZSB3aXRoIGBuby10cmFpbGluZy13aGl0ZXNwYWNlYCBydWxlDQogICAgICAgICAgICAuLi5jb21tZW50VGV4dC5zcGxpdCgvXHI/XG4vZykubWFwKChsaW5lKSA9PiBgICogJHtsaW5lfWAucmVwbGFjZSgvXHMrJC8sICIiKSksDQogICAgICAgICAgICAiICovIiwNCiAgICAgICAgXS5qb2luKGxpbmVFbmRpbmcpICsgbGluZUVuZGluZy5yZXBlYXQodHJhaWxpbmdOZXdsaW5lcyk7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "FD4C2517662ACE9C026D1D8204A71996",
              "algorithm": "md5"
            },
            {
              "value": "81A4158F69D68B3322871460D757C9D7D0908605",
              "algorithm": "sha-1"
            },
            {
              "value": "ECD5D1CA05BE8221FD97FC192380E4CB15683CD020E397A82DCCD38E87108D9E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/forinRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCbG9jaywgaXNGb3JJblN0YXRlbWVudCB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAiZm9yaW4iLA0KICAgICAgICBkZXNjcmlwdGlvbjogIlJlcXVpcmVzIGEgYGZvciAuLi4gaW5gIHN0YXRlbWVudCB0byBiZSBmaWx0ZXJlZCB3aXRoIGFuIGBpZmAgc3RhdGVtZW50LiIsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBcYFxgXGB0cw0KICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHNvbWVPYmplY3QpIHsNCiAgICAgICAgICAgICAgICBpZiAoc29tZU9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIGNvZGUgaGVyZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFxgXGBcYA0KICAgICAgICAgICAgUHJldmVudHMgYWNjaWRlbnRhbCBpdGVyYXRpb24gb3ZlciBwcm9wZXJ0aWVzIGluaGVyaXRlZCBmcm9tIGFuIG9iamVjdCdzIHByb3RvdHlwZS4NCiAgICAgICAgICAgIFNlZSBbTUROJ3MgXGBmb3IuLi5pblxgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9TdGF0ZW1lbnRzL2Zvci4uLmluKQ0KICAgICAgICAgICAgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBcYGZvci4uLmluXGAgbG9vcHMuDQoNCiAgICAgICAgICAgIEFsc28gY29uc2lkZXIgdXNpbmcgYSBbXGBNYXBcYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwKQ0KICAgICAgICAgICAgb3IgW1xgU2V0XGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1NldCkNCiAgICAgICAgICAgIGlmIHlvdSdyZSBzdG9yaW5nIGNvbGxlY3Rpb25zIG9mIG9iamVjdHMuDQogICAgICAgICAgICBVc2luZyBcYE9iamVjdFxgcyBjYW4gY2F1c2Ugb2NjYXNpb25hbCBlZGdlIGNhc2UgYnVncywgc3VjaCBhcyBpZiBhIGtleSBpcyBuYW1lZCAiaGFzT3duUHJvcGVydHkiLg0KICAgICAgICBgLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiZm9yICguLi4gaW4gLi4uKSBzdGF0ZW1lbnRzIG11c3QgYmUgZmlsdGVyZWQgd2l0aCBhbiBpZiBzdGF0ZW1lbnQiOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KSB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAoaXNGb3JJblN0YXRlbWVudChub2RlKSAmJiBpc0Jsb2NrKG5vZGUuc3RhdGVtZW50KSAmJiAhaXNGaWx0ZXJlZChub2RlLnN0YXRlbWVudCkpIHsNCiAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0KDQpmdW5jdGlvbiBpc0ZpbHRlcmVkKHtzdGF0ZW1lbnRzfTogdHMuQmxvY2spOiBib29sZWFuIHsNCiAgICBzd2l0Y2ggKHN0YXRlbWVudHMubGVuZ3RoKSB7DQogICAgICAgIGNhc2UgMDogcmV0dXJuIHRydWU7DQogICAgICAgIGNhc2UgMTogcmV0dXJuIHN0YXRlbWVudHNbMF0ua2luZCA9PT0gdHMuU3ludGF4S2luZC5JZlN0YXRlbWVudDsNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiBzdGF0ZW1lbnRzWzBdLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSWZTdGF0ZW1lbnQgJiYgbm9kZUlzQ29udGludWUoKHN0YXRlbWVudHNbMF0gYXMgdHMuSWZTdGF0ZW1lbnQpLnRoZW5TdGF0ZW1lbnQpOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gbm9kZUlzQ29udGludWUobm9kZTogdHMuTm9kZSkgew0KICAgIHJldHVybiBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuQ29udGludWVTdGF0ZW1lbnQgfHwNCiAgICAgICAgaXNCbG9jayhub2RlKSAmJiBub2RlLnN0YXRlbWVudHMubGVuZ3RoID09PSAxICYmIG5vZGUuc3RhdGVtZW50c1swXS5raW5kID09PSB0cy5TeW50YXhLaW5kLkNvbnRpbnVlU3RhdGVtZW50Ow0KfQ0K"
          },
          "hashes": [
            {
              "value": "EE46B27FEFB68971736B62B867D7D528",
              "algorithm": "md5"
            },
            {
              "value": "04ED4DD626A57FF9565870E166E248D966469775",
              "algorithm": "sha-1"
            },
            {
              "value": "41CF5F3C42CC7C52B0D59837861A0DFA01F8C8DB834F7079A026BD2999E2B74A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/importSpacingRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "4E714E26F26A8EC7819D40456BEFFC74",
              "algorithm": "md5"
            },
            {
              "value": "2EFA3C1B6000B6C8D040635AAB6070656394AD34",
              "algorithm": "sha-1"
            },
            {
              "value": "FA300A225E0470BE050DAECAA6A7374EC74870384BF80C0C913E70B4B993AD5C",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/indentRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0TGluZVJhbmdlcywgZ2V0VG9rZW5BdFBvc2l0aW9uLCBpc1Bvc2l0aW9uSW5Db21tZW50IH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IE9QVElPTl9VU0VfVEFCUyA9ICJ0YWJzIjsNCmNvbnN0IE9QVElPTl9VU0VfU1BBQ0VTID0gInNwYWNlcyI7DQpjb25zdCBPUFRJT05fSU5ERU5UX1NJWkVfMiA9IDI7DQpjb25zdCBPUFRJT05fSU5ERU5UX1NJWkVfNCA9IDQ7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJpbmRlbnQiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkVuZm9yY2VzIGluZGVudGF0aW9uIHdpdGggdGFicyBvciBzcGFjZXMuIiwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIFVzaW5nIG9ubHkgb25lIG9mIHRhYnMgb3Igc3BhY2VzIGZvciBpbmRlbnRhdGlvbiBsZWFkcyB0byBtb3JlIGNvbnNpc3RlbnQgZWRpdG9yIGJlaGF2aW9yLA0KICAgICAgICAgICAgY2xlYW5lciBkaWZmcyBpbiB2ZXJzaW9uIGNvbnRyb2wsIGFuZCBlYXNpZXIgcHJvZ3JhbW1hdGljIG1hbmlwdWxhdGlvbi5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgT25lIG9mIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzIG11c3QgYmUgcHJvdmlkZWQ6DQoNCiAgICAgICAgICAgICogXGAke09QVElPTl9VU0VfU1BBQ0VTfVxgIGVuZm9yY2VzIGNvbnNpc3RlbnQgc3BhY2VzLg0KICAgICAgICAgICAgKiBcYCR7T1BUSU9OX1VTRV9UQUJTfVxgIGVuZm9yY2VzIGNvbnNpc3RlbnQgdGFicy4NCg0KICAgICAgICAgICAgQSBzZWNvbmQgb3B0aW9uYWwgYXJndW1lbnQgc3BlY2lmaWVzIGluZGVudGF0aW9uIHNpemU6DQoNCiAgICAgICAgICAgICogXGAke09QVElPTl9JTkRFTlRfU0laRV8yLnRvU3RyaW5nKCl9XGAgZW5mb3JjZXMgMiBzcGFjZSBpbmRlbnRhdGlvbi4NCiAgICAgICAgICAgICogXGAke09QVElPTl9JTkRFTlRfU0laRV80LnRvU3RyaW5nKCl9XGAgZW5mb3JjZXMgNCBzcGFjZSBpbmRlbnRhdGlvbi4NCg0KICAgICAgICAgICAgSW5kZW50YXRpb24gc2l6ZSBpcyAqKnJlcXVpcmVkKiogZm9yIGF1dG8tZml4aW5nLCBidXQgbm90IGZvciBydWxlIGNoZWNraW5nLg0KDQogICAgICAgICAgICAqKk5PVEUqKjogYXV0by1maXhpbmcgd2lsbCBvbmx5IGNvbnZlcnQgaW52YWxpZCBpbmRlbnQgd2hpdGVzcGFjZSB0byB0aGUgZGVzaXJlZCB0eXBlLCBpdCB3aWxsIG5vdCBmaXggaW52YWxpZCB3aGl0ZXNwYWNlIHNpemVzLg0KICAgICAgICAgICAgYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgIGl0ZW1zOiBbDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICAgICAgZW51bTogW09QVElPTl9VU0VfVEFCUywgT1BUSU9OX1VTRV9TUEFDRVNdLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0eXBlOiAibnVtYmVyIiwNCiAgICAgICAgICAgICAgICAgICAgZW51bTogW09QVElPTl9JTkRFTlRfU0laRV8yLCBPUFRJT05fSU5ERU5UX1NJWkVfNF0sDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIF0sDQogICAgICAgICAgICBtaW5MZW5ndGg6IDAsDQogICAgICAgICAgICBtYXhMZW5ndGg6IDUsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbDQogICAgICAgICAgICBbdHJ1ZSwgT1BUSU9OX1VTRV9TUEFDRVNdLA0KICAgICAgICAgICAgW3RydWUsIE9QVElPTl9VU0VfU1BBQ0VTLCBPUFRJT05fSU5ERU5UX1NJWkVfNF0sDQogICAgICAgICAgICBbdHJ1ZSwgT1BUSU9OX1VTRV9UQUJTLCBPUFRJT05fSU5ERU5UX1NJWkVfMl0sDQogICAgICAgIF0sDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICAgICAgdHlwZTogIm1haW50YWluYWJpbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HKGV4cGVjdGVkOiBzdHJpbmcpOiBzdHJpbmcgew0KICAgICAgICByZXR1cm4gYCR7ZXhwZWN0ZWR9IGluZGVudGF0aW9uIGV4cGVjdGVkYDsNCiAgICB9DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIGNvbnN0IG9wdGlvbnMgPSBwYXJzZU9wdGlvbnModGhpcy5ydWxlQXJndW1lbnRzKTsNCiAgICAgICAgcmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/IFtdIDogdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCBvcHRpb25zKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHBhcnNlT3B0aW9ucyhydWxlQXJndW1lbnRzOiBhbnlbXSk6IE9wdGlvbnMgfCB1bmRlZmluZWQgew0KICAgIGNvbnN0IHR5cGUgPSBydWxlQXJndW1lbnRzWzBdIGFzIHN0cmluZzsNCiAgICBpZiAodHlwZSAhPT0gT1BUSU9OX1VTRV9UQUJTICYmIHR5cGUgIT09IE9QVElPTl9VU0VfU1BBQ0VTKSB7IHJldHVybiB1bmRlZmluZWQ7IH0NCg0KICAgIGNvbnN0IHNpemUgPSBydWxlQXJndW1lbnRzWzFdIGFzIG51bWJlciB8IHVuZGVmaW5lZDsNCiAgICByZXR1cm4gew0KICAgICAgICBzaXplOiBzaXplID09PSBPUFRJT05fSU5ERU5UX1NJWkVfMiB8fCBzaXplID09PSBPUFRJT05fSU5ERU5UX1NJWkVfNCA/IHNpemUgOiB1bmRlZmluZWQsDQogICAgICAgIHRhYnM6IHR5cGUgPT09IE9QVElPTl9VU0VfVEFCUywNCiAgICB9Ow0KfQ0KDQppbnRlcmZhY2UgT3B0aW9ucyB7DQogICAgcmVhZG9ubHkgdGFiczogYm9vbGVhbjsNCiAgICByZWFkb25seSBzaXplPzogMiB8IDQ7DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PE9wdGlvbnM+KTogdm9pZCB7DQogICAgY29uc3QgeyBzb3VyY2VGaWxlLCBvcHRpb25zOiB7IHRhYnMsIHNpemUgfSB9ID0gY3R4Ow0KICAgIGNvbnN0IHJlZ0V4cCA9IHRhYnMgPyBuZXcgUmVnRXhwKCIgIi5yZXBlYXQoc2l6ZSA9PT0gdW5kZWZpbmVkID8gMSA6IHNpemUpKSA6IC9cdC87DQogICAgY29uc3QgZmFpbHVyZSA9IFJ1bGUuRkFJTFVSRV9TVFJJTkcodGFicyA/ICJ0YWIiIDogc2l6ZSA9PT0gdW5kZWZpbmVkID8gInNwYWNlIiA6IGAke3NpemV9IHNwYWNlYCk7DQoNCiAgICBmb3IgKGNvbnN0IHtwb3MsIGNvbnRlbnRMZW5ndGh9IG9mIGdldExpbmVSYW5nZXMoc291cmNlRmlsZSkpIHsNCiAgICAgICAgaWYgKGNvbnRlbnRMZW5ndGggPT09IDApIHsgY29udGludWU7IH0NCiAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZUZpbGUudGV4dC5zdWJzdHIocG9zLCBjb250ZW50TGVuZ3RoKTsNCiAgICAgICAgbGV0IGluZGVudEVuZCA9IGxpbmUuc2VhcmNoKC9cUy8pOw0KICAgICAgICBpZiAoaW5kZW50RW5kID09PSAwKSB7IGNvbnRpbnVlOyB9DQogICAgICAgIGlmIChpbmRlbnRFbmQgPT09IC0xKSB7DQogICAgICAgICAgICBpbmRlbnRFbmQgPSBjb250ZW50TGVuZ3RoOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IHdoaXRlc3BhY2UgPSBsaW5lLnNsaWNlKDAsIGluZGVudEVuZCk7DQogICAgICAgIGlmICghcmVnRXhwLnRlc3Qod2hpdGVzcGFjZSkpIHsgY29udGludWU7IH0NCiAgICAgICAgY29uc3QgdG9rZW4gPSBnZXRUb2tlbkF0UG9zaXRpb24oc291cmNlRmlsZSwgcG9zKSE7DQogICAgICAgIGlmICh0b2tlbi5raW5kICE9PSB0cy5TeW50YXhLaW5kLkpzeFRleHQgJiYNCiAgICAgICAgICAgIChwb3MgPj0gdG9rZW4uZ2V0U3RhcnQoc291cmNlRmlsZSkgfHwgaXNQb3NpdGlvbkluQ29tbWVudChzb3VyY2VGaWxlLCBwb3MsIHRva2VuKSkpIHsNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICB9DQogICAgICAgIGN0eC5hZGRGYWlsdXJlQXQocG9zLCBpbmRlbnRFbmQsIGZhaWx1cmUsIGNyZWF0ZUZpeChwb3MsIHdoaXRlc3BhY2UsIHRhYnMsIHNpemUpKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGNyZWF0ZUZpeChsaW5lU3RhcnQ6IG51bWJlciwgZnVsbExlYWRpbmdXaGl0ZXNwYWNlOiBzdHJpbmcsIHRhYnM6IGJvb2xlYW4sIHNpemU/OiBudW1iZXIpOiBMaW50LkZpeCB8IHVuZGVmaW5lZCB7DQogICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9DQogICAgY29uc3QgcmVwbGFjZVJlZ0V4cCA9IHRhYnMNCiAgICAgICAgLy8gd2Ugd2FudCB0byBmaW5kIGV2ZXJ5IGdyb3VwIG9mIGBzaXplYCBzcGFjZXMsIHBsdXMgdXAgdG8gb25lICdpbmNvbXBsZXRlJyBncm91cA0KICAgICAgICA/IG5ldyBSZWdFeHAoYF4oIHske3NpemV9fSkrKCB7MSwke3NpemUgLSAxfX0pP2AsICJnIikNCiAgICAgICAgOiAvXHQvZzsNCiAgICBjb25zdCByZXBsYWNlbWVudCA9IGZ1bGxMZWFkaW5nV2hpdGVzcGFjZS5yZXBsYWNlKHJlcGxhY2VSZWdFeHAsIChtYXRjaCkgPT4NCiAgICAgICAgKHRhYnMgPyAiXHQiIDogIiAiLnJlcGVhdChzaXplKSkucmVwZWF0KE1hdGguY2VpbChtYXRjaC5sZW5ndGggLyBzaXplKSkpOw0KICAgIHJldHVybiBuZXcgTGludC5SZXBsYWNlbWVudChsaW5lU3RhcnQsIGZ1bGxMZWFkaW5nV2hpdGVzcGFjZS5sZW5ndGgsIHJlcGxhY2VtZW50KTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "285272F4E981786DF2D37BFBCBE2301E",
              "algorithm": "md5"
            },
            {
              "value": "63D8E9B753F2E2750C3AD992A1198B735DF367D1",
              "algorithm": "sha-1"
            },
            {
              "value": "0C58F127602A03F2F02F71F5DD89DABF65CEF57664A6181559DD22D895FA3B3E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/interfaceOverTypeLiteralRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0Q2hpbGRPZktpbmQsIGlzVHlwZUFsaWFzRGVjbGFyYXRpb24sIGlzVHlwZUxpdGVyYWxOb2RlIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAiaW50ZXJmYWNlLW92ZXItdHlwZS1saXRlcmFsIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJQcmVmZXIgYW4gaW50ZXJmYWNlIGRlY2xhcmF0aW9uIG92ZXIgYSB0eXBlIGxpdGVyYWwgKGB0eXBlIFQgPSB7IC4uLiB9YCkiLA0KICAgICAgICByYXRpb25hbGU6ICJJbnRlcmZhY2VzIGFyZSBnZW5lcmFsbHkgcHJlZmVycmVkIG92ZXIgdHlwZSBsaXRlcmFscyBiZWNhdXNlIGludGVyZmFjZXMgY2FuIGJlIGltcGxlbWVudGVkLCBleHRlbmRlZCBhbmQgbWVyZ2VkLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUuIiwNCiAgICAgICAgb3B0aW9uczogbnVsbCwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlXSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IHRydWUsDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIlVzZSBhbiBpbnRlcmZhY2UgaW5zdGVhZCBvZiBhIHR5cGUgbGl0ZXJhbC4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KTogdm9pZCB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZTogdHMuTm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAoaXNUeXBlQWxpYXNEZWNsYXJhdGlvbihub2RlKSAmJiBpc1R5cGVMaXRlcmFsTm9kZShub2RlLnR5cGUpKSB7DQogICAgICAgICAgICBjb25zdCB0eXBlS2V5d29yZCA9IGdldENoaWxkT2ZLaW5kKG5vZGUsIHRzLlN5bnRheEtpbmQuVHlwZUtleXdvcmQsIGN0eC5zb3VyY2VGaWxlKSE7DQogICAgICAgICAgICBjb25zdCBmaXggPSBbDQogICAgICAgICAgICAgICAgLy8gInR5cGUiIC0+ICJpbnRlcmZhY2UiDQogICAgICAgICAgICAgICAgbmV3IExpbnQuUmVwbGFjZW1lbnQodHlwZUtleXdvcmQuZW5kIC0gNCwgNCwgImludGVyZmFjZSIpLA0KICAgICAgICAgICAgICAgIC8vIHJlbW92ZSAiPSIgYW5kIHRyaXZpYSB1cCB0byB0aGUgb3BlbiBjdXJseSBicmFjZSBvZiB0aGUgdHlwZSBsaXRlcmFsDQogICAgICAgICAgICAgICAgTGludC5SZXBsYWNlbWVudC5kZWxldGVGcm9tVG8obm9kZS50eXBlLnBvcyAtIDEsIG5vZGUudHlwZS5tZW1iZXJzLnBvcyAtIDEpLA0KICAgICAgICAgICAgXTsNCiAgICAgICAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyBzZW1pY29sb24gaWYgZXhpc3RzDQogICAgICAgICAgICBpZiAoY3R4LnNvdXJjZUZpbGUudGV4dFtub2RlLmVuZCAtIDFdID09PSAiOyIpIHsNCiAgICAgICAgICAgICAgICBmaXgucHVzaChMaW50LlJlcGxhY2VtZW50LmRlbGV0ZVRleHQobm9kZS5lbmQgLSAxLCAxKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLm5hbWUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcsIGZpeCk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQo="
          },
          "hashes": [
            {
              "value": "2A0CE55B62237EF244BD3C15E5D1BCFC",
              "algorithm": "md5"
            },
            {
              "value": "7FE532CCC99522B637BED0F5763D1258EA064F9F",
              "algorithm": "sha-1"
            },
            {
              "value": "C19CF269DD871890002075DD13A1208908E7F8058D490304412B785F1BA9ADEC",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/jsdocFormatRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IE9QVElPTl9DSEVDS19NVUxUSUxJTkVfU1RBUlQgPSAiY2hlY2stbXVsdGlsaW5lLXN0YXJ0IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImpzZG9jLWZvcm1hdCIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRW5mb3JjZXMgYmFzaWMgZm9ybWF0IHJ1bGVzIGZvciBKU0RvYyBjb21tZW50cy4iLA0KICAgICAgICBkZXNjcmlwdGlvbkRldGFpbHM6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgVGhlIGZvbGxvd2luZyBydWxlcyBhcmUgZW5mb3JjZWQgZm9yIEpTRG9jIGNvbW1lbnRzIChjb21tZW50cyBzdGFydGluZyB3aXRoIFxgLyoqXGApOg0KDQogICAgICAgICAgICAqIGVhY2ggbGluZSBjb250YWlucyBhbiBhc3RlcmlzayBhbmQgYXN0ZXJpc2tzIG11c3QgYmUgYWxpZ25lZA0KICAgICAgICAgICAgKiBlYWNoIGFzdGVyaXNrIG11c3QgYmUgZm9sbG93ZWQgYnkgZWl0aGVyIGEgc3BhY2Ugb3IgYSBuZXdsaW5lIChleGNlcHQgZm9yIHRoZSBmaXJzdCBhbmQgdGhlIGxhc3QpDQogICAgICAgICAgICAqIHRoZSBvbmx5IGNoYXJhY3RlcnMgYmVmb3JlIHRoZSBhc3RlcmlzayBvbiBlYWNoIGxpbmUgbXVzdCBiZSB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMNCiAgICAgICAgICAgICogb25lIGxpbmUgY29tbWVudHMgbXVzdCBzdGFydCB3aXRoIFxgLyoqIFxgIGFuZCBlbmQgd2l0aCBcYCovXGANCiAgICAgICAgICAgICogbXVsdGlsaW5lIGNvbW1lbnRzIGRvbid0IGFsbG93IHRleHQgYWZ0ZXIgXGAvKiogXGAgaW4gdGhlIGZpcnN0IGxpbmUgKHdpdGggb3B0aW9uIFxgIiR7T1BUSU9OX0NIRUNLX01VTFRJTElORV9TVEFSVH0iXGApDQogICAgICAgIGAsDQogICAgICAgIHJhdGlvbmFsZTogIkhlbHBzIG1haW50YWluIGEgY29uc2lzdGVudCwgcmVhZGFibGUgc3R5bGUgZm9yIEpTRG9jIGNvbW1lbnRzLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBZb3UgY2FuIG9wdGlvbmFsbHkgc3BlY2lmeSB0aGUgb3B0aW9uIFxgIiR7T1BUSU9OX0NIRUNLX01VTFRJTElORV9TVEFSVH0iXGAgdG8gZW5mb3JjZSB0aGUgZmlyc3QgbGluZSBvZiBhDQogICAgICAgICAgICBtdWx0aWxpbmUgSlNEb2MgY29tbWVudCB0byBiZSBlbXB0eS4NCiAgICAgICAgYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgIG1pbkl0ZW1zOiAwLA0KICAgICAgICAgICAgbWF4SXRlbXM6IDEsDQogICAgICAgICAgICBpdGVtczogew0KICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgICAgIGVudW06IFtPUFRJT05fQ0hFQ0tfTVVMVElMSU5FX1NUQVJUXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZSwgW3RydWUsIE9QVElPTl9DSEVDS19NVUxUSUxJTkVfU1RBUlRdXSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgQUxJR05NRU5UX0ZBSUxVUkVfU1RSSU5HID0gImFzdGVyaXNrcyBpbiBqc2RvYyBtdXN0IGJlIGFsaWduZWQiOw0KICAgIHB1YmxpYyBzdGF0aWMgRk9STUFUX0ZBSUxVUkVfU1RSSU5HID0gImpzZG9jIGlzIG5vdCBmb3JtYXR0ZWQgY29ycmVjdGx5IG9uIHRoaXMgbGluZSI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHsNCiAgICAgICAgICAgIGZpcnN0TGluZU9mTXVsdGlsaW5lOiB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihPUFRJT05fQ0hFQ0tfTVVMVElMSU5FX1NUQVJUKSAhPT0gLTEsDQogICAgICAgIH0pOw0KICAgIH0NCn0NCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIGZpcnN0TGluZU9mTXVsdGlsaW5lOiBib29sZWFuOw0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDxPcHRpb25zPikgew0KICAgIHJldHVybiB1dGlscy5mb3JFYWNoQ29tbWVudChjdHguc291cmNlRmlsZSwgKGZ1bGxUZXh0LCB7a2luZCwgcG9zLCBlbmR9KSA9PiB7DQogICAgICAgIGlmIChraW5kICE9PSB0cy5TeW50YXhLaW5kLk11bHRpTGluZUNvbW1lbnRUcml2aWEgfHwNCiAgICAgICAgICAgIGZ1bGxUZXh0W3BvcyArIDJdICE9PSAiKiIgfHwgZnVsbFRleHRbcG9zICsgM10gPT09ICIqIiB8fCBmdWxsVGV4dFtwb3MgKyAzXSA9PT0gIi8iKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgbGluZXMgPSBmdWxsVGV4dC5zbGljZShwb3MgKyAzLCBlbmQgLSAyKS5zcGxpdCgiXG4iKTsNCiAgICAgICAgY29uc3QgZmlyc3RMaW5lID0gbGluZXNbMF07DQogICAgICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDEpIHsNCiAgICAgICAgICAgIGlmIChmaXJzdExpbmVbMF0gIT09ICIgIiB8fCAhZmlyc3RMaW5lLmVuZHNXaXRoKCIgIikpIHsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZShwb3MsIGVuZCwgUnVsZS5GT1JNQVRfRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgYWxpZ25Db2x1bW4gPSBnZXRBbGlnbkNvbHVtbihjdHguc291cmNlRmlsZSwgcG9zICsgMSk7DQogICAgICAgIGlmIChjdHgub3B0aW9ucy5maXJzdExpbmVPZk11bHRpbGluZSAmJiAvXFMvLnRlc3QoZmlyc3RMaW5lKSkgew0KICAgICAgICAgICAgLy8gZmlyc3QgbGluZSBvZiBtdWx0aWxpbmUgSlNEb2Mgc2hvdWxkIGJlIGVtcHR5LCBpLmUuIG9ubHkgY29udGFpbiB3aGl0ZXNwYWNlDQogICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0KHBvcywgZmlyc3RMaW5lLmxlbmd0aCArIDMsIFJ1bGUuRk9STUFUX0ZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgfQ0KICAgICAgICBsZXQgbGluZVN0YXJ0ID0gcG9zICsgZmlyc3RMaW5lLmxlbmd0aCArIDQ7IC8vICszIGZvciB0aGUgY29tbWVudCBzdGFydCAiLyoqIiBhbmQgKzEgZm9yIHRoZSBuZXdsaW5lDQogICAgICAgIGNvbnN0IGVuZEluZGV4ID0gbGluZXMubGVuZ3RoIC0gMTsNCiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBlbmRJbmRleDsgKytpKSB7DQogICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV0uZW5kc1dpdGgoIlxyIikgPyBsaW5lc1tpXS5zbGljZSgwLCAtMSkgOiBsaW5lc1tpXTsNCiAgICAgICAgICAgIC8vIHJlZ2V4IGlzOiBzdGFydCBvZiBzdHJpbmcsIGZvbGxvd2VkIGJ5IGFueSBhbW91bnQgb2Ygd2hpdGVzcGFjZSwgZm9sbG93ZWQgYnkgKiwNCiAgICAgICAgICAgIC8vIGZvbGxvd2VkIGJ5IGVpdGhlciBhIHNwYWNlIG9yIHRoZSBlbmQgb2YgdGhlIHN0cmluZw0KICAgICAgICAgICAgaWYgKCEvXlxzKlwqKD86IHwkKS8udGVzdChsaW5lKSkgew0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXQobGluZVN0YXJ0LCBsaW5lLmxlbmd0aCwgUnVsZS5GT1JNQVRfRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZigiKiIpICE9PSBhbGlnbkNvbHVtbikgew0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXQobGluZVN0YXJ0LCBsaW5lLmxlbmd0aCwgUnVsZS5BTElHTk1FTlRfRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgbGluZVN0YXJ0ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7IC8vICsgMSBmb3IgdGhlIHNwbGl0dGVkLW91dCBuZXdsaW5lDQogICAgICAgIH0NCiAgICAgICAgY29uc3QgbGFzdExpbmUgPSBsaW5lc1tlbmRJbmRleF07DQogICAgICAgIC8vIGxhc3QgbGluZSBzaG91bGQgb25seSBjb25zaXN0IG9mIHdoaXRlc3BhY2UNCiAgICAgICAgaWYgKGxhc3RMaW5lLnNlYXJjaCgvXFMvKSAhPT0gLTEpIHsNCiAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlKGxpbmVTdGFydCwgZW5kLCBSdWxlLkZPUk1BVF9GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGxhc3RMaW5lLmxlbmd0aCAhPT0gYWxpZ25Db2x1bW4pIHsNCiAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlKGxpbmVTdGFydCwgZW5kLCBSdWxlLkFMSUdOTUVOVF9GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0NCg0KICAgIH0pOw0KfQ0KDQpmdW5jdGlvbiBnZXRBbGlnbkNvbHVtbihzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlLCBwb3M6IG51bWJlcikgew0KICAgIGNvbnN0IHJlc3VsdCA9IHRzLmdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uKHNvdXJjZUZpbGUsIHBvcyk7DQogICAgLy8gaGFuZGxlIGZpbGVzIHN0YXJ0aW5nIHdpdGggQk9NDQogICAgcmV0dXJuIHJlc3VsdC5saW5lID09PSAwICYmIHNvdXJjZUZpbGUudGV4dFswXSA9PT0gIlx1RkVGRiINCiAgICAgICAgPyByZXN1bHQuY2hhcmFjdGVyIC0gMQ0KICAgICAgICA6IHJlc3VsdC5jaGFyYWN0ZXI7DQp9DQo="
          },
          "hashes": [
            {
              "value": "FFA697AFF0A2F3879A8ACF7591406002",
              "algorithm": "md5"
            },
            {
              "value": "35FAEC20C8D5FCE0F0C348BEE8E607EA49BDAD46",
              "algorithm": "sha-1"
            },
            {
              "value": "7024923C242798C2377593A6FBB1C02B5DA161AFFF9F4FF411E4406D241586BF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/linebreakStyleRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpjb25zdCBPUFRJT05fTElORUJSRUFLX1NUWUxFX0NSTEYgPSAiQ1JMRiI7DQpjb25zdCBPUFRJT05fTElORUJSRUFLX1NUWUxFX0xGID0gIkxGIjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogImxpbmVicmVhay1zdHlsZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRW5mb3JjZXMgYSBjb25zaXN0ZW50IGxpbmVicmVhayBzdHlsZS4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgT25lIG9mIHRoZSBmb2xsb3dpbmcgb3B0aW9ucyBtdXN0IGJlIHByb3ZpZGVkOg0KDQogICAgICAgICAgICAqIFxgIiR7T1BUSU9OX0xJTkVCUkVBS19TVFlMRV9MRn0iXGAgcmVxdWlyZXMgTEYgKFxgXFxuXGApIGxpbmVicmVha3MNCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fTElORUJSRUFLX1NUWUxFX0NSTEZ9IlxgIHJlcXVpcmVzIENSTEYgKFxgXFxyXFxuXGApIGxpbmVicmVha3NgLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgIGVudW06IFtPUFRJT05fTElORUJSRUFLX1NUWUxFX0xGLCBPUFRJT05fTElORUJSRUFLX1NUWUxFX0NSTEZdLA0KICAgICAgICB9LA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW1t0cnVlLCBPUFRJT05fTElORUJSRUFLX1NUWUxFX0xGXSwgW3RydWUsIE9QVElPTl9MSU5FQlJFQUtfU1RZTEVfQ1JMRl1dLA0KICAgICAgICB0eXBlOiAibWFpbnRhaW5hYmlsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX0NSTEYgPSBgRXhwZWN0ZWQgbGluZWJyZWFrIHRvIGJlICcke09QVElPTl9MSU5FQlJFQUtfU1RZTEVfQ1JMRn0nYDsNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfTEYgPSBgRXhwZWN0ZWQgbGluZWJyZWFrIHRvIGJlICcke09QVElPTl9MSU5FQlJFQUtfU1RZTEVfTEZ9J2A7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9MSU5FQlJFQUtfU1RZTEVfQ1JMRikgIT09IC0xKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PGJvb2xlYW4+KSB7DQogICAgY29uc3QgZXhwZWN0ZWRDciA9IGN0eC5vcHRpb25zOw0KICAgIGNvbnN0IHNvdXJjZVRleHQgPSBjdHguc291cmNlRmlsZS50ZXh0Ow0KICAgIGNvbnN0IGxpbmVTdGFydHMgPSBjdHguc291cmNlRmlsZS5nZXRMaW5lU3RhcnRzKCk7DQogICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lU3RhcnRzLmxlbmd0aDsgKytpKSB7DQogICAgICAgIGNvbnN0IGxpbmVFbmQgPSBsaW5lU3RhcnRzW2ldIC0gMTsNCiAgICAgICAgaWYgKHNvdXJjZVRleHRbbGluZUVuZCAtIDFdID09PSAiXHIiKSB7DQogICAgICAgICAgICBpZiAoIWV4cGVjdGVkQ3IpIHsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZShsaW5lU3RhcnRzW2kgLSAxXSwgbGluZUVuZCAtIDEsIFJ1bGUuRkFJTFVSRV9MRiwgTGludC5SZXBsYWNlbWVudC5kZWxldGVUZXh0KGxpbmVFbmQgLSAxLCAxKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRDcikgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmUobGluZVN0YXJ0c1tpIC0gMV0sIGxpbmVFbmQsIFJ1bGUuRkFJTFVSRV9DUkxGLCBMaW50LlJlcGxhY2VtZW50LmFwcGVuZFRleHQobGluZUVuZCwgIlxyIikpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "3C0AEEA0C0C037FE45DB9B872D6E2B56",
              "algorithm": "md5"
            },
            {
              "value": "E77F351F8AEF8657FC6E8EB4272739B85B86D9D5",
              "algorithm": "sha-1"
            },
            {
              "value": "4A7C522BB3DBF6120D7C891332A3EB683E888F94940CBEAAC05C15BFC7898EFA",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/maxClassesPerFileRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNDbGFzc0RlY2xhcmF0aW9uLCBpc0NsYXNzRXhwcmVzc2lvbiB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIGV4Y2x1ZGVDbGFzc0V4cHJlc3Npb25zOiBib29sZWFuOw0KICAgIG1heENsYXNzZXM6IG51bWJlcjsNCn0NCg0KY29uc3QgT1BUSU9OX0VYQ0xVREVfQ0xBU1NfRVhQUkVTU0lPTlMgPSAiZXhjbHVkZS1jbGFzcy1leHByZXNzaW9ucyI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KDQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm1heC1jbGFzc2VzLXBlci1maWxlIiwNCiAgICAgICAgZGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgQSBmaWxlIG1heSBub3QgY29udGFpbiBtb3JlIHRoYW4gdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgY2xhc3Nlc2AsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBFbnN1cmVzIHRoYXQgZmlsZXMgaGF2ZSBhIHNpbmdsZSByZXNwb25zaWJpbGl0eSBzbyB0aGF0IHRoYXQgY2xhc3NlcyBlYWNoIGV4aXN0IGluIHRoZWlyIG93biBmaWxlc2AsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBUaGUgb25lIHJlcXVpcmVkIGFyZ3VtZW50IGlzIGFuIGludGVnZXIgaW5kaWNhdGluZyB0aGUgbWF4aW11bSBudW1iZXIgb2YgY2xhc3NlcyB0aGF0IGNhbiBhcHBlYXIgaW4gYQ0KICAgICAgICAgICAgZmlsZS4gQW4gb3B0aW9uYWwgYXJndW1lbnQgXGAiZXhjbHVkZS1jbGFzcy1leHByZXNzaW9ucyJcYCBjYW4gYmUgcHJvdmlkZWQgdG8gZXhjbHVkZSBjbGFzcyBleHByZXNzaW9ucw0KICAgICAgICAgICAgZnJvbSB0aGUgb3ZlcmFsbCBjbGFzcyBjb3VudC5gLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgaXRlbXM6IFsNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJudW1iZXIiLA0KICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAxLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICAgICAgZW51bTogW09QVElPTl9FWENMVURFX0NMQVNTX0VYUFJFU1NJT05TXSwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgXSwNCiAgICAgICAgICAgIGFkZGl0aW9uYWxJdGVtczogZmFsc2UsDQogICAgICAgICAgICBtaW5MZW5ndGg6IDEsDQogICAgICAgICAgICBtYXhMZW5ndGg6IDIsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbW3RydWUsIDFdLCBbdHJ1ZSwgNSwgT1BUSU9OX0VYQ0xVREVfQ0xBU1NfRVhQUkVTU0lPTlNdXSwNCiAgICAgICAgdHlwZTogIm1haW50YWluYWJpbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HKG1heENvdW50OiBudW1iZXIpOiBzdHJpbmcgew0KICAgICAgICBjb25zdCBtYXhDbGFzc1dvcmQgPSBtYXhDb3VudCA9PT0gMSA/ICJjbGFzcyBwZXIgZmlsZSBpcyIgOiAiY2xhc3NlcyBwZXIgZmlsZSBhcmUiOw0KICAgICAgICByZXR1cm4gYEEgbWF4aW11bSBvZiAke21heENvdW50fSAke21heENsYXNzV29yZH0gYWxsb3dlZC5gOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgY29uc3QgYXJndW1lbnQgPSB0aGlzLnJ1bGVBcmd1bWVudHNbMF0gYXMgbnVtYmVyOw0KICAgICAgICBjb25zdCBtYXhDbGFzc2VzID0gaXNOYU4oYXJndW1lbnQpIHx8IGFyZ3VtZW50ID4gMCA/IGFyZ3VtZW50IDogMTsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsaywgew0KICAgICAgICAgICAgZXhjbHVkZUNsYXNzRXhwcmVzc2lvbnM6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9FWENMVURFX0NMQVNTX0VYUFJFU1NJT05TKSAhPT0gLTEsDQogICAgICAgICAgICBtYXhDbGFzc2VzLA0KICAgICAgICB9KTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PE9wdGlvbnM+KTogdm9pZCB7DQogICAgY29uc3QgeyBzb3VyY2VGaWxlLCBvcHRpb25zOiB7IG1heENsYXNzZXMsIGV4Y2x1ZGVDbGFzc0V4cHJlc3Npb25zIH0gfSA9IGN0eDsNCiAgICBsZXQgY2xhc3NlcyA9IDA7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChzb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChpc0NsYXNzRGVjbGFyYXRpb24obm9kZSkgfHwgKCFleGNsdWRlQ2xhc3NFeHByZXNzaW9ucyAmJiBpc0NsYXNzRXhwcmVzc2lvbihub2RlKSkpIHsNCiAgICAgICAgICAgIGNsYXNzZXMrKzsNCiAgICAgICAgICAgIGlmIChjbGFzc2VzID4gbWF4Q2xhc3Nlcykgew0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcobWF4Q2xhc3NlcykpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "4C0E8D79366383E80160739090F7C911",
              "algorithm": "md5"
            },
            {
              "value": "ADCC90902A6997A25D31847BDEE262FEB4BA2D7E",
              "algorithm": "sha-1"
            },
            {
              "value": "26E9B383E56FCEE96FDA5501BC491F0B977BE5B696C04C5E5AED5B32BC76FCB0",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/maxFileLineCountRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm1heC1maWxlLWxpbmUtY291bnQiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIlJlcXVpcmVzIGZpbGVzIHRvIHJlbWFpbiB1bmRlciBhIGNlcnRhaW4gbnVtYmVyIG9mIGxpbmVzIiwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIExpbWl0aW5nIHRoZSBudW1iZXIgb2YgbGluZXMgYWxsb3dlZCBpbiBhIGZpbGUgYWxsb3dzIGZpbGVzIHRvIHJlbWFpbiBzbWFsbCwNCiAgICAgICAgICAgIHNpbmdsZSBwdXJwb3NlLCBhbmQgbWFpbnRhaW5hYmxlLmAsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIkFuIGludGVnZXIgaW5kaWNhdGluZyB0aGUgbWF4aW11bSBudW1iZXIgb2YgbGluZXMuIiwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogIm51bWJlciIsDQogICAgICAgICAgICBtaW5pbXVtOiAiMSIsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbW3RydWUsIDMwMF1dLA0KICAgICAgICB0eXBlOiAibWFpbnRhaW5hYmlsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcobGluZUNvdW50OiBudW1iZXIsIGxpbmVMaW1pdDogbnVtYmVyKSB7DQogICAgICAgIHJldHVybiBgVGhpcyBmaWxlIGhhcyAke2xpbmVDb3VudH0gbGluZXMsIHdoaWNoIGV4Y2VlZHMgdGhlIG1heGltdW0gb2YgJHtsaW5lTGltaXR9IGxpbmVzIGFsbG93ZWQuIGAgKw0KICAgICAgICAgICAgIkNvbnNpZGVyIGJyZWFraW5nIHRoaXMgZmlsZSB1cCBpbnRvIHNtYWxsZXIgcGFydHMiOw0KICAgIH0NCg0KICAgIHB1YmxpYyBpc0VuYWJsZWQoKTogYm9vbGVhbiB7DQogICAgICAgIHJldHVybiBzdXBlci5pc0VuYWJsZWQoKSAmJiB0aGlzLnJ1bGVBcmd1bWVudHNbMF0gYXMgbnVtYmVyID4gMDsNCiAgICB9DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIGNvbnN0IGxpbmVMaW1pdCA9IHRoaXMucnVsZUFyZ3VtZW50c1swXSBhcyBudW1iZXI7DQogICAgICAgIGNvbnN0IGxpbmVDb3VudCA9IHNvdXJjZUZpbGUuZ2V0TGluZVN0YXJ0cygpLmxlbmd0aDsNCiAgICAgICAgaWYgKGxpbmVDb3VudCA8PSBsaW5lTGltaXQpIHsNCiAgICAgICAgICAgIHJldHVybiBbXTsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnN0IGxlbiA9IHNvdXJjZUZpbGUudGV4dC5sZW5ndGg7DQogICAgICAgIHJldHVybiBbbmV3IExpbnQuUnVsZUZhaWx1cmUoc291cmNlRmlsZSwgbGVuIC0gMSwgbGVuLCBSdWxlLkZBSUxVUkVfU1RSSU5HKGxpbmVDb3VudCwgbGluZUxpbWl0KSwgdGhpcy5ydWxlTmFtZSldOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "3B703AE781B351E7A9865B7A9F384620",
              "algorithm": "md5"
            },
            {
              "value": "5CCB800B513C1F150BDF15A471B339B4ED4B2EB9",
              "algorithm": "sha-1"
            },
            {
              "value": "2BD8EAE0F1BDA494838BAD47278E9F1C7BFD3CAB831CBA6A3A491DFA7E89815B",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/maxLineLengthRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0TGluZVJhbmdlcyB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KaW50ZXJmYWNlIE1heExpbmVMZW5ndGhSdWxlT3B0aW9ucyB7DQogICAgbGltaXQ6IG51bWJlcjsNCiAgICBpZ25vcmVQYXR0ZXJuPzogUmVnRXhwOw0KfQ0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibWF4LWxpbmUtbGVuZ3RoIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJSZXF1aXJlcyBsaW5lcyB0byBiZSB1bmRlciBhIGNlcnRhaW4gbWF4IGxlbmd0aC4iLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgTGltaXRpbmcgdGhlIGxlbmd0aCBvZiBhIGxpbmUgb2YgY29kZSBpbXByb3ZlcyBjb2RlIHJlYWRhYmlsaXR5Lg0KICAgICAgICAgICAgSXQgYWxzbyBtYWtlcyBjb21wYXJpbmcgY29kZSBzaWRlLWJ5LXNpZGUgZWFzaWVyIGFuZCBpbXByb3ZlcyBjb21wYXRpYmlsaXR5IHdpdGgNCiAgICAgICAgICAgIHZhcmlvdXMgZWRpdG9ycywgSURFcywgYW5kIGRpZmYgdmlld2Vycy5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICBJdCBjYW4gdGFrZSBvbmUgYXJndW1lbnQsIHdoaWNoIGNhbiBiZSBhbnkgb2YgdGhlIGZvbGxvd2luZzoNCiAgICAgICAgKiBpbnRlZ2VyIGluZGljYXRpbmcgbWF4aW11bSBsZW5ndGggb2YgbGluZXMuDQogICAgICAgICogb2JqZWN0IHdpdGgga2V5czoNCiAgICAgICAgICAqIFxgbGltaXRcYCAtIG51bWJlciA8IDAgZGVmaW5pbmcgbWF4IGxpbmUgbGVuZ3RoDQogICAgICAgICAgKiBcYGlnbm9yZS1wYXR0ZXJuXGAgLSBzdHJpbmcgZGVmaW5pbmcgaWdub3JlIHBhdHRlcm4gZm9yIHRoaXMgcnVsZSwgYmVpbmcgcGFyc2VkIGJ5IFxgbmV3IFJlZ0V4cCgpXGAuDQogICAgICAgICAgICBGb3IgZXhhbXBsZToNCiAgICAgICAgICAgICAqIFxgXC9cLyBcYCBwYXR0ZXJuIHdpbGwgaWdub3JlIGFsbCBpbi1saW5lIGNvbW1lbnRzLg0KICAgICAgICAgICAgICogXGBeaW1wb3J0IFxgIHBhdHRlcm4gd2lsbCBpZ25vcmUgYWxsIGltcG9ydCBzdGF0ZW1lbnRzLg0KICAgICAgICAgICAgICogXGBeZXhwb3J0IFx7KC4qPylcfVxgIHBhdHRlcm4gd2lsbCBpZ25vcmUgYWxsIG11bHRpcGxlIGV4cG9ydCBzdGF0ZW1lbnRzLg0KICAgICAgICAgICAgICogXGBjbGFzcyBbYS16QS1aXSsgaW1wbGVtZW50cyBcYCBwYXR0ZXJuIHdpbGwgaWdub3JlIGFsbCBjbGFzcyBkZWNsYXJhdGlvbnMgaW1wbGVtZW50aW5nIGludGVyZmFjZXMuDQogICAgICAgICAgICAgKiBcYF5pbXBvcnQgfF5leHBvcnQgXHsoLio/KVx9fGNsYXNzIFthLXpBLVpdKyBpbXBsZW1lbnRzIHwvLyBcYCBwYXR0ZXJuIHdpbGwgaWdub3JlIGFsbCB0aGUgY2FzZXMgbGlzdGVkIGFib3ZlLg0KICAgICAgICAgYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgIGl0ZW1zOiB7DQogICAgICAgICAgICAgICAgb25lT2Y6IFsNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIm51bWJlciIsDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJvYmplY3QiLA0KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsaW1pdCI6IHt0eXBlOiAibnVtYmVyIn0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlnbm9yZS1wYXR0ZXJuIjoge3R5cGU6ICJzdHJpbmcifSwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBtaW5MZW5ndGg6IDEsDQogICAgICAgICAgICBtYXhMZW5ndGg6IDIsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbW3RydWUsIDEyMF0sIFt0cnVlLCB7DQogICAgICAgICAgICAibGltaXQiOiAxMjAsDQogICAgICAgICAgICAiaWdub3JlLXBhdHRlcm4iOiAiXmltcG9ydCB8XmV4cG9ydCBceyguKj8pXH0ifV1dLA0KICAgICAgICB0eXBlOiAibWFpbnRhaW5hYmlsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfRkFDVE9SWShsaW5lTGltaXQ6IG51bWJlcikgew0KICAgICAgICByZXR1cm4gYEV4Y2VlZHMgbWF4aW11bSBsaW5lIGxlbmd0aCBvZiAke2xpbmVMaW1pdH1gOw0KICAgIH0NCg0KICAgIHB1YmxpYyBpc0VuYWJsZWQoKTogYm9vbGVhbiB7DQogICAgICAgIGNvbnN0IGxpbWl0ID0gdGhpcy5nZXRSdWxlT3B0aW9ucygpLmxpbWl0Ow0KICAgICAgICByZXR1cm4gc3VwZXIuaXNFbmFibGVkKCkgJiYgKGxpbWl0ID4gMCk7DQogICAgfQ0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB0aGlzLmdldFJ1bGVPcHRpb25zKCkpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgZ2V0UnVsZU9wdGlvbnMoKTogTWF4TGluZUxlbmd0aFJ1bGVPcHRpb25zIHsNCiAgICAgICAgY29uc3QgYXJndW1lbnQgPSB0aGlzLnJ1bGVBcmd1bWVudHNbMF07DQogICAgICAgIGxldCBvcHRpb25zOiBNYXhMaW5lTGVuZ3RoUnVsZU9wdGlvbnMgPSB7bGltaXQ6IDB9Ow0KICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAibnVtYmVyIikgew0KICAgICAgICAgICAgb3B0aW9ucy5saW1pdCA9IGFyZ3VtZW50Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50IGFzIE1heExpbmVMZW5ndGhSdWxlT3B0aW9uczsNCiAgICAgICAgICAgIGNvbnN0IGlnbm9yZVBhdHRlcm4gPSAoYXJndW1lbnQgYXMge1trZXk6IHN0cmluZ106IHN0cmluZ30pWyJpZ25vcmUtcGF0dGVybiJdOw0KICAgICAgICAgICAgb3B0aW9ucy5pZ25vcmVQYXR0ZXJuID0gKHR5cGVvZiBpZ25vcmVQYXR0ZXJuID09PSAic3RyaW5nIikgPw0KICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoKGlnbm9yZVBhdHRlcm4pKSA6IHVuZGVmaW5lZDsNCiAgICAgICAgfQ0KICAgICAgICBvcHRpb25zLmxpbWl0ID0gTnVtYmVyKG9wdGlvbnMubGltaXQpOyAvLyB1c2VyIGNhbiBwYXNzIGEgc3RyaW5nIGluc3RlYWQgb2YgbnVtYmVyDQogICAgICAgIHJldHVybiBvcHRpb25zOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8TWF4TGluZUxlbmd0aFJ1bGVPcHRpb25zPikgew0KICAgIGNvbnN0IGxpbWl0ID0gY3R4Lm9wdGlvbnMubGltaXQ7DQogICAgY29uc3QgaWdub3JlUGF0dGVybiA9IGN0eC5vcHRpb25zLmlnbm9yZVBhdHRlcm47DQogICAgZm9yIChjb25zdCBsaW5lIG9mIGdldExpbmVSYW5nZXMoY3R4LnNvdXJjZUZpbGUpKSB7DQogICAgICAgIGlmIChsaW5lLmNvbnRlbnRMZW5ndGggPD0gbGltaXQpIHsgY29udGludWU7IH0NCiAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBjdHguc291cmNlRmlsZS50ZXh0LnN1YnN0cihsaW5lLnBvcywgbGluZS5jb250ZW50TGVuZ3RoKTsNCiAgICAgICAgaWYgKGlnbm9yZVBhdHRlcm4gIT09IHVuZGVmaW5lZCAmJiBpZ25vcmVQYXR0ZXJuLnRlc3QobGluZUNvbnRlbnQpKSB7IGNvbnRpbnVlOyB9DQogICAgICAgIGN0eC5hZGRGYWlsdXJlQXQobGluZS5wb3MsIGxpbmUuY29udGVudExlbmd0aCwgUnVsZS5GQUlMVVJFX1NUUklOR19GQUNUT1JZKGxpbWl0KSk7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "F504504F76F6B909998D1AF2B4568837",
              "algorithm": "md5"
            },
            {
              "value": "0C6D62BF3281D9810AD37E2CBA07957813D50195",
              "algorithm": "sha-1"
            },
            {
              "value": "A2F5A15F4C59C544059BEA679FD1FBC213308F1F9E3EB22FE82009ED3C31B7CB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/memberAccessRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "A2B90B93116F9DBE384F09541221D109",
              "algorithm": "md5"
            },
            {
              "value": "606D744F56230C1D32DBBB5D7CAA6178DFE8D1A4",
              "algorithm": "sha-1"
            },
            {
              "value": "623F5D9ACA07B1A6B696F278AF0EE9616727F16AEA6B21B15C6F8EF11C884490",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/memberOrderingRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaGFzTW9kaWZpZXIgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgeyBzaG93V2FybmluZ09uY2UgfSBmcm9tICIuLi9lcnJvciI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCmltcG9ydCB7IGZsYXRNYXAsIG1hcERlZmluZWQgfSBmcm9tICIuLi91dGlscyI7DQoNCmNvbnN0IE9QVElPTl9PUkRFUiA9ICJvcmRlciI7DQpjb25zdCBPUFRJT05fQUxQSEFCRVRJWkUgPSAiYWxwaGFiZXRpemUiOw0KDQplbnVtIE1lbWJlcktpbmQgew0KICAgIHB1YmxpY1N0YXRpY0ZpZWxkLA0KICAgIHB1YmxpY1N0YXRpY01ldGhvZCwNCiAgICBwcm90ZWN0ZWRTdGF0aWNGaWVsZCwNCiAgICBwcm90ZWN0ZWRTdGF0aWNNZXRob2QsDQogICAgcHJpdmF0ZVN0YXRpY0ZpZWxkLA0KICAgIHByaXZhdGVTdGF0aWNNZXRob2QsDQogICAgcHVibGljSW5zdGFuY2VGaWVsZCwNCiAgICBwcm90ZWN0ZWRJbnN0YW5jZUZpZWxkLA0KICAgIHByaXZhdGVJbnN0YW5jZUZpZWxkLA0KICAgIHB1YmxpY0NvbnN0cnVjdG9yLA0KICAgIHByb3RlY3RlZENvbnN0cnVjdG9yLA0KICAgIHByaXZhdGVDb25zdHJ1Y3RvciwNCiAgICBwdWJsaWNJbnN0YW5jZU1ldGhvZCwNCiAgICBwcm90ZWN0ZWRJbnN0YW5jZU1ldGhvZCwNCiAgICBwcml2YXRlSW5zdGFuY2VNZXRob2QsDQp9DQoNCmNvbnN0IFBSRVNFVFMgPSBuZXcgTWFwPHN0cmluZywgTWVtYmVyQ2F0ZWdvcnlKc29uW10+KFsNCiAgICBbImZpZWxkcy1maXJzdCIsIFsNCiAgICAgICAgInB1YmxpYy1zdGF0aWMtZmllbGQiLA0KICAgICAgICAicHJvdGVjdGVkLXN0YXRpYy1maWVsZCIsDQogICAgICAgICJwcml2YXRlLXN0YXRpYy1maWVsZCIsDQogICAgICAgICJwdWJsaWMtaW5zdGFuY2UtZmllbGQiLA0KICAgICAgICAicHJvdGVjdGVkLWluc3RhbmNlLWZpZWxkIiwNCiAgICAgICAgInByaXZhdGUtaW5zdGFuY2UtZmllbGQiLA0KICAgICAgICAiY29uc3RydWN0b3IiLA0KICAgICAgICAicHVibGljLXN0YXRpYy1tZXRob2QiLA0KICAgICAgICAicHJvdGVjdGVkLXN0YXRpYy1tZXRob2QiLA0KICAgICAgICAicHJpdmF0ZS1zdGF0aWMtbWV0aG9kIiwNCiAgICAgICAgInB1YmxpYy1pbnN0YW5jZS1tZXRob2QiLA0KICAgICAgICAicHJvdGVjdGVkLWluc3RhbmNlLW1ldGhvZCIsDQogICAgICAgICJwcml2YXRlLWluc3RhbmNlLW1ldGhvZCIsDQogICAgXV0sDQogICAgWyJpbnN0YW5jZS1zYW5kd2ljaCIsIFsNCiAgICAgICAgInB1YmxpYy1zdGF0aWMtZmllbGQiLA0KICAgICAgICAicHJvdGVjdGVkLXN0YXRpYy1maWVsZCIsDQogICAgICAgICJwcml2YXRlLXN0YXRpYy1maWVsZCIsDQogICAgICAgICJwdWJsaWMtaW5zdGFuY2UtZmllbGQiLA0KICAgICAgICAicHJvdGVjdGVkLWluc3RhbmNlLWZpZWxkIiwNCiAgICAgICAgInByaXZhdGUtaW5zdGFuY2UtZmllbGQiLA0KICAgICAgICAiY29uc3RydWN0b3IiLA0KICAgICAgICAicHVibGljLWluc3RhbmNlLW1ldGhvZCIsDQogICAgICAgICJwcm90ZWN0ZWQtaW5zdGFuY2UtbWV0aG9kIiwNCiAgICAgICAgInByaXZhdGUtaW5zdGFuY2UtbWV0aG9kIiwNCiAgICAgICAgInB1YmxpYy1zdGF0aWMtbWV0aG9kIiwNCiAgICAgICAgInByb3RlY3RlZC1zdGF0aWMtbWV0aG9kIiwNCiAgICAgICAgInByaXZhdGUtc3RhdGljLW1ldGhvZCIsDQogICAgXV0sDQogICAgWyJzdGF0aWNzLWZpcnN0IiwgWw0KICAgICAgICAicHVibGljLXN0YXRpYy1maWVsZCIsDQogICAgICAgICJwdWJsaWMtc3RhdGljLW1ldGhvZCIsDQogICAgICAgICJwcm90ZWN0ZWQtc3RhdGljLWZpZWxkIiwNCiAgICAgICAgInByb3RlY3RlZC1zdGF0aWMtbWV0aG9kIiwNCiAgICAgICAgInByaXZhdGUtc3RhdGljLWZpZWxkIiwNCiAgICAgICAgInByaXZhdGUtc3RhdGljLW1ldGhvZCIsDQogICAgICAgICJwdWJsaWMtaW5zdGFuY2UtZmllbGQiLA0KICAgICAgICAicHJvdGVjdGVkLWluc3RhbmNlLWZpZWxkIiwNCiAgICAgICAgInByaXZhdGUtaW5zdGFuY2UtZmllbGQiLA0KICAgICAgICAiY29uc3RydWN0b3IiLA0KICAgICAgICAicHVibGljLWluc3RhbmNlLW1ldGhvZCIsDQogICAgICAgICJwcm90ZWN0ZWQtaW5zdGFuY2UtbWV0aG9kIiwNCiAgICAgICAgInByaXZhdGUtaW5zdGFuY2UtbWV0aG9kIiwNCiAgICBdXSwNCl0pOw0KY29uc3QgUFJFU0VUX05BTUVTID0gQXJyYXkuZnJvbShQUkVTRVRTLmtleXMoKSk7DQoNCmNvbnN0IGFsbE1lbWJlcktpbmROYW1lcyA9IG1hcERlZmluZWQoT2JqZWN0LmtleXMoTWVtYmVyS2luZCksIChrZXkpID0+IHsNCiAgICBjb25zdCBtayA9IChNZW1iZXJLaW5kIGFzIGFueSlba2V5XTsNCiAgICByZXR1cm4gdHlwZW9mIG1rID09PSAibnVtYmVyIiA/IE1lbWJlcktpbmRbbWtdLnJlcGxhY2UoL1tBLVpdL2csIChjYXApID0+IGAtJHtjYXAudG9Mb3dlckNhc2UoKX1gKSA6IHVuZGVmaW5lZDsNCn0pOw0KDQpmdW5jdGlvbiBuYW1lc01hcmtkb3duKG5hbWVzOiBzdHJpbmdbXSk6IHN0cmluZyB7DQogICAgcmV0dXJuIG5hbWVzLm1hcCgobmFtZSkgPT4gYCogXGAke25hbWV9XGBgKS5qb2luKCJcbiAgICAiKTsNCn0NCg0KY29uc3Qgb3B0aW9uc0Rlc2NyaXB0aW9uID0gTGludC5VdGlscy5kZWRlbnRgDQogICAgT25lIGFyZ3VtZW50LCB3aGljaCBpcyBhbiBvYmplY3QsIG11c3QgYmUgcHJvdmlkZWQuIEl0IHNob3VsZCBjb250YWluIGFuIFxgb3JkZXJcYCBwcm9wZXJ0eS4NCiAgICBUaGUgXGBvcmRlclxgIHByb3BlcnR5IHNob3VsZCBoYXZlIGEgdmFsdWUgb2Ygb25lIG9mIHRoZSBmb2xsb3dpbmcgc3RyaW5nczoNCg0KICAgICR7bmFtZXNNYXJrZG93bihQUkVTRVRfTkFNRVMpfQ0KDQogICAgQWx0ZXJuYXRpdmVseSwgdGhlIHZhbHVlIGZvciBcYG9yZGVyXGAgbWF5IGJlIGFuIGFycmF5IGNvbnNpc3Rpbmcgb2YgdGhlIGZvbGxvd2luZyBzdHJpbmdzOg0KDQogICAgJHtuYW1lc01hcmtkb3duKGFsbE1lbWJlcktpbmROYW1lcyl9DQoNCiAgICBZb3UgY2FuIGFsc28gb21pdCB0aGUgYWNjZXNzIG1vZGlmaWVyIHRvIHJlZmVyIHRvICJwdWJsaWMtIiwgInByb3RlY3RlZC0iLCBhbmQgInByaXZhdGUtIiBhbGwgYXQgb25jZTsgZm9yIGV4YW1wbGUsICJzdGF0aWMtZmllbGQiLg0KDQogICAgWW91IGNhbiBhbHNvIG1ha2UgeW91ciBvd24gY2F0ZWdvcmllcyBieSB1c2luZyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIHN0cmluZzoNCg0KICAgICAgICB7DQogICAgICAgICAgICAibmFtZSI6ICJzdGF0aWMgbm9uLXByaXZhdGUiLA0KICAgICAgICAgICAgImtpbmRzIjogWw0KICAgICAgICAgICAgICAgICJwdWJsaWMtc3RhdGljLWZpZWxkIiwNCiAgICAgICAgICAgICAgICAicHJvdGVjdGVkLXN0YXRpYy1maWVsZCIsDQogICAgICAgICAgICAgICAgInB1YmxpYy1zdGF0aWMtbWV0aG9kIiwNCiAgICAgICAgICAgICAgICAicHJvdGVjdGVkLXN0YXRpYy1tZXRob2QiDQogICAgICAgICAgICBdDQogICAgICAgIH0NCg0KICAgIFRoZSAnJHtPUFRJT05fQUxQSEFCRVRJWkV9JyBvcHRpb24gd2lsbCBlbmZvcmNlIHRoYXQgbWVtYmVycyB3aXRoaW4gdGhlIHNhbWUgY2F0ZWdvcnkgc2hvdWxkIGJlIGFscGhhYmV0aWNhbGx5IHNvcnRlZCBieSBuYW1lLmA7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJtZW1iZXItb3JkZXJpbmciLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkVuZm9yY2VzIG1lbWJlciBvcmRlcmluZy4iLA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBBIGNvbnNpc3RlbnQgb3JkZXJpbmcgZm9yIGNsYXNzIG1lbWJlcnMgY2FuIG1ha2UgY2xhc3NlcyBlYXNpZXIgdG8gcmVhZCwgbmF2aWdhdGUsIGFuZCBlZGl0Lg0KDQogICAgICAgICAgICBBIGNvbW1vbiBvcHBvc2l0ZSBwcmFjdGljZSB0byBcYG1lbWJlci1vcmRlcmluZ1xgIGlzIHRvIGtlZXAgcmVsYXRlZCBncm91cHMgb2YgY2xhc3NlcyB0b2dldGhlci4NCiAgICAgICAgICAgIEluc3RlYWQgb2YgY3JlYXRpbmcgY2xhc3NlcyB3aXRoIG11bHRpcGxlIHNlcGFyYXRlIGdyb3VwcywgY29uc2lkZXIgc3BsaXR0aW5nIGNsYXNzIHJlc3BvbnNpYmlsaXRpZXMNCiAgICAgICAgICAgIGFwYXJ0IGFjcm9zcyBtdWx0aXBsZSBzaW5nbGUtcmVzcG9uc2liaWxpdHkgY2xhc3Nlcy4NCiAgICAgICAgYCwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAib2JqZWN0IiwNCiAgICAgICAgICAgIHByb3BlcnRpZXM6IHsNCiAgICAgICAgICAgICAgICBvcmRlcjogew0KICAgICAgICAgICAgICAgICAgICBvbmVPZjogWw0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW06IFBSRVNFVF9OQU1FUywNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW51bTogYWxsTWVtYmVyS2luZE5hbWVzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAxMywNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbDQogICAgICAgICAgICBbdHJ1ZSwgeyBvcmRlcjogImZpZWxkcy1maXJzdCIgfV0sDQogICAgICAgICAgICBbdHJ1ZSwgew0KICAgICAgICAgICAgICAgIG9yZGVyOiBbDQogICAgICAgICAgICAgICAgICAgICJwdWJsaWMtc3RhdGljLWZpZWxkIiwNCiAgICAgICAgICAgICAgICAgICAgInB1YmxpYy1pbnN0YW5jZS1maWVsZCIsDQogICAgICAgICAgICAgICAgICAgICJwdWJsaWMtY29uc3RydWN0b3IiLA0KICAgICAgICAgICAgICAgICAgICAicHJpdmF0ZS1zdGF0aWMtZmllbGQiLA0KICAgICAgICAgICAgICAgICAgICAicHJpdmF0ZS1pbnN0YW5jZS1maWVsZCIsDQogICAgICAgICAgICAgICAgICAgICJwcml2YXRlLWNvbnN0cnVjdG9yIiwNCiAgICAgICAgICAgICAgICAgICAgInB1YmxpYy1pbnN0YW5jZS1tZXRob2QiLA0KICAgICAgICAgICAgICAgICAgICAicHJvdGVjdGVkLWluc3RhbmNlLW1ldGhvZCIsDQogICAgICAgICAgICAgICAgICAgICJwcml2YXRlLWluc3RhbmNlLW1ldGhvZCIsDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgIH1dLA0KICAgICAgICAgICAgW3RydWUsIHsNCiAgICAgICAgICAgICAgICBvcmRlcjogWw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic3RhdGljIG5vbi1wcml2YXRlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmRzOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInB1YmxpYy1zdGF0aWMtZmllbGQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm90ZWN0ZWQtc3RhdGljLWZpZWxkIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicHVibGljLXN0YXRpYy1tZXRob2QiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcm90ZWN0ZWQtc3RhdGljLW1ldGhvZCIsDQogICAgICAgICAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAiY29uc3RydWN0b3IiLA0KICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICB9XSwNCiAgICAgICAgXSwNCiAgICAgICAgdHlwZTogInR5cGVzY3JpcHQiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfQUxQSEFCRVRJWkUocHJldk5hbWU6IHN0cmluZywgY3VyTmFtZTogc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBgJHtzaG93KGN1ck5hbWUpfSBzaG91bGQgY29tZSBhbHBoYWJldGljYWxseSBiZWZvcmUgJHtzaG93KHByZXZOYW1lKX1gOw0KICAgICAgICBmdW5jdGlvbiBzaG93KHM6IHN0cmluZykgew0KICAgICAgICAgICAgcmV0dXJuIHMgPT09ICIiID8gIkNvbXB1dGVkIHByb3BlcnR5IiA6IGAnJHtzfSdgOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIGxldCBvcHRpb25zOiBPcHRpb25zOw0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyh0aGlzLnJ1bGVBcmd1bWVudHMpOw0KICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICBzaG93V2FybmluZ09uY2UoYFdhcm5pbmc6ICR7dGhpcy5ydWxlTmFtZX0gLSAkeyhlIGFzIEVycm9yKS5tZXNzYWdlfWApOw0KICAgICAgICAgICAgcmV0dXJuIFtdOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aFdhbGtlcihuZXcgTWVtYmVyT3JkZXJpbmdXYWxrZXIoc291cmNlRmlsZSwgdGhpcy5ydWxlTmFtZSwgb3B0aW9ucykpOw0KICAgIH0NCn0NCg0KY2xhc3MgTWVtYmVyT3JkZXJpbmdXYWxrZXIgZXh0ZW5kcyBMaW50LkFic3RyYWN0V2Fsa2VyPE9wdGlvbnM+IHsNCg0KICAgIHByaXZhdGUgcmVhZG9ubHkgZml4ZXM6IEFycmF5PFtMaW50LlJ1bGVGYWlsdXJlLCBMaW50LlJlcGxhY2VtZW50XT4gPSBbXTsNCg0KICAgIHB1YmxpYyB3YWxrKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpIHsNCiAgICAgICAgY29uc3QgY2IgPSAobm9kZTogdHMuTm9kZSk6IHZvaWQgPT4gew0KICAgICAgICAgICAgLy8gTkI6IGl0ZXJhdGUgdGhyb3VnaCBjaGlsZHJlbiBmaXJzdCENCiAgICAgICAgICAgIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQoNCiAgICAgICAgICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNsYXNzRGVjbGFyYXRpb246DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNsYXNzRXhwcmVzc2lvbjoNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSW50ZXJmYWNlRGVjbGFyYXRpb246DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlR5cGVMaXRlcmFsOg0KICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrTWVtYmVycygobm9kZSBhcyB0cy5DbGFzc0xpa2VEZWNsYXJhdGlvbiB8IHRzLkludGVyZmFjZURlY2xhcmF0aW9uIHwgdHMuVHlwZUxpdGVyYWxOb2RlKS5tZW1iZXJzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGNiKTsNCg0KICAgICAgICAvLyBhc3NpZ24gUmVwbGFjZW1lbnRzIHdoaWNoIGhhdmUgbm90IGJlZW4gbWVyZ2VkIGludG8gc3Vycm91bmRpbmcgb25lcyB0byB0aGVpciBSdWxlRmFpbHVyZXMuDQogICAgICAgIHRoaXMuZml4ZXMuZm9yRWFjaCgoW2ZhaWx1cmUsIHJlcGxhY2VtZW50XSkgPT4gew0KICAgICAgICAgICAgKGZhaWx1cmUuZ2V0Rml4KCkgYXMgTGludC5SZXBsYWNlbWVudFtdKS5wdXNoKHJlcGxhY2VtZW50KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ2hlY2sgd2V0aGVyIHRoZSBwYXNzZWQgbWVtYmVycyBhZGhlcmUgdG8gdGhlIGNvbmZpZ3VyZWQgb3JkZXIuIElmIG5vdCwgUnVsZUZhaWx1cmVzIGFyZSBnZW5lcmF0ZWQgYW5kIGEgc2luZ2xlDQogICAgICogTGludC5SZXBsYWNlbWVudCBpcyBnZW5lcmF0ZWQsIHdoaWNoIHJlcGxhY2VzIHRoZSBlbnRpcmUgTm9kZUFycmF5IHdpdGggYSBjb3JyZWN0bHkgc29ydGVkIG9uZS4gVGhlIFJlcGxhY2VtZW50DQogICAgICogaXMgbm90IGltbWVkaWF0ZWx5IGFkZGVkIHRvIGEgUnVsZUZhaWx1cmUsIGFzIGluY29ycmVjdGx5IHNvcnRlZCBub2RlcyBjYW4gYmUgbmVzdGVkIChlLmcuIGEgY2xhc3MgZGVjbGFyYXRpb24NCiAgICAgKiBpbiBhIG1ldGhvZCBpbXBsZW1lbnRhdGlvbiksIGJ1dCBpbnN0ZWFkIHRlbXBvcmFyaWx5IHN0b3JlZCBpbiBgdGhpcy5maXhlc2AuIE5lc3RlZCBSZXBsYWNlbWVudHMgYXJlIG1hbnVhbGx5DQogICAgICogbWVyZ2VkLCBhcyBUU0xpbnQgZG9lc24ndCBoYW5kbGUgb3ZlcmxhcHBpbmcgb25lcy4gRm9yIHRoaXMgcmVhc29uIGl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSByZWN1cnNpb24gaGFwcGVucw0KICAgICAqIGJlZm9yZSB0aGUgY2hlY2tNZW1iZXJzIGNhbGwgaW4gdGhpcy53YWxrKCkuDQogICAgICovDQogICAgcHJpdmF0ZSBjaGVja01lbWJlcnMobWVtYmVyczogdHMuTm9kZUFycmF5PE1lbWJlcj4pIHsNCiAgICAgICAgbGV0IHByZXZSYW5rID0gLTE7DQogICAgICAgIGxldCBwcmV2TmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkOw0KICAgICAgICBsZXQgZmFpbHVyZUV4aXN0cyA9IGZhbHNlOw0KICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiBtZW1iZXJzKSB7DQogICAgICAgICAgICBjb25zdCByYW5rID0gdGhpcy5tZW1iZXJSYW5rKG1lbWJlcik7DQogICAgICAgICAgICBpZiAocmFuayA9PT0gLTEpIHsNCiAgICAgICAgICAgICAgICAvLyBubyBleHBsaWNpdCBvcmRlcmluZyBmb3IgdGhpcyBraW5kIG9mIG5vZGUgc3BlY2lmaWVkLCBzbyBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAocmFuayA8IHByZXZSYW5rKSB7DQogICAgICAgICAgICAgICAgY29uc3Qgbm9kZVR5cGUgPSB0aGlzLnJhbmtOYW1lKHJhbmspOw0KICAgICAgICAgICAgICAgIGNvbnN0IHByZXZOb2RlVHlwZSA9IHRoaXMucmFua05hbWUocHJldlJhbmspOw0KICAgICAgICAgICAgICAgIGNvbnN0IGxvd2VyUmFuayA9IHRoaXMuZmluZExvd2VyUmFuayhtZW1iZXJzLCByYW5rKTsNCiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbkhpbnQgPSBsb3dlclJhbmsgIT09IC0xDQogICAgICAgICAgICAgICAgICAgID8gYGFmdGVyICR7dGhpcy5yYW5rTmFtZShsb3dlclJhbmspfXNgDQogICAgICAgICAgICAgICAgICAgIDogImF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNsYXNzL2ludGVyZmFjZSI7DQogICAgICAgICAgICAgICAgY29uc3QgZXJyb3JMaW5lMSA9IGBEZWNsYXJhdGlvbiBvZiAke25vZGVUeXBlfSBub3QgYWxsb3dlZCBhZnRlciBkZWNsYXJhdGlvbiBvZiAke3ByZXZOb2RlVHlwZX0uIGAgKw0KICAgICAgICAgICAgICAgICAgICBgSW5zdGVhZCwgdGhpcyBzaG91bGQgY29tZSAke2xvY2F0aW9uSGludH0uYDsNCiAgICAgICAgICAgICAgICAvLyBhZGQgZW1wdHkgYXJyYXkgYXMgZml4IHNvIHdlIGNhbiBhZGQgYSByZXBsYWNlbWVudCBsYXRlci4gKGZpeCBpdHNlbGYgaXMgcmVhZG9ubHkpDQogICAgICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlQXROb2RlKG1lbWJlciwgZXJyb3JMaW5lMSwgW10pOw0KICAgICAgICAgICAgICAgIGZhaWx1cmVFeGlzdHMgPSB0cnVlOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFscGhhYmV0aXplICYmIG1lbWJlci5uYW1lICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmsgIT09IHByZXZSYW5rKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBhbHBoYWJldGljYWwgb3JkZXJpbmcgYmV0d2VlbiBkaWZmZXJlbnQgcmFua3MNCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZOYW1lID0gdW5kZWZpbmVkOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VyTmFtZSA9IG5hbWVTdHJpbmcobWVtYmVyLm5hbWUpOw0KICAgICAgICAgICAgICAgICAgICBpZiAocHJldk5hbWUgIT09IHVuZGVmaW5lZCAmJiBjYXNlSW5zZW5zaXRpdmVMZXNzKGN1ck5hbWUsIHByZXZOYW1lKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlQXROb2RlKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbWJlci5uYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ1bGUuRkFJTFVSRV9TVFJJTkdfQUxQSEFCRVRJWkUodGhpcy5maW5kTG93ZXJOYW1lKG1lbWJlcnMsIHJhbmssIGN1ck5hbWUpLCBjdXJOYW1lKSwgW10pOw0KICAgICAgICAgICAgICAgICAgICAgICAgZmFpbHVyZUV4aXN0cyA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwcmV2TmFtZSA9IGN1ck5hbWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIGxhc3QgZ29vZCBub2RlDQogICAgICAgICAgICAgICAgcHJldlJhbmsgPSByYW5rOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChmYWlsdXJlRXhpc3RzKSB7DQogICAgICAgICAgICBjb25zdCBzb3J0ZWRNZW1iZXJJbmRleGVzID0gbWVtYmVycy5tYXAoKF8sIGkpID0+IGkpLnNvcnQoKGFpLCBiaSkgPT4gew0KICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBtZW1iZXJzW2FpXTsNCiAgICAgICAgICAgICAgICBjb25zdCBiID0gbWVtYmVyc1tiaV07DQoNCiAgICAgICAgICAgICAgICAvLyBmaXJzdCwgc29ydCBieSBtZW1iZXIgcmFuaw0KICAgICAgICAgICAgICAgIGNvbnN0IHJhbmtEaWZmID0gdGhpcy5tZW1iZXJSYW5rKGEpIC0gdGhpcy5tZW1iZXJSYW5rKGIpOw0KICAgICAgICAgICAgICAgIGlmIChyYW5rRGlmZiAhPT0gMCkgeyByZXR1cm4gcmFua0RpZmY7IH0NCiAgICAgICAgICAgICAgICAvLyB0aGVuIGxleGljb2dyYXBoaWNhbGx5IGlmIGFscGhhYmV0aXplID09IHRydWUNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFscGhhYmV0aXplICYmIGEubmFtZSAhPT0gdW5kZWZpbmVkICYmIGIubmFtZSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGFOYW1lID0gbmFtZVN0cmluZyhhLm5hbWUpOw0KICAgICAgICAgICAgICAgICAgICBjb25zdCBiTmFtZSA9IG5hbWVTdHJpbmcoYi5uYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZURpZmYgPSBhTmFtZS5sb2NhbGVDb21wYXJlKGJOYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVEaWZmICE9PSAwKSB7IHJldHVybiBuYW1lRGlmZjsgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyBmaW5hbGx5LCBzb3J0IGJ5IHBvc2l0aW9uIGluIG9yaWdpbmFsIE5vZGVBcnJheSBzbyB0aGUgc29ydCByZW1haW5zIHN0YWJsZS4NCiAgICAgICAgICAgICAgICByZXR1cm4gYWkgLSBiaTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgY29uc3Qgc3BsaXRzID0gZ2V0U3BsaXRJbmRleGVzKG1lbWJlcnMsIHRoaXMuc291cmNlRmlsZS50ZXh0KTsNCiAgICAgICAgICAgIGNvbnN0IHNvcnRlZE1lbWJlcnNUZXh0ID0gc29ydGVkTWVtYmVySW5kZXhlcy5tYXAoKGkpID0+IHsNCiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IHNwbGl0c1tpXTsNCiAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBzcGxpdHNbaSArIDFdOw0KICAgICAgICAgICAgICAgIGxldCBub2RlVGV4dCA9IHRoaXMuc291cmNlRmlsZS50ZXh0LnN1YnN0cmluZyhzdGFydCwgZW5kKTsNCiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkgew0KICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgcHJldmlvdXMgZml4ZXMgd2hpY2ggd2UgbmVlZCB0byBtZXJnZSBpbnRvIHRoaXMgb25lDQogICAgICAgICAgICAgICAgICAgIC8vIGlmIHllcywgcmVtb3ZlIGl0IGZyb20gdGhlIGxpc3Qgc28gdGhhdCB3ZSBkbyBub3QgcmV0dXJuIG92ZXJsYXBwaW5nIFJlcGxhY2VtZW50cw0KICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXhJbmRleCA9IGFycmF5RmluZExhc3RJbmRleCgNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZml4ZXMsDQogICAgICAgICAgICAgICAgICAgICAgICAoWywgcl0pID0+IHIuc3RhcnQgPj0gc3RhcnQgJiYgci5zdGFydCArIHIubGVuZ3RoIDw9IGVuZCwNCiAgICAgICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGZpeEluZGV4ID09PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgY29uc3QgZml4ID0gdGhpcy5maXhlcy5zcGxpY2UoZml4SW5kZXgsIDEpWzBdOw0KICAgICAgICAgICAgICAgICAgICBjb25zdCBbLCByZXBsYWNlbWVudF0gPSBmaXg7DQogICAgICAgICAgICAgICAgICAgIG5vZGVUZXh0ID0gYXBwbHlSZXBsYWNlbWVudE9mZnNldChub2RlVGV4dCwgcmVwbGFjZW1lbnQsIHN0YXJ0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVUZXh0Ow0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAvLyBpbnN0ZWFkIG9mIGFzc2lnbmluZyB0aGUgZml4IGltbWVkaWF0ZWx5IHRvIHRoZSBsYXN0IGZhaWx1cmUsIHdlIHRlbXBvcmFyaWx5IHN0b3JlIGl0IGluIGB0aGlzLmZpeGVzYCwNCiAgICAgICAgICAgIC8vIGluIGNhc2UgYSBjb250YWluaW5nIG5vZGUgbmVlZHMgdG8gYmUgZml4ZWQgdG9vLiBXZSBvbmx5ICJhZGQiIHRoZSBmaXggdG8gdGhlIGxhc3QgZmFpbHVyZSwgYWx0aG91Z2gNCiAgICAgICAgICAgIC8vIGl0IGZpeGVzIGFsbCBmYWlsdXJlcyBpbiB0aGlzIE5vZGVBcnJheSwgYXMgVFNMaW50IGRvZXNuJ3QgaGFuZGxlIGR1cGxpY2F0ZSBSZXBsYWNlbWVudHMuDQogICAgICAgICAgICB0aGlzLmZpeGVzLnB1c2goWw0KICAgICAgICAgICAgICAgIGFycmF5TGFzdCh0aGlzLmZhaWx1cmVzKSwNCiAgICAgICAgICAgICAgICBMaW50LlJlcGxhY2VtZW50LnJlcGxhY2VGcm9tVG8oc3BsaXRzWzBdLCBhcnJheUxhc3Qoc3BsaXRzKSwgc29ydGVkTWVtYmVyc1RleHQuam9pbigiIikpLA0KICAgICAgICAgICAgXSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKiogRmluZHMgdGhlIGxvd2VzdCBuYW1lIGhpZ2hlciB0aGFuICd0YXJnZXROYW1lJy4gKi8NCiAgICBwcml2YXRlIGZpbmRMb3dlck5hbWUobWVtYmVyczogUmVhZG9ubHlBcnJheTxNZW1iZXI+LCB0YXJnZXRSYW5rOiBSYW5rLCB0YXJnZXROYW1lOiBzdHJpbmcpOiBzdHJpbmcgew0KICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiBtZW1iZXJzKSB7DQogICAgICAgICAgICBpZiAobWVtYmVyLm5hbWUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm1lbWJlclJhbmsobWVtYmVyKSAhPT0gdGFyZ2V0UmFuaykgew0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVTdHJpbmcobWVtYmVyLm5hbWUpOw0KICAgICAgICAgICAgaWYgKGNhc2VJbnNlbnNpdGl2ZUxlc3ModGFyZ2V0TmFtZSwgbmFtZSkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkV4cGVjdGVkIHRvIGZpbmQgYSBuYW1lIik7DQogICAgfQ0KDQogICAgLyoqIEZpbmRzIHRoZSBoaWdoZXN0IGV4aXN0aW5nIHJhbmsgbG93ZXIgdGhhbiBgdGFyZ2V0UmFua2AuICovDQogICAgcHJpdmF0ZSBmaW5kTG93ZXJSYW5rKG1lbWJlcnM6IFJlYWRvbmx5QXJyYXk8TWVtYmVyPiwgdGFyZ2V0UmFuazogUmFuayk6IFJhbmsgfCAtMSB7DQogICAgICAgIGxldCBtYXg6IFJhbmsgfCAtMSA9IC0xOw0KICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiBtZW1iZXJzKSB7DQogICAgICAgICAgICBjb25zdCByYW5rID0gdGhpcy5tZW1iZXJSYW5rKG1lbWJlcik7DQogICAgICAgICAgICBpZiAocmFuayAhPT0gLTEgJiYgcmFuayA8IHRhcmdldFJhbmspIHsNCiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJhbmspOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBtYXg7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBtZW1iZXJSYW5rKG1lbWJlcjogTWVtYmVyKTogUmFuayB8IC0xIHsNCiAgICAgICAgY29uc3Qgb3B0aW9uTmFtZSA9IGdldE1lbWJlcktpbmQobWVtYmVyKTsNCiAgICAgICAgaWYgKG9wdGlvbk5hbWUgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuIC0xOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMub3JkZXIuZmluZEluZGV4KChjYXRlZ29yeSkgPT4gY2F0ZWdvcnkuaGFzKG9wdGlvbk5hbWUpKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHJhbmtOYW1lKHJhbms6IFJhbmspOiBzdHJpbmcgew0KICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm9yZGVyW3JhbmtdLm5hbWU7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBjYXNlSW5zZW5zaXRpdmVMZXNzKGE6IHN0cmluZywgYjogc3RyaW5nKSB7DQogICAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKSA8IGIudG9Mb3dlckNhc2UoKTsNCn0NCg0KZnVuY3Rpb24gbWVtYmVyS2luZEZvckNvbnN0cnVjdG9yKGFjY2VzczogQWNjZXNzKTogTWVtYmVyS2luZCB7DQogICAgcmV0dXJuIChNZW1iZXJLaW5kIGFzIGFueSlbYCR7YWNjZXNzfUNvbnN0cnVjdG9yYF0gYXMgTWVtYmVyS2luZDsNCn0NCg0KZnVuY3Rpb24gbWVtYmVyS2luZEZvck1ldGhvZE9yRmllbGQoYWNjZXNzOiBBY2Nlc3MsIG1lbWJlcnNoaXA6ICJTdGF0aWMiIHwgIkluc3RhbmNlIiwga2luZDogIk1ldGhvZCIgfCAiRmllbGQiKTogTWVtYmVyS2luZCB7DQogICAgcmV0dXJuIChNZW1iZXJLaW5kIGFzIGFueSlbYWNjZXNzICsgbWVtYmVyc2hpcCArIGtpbmRdIGFzIE1lbWJlcktpbmQ7DQp9DQoNCmNvbnN0IGFsbEFjY2VzczogQWNjZXNzW10gPSBbInB1YmxpYyIsICJwcm90ZWN0ZWQiLCAicHJpdmF0ZSJdOw0KDQpmdW5jdGlvbiBtZW1iZXJLaW5kRnJvbU5hbWUobmFtZTogc3RyaW5nKTogTWVtYmVyS2luZFtdIHsNCiAgICBjb25zdCBraW5kID0gKE1lbWJlcktpbmQgYXMgYW55KVtMaW50LlV0aWxzLmNhbWVsaXplKG5hbWUpXTsNCiAgICByZXR1cm4gdHlwZW9mIGtpbmQgPT09ICJudW1iZXIiID8gW2tpbmQgYXMgTWVtYmVyS2luZF0gOiBhbGxBY2Nlc3MubWFwKGFkZE1vZGlmaWVyKTsNCg0KICAgIGZ1bmN0aW9uIGFkZE1vZGlmaWVyKG1vZGlmaWVyOiBzdHJpbmcpIHsNCiAgICAgICAgY29uc3QgbW9kaWZpZWRLaW5kID0gKE1lbWJlcktpbmQgYXMgYW55KVtMaW50LlV0aWxzLmNhbWVsaXplKGAke21vZGlmaWVyfS0ke25hbWV9YCldOw0KICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVkS2luZCAhPT0gIm51bWJlciIpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQmFkIG1lbWJlciBraW5kOiAke25hbWV9YCk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIG1vZGlmaWVkS2luZDsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGdldE1lbWJlcktpbmQobWVtYmVyOiBNZW1iZXIpOiBNZW1iZXJLaW5kIHwgdW5kZWZpbmVkIHsNCiAgICBjb25zdCBhY2Nlc3NMZXZlbCA9ICBoYXNNb2RpZmllcihtZW1iZXIubW9kaWZpZXJzLCB0cy5TeW50YXhLaW5kLlByaXZhdGVLZXl3b3JkKSA/ICJwcml2YXRlIg0KICAgICAgICA6IGhhc01vZGlmaWVyKG1lbWJlci5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuUHJvdGVjdGVkS2V5d29yZCkgPyAicHJvdGVjdGVkIg0KICAgICAgICA6ICJwdWJsaWMiOw0KDQogICAgc3dpdGNoIChtZW1iZXIua2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ29uc3RydWN0b3I6DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Db25zdHJ1Y3RTaWduYXR1cmU6DQogICAgICAgICAgICByZXR1cm4gbWVtYmVyS2luZEZvckNvbnN0cnVjdG9yKGFjY2Vzc0xldmVsKTsNCg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUHJvcGVydHlEZWNsYXJhdGlvbjoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlByb3BlcnR5U2lnbmF0dXJlOg0KICAgICAgICAgICAgcmV0dXJuIG1ldGhvZE9yRmllbGQoaXNGdW5jdGlvbkxpdGVyYWwoKG1lbWJlciBhcyB0cy5Qcm9wZXJ0eURlY2xhcmF0aW9uKS5pbml0aWFsaXplcikpOw0KDQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5NZXRob2REZWNsYXJhdGlvbjoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1ldGhvZFNpZ25hdHVyZToNCiAgICAgICAgICAgIHJldHVybiBtZXRob2RPckZpZWxkKHRydWUpOw0KDQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIG1ldGhvZE9yRmllbGQoaXNNZXRob2Q6IGJvb2xlYW4pIHsNCiAgICAgICAgY29uc3QgbWVtYmVyc2hpcCA9IGhhc01vZGlmaWVyKG1lbWJlci5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuU3RhdGljS2V5d29yZCkgPyAiU3RhdGljIiA6ICJJbnN0YW5jZSI7DQogICAgICAgIHJldHVybiBtZW1iZXJLaW5kRm9yTWV0aG9kT3JGaWVsZChhY2Nlc3NMZXZlbCwgbWVtYmVyc2hpcCwgaXNNZXRob2QgPyAiTWV0aG9kIiA6ICJGaWVsZCIpOw0KICAgIH0NCn0NCg0KdHlwZSBNZW1iZXJDYXRlZ29yeUpzb24gPSB7IG5hbWU6IHN0cmluZzsga2luZHM6IHN0cmluZ1tdIH0gfCBzdHJpbmc7DQpjbGFzcyBNZW1iZXJDYXRlZ29yeSB7DQogICAgY29uc3RydWN0b3IocmVhZG9ubHkgbmFtZTogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IGtpbmRzOiBTZXQ8TWVtYmVyS2luZD4pIHt9DQogICAgcHVibGljIGhhcyhraW5kOiBNZW1iZXJLaW5kKSB7IHJldHVybiB0aGlzLmtpbmRzLmhhcyhraW5kKTsgfQ0KfQ0KDQp0eXBlIE1lbWJlciA9IHRzLlR5cGVFbGVtZW50IHwgdHMuQ2xhc3NFbGVtZW50Ow0KdHlwZSBSYW5rID0gbnVtYmVyOw0KDQp0eXBlIEFjY2VzcyA9ICJwdWJsaWMiIHwgInByb3RlY3RlZCIgfCAicHJpdmF0ZSI7DQoNCmludGVyZmFjZSBPcHRpb25zIHsNCiAgICBvcmRlcjogTWVtYmVyQ2F0ZWdvcnlbXTsNCiAgICBhbHBoYWJldGl6ZTogYm9vbGVhbjsNCn0NCg0KZnVuY3Rpb24gcGFyc2VPcHRpb25zKG9wdGlvbnM6IGFueVtdKTogT3B0aW9ucyB7DQogICAgY29uc3QgeyBvcmRlcjogb3JkZXJKc29uLCBhbHBoYWJldGl6ZSB9ID0gZ2V0T3B0aW9uc0pzb24ob3B0aW9ucyk7DQogICAgY29uc3Qgb3JkZXIgPSBvcmRlckpzb24ubWFwKChjYXQpID0+IHR5cGVvZiBjYXQgPT09ICJzdHJpbmciDQogICAgICAgID8gbmV3IE1lbWJlckNhdGVnb3J5KGNhdC5yZXBsYWNlKC8tL2csICIgIiksIG5ldyBTZXQobWVtYmVyS2luZEZyb21OYW1lKGNhdCkpKQ0KICAgICAgICA6IG5ldyBNZW1iZXJDYXRlZ29yeShjYXQubmFtZSwgbmV3IFNldChmbGF0TWFwKGNhdC5raW5kcywgbWVtYmVyS2luZEZyb21OYW1lKSkpKTsNCiAgICByZXR1cm4geyBvcmRlciwgYWxwaGFiZXRpemUgfTsNCn0NCmZ1bmN0aW9uIGdldE9wdGlvbnNKc29uKGFsbE9wdGlvbnM6IGFueVtdKTogeyBvcmRlcjogTWVtYmVyQ2F0ZWdvcnlKc29uW107IGFscGhhYmV0aXplOiBib29sZWFuIH0gew0KICAgIGlmIChhbGxPcHRpb25zID09IHVuZGVmaW5lZCB8fCBhbGxPcHRpb25zLmxlbmd0aCA9PT0gMCB8fCBhbGxPcHRpb25zWzBdID09IHVuZGVmaW5lZCkgew0KICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkdvdCBlbXB0eSBvcHRpb25zIik7DQogICAgfQ0KDQogICAgY29uc3QgZmlyc3RPcHRpb24gPSBhbGxPcHRpb25zWzBdIGFzIHsgb3JkZXI6IE1lbWJlckNhdGVnb3J5SnNvbltdIHwgc3RyaW5nOyBhbHBoYWJldGl6ZT86IGJvb2xlYW4gfSB8IHN0cmluZzsNCiAgICBpZiAodHlwZW9mIGZpcnN0T3B0aW9uICE9PSAib2JqZWN0Iikgew0KICAgICAgICAvLyBVbmRvY3VtZW50ZWQgZGlyZWN0IHN0cmluZyBvcHRpb24uIERlcHJlY2F0ZSBldmVudHVhbGx5Lg0KICAgICAgICByZXR1cm4geyBvcmRlcjogY29udmVydEZyb21PbGRTdHlsZU9wdGlvbnMoYWxsT3B0aW9ucyksIGFscGhhYmV0aXplOiBmYWxzZSB9OyAvLyBwcmVzdW1lIGFsbE9wdGlvbnMgdG8gYmUgc3RyaW5nW10NCiAgICB9DQoNCiAgICByZXR1cm4geyBvcmRlcjogY2F0ZWdvcnlGcm9tT3B0aW9uKGZpcnN0T3B0aW9uW09QVElPTl9PUkRFUl0pLCBhbHBoYWJldGl6ZTogZmlyc3RPcHRpb25bT1BUSU9OX0FMUEhBQkVUSVpFXSA9PT0gdHJ1ZSB9Ow0KfQ0KZnVuY3Rpb24gY2F0ZWdvcnlGcm9tT3B0aW9uKG9yZGVyT3B0aW9uOiBNZW1iZXJDYXRlZ29yeUpzb25bXSB8IHN0cmluZyk6IE1lbWJlckNhdGVnb3J5SnNvbltdIHsNCiAgICBpZiAoQXJyYXkuaXNBcnJheShvcmRlck9wdGlvbikpIHsNCiAgICAgICAgcmV0dXJuIG9yZGVyT3B0aW9uOw0KICAgIH0NCg0KICAgIGNvbnN0IHByZXNldCA9IFBSRVNFVFMuZ2V0KG9yZGVyT3B0aW9uKTsNCiAgICBpZiAocHJlc2V0ID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgb3JkZXI6ICR7SlNPTi5zdHJpbmdpZnkob3JkZXJPcHRpb24pfWApOw0KICAgIH0NCiAgICByZXR1cm4gcHJlc2V0Ow0KfQ0KDQovKioNCiAqIENvbnZlcnQgZnJvbSB1bmRvY3VtZW50ZWQgb2xkLXN0eWxlIG9wdGlvbnMuDQogKiBUaGlzIGlzIGRlc2lnbmVkIHRvIG1pbWljIHRoZSBvbGQgYmVoYXZpb3IgYW5kIHNob3VsZCBiZSByZW1vdmVkIGV2ZW50dWFsbHkuDQogKi8NCmZ1bmN0aW9uIGNvbnZlcnRGcm9tT2xkU3R5bGVPcHRpb25zKG9wdGlvbnM6IHN0cmluZ1tdKTogTWVtYmVyQ2F0ZWdvcnlKc29uW10gew0KICAgIGxldCBjYXRlZ29yaWVzOiBOYW1lQW5kS2luZHNbXSA9IFt7IG5hbWU6ICJtZW1iZXIiLCBraW5kczogYWxsTWVtYmVyS2luZE5hbWVzIH1dOw0KICAgIGlmIChoYXNPcHRpb24oInZhcmlhYmxlcy1iZWZvcmUtZnVuY3Rpb25zIikpIHsNCiAgICAgICAgY2F0ZWdvcmllcyA9IHNwbGl0T2xkU3R5bGVPcHRpb25zKGNhdGVnb3JpZXMsIChraW5kKSA9PiBraW5kLmluY2x1ZGVzKCJmaWVsZCIpLCAiZmllbGQiLCAibWV0aG9kIik7DQogICAgfQ0KICAgIGlmIChoYXNPcHRpb24oInN0YXRpYy1iZWZvcmUtaW5zdGFuY2UiKSkgew0KICAgICAgICBjYXRlZ29yaWVzID0gc3BsaXRPbGRTdHlsZU9wdGlvbnMoY2F0ZWdvcmllcywgKGtpbmQpID0+IGtpbmQuaW5jbHVkZXMoInN0YXRpYyIpLCAic3RhdGljIiwgImluc3RhbmNlIik7DQogICAgfQ0KICAgIGlmIChoYXNPcHRpb24oInB1YmxpYy1iZWZvcmUtcHJpdmF0ZSIpKSB7DQogICAgICAgIC8vICdwcm90ZWN0ZWQnIGlzIGNvbnNpZGVyZWQgcHVibGljDQogICAgICAgIGNhdGVnb3JpZXMgPSBzcGxpdE9sZFN0eWxlT3B0aW9ucyhjYXRlZ29yaWVzLCAoa2luZCkgPT4gIWtpbmQuaW5jbHVkZXMoInByaXZhdGUiKSwgInB1YmxpYyIsICJwcml2YXRlIik7DQogICAgfQ0KICAgIHJldHVybiBjYXRlZ29yaWVzOw0KDQogICAgZnVuY3Rpb24gaGFzT3B0aW9uKHg6IHN0cmluZyk6IGJvb2xlYW4gew0KICAgICAgICByZXR1cm4gb3B0aW9ucy5pbmRleE9mKHgpICE9PSAtMTsNCiAgICB9DQp9DQppbnRlcmZhY2UgTmFtZUFuZEtpbmRzIHsgbmFtZTogc3RyaW5nOyBraW5kczogc3RyaW5nW107IH0NCmZ1bmN0aW9uIHNwbGl0T2xkU3R5bGVPcHRpb25zKGNhdGVnb3JpZXM6IE5hbWVBbmRLaW5kc1tdLCBmaWx0ZXI6IChuYW1lOiBzdHJpbmcpID0+IGJvb2xlYW4sIGE6IHN0cmluZywgYjogc3RyaW5nKTogTmFtZUFuZEtpbmRzW10gew0KICAgIGNvbnN0IG5ld0NhdGVnb3JpZXM6IE5hbWVBbmRLaW5kc1tdICA9IFtdOw0KICAgIGZvciAoY29uc3QgY2F0IG9mIGNhdGVnb3JpZXMpIHsNCiAgICAgICAgY29uc3QgeWVzID0gW107IGNvbnN0IG5vID0gW107DQogICAgICAgIGZvciAoY29uc3Qga2luZCBvZiBjYXQua2luZHMpIHsNCiAgICAgICAgICAgIGlmIChmaWx0ZXIoa2luZCkpIHsNCiAgICAgICAgICAgICAgICB5ZXMucHVzaChraW5kKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgbm8ucHVzaChraW5kKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBhdWdtZW50TmFtZSA9IChzOiBzdHJpbmcpID0+IHsNCiAgICAgICAgICAgIGlmIChhID09PSAiZmllbGQiKSB7DQogICAgICAgICAgICAgICAgLy8gUmVwbGFjZSAibWVtYmVyIiB3aXRoICJmaWVsZCIvIm1ldGhvZCIgaW5zdGVhZCBvZiBhdWdtZW50aW5nLg0KICAgICAgICAgICAgICAgIHJldHVybiBzOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGAke3N9ICR7Y2F0Lm5hbWV9YDsNCiAgICAgICAgfTsNCiAgICAgICAgbmV3Q2F0ZWdvcmllcy5wdXNoKHsgbmFtZTogYXVnbWVudE5hbWUoYSksIGtpbmRzOiB5ZXMgfSk7DQogICAgICAgIG5ld0NhdGVnb3JpZXMucHVzaCh7IG5hbWU6IGF1Z21lbnROYW1lKGIpLCBraW5kczogbm8gfSk7DQogICAgfQ0KICAgIHJldHVybiBuZXdDYXRlZ29yaWVzOw0KfQ0KDQpmdW5jdGlvbiBpc0Z1bmN0aW9uTGl0ZXJhbChub2RlOiB0cy5Ob2RlIHwgdW5kZWZpbmVkKSB7DQogICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgc3dpdGNoIChub2RlLmtpbmQpIHsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkFycm93RnVuY3Rpb246DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5GdW5jdGlvbkV4cHJlc3Npb246DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIG5hbWVTdHJpbmcobmFtZTogdHMuUHJvcGVydHlOYW1lKTogc3RyaW5nIHsNCiAgICBzd2l0Y2ggKG5hbWUua2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSWRlbnRpZmllcjoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlN0cmluZ0xpdGVyYWw6DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5OdW1lcmljTGl0ZXJhbDoNCiAgICAgICAgICAgIHJldHVybiAobmFtZSBhcyB0cy5JZGVudGlmaWVyIHwgdHMuTGl0ZXJhbEV4cHJlc3Npb24pLnRleHQ7DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gIiI7DQogICAgfQ0KfQ0KLyoqDQogKiBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIChPciB1bmRlZmluZWQpLg0KICovDQpmdW5jdGlvbiBhcnJheUxhc3Q8VD4oYXJyYXk6IEFycmF5TGlrZTxUPik6IFQgew0KICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTsNCn0NCg0KLyoqDQogKiBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4LCBidXQgdGhlIGxhc3QgaW5kZXguDQogKi8NCmZ1bmN0aW9uIGFycmF5RmluZExhc3RJbmRleDxUPigNCiAgICBhcnJheTogQXJyYXlMaWtlPFQ+LA0KICAgIHByZWRpY2F0ZTogKGVsOiBULCBlbEluZGV4OiBudW1iZXIsIGFycmF5OiBBcnJheUxpa2U8VD4pID0+IGJvb2xlYW4sDQopOiBudW1iZXIgew0KICAgIGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGg7IGktLSA+IDA7KSB7DQogICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaV0sIGksIGFycmF5KSkgew0KICAgICAgICAgICAgcmV0dXJuIGk7DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIC0xOw0KfQ0KDQovKioNCiAqIEFwcGxpZXMgYSBSZXBsYWNlbWVudCB0byBhIHBhcnQgb2YgdGhlIHRleHQgd2hpY2ggc3RhcnRzIGF0IG9mZnNldC4NCiAqIFNlZSBhbHNvIFJlcGxhY2VtZW50LmFwcGx5DQogKi8NCmZ1bmN0aW9uIGFwcGx5UmVwbGFjZW1lbnRPZmZzZXQoY29udGVudDogc3RyaW5nLCByZXBsYWNlbWVudDogTGludC5SZXBsYWNlbWVudCwgb2Zmc2V0OiBudW1iZXIpIHsNCiAgICByZXR1cm4gY29udGVudC5zdWJzdHJpbmcoMCwgcmVwbGFjZW1lbnQuc3RhcnQgLSBvZmZzZXQpDQogICAgICAgICsgcmVwbGFjZW1lbnQudGV4dA0KICAgICAgICArIGNvbnRlbnQuc3Vic3RyaW5nKHJlcGxhY2VtZW50LnN0YXJ0IC0gb2Zmc2V0ICsgcmVwbGFjZW1lbnQubGVuZ3RoKTsNCn0NCg0KLyoqDQogKiBHZXQgdGhlIGluZGV4ZXMgb2YgdGhlIGJvdW5kYXJpZXMgYmV0d2VlbiBub2RlcyBpbiB0aGUgbm9kZSBhcnJheS4gVGhlIGZvbGxvd2luZyBwb2ludHMgbXVzdCBiZSB0YWtlbiBpbnRvIGFjY291bnQ6DQogKiAtIFRyaXZpYSBzaG91bGQgc3RheSB3aXRoIGl0cyBjb3JyZXNwb25kaW5nIG5vZGUgKGNvbW1lbnRzIG9uIHRoZSBzYW1lIGxpbmUgZm9sbG93aW5nIHRoZSB0b2tlbiBiZWxvbmcgdG8gdGhlDQogKiAgIHByZXZpb3VzIHRva2VuLCB0aGUgcmVzdCB0byB0aGUgbmV4dCkuDQogKiAtIFJlb3JkZXJpbmcgdGhlIHN1YnRleHRzIHNob3VsZCBub3QgcmVzdWx0IGluIGNvZGUgYmVpbmcgY29tbWVudGVkIG91dCBkdWUgdG8gYmVpbmcgbW92ZWQgYmV0d2VlbiBhICIvLyIgYW5kDQogKiAgIHRoZSBmb2xsb3dpbmcgbmV3bGluZS4NCiAqIC0gVGhlIGVuZCBvZiBvbmUgbm9kZSBtdXN0IGJlIHRoZSBzdGFydCBvZiB0aGUgbmV4dCwgb3RoZXJ3aXNlIHRoZSBpbnRyYXZlbmluZyB3aGl0ZXNwYWNlIHdpbGwgYmUgbG9zdCB3aGVuDQogKiAgIHJlb3JkZXJpbmcuDQogKg0KICogSGVuY2UsIHRoZSBib3VuZGFyaWVzIGFyZSBjaG9zZW4gdG8gYmUgX2FmdGVyXyB0aGUgbmV3bGluZSBmb2xsb3dpbmcgdGhlIG5vZGUsIG9yIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgdG9rZW4sDQogKiBpZiB0aGF0IGNvbWVzIGZpcnN0Lg0KICovDQpmdW5jdGlvbiBnZXRTcGxpdEluZGV4ZXMobWVtYmVyczogdHMuTm9kZUFycmF5PE1lbWJlcj4sIHRleHQ6IHN0cmluZykgew0KICAgIGNvbnN0IHJlc3VsdCA9IG1lbWJlcnMubWFwKChtZW1iZXIpID0+IGdldE5leHRTcGxpdEluZGV4KHRleHQsIG1lbWJlci5nZXRGdWxsU3RhcnQoKSkpOw0KICAgIHJlc3VsdC5wdXNoKGdldE5leHRTcGxpdEluZGV4KHRleHQsIGFycmF5TGFzdChtZW1iZXJzKS5nZXRFbmQoKSkpOw0KICAgIHJldHVybiByZXN1bHQ7DQp9DQoNCi8qKg0KICogQ2FsY3VsYXRlcyB0aGUgaW5kZXggYWZ0ZXIgdGhlIG5ld2xpbmUgZm9sbG93aW5nIHBvcywgb3IgdGhlIGJlZ2lubmluZyBvZiB0aGUgbmV4dCB0b2tlbiwgd2hpY2hldmVyIGNvbWVzIGZpcnN0Lg0KICogU2VlIGFsc28gZ2V0U3BsaXRJbmRleGVzLg0KICogVGhpcyBtZXRob2QgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIFR5cGVTY3JpcHQncyBpbnRlcm5hbCBpdGVyYXRlQ29tbWVudFJhbmdlcyBmdW5jdGlvbi4NCiAqLw0KZnVuY3Rpb24gZ2V0TmV4dFNwbGl0SW5kZXgodGV4dDogc3RyaW5nLCBwb3M6IG51bWJlcikgew0KICAgIGNvbnN0IGVudW0gQ2hhcmFjdGVyQ29kZXMgew0KICAgICAgICBsaW5lRmVlZCA9IDB4MEEsICAgICAgICAgICAgICAvLyBcbg0KICAgICAgICBjYXJyaWFnZVJldHVybiA9IDB4MEQsICAgICAgICAvLyBccg0KICAgICAgICBmb3JtRmVlZCA9IDB4MEMsICAgICAgICAgICAgICAvLyBcZg0KICAgICAgICB0YWIgPSAweDA5LCAgICAgICAgICAgICAgICAgICAvLyBcdA0KICAgICAgICB2ZXJ0aWNhbFRhYiA9IDB4MEIsICAgICAgICAgICAvLyBcdg0KICAgICAgICBzbGFzaCA9IDB4MkYsICAgICAgICAgICAgICAgICAvLyAvDQogICAgICAgIGFzdGVyaXNrID0gMHgyQSwgICAgICAgICAgICAgIC8vICoNCiAgICAgICAgc3BhY2UgPSAweDAwMjAsICAgLy8gIiAiDQogICAgICAgIG1heEFzY2lpQ2hhcmFjdGVyID0gMHg3RiwNCiAgICB9DQogICAgc2Nhbjogd2hpbGUgKHBvcyA+PSAwICYmIHBvcyA8IHRleHQubGVuZ3RoKSB7DQogICAgICAgIGNvbnN0IGNoID0gdGV4dC5jaGFyQ29kZUF0KHBvcyk7DQogICAgICAgIHN3aXRjaCAoY2gpIHsNCiAgICAgICAgICAgIGNhc2UgQ2hhcmFjdGVyQ29kZXMuY2FycmlhZ2VSZXR1cm46DQogICAgICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gQ2hhcmFjdGVyQ29kZXMubGluZUZlZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgcG9zKys7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaA0KICAgICAgICAgICAgY2FzZSBDaGFyYWN0ZXJDb2Rlcy5saW5lRmVlZDoNCiAgICAgICAgICAgICAgICBwb3MrKzsNCiAgICAgICAgICAgICAgICAvLyBzcGxpdCBpcyBhZnRlciBuZXcgbGluZQ0KICAgICAgICAgICAgICAgIHJldHVybiBwb3M7DQogICAgICAgICAgICBjYXNlIENoYXJhY3RlckNvZGVzLnRhYjoNCiAgICAgICAgICAgIGNhc2UgQ2hhcmFjdGVyQ29kZXMudmVydGljYWxUYWI6DQogICAgICAgICAgICBjYXNlIENoYXJhY3RlckNvZGVzLmZvcm1GZWVkOg0KICAgICAgICAgICAgY2FzZSBDaGFyYWN0ZXJDb2Rlcy5zcGFjZToNCiAgICAgICAgICAgICAgICAvLyBza2lwIHdoaXRlc3BhY2UNCiAgICAgICAgICAgICAgICBwb3MrKzsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIGNhc2UgQ2hhcmFjdGVyQ29kZXMuc2xhc2g6DQogICAgICAgICAgICAgICAgY29uc3QgbmV4dENoYXIgPSB0ZXh0LmNoYXJDb2RlQXQocG9zICsgMSk7DQogICAgICAgICAgICAgICAgaWYgKG5leHRDaGFyID09PSBDaGFyYWN0ZXJDb2Rlcy5zbGFzaCB8fCBuZXh0Q2hhciA9PT0gQ2hhcmFjdGVyQ29kZXMuYXN0ZXJpc2spIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNTaW5nbGVMaW5lQ29tbWVudCA9IG5leHRDaGFyID09PSBDaGFyYWN0ZXJDb2Rlcy5zbGFzaDsNCiAgICAgICAgICAgICAgICAgICAgcG9zICs9IDI7DQogICAgICAgICAgICAgICAgICAgIGlmIChpc1NpbmdsZUxpbmVDb21tZW50KSB7DQogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocG9zIDwgdGV4dC5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHMuaXNMaW5lQnJlYWsodGV4dC5jaGFyQ29kZUF0KHBvcykpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb21tZW50IGVuZHMgaGVyZSwgZ28gYmFjayB0byBkZWZhdWx0IGxvZ2ljIHRvIGhhbmRsZSBwYXJzaW5nIG5ldyBsaW5lIGFuZCByZXN1bHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgc2NhbjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocG9zIDwgdGV4dC5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KHBvcykgPT09IENoYXJhY3RlckNvZGVzLmFzdGVyaXNrICYmIHRleHQuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gQ2hhcmFjdGVyQ29kZXMuc2xhc2gpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zICs9IDI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHNjYW47DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgYXJyaXZlIGhlcmUsIGl0J3MgYmVjYXVzZSBwb3MgPT0gdGV4dC5sZW5ndGgNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvczsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWsgc2NhbjsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgLy8gc2tpcCB3aGl0ZXNwYWNlOg0KICAgICAgICAgICAgICAgIGlmIChjaCA+IENoYXJhY3RlckNvZGVzLm1heEFzY2lpQ2hhcmFjdGVyICYmICh0cy5pc1doaXRlU3BhY2VMaWtlKGNoKSkpIHsNCiAgICAgICAgICAgICAgICAgICAgcG9zKys7DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhayBzY2FuOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiBwb3M7DQp9DQo="
          },
          "hashes": [
            {
              "value": "2F1E044015E3ACEB51B4E5A26076B78E",
              "algorithm": "md5"
            },
            {
              "value": "8ED67217A65A10A939855CCB47B5F5A2DD3AA90F",
              "algorithm": "sha-1"
            },
            {
              "value": "0F78EF91F2A64F1AC25068CBA5C8E5FB1E1032A0655978CF8811DB8D6BC9CF59",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/newlineBeforeReturnRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0UHJldmlvdXNTdGF0ZW1lbnQgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuZXdsaW5lLWJlZm9yZS1yZXR1cm4iLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkVuZm9yY2VzIGJsYW5rIGxpbmUgYmVmb3JlIHJldHVybiB3aGVuIG5vdCB0aGUgb25seSBsaW5lIGluIHRoZSBibG9jay4iLA0KICAgICAgICByYXRpb25hbGU6ICJIZWxwcyBtYWludGFpbiBhIHJlYWRhYmxlIHN0eWxlIGluIHlvdXIgY29kZWJhc2UuIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiB7fSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlXSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiTWlzc2luZyBibGFuayBsaW5lIGJlZm9yZSByZXR1cm4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhXYWxrZXIobmV3IE5ld2xpbmVCZWZvcmVSZXR1cm5XYWxrZXIoc291cmNlRmlsZSwgdGhpcy5ydWxlTmFtZSwgdW5kZWZpbmVkKSk7DQogICAgfQ0KfQ0KDQpjbGFzcyBOZXdsaW5lQmVmb3JlUmV0dXJuV2Fsa2VyIGV4dGVuZHMgTGludC5BYnN0cmFjdFdhbGtlcjx2b2lkPiB7DQogICAgcHVibGljIHdhbGsoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSkgew0KICAgICAgICBjb25zdCBjYiA9IChub2RlOiB0cy5Ob2RlKTogdm9pZCA9PiB7DQogICAgICAgICAgICBpZiAobm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLlJldHVyblN0YXRlbWVudCkgew0KICAgICAgICAgICAgICAgIHRoaXMudmlzaXRSZXR1cm5TdGF0ZW1lbnQobm9kZSBhcyB0cy5SZXR1cm5TdGF0ZW1lbnQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgIH07DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgY2IpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdmlzaXRSZXR1cm5TdGF0ZW1lbnQobm9kZTogdHMuUmV0dXJuU3RhdGVtZW50KSB7DQogICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2aW91c1N0YXRlbWVudChub2RlKTsNCiAgICAgICAgaWYgKHByZXYgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgLy8gcmV0dXJuIGlzIG5vdCB3aXRoaW4gYSBibG9jayAoZS5nLiB0aGUgb25seSBjaGlsZCBvZiBhbiBJZlN0YXRlbWVudCkgb3IgdGhlIGZpcnN0IHN0YXRlbWVudCBvZiB0aGUgYmxvY2sNCiAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gY2hlY2sgZm9yIHByZWNlZGluZyBuZXdsaW5lDQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBsZXQgc3RhcnQgPSBub2RlLmdldFN0YXJ0KHRoaXMuc291cmNlRmlsZSk7DQogICAgICAgIGxldCBsaW5lID0gdHMuZ2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24odGhpcy5zb3VyY2VGaWxlLCBzdGFydCkubGluZTsNCiAgICAgICAgY29uc3QgY29tbWVudHMgPSB0cy5nZXRMZWFkaW5nQ29tbWVudFJhbmdlcyh0aGlzLnNvdXJjZUZpbGUudGV4dCwgbm9kZS5wb3MpOw0KICAgICAgICBpZiAoY29tbWVudHMgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGJsYW5rIGxpbmVzIGJldHdlZW4gY29tbWVudHMNCiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjb21tZW50cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgew0KICAgICAgICAgICAgICAgIGNvbnN0IGVuZExpbmUgPSB0cy5nZXRMaW5lQW5kQ2hhcmFjdGVyT2ZQb3NpdGlvbih0aGlzLnNvdXJjZUZpbGUsIGNvbW1lbnRzW2ldLmVuZCkubGluZTsNCiAgICAgICAgICAgICAgICBpZiAoZW5kTGluZSA8IGxpbmUgLSAxKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgc3RhcnQgPSBjb21tZW50c1tpXS5wb3M7DQogICAgICAgICAgICAgICAgbGluZSA9IHRzLmdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uKHRoaXMuc291cmNlRmlsZSwgc3RhcnQpLmxpbmU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgcHJldkxpbmUgPSB0cy5nZXRMaW5lQW5kQ2hhcmFjdGVyT2ZQb3NpdGlvbih0aGlzLnNvdXJjZUZpbGUsIHByZXYuZW5kKS5saW5lOw0KDQogICAgICAgIGlmIChwcmV2TGluZSA+PSBsaW5lIC0gMSkgew0KICAgICAgICAgICAgLy8gUHJldmlvdXMgc3RhdGVtZW50IGlzIG9uIHRoZSBzYW1lIG9yIHByZXZpb3VzIGxpbmUNCiAgICAgICAgICAgIHRoaXMuYWRkRmFpbHVyZShzdGFydCwgc3RhcnQsIFJ1bGUuRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "55ABFCDB9535D98483F718EA52B10ABA",
              "algorithm": "md5"
            },
            {
              "value": "9AF4BBB8AC43467E9B9D4E209643D7CE52FA3DC8",
              "algorithm": "sha-1"
            },
            {
              "value": "0B5D363F37CB0D1D4573A734807DBFCEC764079BA52AAEE577B6BC1A5FB3750A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/newlinePerChainedCallRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsNCiAgICBpc0NhbGxFeHByZXNzaW9uLA0KICAgIGlzRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24sDQogICAgaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24sDQogICAgaXNTYW1lTGluZSwNCn0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4iOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibmV3bGluZS1wZXItY2hhaW5lZC1jYWxsIiwNCiAgICAgICAgZGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgUmVxdWlyZXMgdGhhdCBjaGFpbmVkIG1ldGhvZCBjYWxscyBiZSBicm9rZW4gYXBhcnQgb250byBzZXBhcmF0ZSBsaW5lcy5gLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgVGhpcyBzdHlsZSBoZWxwcyB0byBrZWVwIGNvZGUgJ3ZlcnRpY2FsJywgYXZvaWRpbmcgdGhlIG5lZWQgZm9yIHNpZGUtc2Nyb2xsaW5nIGluIElERXMgb3IgdGV4dCBlZGl0b3JzLmAsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUiLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICB0eXBlOiAic3R5bGUiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiV2hlbiBjaGFpbmluZyBjYWxscywgcHV0IG1ldGhvZCBjYWxscyBvbiBuZXcgbGluZXMuIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoV2Fsa2VyKA0KICAgICAgICAgICAgbmV3IE5ld2xpbmVQZXJDaGFpbmVkQ2FsbFdhbGtlcihzb3VyY2VGaWxlLCB0aGlzLnJ1bGVOYW1lLCB1bmRlZmluZWQpLA0KICAgICAgICApOw0KICAgIH0NCn0NCg0KY2xhc3MgTmV3bGluZVBlckNoYWluZWRDYWxsV2Fsa2VyIGV4dGVuZHMgTGludC5BYnN0cmFjdFdhbGtlcjx2b2lkPiB7DQogICAgcHVibGljIHdhbGsoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSkgew0KICAgICAgICBjb25zdCBjaGVja0ZvclNhbWVMaW5lID0gKG5vZGU6IHRzLk5vZGUpOiB2b2lkID0+IHsNCiAgICAgICAgICAgIGlmICgNCiAgICAgICAgICAgICAgICBpc0NhbGxFeHByZXNzaW9uKG5vZGUpICYmDQogICAgICAgICAgICAgICAgaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24obm9kZS5leHByZXNzaW9uKSAmJg0KICAgICAgICAgICAgICAgIGlzU2FtZUxpbmUoDQogICAgICAgICAgICAgICAgICAgIHNvdXJjZUZpbGUsDQogICAgICAgICAgICAgICAgICAgIG5vZGUuZXhwcmVzc2lvbi5leHByZXNzaW9uLmVuZCwNCiAgICAgICAgICAgICAgICAgICAgbm9kZS5leHByZXNzaW9uLm5hbWUucG9zLA0KICAgICAgICAgICAgICAgICkgJiYNCiAgICAgICAgICAgICAgICBoYXNDaGlsZENhbGwobm9kZS5leHByZXNzaW9uKQ0KICAgICAgICAgICAgKSB7DQogICAgICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlKA0KICAgICAgICAgICAgICAgICAgICBub2RlLmV4cHJlc3Npb24ubmFtZS5wb3MgLSAxLA0KICAgICAgICAgICAgICAgICAgICBub2RlLmV4cHJlc3Npb24ubmFtZS5lbmQsDQogICAgICAgICAgICAgICAgICAgIFJ1bGUuRkFJTFVSRV9TVFJJTkcsDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2hlY2tGb3JTYW1lTGluZSk7DQogICAgICAgIH07DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgY2hlY2tGb3JTYW1lTGluZSk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBoYXNDaGlsZENhbGwobm9kZTogdHMuUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKTogYm9vbGVhbiB7DQogICAgbGV0IHsgZXhwcmVzc2lvbiB9ID0gbm9kZTsNCiAgICB3aGlsZSAoDQogICAgICAgIGlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKGV4cHJlc3Npb24pIHx8DQogICAgICAgIGlzRWxlbWVudEFjY2Vzc0V4cHJlc3Npb24oZXhwcmVzc2lvbikNCiAgICApIHsNCiAgICAgICAgKHsgZXhwcmVzc2lvbiB9ID0gZXhwcmVzc2lvbik7DQogICAgfQ0KICAgIHJldHVybiBleHByZXNzaW9uLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb247DQp9DQo="
          },
          "hashes": [
            {
              "value": "CC39C5D0D58500F87275CFB11F5C9229",
              "algorithm": "md5"
            },
            {
              "value": "EC1A3E03F0E9A870791F83567D5D4776EB095537",
              "algorithm": "sha-1"
            },
            {
              "value": "42935959E03E1FEBEA4F3D155F127059498A3CE2BB9592EE02CD184F3592B8E5",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noAngleBracketTypeAssertionRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCaW5hcnlFeHByZXNzaW9uLCBpc1R5cGVBc3NlcnRpb24gfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLWFuZ2xlLWJyYWNrZXQtdHlwZS1hc3NlcnRpb24iLA0KICAgICAgICBkZXNjcmlwdGlvbjogIlJlcXVpcmVzIHRoZSB1c2Ugb2YgYGFzIFR5cGVgIGZvciB0eXBlIGFzc2VydGlvbnMgaW5zdGVhZCBvZiBgPFR5cGU+YC4iLA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBCb3RoIGZvcm1hdHMgb2YgdHlwZSBhc3NlcnRpb25zIGhhdmUgdGhlIHNhbWUgZWZmZWN0LCBidXQgb25seSBcYGFzXGAgdHlwZSBhc3NlcnRpb25zDQogICAgICAgICAgICB3b3JrIGluIFxgLnRzeFxgIGZpbGVzLiBUaGlzIHJ1bGUgZW5zdXJlcyB0aGF0IHlvdSBoYXZlIGEgY29uc2lzdGVudCB0eXBlIGFzc2VydGlvbiBzdHlsZQ0KICAgICAgICAgICAgYWNyb3NzIHlvdXIgY29kZWJhc2UuYCwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICB0eXBlOiAic3R5bGUiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogdHJ1ZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIlR5cGUgYXNzZXJ0aW9uIHVzaW5nIHRoZSAnPD4nIHN5bnRheCBpcyBmb3JiaWRkZW4uIFVzZSB0aGUgJ2FzJyBzeW50YXggaW5zdGVhZC4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KSB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZTogdHMuTm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAoaXNUeXBlQXNzZXJ0aW9uKG5vZGUpKSB7DQogICAgICAgICAgICBsZXQge2V4cHJlc3Npb259ID0gbm9kZTsNCiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbm9kZS5nZXRTdGFydChjdHguc291cmNlRmlsZSk7DQogICAgICAgICAgICBjb25zdCBhZGRQYXJlbnMgPSBuZWVkc1BhcmVucyhub2RlKTsNCiAgICAgICAgICAgIGxldCByZXBsYWNlVGV4dCA9IGAgYXMgJHtub2RlLnR5cGUuZ2V0VGV4dChjdHguc291cmNlRmlsZSl9JHthZGRQYXJlbnMgPyAiKSIgOiAiIn1gOw0KICAgICAgICAgICAgd2hpbGUgKGlzVHlwZUFzc2VydGlvbihleHByZXNzaW9uKSkgew0KICAgICAgICAgICAgICAgIHJlcGxhY2VUZXh0ID0gYCBhcyAke2V4cHJlc3Npb24udHlwZS5nZXRUZXh0KGN0eC5zb3VyY2VGaWxlKX0ke3JlcGxhY2VUZXh0fWA7DQogICAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24uZXhwcmVzc2lvbjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlKHN0YXJ0LCBub2RlLmVuZCwgUnVsZS5GQUlMVVJFX1NUUklORywgWw0KICAgICAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQuYXBwZW5kVGV4dChub2RlLmVuZCwgcmVwbGFjZVRleHQpLA0KICAgICAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQucmVwbGFjZUZyb21UbyhzdGFydCwgZXhwcmVzc2lvbi5nZXRTdGFydChjdHguc291cmNlRmlsZSksIGFkZFBhcmVucyA/ICIoIiA6ICIiKSwNCiAgICAgICAgICAgIF0pOw0KICAgICAgICAgICAgcmV0dXJuIGNiKGV4cHJlc3Npb24pOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0KDQpmdW5jdGlvbiBuZWVkc1BhcmVucyhub2RlOiB0cy5UeXBlQXNzZXJ0aW9uKTogYm9vbGVhbiB7DQogICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnQhOw0KICAgIHJldHVybiBpc0JpbmFyeUV4cHJlc3Npb24ocGFyZW50KSAmJg0KICAgICAgICAocGFyZW50Lm9wZXJhdG9yVG9rZW4ua2luZCA9PT0gdHMuU3ludGF4S2luZC5BbXBlcnNhbmRUb2tlbiB8fCBwYXJlbnQub3BlcmF0b3JUb2tlbi5raW5kID09PSB0cy5TeW50YXhLaW5kLkJhclRva2VuKTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "189800AEAA21C5A7865E212EEEF0968F",
              "algorithm": "md5"
            },
            {
              "value": "D18DE83A086990CCD39F2ECC5D05EFDBDD0ACAC6",
              "algorithm": "sha-1"
            },
            {
              "value": "0031DA8E90E9E123ED191649A94F3D7C9AB7D5E8CA65CBA5D651C2D2CCE50E84",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noAnyRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KaW1wb3J0IHsgY29kZUV4YW1wbGVzIH0gZnJvbSAiLi9jb2RlLWV4YW1wbGVzL25vQW55LmV4YW1wbGVzIjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLWFueSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRGlzYWxsb3dzIHVzYWdlcyBvZiBgYW55YCBhcyBhIHR5cGUgZGVjbGFyYXRpb24uIiwNCiAgICAgICAgaGFzRml4OiBmYWxzZSwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIFVzaW5nIFxgYW55XGAgYXMgYSB0eXBlIGRlY2xhcmF0aW9uIG51bGxpZmllcyB0aGUgY29tcGlsZS10aW1lIGJlbmVmaXRzIG9mIHRoZSB0eXBlIHN5c3RlbS4NCg0KICAgICAgICAgICAgSWYgeW91J3JlIGRlYWxpbmcgd2l0aCBkYXRhIG9mIHVua25vd24gb3IgImFueSIgdHlwZXMsIHlvdSBzaG91bGRuJ3QgYmUgYWNjZXNzaW5nIG1lbWJlcnMgb2YgaXQuDQogICAgICAgICAgICBFaXRoZXIgYWRkIHR5cGUgYW5ub3RhdGlvbnMgZm9yIHByb3BlcnRpZXMgdGhhdCBtYXkgZXhpc3Qgb3IgY2hhbmdlIHRoZSBkYXRhIHR5cGUgdG8gdGhlIGVtcHR5IG9iamVjdCB0eXBlIFxge31cYC4NCg0KICAgICAgICAgICAgQWx0ZXJuYXRlbHksIGlmIHlvdSdyZSBjcmVhdGluZyBzdG9yYWdlIG9yIGhhbmRsaW5nIGZvciBjb25zaXN0ZW50IGJ1dCB1bmtub3duIHR5cGVzLCBzdWNoIGFzIGluIGRhdGEgc3RydWN0dXJlcw0KICAgICAgICAgICAgb3Igc2VyaWFsaXphdGlvbiwgdXNlIFxgPFQ+XGAgdGVtcGxhdGUgdHlwZXMgZm9yIGdlbmVyaWMgdHlwZSBoYW5kbGluZy4NCg0KICAgICAgICAgICAgQWxzbyBzZWUgdGhlIFxgbm8tdW5zYWZlLWFueVxgIHJ1bGUuDQogICAgICAgIGAsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUuIiwNCiAgICAgICAgb3B0aW9uczogbnVsbCwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlXSwNCiAgICAgICAgdHlwZTogInR5cGVzY3JpcHQiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogdHJ1ZSwNCiAgICAgICAgY29kZUV4YW1wbGVzLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiVHlwZSBkZWNsYXJhdGlvbiBvZiAnYW55JyBsb3NlcyB0eXBlLXNhZmV0eS4gQ29uc2lkZXIgcmVwbGFjaW5nIGl0IHdpdGggYSBtb3JlIHByZWNpc2UgdHlwZS4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KSB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZTogdHMuTm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAobm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLkFueUtleXdvcmQpIHsNCiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbm9kZS5lbmQgLSAzOw0KICAgICAgICAgICAgcmV0dXJuIGN0eC5hZGRGYWlsdXJlKHN0YXJ0LCBub2RlLmVuZCwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQo="
          },
          "hashes": [
            {
              "value": "E7526DC8C49AB7D61204DE52BE7B9B4D",
              "algorithm": "md5"
            },
            {
              "value": "15D81C079EC0E3720C3294F39B610D39B05BC717",
              "algorithm": "sha-1"
            },
            {
              "value": "12AA791D8A0B8D519266A9348581F6F2573BE98B2A7FBC44DFBC5070F3D8AEE9",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noArgRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLWFyZyIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRGlzYWxsb3dzIHVzZSBvZiBgYXJndW1lbnRzLmNhbGxlZWAuIiwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIFVzaW5nIFxgYXJndW1lbnRzLmNhbGxlZVxgIG1ha2VzIHZhcmlvdXMgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9ucyBpbXBvc3NpYmxlLg0KICAgICAgICAgICAgU2VlIFtNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0Z1bmN0aW9ucy9hcmd1bWVudHMvY2FsbGVlKQ0KICAgICAgICAgICAgZm9yIG1vcmUgZGV0YWlscyBvbiB3aHkgdG8gYXZvaWQgXGBhcmd1bWVudHMuY2FsbGVlXGAuYCwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIkFjY2VzcyB0byBhcmd1bWVudHMuY2FsbGVlIGlzIGZvcmJpZGRlbiI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGspOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8dm9pZD4pIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihub2RlKSAmJg0KICAgICAgICAgICAgbm9kZS5uYW1lLnRleHQgPT09ICJjYWxsZWUiICYmDQogICAgICAgICAgICBub2RlLmV4cHJlc3Npb24ua2luZCA9PT0gdHMuU3ludGF4S2luZC5JZGVudGlmaWVyICYmIChub2RlLmV4cHJlc3Npb24gYXMgdHMuSWRlbnRpZmllcikudGV4dCA9PT0gImFyZ3VtZW50cyIpIHsNCiAgICAgICAgICAgIHJldHVybiBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "72118938A9FA426FA898FC627891D89B",
              "algorithm": "md5"
            },
            {
              "value": "16FCF7C2E4468CFBFF689F0A6D3A045A7B939132",
              "algorithm": "sha-1"
            },
            {
              "value": "46A9E10EB66B16AD79D5B0AF415D87B5C13F94D635B6CADEBF8793E2B795A56A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noBooleanLiteralCompareRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5UeXBlZFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby1ib29sZWFuLWxpdGVyYWwtY29tcGFyZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiV2FybnMgb24gY29tcGFyaXNvbiB0byBhIGJvb2xlYW4gbGl0ZXJhbCwgYXMgaW4gYHggPT09IHRydWVgLiIsDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgQ29tcGFyaW5nIGJvb2xlYW4gdmFsdWVzIHRvIGJvb2xlYW4gbGl0ZXJhbHMgaXMgdW5uZWNlc3NhcnksIGFzIHRob3NlIGV4cHJlc3Npb25zIHdpbGwgcmVzdWx0IGluIGJvb2xlYW5zIHRvby4NCiAgICAgICAgICAgIEp1c3QgdXNlIHRoZSBib29sZWFuIHZhbHVlcyBkaXJlY3RseSBvciBuZWdhdGUgdGhlbS4NCiAgICAgICAgYCwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IHRydWUsDQogICAgICAgIHJlcXVpcmVzVHlwZUluZm86IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyhuZWdhdGU6IGJvb2xlYW4pIHsNCiAgICAgICAgcmV0dXJuIGBUaGlzIGV4cHJlc3Npb24gaXMgdW5uZWNlc3NhcmlseSBjb21wYXJlZCB0byBhIGJvb2xlYW4uIEp1c3QgJHtuZWdhdGUgPyAibmVnYXRlIGl0IiA6ICJ1c2UgaXQgZGlyZWN0bHkifS5gOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseVdpdGhQcm9ncmFtKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIHByb2dyYW06IHRzLlByb2dyYW0pOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB1bmRlZmluZWQsIHByb2dyYW0uZ2V0VHlwZUNoZWNrZXIoKSk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPiwgY2hlY2tlcjogdHMuVHlwZUNoZWNrZXIpOiB2b2lkIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmICh1dGlscy5pc0JpbmFyeUV4cHJlc3Npb24obm9kZSkpIHsNCiAgICAgICAgICAgIGNvbnN0IGNtcCA9IGdldEJvb2xlYW5Db21wYXJpc29uKG5vZGUsIGNoZWNrZXIpOw0KICAgICAgICAgICAgaWYgKGNtcCAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUoY21wLmV4cHJlc3Npb24sIFJ1bGUuRkFJTFVSRV9TVFJJTkcoY21wLm5lZ2F0ZSksIGZpeChub2RlLCBjbXApKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg0KaW50ZXJmYWNlIENvbXBhcmUgew0KICAgIG5lZ2F0ZTogYm9vbGVhbjsNCiAgICBleHByZXNzaW9uOiB0cy5FeHByZXNzaW9uOw0KfQ0KDQpmdW5jdGlvbiBnZXRCb29sZWFuQ29tcGFyaXNvbihub2RlOiB0cy5CaW5hcnlFeHByZXNzaW9uLCBjaGVja2VyOiB0cy5UeXBlQ2hlY2tlcik6IENvbXBhcmUgfCB1bmRlZmluZWQgew0KICAgIGNvbnN0IGNtcCA9IGRlY29uc3RydWN0Q29tcGFyaXNvbihub2RlKTsNCiAgICByZXR1cm4gY21wID09PSB1bmRlZmluZWQgfHwgIXV0aWxzLmlzVHlwZUZsYWdTZXQoY2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihjbXAuZXhwcmVzc2lvbiksIHRzLlR5cGVGbGFncy5Cb29sZWFuKSA/IHVuZGVmaW5lZCA6IGNtcDsNCn0NCg0KZnVuY3Rpb24gZml4KG5vZGU6IHRzLkJpbmFyeUV4cHJlc3Npb24sIHsgbmVnYXRlLCBleHByZXNzaW9uIH06IENvbXBhcmUpOiBMaW50LkZpeCB7DQogICAgY29uc3QgZGVsZXRlZCA9IG5vZGUubGVmdCA9PT0gZXhwcmVzc2lvbg0KICAgICAgICA/IExpbnQuUmVwbGFjZW1lbnQuZGVsZXRlRnJvbVRvKG5vZGUubGVmdC5lbmQsIG5vZGUuZW5kKQ0KICAgICAgICA6IExpbnQuUmVwbGFjZW1lbnQuZGVsZXRlRnJvbVRvKG5vZGUuZ2V0U3RhcnQoKSwgbm9kZS5yaWdodC5nZXRTdGFydCgpKTsNCiAgICBpZiAoIW5lZ2F0ZSkgew0KICAgICAgICByZXR1cm4gZGVsZXRlZDsNCiAgICB9IGVsc2UgaWYgKG5lZWRzUGFyZW50aGVzZXNGb3JOZWdhdGUoZXhwcmVzc2lvbikpIHsNCiAgICAgICAgcmV0dXJuIFsNCiAgICAgICAgICAgIGRlbGV0ZWQsDQogICAgICAgICAgICBMaW50LlJlcGxhY2VtZW50LmFwcGVuZFRleHQobm9kZS5nZXRTdGFydCgpLCAiISgiKSwNCiAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQuYXBwZW5kVGV4dChub2RlLmdldEVuZCgpLCAiKSIpLA0KICAgICAgICBdOw0KICAgIH0gZWxzZSB7DQogICAgICAgIHJldHVybiBbDQogICAgICAgICAgICBkZWxldGVkLA0KICAgICAgICAgICAgTGludC5SZXBsYWNlbWVudC5hcHBlbmRUZXh0KG5vZGUuZ2V0U3RhcnQoKSwgIiEiKSwNCiAgICAgICAgXTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIG5lZWRzUGFyZW50aGVzZXNGb3JOZWdhdGUobm9kZTogdHMuRXhwcmVzc2lvbik6IGJvb2xlYW4gew0KICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Bc0V4cHJlc3Npb246DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5CaW5hcnlFeHByZXNzaW9uOg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBkZWNvbnN0cnVjdENvbXBhcmlzb24obm9kZTogdHMuQmluYXJ5RXhwcmVzc2lvbik6IENvbXBhcmUgfCB1bmRlZmluZWQgew0KICAgIGNvbnN0IHsgbGVmdCwgb3BlcmF0b3JUb2tlbiwgcmlnaHQgfSA9IG5vZGU7DQogICAgY29uc3QgZXEgPSBMaW50LmdldEVxdWFsc0tpbmQob3BlcmF0b3JUb2tlbik7DQogICAgaWYgKGVxID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQoNCiAgICBjb25zdCBsZWZ0VmFsdWUgPSBib29sZWFuRnJvbUV4cHJlc3Npb24obGVmdCk7DQogICAgaWYgKGxlZnRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgIHJldHVybiB7IG5lZ2F0ZTogbGVmdFZhbHVlICE9PSBlcS5pc1Bvc2l0aXZlLCBleHByZXNzaW9uOiByaWdodCB9Ow0KICAgIH0NCiAgICBjb25zdCByaWdodFZhbHVlID0gYm9vbGVhbkZyb21FeHByZXNzaW9uKHJpZ2h0KTsNCiAgICBpZiAocmlnaHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgIHJldHVybiB7IG5lZ2F0ZTogcmlnaHRWYWx1ZSAhPT0gZXEuaXNQb3NpdGl2ZSwgZXhwcmVzc2lvbjogbGVmdCB9Ow0KICAgIH0NCiAgICByZXR1cm4gdW5kZWZpbmVkOw0KfQ0KDQpmdW5jdGlvbiBib29sZWFuRnJvbUV4cHJlc3Npb24obm9kZTogdHMuRXhwcmVzc2lvbik6IGJvb2xlYW4gfCB1bmRlZmluZWQgew0KICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5UcnVlS2V5d29yZDoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRmFsc2VLZXl3b3JkOg0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "CAACC48C68E2C3D8284CE29A965E470A",
              "algorithm": "md5"
            },
            {
              "value": "F86C61A363EA42191139927A6FF9E1AA6CF19A1C",
              "algorithm": "sha-1"
            },
            {
              "value": "E11709354FADC601CEAB61298805674808349E7CE111384BDA04F430B5EF2654",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noConditionalAssignmentRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTUgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNBc3NpZ25tZW50S2luZCwgaXNOb2RlS2luZCB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tY29uZGl0aW9uYWwtYXNzaWdubWVudCIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRGlzYWxsb3dzIGFueSB0eXBlIG9mIGFzc2lnbm1lbnQgaW4gY29uZGl0aW9uYWxzLiIsDQogICAgICAgIGRlc2NyaXB0aW9uRGV0YWlsczogIlRoaXMgYXBwbGllcyB0byBgZG8td2hpbGVgLCBgZm9yYCwgYGlmYCwgYW5kIGB3aGlsZWAgc3RhdGVtZW50cyBhbmQgY29uZGl0aW9uYWwgKHRlcm5hcnkpIGV4cHJlc3Npb25zLiIsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBBc3NpZ25tZW50cyBpbiBjb25kaXRpb25hbHMgYXJlIG9mdGVuIHR5cG9zOg0KICAgICAgICAgICAgZm9yIGV4YW1wbGUgXGBpZiAodmFyMSA9IHZhcjIpXGAgaW5zdGVhZCBvZiBcYGlmICh2YXIxID09IHZhcjIpXGAuDQogICAgICAgICAgICBUaGV5IGFsc28gY2FuIGJlIGFuIGluZGljYXRvciBvZiBvdmVybHkgY2xldmVyIGNvZGUgd2hpY2ggZGVjcmVhc2VzIG1haW50YWluYWJpbGl0eS5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiQXNzaWdubWVudHMgaW4gY29uZGl0aW9uYWwgZXhwcmVzc2lvbnMgYXJlIGZvcmJpZGRlbiI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGspOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8dm9pZD4pIHsNCiAgICBsZXQgY2hlY2tpbmcgPSAwOw0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGNiKTsNCg0KICAgIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgY29uc3Qga2luZCA9IG5vZGUua2luZDsNCiAgICAgICAgaWYgKCFpc05vZGVLaW5kKGtpbmQpKSB7DQogICAgICAgICAgICByZXR1cm47IC8vIHJldHVybiBlYXJseSBmb3IgdG9rZW5zDQogICAgICAgIH0NCiAgICAgICAgc3dpdGNoIChraW5kKSB7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ29uZGl0aW9uYWxFeHByZXNzaW9uOg0KICAgICAgICAgICAgICAgIGNoZWNrKChub2RlIGFzIHRzLkNvbmRpdGlvbmFsRXhwcmVzc2lvbikuY29uZGl0aW9uKTsNCiAgICAgICAgICAgICAgICBjYigobm9kZSBhcyB0cy5Db25kaXRpb25hbEV4cHJlc3Npb24pLndoZW5UcnVlKTsNCiAgICAgICAgICAgICAgICBjYigobm9kZSBhcyB0cy5Db25kaXRpb25hbEV4cHJlc3Npb24pLndoZW5GYWxzZSk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLklmU3RhdGVtZW50Og0KICAgICAgICAgICAgICAgIGNoZWNrKChub2RlIGFzIHRzLklmU3RhdGVtZW50KS5leHByZXNzaW9uKTsNCiAgICAgICAgICAgICAgICBjYigobm9kZSBhcyB0cy5JZlN0YXRlbWVudCkudGhlblN0YXRlbWVudCk7DQogICAgICAgICAgICAgICAgbWF5YmVDYWxsYmFjayhjYiwgKG5vZGUgYXMgdHMuSWZTdGF0ZW1lbnQpLmVsc2VTdGF0ZW1lbnQpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Eb1N0YXRlbWVudDoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5XaGlsZVN0YXRlbWVudDoNCiAgICAgICAgICAgICAgICBjaGVjaygobm9kZSBhcyB0cy5Eb1N0YXRlbWVudCB8IHRzLldoaWxlU3RhdGVtZW50KS5leHByZXNzaW9uKTsNCiAgICAgICAgICAgICAgICBjYigobm9kZSBhcyB0cy5JdGVyYXRpb25TdGF0ZW1lbnQpLnN0YXRlbWVudCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkZvclN0YXRlbWVudDoNCiAgICAgICAgICAgICAgICBtYXliZUNhbGxiYWNrKGNiLCAobm9kZSBhcyB0cy5Gb3JTdGF0ZW1lbnQpLmluaXRpYWxpemVyKTsNCiAgICAgICAgICAgICAgICBtYXliZUNhbGxiYWNrKGNoZWNrLCAobm9kZSBhcyB0cy5Gb3JTdGF0ZW1lbnQpLmNvbmRpdGlvbik7DQogICAgICAgICAgICAgICAgbWF5YmVDYWxsYmFjayhjYiwgKG5vZGUgYXMgdHMuRm9yU3RhdGVtZW50KS5pbmNyZW1lbnRvcik7DQogICAgICAgICAgICAgICAgY2IoKG5vZGUgYXMgdHMuRm9yU3RhdGVtZW50KS5zdGF0ZW1lbnQpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoY2hlY2tpbmcgIT09IDApIHsNCiAgICAgICAgICAgIHN3aXRjaCAoa2luZCkgew0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5CaW5hcnlFeHByZXNzaW9uOg0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNBc3NpZ25tZW50S2luZCgobm9kZSBhcyB0cy5CaW5hcnlFeHByZXNzaW9uKS5vcGVyYXRvclRva2VuLmtpbmQpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBjYigobm9kZSBhcyB0cy5CaW5hcnlFeHByZXNzaW9uKS5sZWZ0KTsNCiAgICAgICAgICAgICAgICAgICAgY2IoKG5vZGUgYXMgdHMuQmluYXJ5RXhwcmVzc2lvbikucmlnaHQpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uOg0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Ob25OdWxsRXhwcmVzc2lvbjoNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQXNFeHByZXNzaW9uOg0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5UeXBlQXNzZXJ0aW9uRXhwcmVzc2lvbjoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKChub2RlIGFzIHRzLkFzc2VydGlvbkV4cHJlc3Npb24gfCB0cy5Ob25OdWxsRXhwcmVzc2lvbiB8IHRzLlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKS5leHByZXNzaW9uKTsNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUHJlZml4VW5hcnlFeHByZXNzaW9uOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2IoKG5vZGUgYXMgdHMuUHJlZml4VW5hcnlFeHByZXNzaW9uKS5vcGVyYW5kKTsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9DaGVjayhub2RlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjaGVjayhub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgICsrY2hlY2tpbmc7DQogICAgICAgIGNiKG5vZGUpOw0KICAgICAgICAtLWNoZWNraW5nOw0KICAgIH0NCiAgICBmdW5jdGlvbiBub0NoZWNrKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgY29uc3Qgb2xkID0gY2hlY2tpbmc7DQogICAgICAgIGNoZWNraW5nID0gMDsNCiAgICAgICAgdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICAgICAgY2hlY2tpbmcgPSBvbGQ7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBtYXliZUNhbGxiYWNrKGNiOiAobm9kZTogdHMuTm9kZSkgPT4gdm9pZCwgbm9kZT86IHRzLk5vZGUpIHsNCiAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgIGNiKG5vZGUpOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "7B91BC8006778AC3454F335DE2C3C7EC",
              "algorithm": "md5"
            },
            {
              "value": "10A498286D559654C7453A56427962B8B2B2A16D",
              "algorithm": "sha-1"
            },
            {
              "value": "7D1F4D3E1B4DADFD5C53F75D079C5BF677510E4D0930F21AC4FD5D52B30CE52F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noConsecutiveBlankLinesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIHB1YmxpYyBzdGF0aWMgREVGQVVMVF9BTExPV0VEX0JMQU5LUyA9IDE7DQoNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tY29uc2VjdXRpdmUtYmxhbmstbGluZXMiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyBvbmUgb3IgbW9yZSBibGFuayBsaW5lcyBpbiBhIHJvdy4iLA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBIZWxwcyBtYWludGFpbiBhIHJlYWRhYmxlIHN0eWxlIGluIHlvdXIgY29kZWJhc2UuDQoNCiAgICAgICAgICAgIEV4dHJhIGJsYW5rIGxpbmVzIHRha2UgdXAgZXh0cmEgc3BhY2UgYW5kIGFkZCBsaXR0bGUgdG8gYSBzZW1hbnRpYyB1bmRlcnN0YW5kaW5nIG9mIHRoZSBjb2RlLg0KICAgICAgICAgICAgSXQgY2FuIGJlIGhhcmRlciB0byByZWFkIHRocm91Z2ggZmlsZXMgd2hlbiBmZXdlciBjb21wb25lbnRzIGNhbiBmaXQgaW50byB0aGUgc2NyZWVuLg0KICAgICAgICAgICAgSWYgeW91IGZpbmQgYSBmaWxlIGlzIHNvIGxhcmdlIHlvdSBmZWVsIGEgbmVlZCB0byBzcGxpdCB0aGVtIHVwIHdpdGggZXh0cmEgYmxhbmsgbGluZXMgb3IgY29tbWVudHMsDQogICAgICAgICAgICBjb25zaWRlciBzcGxpdHRpbmcgeW91ciBmaWxlIGludG8gc21hbGxlciBmaWxlcy4NCiAgICAgICAgYCwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEFuIG9wdGlvbmFsIG51bWJlciBvZiBtYXhpbXVtIGFsbG93ZWQgc2VxdWVudGlhbCBibGFua3MgY2FuIGJlIHNwZWNpZmllZC4gSWYgbm8gdmFsdWUNCiAgICAgICAgICAgIGlzIHByb3ZpZGVkLCBhIGRlZmF1bHQgb2YgJHtSdWxlLkRFRkFVTFRfQUxMT1dFRF9CTEFOS1N9IHdpbGwgYmUgdXNlZC5gLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAibnVtYmVyIiwNCiAgICAgICAgICAgIG1pbmltdW06ICIxIiwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlLCBbdHJ1ZSwgMl1dLA0KICAgICAgICB0eXBlOiAic3R5bGUiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19GQUNUT1JZKGFsbG93ZWQ6IG51bWJlcikgew0KICAgICAgICByZXR1cm4gYWxsb3dlZCA9PT0gMQ0KICAgICAgICAgICAgPyAiQ29uc2VjdXRpdmUgYmxhbmsgbGluZXMgYXJlIGZvcmJpZGRlbiINCiAgICAgICAgICAgIDogYEV4Y2VlZHMgdGhlICR7YWxsb3dlZH0gYWxsb3dlZCBjb25zZWN1dGl2ZSBibGFuayBsaW5lc2A7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRGlzYWJsZSB0aGUgcnVsZSBpZiB0aGUgb3B0aW9uIGlzIHByb3ZpZGVkIGJ1dCBub24tbnVtZXJpYyBvciBsZXNzIHRoYW4gdGhlIG1pbmltdW0uDQogICAgICovDQogICAgcHVibGljIGlzRW5hYmxlZCgpOiBib29sZWFuIHsNCiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5ydWxlQXJndW1lbnRzWzBdIGFzIG51bWJlciB8IHVuZGVmaW5lZDsNCiAgICAgICAgcmV0dXJuIHN1cGVyLmlzRW5hYmxlZCgpICYmIChvcHRpb24gPT09IHVuZGVmaW5lZCB8fCBvcHRpb24gPiAwKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIGNvbnN0IGxpbWl0ID0gdGhpcy5ydWxlQXJndW1lbnRzWzBdIGFzIG51bWJlciB8IHVuZGVmaW5lZDsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2FsaywgbGltaXQgIT09IHVuZGVmaW5lZCA/IGxpbWl0IDogUnVsZS5ERUZBVUxUX0FMTE9XRURfQkxBTktTKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PG51bWJlcj4pIHsNCiAgICBjb25zdCBzb3VyY2VUZXh0ID0gY3R4LnNvdXJjZUZpbGUudGV4dDsNCiAgICBjb25zdCB0aHJlc2hvbGQgPSBjdHgub3B0aW9ucyArIDE7DQogICAgY29uc3QgcG9zc2libGVGYWlsdXJlczogdHMuVGV4dFJhbmdlW10gPSBbXTsNCiAgICBsZXQgY29uc2VjdXRpdmVCbGFua0xpbmVzID0gMDsNCg0KICAgIGZvciAoY29uc3QgbGluZSBvZiB1dGlscy5nZXRMaW5lUmFuZ2VzKGN0eC5zb3VyY2VGaWxlKSkgew0KICAgICAgICBpZiAobGluZS5jb250ZW50TGVuZ3RoID09PSAwIHx8IHNvdXJjZVRleHQuc3Vic3RyKGxpbmUucG9zLCBsaW5lLmNvbnRlbnRMZW5ndGgpLnNlYXJjaCgvXFMvKSA9PT0gLTEpIHsNCiAgICAgICAgICAgICsrY29uc2VjdXRpdmVCbGFua0xpbmVzOw0KICAgICAgICAgICAgaWYgKGNvbnNlY3V0aXZlQmxhbmtMaW5lcyA9PT0gdGhyZXNob2xkKSB7DQogICAgICAgICAgICAgICAgcG9zc2libGVGYWlsdXJlcy5wdXNoKHsNCiAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lLmVuZCwNCiAgICAgICAgICAgICAgICAgICAgcG9zOiBsaW5lLnBvcywNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uc2VjdXRpdmVCbGFua0xpbmVzID4gdGhyZXNob2xkKSB7DQogICAgICAgICAgICAgICAgcG9zc2libGVGYWlsdXJlc1twb3NzaWJsZUZhaWx1cmVzLmxlbmd0aCAtIDFdLmVuZCA9IGxpbmUuZW5kOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgY29uc2VjdXRpdmVCbGFua0xpbmVzID0gMDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGlmIChwb3NzaWJsZUZhaWx1cmVzLmxlbmd0aCA9PT0gMCkgew0KICAgICAgICByZXR1cm47DQogICAgfQ0KICAgIGNvbnN0IGZhaWx1cmVTdHJpbmcgPSBSdWxlLkZBSUxVUkVfU1RSSU5HX0ZBQ1RPUlkoY3R4Lm9wdGlvbnMpOw0KICAgIGNvbnN0IHRlbXBsYXRlUmFuZ2VzID0gZ2V0VGVtcGxhdGVSYW5nZXMoY3R4LnNvdXJjZUZpbGUpOw0KICAgIGZvciAoY29uc3QgcG9zc2libGVGYWlsdXJlIG9mIHBvc3NpYmxlRmFpbHVyZXMpIHsNCiAgICAgICAgaWYgKCF0ZW1wbGF0ZVJhbmdlcy5zb21lKCh0ZW1wbGF0ZSkgPT4gdGVtcGxhdGUucG9zIDwgcG9zc2libGVGYWlsdXJlLnBvcyAmJiBwb3NzaWJsZUZhaWx1cmUucG9zIDwgdGVtcGxhdGUuZW5kKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdChwb3NzaWJsZUZhaWx1cmUucG9zLCAxLCBmYWlsdXJlU3RyaW5nLCBbDQogICAgICAgICAgICAgICAgTGludC5SZXBsYWNlbWVudC5kZWxldGVGcm9tVG8oDQogICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGZpeGluZyBibGFuayBsaW5lcyBhdCB0aGUgZW5kIG9mIHRoZSBmaWxlDQogICAgICAgICAgICAgICAgICAgIC8vIHRvIGZpeCB0aGlzIHdlIG5lZWQgdG8gY3V0IG9mZiB0aGUgbGluZSBicmVhayBvZiB0aGUgbGFzdCBhbGxvd2VkIGJsYW5rIGxpbmUsIHRvbw0KICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZUZhaWx1cmUuZW5kID09PSBzb3VyY2VUZXh0Lmxlbmd0aCA/IGdldFN0YXJ0T2ZMaW5lQnJlYWsoc291cmNlVGV4dCwgcG9zc2libGVGYWlsdXJlLnBvcykgOiBwb3NzaWJsZUZhaWx1cmUucG9zLA0KICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZUZhaWx1cmUuZW5kLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICBdKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gZ2V0U3RhcnRPZkxpbmVCcmVhayhzb3VyY2VUZXh0OiBzdHJpbmcsIHBvczogbnVtYmVyKSB7DQogICAgcmV0dXJuIHNvdXJjZVRleHRbcG9zIC0gMl0gPT09ICJcciIgPyBwb3MgLSAxIDogcG9zIC0gMTsNCn0NCg0KZXhwb3J0IGZ1bmN0aW9uIGdldFRlbXBsYXRlUmFuZ2VzKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiB0cy5UZXh0UmFuZ2VbXSB7DQogICAgY29uc3QgaW50ZXJ2YWxzOiB0cy5UZXh0UmFuZ2VbXSA9IFtdOw0KICAgIGNvbnN0IGNiID0gKG5vZGU6IHRzLk5vZGUpOiB2b2lkID0+IHsNCiAgICAgICAgaWYgKG5vZGUua2luZCA+PSB0cy5TeW50YXhLaW5kLkZpcnN0VGVtcGxhdGVUb2tlbiAmJg0KICAgICAgICAgICAgbm9kZS5raW5kIDw9IHRzLlN5bnRheEtpbmQuTGFzdFRlbXBsYXRlVG9rZW4pIHsNCiAgICAgICAgICAgIGludGVydmFscy5wdXNoKHsNCiAgICAgICAgICAgICAgICBlbmQ6IG5vZGUuZW5kLA0KICAgICAgICAgICAgICAgIHBvczogbm9kZS5nZXRTdGFydChzb3VyY2VGaWxlKSwNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgIH0NCiAgICB9Ow0KICAgIHRzLmZvckVhY2hDaGlsZChzb3VyY2VGaWxlLCBjYik7DQogICAgcmV0dXJuIGludGVydmFsczsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "0BB243EE1BE5CD11BF0E6C03B726F5A3",
              "algorithm": "md5"
            },
            {
              "value": "249B1A442F430A322F6549C1967CD0F3481385C3",
              "algorithm": "sha-1"
            },
            {
              "value": "083815FCC5ED288A99BE299452BFFF972BF8A81B5830383FEBA564820CE59213",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noConsoleRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNJZGVudGlmaWVyLCBpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tY29uc29sZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiQmFucyB0aGUgdXNlIG9mIHNwZWNpZmllZCBgY29uc29sZWAgbWV0aG9kcy4iLA0KICAgICAgICByYXRpb25hbGU6ICJJbiBnZW5lcmFsLCBcYGNvbnNvbGVcYCBtZXRob2RzIGFyZW4ndCBhcHByb3ByaWF0ZSBmb3IgcHJvZHVjdGlvbiBjb2RlLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIkEgbGlzdCBvZiBtZXRob2QgbmFtZXMgdG8gYmFuLiBJZiBubyBtZXRob2QgbmFtZXMgYXJlIHByb3ZpZGVkLCBhbGwgY29uc29sZSBtZXRob2RzIGFyZSBiYW5uZWQuIiwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgIGl0ZW1zOiB7IHR5cGU6ICJzdHJpbmciIH0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbW3RydWUsICJsb2ciLCAiZXJyb3IiXV0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfRkFDVE9SWShtZXRob2Q6IHN0cmluZykgew0KICAgICAgICByZXR1cm4gYENhbGxzIHRvICdjb25zb2xlLiR7bWV0aG9kfScgYXJlIG5vdCBhbGxvd2VkLmA7DQogICAgfQ0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB0aGlzLnJ1bGVBcmd1bWVudHMpOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8c3RyaW5nW10+KSB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAoaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24obm9kZSkgJiYNCiAgICAgICAgICAgIGlzSWRlbnRpZmllcihub2RlLmV4cHJlc3Npb24pICYmDQogICAgICAgICAgICBub2RlLmV4cHJlc3Npb24udGV4dCA9PT0gImNvbnNvbGUiICYmDQogICAgICAgICAgICAoY3R4Lm9wdGlvbnMubGVuZ3RoID09PSAwIHx8IGN0eC5vcHRpb25zLmluZGV4T2Yobm9kZS5uYW1lLnRleHQpICE9PSAtMSkpIHsNCg0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklOR19GQUNUT1JZKG5vZGUubmFtZS50ZXh0KSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQo="
          },
          "hashes": [
            {
              "value": "6F7B358789CF501E6DF48D2B920CBEC2",
              "algorithm": "md5"
            },
            {
              "value": "4DE42A71E97ABE4E3F7DC9047D6765BEAB7FE48C",
              "algorithm": "sha-1"
            },
            {
              "value": "E45B2C0E179AE5F686C4BA3FFA0BC73FE5B1832B2622AD33EDE52F019ACD37D0",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noDuplicateImportsRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNJbXBvcnREZWNsYXJhdGlvbiwgaXNMaXRlcmFsRXhwcmVzc2lvbiwgaXNNb2R1bGVEZWNsYXJhdGlvbiB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLWR1cGxpY2F0ZS1pbXBvcnRzIiwNCiAgICAgICAgZGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgRGlzYWxsb3dzIG11bHRpcGxlIGltcG9ydCBzdGF0ZW1lbnRzIGZyb20gdGhlIHNhbWUgbW9kdWxlLmAsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBVc2luZyBhIHNpbmdsZSBpbXBvcnQgc3RhdGVtZW50IHBlciBtb2R1bGUgd2lsbCBtYWtlIHRoZSBjb2RlIGNsZWFyZXIgYmVjYXVzZSB5b3UgY2FuIHNlZSBldmVyeXRoaW5nIGJlaW5nIGltcG9ydGVkDQogICAgICAgICAgICBmcm9tIHRoYXQgbW9kdWxlIG9uIG9uZSBsaW5lLmAsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUiLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICB0eXBlOiAibWFpbnRhaW5hYmlsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HKG1vZHVsZTogc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBgTXVsdGlwbGUgaW1wb3J0cyBmcm9tICcke21vZHVsZX0nIGNhbiBiZSBjb21iaW5lZCBpbnRvIG9uZS5gOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsayk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPik6IHZvaWQgew0KICAgIHdhbGtXb3JrZXIoY3R4LCBjdHguc291cmNlRmlsZS5zdGF0ZW1lbnRzLCBuZXcgU2V0KCkpOw0KfQ0KDQpmdW5jdGlvbiB3YWxrV29ya2VyKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPiwgc3RhdGVtZW50czogUmVhZG9ubHlBcnJheTx0cy5TdGF0ZW1lbnQ+LCBzZWVuOiBTZXQ8c3RyaW5nPik6IHZvaWQgew0KICAgIGZvciAoY29uc3Qgc3RhdGVtZW50IG9mIHN0YXRlbWVudHMpIHsNCiAgICAgICAgaWYgKGlzSW1wb3J0RGVjbGFyYXRpb24oc3RhdGVtZW50KSAmJiBpc0xpdGVyYWxFeHByZXNzaW9uKHN0YXRlbWVudC5tb2R1bGVTcGVjaWZpZXIpKSB7DQogICAgICAgICAgICBjb25zdCB7IHRleHQgfSA9IHN0YXRlbWVudC5tb2R1bGVTcGVjaWZpZXI7DQogICAgICAgICAgICBpZiAoc2Vlbi5oYXModGV4dCkpIHsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShzdGF0ZW1lbnQsIFJ1bGUuRkFJTFVSRV9TVFJJTkcodGV4dCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgc2Vlbi5hZGQodGV4dCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaXNNb2R1bGVEZWNsYXJhdGlvbihzdGF0ZW1lbnQpICYmIHN0YXRlbWVudC5ib2R5ICE9PSB1bmRlZmluZWQgJiYgc3RhdGVtZW50Lm5hbWUua2luZCA9PT0gdHMuU3ludGF4S2luZC5TdHJpbmdMaXRlcmFsKSB7DQogICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgbW9kdWxlIGF1Z21lbnRhdGlvbiwgcmUtdXNlIGBzZWVuYCBzaW5jZSB0aG9zZSBpbXBvcnRzIGNvdWxkIGJlIG1vdmVkIG91dHNpZGUuDQogICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGFuIGFtYmllbnQgbW9kdWxlLCBjcmVhdGUgYSBmcmVzaCBgc2VlbmANCiAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhleSBzaG91bGQgaGF2ZSBzZXBhcmF0ZSBpbXBvcnRzIHRvIGF2b2lkIGJlY29taW5nIGF1Z21lbnRhdGlvbnMuDQogICAgICAgICAgICB3YWxrV29ya2VyKGN0eCwgKHN0YXRlbWVudC5ib2R5IGFzIHRzLk1vZHVsZUJsb2NrKS5zdGF0ZW1lbnRzLCB0cy5pc0V4dGVybmFsTW9kdWxlKGN0eC5zb3VyY2VGaWxlKSA/IHNlZW4gOiBuZXcgU2V0KCkpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "638BB8C66FA54B527CCF1DA2A6E81891",
              "algorithm": "md5"
            },
            {
              "value": "0D94BD9A3310348F853D1104F05962C1F3F4E742",
              "algorithm": "sha-1"
            },
            {
              "value": "0874E6757A9241CC6E2CE054321F871ADE037BB93F9302F27ADFC6D217E0ED20",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noDuplicateSuperRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "DBB7B2F33E400A40701CDDCB7A51FB97",
              "algorithm": "md5"
            },
            {
              "value": "7811C414E71A3669B755015668C3BE5F12C5172D",
              "algorithm": "sha-1"
            },
            {
              "value": "31EF6B9ADBEBF17DEE089E0CDFF1C1B45BFC256DF813046163C7B79F363011A6",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noDuplicateVariableRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IE9QVElPTl9DSEVDS19QQVJBTUVURVJTID0gImNoZWNrLXBhcmFtZXRlcnMiOw0KDQppbnRlcmZhY2UgT3B0aW9ucyB7DQogICAgcGFyYW1ldGVyczogYm9vbGVhbjsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLWR1cGxpY2F0ZS12YXJpYWJsZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRGlzYWxsb3dzIGR1cGxpY2F0ZSB2YXJpYWJsZSBkZWNsYXJhdGlvbnMgaW4gdGhlIHNhbWUgYmxvY2sgc2NvcGUuIiwNCiAgICAgICAgZGVzY3JpcHRpb25EZXRhaWxzOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIFRoaXMgcnVsZSBpcyBvbmx5IHVzZWZ1bCB3aGVuIHVzaW5nIHRoZSBcYHZhclxgIGtleXdvcmQgLQ0KICAgICAgICAgICAgdGhlIGNvbXBpbGVyIHdpbGwgZGV0ZWN0IHJlZGVjbGFyYXRpb25zIG9mIFxgbGV0XGAgYW5kIFxgY29uc3RcYCB2YXJpYWJsZXMuYCwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEEgdmFyaWFibGUgY2FuIGJlIHJlYXNzaWduZWQgaWYgbmVjZXNzYXJ5IC0NCiAgICAgICAgICAgIHRoZXJlJ3Mgbm8gZ29vZCByZWFzb24gdG8gaGF2ZSBhIGR1cGxpY2F0ZSB2YXJpYWJsZSBkZWNsYXJhdGlvbi5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IGBZb3UgY2FuIHNwZWNpZnkgXGAiJHtPUFRJT05fQ0hFQ0tfUEFSQU1FVEVSU30iXGAgdG8gY2hlY2sgZm9yIHZhcmlhYmxlcyB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgYSBwYXJhbWV0ZXIuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICBlbnVtOiBbT1BUSU9OX0NIRUNLX1BBUkFNRVRFUlNdLA0KICAgICAgICB9LA0KICAgICAgICBvcHRpb25FeGFtcGxlczogWw0KICAgICAgICAgICAgdHJ1ZSwNCiAgICAgICAgICAgIFt0cnVlLCBPUFRJT05fQ0hFQ0tfUEFSQU1FVEVSU10sDQogICAgICAgIF0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcobmFtZTogc3RyaW5nKTogc3RyaW5nIHsNCiAgICAgICAgcmV0dXJuIGBEdXBsaWNhdGUgdmFyaWFibGU6ICcke25hbWV9J2A7DQogICAgfQ0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhXYWxrZXIobmV3IE5vRHVwbGljYXRlVmFyaWFibGVXYWxrZXIoc291cmNlRmlsZSwgdGhpcy5ydWxlTmFtZSwgew0KICAgICAgICAgICAgcGFyYW1ldGVyczogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX0NIRUNLX1BBUkFNRVRFUlMpICE9PSAtIDEsDQogICAgICAgIH0pKTsNCiAgICB9DQp9DQoNCmNsYXNzIE5vRHVwbGljYXRlVmFyaWFibGVXYWxrZXIgZXh0ZW5kcyBMaW50LkFic3RyYWN0V2Fsa2VyPE9wdGlvbnM+IHsNCiAgICBwcml2YXRlIHNjb3BlOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTsNCiAgICBwdWJsaWMgd2Fsayhzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKSB7DQogICAgICAgIHRoaXMuc2NvcGUgPSBuZXcgU2V0KCk7DQogICAgICAgIGNvbnN0IGNiID0gKG5vZGU6IHRzLk5vZGUpOiB2b2lkID0+IHsNCiAgICAgICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uU2NvcGVCb3VuZGFyeShub2RlKSkgew0KICAgICAgICAgICAgICAgIGNvbnN0IG9sZFNjb3BlID0gdGhpcy5zY29wZTsNCiAgICAgICAgICAgICAgICB0aGlzLnNjb3BlID0gbmV3IFNldCgpOw0KICAgICAgICAgICAgICAgIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgICAgICAgICAgdGhpcy5zY29wZSA9IG9sZFNjb3BlOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFyYW1ldGVycyAmJiB1dGlscy5pc1BhcmFtZXRlckRlY2xhcmF0aW9uKG5vZGUpKSB7DQogICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVCaW5kaW5nTmFtZShub2RlLm5hbWUsIGZhbHNlKTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNWYXJpYWJsZURlY2xhcmF0aW9uTGlzdChub2RlKSAmJiAhdXRpbHMuaXNCbG9ja1Njb3BlZFZhcmlhYmxlRGVjbGFyYXRpb25MaXN0KG5vZGUpKSB7DQogICAgICAgICAgICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiBub2RlLmRlY2xhcmF0aW9ucykgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUJpbmRpbmdOYW1lKHZhcmlhYmxlLm5hbWUsIHRydWUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgICAgICB9Ow0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGNiKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGhhbmRsZUJpbmRpbmdOYW1lKG5hbWU6IHRzLkJpbmRpbmdOYW1lLCBjaGVjazogYm9vbGVhbikgew0KICAgICAgICBpZiAobmFtZS5raW5kID09PSB0cy5TeW50YXhLaW5kLklkZW50aWZpZXIpIHsNCiAgICAgICAgICAgIGlmIChjaGVjayAmJiB0aGlzLnNjb3BlLmhhcyhuYW1lLnRleHQpKSB7DQogICAgICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlQXROb2RlKG5hbWUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcobmFtZS50ZXh0KSk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHRoaXMuc2NvcGUuYWRkKG5hbWUudGV4dCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgbmFtZS5lbGVtZW50cykgew0KICAgICAgICAgICAgICAgIGlmIChlLmtpbmQgIT09IHRzLlN5bnRheEtpbmQuT21pdHRlZEV4cHJlc3Npb24pIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVCaW5kaW5nTmFtZShlLm5hbWUsIGNoZWNrKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "5F80961731956CE23A851853A4485935",
              "algorithm": "md5"
            },
            {
              "value": "8CF5D90852B482F719CB77CBBA9BBB2B4AA1268A",
              "algorithm": "sha-1"
            },
            {
              "value": "EEE7FEE85E4AD246CA5E0977D6F357BA063C0309B3D45EF3064607B7A967FA24",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noDynamicDeleteRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHN1dGlscyBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBkZXNjcmlwdGlvbjogIkJhbnMgdXNhZ2Ugb2YgdGhlIGRlbGV0ZSBvcGVyYXRvciB3aXRoIGNvbXB1dGVkIGtleSBleHByZXNzaW9ucy4iLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBEZWxldGluZyBkeW5hbWljYWxseSBjb21wdXRlZCBrZXlzIGlzIGRhbmdlcm91cyBhbmQgbm90IHdlbGwgb3B0aW1pemVkLg0KDQogICAgICAgICAgICBBbHNvIGNvbnNpZGVyIHVzaW5nIGEgW1xgTWFwXGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hcCkNCiAgICAgICAgICAgIG9yIFtcYFNldFxgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TZXQpDQogICAgICAgICAgICBpZiB5b3UncmUgc3RvcmluZyBjb2xsZWN0aW9ucyBvZiBvYmplY3RzLg0KICAgICAgICAgICAgVXNpbmcgXGBPYmplY3RcYHMgY2FuIGNhdXNlIG9jY2FzaW9uYWwgZWRnZSBjYXNlIGJ1Z3MsIHN1Y2ggYXMgaWYgYSBrZXkgaXMgbmFtZWQgImhhc093blByb3BlcnR5Ii4NCiAgICAgICAgYCwNCiAgICAgICAgcnVsZU5hbWU6ICJuby1keW5hbWljLWRlbGV0ZSIsDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIkRvIG5vdCBkZWxldGUgZHluYW1pY2FsbHkgY29tcHV0ZWQgcHJvcGVydHkga2V5cy4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY29udGV4dDogTGludC5XYWxrQ29udGV4dDx2b2lkPikgew0KICAgIGZ1bmN0aW9uIGNoZWNrRGVsZXRlQWNjZXNzRXhwcmVzc2lvbihub2RlOiB0cy5FeHByZXNzaW9uIHwgdW5kZWZpbmVkKTogdm9pZCB7DQogICAgICAgIGlmIChub2RlID09PSB1bmRlZmluZWQgfHwgIXRzdXRpbHMuaXNFbGVtZW50QWNjZXNzRXhwcmVzc2lvbihub2RlKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgeyBhcmd1bWVudEV4cHJlc3Npb24gfSA9IG5vZGU7DQogICAgICAgIGlmIChhcmd1bWVudEV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCB8fCBpc05lY2Vzc2FyeUR5bmFtaWNBY2Nlc3MoYXJndW1lbnRFeHByZXNzaW9uKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3Qgc3RhcnQgPSBhcmd1bWVudEV4cHJlc3Npb24uZ2V0U3RhcnQoY29udGV4dC5zb3VyY2VGaWxlKSAtIDE7DQogICAgICAgIGNvbnN0IHdpZHRoID0gYXJndW1lbnRFeHByZXNzaW9uLmdldFdpZHRoKCkgKyAyOw0KICAgICAgICBsZXQgZml4OiBMaW50LlJlcGxhY2VtZW50IHwgdW5kZWZpbmVkOw0KDQogICAgICAgIGlmICh0c3V0aWxzLmlzUHJlZml4VW5hcnlFeHByZXNzaW9uKGFyZ3VtZW50RXhwcmVzc2lvbikpIHsNCiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZE9wZXJhbmQgPSBjb252ZXJ0VW5hcnlPcGVyYW5kKGFyZ3VtZW50RXhwcmVzc2lvbik7DQogICAgICAgICAgICBpZiAoY29udmVydGVkT3BlcmFuZCAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgZml4ID0gTGludC5SZXBsYWNlbWVudC5yZXBsYWNlRnJvbVRvKHN0YXJ0LCBzdGFydCArIHdpZHRoLCBgWyR7Y29udmVydGVkT3BlcmFuZH1dYCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAodHN1dGlscy5pc1N0cmluZ0xpdGVyYWwoYXJndW1lbnRFeHByZXNzaW9uKSkgew0KICAgICAgICAgICAgZml4ID0gTGludC5SZXBsYWNlbWVudC5yZXBsYWNlRnJvbVRvKHN0YXJ0LCBzdGFydCArIHdpZHRoLCBgLiR7YXJndW1lbnRFeHByZXNzaW9uLnRleHR9YCk7DQogICAgICAgIH0NCg0KICAgICAgICBjb250ZXh0LmFkZEZhaWx1cmVBdChzdGFydCwgd2lkdGgsIFJ1bGUuRkFJTFVSRV9TVFJJTkcsIGZpeCk7DQogICAgfQ0KDQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjb250ZXh0LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNhbGxiYWNrKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzRGVsZXRlRXhwcmVzc2lvbihub2RlKSkgew0KICAgICAgICAgICAgY2hlY2tEZWxldGVBY2Nlc3NFeHByZXNzaW9uKG5vZGUuZXhwcmVzc2lvbik7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNhbGxiYWNrKTsNCiAgICB9KTsNCn0NCg0KZnVuY3Rpb24gY29udmVydFVuYXJ5T3BlcmFuZChub2RlOiB0cy5QcmVmaXhVbmFyeUV4cHJlc3Npb24pIHsNCiAgICByZXR1cm4gdHN1dGlscy5pc051bWVyaWNMaXRlcmFsKG5vZGUub3BlcmFuZCkNCiAgICAgICAgPyBub2RlLm9wZXJhbmQudGV4dA0KICAgICAgICA6IHVuZGVmaW5lZDsNCn0NCg0KZnVuY3Rpb24gaXNEZWxldGVFeHByZXNzaW9uKG5vZGU6IHRzLk5vZGUpOiBub2RlIGlzIHRzLkRlbGV0ZUV4cHJlc3Npb24gew0KICAgIHJldHVybiBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuRGVsZXRlRXhwcmVzc2lvbjsNCn0NCg0KZnVuY3Rpb24gaXNOdW1iZXJMaWtlKG5vZGU6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICBpZiAodHN1dGlscy5pc1ByZWZpeFVuYXJ5RXhwcmVzc2lvbihub2RlKSkgew0KICAgICAgICByZXR1cm4gdHN1dGlscy5pc051bWVyaWNMaXRlcmFsKG5vZGUub3BlcmFuZCkgJiYgbm9kZS5vcGVyYXRvciA9PT0gdHMuU3ludGF4S2luZC5NaW51c1Rva2VuOw0KICAgIH0NCg0KICAgIHJldHVybiB0c3V0aWxzLmlzTnVtZXJpY0xpdGVyYWwobm9kZSk7DQp9DQoNCmZ1bmN0aW9uIGlzTmVjZXNzYXJ5RHluYW1pY0FjY2Vzcyhhcmd1bWVudEV4cHJlc3Npb246IHRzLkV4cHJlc3Npb24pOiBib29sZWFuIHsNCiAgICBpZiAoaXNOdW1iZXJMaWtlKGFyZ3VtZW50RXhwcmVzc2lvbikpIHsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgcmV0dXJuIHRzdXRpbHMuaXNTdHJpbmdMaXRlcmFsKGFyZ3VtZW50RXhwcmVzc2lvbikgJiYgIXRzdXRpbHMuaXNWYWxpZFByb3BlcnR5QWNjZXNzKGFyZ3VtZW50RXhwcmVzc2lvbi50ZXh0KTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "D1AF1DA9F0686ED9F816A6D8D9537655",
              "algorithm": "md5"
            },
            {
              "value": "363DF9633931C3256A38B5F04ED89BA18697C68C",
              "algorithm": "sha-1"
            },
            {
              "value": "7D511AA148A6049678D0A6835FFDBD179B7E368703D06ACB353885877BB37F9E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noEmptyInterfaceRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNJbnRlcmZhY2VEZWNsYXJhdGlvbiB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KaW1wb3J0IHsgY29kZUV4YW1wbGVzIH0gZnJvbSAiLi9jb2RlLWV4YW1wbGVzL25vRW1wdHlJbnRlcmZhY2UuZXhhbXBsZXMiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tZW1wdHktaW50ZXJmYWNlIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJGb3JiaWRzIGVtcHR5IGludGVyZmFjZXMuIiwNCiAgICAgICAgcmF0aW9uYWxlOiAiQW4gZW1wdHkgaW50ZXJmYWNlIGlzIGVxdWl2YWxlbnQgdG8gaXRzIHN1cGVydHlwZSAob3IgYHt9YCkuIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICB0eXBlOiAidHlwZXNjcmlwdCIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgICAgICBjb2RlRXhhbXBsZXMsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJBbiBlbXB0eSBpbnRlcmZhY2UgaXMgZXF1aXZhbGVudCB0byBge31gLiI7DQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19GT1JfRVhURU5EUyA9ICJBbiBpbnRlcmZhY2UgZGVjbGFyaW5nIG5vIG1lbWJlcnMgaXMgZXF1aXZhbGVudCB0byBpdHMgc3VwZXJ0eXBlLiI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGspOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8dm9pZD4pIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChpc0ludGVyZmFjZURlY2xhcmF0aW9uKG5vZGUpICYmDQogICAgICAgICAgICBub2RlLm1lbWJlcnMubGVuZ3RoID09PSAwICYmDQogICAgICAgICAgICAobm9kZS5oZXJpdGFnZUNsYXVzZXMgPT09IHVuZGVmaW5lZCB8fCBleHRlbmRzT25lVHlwZVdpdGhvdXRUeXBlQXJndW1lbnRzKG5vZGUuaGVyaXRhZ2VDbGF1c2VzWzBdKSkpIHsNCiAgICAgICAgICAgIHJldHVybiBjdHguYWRkRmFpbHVyZUF0Tm9kZSgNCiAgICAgICAgICAgICAgICBub2RlLm5hbWUsDQogICAgICAgICAgICAgICAgbm9kZS5oZXJpdGFnZUNsYXVzZXMgIT09IHVuZGVmaW5lZCA/IFJ1bGUuRkFJTFVSRV9TVFJJTkdfRk9SX0VYVEVORFMgOiBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg0KZnVuY3Rpb24gZXh0ZW5kc09uZVR5cGVXaXRob3V0VHlwZUFyZ3VtZW50cyh7dHlwZXN9OiB0cy5IZXJpdGFnZUNsYXVzZSk6IGJvb2xlYW4gew0KICAgIHN3aXRjaCAodHlwZXMubGVuZ3RoKSB7DQogICAgICAgIGNhc2UgMDoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBkb24ndCBjcmFzaCBvbiBlbXB0eSBleHRlbmRzIGxpc3QNCiAgICAgICAgY2FzZSAxOg0KICAgICAgICAgICAgcmV0dXJuIHR5cGVzWzBdLnR5cGVBcmd1bWVudHMgPT09IHVuZGVmaW5lZDsgLy8gYWxsb3cgaW50ZXJmYWNlcyB0aGF0IHByb3ZpZGUgdHlwZSBhcmd1bWVudHMgZm9yIHRoZSBleHRlbmRlZCB0eXBlDQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGFsbG93IGludGVyZmFjZXMgZXh0ZW5kaW5nIG1vcmUgdGhhbiBvbmUgdHlwZXMNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "188FDD4ACA2AA1AF03DFFCE8A447CDD4",
              "algorithm": "md5"
            },
            {
              "value": "1D6EE4C183894B6F546FEA32D823790177FEC3D9",
              "algorithm": "sha-1"
            },
            {
              "value": "56A4C12116640F32A9E4BD1601F99F76FA5E657C672B547734ED093B6229AB35",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noEmptyRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaGFzTW9kaWZpZXIsIGlzQ29uc3RydWN0b3JEZWNsYXJhdGlvbiwgaXNQYXJhbWV0ZXJQcm9wZXJ0eSB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpjb25zdCBBTExPV19FTVBUWV9DQVRDSCA9ICJhbGxvdy1lbXB0eS1jYXRjaCI7DQpjb25zdCBBTExPV19FTVBUWV9GVU5DVElPTlMgPSAiYWxsb3ctZW1wdHktZnVuY3Rpb25zIjsNCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIGFsbG93RW1wdHlDYXRjaDogYm9vbGVhbjsNCiAgICBhbGxvd0VtcHR5RnVuY3Rpb25zOiBib29sZWFuOw0KfQ0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tZW1wdHkiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyBlbXB0eSBibG9ja3MuIiwNCiAgICAgICAgZGVzY3JpcHRpb25EZXRhaWxzOiAiQmxvY2tzIHdpdGggYSBjb21tZW50IGluc2lkZSBhcmUgbm90IGNvbnNpZGVyZWQgZW1wdHkuIiwNCiAgICAgICAgcmF0aW9uYWxlOiAiRW1wdHkgYmxvY2tzIGFyZSBvZnRlbiBpbmRpY2F0b3JzIG9mIG1pc3NpbmcgY29kZS4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgSWYgXGAke0FMTE9XX0VNUFRZX0NBVENIfVxgIGlzIHNwZWNpZmllZCwgdGhlbiBjYXRjaCBibG9ja3MgYXJlIGFsbG93ZWQgdG8gYmUgZW1wdHkuDQogICAgICAgICAgICBJZiBcYCR7QUxMT1dfRU1QVFlfRlVOQ1RJT05TfVxgIGlzIHNwZWNpZmllZCwgdGhlbiBmdW5jdGlvbiBkZWZpbml0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBlbXB0eS5gLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgaXRlbXM6IHsNCiAgICAgICAgICAgICAgICBhbnlPZjogWw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIGVudW06IFtBTExPV19FTVBUWV9DQVRDSF0sDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgICAgICAgICAgICAgZW51bTogW0FMTE9XX0VNUFRZX0ZVTkNUSU9OU10sDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbDQogICAgICAgICAgICB0cnVlLA0KICAgICAgICAgICAgW3RydWUsIEFMTE9XX0VNUFRZX0NBVENIXSwNCiAgICAgICAgICAgIFt0cnVlLCBBTExPV19FTVBUWV9GVU5DVElPTlNdLA0KICAgICAgICAgICAgW3RydWUsIEFMTE9XX0VNUFRZX0NBVENILCBBTExPV19FTVBUWV9GVU5DVElPTlNdLA0KICAgICAgICBdLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gImJsb2NrIGlzIGVtcHR5IjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsaywgew0KICAgICAgICAgICAgYWxsb3dFbXB0eUNhdGNoOiB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihBTExPV19FTVBUWV9DQVRDSCkgIT09IC0xLA0KICAgICAgICAgICAgYWxsb3dFbXB0eUZ1bmN0aW9uczogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoQUxMT1dfRU1QVFlfRlVOQ1RJT05TKSAhPT0gLTEsDQogICAgICAgIH0pOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8T3B0aW9ucz4pIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuQmxvY2sgJiYNCiAgICAgICAgICAgIChub2RlIGFzIHRzLkJsb2NrKS5zdGF0ZW1lbnRzLmxlbmd0aCA9PT0gMCAmJg0KICAgICAgICAgICAgIWlzRXhjbHVkZWQobm9kZS5wYXJlbnQhLCBjdHgub3B0aW9ucykpIHsNCiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbm9kZS5nZXRTdGFydChjdHguc291cmNlRmlsZSk7DQogICAgICAgICAgICAvLyBCbG9jayBhbHdheXMgc3RhcnRzIHdpdGggb3BlbiBicmFjZS4gQWRkaW5nIDEgdG8gaXRzIHN0YXJ0IGdpdmVzIHVzIHRoZSBlbmQgb2YgdGhlIGJyYWNlLA0KICAgICAgICAgICAgLy8gd2hpY2ggY2FuIGJlIHVzZWQgdG8gY29udmVuaWVudGx5IGNoZWNrIGZvciBjb21tZW50cyBiZXR3ZWVuIGJyYWNlcw0KICAgICAgICAgICAgaWYgKExpbnQuaGFzQ29tbWVudEFmdGVyUG9zaXRpb24oY3R4LnNvdXJjZUZpbGUudGV4dCwgc3RhcnQgKyAxKSkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBjdHguYWRkRmFpbHVyZShzdGFydCAsIG5vZGUuZW5kLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg0KZnVuY3Rpb24gaXNFeGNsdWRlZChub2RlOiB0cy5Ob2RlLCBvcHRpb25zOiBPcHRpb25zKTogYm9vbGVhbiB7DQogICAgaWYgKG9wdGlvbnMuYWxsb3dFbXB0eUNhdGNoICYmIG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5DYXRjaENsYXVzZSkgew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBpZiAob3B0aW9ucy5hbGxvd0VtcHR5RnVuY3Rpb25zICYmDQogICAgICAgIChub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTWV0aG9kRGVjbGFyYXRpb24gfHwNCiAgICAgICAgIG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5GdW5jdGlvbkRlY2xhcmF0aW9uIHx8DQogICAgICAgICBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuRnVuY3Rpb25FeHByZXNzaW9uIHx8DQogICAgICAgICBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuQXJyb3dGdW5jdGlvbikpIHsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgcmV0dXJuIGlzQ29uc3RydWN0b3JEZWNsYXJhdGlvbihub2RlKSAmJg0KICAgICAgICAoDQogICAgICAgICAgICAvKiBJZiBjb25zdHJ1Y3RvciBpcyBwcml2YXRlIG9yIHByb3RlY3RlZCwgdGhlIGJsb2NrIGlzIGFsbG93ZWQgdG8gYmUgZW1wdHkuDQogICAgICAgICAgICAgICBUaGUgY29uc3RydWN0b3IgaXMgdGhlcmUgb24gcHVycG9zZSB0byBkaXNhbGxvdyBpbnN0YW50aWF0aW9uIGZyb20gb3V0c2lkZSB0aGUgY2xhc3MgKi8NCiAgICAgICAgICAgIC8qIFRoZSBwdWJsaWMgbW9kaWZpZXIgZG9lcyBub3Qgc2VydmUgYSBwdXJwb3NlIGhlcmUuIEl0IGNhbiBvbmx5IGJlIHVzZWQgdG8gYWxsb3cgaW5zdGFudGlhdGlvbiBvZiBhIGJhc2UgY2xhc3Mgd2hlcmUNCiAgICAgICAgICAgICAgIHRoZSBzdXBlciBjb25zdHJ1Y3RvciBpcyBwcm90ZWN0ZWQuIEJ1dCB0aGVuIHRoZSBibG9jayB3b3VsZCBub3QgYmUgZW1wdHksIGJlY2F1c2Ugb2YgdGhlIGNhbGwgdG8gc3VwZXIoKSAqLw0KICAgICAgICAgICAgaGFzTW9kaWZpZXIobm9kZS5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuUHJpdmF0ZUtleXdvcmQsIHRzLlN5bnRheEtpbmQuUHJvdGVjdGVkS2V5d29yZCkgfHwNCiAgICAgICAgICAgIG5vZGUucGFyYW1ldGVycy5zb21lKGlzUGFyYW1ldGVyUHJvcGVydHkpDQogICAgICAgICk7DQp9DQo="
          },
          "hashes": [
            {
              "value": "750A532C41047ADED3440B353914F267",
              "algorithm": "md5"
            },
            {
              "value": "5C10B99569C7E447E234B3D58948ECCE370F9E34",
              "algorithm": "sha-1"
            },
            {
              "value": "94A4EFF562D6FEEEF52F1653A8B4C6966AC418C2191D1FAF560F0E1542646289",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noImplicitDependenciesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "9BFF14286B8DB382D529F600A4448749",
              "algorithm": "md5"
            },
            {
              "value": "166E0BF7ABE7160FFBE6CD19BD75B4EF4CDBE780",
              "algorithm": "sha-1"
            },
            {
              "value": "4C640D88F53DEE1F0AF0E643ADDE4A319F05260C7833A5CA70FDCC8B22646AE7",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noImportSideEffectRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IE9QVElPTl9JR05PUkVfTU9EVUxFID0gImlnbm9yZS1tb2R1bGUiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIGRlc2NyaXB0aW9uOiAiQXZvaWQgaW1wb3J0IHN0YXRlbWVudHMgd2l0aCBzaWRlLWVmZmVjdC4iLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWUsIFt0cnVlLCB7IFtPUFRJT05fSUdOT1JFX01PRFVMRV06ICIoXFwuaHRtbHxcXC5jc3MpJCIgfV1dLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICBpdGVtczogew0KICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsNCiAgICAgICAgICAgICAgICAgICAgImlnbm9yZS1tb2R1bGUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHR5cGU6ICJvYmplY3QiLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIG1heExlbmd0aDogMSwNCiAgICAgICAgICAgIG1pbkxlbmd0aDogMCwNCiAgICAgICAgICAgIHR5cGU6ICJhcnJheSIsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBPbmUgYXJndW1lbnQgbWF5IGJlIG9wdGlvbmFsbHkgcHJvdmlkZWQ6DQoNCiAgICAgICAgICAgICogXGAke09QVElPTl9JR05PUkVfTU9EVUxFfVxgIGFsbG93cyB0byBzcGVjaWZ5IGEgcmVnZXggYW5kIGlnbm9yZSBtb2R1bGVzIHdoaWNoIGl0IG1hdGNoZXMuYCwNCiAgICAgICAgcmF0aW9uYWxlOiAiSW1wb3J0cyB3aXRoIHNpZGUgZWZmZWN0cyBtYXkgaGF2ZSBiZWhhdmlvciB3aGljaCBpcyBoYXJkIGZvciBzdGF0aWMgdmVyaWZpY2F0aW9uLiIsDQogICAgICAgIHJ1bGVOYW1lOiAibm8taW1wb3J0LXNpZGUtZWZmZWN0IiwNCiAgICAgICAgdHlwZTogInR5cGVzY3JpcHQiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gImltcG9ydCB3aXRoIGV4cGxpY2l0IHNpZGUtZWZmZWN0IjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgY29uc3QgcGF0dGVybkNvbmZpZyA9IHRoaXMucnVsZUFyZ3VtZW50c1t0aGlzLnJ1bGVBcmd1bWVudHMubGVuZ3RoIC0gMV0gYXMgeyAiaWdub3JlLW1vZHVsZSI6IHN0cmluZyB9IHwgdW5kZWZpbmVkOw0KICAgICAgICBjb25zdCBpZ25vcmVQYXR0ZXJuID0gcGF0dGVybkNvbmZpZyA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbmV3IFJlZ0V4cChwYXR0ZXJuQ29uZmlnW09QVElPTl9JR05PUkVfTU9EVUxFXSk7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIGlnbm9yZVBhdHRlcm4pOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8UmVnRXhwIHwgdW5kZWZpbmVkPik6IHZvaWQgew0KICAgIGNvbnN0IHsgb3B0aW9uczogaWdub3JlUGF0dGVybiwgc291cmNlRmlsZSB9ID0gY3R4Ow0KICAgIGZvciAoY29uc3Qgc3RhdGVtZW50IG9mIHNvdXJjZUZpbGUuc3RhdGVtZW50cykgew0KICAgICAgICBpZiAoIXV0aWxzLmlzSW1wb3J0RGVjbGFyYXRpb24oc3RhdGVtZW50KSkgew0KICAgICAgICAgICAgY29udGludWU7DQogICAgICAgIH0NCg0KICAgICAgICBjb25zdCB7IGltcG9ydENsYXVzZSwgbW9kdWxlU3BlY2lmaWVyIH0gPSBzdGF0ZW1lbnQ7DQogICAgICAgIGlmIChpbXBvcnRDbGF1c2UgIT09IHVuZGVmaW5lZCB8fCAhdXRpbHMuaXNTdHJpbmdMaXRlcmFsKG1vZHVsZVNwZWNpZmllcikpIHsNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlnbm9yZVBhdHRlcm4gPT09IHVuZGVmaW5lZCB8fCAhaWdub3JlUGF0dGVybi50ZXN0KG1vZHVsZVNwZWNpZmllci50ZXh0KSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUoc3RhdGVtZW50LCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "2C1E552B5CB68BA4103E58E059BE77BE",
              "algorithm": "md5"
            },
            {
              "value": "3EE463F50DA98BB1BB4F4F5B69023353F444DCE7",
              "algorithm": "sha-1"
            },
            {
              "value": "E38B406B8C200417E217C8CB3AEB3EB1351801B009CAAEEB2506AE6EA0166859",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noInferrableTypesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTUgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaGFzTW9kaWZpZXIgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KY29uc3QgT1BUSU9OX0lHTk9SRV9QQVJNUyA9ICJpZ25vcmUtcGFyYW1zIjsNCmNvbnN0IE9QVElPTl9JR05PUkVfUFJPUEVSVElFUyA9ICJpZ25vcmUtcHJvcGVydGllcyI7DQoNCmludGVyZmFjZSBPcHRpb25zIHsNCiAgICBpZ25vcmVQYXJhbWV0ZXJzOiBib29sZWFuOw0KICAgIGlnbm9yZVByb3BlcnRpZXM6IGJvb2xlYW47DQp9DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby1pbmZlcnJhYmxlLXR5cGVzIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJEaXNhbGxvd3MgZXhwbGljaXQgdHlwZSBkZWNsYXJhdGlvbnMgZm9yIHZhcmlhYmxlcyBvciBwYXJhbWV0ZXJzIGluaXRpYWxpemVkIHRvIGEgbnVtYmVyLCBzdHJpbmcsIG9yIGJvb2xlYW4uIiwNCiAgICAgICAgcmF0aW9uYWxlOiAiRXhwbGljaXQgdHlwZXMgd2hlcmUgdGhleSBjYW4gYmUgZWFzaWx5IGluZmVycmVkIGJ5IHRoZSBjb21waWxlciBtYWtlIGNvZGUgbW9yZSB2ZXJib3NlLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBUd28gYXJndW1lbnRzIG1heSBiZSBvcHRpb25hbGx5IHByb3ZpZGVkOg0KDQogICAgICAgICAgICAqIFxgJHtPUFRJT05fSUdOT1JFX1BBUk1TfVxgIGFsbG93cyBzcGVjaWZ5aW5nIGFuIGluZmVycmFibGUgdHlwZSBhbm5vdGF0aW9uIGZvciBmdW5jdGlvbiBwYXJhbXMuDQogICAgICAgICAgICBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiBjb21iaW5pbmcgd2l0aCB0aGUgXGB0eXBlZGVmXGAgcnVsZS4NCiAgICAgICAgICAgICogXGAke09QVElPTl9JR05PUkVfUFJPUEVSVElFU31cYCBhbGxvd3Mgc3BlY2lmeWluZyBhbiBpbmZlcnJhYmxlIHR5cGUgYW5ub3RhdGlvbiBmb3IgY2xhc3MgcHJvcGVydGllcy5gLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgaXRlbXM6IHsNCiAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICBlbnVtOiBbT1BUSU9OX0lHTk9SRV9QQVJNUywgT1BUSU9OX0lHTk9SRV9QUk9QRVJUSUVTXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBtaW5MZW5ndGg6IDAsDQogICAgICAgICAgICBtYXhMZW5ndGg6IDIsDQogICAgICAgIH0sDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFsNCiAgICAgICAgICAgIHRydWUsDQogICAgICAgICAgICBbdHJ1ZSwgT1BUSU9OX0lHTk9SRV9QQVJNU10sDQogICAgICAgICAgICBbdHJ1ZSwgT1BUSU9OX0lHTk9SRV9QQVJNUywgT1BUSU9OX0lHTk9SRV9QUk9QRVJUSUVTXSwNCiAgICAgICAgXSwNCiAgICAgICAgdHlwZTogInR5cGVzY3JpcHQiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogdHJ1ZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HX0ZBQ1RPUlkodHlwZTogc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBgVHlwZSAke3R5cGV9IHRyaXZpYWxseSBpbmZlcnJlZCBmcm9tIGEgJHt0eXBlfSBsaXRlcmFsLCByZW1vdmUgdHlwZSBhbm5vdGF0aW9uYDsNCiAgICB9DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aFdhbGtlcihuZXcgTm9JbmZlcnJhYmxlVHlwZXNXYWxrZXIoc291cmNlRmlsZSwgdGhpcy5ydWxlTmFtZSwgew0KICAgICAgICAgICAgaWdub3JlUGFyYW1ldGVyczogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX0lHTk9SRV9QQVJNUykgIT09IC0xLA0KICAgICAgICAgICAgaWdub3JlUHJvcGVydGllczogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX0lHTk9SRV9QUk9QRVJUSUVTKSAhPT0gLTEsDQogICAgICAgIH0pKTsNCiAgICB9DQp9DQoNCmNsYXNzIE5vSW5mZXJyYWJsZVR5cGVzV2Fsa2VyIGV4dGVuZHMgTGludC5BYnN0cmFjdFdhbGtlcjxPcHRpb25zPiB7DQogICAgcHVibGljIHdhbGsoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSkgew0KICAgICAgICBjb25zdCBjYiA9IChub2RlOiB0cy5Ob2RlKTogdm9pZCA9PiB7DQogICAgICAgICAgICBpZiAoc2hvdWxkQ2hlY2sobm9kZSwgdGhpcy5vcHRpb25zKSkgew0KICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgdHlwZSwgaW5pdGlhbGl6ZXIgfSA9IG5vZGU7DQogICAgICAgICAgICAgICAgaWYgKHR5cGUgIT09IHVuZGVmaW5lZCAmJiBpbml0aWFsaXplciAhPT0gdW5kZWZpbmVkDQogICAgICAgICAgICAgICAgICAgICYmIHR5cGVJc0luZmVycmFibGUodHlwZS5raW5kLCBpbml0aWFsaXplcikpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgZml4ID0gTGludC5SZXBsYWNlbWVudC5kZWxldGVGcm9tVG8obmFtZS5lbmQsIHR5cGUuZW5kKTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlQXROb2RlKHR5cGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfRkFDVE9SWSh0cy50b2tlblRvU3RyaW5nKHR5cGUua2luZCkhKSwgZml4KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICAgICAgfTsNCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChzb3VyY2VGaWxlLCBjYik7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBzaG91bGRDaGVjaygNCiAgICBub2RlOiB0cy5Ob2RlLA0KICAgIHsgaWdub3JlUGFyYW1ldGVycywgaWdub3JlUHJvcGVydGllcyB9OiBPcHRpb25zLA0KKTogbm9kZSBpcyB0cy5QYXJhbWV0ZXJEZWNsYXJhdGlvbiB8IHRzLlByb3BlcnR5RGVjbGFyYXRpb24gfCB0cy5WYXJpYWJsZURlY2xhcmF0aW9uIHsNCiAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUGFyYW1ldGVyOg0KICAgICAgICAgICAgcmV0dXJuICFpZ25vcmVQYXJhbWV0ZXJzICYmDQogICAgICAgICAgICAgICAgIWhhc01vZGlmaWVyKG5vZGUubW9kaWZpZXJzLCB0cy5TeW50YXhLaW5kLlJlYWRvbmx5S2V5d29yZCkgJiYNCiAgICAgICAgICAgICAgICAvLyAiaWdub3JlLXByb3BlcnRpZXMiIGFsc28gd29ya3MgZm9yIHBhcmFtZXRlciBwcm9wZXJ0aWVzDQogICAgICAgICAgICAgICAgIShpZ25vcmVQcm9wZXJ0aWVzICYmIG5vZGUubW9kaWZpZXJzICE9PSB1bmRlZmluZWQpOw0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUHJvcGVydHlEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgIHJldHVybiAhaWdub3JlUHJvcGVydGllcyAmJiAhaGFzTW9kaWZpZXIobm9kZS5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuUmVhZG9ubHlLZXl3b3JkKTsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlZhcmlhYmxlRGVjbGFyYXRpb246DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHR5cGVJc0luZmVycmFibGUodHlwZTogdHMuU3ludGF4S2luZCwgaW5pdGlhbGl6ZXI6IHRzLkV4cHJlc3Npb24pOiBib29sZWFuIHsNCiAgICBzd2l0Y2ggKHR5cGUpIHsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkJvb2xlYW5LZXl3b3JkOg0KICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxpemVyLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuVHJ1ZUtleXdvcmQgfHwgaW5pdGlhbGl6ZXIua2luZCA9PT0gdHMuU3ludGF4S2luZC5GYWxzZUtleXdvcmQ7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5OdW1iZXJLZXl3b3JkOg0KICAgICAgICAgICAgcmV0dXJuIExpbnQuaXNOdW1lcmljKGluaXRpYWxpemVyKTsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlN0cmluZ0tleXdvcmQ6DQogICAgICAgICAgICBzd2l0Y2ggKGluaXRpYWxpemVyLmtpbmQpIHsNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuU3RyaW5nTGl0ZXJhbDoNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTm9TdWJzdGl0dXRpb25UZW1wbGF0ZUxpdGVyYWw6DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlRlbXBsYXRlRXhwcmVzc2lvbjoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "3CFDC9EB5986F6561D188418DB673B91",
              "algorithm": "md5"
            },
            {
              "value": "52BFB6C5EEA3125F83DABCFA3DF771EFAAD290CA",
              "algorithm": "sha-1"
            },
            {
              "value": "D13AB66281A28C908245831E40C41E1E5058D9EFC9B5D13AFA75E520092D9DBE",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noInferredEmptyObjectTypeRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNPYmplY3RGbGFnU2V0LCBpc09iamVjdFR5cGUsIGlzVHlwZVJlZmVyZW5jZSB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLlR5cGVkUnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLWluZmVycmVkLWVtcHR5LW9iamVjdC10eXBlIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJEaXNhbGxvdyB0eXBlIGluZmVyZW5jZSBvZiB7fSAoZW1wdHkgb2JqZWN0IHR5cGUpIGF0IGZ1bmN0aW9uIGFuZCBjb25zdHJ1Y3RvciBjYWxsIHNpdGVzIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgV2hlbiBmdW5jdGlvbiBvciBjb25zdHJ1Y3RvciBtYXkgYmUgY2FsbGVkIHdpdGggYSB0eXBlIHBhcmFtZXRlciBidXQgb25lIGlzbid0IHN1cHBsaWVkIG9yIGluZmVycmFibGUsDQogICAgICAgICAgICBUeXBlU2NyaXB0IGRlZmF1bHRzIHRvIFxge31cYC4NCiAgICAgICAgICAgIFRoaXMgaXMgb2Z0ZW4gdW5kZXNpcmFibGUgYXMgdGhlIGNhbGwgaXMgbWVhbnQgdG8gYmUgb2YgYSBtb3JlIHNwZWNpZmljIHR5cGUuDQogICAgICAgIGAsDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IHRydWUsDQogICAgICAgIHJlcXVpcmVzVHlwZUluZm86IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBFTVBUWV9JTlRFUkZBQ0VfSU5TVEFOQ0UgPSAiRXhwbGljaXQgdHlwZSBwYXJhbWV0ZXIgbmVlZHMgdG8gYmUgcHJvdmlkZWQgdG8gdGhlIGNvbnN0cnVjdG9yIjsNCiAgICBwdWJsaWMgc3RhdGljIEVNUFRZX0lOVEVSRkFDRV9GVU5DVElPTiA9ICJFeHBsaWNpdCB0eXBlIHBhcmFtZXRlciBuZWVkcyB0byBiZSBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gY2FsbCI7DQoNCiAgICBwdWJsaWMgYXBwbHlXaXRoUHJvZ3JhbShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlLCBwcm9ncmFtOiB0cy5Qcm9ncmFtKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoV2Fsa2VyKG5ldyBOb0luZmVycmVkRW1wdHlPYmplY3RUeXBlUnVsZShzb3VyY2VGaWxlLCB0aGlzLnJ1bGVOYW1lLCBwcm9ncmFtLmdldFR5cGVDaGVja2VyKCkpKTsNCiAgICB9DQp9DQoNCmNsYXNzIE5vSW5mZXJyZWRFbXB0eU9iamVjdFR5cGVSdWxlIGV4dGVuZHMgTGludC5BYnN0cmFjdFdhbGtlcjx2b2lkPiB7DQogICAgY29uc3RydWN0b3Ioc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwgcnVsZU5hbWU6IHN0cmluZywgcHJpdmF0ZSByZWFkb25seSBjaGVja2VyOiB0cy5UeXBlQ2hlY2tlcikgew0KICAgICAgICBzdXBlcihzb3VyY2VGaWxlLCBydWxlTmFtZSwgdW5kZWZpbmVkKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgd2Fsayhzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKSB7DQogICAgICAgIGNvbnN0IGNiID0gKG5vZGU6IHRzLk5vZGUpOiB2b2lkID0+IHsNCiAgICAgICAgICAgIGlmIChub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb24pIHsNCiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQ2FsbEV4cHJlc3Npb24obm9kZSBhcyB0cy5DYWxsRXhwcmVzc2lvbik7DQogICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5OZXdFeHByZXNzaW9uKSB7DQogICAgICAgICAgICAgICAgdGhpcy5jaGVja05ld0V4cHJlc3Npb24obm9kZSBhcyB0cy5OZXdFeHByZXNzaW9uKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgICAgICB9Ow0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGNiKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGNoZWNrTmV3RXhwcmVzc2lvbihub2RlOiB0cy5OZXdFeHByZXNzaW9uKTogdm9pZCB7DQogICAgICAgIGlmIChub2RlLnR5cGVBcmd1bWVudHMgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMuY2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihub2RlKTsNCiAgICAgICAgICAgIGlmIChpc1R5cGVSZWZlcmVuY2UodHlwZSkgJiYgdHlwZS50eXBlQXJndW1lbnRzICE9PSB1bmRlZmluZWQgJiYNCiAgICAgICAgICAgICAgICB0eXBlLnR5cGVBcmd1bWVudHMuc29tZSgoYSkgPT4gaXNPYmplY3RUeXBlKGEpICYmIHRoaXMuaXNFbXB0eU9iamVjdEludGVyZmFjZShhKSkpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5FTVBUWV9JTlRFUkZBQ0VfSU5TVEFOQ0UpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSBjaGVja0NhbGxFeHByZXNzaW9uKG5vZGU6IHRzLkNhbGxFeHByZXNzaW9uKTogdm9pZCB7DQogICAgICAgIGlmIChub2RlLnR5cGVBcmd1bWVudHMgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgY2FsbFNpZyA9IHRoaXMuY2hlY2tlci5nZXRSZXNvbHZlZFNpZ25hdHVyZShub2RlKTsNCiAgICAgICAgaWYgKGNhbGxTaWcgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgcmV0VHlwZSA9IHRoaXMuY2hlY2tlci5nZXRSZXR1cm5UeXBlT2ZTaWduYXR1cmUoY2FsbFNpZyk7DQogICAgICAgIGlmIChpc09iamVjdFR5cGUocmV0VHlwZSkgJiYgdGhpcy5pc0VtcHR5T2JqZWN0SW50ZXJmYWNlKHJldFR5cGUpKSB7DQogICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5FTVBUWV9JTlRFUkZBQ0VfRlVOQ1RJT04pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSBpc0VtcHR5T2JqZWN0SW50ZXJmYWNlKG9ialR5cGU6IHRzLk9iamVjdFR5cGUpOiBib29sZWFuIHsNCiAgICAgICAgcmV0dXJuIGlzT2JqZWN0RmxhZ1NldChvYmpUeXBlLCB0cy5PYmplY3RGbGFncy5Bbm9ueW1vdXMpICYmDQogICAgICAgICAgICBvYmpUeXBlLmdldFByb3BlcnRpZXMoKS5sZW5ndGggPT09IDAgJiYNCiAgICAgICAgICAgIG9ialR5cGUuZ2V0TnVtYmVySW5kZXhUeXBlKCkgPT09IHVuZGVmaW5lZCAmJg0KICAgICAgICAgICAgb2JqVHlwZS5nZXRTdHJpbmdJbmRleFR5cGUoKSA9PT0gdW5kZWZpbmVkICYmDQogICAgICAgICAgICBvYmpUeXBlLmdldENhbGxTaWduYXR1cmVzKCkuZXZlcnkoKHNpZ25hdHVyZSkgPT4gew0KICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmNoZWNrZXIuZ2V0UmV0dXJuVHlwZU9mU2lnbmF0dXJlKHNpZ25hdHVyZSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIGlzT2JqZWN0VHlwZSh0eXBlKSAmJiB0aGlzLmlzRW1wdHlPYmplY3RJbnRlcmZhY2UodHlwZSk7DQogICAgICAgICAgICB9KTsNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "7F392D6D70DE7C14155D03ADAFE375A1",
              "algorithm": "md5"
            },
            {
              "value": "424EF4AF6F7333D911515333BC3C911640AC3014",
              "algorithm": "sha-1"
            },
            {
              "value": "F9100DF4274989DBC08660DB6C22258C72698F4D73055EF3EF044466343B82E7",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noInternalModuleRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNOb2RlRmxhZ1NldCB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLWludGVybmFsLW1vZHVsZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRGlzYWxsb3dzIGludGVybmFsIGBtb2R1bGVgIiwNCiAgICAgICAgcmF0aW9uYWxlOiAiVXNpbmcgYG1vZHVsZWAgbGVhZHMgdG8gYSBjb25mdXNpb24gb2YgY29uY2VwdHMgd2l0aCBleHRlcm5hbCBtb2R1bGVzLiBVc2UgdGhlIG5ld2VyIGBuYW1lc3BhY2VgIGtleXdvcmQgaW5zdGVhZC4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJ0eXBlc2NyaXB0IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IHRydWUsDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIlRoZSBpbnRlcm5hbCAnbW9kdWxlJyBzeW50YXggaXMgZGVwcmVjYXRlZCwgdXNlIHRoZSAnbmFtZXNwYWNlJyBrZXl3b3JkIGluc3RlYWQuIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoV2Fsa2VyKG5ldyBOb0ludGVybmFsTW9kdWxlV2Fsa2VyKHNvdXJjZUZpbGUsIHRoaXMucnVsZU5hbWUsIHVuZGVmaW5lZCkpOw0KICAgIH0NCn0NCg0KY2xhc3MgTm9JbnRlcm5hbE1vZHVsZVdhbGtlciBleHRlbmRzIExpbnQuQWJzdHJhY3RXYWxrZXI8dm9pZD4gew0KICAgIHB1YmxpYyB3YWxrKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tTdGF0ZW1lbnRzKHNvdXJjZUZpbGUuc3RhdGVtZW50cyk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBjaGVja1N0YXRlbWVudHMoc3RhdGVtZW50czogUmVhZG9ubHlBcnJheTx0cy5TdGF0ZW1lbnQ+KSB7DQogICAgICAgIGZvciAoY29uc3Qgc3RhdGVtZW50IG9mIHN0YXRlbWVudHMpIHsNCiAgICAgICAgICAgIGlmIChzdGF0ZW1lbnQua2luZCA9PT0gdHMuU3ludGF4S2luZC5Nb2R1bGVEZWNsYXJhdGlvbikgew0KICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tNb2R1bGVEZWNsYXJhdGlvbihzdGF0ZW1lbnQgYXMgdHMuTW9kdWxlRGVjbGFyYXRpb24pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSBjaGVja01vZHVsZURlY2xhcmF0aW9uKG5vZGU6IHRzLk1vZHVsZURlY2xhcmF0aW9uLCBuZXN0ZWQ/OiBib29sZWFuKTogdm9pZCB7DQogICAgICAgIGlmICghbmVzdGVkICYmDQogICAgICAgICAgICBub2RlLm5hbWUua2luZCA9PT0gdHMuU3ludGF4S2luZC5JZGVudGlmaWVyICYmDQogICAgICAgICAgICAhaXNOb2RlRmxhZ1NldChub2RlLCB0cy5Ob2RlRmxhZ3MuTmFtZXNwYWNlKSAmJg0KICAgICAgICAgICAgLy8gYXVnbWVudGluZyBnbG9iYWwgdXNlcyBhIHNwZWNpYWwgc3ludGF4IHRoYXQgaXMgYWxsb3dlZA0KICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzYyMTMNCiAgICAgICAgICAgICFpc05vZGVGbGFnU2V0KG5vZGUsIHRzLk5vZGVGbGFncy5HbG9iYWxBdWdtZW50YXRpb24pKSB7DQogICAgICAgICAgICBjb25zdCBlbmQgPSBub2RlLm5hbWUucG9zOw0KICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBlbmQgLSAibW9kdWxlIi5sZW5ndGg7DQogICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmUoc3RhcnQsIGVuZCwgUnVsZS5GQUlMVVJFX1NUUklORywgTGludC5SZXBsYWNlbWVudC5yZXBsYWNlRnJvbVRvKHN0YXJ0LCBlbmQsICJuYW1lc3BhY2UiKSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKG5vZGUuYm9keSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICBzd2l0Y2ggKG5vZGUuYm9keS5raW5kKSB7DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1vZHVsZUJsb2NrOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGVja1N0YXRlbWVudHMobm9kZS5ib2R5LnN0YXRlbWVudHMpOw0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Nb2R1bGVEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tNb2R1bGVEZWNsYXJhdGlvbihub2RlLmJvZHksIHRydWUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "FF06DAB0C235403F62F546F8A90DFE2C",
              "algorithm": "md5"
            },
            {
              "value": "B1D32CB57DEF26337E290F5A78B997B02A3FEF34",
              "algorithm": "sha-1"
            },
            {
              "value": "74AF254D207FAA1F9F0BA77185692CBC63F50388FAFD2B741972845D94D767CB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noInvalidThisRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNUaGlzUGFyYW1ldGVyIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4iOw0KDQpjb25zdCBPUFRJT05fRlVOQ1RJT05fSU5fTUVUSE9EID0gImNoZWNrLWZ1bmN0aW9uLWluLW1ldGhvZCI7DQpjb25zdCBERVBSRUNBVEVEX09QVElPTl9GVU5DVElPTl9JTl9NRVRIT0QgPSAibm8tdGhpcy1pbi1mdW5jdGlvbi1pbi1tZXRob2QiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8taW52YWxpZC10aGlzIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJEaXNhbGxvd3MgdXNpbmcgdGhlIGB0aGlzYCBrZXl3b3JkIG91dHNpZGUgb2YgY2xhc3Nlcy4iLA0KICAgICAgICByYXRpb25hbGU6ICJTZWUgW3RoZSBydWxlJ3MgYXV0aG9yJ3MgcmF0aW9uYWxlIGhlcmUuXShodHRwczovL2dpdGh1Yi5jb20vcGFsYW50aXIvdHNsaW50L3B1bGwvMTEwNSNpc3N1ZS0xNDc1NDk0MDIpIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIE9uZSBhcmd1bWVudCBtYXkgYmUgb3B0aW9uYWxseSBwcm92aWRlZDoNCg0KICAgICAgICAgICAgKiBcYCR7T1BUSU9OX0ZVTkNUSU9OX0lOX01FVEhPRH1cYCBkaXNhbGxvd3MgdXNpbmcgdGhlIFxgdGhpc1xgIGtleXdvcmQgaW4gZnVuY3Rpb25zIHdpdGhpbiBjbGFzcyBtZXRob2RzLmAsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJhcnJheSIsDQogICAgICAgICAgICBpdGVtczogew0KICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgICAgIGVudW06IFtPUFRJT05fRlVOQ1RJT05fSU5fTUVUSE9EXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBtaW5MZW5ndGg6IDAsDQogICAgICAgICAgICBtYXhMZW5ndGg6IDEsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZSwgW3RydWUsIE9QVElPTl9GVU5DVElPTl9JTl9NRVRIT0RdXSwNCiAgICAgICAgdHlwZTogImZ1bmN0aW9uYWxpdHkiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19PVVRTSURFID0gInRoZSBcInRoaXNcIiBrZXl3b3JkIGlzIGRpc2FsbG93ZWQgb3V0c2lkZSBvZiBhIGNsYXNzIGJvZHkiOw0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfSU5TSURFID0gInRoZSBcInRoaXNcIiBrZXl3b3JkIGlzIGRpc2FsbG93ZWQgaW4gZnVuY3Rpb24gYm9kaWVzIGluc2lkZSBjbGFzcyBtZXRob2RzLCAiICsNCiAgICAgICAgInVzZSBhcnJvdyBmdW5jdGlvbnMgaW5zdGVhZCI7DQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICBjb25zdCBoYXNPcHRpb24gPSAobmFtZTogc3RyaW5nKSA9PiB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihuYW1lKSAhPT0gLTE7DQogICAgICAgIGNvbnN0IGNoZWNrRnVuY0luTWV0aG9kID0gaGFzT3B0aW9uKERFUFJFQ0FURURfT1BUSU9OX0ZVTkNUSU9OX0lOX01FVEhPRCkgfHwgaGFzT3B0aW9uKE9QVElPTl9GVU5DVElPTl9JTl9NRVRIT0QpOw0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCBjaGVja0Z1bmNJbk1ldGhvZCk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDxib29sZWFuPik6IHZvaWQgew0KICAgIGNvbnN0IHsgc291cmNlRmlsZSwgb3B0aW9uczogY2hlY2tGdW5jSW5NZXRob2QgfSA9IGN0eDsNCiAgICBsZXQgaW5DbGFzcyA9IGZhbHNlOw0KICAgIGxldCBpbkZ1bmN0aW9uSW5DbGFzcyA9IGZhbHNlOw0KDQogICAgdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpIHsNCiAgICAgICAgc3dpdGNoIChub2RlLmtpbmQpIHsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5DbGFzc0RlY2xhcmF0aW9uOg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNsYXNzRXhwcmVzc2lvbjoNCiAgICAgICAgICAgICAgICBpZiAoIWluQ2xhc3MpIHsNCiAgICAgICAgICAgICAgICAgICAgaW5DbGFzcyA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgICAgICAgICAgICAgIGluQ2xhc3MgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRnVuY3Rpb25FeHByZXNzaW9uOg0KICAgICAgICAgICAgICAgIGlmICgobm9kZSBhcyB0cy5GdW5jdGlvbkxpa2VEZWNsYXJhdGlvbikucGFyYW1ldGVycy5zb21lKGlzVGhpc1BhcmFtZXRlcikpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoaW5DbGFzcykgew0KICAgICAgICAgICAgICAgICAgICBpbkZ1bmN0aW9uSW5DbGFzcyA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgICAgICAgICAgICAgIGluRnVuY3Rpb25JbkNsYXNzID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5UaGlzS2V5d29yZDoNCiAgICAgICAgICAgICAgICBpZiAoIWluQ2xhc3MpIHsNCiAgICAgICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklOR19PVVRTSURFKTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoZWNrRnVuY0luTWV0aG9kICYmIGluRnVuY3Rpb25JbkNsYXNzKSB7DQogICAgICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfSU5TSURFKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "E82DEF8696E1827EFFF5F9F7CD60F712",
              "algorithm": "md5"
            },
            {
              "value": "549850D1FAD9265605B5C2D765808F8975D1BF76",
              "algorithm": "sha-1"
            },
            {
              "value": "5E94EBD553FDBB41274726C7DEB7D0B7940BA85E5B219C0715D7122DC95DA192",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noMagicNumbersRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IGlzQ2FsbEV4cHJlc3Npb24sIGlzSWRlbnRpZmllciB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQppbXBvcnQgeyBpc05lZ2F0aXZlTnVtYmVyTGl0ZXJhbCB9IGZyb20gIi4uL2xhbmd1YWdlL3V0aWxzIjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLW1hZ2ljLW51bWJlcnMiLA0KICAgICAgICBkZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBEaXNhbGxvd3MgdGhlIHVzZSBjb25zdGFudCBudW1iZXIgdmFsdWVzIG91dHNpZGUgb2YgdmFyaWFibGUgYXNzaWdubWVudHMuDQogICAgICAgICAgICBXaGVuIG5vIGxpc3Qgb2YgYWxsb3dlZCB2YWx1ZXMgaXMgc3BlY2lmaWVkLCAtMSwgMCBhbmQgMSBhcmUgYWxsb3dlZCBieSBkZWZhdWx0LmAsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBNYWdpYyBudW1iZXJzIHNob3VsZCBiZSBhdm9pZGVkIGFzIHRoZXkgb2Z0ZW4gbGFjayBkb2N1bWVudGF0aW9uLg0KICAgICAgICAgICAgRm9yY2luZyB0aGVtIHRvIGJlIHN0b3JlZCBpbiB2YXJpYWJsZXMgZ2l2ZXMgdGhlbSBpbXBsaWNpdCBkb2N1bWVudGF0aW9uLg0KICAgICAgICBgLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJBIGxpc3Qgb2YgYWxsb3dlZCBudW1iZXJzLiIsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJhcnJheSIsDQogICAgICAgICAgICBpdGVtczogew0KICAgICAgICAgICAgICAgIHR5cGU6ICJudW1iZXIiLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIG1pbkxlbmd0aDogMSwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlLCBbdHJ1ZSwgMSwgMiwgM11dLA0KICAgICAgICB0eXBlOiAidHlwZXNjcmlwdCIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIidtYWdpYyBudW1iZXJzJyBhcmUgbm90IGFsbG93ZWQiOw0KDQogICAgcHVibGljIHN0YXRpYyBBTExPV0VEX05PREVTID0gbmV3IFNldDx0cy5TeW50YXhLaW5kPihbDQogICAgICAgIHRzLlN5bnRheEtpbmQuRXhwb3J0QXNzaWdubWVudCwNCiAgICAgICAgdHMuU3ludGF4S2luZC5GaXJzdEFzc2lnbm1lbnQsDQogICAgICAgIHRzLlN5bnRheEtpbmQuTGFzdEFzc2lnbm1lbnQsDQogICAgICAgIHRzLlN5bnRheEtpbmQuUHJvcGVydHlBc3NpZ25tZW50LA0KICAgICAgICB0cy5TeW50YXhLaW5kLlNob3J0aGFuZFByb3BlcnR5QXNzaWdubWVudCwNCiAgICAgICAgdHMuU3ludGF4S2luZC5WYXJpYWJsZURlY2xhcmF0aW9uLA0KICAgICAgICB0cy5TeW50YXhLaW5kLlZhcmlhYmxlRGVjbGFyYXRpb25MaXN0LA0KICAgICAgICB0cy5TeW50YXhLaW5kLkVudW1NZW1iZXIsDQogICAgICAgIHRzLlN5bnRheEtpbmQuUHJvcGVydHlEZWNsYXJhdGlvbiwNCiAgICAgICAgdHMuU3ludGF4S2luZC5QYXJhbWV0ZXIsDQogICAgXSk7DQoNCiAgICBwdWJsaWMgc3RhdGljIERFRkFVTFRfQUxMT1dFRCA9IFsgLTEsIDAsIDEgXTsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoV2Fsa2VyKA0KICAgICAgICAgICAgbmV3IE5vTWFnaWNOdW1iZXJzV2Fsa2VyKA0KICAgICAgICAgICAgICAgIHNvdXJjZUZpbGUsDQogICAgICAgICAgICAgICAgdGhpcy5ydWxlTmFtZSwNCiAgICAgICAgICAgICAgICB0aGlzLnJ1bGVBcmd1bWVudHMubGVuZ3RoID4gMCA/IHRoaXMucnVsZUFyZ3VtZW50cyA6IFJ1bGUuREVGQVVMVF9BTExPV0VELA0KICAgICAgICAgICAgKSwNCiAgICAgICAgKTsNCiAgICB9DQp9DQoNCmNsYXNzIE5vTWFnaWNOdW1iZXJzV2Fsa2VyIGV4dGVuZHMgTGludC5BYnN0cmFjdFdhbGtlcjxudW1iZXJbXT4gew0KICAgIHB1YmxpYyB3YWxrKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpIHsNCiAgICAgICAgY29uc3QgY2IgPSAobm9kZTogdHMuTm9kZSk6IHZvaWQgPT4gew0KICAgICAgICAgICAgaWYgKGlzQ2FsbEV4cHJlc3Npb24obm9kZSkgJiYgaXNJZGVudGlmaWVyKG5vZGUuZXhwcmVzc2lvbikgJiYgbm9kZS5leHByZXNzaW9uLnRleHQgPT09ICJwYXJzZUludCIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5hcmd1bWVudHMubGVuZ3RoID09PSAwID8gdW5kZWZpbmVkIDogY2Iobm9kZS5hcmd1bWVudHNbMF0pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAobm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLk51bWVyaWNMaXRlcmFsKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tOdW1lcmljTGl0ZXJhbChub2RlLCAobm9kZSBhcyB0cy5OdW1lcmljTGl0ZXJhbCkudGV4dCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoaXNOZWdhdGl2ZU51bWJlckxpdGVyYWwobm9kZSkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGVja051bWVyaWNMaXRlcmFsKG5vZGUsIGAtJHsobm9kZS5vcGVyYW5kIGFzIHRzLk51bWVyaWNMaXRlcmFsKS50ZXh0fWApOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgIH07DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgY2IpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgY2hlY2tOdW1lcmljTGl0ZXJhbChub2RlOiB0cy5Ob2RlLCBudW06IHN0cmluZykgew0KICAgICAgICAvKiBVc2luZyBPYmplY3QuaXMoKSB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gcG9zL25lZyB6ZXJvICovDQogICAgICAgIGlmICgNCiAgICAgICAgICAgICFSdWxlLkFMTE9XRURfTk9ERVMuaGFzKG5vZGUucGFyZW50IS5raW5kKSAmJg0KICAgICAgICAgICAgIXRoaXMub3B0aW9ucy5zb21lKChhbGxvd2VkTnVtKSA9PiBPYmplY3QuaXMoYWxsb3dlZE51bSwgcGFyc2VGbG9hdChudW0pKSkNCiAgICAgICAgKSB7DQogICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "F7023E0D5FB347071061A3DD51D76F49",
              "algorithm": "md5"
            },
            {
              "value": "3E575014EEC7ACCDC44357EEC576F2985F7F256E",
              "algorithm": "sha-1"
            },
            {
              "value": "3776DD446A58A9A142B95BAB100430F6273319C1A64DB6DA95BCAD4698A3FC6D",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noMergeableNamespaceRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tbWVyZ2VhYmxlLW5hbWVzcGFjZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRGlzYWxsb3dzIG1lcmdlYWJsZSBuYW1lc3BhY2VzIGluIHRoZSBzYW1lIGZpbGUuIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICB0eXBlOiAibWFpbnRhaW5hYmlsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBmYWlsdXJlU3RyaW5nRmFjdG9yeShuYW1lOiBzdHJpbmcsIHNlZW5CZWZvcmVMaW5lOiBudW1iZXIpIHsNCiAgICAgICAgcmV0dXJuIGBNZXJnZWFibGUgbmFtZXNwYWNlICcke25hbWV9JyBmb3VuZC4gTWVyZ2UgaXRzIGNvbnRlbnRzIHdpdGggdGhlIG5hbWVzcGFjZSBvbiBsaW5lICR7c2VlbkJlZm9yZUxpbmV9LmA7DQogICAgfQ0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhXYWxrZXIobmV3IFdhbGtlcihzb3VyY2VGaWxlLCB0aGlzLnJ1bGVOYW1lLCB1bmRlZmluZWQpKTsNCiAgICB9DQp9DQoNCmNsYXNzIFdhbGtlciBleHRlbmRzIExpbnQuQWJzdHJhY3RXYWxrZXI8dm9pZD4gew0KICAgIHB1YmxpYyB3YWxrKG5vZGU6IHRzLlNvdXJjZUZpbGUpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tTdGF0ZW1lbnRzKG5vZGUuc3RhdGVtZW50cyk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBjaGVja1N0YXRlbWVudHMoc3RhdGVtZW50czogUmVhZG9ubHlBcnJheTx0cy5TdGF0ZW1lbnQ+KTogdm9pZCB7DQogICAgICAgIGNvbnN0IHNlZW4gPSBuZXcgTWFwPHN0cmluZywgdHMuTmFtZXNwYWNlRGVjbGFyYXRpb24+KCk7DQoNCiAgICAgICAgZm9yIChjb25zdCBzdGF0ZW1lbnQgb2Ygc3RhdGVtZW50cykgew0KICAgICAgICAgICAgaWYgKHN0YXRlbWVudC5raW5kICE9PSB0cy5TeW50YXhLaW5kLk1vZHVsZURlY2xhcmF0aW9uKSB7DQogICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gc3RhdGVtZW50IGFzIHRzLk1vZHVsZURlY2xhcmF0aW9uOw0KICAgICAgICAgICAgaWYgKG5hbWUua2luZCA9PT0gdHMuU3ludGF4S2luZC5JZGVudGlmaWVyKSB7DQogICAgICAgICAgICAgICAgY29uc3QgeyB0ZXh0IH0gPSBuYW1lOw0KICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBzZWVuLmdldCh0ZXh0KTsNCiAgICAgICAgICAgICAgICBpZiAocHJldiAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRmFpbHVyZUF0Tm9kZShuYW1lLCBSdWxlLmZhaWx1cmVTdHJpbmdGYWN0b3J5KHRleHQsIHRoaXMuZ2V0TGluZU9mTm9kZShwcmV2Lm5hbWUpKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHNlZW4uc2V0KHRleHQsIHN0YXRlbWVudCBhcyB0cy5OYW1lc3BhY2VEZWNsYXJhdGlvbik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNoZWNrIGluIGFsbCBtb2R1bGUgZGVjbGFyYXRpb25zDQogICAgICAgICAgICB0aGlzLmNoZWNrTW9kdWxlRGVjbGFyYXRpb24oc3RhdGVtZW50IGFzIHRzLk1vZHVsZURlY2xhcmF0aW9uKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgY2hlY2tNb2R1bGVEZWNsYXJhdGlvbihkZWNsOiB0cy5Nb2R1bGVEZWNsYXJhdGlvbik6IHZvaWQgew0KICAgICAgICBjb25zdCB7IGJvZHkgfSA9IGRlY2w7DQogICAgICAgIGlmIChib2R5ID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHN3aXRjaCAoYm9keS5raW5kKSB7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTW9kdWxlQmxvY2s6DQogICAgICAgICAgICAgICAgdGhpcy5jaGVja1N0YXRlbWVudHMoYm9keS5zdGF0ZW1lbnRzKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Nb2R1bGVEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrTW9kdWxlRGVjbGFyYXRpb24oYm9keSBhcyB0cy5Nb2R1bGVEZWNsYXJhdGlvbik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIGdldExpbmVPZk5vZGUobm9kZTogdHMuTm9kZSk6IG51bWJlciB7DQogICAgICAgIHJldHVybiB0cy5nZXRMaW5lQW5kQ2hhcmFjdGVyT2ZQb3NpdGlvbih0aGlzLnNvdXJjZUZpbGUsIG5vZGUucG9zKS5saW5lICsgMTsNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "289B3A80CB3619BA6D25ABC704D8AE61",
              "algorithm": "md5"
            },
            {
              "value": "66030C04F3619607F9B4F768A3CADD6225A112A6",
              "algorithm": "sha-1"
            },
            {
              "value": "95B4EAAD82C32A0A004FAADC5EC9D8E5DCD90E4A00859E85A18C7BD8538215BE",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noMisusedNewRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0UHJvcGVydHlOYW1lLCBpc0NvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uLCBpc01ldGhvZERlY2xhcmF0aW9uLCBpc01ldGhvZFNpZ25hdHVyZSwgaXNUeXBlUmVmZXJlbmNlTm9kZSB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tbWlzdXNlZC1uZXciLA0KICAgICAgICBkZXNjcmlwdGlvbjogIldhcm5zIG9uIGFwcGFyZW50IGF0dGVtcHRzIHRvIGRlZmluZSBjb25zdHJ1Y3RvcnMgZm9yIGludGVyZmFjZXMgb3IgYG5ld2AgZm9yIGNsYXNzZXMuIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgSW50ZXJmYWNlcyBpbiBUeXBlU2NyaXB0IGFyZW4ndCBtZWFudCB0byBkZXNjcmliZSBjb25zdHJ1Y3RvcnMgb24gdGhlaXIgaW1wbGVtZW50YXRpb25zLg0KICAgICAgICAgICAgVGhlIFxgbmV3XGAgZGVzY3JpcHRvciBpcyBwcmltYXJpbHkgZm9yIGRlc2NyaWJpbmcgSmF2YVNjcmlwdCBsaWJyYXJpZXMuDQogICAgICAgICAgICBJZiB5b3UncmUgdHJ5aW5nIHRvIGRlc2NyaWJlIGEgZnVuY3Rpb24ga25vd24gdG8gYmUgYSBjbGFzcywgaXQncyB0eXBpY2FsbHkgYmV0dGVyIHRvIFxgZGVjbGFyZSBjbGFzc1xgLg0KICAgICAgICBgLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfSU5URVJGQUNFID0gIkludGVyZmFjZXMgY2Fubm90IGJlIGNvbnN0cnVjdGVkLCBvbmx5IGNsYXNzZXMuIERpZCB5b3UgbWVhbiBgZGVjbGFyZSBjbGFzc2A/IjsNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HX0NMQVNTID0gJ2BuZXdgIGluIGEgY2xhc3MgaXMgYSBtZXRob2QgbmFtZWQgIm5ldyIuIERpZCB5b3UgbWVhbiBgY29uc3RydWN0b3JgPyc7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGspOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8dm9pZD4pIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChpc01ldGhvZFNpZ25hdHVyZShub2RlKSkgew0KICAgICAgICAgICAgaWYgKGdldFByb3BlcnR5TmFtZShub2RlLm5hbWUpID09PSAiY29uc3RydWN0b3IiKSB7DQogICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklOR19JTlRFUkZBQ0UpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2UgaWYgKGlzTWV0aG9kRGVjbGFyYXRpb24obm9kZSkpIHsNCiAgICAgICAgICAgIGlmIChub2RlLmJvZHkgPT09IHVuZGVmaW5lZCAmJg0KICAgICAgICAgICAgICAgIGdldFByb3BlcnR5TmFtZShub2RlLm5hbWUpID09PSAibmV3IiAmJg0KICAgICAgICAgICAgICAgIHJldHVyblR5cGVNYXRjaGVzUGFyZW50KG5vZGUucGFyZW50IGFzIHRzLkNsYXNzTGlrZURlY2xhcmF0aW9uLCBub2RlKSkgew0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfQ0xBU1MpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2UgaWYgKGlzQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb24obm9kZSkpIHsNCiAgICAgICAgICAgIGlmIChyZXR1cm5UeXBlTWF0Y2hlc1BhcmVudChub2RlLnBhcmVudCBhcyB0cy5JbnRlcmZhY2VEZWNsYXJhdGlvbiwgbm9kZSkpIHsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HX0lOVEVSRkFDRSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQoNCmZ1bmN0aW9uIHJldHVyblR5cGVNYXRjaGVzUGFyZW50KHBhcmVudDogeyBuYW1lPzogdHMuSWRlbnRpZmllciB9LCBkZWNsOiB0cy5TaWduYXR1cmVEZWNsYXJhdGlvbik6IGJvb2xlYW4gew0KICAgIGlmIChwYXJlbnQubmFtZSA9PT0gdW5kZWZpbmVkIHx8IGRlY2wudHlwZSA9PT0gdW5kZWZpbmVkIHx8ICFpc1R5cGVSZWZlcmVuY2VOb2RlKGRlY2wudHlwZSkpIHsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCiAgICByZXR1cm4gZGVjbC50eXBlLnR5cGVOYW1lLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSWRlbnRpZmllciAmJiBkZWNsLnR5cGUudHlwZU5hbWUudGV4dCA9PT0gcGFyZW50Lm5hbWUudGV4dDsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "E5332426EA6DAC18FA0C836541739958",
              "algorithm": "md5"
            },
            {
              "value": "6602A6D5C020B3067A3E481C9EBF86ABCA10DBFD",
              "algorithm": "sha-1"
            },
            {
              "value": "5E3C6DD3154914F3503C4CD623C23DC00C5A1750CCDF27A02C02ACDC2563A38D",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noNamespaceRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaGFzTW9kaWZpZXIsIGlzTm9kZUZsYWdTZXQgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KY29uc3QgT1BUSU9OX0FMTE9XX0RFQ0xBUkFUSU9OUyA9ICJhbGxvdy1kZWNsYXJhdGlvbnMiOw0KDQppbnRlcmZhY2UgT3B0aW9ucyB7DQogICAgYWxsb3dEZWNsYXJhdGlvbnM6IGJvb2xlYW47DQp9DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby1uYW1lc3BhY2UiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyB1c2Ugb2YgaW50ZXJuYWwgXGBtb2R1bGVcYHMgYW5kIFxgbmFtZXNwYWNlXGBzLiIsDQogICAgICAgIGRlc2NyaXB0aW9uRGV0YWlsczogIlRoaXMgcnVsZSBzdGlsbCBhbGxvd3MgdGhlIHVzZSBvZiBgZGVjbGFyZSBtb2R1bGUgLi4uIHt9YCIsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBFUzYtc3R5bGUgZXh0ZXJuYWwgbW9kdWxlcyBhcmUgdGhlIHN0YW5kYXJkIHdheSB0byBtb2R1bGFyaXplIGNvZGUuDQogICAgICAgICAgICBVc2luZyBcYG1vZHVsZSB7fVxgIGFuZCBcYG5hbWVzcGFjZSB7fVxgIGFyZSBvdXRkYXRlZCB3YXlzIHRvIG9yZ2FuaXplIFR5cGVTY3JpcHQgY29kZS5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgT25lIGFyZ3VtZW50IG1heSBiZSBvcHRpb25hbGx5IHByb3ZpZGVkOg0KDQogICAgICAgICAgICAqIFxgJHtPUFRJT05fQUxMT1dfREVDTEFSQVRJT05TfVxgIGFsbG93cyBcYGRlY2xhcmUgbmFtZXNwYWNlIC4uLiB7fVxgIHRvIGRlc2NyaWJlIGV4dGVybmFsIEFQSXMuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgIGl0ZW1zOiB7DQogICAgICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICAgICAgZW51bTogW09QVElPTl9BTExPV19ERUNMQVJBVElPTlNdLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIG1pbkxlbmd0aDogMCwNCiAgICAgICAgICAgIG1heExlbmd0aDogMSwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlLCBbdHJ1ZSwgT1BUSU9OX0FMTE9XX0RFQ0xBUkFUSU9OU11dLA0KICAgICAgICB0eXBlOiAidHlwZXNjcmlwdCIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiJ25hbWVzcGFjZScgYW5kICdtb2R1bGUnIGFyZSBkaXNhbGxvd2VkIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsaywgew0KICAgICAgICAgICAgYWxsb3dEZWNsYXJhdGlvbnM6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9BTExPV19ERUNMQVJBVElPTlMpICE9PSAtMSwNCiAgICAgICAgfSk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDxPcHRpb25zPikgew0KICAgIC8vIElnbm9yZSBhbGwgLmQudHMgZmlsZXMgYnkgcmV0dXJuaW5nIGFuZCBub3Qgd2Fsa2luZyB0aGVpciBBU1RzLg0KICAgIC8vIC5kLnRzIGRlY2xhcmF0aW9ucyBkbyBub3QgaGF2ZSB0aGUgQW1iaWVudCBmbGFnIHNldCwgYnV0IGFyZSBzdGlsbCBkZWNsYXJhdGlvbnMuDQogICAgaWYgKGN0eC5zb3VyY2VGaWxlLmlzRGVjbGFyYXRpb25GaWxlICYmIGN0eC5vcHRpb25zLmFsbG93RGVjbGFyYXRpb25zKSB7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgZm9yIChjb25zdCBub2RlIG9mIGN0eC5zb3VyY2VGaWxlLnN0YXRlbWVudHMpIHsNCiAgICAgICAgaWYgKG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5Nb2R1bGVEZWNsYXJhdGlvbikgew0KICAgICAgICAgICAgaWYgKChub2RlIGFzIHRzLk1vZHVsZURlY2xhcmF0aW9uKS5uYW1lLmtpbmQgIT09IHRzLlN5bnRheEtpbmQuU3RyaW5nTGl0ZXJhbCAmJg0KICAgICAgICAgICAgICAgICFpc05vZGVGbGFnU2V0KG5vZGUsIHRzLk5vZGVGbGFncy5HbG9iYWxBdWdtZW50YXRpb24pICYmDQogICAgICAgICAgICAgICAgKCFjdHgub3B0aW9ucy5hbGxvd0RlY2xhcmF0aW9ucyB8fCAhaGFzTW9kaWZpZXIobm9kZS5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuRGVjbGFyZUtleXdvcmQpKSkgew0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "38EDC0FD3566FB2E79B5C47C919B1DAA",
              "algorithm": "md5"
            },
            {
              "value": "68EB548C8D3D1E68B7EF11E877A200E6C72DBD26",
              "algorithm": "sha-1"
            },
            {
              "value": "B38C665EF8FEB5191BD50EC63B1E17EF56D15454D5625490A483A0AC81837CAB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noNullKeywordRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KLy8gd2l0aCBkdWUgcmVmZXJlbmNlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9ibG9iLzc4MTMxMjFjNGQ3N2U1MGFhZDBlZWQzMTUyZWYxZjExNTZjN2I1NzQvc2NyaXB0cy90c2xpbnQvbm9OdWxsUnVsZS50cw0KDQppbXBvcnQgeyBpc0JpbmFyeUV4cHJlc3Npb24sIGlzVHlwZU5vZGVLaW5kIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby1udWxsLWtleXdvcmQiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyB1c2Ugb2YgdGhlIGBudWxsYCBrZXl3b3JkIGxpdGVyYWwuIiwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEluc3RlYWQgb2YgaGF2aW5nIHRoZSBkdWFsIGNvbmNlcHRzIG9mIFxgbnVsbFxgIGFuZFxgdW5kZWZpbmVkXGAgaW4gYSBjb2RlYmFzZSwNCiAgICAgICAgICAgIHRoaXMgcnVsZSBlbnN1cmVzIHRoYXQgb25seSBcYHVuZGVmaW5lZFxgIGlzIHVzZWQuDQoNCiAgICAgICAgICAgIEphdmFTY3JpcHQgb3JpZ2luYWxseSBpbnRlbmRlZCBcYHVuZGVmaW5lZFxgIHRvIHJlZmVyIHRvIGEgdmFsdWUgdGhhdCBkb2Vzbid0IHlldCBleGlzdCwNCiAgICAgICAgICAgIHdoaWxlIFxgbnVsbFxgIHdhcyBtZWFudCB0byByZWZlciB0byBhIHZhbHVlIHRoYXQgZG9lcyBleGlzdCBidXQgcG9pbnRzIHRvIG5vdGhpbmcuDQogICAgICAgICAgICBUaGF0J3MgY29uZnVzaW5nLg0KICAgICAgICAgICAgXGB1bmRlZmluZWRcYCBpcyB0aGUgZGVmYXVsdCB2YWx1ZSB3aGVuIG9iamVjdCBtZW1iZXJzIGRvbid0IGV4aXN0LCBhbmQgaXMgdGhlIHJldHVybiB2YWx1ZQ0KICAgICAgICAgICAgZm9yIG5ld2VyIG5hdGl2ZSBjb2xsZWN0aW9uIEFQSXMgc3VjaCBhcyBcYE1hcC5nZXRcYCB3aGVuIGNvbGxlY3Rpb24gdmFsdWVzIGRvbid0IGV4aXN0Lg0KDQogICAgICAgICAgICBcYFxgXGANCiAgICAgICAgICAgIGNvbnN0IG15T2JqZWN0ID0ge307DQogICAgICAgICAgICBteU9iamVjdC5kb2VzTm90RXhpc3Q7IC8vIHVuZGVmaW5lZA0KICAgICAgICAgICAgXGBcYFxgDQoNCiAgICAgICAgICAgIFxgXGBcYA0KICAgICAgICAgICAgY29uc3QgbXlNYXAgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpOw0KICAgICAgICAgICAgbXlNYXAuZ2V0KCJkb2VzTm90RXhpc3QiKTsgLy8gdW5kZWZpbmVkDQogICAgICAgICAgICBcYFxgXGANCg0KICAgICAgICAgICAgVG8gcmVtb3ZlIGNvbmZ1c2lvbiBvdmVyIHRoZSB0d28gc2ltaWxhciB2YWx1ZXMsIGl0J3MgYmV0dGVyIHRvIHN0aWNrIHdpdGgganVzdCBcYHVuZGVmaW5lZFxgLg0KICAgICAgICBgLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJVc2UgJ3VuZGVmaW5lZCcgaW5zdGVhZCBvZiAnbnVsbCciOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KSB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgY2IpOw0KICAgIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzVHlwZU5vZGVLaW5kKG5vZGUua2luZCkpIHsNCiAgICAgICAgICAgIHJldHVybjsgLy8gc2tpcCB0eXBlIG5vZGVzDQogICAgICAgIH0NCiAgICAgICAgaWYgKG5vZGUua2luZCAhPT0gdHMuU3ludGF4S2luZC5OdWxsS2V5d29yZCkgew0KICAgICAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnQhOw0KICAgICAgICBsZXQgZXE6IExpbnQuRXF1YWxzS2luZCB8IHVuZGVmaW5lZDsNCiAgICAgICAgaWYgKGlzQmluYXJ5RXhwcmVzc2lvbihwYXJlbnQpKSB7DQogICAgICAgICAgICBlcSA9IExpbnQuZ2V0RXF1YWxzS2luZChwYXJlbnQub3BlcmF0b3JUb2tlbik7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGVxID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICB9IGVsc2UgaWYgKCFlcS5pc1N0cmljdCkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORywgTGludC5SZXBsYWNlbWVudC5yZXBsYWNlTm9kZShub2RlLCAidW5kZWZpbmVkIiwgY3R4LnNvdXJjZUZpbGUpKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "F76C3DAFCA49D79B010E786CEFEAA798",
              "algorithm": "md5"
            },
            {
              "value": "1F774C9AB0C9289BA9ED753C6B8CDBE5B2514A42",
              "algorithm": "sha-1"
            },
            {
              "value": "81BAE8E0AEC2A3279825989B1369251C0FABA3B6105A7E69F23CC6FD00D3940A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noObjectLiteralTypeAssertionRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNBc3NlcnRpb25FeHByZXNzaW9uLCBpc09iamVjdExpdGVyYWxFeHByZXNzaW9uLCBpc1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby1vYmplY3QtbGl0ZXJhbC10eXBlLWFzc2VydGlvbiIsDQogICAgICAgIGRlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEZvcmJpZHMgYW4gb2JqZWN0IGxpdGVyYWwgdG8gYXBwZWFyIGluIGEgdHlwZSBhc3NlcnRpb24gZXhwcmVzc2lvbi4NCiAgICAgICAgICAgIENhc3RpbmcgdG8gXGBhbnlcYCBpcyBzdGlsbCBhbGxvd2VkLmAsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBBbHdheXMgcHJlZmVyIFxgY29uc3QgeDogVCA9IHsgLi4uIH07XGAgdG8gXGBjb25zdCB4ID0geyAuLi4gfSBhcyBUO1xgLg0KICAgICAgICAgICAgVGhlIHR5cGUgYXNzZXJ0aW9uIGluIHRoZSBsYXR0ZXIgY2FzZSBpcyBlaXRoZXIgdW5uZWNlc3Nhcnkgb3IgaGlkZXMgYW4gZXJyb3IuDQogICAgICAgICAgICBUaGUgY29tcGlsZXIgd2lsbCB3YXJuIGZvciBleGNlc3MgcHJvcGVydGllcyB3aXRoIHRoaXMgc3ludGF4LCBidXQgbm90IG1pc3NpbmcgcmVxdWlyZWQgZmllbGRzLg0KICAgICAgICAgICAgRm9yIGV4YW1wbGU6IFxgY29uc3QgeDogeyBmb286IG51bWJlciB9ID0ge31cYCB3aWxsIGZhaWwgdG8gY29tcGlsZSwgYnV0DQogICAgICAgICAgICBcYGNvbnN0IHggPSB7fSBhcyB7IGZvbzogbnVtYmVyIH1cYCB3aWxsIHN1Y2NlZWQuYCwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiVHlwZSBhc3NlcnRpb24gb24gb2JqZWN0IGxpdGVyYWxzIGlzIGZvcmJpZGRlbiwgdXNlIGEgdHlwZSBhbm5vdGF0aW9uIGluc3RlYWQuIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsayk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPik6IHZvaWQgew0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzQXNzZXJ0aW9uRXhwcmVzc2lvbihub2RlKSAmJiBub2RlLnR5cGUua2luZCAhPT0gdHMuU3ludGF4S2luZC5BbnlLZXl3b3JkICYmDQogICAgICAgICAgICBpc09iamVjdExpdGVyYWxFeHByZXNzaW9uKGlzUGFyZW50aGVzaXplZEV4cHJlc3Npb24obm9kZS5leHByZXNzaW9uKSA/IG5vZGUuZXhwcmVzc2lvbi5leHByZXNzaW9uIDogbm9kZS5leHByZXNzaW9uKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQo="
          },
          "hashes": [
            {
              "value": "6060C8CABC25477BA49D681EBB164D48",
              "algorithm": "md5"
            },
            {
              "value": "7A05BDBBF39C6D14AD24D2A6197812AAA8B987C7",
              "algorithm": "sha-1"
            },
            {
              "value": "2A37F529C8920BD648CD7E24985A54C59BF867F47AC759948FDB714FF7D3A81C",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noReturnAwaitRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNGdW5jdGlvblNjb3BlQm91bmRhcnksIGlzVHJ5U3RhdGVtZW50IH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby1yZXR1cm4tYXdhaXQiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyB1bm5lY2Vzc2FyeSBgcmV0dXJuIGF3YWl0YC4iLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgQW4gYXN5bmMgZnVuY3Rpb24gYWx3YXlzIHdyYXBzIHRoZSByZXR1cm4gdmFsdWUgaW4gYSBQcm9taXNlLg0KICAgICAgICAgICAgVXNpbmcgXGByZXR1cm4gYXdhaXRcYCBqdXN0IGFkZHMgZXh0cmEgdGltZSBiZWZvcmUgdGhlIG92ZXJyZWFjaGluZyBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHNlbWFudGljcy4NCiAgICAgICAgYCwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiVW5uZWNlc3NhcnkgJ2F3YWl0Jy4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KSB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAobm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLkF3YWl0RXhwcmVzc2lvbiAmJiBpc1VubmVjZXNzYXJ5QXdhaXQobm9kZSkpIHsNCiAgICAgICAgICAgIGNvbnN0IHtleHByZXNzaW9ufSA9IG5vZGUgYXMgdHMuQXdhaXRFeHByZXNzaW9uOw0KICAgICAgICAgICAgY29uc3Qga2V5d29yZFN0YXJ0ID0gZXhwcmVzc2lvbi5wb3MgLSAiYXdhaXQiLmxlbmd0aDsNCiAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlKA0KICAgICAgICAgICAgICAgIGtleXdvcmRTdGFydCwNCiAgICAgICAgICAgICAgICBleHByZXNzaW9uLnBvcywNCiAgICAgICAgICAgICAgICBSdWxlLkZBSUxVUkVfU1RSSU5HLA0KICAgICAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQuZGVsZXRlRnJvbVRvKGtleXdvcmRTdGFydCwgZXhwcmVzc2lvbi5nZXRTdGFydChjdHguc291cmNlRmlsZSkpLA0KICAgICAgICAgICAgKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg0KZnVuY3Rpb24gaXNVbm5lY2Vzc2FyeUF3YWl0KG5vZGU6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICB3aGlsZSAodHJ1ZSkgew0KICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudCE7DQogICAgICAgIG91dGVyOiBzd2l0Y2ggKHBhcmVudC5raW5kKSB7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQXJyb3dGdW5jdGlvbjoNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5SZXR1cm5TdGF0ZW1lbnQ6DQogICAgICAgICAgICAgICAgcmV0dXJuICFpc0luc2lkZVRyeUJsb2NrKHBhcmVudC5wYXJlbnQhKTsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5QYXJlbnRoZXNpemVkRXhwcmVzc2lvbjoNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Db25kaXRpb25hbEV4cHJlc3Npb246DQogICAgICAgICAgICAgICAgaWYgKChwYXJlbnQgYXMgdHMuQ29uZGl0aW9uYWxFeHByZXNzaW9uKS5jb25kaXRpb24gPT09IG5vZGUpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5CaW5hcnlFeHByZXNzaW9uOg0KICAgICAgICAgICAgICAgIGlmICgocGFyZW50IGFzIHRzLkJpbmFyeUV4cHJlc3Npb24pLnJpZ2h0ID09PSBub2RlKSB7DQogICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoKHBhcmVudCBhcyB0cy5CaW5hcnlFeHByZXNzaW9uKS5vcGVyYXRvclRva2VuLmtpbmQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5BbXBlcnNhbmRBbXBlcnNhbmRUb2tlbjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5CYXJCYXJUb2tlbjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Db21tYVRva2VuOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIG91dGVyOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIG5vZGUgPSBwYXJlbnQ7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBpc0luc2lkZVRyeUJsb2NrKG5vZGU6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICB3aGlsZSAobm9kZS5wYXJlbnQgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICBpZiAoaXNGdW5jdGlvblNjb3BlQm91bmRhcnkobm9kZSkpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoaXNUcnlTdGF0ZW1lbnQobm9kZS5wYXJlbnQpKSB7DQogICAgICAgICAgICBpZiAoDQogICAgICAgICAgICAgICAgLy8gc3RhdGVtZW50cyBpbnNpZGUgdGhlIHRyeSBibG9jayBhbHdheXMgaGF2ZSBhbiBlcnJvciBoYW5kbGVyLCBlaXRoZXIgY2F0Y2ggb3IgZmluYWxseQ0KICAgICAgICAgICAgICAgIG5vZGUucGFyZW50LnRyeUJsb2NrID09PSBub2RlIHx8DQogICAgICAgICAgICAgICAgLy8gc3RhdGVtZW50IGluc2lkZSB0aGUgY2F0Y2ggYmxvY2sgb25seSBoYXZlIGFuIGVycm9yIGhhbmRsZXIgaWYgdGhlcmUgaXMgYSBmaW5hbGx5IGJsb2NrDQogICAgICAgICAgICAgICAgbm9kZS5wYXJlbnQuZmluYWxseUJsb2NrICE9PSB1bmRlZmluZWQgJiYgbm9kZS5wYXJlbnQuY2F0Y2hDbGF1c2UgPT09IG5vZGUNCiAgICAgICAgICAgICkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50LnBhcmVudCE7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIGZhbHNlOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "8393E436915B737DFFF8F07D03444EEB",
              "algorithm": "md5"
            },
            {
              "value": "10A1A0A801E1F7FB41957C1FC3CC2A6C8ADBC194",
              "algorithm": "sha-1"
            },
            {
              "value": "E21216834DF2167F9DB1B8C7E15A5626E25658B0AF6E51272F0CE059D3154C07",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noShadowedVariableRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "8B536785FBB83397A323A71F95F961CE",
              "algorithm": "md5"
            },
            {
              "value": "CB52CC39C6780F1BF8677E16DB3CA46774D006F3",
              "algorithm": "sha-1"
            },
            {
              "value": "271D0EF4F6605F4C83C63D9CEB54F3AC84C2E46CD6B739CB37C36E188C95A9C2",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noSubmoduleImportsRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZmluZEltcG9ydHMsIEltcG9ydEtpbmQgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby1zdWJtb2R1bGUtaW1wb3J0cyIsDQogICAgICAgIGRlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIERpc2FsbG93cyBpbXBvcnRpbmcgYW55IHN1Ym1vZHVsZS5gLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgU3VibW9kdWxlcyBvZiBzb21lIHBhY2thZ2VzIGFyZSB0cmVhdGVkIGFzIHByaXZhdGUgQVBJcyBhbmQgdGhlIGltcG9ydA0KICAgICAgICAgICAgcGF0aHMgbWF5IGNoYW5nZSB3aXRob3V0IGRlcHJlY2F0aW9uIHBlcmlvZHMuIEl0J3MgYmVzdCB0byBzdGljayB3aXRoDQogICAgICAgICAgICB0b3AtbGV2ZWwgcGFja2FnZSBleHBvcnRzLmAsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIkEgbGlzdCBvZiB3aGl0ZWxpc3RlZCBwYWNrYWdlIG9yIHN1Ym1vZHVsZSBuYW1lcy4iLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgaXRlbXM6IHsNCiAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZSwgW3RydWUsICJyeGpzIiwgIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIiLCAiQGFuZ3VsYXIvY29yZS90ZXN0aW5nIl1dLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJTdWJtb2R1bGUgaW1wb3J0IHBhdGhzIGZyb20gdGhpcyBwYWNrYWdlIGFyZSBkaXNhbGxvd2VkOyBpbXBvcnQgZnJvbSB0aGUgcm9vdCBpbnN0ZWFkIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2FsaywgdGhpcy5ydWxlQXJndW1lbnRzKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHN0cmluZ1tdPikgew0KICAgIGZvciAoY29uc3QgbmFtZSBvZiBmaW5kSW1wb3J0cyhjdHguc291cmNlRmlsZSwgSW1wb3J0S2luZC5BbGwpKSB7DQogICAgICAgIGlmICghdHMuaXNFeHRlcm5hbE1vZHVsZU5hbWVSZWxhdGl2ZShuYW1lLnRleHQpICYmDQogICAgICAgICAgICBpc1N1Ym1vZHVsZVBhdGgobmFtZS50ZXh0KSAmJg0KICAgICAgICAgICAgIWlzV2hpdGVsaXN0ZWQobmFtZS50ZXh0LCBjdHgub3B0aW9ucykpIHsNCiAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5hbWUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBpc1doaXRlbGlzdGVkKHBhdGg6IHN0cmluZywgd2hpdGVsaXN0OiBzdHJpbmdbXSk6IGJvb2xlYW4gew0KICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIHdoaXRlbGlzdCkgew0KICAgICAgICBpZiAocGF0aCA9PT0gb3B0aW9uIHx8IHBhdGguc3RhcnRzV2l0aChgJHtvcHRpb259L2ApKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gZmFsc2U7DQp9DQoNCmZ1bmN0aW9uIGlzU3VibW9kdWxlUGF0aChwYXRoOiBzdHJpbmcpOiBib29sZWFuIHsNCiAgICByZXR1cm4gcGF0aC5zcGxpdCgiLyIpLmxlbmd0aCA+IChwYXRoWzBdID09PSAiQCIgPyAyIDogMSk7DQp9DQo="
          },
          "hashes": [
            {
              "value": "3E1D7F546AAC9B79AD60E07E48CF198E",
              "algorithm": "md5"
            },
            {
              "value": "90882F23B0C166C19E6A0302807D58EB378FC898",
              "algorithm": "sha-1"
            },
            {
              "value": "2B061CFD46DA4AF090A1B69D5D10EA6B3F5EC9CD93599F463AEE327D0E190A35",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noSwitchCaseFallThroughRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby1zd2l0Y2gtY2FzZS1mYWxsLXRocm91Z2giLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyBmYWxsaW5nIHRocm91Z2ggY2FzZSBzdGF0ZW1lbnRzLiIsDQogICAgICAgIGRlc2NyaXB0aW9uRGV0YWlsczogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyBpcyBub3QgYWxsb3dlZDoNCg0KICAgICAgICAgICAgXGBcYFxgdHMNCiAgICAgICAgICAgIHN3aXRjaChmb28pIHsNCiAgICAgICAgICAgICAgICBjYXNlIDE6DQogICAgICAgICAgICAgICAgICAgIHNvbWVGdW5jKGZvbyk7DQogICAgICAgICAgICAgICAgY2FzZSAyOg0KICAgICAgICAgICAgICAgICAgICBzb21lT3RoZXJGdW5jKGZvbyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBcYFxgXGANCg0KICAgICAgICAgICAgSG93ZXZlciwgZmFsbCB0aHJvdWdoIGlzIGFsbG93ZWQgd2hlbiBjYXNlIHN0YXRlbWVudHMgYXJlIGNvbnNlY3V0aXZlIG9yDQogICAgICAgICAgICBhIG1hZ2ljIFxgLyogZmFsbHMgdGhyb3VnaCAqL1xgIGNvbW1lbnQgaXMgcHJlc2VudC4gVGhlIGZvbGxvd2luZyBpcyB2YWxpZDoNCg0KICAgICAgICAgICAgXGBcYFxgdHMNCiAgICAgICAgICAgIHN3aXRjaChmb28pIHsNCiAgICAgICAgICAgICAgICBjYXNlIDE6DQogICAgICAgICAgICAgICAgICAgIHNvbWVGdW5jKGZvbyk7DQogICAgICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8NCiAgICAgICAgICAgICAgICBjYXNlIDI6DQogICAgICAgICAgICAgICAgY2FzZSAzOg0KICAgICAgICAgICAgICAgICAgICBzb21lT3RoZXJGdW5jKGZvbyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBcYFxgXGBgLA0KICAgICAgICByYXRpb25hbGU6ICJGYWxsIHRob3VnaCBpbiBzd2l0Y2ggc3RhdGVtZW50cyBpcyBvZnRlbiB1bmludGVudGlvbmFsIGFuZCBhIGJ1Zy4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcoa2V5d29yZDogdHMuU3ludGF4S2luZCk6IHN0cmluZyB7DQogICAgICAgIHJldHVybiBgZXhwZWN0ZWQgYSAnYnJlYWsnIGJlZm9yZSAnJHt0cy50b2tlblRvU3RyaW5nKGtleXdvcmQpfSdgOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoV2Fsa2VyKG5ldyBOb1N3aXRjaENhc2VGYWxsVGhyb3VnaFdhbGtlcihzb3VyY2VGaWxlLCB0aGlzLnJ1bGVOYW1lLCB1bmRlZmluZWQpKTsNCiAgICB9DQp9DQoNCmV4cG9ydCBjbGFzcyBOb1N3aXRjaENhc2VGYWxsVGhyb3VnaFdhbGtlciBleHRlbmRzIExpbnQuQWJzdHJhY3RXYWxrZXI8dm9pZD4gew0KICAgIHB1YmxpYyB3YWxrKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpIHsNCiAgICAgICAgY29uc3QgY2IgPSAobm9kZTogdHMuTm9kZSk6IHZvaWQgPT4gew0KICAgICAgICAgICAgaWYgKHV0aWxzLmlzU3dpdGNoU3RhdGVtZW50KG5vZGUpKSB7DQogICAgICAgICAgICAgICAgdGhpcy52aXNpdFN3aXRjaFN0YXRlbWVudChub2RlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgICAgICB9Ow0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGNiKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZpc2l0U3dpdGNoU3RhdGVtZW50KHsgY2FzZUJsb2NrOiB7IGNsYXVzZXMgfSB9OiB0cy5Td2l0Y2hTdGF0ZW1lbnQpOiB2b2lkIHsNCiAgICAgICAgY2xhdXNlcy5mb3JFYWNoKChjbGF1c2UsIGkpID0+IHsNCiAgICAgICAgICAgIGlmIChpICE9PSBjbGF1c2VzLmxlbmd0aCAtIDENCiAgICAgICAgICAgICAgICAgICAgJiYgY2xhdXNlLnN0YXRlbWVudHMubGVuZ3RoICE9PSAwDQogICAgICAgICAgICAgICAgICAgICYmICF1dGlscy5lbmRzQ29udHJvbEZsb3coY2xhdXNlKQ0KICAgICAgICAgICAgICAgICAgICAmJiAhdGhpcy5pc0ZhbGxUaHJvdWdoQWxsb3dlZChjbGF1c2UpKSB7DQogICAgICAgICAgICAgICAgY29uc3Qga2V5d29yZCA9IGNsYXVzZXNbaSArIDFdLmdldENoaWxkQXQoMCk7DQogICAgICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlQXROb2RlKGtleXdvcmQsIFJ1bGUuRkFJTFVSRV9TVFJJTkcoa2V5d29yZC5raW5kKSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIHByaXZhdGUgaXNGYWxsVGhyb3VnaEFsbG93ZWQoY2xhdXNlOiB0cy5DYXNlT3JEZWZhdWx0Q2xhdXNlKTogYm9vbGVhbiB7DQogICAgICAgIGNvbnN0IGNvbW1lbnRzID0gdHMuZ2V0TGVhZGluZ0NvbW1lbnRSYW5nZXModGhpcy5zb3VyY2VGaWxlLnRleHQsIGNsYXVzZS5lbmQpOw0KICAgICAgICByZXR1cm4gY29tbWVudHMgIT09IHVuZGVmaW5lZCAmJg0KICAgICAgICAgICAgY29tbWVudHMuc29tZSgoY29tbWVudCkgPT4gL15ccypmYWxscyB0aHJvdWdoXGIvaS50ZXN0KHRoaXMuc291cmNlRmlsZS50ZXh0LnNsaWNlKGNvbW1lbnQucG9zICsgMiwgY29tbWVudC5lbmQpKSk7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "04B44D69C78AF9A7C4D57CE8CAA34110",
              "algorithm": "md5"
            },
            {
              "value": "5D7F27D5794DE0D86BA37ECEB50A223E456E262D",
              "algorithm": "sha-1"
            },
            {
              "value": "727B99BA64F4EB587579A772B5B8B877F2DD981D17C69EA41F24E35CB58933F4",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noThisAssignmentRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IEFMTE9XX1RISVNfREVTVFJVQ1RVUklORyA9ICJhbGxvdy1kZXN0cnVjdHVyaW5nIjsNCmNvbnN0IEFMTE9XRURfVEhJU19OQU1FUyA9ICJhbGxvd2VkLW5hbWVzIjsNCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIGFsbG93ZWROYW1lczogc3RyaW5nW107DQogICAgYWxsb3dEZXN0cnVjdHVyaW5nOiBib29sZWFuOw0KfQ0KDQppbnRlcmZhY2UgQ29uZmlnT3B0aW9ucyB7DQogICAgImFsbG93LWRlc3RydWN0dXJpbmciPzogYm9vbGVhbjsNCiAgICAiYWxsb3dlZC1uYW1lcyI/OiBzdHJpbmdbXTsNCn0NCg0KY29uc3QgcGFyc2VDb25maWdPcHRpb25zID0gKGNvbmZpZ09wdGlvbnM6IENvbmZpZ09wdGlvbnMgfCB1bmRlZmluZWQpOiBPcHRpb25zID0+IHsNCiAgICBjb25zdCBhbGxvd2VkTmFtZXM6IHN0cmluZ1tdID0gW107DQogICAgbGV0IGFsbG93RGVzdHJ1Y3R1cmluZyA9IGZhbHNlOw0KDQogICAgaWYgKGNvbmZpZ09wdGlvbnMgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICBhbGxvd0Rlc3RydWN0dXJpbmcgPSAhIWNvbmZpZ09wdGlvbnNbQUxMT1dfVEhJU19ERVNUUlVDVFVSSU5HXTsNCg0KICAgICAgICBpZiAoY29uZmlnT3B0aW9uc1tBTExPV0VEX1RISVNfTkFNRVNdICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIGFsbG93ZWROYW1lcy5wdXNoKC4uLmNvbmZpZ09wdGlvbnNbQUxMT1dFRF9USElTX05BTUVTXSEpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuIHsgYWxsb3dlZE5hbWVzLCBhbGxvd0Rlc3RydWN0dXJpbmcgfTsNCn07DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgZGVzY3JpcHRpb246ICJEaXNhbGxvd3MgdW5uZWNlc3NhcnkgcmVmZXJlbmNlcyB0byBgdGhpc2AuIiwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFsNCiAgICAgICAgICAgIHRydWUsDQogICAgICAgICAgICBbDQogICAgICAgICAgICAgICAgdHJ1ZSwNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFtBTExPV0VEX1RISVNfTkFNRVNdOiBbIl5zZWxmJCJdLA0KICAgICAgICAgICAgICAgICAgICBbQUxMT1dfVEhJU19ERVNUUlVDVFVSSU5HXTogdHJ1ZSwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgXSwNCiAgICAgICAgXSwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLA0KICAgICAgICAgICAgcHJvcGVydGllczogew0KICAgICAgICAgICAgICAgIFtBTExPV19USElTX0RFU1RSVUNUVVJJTkddOiB7DQogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJib29sZWFuIiwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIFtBTExPV0VEX1RISVNfTkFNRVNdOiB7DQogICAgICAgICAgICAgICAgICAgIGxpc3RUeXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICAgICAgdHlwZTogImxpc3QiLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgdHlwZTogIm9iamVjdCIsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBUd28gb3B0aW9ucyBtYXkgYmUgcHJvdmlkZWQgb24gYW4gb2JqZWN0Og0KDQogICAgICAgICAgICAqIFxgJHtBTExPV19USElTX0RFU1RSVUNUVVJJTkd9XGAgYWxsb3dzIHVzaW5nIGRlc3RydWN0dXJpbmcgdG8gYWNjZXNzIG1lbWJlcnMgb2YgXGB0aGlzXGAgKGUuZy4gXGB7IGZvbywgYmFyIH0gPSB0aGlzO1xgKS4NCiAgICAgICAgICAgICogXGAke0FMTE9XRURfVEhJU19OQU1FU31cYCBtYXkgYmUgc3BlY2lmaWVkIGFzIGEgbGlzdCBvZiByZWd1bGFyIGV4cHJlc3Npb25zIHRvIG1hdGNoIGFsbG93ZWQgdmFyaWFibGUgbmFtZXMuYCwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEFzc2lnbmluZyBhIHZhcmlhYmxlIHRvIFxgdGhpc1xgIGluc3RlYWQgb2YgcHJvcGVybHkgdXNpbmcgYXJyb3cgbGFtYmRhcyBtYXkgYmUgYSBzeW1wdG9tIG9mIHByZS1FUzYgcHJhY3RpY2VzDQogICAgICAgICAgICBvciBub3QgbWFuYWdpbmcgc2NvcGUgd2VsbC4NCg0KICAgICAgICAgICAgSW5zdGVhZCBvZiBzdG9yaW5nIGEgcmVmZXJlbmNlIHRvIFxgdGhpc1xgIGFuZCB1c2luZyBpdCBpbnNpZGUgYSBcYGZ1bmN0aW9uICgpIHtcYDoNCg0KICAgICAgICAgICAgXGBcYFxgDQogICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpczsNCg0KICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgc2VsZi5kb1dvcmsoKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgXGBcYFxgDQoNCiAgICAgICAgICAgIFVzZSBcYCgpID0+XGAgYXJyb3cgbGFtYmRhcywgYXMgdGhleSBwcmVzZXJ2ZSBcYHRoaXNcYCBzY29wZSBmb3IgeW91Og0KDQogICAgICAgICAgICBcYFxgXGANCiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gew0KICAgICAgICAgICAgICAgIHRoaXMuZG9Xb3JrKCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIFxgXGBcYA0KICAgICAgICBgLA0KICAgICAgICBydWxlTmFtZTogIm5vLXRoaXMtYXNzaWdubWVudCIsDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HX0JJTkRJTkdTID0gIkRvbid0IGFzc2lnbiBtZW1iZXJzIG9mIGB0aGlzYCB0byBsb2NhbCB2YXJpYWJsZXMuIjsNCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfRkFDVE9SWV9JREVOVElGSUVSUyhuYW1lOiBzdHJpbmcpIHsNCiAgICAgICAgcmV0dXJuIGBBc3NpZ25pbmcgXGB0aGlzXGAgcmVmZXJlbmNlIHRvIGxvY2FsIHZhcmlhYmxlIG5vdCBhbGxvd2VkOiAke25hbWV9LmA7DQogICAgfQ0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICBjb25zdCBvcHRpb25zID0gcGFyc2VDb25maWdPcHRpb25zKCh0aGlzLnJ1bGVBcmd1bWVudHMgYXMgW0NvbmZpZ09wdGlvbnNdKVswXSk7DQogICAgICAgIGNvbnN0IG5vVGhpc0Fzc2lnbm1lbnRXYWxrZXIgPSBuZXcgTm9UaGlzQXNzaWdubWVudFdhbGtlcihzb3VyY2VGaWxlLCB0aGlzLnJ1bGVOYW1lLCBvcHRpb25zKTsNCg0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhXYWxrZXIobm9UaGlzQXNzaWdubWVudFdhbGtlcik7DQogICAgfQ0KfQ0KDQpjbGFzcyBOb1RoaXNBc3NpZ25tZW50V2Fsa2VyIGV4dGVuZHMgTGludC5BYnN0cmFjdFdhbGtlcjxPcHRpb25zPiB7DQogICAgcHJpdmF0ZSByZWFkb25seSBhbGxvd2VkVGhpc05hbWVUZXN0ZXJzID0gdGhpcy5vcHRpb25zLmFsbG93ZWROYW1lcy5tYXAoDQogICAgICAgIChhbGxvd2VkVGhpc05hbWUpID0+IG5ldyBSZWdFeHAoYWxsb3dlZFRoaXNOYW1lKSk7DQoNCiAgICBwdWJsaWMgd2Fsayhzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogdm9pZCB7DQogICAgICAgIHRzLmZvckVhY2hDaGlsZChzb3VyY2VGaWxlLCB0aGlzLnZpc2l0Tm9kZSk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSByZWFkb25seSB2aXNpdE5vZGUgPSAobm9kZTogdHMuTm9kZSk6IHZvaWQgPT4gew0KICAgICAgICBpZiAodXRpbHMuaXNWYXJpYWJsZURlY2xhcmF0aW9uKG5vZGUpKSB7DQogICAgICAgICAgICB0aGlzLnZpc2l0VmFyaWFibGVEZWNsYXJhdGlvbihub2RlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRzLmZvckVhY2hDaGlsZChub2RlLCB0aGlzLnZpc2l0Tm9kZSk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2aXNpdFZhcmlhYmxlRGVjbGFyYXRpb24obm9kZTogdHMuVmFyaWFibGVEZWNsYXJhdGlvbik6IHZvaWQgew0KICAgICAgICBpZiAobm9kZS5pbml0aWFsaXplciA9PT0gdW5kZWZpbmVkIHx8IG5vZGUuaW5pdGlhbGl6ZXIua2luZCAhPT0gdHMuU3ludGF4S2luZC5UaGlzS2V5d29yZCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgc3dpdGNoIChub2RlLm5hbWUua2luZCkgew0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLklkZW50aWZpZXI6DQogICAgICAgICAgICAgICAgaWYgKHRoaXMudmFyaWFibGVOYW1lSXNCYW5uZWQobm9kZS5uYW1lLnRleHQpKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HX0ZBQ1RPUllfSURFTlRJRklFUlMobm9kZS5uYW1lLnRleHQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dEZXN0cnVjdHVyaW5nKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HX0JJTkRJTkdTKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIHZhcmlhYmxlTmFtZUlzQmFubmVkKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4gew0KICAgICAgICBmb3IgKGNvbnN0IHRlc3RlciBvZiB0aGlzLmFsbG93ZWRUaGlzTmFtZVRlc3RlcnMpIHsNCiAgICAgICAgICAgIGlmICh0ZXN0ZXIudGVzdChuYW1lKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "DEE6F9CA72D74D9F78B537BF72060A7D",
              "algorithm": "md5"
            },
            {
              "value": "B57B3EE4E016CB447EFA38C7A90BE0DAC186BD64",
              "algorithm": "sha-1"
            },
            {
              "value": "66DF95E742713DFCC8BF8AE6971E815D33CC545825D71E5E3E8035E26E45FD70",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noTrailingWhitespaceRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZm9yRWFjaENvbW1lbnQsIGZvckVhY2hUb2tlbldpdGhUcml2aWEsIGdldExpbmVSYW5nZXMgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCmltcG9ydCB7IGdldFRlbXBsYXRlUmFuZ2VzIH0gZnJvbSAiLi9ub0NvbnNlY3V0aXZlQmxhbmtMaW5lc1J1bGUiOw0KDQpjb25zdCBPUFRJT05fSUdOT1JFX0NPTU1FTlRTID0gImlnbm9yZS1jb21tZW50cyI7DQpjb25zdCBPUFRJT05fSUdOT1JFX0pTRE9DID0gImlnbm9yZS1qc2RvYyI7DQpjb25zdCBPUFRJT05fSUdOT1JFX1RFTVBMQVRFX1NUUklOR1MgPSAiaWdub3JlLXRlbXBsYXRlLXN0cmluZ3MiOw0KY29uc3QgT1BUSU9OX0lHTk9SRV9CTEFOS19MSU5FUyA9ICJpZ25vcmUtYmxhbmstbGluZXMiOw0KDQppbnRlcmZhY2UgT3B0aW9ucyB7DQogICAgaWdub3JlVGVtcGxhdGVzOiBib29sZWFuOw0KICAgIGlnbm9yZUNvbW1lbnRzOiBib29sZWFuOw0KICAgIGlnbm9yZUpzRG9jOiBib29sZWFuOw0KICAgIGlnbm9yZUJsYW5rTGluZXM6IGJvb2xlYW47DQp9DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby10cmFpbGluZy13aGl0ZXNwYWNlIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJEaXNhbGxvd3MgdHJhaWxpbmcgd2hpdGVzcGFjZSBhdCB0aGUgZW5kIG9mIGEgbGluZS4iLA0KICAgICAgICByYXRpb25hbGU6ICJLZWVwcyB2ZXJzaW9uIGNvbnRyb2wgZGlmZnMgY2xlYW4gYXMgaXQgcHJldmVudHMgYWNjaWRlbnRhbCB3aGl0ZXNwYWNlIGZyb20gYmVpbmcgY29tbWl0dGVkLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBQb3NzaWJsZSBzZXR0aW5ncyBhcmU6DQoNCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fSUdOT1JFX1RFTVBMQVRFX1NUUklOR1N9IlxgOiBBbGxvd3MgdHJhaWxpbmcgd2hpdGVzcGFjZSBpbiB0ZW1wbGF0ZSBzdHJpbmdzLg0KICAgICAgICAgICAgKiBcYCIke09QVElPTl9JR05PUkVfQ09NTUVOVFN9IlxgOiBBbGxvd3MgdHJhaWxpbmcgd2hpdGVzcGFjZSBpbiBjb21tZW50cy4NCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fSUdOT1JFX0pTRE9DfSJcYDogQWxsb3dzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb25seSBpbiBKU0RvYyBjb21tZW50cy4NCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fSUdOT1JFX0JMQU5LX0xJTkVTfSJcYDogQWxsb3dzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb24gZW1wdHkgbGluZXMuYCwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgaXRlbXM6IHsNCiAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICBlbnVtOiBbT1BUSU9OX0lHTk9SRV9DT01NRU5UUywgT1BUSU9OX0lHTk9SRV9KU0RPQywgT1BUSU9OX0lHTk9SRV9URU1QTEFURV9TVFJJTkdTLCBPUFRJT05fSUdOT1JFX0JMQU5LX0xJTkVTXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbDQogICAgICAgICAgICB0cnVlLA0KICAgICAgICAgICAgW3RydWUsIE9QVElPTl9JR05PUkVfQ09NTUVOVFNdLA0KICAgICAgICAgICAgW3RydWUsIE9QVElPTl9JR05PUkVfSlNET0NdLA0KICAgICAgICBdLA0KICAgICAgICB0eXBlOiAic3R5bGUiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJ0cmFpbGluZyB3aGl0ZXNwYWNlIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgY29uc3QgaWdub3JlQ29tbWVudHMgPSB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihPUFRJT05fSUdOT1JFX0NPTU1FTlRTKSAhPT0gLTE7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHsNCiAgICAgICAgICAgIGlnbm9yZUJsYW5rTGluZXM6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9JR05PUkVfQkxBTktfTElORVMpICE9PSAtMSwNCiAgICAgICAgICAgIGlnbm9yZUNvbW1lbnRzLA0KICAgICAgICAgICAgaWdub3JlSnNEb2M6IGlnbm9yZUNvbW1lbnRzIHx8IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9JR05PUkVfSlNET0MpICE9PSAtMSwNCiAgICAgICAgICAgIGlnbm9yZVRlbXBsYXRlczogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX0lHTk9SRV9URU1QTEFURV9TVFJJTkdTKSAhPT0gLTEsDQogICAgICAgIH0pOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8T3B0aW9ucz4pIHsNCiAgICBjb25zdCBwb3NzaWJsZUZhaWx1cmVzOiB0cy5UZXh0UmFuZ2VbXSA9IFtdOw0KICAgIGNvbnN0IHNvdXJjZUZpbGUgPSBjdHguc291cmNlRmlsZTsNCiAgICBjb25zdCB0ZXh0ID0gc291cmNlRmlsZS50ZXh0Ow0KICAgIGZvciAoY29uc3QgbGluZSBvZiBnZXRMaW5lUmFuZ2VzKHNvdXJjZUZpbGUpKSB7DQogICAgICAgIC8vIFxzIG1hdGNoZXMgYW55IHdoaXRlc3BhY2UgY2hhcmFjdGVyIChlcXVhbCB0byBbXHJcblx0XGZcdiBdKQ0KICAgICAgICBjb25zdCBtYXRjaCA9IHRleHQuc3Vic3RyKGxpbmUucG9zLCBsaW5lLmNvbnRlbnRMZW5ndGgpLm1hdGNoKC9ccyskLyk7DQogICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCAmJiAhKGN0eC5vcHRpb25zLmlnbm9yZUJsYW5rTGluZXMgJiYgbWF0Y2guaW5kZXggPT09IDApKSB7DQogICAgICAgICAgICBwb3NzaWJsZUZhaWx1cmVzLnB1c2goew0KICAgICAgICAgICAgICAgIGVuZDogbGluZS5wb3MgKyBsaW5lLmNvbnRlbnRMZW5ndGgsDQogICAgICAgICAgICAgICAgcG9zOiBsaW5lLnBvcyArIG1hdGNoLmluZGV4ISwNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgaWYgKHBvc3NpYmxlRmFpbHVyZXMubGVuZ3RoID09PSAwKSB7DQogICAgICAgIHJldHVybjsNCiAgICB9DQogICAgY29uc3QgZXhjbHVkZWRSYW5nZXMgPSBjdHgub3B0aW9ucy5pZ25vcmVUZW1wbGF0ZXMNCiAgICAgICAgPyBjdHgub3B0aW9ucy5pZ25vcmVKc0RvYyA/IGdldEV4Y2x1ZGVkUmFuZ2VzKHNvdXJjZUZpbGUsIGN0eC5vcHRpb25zKSA6IGdldFRlbXBsYXRlUmFuZ2VzKHNvdXJjZUZpbGUpDQogICAgICAgIDogY3R4Lm9wdGlvbnMuaWdub3JlSnNEb2MgPyBnZXRFeGNsdWRlZENvbW1lbnRzKHNvdXJjZUZpbGUsIGN0eC5vcHRpb25zKSA6IFtdOw0KICAgIGZvciAoY29uc3QgcG9zc2libGVGYWlsdXJlIG9mIHBvc3NpYmxlRmFpbHVyZXMpIHsNCiAgICAgICAgaWYgKCFleGNsdWRlZFJhbmdlcy5zb21lKChyYW5nZSkgPT4gcmFuZ2UucG9zIDwgcG9zc2libGVGYWlsdXJlLnBvcyAmJiBwb3NzaWJsZUZhaWx1cmUucG9zIDwgcmFuZ2UuZW5kKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmUoDQogICAgICAgICAgICAgICAgcG9zc2libGVGYWlsdXJlLnBvcywgcG9zc2libGVGYWlsdXJlLmVuZCwgUnVsZS5GQUlMVVJFX1NUUklORywNCiAgICAgICAgICAgICAgICBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZUZyb21Ubyhwb3NzaWJsZUZhaWx1cmUucG9zLCBwb3NzaWJsZUZhaWx1cmUuZW5kKSwNCiAgICAgICAgICAgICk7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGdldEV4Y2x1ZGVkUmFuZ2VzKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIG9wdGlvbnM6IE9wdGlvbnMpOiB0cy5UZXh0UmFuZ2VbXSB7DQogICAgY29uc3QgaW50ZXJ2YWxzOiB0cy5UZXh0UmFuZ2VbXSA9IFtdOw0KICAgIGZvckVhY2hUb2tlbldpdGhUcml2aWEoc291cmNlRmlsZSwgKHRleHQsIGtpbmQsIHJhbmdlKSA9PiB7DQogICAgICAgIGlmIChraW5kID49IHRzLlN5bnRheEtpbmQuRmlyc3RUZW1wbGF0ZVRva2VuICYmIGtpbmQgPD0gdHMuU3ludGF4S2luZC5MYXN0VGVtcGxhdGVUb2tlbikgew0KICAgICAgICAgICAgaW50ZXJ2YWxzLnB1c2gocmFuZ2UpOw0KICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaWdub3JlQ29tbWVudHMpIHsNCiAgICAgICAgICAgIGlmIChraW5kID09PSB0cy5TeW50YXhLaW5kLlNpbmdsZUxpbmVDb21tZW50VHJpdmlhIHx8IGtpbmQgPT09IHRzLlN5bnRheEtpbmQuTXVsdGlMaW5lQ29tbWVudFRyaXZpYSkgew0KICAgICAgICAgICAgICAgIGludGVydmFscy5wdXNoKHJhbmdlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmlnbm9yZUpzRG9jKSB7DQogICAgICAgICAgICBpZiAoaXNKc0RvYyh0ZXh0LCBraW5kLCByYW5nZSkpIHsNCiAgICAgICAgICAgICAgICBpbnRlcnZhbHMucHVzaChyYW5nZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCiAgICByZXR1cm4gaW50ZXJ2YWxzOw0KfQ0KDQpmdW5jdGlvbiBnZXRFeGNsdWRlZENvbW1lbnRzKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIG9wdGlvbnM6IE9wdGlvbnMpOiB0cy5UZXh0UmFuZ2VbXSB7DQogICAgY29uc3QgaW50ZXJ2YWxzOiB0cy5UZXh0UmFuZ2VbXSA9IFtdOw0KICAgIGZvckVhY2hDb21tZW50KHNvdXJjZUZpbGUsICh0ZXh0LCBjb21tZW50KSA9PiB7DQogICAgICAgIGlmIChvcHRpb25zLmlnbm9yZUNvbW1lbnRzIHx8DQogICAgICAgICAgICBvcHRpb25zLmlnbm9yZUpzRG9jICYmIGlzSnNEb2ModGV4dCwgY29tbWVudC5raW5kLCBjb21tZW50KSkgew0KICAgICAgICAgICAgaW50ZXJ2YWxzLnB1c2goY29tbWVudCk7DQogICAgICAgIH0NCiAgICB9KTsNCiAgICByZXR1cm4gaW50ZXJ2YWxzOw0KfQ0KDQpmdW5jdGlvbiBpc0pzRG9jKHNvdXJjZVRleHQ6IHN0cmluZywga2luZDogdHMuU3ludGF4S2luZCwgcmFuZ2U6IHRzLlRleHRSYW5nZSkgew0KICAgIHJldHVybiBraW5kID09PSB0cy5TeW50YXhLaW5kLk11bHRpTGluZUNvbW1lbnRUcml2aWEgJiYgc291cmNlVGV4dFtyYW5nZS5wb3MgKyAyXSA9PT0gIioiICYmIHNvdXJjZVRleHRbcmFuZ2UucG9zICsgM10gIT09ICIqIjsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "BE2EAF0A50059E0EAE8B9606E57FBA81",
              "algorithm": "md5"
            },
            {
              "value": "59CCDCB3ED209F135CE579D942D7340ED39BFF4C",
              "algorithm": "sha-1"
            },
            {
              "value": "4E64EE4A21A17358EFD99F1619FCC564DD1B77B06050431DBF179D38B02987AB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noUnboundMethodRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaGFzTW9kaWZpZXIsIGlzUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpjb25zdCBPUFRJT05fSUdOT1JFX1NUQVRJQyA9ICJpZ25vcmUtc3RhdGljIjsNCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIGlnbm9yZVN0YXRpYzogYm9vbGVhbjsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLlR5cGVkUnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLXVuYm91bmQtbWV0aG9kIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJXYXJucyB3aGVuIGEgbWV0aG9kIGlzIHVzZWQgb3V0c2lkZSBvZiBhIG1ldGhvZCBjYWxsLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogYFlvdSBtYXkgb3B0aW9uYWxseSBwYXNzICIke09QVElPTl9JR05PUkVfU1RBVElDfSIgdG8gaWdub3JlIHN0YXRpYyBtZXRob2RzLmAsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgZW51bTogW09QVElPTl9JR05PUkVfU1RBVElDXSwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlLCBbdHJ1ZSwgT1BUSU9OX0lHTk9SRV9TVEFUSUNdXSwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIENsYXNzIGZ1bmN0aW9ucyBkb24ndCBwcmVzZXJ2ZSB0aGUgY2xhc3Mgc2NvcGUgd2hlbiBwYXNzZWQgYXMgc3RhbmRhbG9uZSB2YXJpYWJsZXMuDQogICAgICAgICAgICBGb3IgZXhhbXBsZSwgdGhpcyBjb2RlIHdpbGwgbG9nIHRoZSBnbG9iYWwgc2NvcGUgKFxgd2luZG93XGAvXGBnbG9iYWxcYCksIG5vdCB0aGUgY2xhc3MgaW5zdGFuY2U6DQoNCiAgICAgICAgICAgIFxgXGBcYA0KICAgICAgICAgICAgY2xhc3MgTXlDbGFzcyB7DQogICAgICAgICAgICAgICAgcHVibGljIGxvZygpOiB2b2lkIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBNeUNsYXNzKCk7DQogICAgICAgICAgICBjb25zdCBsb2cgPSBpbnN0YW5jZS5sb2c7DQoNCiAgICAgICAgICAgIGxvZygpOw0KICAgICAgICAgICAgXGBcYFxgDQoNCiAgICAgICAgICAgIFlvdSBuZWVkIHRvIGVpdGhlciB1c2UgYW4gYXJyb3cgbGFtYmRhIChcYCgpID0+IHsuLi59XGApIG9yIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGNvcnJlY3Qgc2NvcGUuDQoNCiAgICAgICAgICAgIFxgXGBcYA0KICAgICAgICAgICAgY2xhc3MgTXlDbGFzcyB7DQogICAgICAgICAgICAgICAgcHVibGljIGxvZ0Fycm93Qm91bmQgPSAoKTogdm9pZCA9PiB7DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJvdW5kKTsNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgcHVibGljIGxvZ01hbnVhbEJpbmQoKTogdm9pZCB7DQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgTXlDbGFzcygpOw0KICAgICAgICAgICAgY29uc3QgbG9nQXJyb3dCb3VuZCA9IGluc3RhbmNlLmxvZ0Fycm93Qm91bmQ7DQogICAgICAgICAgICBjb25zdCBsb2dNYW51YWxCaW5kID0gaW5zdGFuY2UubG9nTWFudWFsQmluZC5iaW5kKGluc3RhbmNlKTsNCg0KICAgICAgICAgICAgbG9nQXJyb3dCb3VuZCgpOw0KICAgICAgICAgICAgbG9nTWFudWFsQmluZCgpOw0KICAgICAgICAgICAgXGBcYFxgDQogICAgICAgIGAsDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IHRydWUsDQogICAgICAgIHJlcXVpcmVzVHlwZUluZm86IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJBdm9pZCByZWZlcmVuY2luZyB1bmJvdW5kIG1ldGhvZHMgd2hpY2ggbWF5IGNhdXNlIHVuaW50ZW50aW9uYWwgc2NvcGluZyBvZiAndGhpcycuIjsNCg0KICAgIHB1YmxpYyBhcHBseVdpdGhQcm9ncmFtKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIHByb2dyYW06IHRzLlByb2dyYW0pOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbigNCiAgICAgICAgICAgIHNvdXJjZUZpbGUsDQogICAgICAgICAgICB3YWxrLA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlnbm9yZVN0YXRpYzogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX0lHTk9SRV9TVEFUSUMpICE9PSAtMSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBwcm9ncmFtLmdldFR5cGVDaGVja2VyKCksDQogICAgICAgICk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDxPcHRpb25zPiwgdGM6IHRzLlR5cGVDaGVja2VyKSB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAoaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24obm9kZSkgJiYgIWlzU2FmZVVzZShub2RlKSkgew0KICAgICAgICAgICAgY29uc3Qgc3ltYm9sID0gdGMuZ2V0U3ltYm9sQXRMb2NhdGlvbihub2RlKTsNCiAgICAgICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gc3ltYm9sID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzeW1ib2wudmFsdWVEZWNsYXJhdGlvbjsNCiAgICAgICAgICAgIGlmIChkZWNsYXJhdGlvbiAhPT0gdW5kZWZpbmVkICYmIGlzTWV0aG9kKGRlY2xhcmF0aW9uLCBjdHgub3B0aW9ucy5pZ25vcmVTdGF0aWMpKSB7DQogICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQoNCmZ1bmN0aW9uIGlzTWV0aG9kKG5vZGU6IHRzLk5vZGUsIGlnbm9yZVN0YXRpYzogYm9vbGVhbik6IGJvb2xlYW4gew0KICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5NZXRob2REZWNsYXJhdGlvbjoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1ldGhvZFNpZ25hdHVyZToNCiAgICAgICAgICAgIHJldHVybiAhKGlnbm9yZVN0YXRpYyAmJiBoYXNNb2RpZmllcihub2RlLm1vZGlmaWVycywgdHMuU3ludGF4S2luZC5TdGF0aWNLZXl3b3JkKSk7DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBpc1NhZmVVc2Uobm9kZTogdHMuTm9kZSk6IGJvb2xlYW4gew0KICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50ITsNCiAgICBzd2l0Y2ggKHBhcmVudC5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiAocGFyZW50IGFzIHRzLkNhbGxFeHByZXNzaW9uKS5leHByZXNzaW9uID09PSBub2RlOw0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uOg0KICAgICAgICAgICAgcmV0dXJuIChwYXJlbnQgYXMgdHMuVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uKS50YWcgPT09IG5vZGU7DQogICAgICAgIC8vIEUuZy4gYG9iai5tZXRob2QuYmluZChvYmopIG9yIG9iai5tZXRob2RbInByb3AiXWAuDQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb246DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5FbGVtZW50QWNjZXNzRXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAvLyBBbGxvdyBtb3N0IGJpbmFyeSBvcGVyYXRvcnMsIGJ1dCBkb24ndCBhbGxvdyBlLmcuIGBteUFycmF5LmZvckVhY2gob2JqLm1ldGhvZCB8fCBvdGhlck9iai5vdGhlck1ldGhvZClgLg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQmluYXJ5RXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiAocGFyZW50IGFzIHRzLkJpbmFyeUV4cHJlc3Npb24pLm9wZXJhdG9yVG9rZW4ua2luZCAhPT0gdHMuU3ludGF4S2luZC5CYXJCYXJUb2tlbjsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk5vbk51bGxFeHByZXNzaW9uOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQXNFeHByZXNzaW9uOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVHlwZUFzc2VydGlvbkV4cHJlc3Npb246DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5QYXJlbnRoZXNpemVkRXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiBpc1NhZmVVc2UocGFyZW50KTsNCiAgICAgICAgLy8gQWxsb3cgdXNlIGluIGNvbmRpdGlvbnMNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNvbmRpdGlvbmFsRXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiAocGFyZW50IGFzIHRzLkNvbmRpdGlvbmFsRXhwcmVzc2lvbikuY29uZGl0aW9uID09PSBub2RlOw0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSWZTdGF0ZW1lbnQ6DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5XaGlsZVN0YXRlbWVudDoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkRvU3RhdGVtZW50Og0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRm9yU3RhdGVtZW50Og0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUHJlZml4VW5hcnlFeHByZXNzaW9uOg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "6CBA43CE1881058629B65BAEEFE9ECD6",
              "algorithm": "md5"
            },
            {
              "value": "75A303EA28485636DE50A7E603BFE08268EA3FFC",
              "algorithm": "sha-1"
            },
            {
              "value": "9872B4F083295FD4A4C7A1673F617C59B01F237DF9939C5F578FB93FEF5D8D97",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noUnnecessaryClassRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KaW1wb3J0IHsNCiAgICBnZXRDaGlsZE9mS2luZCwNCiAgICBoYXNNb2RpZmllciwNCiAgICBpc0NsYXNzRGVjbGFyYXRpb24sDQogICAgaXNDb25zdHJ1Y3RvckRlY2xhcmF0aW9uLA0KICAgIGlzUGFyYW1ldGVyUHJvcGVydHksDQp9IGZyb20gInRzdXRpbHMiOw0KDQppbnRlcmZhY2UgT3B0aW9ucyB7DQogICAgYWxsb3dDb25zdHJ1Y3Rvck9ubHk6IGJvb2xlYW47DQogICAgYWxsb3dFbXB0eUNsYXNzOiBib29sZWFuOw0KICAgIGFsbG93U3RhdGljT25seTogYm9vbGVhbjsNCn0NCg0KY29uc3QgT1BUSU9OX19BTExPV19DT05TVFJVQ1RPUl9PTkxZID0gImFsbG93LWNvbnN0cnVjdG9yLW9ubHkiOw0KY29uc3QgT1BUSU9OX19BTExPV19FTVBUWV9DTEFTUyA9ICJhbGxvdy1lbXB0eS1jbGFzcyI7DQpjb25zdCBPUFRJT05fX0FMTE9XX1NUQVRJQ19PTkxZID0gImFsbG93LXN0YXRpYy1vbmx5IjsNCg0KZnVuY3Rpb24gcGFyc2VPcHRpb25zKG9wdGlvbnM6IHN0cmluZ1tdKTogT3B0aW9ucyB7DQogICAgcmV0dXJuIHsNCiAgICAgICAgYWxsb3dDb25zdHJ1Y3Rvck9ubHk6IG9wdGlvbnMuaW5kZXhPZihPUFRJT05fX0FMTE9XX0NPTlNUUlVDVE9SX09OTFkpICE9PSAtMSwNCiAgICAgICAgYWxsb3dFbXB0eUNsYXNzOiBvcHRpb25zLmluZGV4T2YoT1BUSU9OX19BTExPV19FTVBUWV9DTEFTUykgIT09IC0xLA0KICAgICAgICBhbGxvd1N0YXRpY09ubHk6IG9wdGlvbnMuaW5kZXhPZihPUFRJT05fX0FMTE9XX1NUQVRJQ19PTkxZKSAhPT0gLTEsDQogICAgfTsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLXVubmVjZXNzYXJ5LWNsYXNzIiwNCiAgICAgICAgZGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgRGlzYWxsb3dzIGNsYXNzZXMgdGhhdCBhcmUgbm90IHN0cmljdGx5IG5lY2Vzc2FyeS5gLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgVXNlcnMgd2hvIGNvbWUgZnJvbSBhIEphdmEtc3R5bGUgT08gbGFuZ3VhZ2UgbWF5IHdyYXANCiAgICAgICAgICAgIHRoZWlyIHV0aWxpdHkgZnVuY3Rpb25zIGluIGFuIGV4dHJhIGNsYXNzLCBpbnN0ZWFkIG9mDQogICAgICAgICAgICBwdXR0aW5nIHRoZW0gYXQgdGhlIHRvcCBsZXZlbC5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgVGhyZWUgYXJndW1lbnRzIG1heSBiZSBvcHRpb25hbGx5IHByb3ZpZGVkOg0KDQogICAgICAgICAgICAqIFxgImFsbG93LWNvbnN0cnVjdG9yLW9ubHkiXGAgaWdub3JlcyBjbGFzc2VzIHdob3NlIG1lbWJlcnMgYXJlIGNvbnN0cnVjdG9ycy4NCiAgICAgICAgICAgICogXGAiYWxsb3ctZW1wdHktY2xhc3MiXGAgaWdub3JlcyBcYGNsYXNzIERlbW9DbGFzcyB7fVxgLg0KICAgICAgICAgICAgKiBcYCJhbGxvdy1zdGF0aWMtb25seSJcYCBpZ25vcmVzIGNsYXNzZXMgd2hvc2UgbWVtYmVycyBhcmUgc3RhdGljLmAsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJhcnJheSIsDQogICAgICAgICAgICBpdGVtczogew0KICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIG1pbkxlbmd0aDogMCwNCiAgICAgICAgICAgIG1heExlbmd0aDogMywNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlLCBbImFsbG93LWVtcHR5LWNsYXNzIiwgImFsbG93LWNvbnN0cnVjdG9yLW9ubHkiXV0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9DT05TVFJVQ1RPUl9PTkxZID0gIkV2ZXJ5IG1lbWJlciBvZiB0aGlzIGNsYXNzIGlzIGEgY29uc3RydWN0b3IuIFVzZSBmdW5jdGlvbnMgaW5zdGVhZC4iOw0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVEFUSUNfT05MWSA9ICJFdmVyeSBtZW1iZXIgb2YgdGhpcyBjbGFzcyBpcyBzdGF0aWMuIFVzZSBuYW1lc3BhY2VzIG9yIHBsYWluIG9iamVjdHMgaW5zdGVhZC4iOw0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9FTVBUWV9DTEFTUyA9ICJUaGlzIGNsYXNzIGhhcyBubyBtZW1iZXJzLiI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aFdhbGtlcigNCiAgICAgICAgICAgIG5ldyBOb1VubmVjZXNzYXJ5Q2xhc3NXYWxrZXIoc291cmNlRmlsZSwgdGhpcy5ydWxlTmFtZSwgcGFyc2VPcHRpb25zKHRoaXMucnVsZUFyZ3VtZW50cykpLA0KICAgICAgICApOw0KICAgIH0NCn0NCg0KY2xhc3MgTm9Vbm5lY2Vzc2FyeUNsYXNzV2Fsa2VyIGV4dGVuZHMgTGludC5BYnN0cmFjdFdhbGtlcjxPcHRpb25zPiB7DQogICAgcHVibGljIHdhbGsoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSkgew0KICAgICAgICBjb25zdCBjaGVja0lmVW5uZWNlc3NhcnlDbGFzcyA9IChub2RlOiB0cy5Ob2RlKTogdm9pZCA9PiB7DQogICAgICAgICAgICBpZiAoaXNDbGFzc0RlY2xhcmF0aW9uKG5vZGUpICYmICFoYXNFeHRlbmRzQ2xhdXNlKG5vZGUpKSB7DQogICAgICAgICAgICAgICAgdGhpcy5jaGVja01lbWJlcnMobm9kZSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNoZWNrSWZVbm5lY2Vzc2FyeUNsYXNzKTsNCiAgICAgICAgfTsNCiAgICAgICAgdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGNoZWNrSWZVbm5lY2Vzc2FyeUNsYXNzKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGNoZWNrTWVtYmVycyhub2RlOiB0cy5DbGFzc0RlY2xhcmF0aW9uKSB7DQogICAgICAgIGlmIChub2RlLm1lbWJlcnMubGVuZ3RoID09PSAwKSB7DQogICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd0VtcHR5Q2xhc3MpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdE5vZGUoZ2V0Q2hpbGRPZktpbmQobm9kZSwgdHMuU3ludGF4S2luZC5DbGFzc0tleXdvcmQpISwgUnVsZS5GQUlMVVJFX0VNUFRZX0NMQVNTKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnN0IGFsbE1lbWJlcnNBcmVDb25zdHJ1Y3RvcnMgPSBub2RlLm1lbWJlcnMuZXZlcnkoaXNDb25zdHJ1Y3RvckRlY2xhcmF0aW9uKTsNCiAgICAgICAgaWYgKA0KICAgICAgICAgICAgYWxsTWVtYmVyc0FyZUNvbnN0cnVjdG9ycyAmJg0KICAgICAgICAgICAgIXRoaXMub3B0aW9ucy5hbGxvd0NvbnN0cnVjdG9yT25seSAmJg0KICAgICAgICAgICAgIW5vZGUubWVtYmVycy5zb21lKGlzQ29uc3RydWN0b3JXaXRoU2hvcnRoYW5kUHJvcHMpDQogICAgICAgICkgew0KICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlQXROb2RlKA0KICAgICAgICAgICAgICAgIGdldENoaWxkT2ZLaW5kKG5vZGUsIHRzLlN5bnRheEtpbmQuQ2xhc3NLZXl3b3JkLCB0aGlzLnNvdXJjZUZpbGUpISwNCiAgICAgICAgICAgICAgICBSdWxlLkZBSUxVUkVfQ09OU1RSVUNUT1JfT05MWSwNCiAgICAgICAgICAgICk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoDQogICAgICAgICAgICAhYWxsTWVtYmVyc0FyZUNvbnN0cnVjdG9ycyAmJg0KICAgICAgICAgICAgIXRoaXMub3B0aW9ucy5hbGxvd1N0YXRpY09ubHkgJiYNCiAgICAgICAgICAgICFub2RlLm1lbWJlcnMuc29tZShpc05vblN0YXRpY01lbWJlcikNCiAgICAgICAgKSB7DQogICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdE5vZGUoDQogICAgICAgICAgICAgICAgZ2V0Q2hpbGRPZktpbmQobm9kZSwgdHMuU3ludGF4S2luZC5DbGFzc0tleXdvcmQsIHRoaXMuc291cmNlRmlsZSkhLA0KICAgICAgICAgICAgICAgIFJ1bGUuRkFJTFVSRV9TVEFUSUNfT05MWSwNCiAgICAgICAgICAgICk7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGlzTm9uU3RhdGljTWVtYmVyKG1lbWJlcjogdHMuQ2xhc3NFbGVtZW50KTogYm9vbGVhbiB7DQogICAgcmV0dXJuICgNCiAgICAgICAgaXNDb25zdHJ1Y3RvcldpdGhTaG9ydGhhbmRQcm9wcyhtZW1iZXIpIHx8DQogICAgICAgICghaXNDb25zdHJ1Y3RvckRlY2xhcmF0aW9uKG1lbWJlcikgJiYgIWhhc01vZGlmaWVyKG1lbWJlci5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuU3RhdGljS2V5d29yZCkpDQogICAgKTsNCn0NCg0KZnVuY3Rpb24gaGFzRXh0ZW5kc0NsYXVzZShkZWNsYXJhdGlvbjogdHMuQ2xhc3NEZWNsYXJhdGlvbik6IGJvb2xlYW4gew0KICAgIHJldHVybiAoDQogICAgICAgIGRlY2xhcmF0aW9uLmhlcml0YWdlQ2xhdXNlcyAhPT0gdW5kZWZpbmVkICYmDQogICAgICAgIGRlY2xhcmF0aW9uLmhlcml0YWdlQ2xhdXNlc1swXS50b2tlbiA9PT0gdHMuU3ludGF4S2luZC5FeHRlbmRzS2V5d29yZA0KICAgICk7DQp9DQoNCmZ1bmN0aW9uIGlzQ29uc3RydWN0b3JXaXRoU2hvcnRoYW5kUHJvcHMobWVtYmVyOiB0cy5DbGFzc0VsZW1lbnQpOiBib29sZWFuIHsNCiAgICByZXR1cm4gaXNDb25zdHJ1Y3RvckRlY2xhcmF0aW9uKG1lbWJlcikgJiYgbWVtYmVyLnBhcmFtZXRlcnMuc29tZShpc1BhcmFtZXRlclByb3BlcnR5KTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "2D9D42915BA7216F63D01CB9F4D2CCD2",
              "algorithm": "md5"
            },
            {
              "value": "1234AF91B72606FDDE61A950304F016B8DFF8E32",
              "algorithm": "sha-1"
            },
            {
              "value": "B49F3EA58817B880FB866A4B211AB289470391B10D5D344AFA2710F0AA91BC3A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noUnnecessaryInitializerRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0Q2hpbGRPZktpbmQsIGlzQmluZGluZ1BhdHRlcm4sIGlzTm9kZUZsYWdTZXQgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogIm5vLXVubmVjZXNzYXJ5LWluaXRpYWxpemVyIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJGb3JiaWRzIGEgJ3ZhcicvJ2xldCcgc3RhdGVtZW50IG9yIGRlc3RydWN0dXJpbmcgaW5pdGlhbGl6ZXIgdG8gYmUgaW5pdGlhbGl6ZWQgdG8gJ3VuZGVmaW5lZCcuIiwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBWYWx1ZXMgaW4gSmF2YVNjcmlwdCBkZWZhdWx0IHRvIFxgdW5kZWZpbmVkXGAuDQogICAgICAgICAgICBUaGVyZSdzIG5vIG5lZWQgdG8gZG8gc28gbWFudWFsbHkuDQogICAgICAgIGAsDQogICAgICAgIHR5cGU6ICJzdHlsZSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIlVubmVjZXNzYXJ5IGluaXRpYWxpemF0aW9uIHRvICd1bmRlZmluZWQnLiI7DQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19QQVJBTUVURVIgPQ0KICAgICAgICAiVXNlIGFuIG9wdGlvbmFsIHBhcmFtZXRlciBpbnN0ZWFkIG9mIGluaXRpYWxpemluZyB0byAndW5kZWZpbmVkJy4gIiArDQogICAgICAgICJBbHNvLCB0aGUgdHlwZSBkZWNsYXJhdGlvbiBkb2VzIG5vdCBuZWVkIHRvIGluY2x1ZGUgJ3wgdW5kZWZpbmVkJy4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KTogdm9pZCB7DQogICAgdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQmluZGluZ0VsZW1lbnQ6DQogICAgICAgICAgICAgICAgY2hlY2tJbml0aWFsaXplcihub2RlIGFzIHRzLkJpbmRpbmdFbGVtZW50KTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlZhcmlhYmxlRGVjbGFyYXRpb246DQogICAgICAgICAgICAgICAgaWYgKCFpc0JpbmRpbmdQYXR0ZXJuKChub2RlIGFzIHRzLlZhcmlhYmxlRGVjbGFyYXRpb24pLm5hbWUpICYmICFpc05vZGVGbGFnU2V0KG5vZGUucGFyZW50ISwgdHMuTm9kZUZsYWdzLkNvbnN0KSkgew0KICAgICAgICAgICAgICAgICAgICBjaGVja0luaXRpYWxpemVyKG5vZGUgYXMgdHMuVmFyaWFibGVEZWNsYXJhdGlvbik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTWV0aG9kRGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRnVuY3Rpb25EZWNsYXJhdGlvbjoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Db25zdHJ1Y3Rvcjogew0KICAgICAgICAgICAgICAgIGNvbnN0IHsgcGFyYW1ldGVycyB9ID0gbm9kZSBhcyB0cy5GdW5jdGlvbkxpa2VEZWNsYXJhdGlvbjsNCiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmZvckVhY2goKHBhcmFtZXRlciwgaSkgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQocGFyYW1ldGVyLmluaXRpYWxpemVyKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnNBbGxPcHRpb25hbEFmdGVyKHBhcmFtZXRlcnMsIGkpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZml4IHNpbmNlIHRoZXkgbWF5IHdhbnQgdG8gcmVtb3ZlICd8IHVuZGVmaW5lZCcgZnJvbSB0aGUgdHlwZS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShwYXJhbWV0ZXIsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfUEFSQU1FVEVSKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbFdpdGhGaXgocGFyYW1ldGVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQoNCiAgICBmdW5jdGlvbiBjaGVja0luaXRpYWxpemVyKG5vZGU6IHRzLlZhcmlhYmxlRGVjbGFyYXRpb24gfCB0cy5CaW5kaW5nRWxlbWVudCkgew0KICAgICAgICBpZiAoaXNVbmRlZmluZWQobm9kZS5pbml0aWFsaXplcikpIHsNCiAgICAgICAgICAgIGZhaWxXaXRoRml4KG5vZGUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZmFpbFdpdGhGaXgobm9kZTogdHMuVmFyaWFibGVEZWNsYXJhdGlvbiB8IHRzLkJpbmRpbmdFbGVtZW50IHwgdHMuUGFyYW1ldGVyRGVjbGFyYXRpb24pIHsNCiAgICAgICAgY29uc3QgZml4ID0gTGludC5SZXBsYWNlbWVudC5kZWxldGVGcm9tVG8oDQogICAgICAgICAgICBnZXRDaGlsZE9mS2luZChub2RlLCB0cy5TeW50YXhLaW5kLkVxdWFsc1Rva2VuKSEucG9zLA0KICAgICAgICAgICAgbm9kZS5lbmQpOw0KICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HLCBmaXgpOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gcGFyYW1ldGVyc0FsbE9wdGlvbmFsQWZ0ZXIocGFyYW1ldGVyczogUmVhZG9ubHlBcnJheTx0cy5QYXJhbWV0ZXJEZWNsYXJhdGlvbj4sIGlkeDogbnVtYmVyKTogYm9vbGVhbiB7DQogICAgZm9yIChsZXQgaSA9IGlkeCArIDE7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIGlmIChwYXJhbWV0ZXJzW2ldLnF1ZXN0aW9uVG9rZW4gIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICAgICAgaWYgKHBhcmFtZXRlcnNbaV0uaW5pdGlhbGl6ZXIgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiB0cnVlOw0KfQ0KDQpmdW5jdGlvbiBpc1VuZGVmaW5lZChub2RlOiB0cy5Ob2RlIHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIG5vZGUgIT09IHVuZGVmaW5lZCAmJg0KICAgICAgICBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSWRlbnRpZmllciAmJg0KICAgICAgICAobm9kZSBhcyB0cy5JZGVudGlmaWVyKS5vcmlnaW5hbEtleXdvcmRLaW5kID09PSB0cy5TeW50YXhLaW5kLlVuZGVmaW5lZEtleXdvcmQ7DQp9DQo="
          },
          "hashes": [
            {
              "value": "A4EF24B0206BCDCF52C95923880D4EE5",
              "algorithm": "md5"
            },
            {
              "value": "2611E3F954AB6D76BE6C0AF39627367D727B674A",
              "algorithm": "sha-1"
            },
            {
              "value": "3683B2C288D7C15F099F8D485D60038772155530C2EBCA858CF2DCCC4E33C575",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noUnnecessaryQualifierRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5UeXBlZFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby11bm5lY2Vzc2FyeS1xdWFsaWZpZXIiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIldhcm5zIHdoZW4gYSBuYW1lc3BhY2UgcXVhbGlmaWVyIChgQS54YCkgaXMgdW5uZWNlc3NhcnkuIiwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJzdHlsZSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgICAgICByZXF1aXJlc1R5cGVJbmZvOiB0cnVlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcobmFtZTogc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBgUXVhbGlmaWVyIGlzIHVubmVjZXNzYXJ5IHNpbmNlICcke25hbWV9JyBpcyBpbiBzY29wZS5gOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseVdpdGhQcm9ncmFtKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIHByb2dyYW06IHRzLlByb2dyYW0pOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB1bmRlZmluZWQsIHByb2dyYW0uZ2V0VHlwZUNoZWNrZXIoKSk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPiwgY2hlY2tlcjogdHMuVHlwZUNoZWNrZXIpOiB2b2lkIHsNCiAgICBjb25zdCBuYW1lc3BhY2VzSW5TY29wZTogQXJyYXk8dHMuTW9kdWxlRGVjbGFyYXRpb24gfCB0cy5FbnVtRGVjbGFyYXRpb24+ID0gW107DQogICAgdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBjYik7DQoNCiAgICBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTW9kdWxlRGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRW51bURlY2xhcmF0aW9uOg0KICAgICAgICAgICAgICAgIG5hbWVzcGFjZXNJblNjb3BlLnB1c2gobm9kZSBhcyB0cy5Nb2R1bGVEZWNsYXJhdGlvbiB8IHRzLkVudW1EZWNsYXJhdGlvbik7DQogICAgICAgICAgICAgICAgdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICAgICAgICAgICAgICBuYW1lc3BhY2VzSW5TY29wZS5wb3AoKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlF1YWxpZmllZE5hbWU6DQogICAgICAgICAgICAgICAgY29uc3QgeyBsZWZ0LCByaWdodCB9ID0gbm9kZSBhcyB0cy5RdWFsaWZpZWROYW1lOw0KICAgICAgICAgICAgICAgIHZpc2l0TmFtZXNwYWNlQWNjZXNzKG5vZGUsIGxlZnQsIHJpZ2h0KTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbjoNCiAgICAgICAgICAgICAgICBjb25zdCB7IGV4cHJlc3Npb24sIG5hbWUgfSA9IG5vZGUgYXMgdHMuUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uOw0KICAgICAgICAgICAgICAgIGlmICh1dGlscy5pc0VudGl0eU5hbWVFeHByZXNzaW9uKGV4cHJlc3Npb24pKSB7DQogICAgICAgICAgICAgICAgICAgIHZpc2l0TmFtZXNwYWNlQWNjZXNzKG5vZGUsIGV4cHJlc3Npb24sIG5hbWUpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaA0KDQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmdW5jdGlvbiB2aXNpdE5hbWVzcGFjZUFjY2Vzcyhub2RlOiB0cy5Ob2RlLCBxdWFsaWZpZXI6IHRzLkVudGl0eU5hbWVPckVudGl0eU5hbWVFeHByZXNzaW9uLCBuYW1lOiB0cy5JZGVudGlmaWVyKTogdm9pZCB7DQogICAgICAgIGlmIChxdWFsaWZpZXJJc1VubmVjZXNzYXJ5KHF1YWxpZmllciwgbmFtZSkpIHsNCiAgICAgICAgICAgIGNvbnN0IGZpeCA9IExpbnQuUmVwbGFjZW1lbnQuZGVsZXRlRnJvbVRvKHF1YWxpZmllci5nZXRTdGFydCgpLCBuYW1lLmdldFN0YXJ0KCkpOw0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUocXVhbGlmaWVyLCBSdWxlLkZBSUxVUkVfU1RSSU5HKHF1YWxpZmllci5nZXRUZXh0KCkpLCBmaXgpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy8gT25seSBsb29rIGZvciBuZXN0ZWQgcXVhbGlmaWVyIGVycm9ycyBpZiB3ZSBkaWRuJ3QgYWxyZWFkeSBmYWlsIG9uIHRoZSBvdXRlciBxdWFsaWZpZXIuDQogICAgICAgICAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcXVhbGlmaWVySXNVbm5lY2Vzc2FyeShxdWFsaWZpZXI6IHRzLkVudGl0eU5hbWVPckVudGl0eU5hbWVFeHByZXNzaW9uLCBuYW1lOiB0cy5JZGVudGlmaWVyKTogYm9vbGVhbiB7DQogICAgICAgIGNvbnN0IG5hbWVzcGFjZVN5bWJvbCA9IGNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbihxdWFsaWZpZXIpOw0KICAgICAgICBpZiAobmFtZXNwYWNlU3ltYm9sID09PSB1bmRlZmluZWQgfHwgIXN5bWJvbElzTmFtZXNwYWNlSW5TY29wZShuYW1lc3BhY2VTeW1ib2wpKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBjb25zdCBhY2Nlc3NlZFN5bWJvbCA9IGNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbihuYW1lKTsNCiAgICAgICAgaWYgKGFjY2Vzc2VkU3ltYm9sID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIElmIHRoZSBzeW1ib2wgaW4gc2NvcGUgaXMgZGlmZmVyZW50LCB0aGUgcXVhbGlmaWVyIGlzIG5lY2Vzc2FyeS4NCiAgICAgICAgY29uc3QgZnJvbVNjb3BlID0gZ2V0U3ltYm9sSW5TY29wZShxdWFsaWZpZXIsIGFjY2Vzc2VkU3ltYm9sLmZsYWdzLCBuYW1lLnRleHQpOw0KICAgICAgICByZXR1cm4gZnJvbVNjb3BlID09PSB1bmRlZmluZWQgfHwgc3ltYm9sc0FyZUVxdWFsKGFjY2Vzc2VkU3ltYm9sLCBmcm9tU2NvcGUpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFN5bWJvbEluU2NvcGUobm9kZTogdHMuTm9kZSwgZmxhZ3M6IHRzLlN5bWJvbEZsYWdzLCBuYW1lOiBzdHJpbmcpOiB0cy5TeW1ib2wgfCB1bmRlZmluZWQgew0KICAgICAgICAvLyBUT0RPOlBFUkYgYGdldFN5bWJvbHNJblNjb3BlYCBnZXRzIGEgbG9uZyBsaXN0LiBJcyB0aGVyZSBhIGJldHRlciB3YXk/DQogICAgICAgIGNvbnN0IHNjb3BlID0gY2hlY2tlci5nZXRTeW1ib2xzSW5TY29wZShub2RlLCBmbGFncyk7DQogICAgICAgIHJldHVybiBzY29wZS5maW5kKChzY29wZVN5bWJvbCkgPT4gc2NvcGVTeW1ib2wubmFtZSA9PT0gbmFtZSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc3ltYm9sSXNOYW1lc3BhY2VJblNjb3BlKHN5bWJvbDogdHMuU3ltYm9sKTogYm9vbGVhbiB7DQogICAgICAgIGNvbnN0IHN5bWJvbERlY2xhcmF0aW9ucyA9IHN5bWJvbC5nZXREZWNsYXJhdGlvbnMoKTsNCiAgICAgICAgaWYgKHN5bWJvbERlY2xhcmF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sRGVjbGFyYXRpb25zLnNvbWUoKGRlY2wpID0+IG5hbWVzcGFjZXNJblNjb3BlLnNvbWUoKG5zKSA9PiBucyA9PT0gZGVjbCkpKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnN0IGFsaWFzID0gdHJ5R2V0QWxpYXNlZFN5bWJvbChzeW1ib2wsIGNoZWNrZXIpOw0KICAgICAgICByZXR1cm4gYWxpYXMgIT09IHVuZGVmaW5lZCAmJiBzeW1ib2xJc05hbWVzcGFjZUluU2NvcGUoYWxpYXMpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHN5bWJvbHNBcmVFcXVhbChhY2Nlc3NlZDogdHMuU3ltYm9sLCBpblNjb3BlOiB0cy5TeW1ib2wpOiBib29sZWFuIHsNCiAgICAgICAgaWYgKGNoZWNrZXIuZ2V0RXhwb3J0U3ltYm9sT2ZTeW1ib2wgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgaW5TY29wZSA9IGNoZWNrZXIuZ2V0RXhwb3J0U3ltYm9sT2ZTeW1ib2woaW5TY29wZSk7DQogICAgICAgICAgICByZXR1cm4gYWNjZXNzZWQgPT09IGluU2NvcGU7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGFjY2Vzc2VkID09PSBpblNjb3BlIHx8DQogICAgICAgICAgICAvLyBGb3IgY29tcGF0aWJpbGl0eSB3aXRoIHR5cGVzY3JpcHRAMi41OiBjb21wYXJlIGRlY2xhcmF0aW9ucyBiZWNhdXNlIHRoZSBzeW1ib2xzIGRvbid0IGhhdmUgdGhlIHNhbWUgcmVmZXJlbmNlDQogICAgICAgICAgICBMaW50LlV0aWxzLmFycmF5c0FyZUVxdWFsKGFjY2Vzc2VkLmRlY2xhcmF0aW9ucywgaW5TY29wZS5kZWNsYXJhdGlvbnMsIChhLCBiKSA9PiBhID09PSBiKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHRyeUdldEFsaWFzZWRTeW1ib2woc3ltYm9sOiB0cy5TeW1ib2wsIGNoZWNrZXI6IHRzLlR5cGVDaGVja2VyKTogdHMuU3ltYm9sIHwgdW5kZWZpbmVkIHsNCiAgICByZXR1cm4gdXRpbHMuaXNTeW1ib2xGbGFnU2V0KHN5bWJvbCwgdHMuU3ltYm9sRmxhZ3MuQWxpYXMpID8gY2hlY2tlci5nZXRBbGlhc2VkU3ltYm9sKHN5bWJvbCkgOiB1bmRlZmluZWQ7DQp9DQo="
          },
          "hashes": [
            {
              "value": "87BD710282543D39B0A8E791551DF6FD",
              "algorithm": "md5"
            },
            {
              "value": "1077E0DC9D6E720159304DFE1ADCE303A2F29FA5",
              "algorithm": "sha-1"
            },
            {
              "value": "1ED4EB31CF54D72F2223D33FD49A151FF5D6509ABFEB0D237D9A164FA61E6309",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noUnnecessaryTypeAssertionRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNPYmplY3RGbGFnU2V0LCBpc09iamVjdFR5cGUsIGlzVHlwZUZsYWdTZXQgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5UeXBlZFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvbiIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiV2FybnMgaWYgYSB0eXBlIGFzc2VydGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHR5cGUgb2YgYW4gZXhwcmVzc2lvbi4iLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAibGlzdCIsDQogICAgICAgICAgICBsaXN0VHlwZTogew0KICAgICAgICAgICAgICAgIHR5cGU6ICJhcnJheSIsDQogICAgICAgICAgICAgICAgaXRlbXM6IHt0eXBlOiAic3RyaW5nIn0sDQogICAgICAgICAgICB9LA0KICAgICAgICB9LA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJBIGxpc3Qgb2Ygd2hpdGVsaXN0ZWQgYXNzZXJ0aW9uIHR5cGVzIHRvIGlnbm9yZSIsDQogICAgICAgIHR5cGU6ICJ0eXBlc2NyaXB0IiwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogdHJ1ZSwNCiAgICAgICAgcmVxdWlyZXNUeXBlSW5mbzogdHJ1ZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIlRoaXMgYXNzZXJ0aW9uIGlzIHVubmVjZXNzYXJ5IHNpbmNlIGl0IGRvZXMgbm90IGNoYW5nZSB0aGUgdHlwZSBvZiB0aGUgZXhwcmVzc2lvbi4iOw0KDQogICAgcHVibGljIGFwcGx5V2l0aFByb2dyYW0oc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwgcHJvZ3JhbTogdHMuUHJvZ3JhbSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aFdhbGtlcihuZXcgV2Fsa2VyKHNvdXJjZUZpbGUsIHRoaXMucnVsZU5hbWUsIHRoaXMucnVsZUFyZ3VtZW50cywgcHJvZ3JhbS5nZXRUeXBlQ2hlY2tlcigpKSk7DQogICAgfQ0KfQ0KDQpjbGFzcyBXYWxrZXIgZXh0ZW5kcyBMaW50LkFic3RyYWN0V2Fsa2VyPHN0cmluZ1tdPiB7DQogICAgY29uc3RydWN0b3Ioc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwgcnVsZU5hbWU6IHN0cmluZywgb3B0aW9uczogc3RyaW5nW10sIHByaXZhdGUgcmVhZG9ubHkgY2hlY2tlcjogdHMuVHlwZUNoZWNrZXIpIHsNCiAgICAgICAgc3VwZXIoc291cmNlRmlsZSwgcnVsZU5hbWUsIG9wdGlvbnMpOw0KICAgIH0NCg0KICAgIHB1YmxpYyB3YWxrKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpIHsNCiAgICAgICAgY29uc3QgY2IgPSAobm9kZTogdHMuTm9kZSk6IHZvaWQgPT4gew0KICAgICAgICAgICAgc3dpdGNoIChub2RlLmtpbmQpIHsNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTm9uTnVsbEV4cHJlc3Npb246DQogICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tOb25OdWxsQXNzZXJ0aW9uKG5vZGUgYXMgdHMuTm9uTnVsbEV4cHJlc3Npb24pOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVHlwZUFzc2VydGlvbkV4cHJlc3Npb246DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkFzRXhwcmVzc2lvbjoNCiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZXJpZnlDYXN0KG5vZGUgYXMgdHMuQXNzZXJ0aW9uRXhwcmVzc2lvbik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgICAgICB9Ow0KDQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgY2IpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgY2hlY2tOb25OdWxsQXNzZXJ0aW9uKG5vZGU6IHRzLk5vbk51bGxFeHByZXNzaW9uKSB7DQogICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24obm9kZS5leHByZXNzaW9uKTsNCiAgICAgICAgaWYgKHR5cGUgPT09IHRoaXMuY2hlY2tlci5nZXROb25OdWxsYWJsZVR5cGUodHlwZSkpIHsNCiAgICAgICAgICAgIHRoaXMuYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HLCBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZUZyb21Ubyhub2RlLmV4cHJlc3Npb24uZW5kLCBub2RlLmVuZCkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2ZXJpZnlDYXN0KG5vZGU6IHRzLkFzc2VydGlvbkV4cHJlc3Npb24pIHsNCiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmRleE9mKG5vZGUudHlwZS5nZXRUZXh0KHRoaXMuc291cmNlRmlsZSkpICE9PSAtMSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IGNhc3RUeXBlID0gdGhpcy5jaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKG5vZGUpOw0KDQogICAgICAgIGlmIChpc1R5cGVGbGFnU2V0KGNhc3RUeXBlLCB0cy5UeXBlRmxhZ3MuTGl0ZXJhbCkgfHwNCiAgICAgICAgICAgIGlzT2JqZWN0VHlwZShjYXN0VHlwZSkgJiYgKGlzT2JqZWN0RmxhZ1NldChjYXN0VHlwZSwgdHMuT2JqZWN0RmxhZ3MuVHVwbGUpIHx8IGNvdWxkQmVUdXBsZVR5cGUoY2FzdFR5cGUpKSkgew0KDQogICAgICAgICAgICAvLyBJdCdzIG5vdCBhbHdheXMgc2FmZSB0byByZW1vdmUgYSBjYXN0IHRvIGEgbGl0ZXJhbCB0eXBlIG9yIHR1cGxlDQogICAgICAgICAgICAvLyB0eXBlLCBhcyB0aG9zZSB0eXBlcyBhcmUgc29tZXRpbWVzIHdpZGVuZWQgd2l0aG91dCB0aGUgY2FzdC4NCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnN0IHVuY2FzdFR5cGUgPSB0aGlzLmNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24obm9kZS5leHByZXNzaW9uKTsNCiAgICAgICAgaWYgKHVuY2FzdFR5cGUgPT09IGNhc3RUeXBlKSB7DQogICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORywgbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLlR5cGVBc3NlcnRpb25FeHByZXNzaW9uDQogICAgICAgICAgICAgICAgPyBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZUZyb21Ubyhub2RlLmdldFN0YXJ0KCksIG5vZGUuZXhwcmVzc2lvbi5nZXRTdGFydCgpKQ0KICAgICAgICAgICAgICAgIDogTGludC5SZXBsYWNlbWVudC5kZWxldGVGcm9tVG8obm9kZS5leHByZXNzaW9uLmVuZCwgbm9kZS5lbmQpKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KLyoqDQogKiBTb21ldGltZXMgdHVwbGUgdHlwZXMgZG9uJ3QgaGF2ZSBPYmplY3RGbGFncy5UdXBsZSBzZXQsIGxpa2Ugd2hlbiB0aGV5J3JlIGJlaW5nIG1hdGNoZWQgYWdhaW5zdCBhbiBpbmZlcnJlZCB0eXBlLg0KICogU28sIGluIGFkZGl0aW9uLCBjaGVjayBpZiB0aGVyZSBhcmUgaW50ZWdlciBwcm9wZXJ0aWVzIDAuLm4gYW5kIG5vIG90aGVyIG51bWVyaWMga2V5cw0KICovDQpmdW5jdGlvbiBjb3VsZEJlVHVwbGVUeXBlKHR5cGU6IHRzLk9iamVjdFR5cGUpOiBib29sZWFuIHsNCiAgICBjb25zdCBwcm9wZXJ0aWVzID0gdHlwZS5nZXRQcm9wZXJ0aWVzKCk7DQogICAgaWYgKHByb3BlcnRpZXMubGVuZ3RoID09PSAwKSB7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQogICAgbGV0IGkgPSAwOw0KICAgIGZvciAoOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7ICsraSkgew0KICAgICAgICBjb25zdCBuYW1lID0gcHJvcGVydGllc1tpXS5uYW1lOw0KICAgICAgICBpZiAoU3RyaW5nKGkpICE9PSBuYW1lKSB7DQogICAgICAgICAgICBpZiAoaSA9PT0gMCkgew0KICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBubyBpbnRlZ2VyIHByb3BlcnRpZXMsIHRoaXMgaXMgbm90IGEgdHVwbGUNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBmb3IgKDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgaWYgKFN0cmluZygrcHJvcGVydGllc1tpXS5uYW1lKSA9PT0gcHJvcGVydGllc1tpXS5uYW1lKSB7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGlmIHRoZXJlIGFyZSBhbnkgb3RoZXIgbnVtZXJpYyBwcm9wZXJ0aWVzLCB0aGlzIGlzIG5vdCBhIHR1cGxlDQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHRydWU7DQp9DQo="
          },
          "hashes": [
            {
              "value": "3495D76610425CC5CC99E40CE8E218E0",
              "algorithm": "md5"
            },
            {
              "value": "3E526D11CFB44F9E3ECE8ADAAF773F3779F20596",
              "algorithm": "sha-1"
            },
            {
              "value": "A0FA1FA9414F88EC2F77E85317372697A8D5BE9D6B80ABD2B5E5747EBFCF03BB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noUnsafeAnyRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "F56806F228952F0C6858418295AE1026",
              "algorithm": "md5"
            },
            {
              "value": "8F54981C2149E24E618860E7A2CF170F1A7F8C96",
              "algorithm": "sha-1"
            },
            {
              "value": "43C0450BB32ADCF87D1FB448A2CBF555D88710F105907F0CC04544D8E2927FD4",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noUnusedExpressionRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "6A889CAA1295333DAA95F700A058D2B7",
              "algorithm": "md5"
            },
            {
              "value": "065E5684231921D7D8E488F03760CABA300C326F",
              "algorithm": "sha-1"
            },
            {
              "value": "86478D9FAC144F79F67116625F117B8D2380EC6890F9B84B44D47E5FCDC25E16",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noUnusedVariableRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "9C5DEEE60B2DA2FADFE363BDDE82DD8C",
              "algorithm": "md5"
            },
            {
              "value": "2ADFB495A490F60ED87ECD9C05E9A4CF15303091",
              "algorithm": "sha-1"
            },
            {
              "value": "BEBCDAC9D76079384CD121FE7E7051AF01F5D73923A53EE14D8FE6AEFDF6DB43",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noVarKeywordRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTUgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaGFzTW9kaWZpZXIsIGlzQmxvY2tTY29wZWRWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCwgaXNOb2RlRmxhZ1NldCwgaXNWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCwgaXNWYXJpYWJsZVN0YXRlbWVudCB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tdmFyLWtleXdvcmQiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyB1c2FnZSBvZiB0aGUgYHZhcmAga2V5d29yZC4iLA0KICAgICAgICBkZXNjcmlwdGlvbkRldGFpbHM6ICJVc2UgYGxldGAgb3IgYGNvbnN0YCBpbnN0ZWFkLiIsDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgRGVjbGFyaW5nIHZhcmlhYmxlcyB1c2luZyBcYHZhclxgIGhhcyBzZXZlcmFsIGVkZ2UgY2FzZSBiZWhhdmlvcnMgdGhhdCBtYWtlIFxgdmFyXGAgdW5zdWl0YWJsZSBmb3IgbW9kZXJuIGNvZGUuDQogICAgICAgICAgICBWYXJpYWJsZXMgZGVjbGFyZWQgYnkgXGB2YXJcYCBoYXZlIHRoZWlyIHBhcmVudCBmdW5jdGlvbiBibG9jayBhcyB0aGVpciBzY29wZSwgaWdub3Jpbmcgb3RoZXIgY29udHJvbCBmbG93IHN0YXRlbWVudHMuDQogICAgICAgICAgICBcYHZhclxgcyBoYXZlIGRlY2xhcmF0aW9uICJob2lzdGluZyIgKHNpbWlsYXIgdG8gXGBmdW5jdGlvblxgcykgYW5kIGNhbiBhcHBlYXIgdG8gYmUgdXNlZCBiZWZvcmUgZGVjbGFyYXRpb24uDQoNCiAgICAgICAgICAgIFZhcmlhYmxlcyBkZWNsYXJlZCBieSBcYGNvbnN0XGAgYW5kIFxgbGV0XGAgaW5zdGVhZCBoYXZlIGFzIHRoZWlyIHNjb3BlIHRoZSBibG9jayBpbiB3aGljaCB0aGV5IGFyZSBkZWZpbmVkLA0KICAgICAgICAgICAgYW5kIGFyZSBub3QgYWxsb3dlZCB0byB1c2VkIGJlZm9yZSBkZWNsYXJhdGlvbiBvciBiZSByZS1kZWNsYXJlZCB3aXRoIGFub3RoZXIgXGBjb25zdFxgIG9yIFxgbGV0XGAuDQogICAgICAgIGAsDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiRm9yYmlkZGVuICd2YXInIGtleXdvcmQsIHVzZSAnbGV0JyBvciAnY29uc3QnIGluc3RlYWQiOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KTogdm9pZCB7DQogICAgY29uc3QgeyBzb3VyY2VGaWxlIH0gPSBjdHg7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChzb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50ITsNCiAgICAgICAgaWYgKGlzVmFyaWFibGVEZWNsYXJhdGlvbkxpc3Qobm9kZSkNCiAgICAgICAgICAgICAgICAmJiAhaXNCbG9ja1Njb3BlZFZhcmlhYmxlRGVjbGFyYXRpb25MaXN0KG5vZGUpDQogICAgICAgICAgICAgICAgLy8gSWYgIWlzVmFyaWFibGVTdGF0ZW1lbnQsIHRoaXMgaXMgaW5zaWRlIG9mIGEgZm9yIGxvb3AuDQogICAgICAgICAgICAgICAgJiYgKCFpc1ZhcmlhYmxlU3RhdGVtZW50KHBhcmVudCkgfHwgIWlzR2xvYmFsVmFyRGVjbGFyYXRpb24ocGFyZW50KSkpIHsNCiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbm9kZS5nZXRTdGFydChzb3VyY2VGaWxlKTsNCiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gInZhciIubGVuZ3RoOw0KICAgICAgICAgICAgLy8gRG9uJ3QgYXBwbHkgZml4IGluIGEgZGVjbGFyYXRpb24gZmlsZSwgYmVjYXVzZSBtYXkgaGF2ZSBtZWFudCAnY29uc3QnLg0KICAgICAgICAgICAgY29uc3QgZml4ID0gc291cmNlRmlsZS5pc0RlY2xhcmF0aW9uRmlsZSA/IHVuZGVmaW5lZCA6IG5ldyBMaW50LlJlcGxhY2VtZW50KHN0YXJ0LCB3aWR0aCwgImxldCIpOw0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdChzdGFydCwgd2lkdGgsIFJ1bGUuRkFJTFVSRV9TVFJJTkcsIGZpeCk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg0KLy8gQWxsb3cgYGRlY2xhcmUgdmFyIHg6IG51bWJlcjtgIG9yIGBkZWNsYXJlIGdsb2JhbCB7IHZhciB4OiBudW1iZXI7IH1gDQpmdW5jdGlvbiBpc0dsb2JhbFZhckRlY2xhcmF0aW9uKG5vZGU6IHRzLlZhcmlhYmxlU3RhdGVtZW50KTogYm9vbGVhbiB7DQogICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnQhOw0KICAgIHJldHVybiBoYXNNb2RpZmllcihub2RlLm1vZGlmaWVycywgdHMuU3ludGF4S2luZC5EZWNsYXJlS2V5d29yZCkNCiAgICAgICAgfHwgcGFyZW50LmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTW9kdWxlQmxvY2sgJiYgaXNOb2RlRmxhZ1NldChwYXJlbnQucGFyZW50ISwgdHMuTm9kZUZsYWdzLkdsb2JhbEF1Z21lbnRhdGlvbik7DQp9DQo="
          },
          "hashes": [
            {
              "value": "8A2A167D98B4F0EEDD55F1450C72BF4C",
              "algorithm": "md5"
            },
            {
              "value": "27431EDEE32445DDC592E9D28AAF40071B22F906",
              "algorithm": "sha-1"
            },
            {
              "value": "35672EAD921BCD0A601900E079F629FBE3A63DD107FB72E6516050D4CC2B5B72",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noVarRequiresRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTQgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAibm8tdmFyLXJlcXVpcmVzIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJEaXNhbGxvd3MgdGhlIHVzZSBvZiByZXF1aXJlIHN0YXRlbWVudHMgZXhjZXB0IGluIGltcG9ydCBzdGF0ZW1lbnRzLiIsDQogICAgICAgIGRlc2NyaXB0aW9uRGV0YWlsczogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBJbiBvdGhlciB3b3JkcywgdGhlIHVzZSBvZiBmb3JtcyBzdWNoIGFzIFxgdmFyIG1vZHVsZSA9IHJlcXVpcmUoIm1vZHVsZSIpXGAgYXJlIGJhbm5lZC4NCiAgICAgICAgICAgIEluc3RlYWQgdXNlIEVTMjAxNS1zdHlsZSBpbXBvcnRzIG9yIFxgaW1wb3J0IGZvbyA9IHJlcXVpcmUoJ2ZvbycpXGAgaW1wb3J0cy5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBBTUQtc3R5bGUgXGByZXF1aXJlKFtdKVxgIGFuZCBDb21tb25KUy1zdHlsZSBcYHJlcXVpcmUoIiIpXGAgc3RhdGVtZW50cyBhcmUgZW52aXJvbm1lbnQtc3BlY2lmaWMNCiAgICAgICAgICAgIGFuZCBtb3JlIGRpZmZpY3VsdCB0byBzdGF0aWNhbGx5IGFuYWx5emUuDQoNCiAgICAgICAgICAgIEVTMjAxNS1zdHlsZSBcYGltcG9ydFxgcyBhcmUgcGFydCBvZiB0aGUgSmF2YVNjcmlwdCBsYW5ndWFnZSBzcGVjZmljYXRpb24gYW5kIHJlY29tbWVuZGVkIGFzIHRoZSBwYXRoIGdvaW5nIGZvcndhcmQuDQogICAgICAgICAgICBUeXBlU2NyaXB0IHdpbGwgY29tcGlsZSB0aGVtIHRvIGVudmlyb25tZW50LXNwZWNpZmljIGZvcm1zIGFzIG5lZWRlZC4NCiAgICAgICAgYCwNCiAgICAgICAgdHlwZTogInR5cGVzY3JpcHQiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogdHJ1ZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gInJlcXVpcmUgc3RhdGVtZW50IG5vdCBwYXJ0IG9mIGFuIGltcG9ydCBzdGF0ZW1lbnQiOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICBjb25zdCByZXF1aXJlc1dhbGtlciA9IG5ldyBOb1ZhclJlcXVpcmVzV2Fsa2VyKHNvdXJjZUZpbGUsIHRoaXMuZ2V0T3B0aW9ucygpKTsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoV2Fsa2VyKHJlcXVpcmVzV2Fsa2VyKTsNCiAgICB9DQp9DQoNCi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkZXByZWNhdGlvbg0KY2xhc3MgTm9WYXJSZXF1aXJlc1dhbGtlciBleHRlbmRzIExpbnQuU2NvcGVBd2FyZVJ1bGVXYWxrZXI8e30+IHsNCiAgICBwdWJsaWMgY3JlYXRlU2NvcGUoKToge30gew0KICAgICAgICByZXR1cm4ge307DQogICAgfQ0KDQogICAgcHVibGljIHZpc2l0Q2FsbEV4cHJlc3Npb24obm9kZTogdHMuQ2FsbEV4cHJlc3Npb24pIHsNCiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IG5vZGUuZXhwcmVzc2lvbjsNCg0KICAgICAgICBpZiAodGhpcy5nZXRDdXJyZW50RGVwdGgoKSA8PSAxICYmIGV4cHJlc3Npb24ua2luZCA9PT0gdHMuU3ludGF4S2luZC5JZGVudGlmaWVyKSB7DQogICAgICAgICAgICBjb25zdCBpZGVudGlmaWVyTmFtZSA9IChleHByZXNzaW9uIGFzIHRzLklkZW50aWZpZXIpLnRleHQ7DQogICAgICAgICAgICBpZiAoaWRlbnRpZmllck5hbWUgPT09ICJyZXF1aXJlIikgew0KICAgICAgICAgICAgICAgIC8vIGlmIHdlJ3JlIGNhbGxpbmcgKGludm9raW5nKSByZXF1aXJlLCB0aGVuIGl0J3Mgbm90IHBhcnQgb2YgYW4gaW1wb3J0IHN0YXRlbWVudA0KICAgICAgICAgICAgICAgIHRoaXMuYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHN1cGVyLnZpc2l0Q2FsbEV4cHJlc3Npb24obm9kZSk7DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "28C892182EBBD57AEBF25172E2EB44A9",
              "algorithm": "md5"
            },
            {
              "value": "6E2BC69E8066255404970CF8F2D213AF524F656B",
              "algorithm": "sha-1"
            },
            {
              "value": "E76819EF6E46B822495E85A70ED56398738CE290753F8E49ED5A18DB043D20AB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/noVoidExpressionRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNUeXBlRmxhZ1NldCB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KY29uc3QgT1BUSU9OX0lHTk9SRV9BUlJPV19GVU5DVElPTl9TSE9SVEhBTkQgPSAiaWdub3JlLWFycm93LWZ1bmN0aW9uLXNob3J0aGFuZCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5UeXBlZFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJuby12b2lkLWV4cHJlc3Npb24iLA0KICAgICAgICBkZXNjcmlwdGlvbjogIlJlcXVpcmVzIGV4cHJlc3Npb25zIG9mIHR5cGUgYHZvaWRgIHRvIGFwcGVhciBpbiBzdGF0ZW1lbnQgcG9zaXRpb24uIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIElmIFxgJHtPUFRJT05fSUdOT1JFX0FSUk9XX0ZVTkNUSU9OX1NIT1JUSEFORH1cYCBpcyBwcm92aWRlZCwgXGAoKSA9PiByZXR1cm5zVm9pZCgpXGAgd2lsbCBiZSBhbGxvd2VkLg0KICAgICAgICAgICAgT3RoZXJ3aXNlLCBpdCBtdXN0IGJlIHdyaXR0ZW4gYXMgXGAoKSA9PiB7IHJldHVybnNWb2lkKCk7IH1cYC5gLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgaXRlbXM6IHsNCiAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICBlbnVtOiBbT1BUSU9OX0lHTk9SRV9BUlJPV19GVU5DVElPTl9TSE9SVEhBTkRdLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIG1pbkxlbmd0aDogMCwNCiAgICAgICAgICAgIG1heExlbmd0aDogMSwNCiAgICAgICAgfSwNCiAgICAgICAgcmF0aW9uYWxlOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIEl0J3MgbWlzbGVhZGluZyByZXR1cm5pbmcgdGhlIHJlc3VsdHMgb2YgYW4gZXhwcmVzc2lvbiB3aG9zZSB0eXBlIGlzIFxgdm9pZFxgLg0KICAgICAgICAgICAgQXR0ZW1wdGluZyB0byBkbyBzbyBpcyBsaWtlbHkgYSBzeW1wdG9tIG9mIGV4cGVjdGluZyBhIGRpZmZlcmVudCByZXR1cm4gdHlwZSBmcm9tIGEgZnVuY3Rpb24uDQogICAgICAgICAgICBGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyBjb2RlIHdpbGwgbG9nIFxgdW5kZWZpbmVkXGAgYnV0IGxvb2tzIGxpa2UgaXQgbG9ncyBhIHZhbHVlOg0KDQogICAgICAgICAgICBcYFxgXGANCiAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1Xb3JrID0gKCk6IHZvaWQgPT4gew0KICAgICAgICAgICAgICAgIHdvcmtGaXJzdCgpOw0KICAgICAgICAgICAgICAgIHdvcmtTZWNvbmQoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBlcmZvcm1Xb3JrKCkpOw0KICAgICAgICAgICAgXGBcYFxgDQogICAgICAgIGAsDQogICAgICAgIHJlcXVpcmVzVHlwZUluZm86IHRydWUsDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiRXhwcmVzc2lvbiBoYXMgdHlwZSBgdm9pZGAuIFB1dCBpdCBvbiBpdHMgb3duIGxpbmUgYXMgYSBzdGF0ZW1lbnQuIjsNCg0KICAgIHB1YmxpYyBhcHBseVdpdGhQcm9ncmFtKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIHByb2dyYW06IHRzLlByb2dyYW0pOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICBjb25zdCBpZ25vcmVBcnJvd0Z1bmN0aW9uU2hvcnRoYW5kID0gdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX0lHTk9SRV9BUlJPV19GVU5DVElPTl9TSE9SVEhBTkQpICE9PSAtMTsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2FsaywgeyBpZ25vcmVBcnJvd0Z1bmN0aW9uU2hvcnRoYW5kIH0sIHByb2dyYW0uZ2V0VHlwZUNoZWNrZXIoKSk7DQogICAgfQ0KfQ0KDQppbnRlcmZhY2UgT3B0aW9ucyB7DQogICAgaWdub3JlQXJyb3dGdW5jdGlvblNob3J0aGFuZDogYm9vbGVhbjsNCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8T3B0aW9ucz4sIGNoZWNrZXI6IHRzLlR5cGVDaGVja2VyKTogdm9pZCB7DQogICAgY29uc3QgeyBzb3VyY2VGaWxlLCBvcHRpb25zOiB7IGlnbm9yZUFycm93RnVuY3Rpb25TaG9ydGhhbmQgfSB9ID0gY3R4Ow0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZTogdHMuTm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAoaXNQb3NzaWJseVZvaWRFeHByZXNzaW9uKG5vZGUpDQogICAgICAgICAgICAgICAgJiYgIWlzUGFyZW50QWxsb3dlZFZvaWQobm9kZSkNCiAgICAgICAgICAgICAgICAmJiBpc1R5cGVGbGFnU2V0KGNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24obm9kZSksIHRzLlR5cGVGbGFncy5Wb2lkKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQoNCiAgICBmdW5jdGlvbiBpc1BhcmVudEFsbG93ZWRWb2lkKG5vZGU6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICAgICAgc3dpdGNoIChub2RlLnBhcmVudCEua2luZCkgew0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkV4cHJlc3Npb25TdGF0ZW1lbnQ6DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQXJyb3dGdW5jdGlvbjoNCiAgICAgICAgICAgICAgICByZXR1cm4gaWdub3JlQXJyb3dGdW5jdGlvblNob3J0aGFuZDsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBpc1Bvc3NpYmx5Vm9pZEV4cHJlc3Npb24obm9kZTogdHMuTm9kZSk6IGJvb2xlYW4gew0KICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Bd2FpdEV4cHJlc3Npb246DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5DYWxsRXhwcmVzc2lvbjoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "D0480AE89D56F3301FE9ABCC4B329317",
              "algorithm": "md5"
            },
            {
              "value": "D5A4D7FE3008E15D5672E83B7BD6186B896C2794",
              "algorithm": "sha-1"
            },
            {
              "value": "65764137D87118A4E2A0B7851CE536A4BDC22D8AF0AFFD8763A77E67449D5E55",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/numberLiteralFormatRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNOdW1lcmljTGl0ZXJhbCB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KaW1wb3J0IHsgaXNVcHBlckNhc2UgfSBmcm9tICIuLi91dGlscyI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJudW1iZXItbGl0ZXJhbC1mb3JtYXQiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkNoZWNrcyB0aGF0IGRlY2ltYWwgbGl0ZXJhbHMgc2hvdWxkIGJlZ2luIHdpdGggJzAuJyBpbnN0ZWFkIG9mIGp1c3QgJy4nLCBhbmQgc2hvdWxkIG5vdCBlbmQgd2l0aCBhIHRyYWlsaW5nICcwJy4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBIZWxwcyBrZWVwIGEgY29uc2lzdGVudCBzdHlsZSB3aXRoIG51bWVyaWMgbGl0ZXJhbHMuDQogICAgICAgICAgICBOb24tc3RhbmRhcmQgbGl0ZXJhbHMgYXJlIG1vcmUgZGlmZmljdWx0IHRvIHNjYW4gdGhyb3VnaCBhbmQgY2FuIGJlIGEgc3ltcHRvbSBvZiB0eXBvcy4NCiAgICAgICAgYCwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfTEVBRElOR18wID0gIk51bWJlciBsaXRlcmFsIHNob3VsZCBub3QgaGF2ZSBhIGxlYWRpbmcgJzAnLiI7DQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19UUkFJTElOR18wID0gIk51bWJlciBsaXRlcmFsIHNob3VsZCBub3QgaGF2ZSBhIHRyYWlsaW5nICcwJy4iOw0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfVFJBSUxJTkdfREVDSU1BTCA9ICJOdW1iZXIgbGl0ZXJhbCBzaG91bGQgbm90IGVuZCBpbiAnLicuIjsNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HX0xFQURJTkdfREVDSU1BTCA9ICJOdW1iZXIgbGl0ZXJhbCBzaG91bGQgYmVnaW4gd2l0aCAnMC4nIGFuZCBub3QganVzdCAnLicuIjsNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HX05PVF9VUFBFUkNBU0UgPSAiSGV4YWRlY2ltYWwgbnVtYmVyIGxpdGVyYWwgc2hvdWxkIGJlIHVwcGVyY2FzZS4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KTogdm9pZCB7DQogICAgY29uc3QgeyBzb3VyY2VGaWxlIH0gPSBjdHg7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChzb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChpc051bWVyaWNMaXRlcmFsKG5vZGUpKSB7DQogICAgICAgICAgICByZXR1cm4gY2hlY2sobm9kZSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQoNCiAgICBmdW5jdGlvbiBjaGVjayhub2RlOiB0cy5OdW1lcmljTGl0ZXJhbCk6IHZvaWQgew0KICAgICAgICAvLyBBcHBhcmVudGx5IHRoZSBudW1iZXIgbGl0ZXJhbCAnMC4wJyBoYXMgYSAnLnRleHQnIG9mICcwJywgc28gdXNlICcuZ2V0VGV4dCgpJyBpbnN0ZWFkLg0KICAgICAgICBjb25zdCB0ZXh0ID0gbm9kZS5nZXRUZXh0KHNvdXJjZUZpbGUpOw0KDQogICAgICAgIGlmICh0ZXh0Lmxlbmd0aCA8PSAxKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodGV4dC5zdGFydHNXaXRoKCIwIikpIHsNCiAgICAgICAgICAgIC8vIEhleC9vY3RhbC9iaW5hcnkgbnVtYmVyIGNhbid0IGhhdmUgZGVjaW1hbCBwb2ludCBvciBleHBvbmVudCwgc28gbm8gb3RoZXIgZXJyb3JzIHBvc3NpYmxlLg0KICAgICAgICAgICAgc3dpdGNoICh0ZXh0WzFdKSB7DQogICAgICAgICAgICAgICAgY2FzZSAieCI6DQogICAgICAgICAgICAgICAgICAgIGlmICghaXNVcHBlckNhc2UodGV4dC5zbGljZSgyKSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfTk9UX1VQUEVSQ0FTRSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIGNhc2UgIm8iOg0KICAgICAgICAgICAgICAgIGNhc2UgImIiOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgY2FzZSAiLiI6DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfTEVBRElOR18wKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgW251bSwgZXhwXSA9IHRleHQuc3BsaXQoL2UvaSk7DQogICAgICAgIGlmIChleHAgIT09IHVuZGVmaW5lZCAmJiAoZXhwLnN0YXJ0c1dpdGgoIi0wIikgfHwgZXhwLnN0YXJ0c1dpdGgoIjAiKSkpIHsNCiAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXQobm9kZS5nZXRFbmQoKSAtIGV4cC5sZW5ndGgsIGV4cC5sZW5ndGgsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfTEVBRElOR18wKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghbnVtLmluY2x1ZGVzKCIuIikpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChudW0uc3RhcnRzV2l0aCgiLiIpKSB7DQogICAgICAgICAgICBmYWlsKFJ1bGUuRkFJTFVSRV9TVFJJTkdfTEVBRElOR19ERUNJTUFMKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChudW0uZW5kc1dpdGgoIi4iKSkgew0KICAgICAgICAgICAgZmFpbChSdWxlLkZBSUxVUkVfU1RSSU5HX1RSQUlMSU5HX0RFQ0lNQUwpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gQWxsb3cgJzEwJywgYnV0IG5vdCAnMS4wJw0KICAgICAgICBpZiAobnVtLmVuZHNXaXRoKCIwIikpIHsNCiAgICAgICAgICAgIGZhaWwoUnVsZS5GQUlMVVJFX1NUUklOR19UUkFJTElOR18wKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIGZhaWwobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7DQogICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0KG5vZGUuZ2V0U3RhcnQoc291cmNlRmlsZSksIG51bS5sZW5ndGgsIG1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "0D492E761964D6C30BB2B0A1DA189F9D",
              "algorithm": "md5"
            },
            {
              "value": "48F7308205B9DDF178F0A0BCF77DFD5561E50182",
              "algorithm": "sha-1"
            },
            {
              "value": "F006DA29B55313F8DFD5997F199DC50B726EDFAA94F5C4486FE50DBD4A631791",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/objectLiteralKeyQuotesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "F4D062D8241F1D935DF29653A22FE18D",
              "algorithm": "md5"
            },
            {
              "value": "98500448CB532F45692AE4D2E62C33B4972DEA80",
              "algorithm": "sha-1"
            },
            {
              "value": "4B23293496E53C3E5063A62E555D85E6BC48CCC6AE4ACF279F74ECFF80939F38",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/objectLiteralShorthandRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsNCiAgICBnZXRDaGlsZE9mS2luZCwNCiAgICBoYXNNb2RpZmllciwNCiAgICBpc0Z1bmN0aW9uRXhwcmVzc2lvbiwNCiAgICBpc0lkZW50aWZpZXIsDQogICAgaXNNZXRob2REZWNsYXJhdGlvbiwNCiAgICBpc1Byb3BlcnR5QXNzaWdubWVudCwNCiAgICBpc1Nob3J0aGFuZFByb3BlcnR5QXNzaWdubWVudCwNCn0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4iOw0KDQpjb25zdCBPUFRJT05fTkVWRVIgPSAibmV2ZXIiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAib2JqZWN0LWxpdGVyYWwtc2hvcnRoYW5kIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJFbmZvcmNlcy9kaXNhbGxvd3MgdXNlIG9mIEVTNiBvYmplY3QgbGl0ZXJhbCBzaG9ydGhhbmQuIiwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICBJZiB0aGUgXCduZXZlclwnIG9wdGlvbiBpcyBwcm92aWRlZCwgYW55IHNob3J0aGFuZCBvYmplY3QgbGl0ZXJhbCBzeW50YXggd2lsbCBjYXVzZSBhIGZhaWx1cmUuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICBlbnVtOiBbT1BUSU9OX05FVkVSXSwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlLCBbdHJ1ZSwgT1BUSU9OX05FVkVSXV0sDQogICAgICAgIHR5cGU6ICJzdHlsZSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIExPTkdIQU5EX1BST1BFUlRZID0gIkV4cGVjdGVkIHByb3BlcnR5IHNob3J0aGFuZCBpbiBvYmplY3QgbGl0ZXJhbCAiOw0KICAgIHB1YmxpYyBzdGF0aWMgTE9OR0hBTkRfTUVUSE9EID0gIkV4cGVjdGVkIG1ldGhvZCBzaG9ydGhhbmQgaW4gb2JqZWN0IGxpdGVyYWwgIjsNCiAgICBwdWJsaWMgc3RhdGljIFNIT1JUSEFORF9BU1NJR05NRU5UID0gIlNob3J0aGFuZCBwcm9wZXJ0eSBhc3NpZ25tZW50cyBoYXZlIGJlZW4gZGlzYWxsb3dlZC4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbigNCiAgICAgICAgICAgIHNvdXJjZUZpbGUsDQogICAgICAgICAgICB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihPUFRJT05fTkVWRVIpID09PSAtMQ0KICAgICAgICAgICAgICAgID8gZW5mb3JjZVNob3J0aGFuZFdhbGtlcg0KICAgICAgICAgICAgICAgIDogZGlzYWxsb3dTaG9ydGhhbmRXYWxrZXIsDQogICAgICAgICk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBkaXNhbGxvd1Nob3J0aGFuZFdhbGtlcihjdHg6IExpbnQuV2Fsa0NvbnRleHQ8dm9pZD4pIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlKTogdm9pZCB7DQogICAgICAgIGlmIChpc1Nob3J0aGFuZFByb3BlcnR5QXNzaWdubWVudChub2RlKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUoDQogICAgICAgICAgICAgICAgbm9kZS5uYW1lLA0KICAgICAgICAgICAgICAgIFJ1bGUuU0hPUlRIQU5EX0FTU0lHTk1FTlQsDQogICAgICAgICAgICAgICAgTGludC5SZXBsYWNlbWVudC5hcHBlbmRUZXh0KG5vZGUuZ2V0U3RhcnQoY3R4LnNvdXJjZUZpbGUpLCBgJHtub2RlLm5hbWUudGV4dH06IGApLA0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSBlbHNlIGlmIChpc01ldGhvZERlY2xhcmF0aW9uKG5vZGUpICYmIG5vZGUucGFyZW50IS5raW5kID09PSB0cy5TeW50YXhLaW5kLk9iamVjdExpdGVyYWxFeHByZXNzaW9uKSB7DQogICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZSgNCiAgICAgICAgICAgICAgICBub2RlLm5hbWUsDQogICAgICAgICAgICAgICAgUnVsZS5TSE9SVEhBTkRfQVNTSUdOTUVOVCwNCiAgICAgICAgICAgICAgICBmaXhTaG9ydGhhbmRNZXRob2REZWNsYXJhdGlvbihub2RlLCBjdHguc291cmNlRmlsZSksDQogICAgICAgICAgICApOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0KDQpmdW5jdGlvbiBlbmZvcmNlU2hvcnRoYW5kV2Fsa2VyKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPikgew0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzUHJvcGVydHlBc3NpZ25tZW50KG5vZGUpKSB7DQogICAgICAgICAgICBpZiAobm9kZS5uYW1lLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSWRlbnRpZmllciAmJg0KICAgICAgICAgICAgICAgIGlzSWRlbnRpZmllcihub2RlLmluaXRpYWxpemVyKSAmJg0KICAgICAgICAgICAgICAgIG5vZGUubmFtZS50ZXh0ID09PSBub2RlLmluaXRpYWxpemVyLnRleHQpIHsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZSgNCiAgICAgICAgICAgICAgICAgICAgbm9kZSwNCiAgICAgICAgICAgICAgICAgICAgYCR7UnVsZS5MT05HSEFORF9QUk9QRVJUWX0oJ3ske25vZGUubmFtZS50ZXh0fX0nKS5gLA0KICAgICAgICAgICAgICAgICAgICBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZUZyb21Ubyhub2RlLm5hbWUuZW5kLCBub2RlLmVuZCksDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbkV4cHJlc3Npb24obm9kZS5pbml0aWFsaXplcikgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxsb3cgbmFtZWQgZnVuY3Rpb24gZXhwcmVzc2lvbnMNCiAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5pbml0aWFsaXplci5uYW1lID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICBjb25zdCBbbmFtZSwgZml4XSA9IGhhbmRsZUxvbmdoYW5kTWV0aG9kKG5vZGUubmFtZSwgbm9kZS5pbml0aWFsaXplciwgY3R4LnNvdXJjZUZpbGUpOw0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlKA0KICAgICAgICAgICAgICAgICAgICBub2RlLmdldFN0YXJ0KGN0eC5zb3VyY2VGaWxlKSwNCiAgICAgICAgICAgICAgICAgICAgZ2V0Q2hpbGRPZktpbmQobm9kZS5pbml0aWFsaXplciwgdHMuU3ludGF4S2luZC5PcGVuUGFyZW5Ub2tlbiwgY3R4LnNvdXJjZUZpbGUpIS5wb3MsDQogICAgICAgICAgICAgICAgICAgIGAke1J1bGUuTE9OR0hBTkRfTUVUSE9EfSgneyR7bmFtZX0oKSB7Li4ufX0nKS5gLA0KICAgICAgICAgICAgICAgICAgICBmaXgsDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg0KZnVuY3Rpb24gZml4U2hvcnRoYW5kTWV0aG9kRGVjbGFyYXRpb24obm9kZTogdHMuTWV0aG9kRGVjbGFyYXRpb24sIHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpIHsNCiAgICBjb25zdCBpc0dlbmVyYXRvciA9IG5vZGUuYXN0ZXJpc2tUb2tlbiAhPT0gdW5kZWZpbmVkOw0KICAgIGNvbnN0IGlzQXN5bmMgPSBoYXNNb2RpZmllcihub2RlLm1vZGlmaWVycywgdHMuU3ludGF4S2luZC5Bc3luY0tleXdvcmQpOw0KDQogICAgcmV0dXJuIExpbnQuUmVwbGFjZW1lbnQucmVwbGFjZUZyb21UbygNCiAgICAgICAgbm9kZS5nZXRTdGFydChzb3VyY2VGaWxlKSwNCiAgICAgICAgbm9kZS5uYW1lLmVuZCwNCiAgICAgICAgYCR7bm9kZS5uYW1lLmdldFRleHQoc291cmNlRmlsZSl9OiR7aXNBc3luYyA/ICIgYXN5bmMiIDogIiJ9IGZ1bmN0aW9uJHtpc0dlbmVyYXRvciA/ICIqIiA6ICIifWAsDQogICAgKTsNCn0NCg0KZnVuY3Rpb24gaGFuZGxlTG9uZ2hhbmRNZXRob2QobmFtZTogdHMuUHJvcGVydHlOYW1lLCBpbml0aWFsaXplcjogdHMuRnVuY3Rpb25FeHByZXNzaW9uLCBzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogW3N0cmluZywgTGludC5GaXhdIHsNCiAgICBjb25zdCBuYW1lU3RhcnQgPSBuYW1lLmdldFN0YXJ0KHNvdXJjZUZpbGUpOw0KICAgIGxldCBmaXg6IExpbnQuRml4ID0gTGludC5SZXBsYWNlbWVudC5kZWxldGVGcm9tVG8obmFtZS5lbmQsIGdldENoaWxkT2ZLaW5kKGluaXRpYWxpemVyLCB0cy5TeW50YXhLaW5kLk9wZW5QYXJlblRva2VuKSEucG9zKTsNCiAgICBsZXQgcHJlZml4ID0gIiI7DQogICAgaWYgKGluaXRpYWxpemVyLmFzdGVyaXNrVG9rZW4gIT09IHVuZGVmaW5lZCkgew0KICAgICAgICBwcmVmaXggPSAiKiI7DQogICAgfQ0KICAgIGlmIChoYXNNb2RpZmllcihpbml0aWFsaXplci5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuQXN5bmNLZXl3b3JkKSkgew0KICAgICAgICBwcmVmaXggPSBgYXN5bmMgJHtwcmVmaXh9YDsNCiAgICB9DQogICAgaWYgKHByZWZpeCAhPT0gIiIpIHsNCiAgICAgICAgZml4ID0gW2ZpeCwgTGludC5SZXBsYWNlbWVudC5hcHBlbmRUZXh0KG5hbWVTdGFydCwgcHJlZml4KV07DQogICAgfQ0KICAgIHJldHVybiBbcHJlZml4ICsgc291cmNlRmlsZS50ZXh0LnN1YnN0cmluZyhuYW1lU3RhcnQsIG5hbWUuZW5kKSwgZml4XTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "F7B874DFA3D958ADDD70AE090607BB9A",
              "algorithm": "md5"
            },
            {
              "value": "3C8ECA25D1DC42BD330F439C9BF600C3B756CCED",
              "algorithm": "sha-1"
            },
            {
              "value": "334A3788DCFDCD59AE896523CB0410A10A0833BA6D3E7C75F8AE69C3BB6CEA01",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/objectLiteralSortKeysRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "F17699005C9780674A519E8E46199167",
              "algorithm": "md5"
            },
            {
              "value": "489105B60EAFAC8C36FD6C3164D42EA701D492D6",
              "algorithm": "sha-1"
            },
            {
              "value": "D40B3DF29CE54586A9A7947F55668279C23F4393E6F784FE3A40E0A437BDB977",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/oneLineRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "DC932DC15F49C2142CCDD1B63190211B",
              "algorithm": "md5"
            },
            {
              "value": "65C654CE061A77C32B72C135D0C0D337E407900F",
              "algorithm": "sha-1"
            },
            {
              "value": "79822F51633AA287E2E4B6A4B446ED18727567843A5A221859910F8A7D87525F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/oneVariablePerDeclarationRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNGb3JTdGF0ZW1lbnQsIGlzVmFyaWFibGVTdGF0ZW1lbnQgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCmltcG9ydCB7IGNvZGVFeGFtcGxlcyB9IGZyb20gIi4vY29kZS1leGFtcGxlcy9vbmVWYXJpYWJsZVBlckRlY2xhcmF0aW9uLmV4YW1wbGVzIjsNCg0KY29uc3QgT1BUSU9OX0lHTk9SRV9GT1JfTE9PUCA9ICJpZ25vcmUtZm9yLWxvb3AiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAib25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvbiIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRGlzYWxsb3dzIG11bHRpcGxlIHZhcmlhYmxlIGRlZmluaXRpb25zIGluIHRoZSBzYW1lIGRlY2xhcmF0aW9uIHN0YXRlbWVudC4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgT25lIGFyZ3VtZW50IG1heSBiZSBvcHRpb25hbGx5IHByb3ZpZGVkOg0KDQogICAgICAgICAgICAqIFxgJHtPUFRJT05fSUdOT1JFX0ZPUl9MT09QfVxgIGFsbG93cyBtdWx0aXBsZSB2YXJpYWJsZSBkZWZpbml0aW9ucyBpbiBhIGZvciBsb29wIGRlY2xhcmF0aW9uLmAsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJhcnJheSIsDQogICAgICAgICAgICBpdGVtczogew0KICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgICAgIGVudW06IFtPUFRJT05fSUdOT1JFX0ZPUl9MT09QXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBtaW5MZW5ndGg6IDAsDQogICAgICAgICAgICBtYXhMZW5ndGg6IDEsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZSwgW3RydWUsIE9QVElPTl9JR05PUkVfRk9SX0xPT1BdXSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgICAgICBjb2RlRXhhbXBsZXMsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJNdWx0aXBsZSB2YXJpYWJsZSBkZWNsYXJhdGlvbnMgaW4gdGhlIHNhbWUgc3RhdGVtZW50IGFyZSBmb3JiaWRkZW4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB7IGlnbm9yZUZvckxvb3A6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9JR05PUkVfRk9SX0xPT1ApICE9PSAtMSB9KTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHsgaWdub3JlRm9yTG9vcDogYm9vbGVhbiB9Pik6IHZvaWQgew0KICAgIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZSkgew0KICAgICAgICBpZiAoaXNWYXJpYWJsZVN0YXRlbWVudChub2RlKSAmJiBub2RlLmRlY2xhcmF0aW9uTGlzdC5kZWNsYXJhdGlvbnMubGVuZ3RoID4gMSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgIH0gZWxzZSBpZiAoaXNGb3JTdGF0ZW1lbnQobm9kZSkgJiYgIWN0eC5vcHRpb25zLmlnbm9yZUZvckxvb3ApIHsNCiAgICAgICAgICAgIGNvbnN0IHsgaW5pdGlhbGl6ZXIgfSA9IG5vZGU7DQogICAgICAgICAgICBpZiAoaW5pdGlhbGl6ZXIgIT09IHVuZGVmaW5lZA0KICAgICAgICAgICAgICAgICAgICAmJiBpbml0aWFsaXplci5raW5kID09PSB0cy5TeW50YXhLaW5kLlZhcmlhYmxlRGVjbGFyYXRpb25MaXN0DQogICAgICAgICAgICAgICAgICAgICYmIChpbml0aWFsaXplciBhcyB0cy5WYXJpYWJsZURlY2xhcmF0aW9uTGlzdCkuZGVjbGFyYXRpb25zLmxlbmd0aCA+IDEpIHsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShpbml0aWFsaXplciwgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "B8FA81E018A0803246848AB8FA42B773",
              "algorithm": "md5"
            },
            {
              "value": "B881AF35E53DAD402596A23E974396F9B81CEFFF",
              "algorithm": "sha-1"
            },
            {
              "value": "5003A094E4A342978988C0ACAD2439ACDD052154B729FEFFDF22E0BE5AA1108D",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/onlyArrowFunctionsRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQppbXBvcnQgeyBjb2RlRXhhbXBsZXMgfSBmcm9tICIuL2NvZGUtZXhhbXBsZXMvb25seUFycm93RnVuY3Rpb25zLmV4YW1wbGVzIjsNCg0KY29uc3QgT1BUSU9OX0FMTE9XX0RFQ0xBUkFUSU9OUyA9ICJhbGxvdy1kZWNsYXJhdGlvbnMiOw0KY29uc3QgT1BUSU9OX0FMTE9XX05BTUVEX0ZVTkNUSU9OUyA9ICJhbGxvdy1uYW1lZC1mdW5jdGlvbnMiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAib25seS1hcnJvdy1mdW5jdGlvbnMiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIkRpc2FsbG93cyB0cmFkaXRpb25hbCAobm9uLWFycm93KSBmdW5jdGlvbiBleHByZXNzaW9ucy4iLA0KICAgICAgICByYXRpb25hbGU6ICJUcmFkaXRpb25hbCBmdW5jdGlvbnMgZG9uJ3QgYmluZCBsZXhpY2FsIHNjb3BlLCB3aGljaCBjYW4gbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIHdoZW4gYWNjZXNzaW5nICd0aGlzJy4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgVHdvIGFyZ3VtZW50cyBtYXkgYmUgb3B0aW9uYWxseSBwcm92aWRlZDoNCg0KICAgICAgICAgICAgKiBcYCIke09QVElPTl9BTExPV19ERUNMQVJBVElPTlN9IlxgIGFsbG93cyBzdGFuZGFsb25lIGZ1bmN0aW9uIGRlY2xhcmF0aW9ucy4NCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fQUxMT1dfTkFNRURfRlVOQ1RJT05TfSJcYCBhbGxvd3MgdGhlIGV4cHJlc3Npb24gXGBmdW5jdGlvbiBmb28oKSB7fVxgIGJ1dCBub3QgXGBmdW5jdGlvbigpIHt9XGAuDQogICAgICAgIGAsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJhcnJheSIsDQogICAgICAgICAgICBpdGVtczogew0KICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgICAgIGVudW06IFtPUFRJT05fQUxMT1dfREVDTEFSQVRJT05TLCBPUFRJT05fQUxMT1dfTkFNRURfRlVOQ1RJT05TXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBtaW5MZW5ndGg6IDAsDQogICAgICAgICAgICBtYXhMZW5ndGg6IDEsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZSwgW3RydWUsIE9QVElPTl9BTExPV19ERUNMQVJBVElPTlMsIE9QVElPTl9BTExPV19OQU1FRF9GVU5DVElPTlNdXSwNCiAgICAgICAgdHlwZTogInR5cGVzY3JpcHQiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgICAgIGNvZGVFeGFtcGxlcywNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIm5vbi1hcnJvdyBmdW5jdGlvbnMgYXJlIGZvcmJpZGRlbiI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHBhcnNlT3B0aW9ucyh0aGlzLnJ1bGVBcmd1bWVudHMpKTsNCiAgICB9DQp9DQoNCmludGVyZmFjZSBPcHRpb25zIHsNCiAgICBhbGxvd0RlY2xhcmF0aW9uczogYm9vbGVhbjsNCiAgICBhbGxvd05hbWVkRnVuY3Rpb25zOiBib29sZWFuOw0KfQ0KZnVuY3Rpb24gcGFyc2VPcHRpb25zKHJ1bGVBcmd1bWVudHM6IHN0cmluZ1tdKTogT3B0aW9ucyB7DQogICAgcmV0dXJuIHsNCiAgICAgICAgYWxsb3dEZWNsYXJhdGlvbnM6IGhhc09wdGlvbihPUFRJT05fQUxMT1dfREVDTEFSQVRJT05TKSwNCiAgICAgICAgYWxsb3dOYW1lZEZ1bmN0aW9uczogaGFzT3B0aW9uKE9QVElPTl9BTExPV19OQU1FRF9GVU5DVElPTlMpLA0KICAgIH07DQoNCiAgICBmdW5jdGlvbiBoYXNPcHRpb24obmFtZTogc3RyaW5nKTogYm9vbGVhbiB7DQogICAgICAgIHJldHVybiBydWxlQXJndW1lbnRzLmluZGV4T2YobmFtZSkgIT09IC0xOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8T3B0aW9ucz4pOiB2b2lkIHsNCiAgICBjb25zdCB7IHNvdXJjZUZpbGUsIG9wdGlvbnM6IHsgYWxsb3dEZWNsYXJhdGlvbnMsIGFsbG93TmFtZWRGdW5jdGlvbnMgfSB9ID0gY3R4Ow0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZSk6IHZvaWQgew0KICAgICAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRGVjbGFyYXRpb246DQogICAgICAgICAgICAgICAgaWYgKGFsbG93RGVjbGFyYXRpb25zKSB7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoDQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRnVuY3Rpb25FeHByZXNzaW9uOiB7DQogICAgICAgICAgICAgICAgY29uc3QgZiA9IG5vZGUgYXMgdHMuRnVuY3Rpb25MaWtlRGVjbGFyYXRpb247DQogICAgICAgICAgICAgICAgaWYgKCEoYWxsb3dOYW1lZEZ1bmN0aW9ucyAmJiBmLm5hbWUgIT09IHVuZGVmaW5lZCkgJiYgIWZ1bmN0aW9uSXNFeGVtcHQoZikpIHsNCiAgICAgICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUodXRpbHMuZ2V0Q2hpbGRPZktpbmQobm9kZSwgdHMuU3ludGF4S2luZC5GdW5jdGlvbktleXdvcmQsIGN0eC5zb3VyY2VGaWxlKSEsIFJ1bGUuRkFJTFVSRV9TVFJJTkcpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg0KLyoqIEdlbmVyYXRvciBmdW5jdGlvbnMgYW5kIGZ1bmN0aW9ucyB1c2luZyBgdGhpc2AgYXJlIGFsbG93ZWQuICovDQpmdW5jdGlvbiBmdW5jdGlvbklzRXhlbXB0KG5vZGU6IHRzLkZ1bmN0aW9uTGlrZURlY2xhcmF0aW9uKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIG5vZGUuYXN0ZXJpc2tUb2tlbiAhPT0gdW5kZWZpbmVkIHx8DQogICAgICAgIG5vZGUucGFyYW1ldGVycy5sZW5ndGggIT09IDAgJiYgdXRpbHMuaXNUaGlzUGFyYW1ldGVyKG5vZGUucGFyYW1ldGVyc1swXSkgfHwNCiAgICAgICAgbm9kZS5ib2R5ICE9PSB1bmRlZmluZWQgJiYgdHMuZm9yRWFjaENoaWxkKG5vZGUsIHVzZXNUaGlzKSA9PT0gdHJ1ZTsNCn0NCg0KZnVuY3Rpb24gdXNlc1RoaXMobm9kZTogdHMuTm9kZSk6IGJvb2xlYW4gfCB1bmRlZmluZWQgew0KICAgIHJldHVybiBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuVGhpc0tleXdvcmQgfHwgIXV0aWxzLmhhc093blRoaXNSZWZlcmVuY2Uobm9kZSkgJiYgdHMuZm9yRWFjaENoaWxkKG5vZGUsIHVzZXNUaGlzKTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "6A474171EEDDAF8FFF0A8AE2560F4B70",
              "algorithm": "md5"
            },
            {
              "value": "567EFA803CC7C4132A1385D59E60016F96148A84",
              "algorithm": "sha-1"
            },
            {
              "value": "1AA3EC62020ED0D9A55E73DBAECEB6E65B994B7CFFEF0CCE4386CA143FC14628",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/orderedImportsRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "6C4485154A5DA3E9271B4D946D3A8803",
              "algorithm": "md5"
            },
            {
              "value": "7A5DFBDF9D810F91C3F6845DCC671995F51CCAC1",
              "algorithm": "sha-1"
            },
            {
              "value": "2FB6BBCDAEFD0E6BD66084232C0DEF20F1E4419013C62646B4C54398302557D2",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferConditionalExpressionRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCaW5hcnlFeHByZXNzaW9uLCBpc0Jsb2NrLCBpc0V4cHJlc3Npb25TdGF0ZW1lbnQsIGlzSWZTdGF0ZW1lbnQsIGlzU2FtZUxpbmUgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KY29uc3QgT1BUSU9OX0NIRUNLX0VMU0VfSUYgPSAiY2hlY2stZWxzZS1pZiI7DQoNCmludGVyZmFjZSBPcHRpb25zIHsNCiAgICBjaGVja0Vsc2VJZjogYm9vbGVhbjsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogInByZWZlci1jb25kaXRpb25hbC1leHByZXNzaW9uIiwNCiAgICAgICAgZGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgUmVjb21tZW5kcyB0byB1c2UgYSBjb25kaXRpb25hbCBleHByZXNzaW9uIGluc3RlYWQgb2YgYXNzaWduaW5nIHRvIHRoZSBzYW1lIHRoaW5nIGluIGVhY2ggYnJhbmNoIG9mIGFuIGlmIHN0YXRlbWVudC5gLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgVGhpcyByZWR1Y2VzIGR1cGxpY2F0aW9uIGFuZCBjYW4gZWxpbWluYXRlIGFuIHVubmVjZXNzYXJ5IHZhcmlhYmxlIGRlY2xhcmF0aW9uLmAsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogYElmIFxgJHtPUFRJT05fQ0hFQ0tfRUxTRV9JRn1cYCBpcyBzcGVjaWZpZWQsIHRoZSBydWxlIGFsc28gY2hlY2tzIG5lc3RlZCBpZi1lbHNlLWlmIHN0YXRlbWVudHMuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICBlbnVtOiBbT1BUSU9OX0NIRUNLX0VMU0VfSUZdLA0KICAgICAgICB9LA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWUsIFt0cnVlLCBPUFRJT05fQ0hFQ0tfRUxTRV9JRl1dLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HKGFzc2lnbmVkOiBzdHJpbmcpOiBzdHJpbmcgew0KICAgICAgICByZXR1cm4gYFVzZSBhIGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gaW5zdGVhZCBvZiBhc3NpZ25pbmcgdG8gJyR7YXNzaWduZWR9JyBpbiBtdWx0aXBsZSBwbGFjZXMuYDsNCiAgICB9DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHsNCiAgICAgICAgICAgIGNoZWNrRWxzZUlmOiB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihPUFRJT05fQ0hFQ0tfRUxTRV9JRikgIT09IC0xLA0KICAgICAgICB9KTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PE9wdGlvbnM+KTogdm9pZCB7DQogICAgY29uc3QgeyBzb3VyY2VGaWxlLCBvcHRpb25zOiB7IGNoZWNrRWxzZUlmIH0gfSA9IGN0eDsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzSWZTdGF0ZW1lbnQobm9kZSkpIHsNCiAgICAgICAgICAgIGNvbnN0IGFzc2lnbmVkID0gZGV0ZWN0QXNzaWdubWVudChub2RlLCBzb3VyY2VGaWxlLCBjaGVja0Vsc2VJZik7DQogICAgICAgICAgICBpZiAoYXNzaWduZWQgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKA0KICAgICAgICAgICAgICAgICAgICBub2RlLmdldENoaWxkQXQoMCwgc291cmNlRmlsZSksDQogICAgICAgICAgICAgICAgICAgIFJ1bGUuRkFJTFVSRV9TVFJJTkcoYXNzaWduZWQuZ2V0VGV4dChzb3VyY2VGaWxlKSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGFzc2lnbmVkICE9PSB1bmRlZmluZWQgfHwgIWNoZWNrRWxzZUlmKSB7DQogICAgICAgICAgICAgICAgLy8gQmUgY2FyZWZ1bCBub3QgdG8gZmFpbCBhZ2FpbiBmb3IgdGhlICJlbHNlIGlmIg0KICAgICAgICAgICAgICAgIGRvIHsNCiAgICAgICAgICAgICAgICAgICAgdHMuZm9yRWFjaENoaWxkKG5vZGUuZXhwcmVzc2lvbiwgY2IpOw0KICAgICAgICAgICAgICAgICAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZS50aGVuU3RhdGVtZW50LCBjYik7DQogICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmVsc2VTdGF0ZW1lbnQgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmVsc2VTdGF0ZW1lbnQ7DQogICAgICAgICAgICAgICAgICAgIHdoaWxlIChpc0Jsb2NrKG5vZGUpICYmIG5vZGUuc3RhdGVtZW50cy5sZW5ndGggPT09IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnN0YXRlbWVudHNbMF07DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9IHdoaWxlIChpc0lmU3RhdGVtZW50KG5vZGUpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg0KLyoqDQogKiBAcGFyYW0gaW5FbHNlIGB1bmRlZmluZWRgIHdoZW4gdGhpcyBpcyB0aGUgdG9wIGxldmVsIGlmIHN0YXRlbWVudCwgYGZhbHNlYCB3aGVuIGluc2lkZSB0aGUgdGhlbiBicmFuY2gsIGB0cnVlYCB3aGVuIGluc2lkZSBlbHNlDQogKi8NCmZ1bmN0aW9uIGRldGVjdEFzc2lnbm1lbnQoDQogICAgc3RhdGVtZW50OiB0cy5TdGF0ZW1lbnQsDQogICAgc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwNCiAgICBjaGVja0Vsc2VJZjogYm9vbGVhbiwNCiAgICBpbkVsc2U/OiBib29sZWFuLA0KKTogdHMuRXhwcmVzc2lvbiB8IHVuZGVmaW5lZCB7DQogICAgaWYgKGlzSWZTdGF0ZW1lbnQoc3RhdGVtZW50KSkgew0KICAgICAgICBpZiAoaW5FbHNlID09PSBmYWxzZSB8fCAhY2hlY2tFbHNlSWYgJiYgaW5FbHNlIHx8IHN0YXRlbWVudC5lbHNlU3RhdGVtZW50ID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgdGhlbiA9IGRldGVjdEFzc2lnbm1lbnQoc3RhdGVtZW50LnRoZW5TdGF0ZW1lbnQsIHNvdXJjZUZpbGUsIGNoZWNrRWxzZUlmLCBmYWxzZSk7DQogICAgICAgIGlmICh0aGVuID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgZWx6ZSA9IGRldGVjdEFzc2lnbm1lbnQoc3RhdGVtZW50LmVsc2VTdGF0ZW1lbnQsIHNvdXJjZUZpbGUsIGNoZWNrRWxzZUlmLCB0cnVlKTsNCiAgICAgICAgcmV0dXJuIGVsemUgIT09IHVuZGVmaW5lZCAmJiBub2RlRXF1YWxzKHRoZW4sIGVsemUsIHNvdXJjZUZpbGUpID8gdGhlbiA6IHVuZGVmaW5lZDsNCiAgICB9IGVsc2UgaWYgKGlzQmxvY2soc3RhdGVtZW50KSkgew0KICAgICAgICByZXR1cm4gc3RhdGVtZW50LnN0YXRlbWVudHMubGVuZ3RoID09PSAxDQogICAgICAgICAgICA/IGRldGVjdEFzc2lnbm1lbnQoc3RhdGVtZW50LnN0YXRlbWVudHNbMF0sIHNvdXJjZUZpbGUsIGNoZWNrRWxzZUlmLCBpbkVsc2UpDQogICAgICAgICAgICA6IHVuZGVmaW5lZDsNCiAgICB9IGVsc2UgaWYgKGlzRXhwcmVzc2lvblN0YXRlbWVudChzdGF0ZW1lbnQpICYmIGlzQmluYXJ5RXhwcmVzc2lvbihzdGF0ZW1lbnQuZXhwcmVzc2lvbikpIHsNCiAgICAgICAgY29uc3QgeyBvcGVyYXRvclRva2VuOiB7IGtpbmQgfSwgbGVmdCwgcmlnaHQgfSA9IHN0YXRlbWVudC5leHByZXNzaW9uOw0KICAgICAgICByZXR1cm4ga2luZCA9PT0gdHMuU3ludGF4S2luZC5FcXVhbHNUb2tlbiAmJiBpc1NhbWVMaW5lKHNvdXJjZUZpbGUsIHJpZ2h0LmdldFN0YXJ0KHNvdXJjZUZpbGUpLCByaWdodC5lbmQpID8gbGVmdCA6IHVuZGVmaW5lZDsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gdW5kZWZpbmVkOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gbm9kZUVxdWFscyhhOiB0cy5Ob2RlLCBiOiB0cy5Ob2RlLCBzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIGEuZ2V0VGV4dChzb3VyY2VGaWxlKSA9PT0gYi5nZXRUZXh0KHNvdXJjZUZpbGUpOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "77B6A8487677387D624F6C97A3DE615E",
              "algorithm": "md5"
            },
            {
              "value": "2084509C697D5D21685BC39FC540B41A694EBBB1",
              "algorithm": "sha-1"
            },
            {
              "value": "926A07B1F7269DCBD9C68C4DAE72A94FCDE14EA71867C472F245CD0A54C7D234",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferConstRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "251025B00A1E9FE822ED0CF2F8F69E80",
              "algorithm": "md5"
            },
            {
              "value": "71D90305334358A0FB49BD7B018EED5F3ABAA8F2",
              "algorithm": "sha-1"
            },
            {
              "value": "88135E4DC4F48963211F1C3EABD591B2D205F6CA39D667E37CA3762D3AC97E75",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferForOfRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KaW1wb3J0IHsgdW53cmFwUGFyZW50aGVzZXMgfSBmcm9tICIuLi9sYW5ndWFnZS91dGlscyI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJwcmVmZXItZm9yLW9mIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJSZWNvbW1lbmRzIGEgJ2Zvci1vZicgbG9vcCBvdmVyIGEgc3RhbmRhcmQgJ2ZvcicgbG9vcCBpZiB0aGUgaW5kZXggaXMgb25seSB1c2VkIHRvIGFjY2VzcyB0aGUgYXJyYXkgYmVpbmcgaXRlcmF0ZWQuIiwNCiAgICAgICAgcmF0aW9uYWxlOiAiQSBmb3IoLi4uIG9mIC4uLikgbG9vcCBpcyBlYXNpZXIgdG8gaW1wbGVtZW50IGFuZCByZWFkIHdoZW4gdGhlIGluZGV4IGlzIG5vdCBuZWVkZWQuIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiBudWxsLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWVdLA0KICAgICAgICB0eXBlOiAidHlwZXNjcmlwdCIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIkV4cGVjdGVkIGEgJ2Zvci1vZicgbG9vcCBpbnN0ZWFkIG9mIGEgJ2ZvcicgbG9vcCB3aXRoIHRoaXMgc2ltcGxlIGl0ZXJhdGlvbiI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGspOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8dm9pZD4pOiB2b2lkIHsNCiAgICBjb25zdCB7IHNvdXJjZUZpbGUgfSA9IGN0eDsNCiAgICBsZXQgdmFyaWFibGVzOiBNYXA8dHMuSWRlbnRpZmllciwgdXRpbHMuVmFyaWFibGVJbmZvPiB8IHVuZGVmaW5lZDsNCg0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAodXRpbHMuaXNGb3JTdGF0ZW1lbnQobm9kZSkpIHsNCiAgICAgICAgICAgIHZpc2l0Rm9yU3RhdGVtZW50KG5vZGUpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KDQogICAgZnVuY3Rpb24gdmlzaXRGb3JTdGF0ZW1lbnQobm9kZTogdHMuRm9yU3RhdGVtZW50KTogdm9pZCB7DQogICAgICAgIGNvbnN0IGFycmF5Tm9kZUluZm8gPSBnZXRGb3JMb29wSGVhZGVySW5mbyhub2RlKTsNCiAgICAgICAgaWYgKGFycmF5Tm9kZUluZm8gPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgeyBpbmRleFZhcmlhYmxlLCBhcnJheUV4cHIgfSA9IGFycmF5Tm9kZUluZm87DQoNCiAgICAgICAgaWYgKHZhcmlhYmxlcyA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICB2YXJpYWJsZXMgPSB1dGlscy5jb2xsZWN0VmFyaWFibGVVc2FnZShzb3VyY2VGaWxlKTsNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKGNvbnN0IHtsb2NhdGlvbn0gb2YgdmFyaWFibGVzLmdldChpbmRleFZhcmlhYmxlKSEudXNlcykgew0KICAgICAgICAgICAgaWYgKGxvY2F0aW9uLnBvcyA8IG5vZGUuaW5pdGlhbGl6ZXIhLmVuZCB8fCBsb2NhdGlvbi5wb3MgPj0gbm9kZS5lbmQgfHwgLy8gYmFpbCBvdXQgb24gdXNlIG91dHNpZGUgb2YgZm9yIGxvb3ANCiAgICAgICAgICAgICAgICBsb2NhdGlvbi5wb3MgPj0gbm9kZS5zdGF0ZW1lbnQucG9zICYmIC8vIG9ubHkgY2hlY2sgdXNlcyBpbiBsb29wIGJvZHkNCiAgICAgICAgICAgICAgICBpc05vblNpbXBsZUluY3JlbWVudG9yVXNlKGxvY2F0aW9uLCBhcnJheUV4cHIsIHNvdXJjZUZpbGUpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGN0eC5hZGRGYWlsdXJlKG5vZGUuZ2V0U3RhcnQoc291cmNlRmlsZSksIG5vZGUuc3RhdGVtZW50LnBvcywgUnVsZS5GQUlMVVJFX1NUUklORyk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBpc05vblNpbXBsZUluY3JlbWVudG9yVXNlKG5vZGU6IHRzLklkZW50aWZpZXIsIGFycmF5RXhwcjogdHMuRXhwcmVzc2lvbiwgc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IGJvb2xlYW4gew0KICAgIC8vIGNoZWNrIGlmIGl0ZXJhdG9yIGlzIHVzZWQgZm9yIHNvbWV0aGluZyBvdGhlciB0aGFuIHJlYWRpbmcgZGF0YSBmcm9tIGFycmF5DQogICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnQhOw0KICAgIHJldHVybiAhdXRpbHMuaXNFbGVtZW50QWNjZXNzRXhwcmVzc2lvbihwYXJlbnQpDQogICAgICAgIC8vIGBhW2ldID0gLi4uYCBvciBzaW1pbGFyDQogICAgICAgIHx8IHV0aWxzLmlzUmVhc3NpZ25tZW50VGFyZ2V0KHBhcmVudCkNCiAgICAgICAgLy8gYGJbaV1gDQogICAgICAgIHx8ICFub2RlRXF1YWxzKGFycmF5RXhwciwgdW53cmFwUGFyZW50aGVzZXMocGFyZW50LmV4cHJlc3Npb24pLCBzb3VyY2VGaWxlKTsNCn0NCg0KZnVuY3Rpb24gbm9kZUVxdWFscyhhOiB0cy5Ob2RlLCBiOiB0cy5Ob2RlLCBzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIGEuZ2V0VGV4dChzb3VyY2VGaWxlKSA9PT0gYi5nZXRUZXh0KHNvdXJjZUZpbGUpOw0KfQ0KDQovLyByZXR1cm5zIHRoZSBpdGVyYXRvciBhbmQgYXJyYXkgb2YgYSBgZm9yYCBsb29wIGlmIHRoZSBgZm9yYCBsb29wIGlzIGJhc2ljLg0KZnVuY3Rpb24gZ2V0Rm9yTG9vcEhlYWRlckluZm8oZm9yTG9vcDogdHMuRm9yU3RhdGVtZW50KTogeyBpbmRleFZhcmlhYmxlOiB0cy5JZGVudGlmaWVyOyBhcnJheUV4cHI6IHRzLkV4cHJlc3Npb24gfSB8IHVuZGVmaW5lZCB7DQogICAgY29uc3QgeyBpbml0aWFsaXplciwgY29uZGl0aW9uLCBpbmNyZW1lbnRvciB9ID0gZm9yTG9vcDsNCiAgICBpZiAoaW5pdGlhbGl6ZXIgPT09IHVuZGVmaW5lZCB8fCBjb25kaXRpb24gPT09IHVuZGVmaW5lZCB8fCBpbmNyZW1lbnRvciA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KDQogICAgLy8gTXVzdCBzdGFydCB3aXRoIGB2YXIgaSA9IDA7YCBvciBgbGV0IGkgPSAwO2ANCiAgICBpZiAoIXV0aWxzLmlzVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QoaW5pdGlhbGl6ZXIpIHx8IGluaXRpYWxpemVyLmRlY2xhcmF0aW9ucy5sZW5ndGggIT09IDEpIHsNCiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQogICAgY29uc3QgeyBuYW1lOiBpbmRleFZhcmlhYmxlLCBpbml0aWFsaXplcjogaW5kZXhJbml0IH0gPSBpbml0aWFsaXplci5kZWNsYXJhdGlvbnNbMF07DQogICAgaWYgKGluZGV4VmFyaWFibGUua2luZCAhPT0gdHMuU3ludGF4S2luZC5JZGVudGlmaWVyIHx8IGluZGV4SW5pdCA9PT0gdW5kZWZpbmVkIHx8ICFpc051bWJlcihpbmRleEluaXQsICIwIikpIHsNCiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQoNCiAgICAvLyBNdXN0IGVuZCB3aXRoIGBpKytgDQogICAgaWYgKCFpc0luY3JlbWVudGVkKGluY3JlbWVudG9yLCBpbmRleFZhcmlhYmxlLnRleHQpKSB7DQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KDQogICAgLy8gQ29uZGl0aW9uIG11c3QgYmUgYGkgPCBhcnIubGVuZ3RoO2ANCiAgICBpZiAoIXV0aWxzLmlzQmluYXJ5RXhwcmVzc2lvbihjb25kaXRpb24pKSB7DQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KDQogICAgY29uc3QgeyBsZWZ0LCBvcGVyYXRvclRva2VuLCByaWdodCB9ID0gY29uZGl0aW9uOw0KICAgIGlmICghaXNJZGVudGlmaWVyTmFtZWQobGVmdCwgaW5kZXhWYXJpYWJsZS50ZXh0KSB8fA0KICAgICAgICAgICAgb3BlcmF0b3JUb2tlbi5raW5kICE9PSB0cy5TeW50YXhLaW5kLkxlc3NUaGFuVG9rZW4gfHwNCiAgICAgICAgICAgICF1dGlscy5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihyaWdodCkpIHsNCiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQoNCiAgICBjb25zdCB7IGV4cHJlc3Npb246IGFycmF5RXhwciwgbmFtZSB9ID0gcmlnaHQ7DQogICAgaWYgKG5hbWUudGV4dCAhPT0gImxlbmd0aCIpIHsNCiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQoNCiAgICByZXR1cm4geyBpbmRleFZhcmlhYmxlLCBhcnJheUV4cHIgfTsNCn0NCg0KZnVuY3Rpb24gaXNJbmNyZW1lbnRlZChub2RlOiB0cy5Ob2RlLCBpbmRleFZhcmlhYmxlTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7DQogICAgc3dpdGNoIChub2RlLmtpbmQpIHsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlByZWZpeFVuYXJ5RXhwcmVzc2lvbjoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlBvc3RmaXhVbmFyeUV4cHJlc3Npb246IHsNCiAgICAgICAgICAgIGNvbnN0IHsgb3BlcmF0b3IsIG9wZXJhbmQgfSA9IG5vZGUgYXMgdHMuUHJlZml4VW5hcnlFeHByZXNzaW9uIHwgdHMuUG9zdGZpeFVuYXJ5RXhwcmVzc2lvbjsNCiAgICAgICAgICAgIC8vIGArK3hgIG9yIGB4KytgDQogICAgICAgICAgICByZXR1cm4gb3BlcmF0b3IgPT09IHRzLlN5bnRheEtpbmQuUGx1c1BsdXNUb2tlbiAmJiBpc1ZhcihvcGVyYW5kKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5CaW5hcnlFeHByZXNzaW9uOg0KICAgICAgICAgICAgY29uc3QgeyBvcGVyYXRvclRva2VuLCBsZWZ0OiB1cGRhdGVkVmFyLCByaWdodDogcmhzIH0gPSBub2RlIGFzIHRzLkJpbmFyeUV4cHJlc3Npb247DQogICAgICAgICAgICBpZiAoIWlzVmFyKHVwZGF0ZWRWYXIpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBzd2l0Y2ggKG9wZXJhdG9yVG9rZW4ua2luZCkgew0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5QbHVzRXF1YWxzVG9rZW46DQogICAgICAgICAgICAgICAgICAgIC8vIHggKz0gMQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNPbmUocmhzKTsNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRXF1YWxzVG9rZW46IHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlscy5pc0JpbmFyeUV4cHJlc3Npb24ocmhzKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgb3BlcmF0b3JUb2tlbjogcmhzT3AsIGxlZnQsIHJpZ2h0IH0gPSByaHM7DQogICAgICAgICAgICAgICAgICAgIC8vIGB4ID0gMSArIHhgIG9yIGB4ID0geCArIDFgDQogICAgICAgICAgICAgICAgICAgIHJldHVybiByaHNPcC5raW5kID09PSB0cy5TeW50YXhLaW5kLlBsdXNUb2tlbiAmJiAoaXNWYXIobGVmdCkgJiYgaXNPbmUocmlnaHQpIHx8IGlzT25lKGxlZnQpICYmIGlzVmFyKHJpZ2h0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGlzVmFyKGlkOiB0cy5Ob2RlKTogYm9vbGVhbiB7DQogICAgICAgIHJldHVybiBpc0lkZW50aWZpZXJOYW1lZChpZCwgaW5kZXhWYXJpYWJsZU5hbWUpOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gaXNJZGVudGlmaWVyTmFtZWQobm9kZTogdHMuTm9kZSwgdGV4dDogc3RyaW5nKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIHV0aWxzLmlzSWRlbnRpZmllcihub2RlKSAmJiBub2RlLnRleHQgPT09IHRleHQ7DQp9DQoNCmZ1bmN0aW9uIGlzT25lKG5vZGU6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICByZXR1cm4gaXNOdW1iZXIobm9kZSwgIjEiKTsNCn0NCg0KZnVuY3Rpb24gaXNOdW1iZXIobm9kZTogdHMuTm9kZSwgdmFsdWU6IHN0cmluZyk6IGJvb2xlYW4gew0KICAgIHJldHVybiB1dGlscy5pc051bWVyaWNMaXRlcmFsKG5vZGUpICYmIG5vZGUudGV4dCA9PT0gdmFsdWU7DQp9DQo="
          },
          "hashes": [
            {
              "value": "24C3E9EF4DA616D816F0F176FB3652CF",
              "algorithm": "md5"
            },
            {
              "value": "FF3714C06E441D5CBDF7E12F97B0C0D33E310C39",
              "algorithm": "sha-1"
            },
            {
              "value": "2A86E34A3B04FF2174F9F4872ECAEE1833ECEE0102C17692084F250E0979D5F4",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferFunctionOverMethodRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0UHJvcGVydHlOYW1lLCBoYXNNb2RpZmllciwgaGFzT3duVGhpc1JlZmVyZW5jZSwgaXNNZXRob2REZWNsYXJhdGlvbiB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpjb25zdCBPUFRJT05fQUxMT1dfUFVCTElDID0gImFsbG93LXB1YmxpYyI7DQpjb25zdCBPUFRJT05fQUxMT1dfUFJPVEVDVEVEID0gImFsbG93LXByb3RlY3RlZCI7DQoNCmludGVyZmFjZSBPcHRpb25zIHsNCiAgICBhbGxvd1B1YmxpYzogYm9vbGVhbjsNCiAgICBhbGxvd1Byb3RlY3RlZDogYm9vbGVhbjsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogInByZWZlci1mdW5jdGlvbi1vdmVyLW1ldGhvZCIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiV2FybnMgZm9yIGNsYXNzIG1ldGhvZHMgdGhhdCBkbyBub3QgdXNlICd0aGlzJy4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgIiR7T1BUSU9OX0FMTE9XX1BVQkxJQ30iIGV4Y2x1ZGVzIGNoZWNraW5nIG9mIHB1YmxpYyBtZXRob2RzLg0KICAgICAgICAgICAgIiR7T1BUSU9OX0FMTE9XX1BST1RFQ1RFRH0iIGV4Y2x1ZGVzIGNoZWNraW5nIG9mIHByb3RlY3RlZCBtZXRob2RzLmAsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgZW51bTogW09QVElPTl9BTExPV19QVUJMSUMsIE9QVElPTl9BTExPV19QUk9URUNURURdLA0KICAgICAgICB9LA0KICAgICAgICBvcHRpb25FeGFtcGxlczogWw0KICAgICAgICAgICAgdHJ1ZSwNCiAgICAgICAgICAgIFt0cnVlLCBPUFRJT05fQUxMT1dfUFVCTElDLCBPUFRJT05fQUxMT1dfUFJPVEVDVEVEXSwNCiAgICAgICAgXSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiQ2xhc3MgbWV0aG9kIGRvZXMgbm90IHVzZSAndGhpcycuIFVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoV2Fsa2VyKG5ldyBQcmVmZXJGdW5jdGlvbk92ZXJNZXRob2RXYWxrZXIoc291cmNlRmlsZSwgdGhpcy5ydWxlTmFtZSwgew0KICAgICAgICAgICAgYWxsb3dQcm90ZWN0ZWQ6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9BTExPV19QUk9URUNURUQpICE9PSAtMSwNCiAgICAgICAgICAgIGFsbG93UHVibGljOiB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihPUFRJT05fQUxMT1dfUFVCTElDKSAhPT0gLTEsDQogICAgICAgIH0pKTsNCiAgICB9DQp9DQoNCmNsYXNzIFByZWZlckZ1bmN0aW9uT3Zlck1ldGhvZFdhbGtlciBleHRlbmRzIExpbnQuQWJzdHJhY3RXYWxrZXI8T3B0aW9ucz4gew0KICAgIHByaXZhdGUgY3VycmVudFNjb3BlPzogVGhpc1VzZWQ7DQoNCiAgICBwdWJsaWMgd2Fsayhzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKSB7DQogICAgICAgIGNvbnN0IGNiID0gKG5vZGU6IHRzLk5vZGUpOiB2b2lkID0+IHsNCiAgICAgICAgICAgIGlmIChpc01ldGhvZERlY2xhcmF0aW9uKG5vZGUpICYmICF0aGlzLmlzRXhlbXB0KG5vZGUpKSB7DQogICAgICAgICAgICAgICAgLy8gY3VycmVudFNjb3BlIGlzIGFsd2F5cyB1bmRlZmluZWQgaGVyZSwgc28gd2UgZG9uJ3QgbmVlZCB0byBzYXZlIGl0IGFuZCBqdXN0IHNldCBpdCB0byB1bmRlZmluZWQgYWZ0ZXJ3YXJkcw0KICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNjb3BlID0gew0KICAgICAgICAgICAgICAgICAgICBpc1RoaXNVc2VkOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogZ2V0UHJvcGVydHlOYW1lKG5vZGUubmFtZSksDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgICAgICAgICAgICAgIGlmICghdGhpcy5jdXJyZW50U2NvcGUuaXNUaGlzVXNlZCkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdE5vZGUobm9kZS5uYW1lLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U2NvcGUgPSB1bmRlZmluZWQ7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGhhc093blRoaXNSZWZlcmVuY2Uobm9kZSkpIHsNCiAgICAgICAgICAgICAgICBjb25zdCBzY29wZSA9IHRoaXMuY3VycmVudFNjb3BlOw0KICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNjb3BlID0gdW5kZWZpbmVkOw0KICAgICAgICAgICAgICAgIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U2NvcGUgPSBzY29wZTsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50U2NvcGUgIT09IHVuZGVmaW5lZCAmJg0KICAgICAgICAgICAgICAgICAgICAgICAobm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLlRoaXNLZXl3b3JkICYmICFpc1JlY3Vyc2l2ZUNhbGwobm9kZSwgdGhpcy5jdXJyZW50U2NvcGUubmFtZSkgfHwNCiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5TdXBlcktleXdvcmQpKSB7DQogICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U2NvcGUuaXNUaGlzVXNlZCA9IHRydWU7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH07DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgY2IpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgaXNFeGVtcHQobm9kZTogdHMuTWV0aG9kRGVjbGFyYXRpb24pOiBib29sZWFuIHsNCiAgICAgICAgLy8gVE9ETzogaGFuZGxlIHRoZSBvdmVycmlkZSBrZXl3b3JkIG9uY2UgaXQgbGFuZHMgaW4gdGhlIGxhbmd1YWdlDQogICAgICAgIHJldHVybiBub2RlLmJvZHkgPT09IHVuZGVmaW5lZCB8fCAvLyBleGNsdWRlIGFic3RyYWN0IG1ldGhvZHMgYW5kIG92ZXJsb2FkIHNpZ25hdHVyZXMNCiAgICAgICAgICAgIC8vIGV4Y2x1ZGUgb2JqZWN0IG1ldGhvZHMNCiAgICAgICAgICAgIG5vZGUucGFyZW50IS5raW5kICE9PSB0cy5TeW50YXhLaW5kLkNsYXNzRGVjbGFyYXRpb24gJiYgbm9kZS5wYXJlbnQhLmtpbmQgIT09IHRzLlN5bnRheEtpbmQuQ2xhc3NFeHByZXNzaW9uIHx8DQogICAgICAgICAgICBoYXNNb2RpZmllcihub2RlLm1vZGlmaWVycywgdHMuU3ludGF4S2luZC5TdGF0aWNLZXl3b3JkKSB8fA0KICAgICAgICAgICAgdGhpcy5vcHRpb25zLmFsbG93UHJvdGVjdGVkICYmIGhhc01vZGlmaWVyKG5vZGUubW9kaWZpZXJzLCB0cy5TeW50YXhLaW5kLlByb3RlY3RlZEtleXdvcmQpIHx8DQogICAgICAgICAgICB0aGlzLm9wdGlvbnMuYWxsb3dQdWJsaWMgJiYgKGhhc01vZGlmaWVyKG5vZGUubW9kaWZpZXJzLCB0cy5TeW50YXhLaW5kLlB1YmxpY0tleXdvcmQpIHx8DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFoYXNNb2RpZmllcihub2RlLm1vZGlmaWVycywgdHMuU3ludGF4S2luZC5Qcm90ZWN0ZWRLZXl3b3JkLCB0cy5TeW50YXhLaW5kLlByaXZhdGVLZXl3b3JkKSk7DQogICAgfQ0KfQ0KDQppbnRlcmZhY2UgVGhpc1VzZWQgew0KICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDsNCiAgICBpc1RoaXNVc2VkOiBib29sZWFuOw0KfQ0KDQpmdW5jdGlvbiBpc1JlY3Vyc2l2ZUNhbGwobm9kZTogdHMuTm9kZSwgbmFtZT86IHN0cmluZykgew0KICAgIHJldHVybiBuYW1lICE9PSB1bmRlZmluZWQgJiYNCiAgICAgICAgbm9kZS5wYXJlbnQhLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uICYmDQogICAgICAgIChub2RlLnBhcmVudCBhcyB0cy5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24pLm5hbWUudGV4dCA9PT0gbmFtZTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "68641F2D79B54AE8049AEF96CA150BDA",
              "algorithm": "md5"
            },
            {
              "value": "12FC997B9F6CE5C8B8BBFE833035BCA10AA93234",
              "algorithm": "sha-1"
            },
            {
              "value": "1DA48D3D42972167D5E5D7DBF038FF63C642BC839364E5BF3BD6273311C0A687",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferMethodSignatureRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNGdW5jdGlvblR5cGVOb2RlLCBpc1Byb3BlcnR5U2lnbmF0dXJlIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJwcmVmZXItbWV0aG9kLXNpZ25hdHVyZSIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiUHJlZmVyIGBmb28oKTogdm9pZGAgb3ZlciBgZm9vOiAoKSA9PiB2b2lkYCBpbiBpbnRlcmZhY2VzIGFuZCB0eXBlcy4iLA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUuIiwNCiAgICAgICAgb3B0aW9uczogbnVsbCwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlXSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9DQogICAgICAgICJVc2UgYSBtZXRob2Qgc2lnbmF0dXJlIGluc3RlYWQgb2YgYSBwcm9wZXJ0eSBzaWduYXR1cmUgb2YgZnVuY3Rpb24gdHlwZS4iOw0KDQogICAgcHVibGljIHN0YXRpYyBNRVRIX1NJR05fU1RSSU5HKHBzOiB0cy5Qcm9wZXJ0eVNpZ25hdHVyZSk6IHN0cmluZyB7DQogICAgICAgIGNvbnN0IHsgdHlwZSwgcXVlc3Rpb25Ub2tlbiB9ID0gcHM7DQoNCiAgICAgICAgbGV0IHJlc3VsdCA9IHBzLm5hbWUuZ2V0VGV4dCgpOw0KICAgICAgICBpZiAocXVlc3Rpb25Ub2tlbiAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICByZXN1bHQgKz0gIj8iOw0KICAgICAgICB9DQogICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgaXNGdW5jdGlvblR5cGVOb2RlKHR5cGUpICYmIHR5cGUudHlwZSAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICBpZiAodHlwZS50eXBlUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgY29uc3QgdHBzID0gdHlwZS50eXBlUGFyYW1ldGVycy5tYXAodHAgPT4gdHAuZ2V0VGV4dCgpKS5qb2luKCIsICIpOw0KICAgICAgICAgICAgICAgIHJlc3VsdCArPSBgPCR7dHBzfT5gOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc3QgYXJncyA9IHR5cGUucGFyYW1ldGVycy5tYXAodiA9PiB2LmdldFRleHQoKSkuam9pbigiLCAiKTsNCiAgICAgICAgICAgIHJlc3VsdCArPSBgKCR7YXJnc30pOiAke3R5cGUudHlwZS5nZXRUZXh0KCl9O2A7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsayk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPik6IHZvaWQgew0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzUHJvcGVydHlTaWduYXR1cmUobm9kZSkpIHsNCiAgICAgICAgICAgIGNvbnN0IHsgdHlwZSB9ID0gbm9kZTsNCiAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgaXNGdW5jdGlvblR5cGVOb2RlKHR5cGUpKSB7DQogICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUoDQogICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSwNCiAgICAgICAgICAgICAgICAgICAgUnVsZS5GQUlMVVJFX1NUUklORywNCiAgICAgICAgICAgICAgICAgICAgdHlwZS50eXBlID09PSB1bmRlZmluZWQNCiAgICAgICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkDQogICAgICAgICAgICAgICAgICAgICAgICA6IFtMaW50LlJlcGxhY2VtZW50LnJlcGxhY2VOb2RlKG5vZGUsIFJ1bGUuTUVUSF9TSUdOX1NUUklORyhub2RlKSldDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "51ADEAD2815A5DDA6732F6B6B2569A1C",
              "algorithm": "md5"
            },
            {
              "value": "DD2EA7C777E6470F779F715683B43250053DF813",
              "algorithm": "sha-1"
            },
            {
              "value": "49EC96FDF1853BD698D1136DD580A36225B36645275260E9367DA29792FE92CA",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferObjectSpreadRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsNCiAgICBoYXNTaWRlRWZmZWN0cywNCiAgICBpc0NhbGxFeHByZXNzaW9uLA0KICAgIGlzRXhwcmVzc2lvblZhbHVlVXNlZCwNCiAgICBpc0lkZW50aWZpZXIsDQogICAgaXNPYmplY3RMaXRlcmFsRXhwcmVzc2lvbiwNCiAgICBpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiwNCiAgICBpc1NwcmVhZEVsZW1lbnQsDQogICAgU2lkZUVmZmVjdE9wdGlvbnMsDQp9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogInByZWZlci1vYmplY3Qtc3ByZWFkIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJFbmZvcmNlcyB0aGUgdXNlIG9mIHRoZSBFUzIwMTUgb2JqZWN0IHNwcmVhZCBvcGVyYXRvciBvdmVyIGBPYmplY3QuYXNzaWduKClgIHdoZXJlIGFwcHJvcHJpYXRlLiIsDQogICAgICAgIHJhdGlvbmFsZTogIk9iamVjdCBzcHJlYWQgYWxsb3dzIGZvciBiZXR0ZXIgdHlwZSBjaGVja2luZyBhbmQgaW5mZXJlbmNlLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUuIiwNCiAgICAgICAgb3B0aW9uczogbnVsbCwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlXSwNCiAgICAgICAgdHlwZTogImZ1bmN0aW9uYWxpdHkiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIlVzZSB0aGUgb2JqZWN0IHNwcmVhZCBvcGVyYXRvciBpbnN0ZWFkLiI7DQogICAgcHVibGljIHN0YXRpYyBBU1NJR05NRU5UX0ZBSUxVUkVfU1RSSU5HID0gIidPYmplY3QuYXNzaWduJyByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudC4gUHJlZmVyIG9iamVjdCBzcHJlYWQgaWYgeW91IHdhbnQgYSBuZXcgb2JqZWN0LiI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGspOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8dm9pZD4pIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChpc0NhbGxFeHByZXNzaW9uKG5vZGUpICYmIG5vZGUuYXJndW1lbnRzLmxlbmd0aCAhPT0gMCAmJg0KICAgICAgICAgICAgaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24obm9kZS5leHByZXNzaW9uKSAmJiBub2RlLmV4cHJlc3Npb24ubmFtZS50ZXh0ID09PSAiYXNzaWduIiAmJg0KICAgICAgICAgICAgaXNJZGVudGlmaWVyKG5vZGUuZXhwcmVzc2lvbi5leHByZXNzaW9uKSAmJiBub2RlLmV4cHJlc3Npb24uZXhwcmVzc2lvbi50ZXh0ID09PSAiT2JqZWN0IiAmJg0KICAgICAgICAgICAgIXRzLmlzRnVuY3Rpb25MaWtlKG5vZGUuYXJndW1lbnRzWzBdKSAmJg0KICAgICAgICAgICAgLy8gT2JqZWN0LmFzc2lnbiguLi5zb21lQXJyYXkpIGNhbm5vdCBiZSB3cml0dGVuIGFzIG9iamVjdCBzcHJlYWQNCiAgICAgICAgICAgICFub2RlLmFyZ3VtZW50cy5zb21lKGlzU3ByZWFkRWxlbWVudCkgJiYNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgICogQFRPRE8NCiAgICAgICAgICAgICAqIFJlbW92ZSAhbm9kZS5hcmd1bWVudHMuc29tZShpc1RoaXNLZXl3b3JkKSB3aGVuIHR5cGVzY3JpcHQgZ2V0J3MNCiAgICAgICAgICAgICAqIHN1cHBvcnQgZm9yIHNwcmVhZCB0eXBlcy4NCiAgICAgICAgICAgICAqIFBSOiBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEwNzI3DQogICAgICAgICAgICAgKi8NCiAgICAgICAgICAgICFub2RlLmFyZ3VtZW50cy5zb21lKGlzVGhpc0tleXdvcmQpKSB7DQogICAgICAgICAgICBpZiAobm9kZS5hcmd1bWVudHNbMF0ua2luZCA9PT0gdHMuU3ludGF4S2luZC5PYmplY3RMaXRlcmFsRXhwcmVzc2lvbikgew0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcsIGNyZWF0ZUZpeChub2RlLCBjdHguc291cmNlRmlsZSkpOw0KICAgICAgICAgICAgfSBlbHNlIGlmIChpc0V4cHJlc3Npb25WYWx1ZVVzZWQobm9kZSkgJiYgIWhhc1NpZGVFZmZlY3RzKG5vZGUuYXJndW1lbnRzWzBdLCBTaWRlRWZmZWN0T3B0aW9ucy5Db25zdHJ1Y3RvcikpIHsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkFTU0lHTk1FTlRfRkFJTFVSRV9TVFJJTkcsIGNyZWF0ZUZpeChub2RlLCBjdHguc291cmNlRmlsZSkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQoNCmZ1bmN0aW9uIGNyZWF0ZUZpeChub2RlOiB0cy5DYWxsRXhwcmVzc2lvbiwgc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuRml4IHsNCiAgICBjb25zdCBhcmdzID0gbm9kZS5hcmd1bWVudHM7DQogICAgY29uc3Qgb2JqZWN0TmVlZHNQYXJlbnMgPSBub2RlLnBhcmVudCEua2luZCA9PT0gdHMuU3ludGF4S2luZC5BcnJvd0Z1bmN0aW9uOw0KICAgIGNvbnN0IGZpeCA9IFsNCiAgICAgICAgTGludC5SZXBsYWNlbWVudC5yZXBsYWNlRnJvbVRvKG5vZGUuZ2V0U3RhcnQoc291cmNlRmlsZSksIGFyZ3NbMF0uZ2V0U3RhcnQoc291cmNlRmlsZSksIGAke29iamVjdE5lZWRzUGFyZW5zID8gIigiIDogIiJ9e2ApLA0KICAgICAgICBuZXcgTGludC5SZXBsYWNlbWVudChub2RlLmVuZCAtIDEsIDEsIGB9JHtvYmplY3ROZWVkc1BhcmVucyA/ICIpIiA6ICIifWApLA0KICAgIF07DQogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7DQogICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV07DQogICAgICAgIGlmIChpc09iamVjdExpdGVyYWxFeHByZXNzaW9uKGFyZykpIHsNCiAgICAgICAgICAgIGlmIChhcmcucHJvcGVydGllcy5sZW5ndGggPT09IDApIHsNCiAgICAgICAgICAgICAgICBsZXQgZW5kID0gYXJnLmVuZDsNCiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gYXJncy5sZW5ndGggLSAxKSB7DQogICAgICAgICAgICAgICAgICAgIGVuZCA9IGFyZ3NbaSArIDFdLmdldFN0YXJ0KHNvdXJjZUZpbGUpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJncy5oYXNUcmFpbGluZ0NvbW1hKSB7DQogICAgICAgICAgICAgICAgICAgIGVuZCA9IGFyZ3MuZW5kOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyByZW1vdmUgZW1wdHkgb2JqZWN0IGl0ZXJhbCBhbmQgdGhlIGZvbGxvd2luZyBjb21tYSBpZiBleGlzdHMNCiAgICAgICAgICAgICAgICBmaXgucHVzaChMaW50LlJlcGxhY2VtZW50LmRlbGV0ZUZyb21UbyhhcmcuZ2V0U3RhcnQoc291cmNlRmlsZSksIGVuZCkpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBmaXgucHVzaCgNCiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9wZW4gYnJhY2UNCiAgICAgICAgICAgICAgICAgICAgTGludC5SZXBsYWNlbWVudC5kZWxldGVUZXh0KGFyZy5nZXRTdGFydChzb3VyY2VGaWxlKSwgMSksDQogICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyBjb21tYSBpZiBleGlzdHMgYW5kIGNsb3NlIGJyYWNlDQogICAgICAgICAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQuZGVsZXRlRnJvbVRvKGFyZy5wcm9wZXJ0aWVzW2FyZy5wcm9wZXJ0aWVzLmxlbmd0aCAtIDFdLmVuZCwgYXJnLmVuZCksDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGNvbnN0IHBhcmVucyA9IG5lZWRzUGFyZW5zKGFyZyk7DQogICAgICAgICAgICBmaXgucHVzaChMaW50LlJlcGxhY2VtZW50LmFwcGVuZFRleHQoYXJnLmdldFN0YXJ0KHNvdXJjZUZpbGUpLCBwYXJlbnMgPyAiLi4uKCIgOiAiLi4uIikpOw0KICAgICAgICAgICAgaWYgKHBhcmVucykgew0KICAgICAgICAgICAgICAgIGZpeC5wdXNoKExpbnQuUmVwbGFjZW1lbnQuYXBwZW5kVGV4dChhcmcuZW5kLCAiKSIpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiBmaXg7DQp9DQoNCmZ1bmN0aW9uIGlzVGhpc0tleXdvcmQobm9kZTogdHMuRXhwcmVzc2lvbik6IGJvb2xlYW4gew0KICAgIHJldHVybiBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuVGhpc0tleXdvcmQ7DQp9DQoNCmZ1bmN0aW9uIG5lZWRzUGFyZW5zKG5vZGU6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ29uZGl0aW9uYWxFeHByZXNzaW9uOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQmluYXJ5RXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "426BB99FDD139287B829509567E75179",
              "algorithm": "md5"
            },
            {
              "value": "0062CD97A2B6FDB21837DFB2C1EA82F0E312E1C1",
              "algorithm": "sha-1"
            },
            {
              "value": "D7DEA6BE1264C21FA898E24B11CD3E85273F5A7027B0C1A5A3781CD768726313",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferReadonlyRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "0C556062E0B8338C92DC7B2856B33A5D",
              "algorithm": "md5"
            },
            {
              "value": "58781F6EF2EEB18F82F8DEF0A7CD094E5E60AB8B",
              "algorithm": "sha-1"
            },
            {
              "value": "E597329157E16C5F91685CB2C5847EC7FFCE844E94E3D2807F1F54C2748DC27F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferTemplateRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCaW5hcnlFeHByZXNzaW9uIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQppbXBvcnQgeyBjb2RlRXhhbXBsZXMgfSBmcm9tICIuL2NvZGUtZXhhbXBsZXMvcHJlZmVyVGVtcGxhdGUuZXhhbXBsZXMiOw0KDQpjb25zdCBPUFRJT05fU0lOR0xFX0NPTkNBVCA9ICJhbGxvdy1zaW5nbGUtY29uY2F0IjsNCg0KaW50ZXJmYWNlIE9wdGlvbnMgew0KICAgIGFsbG93U2luZ2xlQ29uY2F0OiBib29sZWFuOw0KfQ0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAicHJlZmVyLXRlbXBsYXRlIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJQcmVmZXIgYSB0ZW1wbGF0ZSBleHByZXNzaW9uIG92ZXIgc3RyaW5nIGxpdGVyYWwgY29uY2F0ZW5hdGlvbi4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgSWYgXGAke09QVElPTl9TSU5HTEVfQ09OQ0FUfVxgIGlzIHNwZWNpZmllZCwgdGhlbiBhIHNpbmdsZSBjb25jYXRlbmF0aW9uIChcYHggKyB5XGApIGlzIGFsbG93ZWQsIGJ1dCBub3QgbW9yZSAoXGB4ICsgeSArIHpcYCkuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICBlbnVtOiBbT1BUSU9OX1NJTkdMRV9DT05DQVRdLA0KICAgICAgICB9LA0KICAgICAgICBvcHRpb25FeGFtcGxlczogW3RydWUsIFt0cnVlLCBPUFRJT05fU0lOR0xFX0NPTkNBVF1dLA0KICAgICAgICB0eXBlOiAic3R5bGUiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgICAgIGNvZGVFeGFtcGxlcywNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0gIlVzZSBhIHRlbXBsYXRlIGxpdGVyYWwgaW5zdGVhZCBvZiBjb25jYXRlbmF0aW5nIHdpdGggYSBzdHJpbmcgbGl0ZXJhbC4iOw0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfTVVMVElMSU5FID0gIlVzZSBhIG11bHRpbGluZSB0ZW1wbGF0ZSBsaXRlcmFsIGluc3RlYWQgb2YgY29uY2F0ZW5hdGluZyBzdHJpbmcgbGl0ZXJhbHMgd2l0aCBuZXdsaW5lcy4iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICBpZiAoc291cmNlRmlsZS5pc0RlY2xhcmF0aW9uRmlsZSkgew0KICAgICAgICAgICAgcmV0dXJuIFtdOyAvLyBOb3QgcG9zc2libGUgaW4gYSBkZWNsYXJhdGlvbiBmaWxlDQogICAgICAgIH0NCg0KICAgICAgICBjb25zdCBhbGxvd1NpbmdsZUNvbmNhdCA9IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9TSU5HTEVfQ09OQ0FUKSAhPT0gLTE7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHthbGxvd1NpbmdsZUNvbmNhdH0pOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gd2FsayhjdHg6IExpbnQuV2Fsa0NvbnRleHQ8T3B0aW9ucz4pOiB2b2lkIHsNCiAgICBjb25zdCBhbGxvd1NpbmdsZUNvbmNhdCA9IGN0eC5vcHRpb25zLmFsbG93U2luZ2xlQ29uY2F0Ow0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgY29uc3QgZmFpbHVyZSA9IGdldEVycm9yKG5vZGUsIGFsbG93U2luZ2xlQ29uY2F0KTsNCiAgICAgICAgaWYgKGZhaWx1cmUgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUobm9kZSwgZmFpbHVyZSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICAgICAgfQ0KICAgIH0pOw0KfQ0KDQpmdW5jdGlvbiBnZXRFcnJvcihub2RlOiB0cy5Ob2RlLCBhbGxvd1NpbmdsZUNvbmNhdDogYm9vbGVhbik6IHN0cmluZyB8IHVuZGVmaW5lZCB7DQogICAgaWYgKCFpc1BsdXNFeHByZXNzaW9uKG5vZGUpKSB7DQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KDQogICAgY29uc3QgeyBsZWZ0LCByaWdodCB9ID0gbm9kZTsNCiAgICBjb25zdCBsID0gaXNTdHJpbmdMaWtlKGxlZnQpOw0KICAgIGNvbnN0IHIgPSBpc1N0cmluZ0xpa2UocmlnaHQpOw0KDQogICAgaWYgKGwgJiYgcikgew0KICAgICAgICAvLyBUaGV5J3JlIGJvdGggc3RyaW5ncy4NCiAgICAgICAgLy8gSWYgdGhleSdyZSBqb2luZWQgYnkgYSBuZXdsaW5lLCByZWNvbW1lbmQgYSB0ZW1wbGF0ZSBleHByZXNzaW9uIGluc3RlYWQuDQogICAgICAgIC8vIE90aGVyd2lzZSBpZ25vcmUuICgiYSIgKyAiYiIsIHByb2JhYmx5IHdyaXRpbmcgYSBsb25nIG5ld2xpbmUtbGVzcyBzdHJpbmcgb24gbWFueSBsaW5lcy4pDQogICAgICAgIHJldHVybiBjb250YWluc05ld2xpbmUobGVmdCBhcyBTdHJpbmdMaWtlKSB8fCBjb250YWluc05ld2xpbmUocmlnaHQgYXMgU3RyaW5nTGlrZSkgPyBSdWxlLkZBSUxVUkVfU1RSSU5HX01VTFRJTElORSA6IHVuZGVmaW5lZDsNCiAgICB9IGVsc2UgaWYgKCFsICYmICFyKSB7DQogICAgICAgIC8vIFdhdGNoIG91dCBmb3IgYCJhIiArIGIgKyBjYC4gUGFyc2VkIGFzIGAoImEiICsgYikgKyBjYC4NCiAgICAgICAgcmV0dXJuIGNvbnRhaW5zQW55U3RyaW5nTGl0ZXJhbHMobGVmdCkgPyBSdWxlLkZBSUxVUkVfU1RSSU5HIDogdW5kZWZpbmVkOw0KICAgIH0gZWxzZSBpZiAobCkgew0KICAgICAgICAvLyBgIngiICsgeWANCiAgICAgICAgcmV0dXJuICFhbGxvd1NpbmdsZUNvbmNhdCA/IFJ1bGUuRkFJTFVSRV9TVFJJTkcgOiB1bmRlZmluZWQ7DQogICAgfSBlbHNlIHsNCiAgICAgICAgLy8gYD8gKyAiYiJgDQogICAgICAgIC8vIElmIExIUyBjb25zaXN0cyBvZiBvbmx5IHN0cmluZyBsaXRlcmFscyAoYXMgaW4gYCJhIiArICJiIiArICJjImAsIGFsbG93IGl0LikNCiAgICAgICAgcmV0dXJuICFjb250YWluc09ubHlTdHJpbmdMaXRlcmFscyhsZWZ0KSAmJiAoIWFsbG93U2luZ2xlQ29uY2F0IHx8IGlzUGx1c0V4cHJlc3Npb24obGVmdCkpICA/IFJ1bGUuRkFJTFVSRV9TVFJJTkcgOiB1bmRlZmluZWQ7DQogICAgfQ0KfQ0KDQp0eXBlIFN0cmluZ0xpa2UgPSB0cy5TdHJpbmdMaXRlcmFsIHwgdHMuVGVtcGxhdGVMaXRlcmFsOw0KDQpmdW5jdGlvbiBjb250YWluc05ld2xpbmUobm9kZTogU3RyaW5nTGlrZSk6IGJvb2xlYW4gew0KICAgIGlmIChub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuVGVtcGxhdGVFeHByZXNzaW9uKSB7DQogICAgICAgIHJldHVybiBub2RlLnRlbXBsYXRlU3BhbnMuc29tZSgoeyBsaXRlcmFsOiB7IHRleHQgfSB9KSA9PiB0ZXh0LmluY2x1ZGVzKCJcbiIpKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gbm9kZS50ZXh0LmluY2x1ZGVzKCJcbiIpOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gY29udGFpbnNPbmx5U3RyaW5nTGl0ZXJhbHMobm9kZTogdHMuRXhwcmVzc2lvbik6IGJvb2xlYW4gew0KICAgIHJldHVybiBpc1BsdXNFeHByZXNzaW9uKG5vZGUpICYmIGlzU3RyaW5nTGlrZShub2RlLnJpZ2h0KSAmJiAoaXNTdHJpbmdMaWtlKG5vZGUubGVmdCkgfHwgY29udGFpbnNBbnlTdHJpbmdMaXRlcmFscyhub2RlLmxlZnQpKTsNCn0NCg0KZnVuY3Rpb24gY29udGFpbnNBbnlTdHJpbmdMaXRlcmFscyhub2RlOiB0cy5FeHByZXNzaW9uKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIGlzUGx1c0V4cHJlc3Npb24obm9kZSkgJiYgKGlzU3RyaW5nTGlrZShub2RlLnJpZ2h0KSB8fCBpc1N0cmluZ0xpa2Uobm9kZS5sZWZ0KSB8fCBjb250YWluc0FueVN0cmluZ0xpdGVyYWxzKG5vZGUubGVmdCkpOw0KfQ0KDQpmdW5jdGlvbiBpc1BsdXNFeHByZXNzaW9uKG5vZGU6IHRzLk5vZGUpOiBub2RlIGlzIHRzLkJpbmFyeUV4cHJlc3Npb24gew0KICAgIHJldHVybiBpc0JpbmFyeUV4cHJlc3Npb24obm9kZSkgJiYgbm9kZS5vcGVyYXRvclRva2VuLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuUGx1c1Rva2VuOw0KfQ0KDQpmdW5jdGlvbiBpc1N0cmluZ0xpa2Uobm9kZTogdHMuTm9kZSk6IG5vZGUgaXMgU3RyaW5nTGlrZSB7DQogICAgc3dpdGNoIChub2RlLmtpbmQpIHsNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlN0cmluZ0xpdGVyYWw6DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Ob1N1YnN0aXR1dGlvblRlbXBsYXRlTGl0ZXJhbDoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlRlbXBsYXRlRXhwcmVzc2lvbjoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "74D6DCF8D691990AFF35772DC0958568",
              "algorithm": "md5"
            },
            {
              "value": "930BEA5233A40CBDB4BE5CB44F8230DE2503BD76",
              "algorithm": "sha-1"
            },
            {
              "value": "B2F036E6EDA0829C67EA5A7B3C939838592DF18958C7678CB4DF6D25455C7252",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/preferWhileRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTggUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNGb3JTdGF0ZW1lbnQgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQppbXBvcnQgeyBjb2RlRXhhbXBsZXMgfSBmcm9tICIuL2NvZGUtZXhhbXBsZXMvcHJlZmVyV2hpbGUuZXhhbXBsZXMiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAicHJlZmVyLXdoaWxlIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJQcmVmZXIgYHdoaWxlYCBsb29wcyBpbnN0ZWFkIG9mIGBmb3JgIGxvb3BzIHdpdGhvdXQgYW4gaW5pdGlhbGl6ZXIgYW5kIGluY3JlbWVudG9yLiIsDQogICAgICAgIHJhdGlvbmFsZTogIlNpbXBsaWZpZXMgdGhlIHJlYWRhYmlsaXR5IG9mIHRoZSBsb29wIHN0YXRlbWVudCwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIHNhbWUgZnVuY3Rpb25hbGl0eS4iLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgICAgICBjb2RlRXhhbXBsZXMsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJQcmVmZXIgYHdoaWxlYCBsb29wcyBpbnN0ZWFkIG9mIGBmb3JgIGxvb3BzIHdpdGhvdXQgYW4gaW5pdGlhbGl6ZXIgYW5kIGluY3JlbWVudG9yLiI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIGNvbnN0IGZhaWx1cmVzOiBMaW50LlJ1bGVGYWlsdXJlW10gPSBbXTsNCg0KICAgICAgICBjb25zdCBjYiA9IChub2RlOiB0cy5Ob2RlKTogdm9pZCA9PiB7DQogICAgICAgICAgICBpZiAoaXNGb3JTdGF0ZW1lbnQobm9kZSkgJiYgdGhpcy5kb2VzTm9kZVZpb2xhdGVSdWxlKG5vZGUpKSB7DQogICAgICAgICAgICAgICAgZmFpbHVyZXMucHVzaCh0aGlzLmNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgbm9kZSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgIH07DQoNCiAgICAgICAgdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGNiKTsNCiAgICAgICAgcmV0dXJuIGZhaWx1cmVzOw0KICAgIH0NCg0KICAgIHByaXZhdGUgZG9lc05vZGVWaW9sYXRlUnVsZShub2RlOiB0cy5Gb3JTdGF0ZW1lbnQpIHsNCiAgICAgICAgcmV0dXJuIChub2RlLmluaXRpYWxpemVyID09PSB1bmRlZmluZWQgJiYgbm9kZS5pbmNyZW1lbnRvciA9PT0gdW5kZWZpbmVkKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSwgbm9kZTogdHMuRm9yU3RhdGVtZW50KTogTGludC5SdWxlRmFpbHVyZSB7DQogICAgICAgIGNvbnN0IHN0YXJ0ID0gbm9kZS5nZXRTdGFydChzb3VyY2VGaWxlKTsNCiAgICAgICAgY29uc3QgZW5kID0gbm9kZS5zdGF0ZW1lbnQucG9zOw0KDQogICAgICAgIGxldCBmaXg6IExpbnQuRml4Ow0KICAgICAgICBpZiAobm9kZS5jb25kaXRpb24gPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgZml4ID0gTGludC5SZXBsYWNlbWVudC5yZXBsYWNlRnJvbVRvKHN0YXJ0LCBlbmQsICJ3aGlsZSAodHJ1ZSkiKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGZpeCA9IFsNCiAgICAgICAgICAgICAgICBMaW50LlJlcGxhY2VtZW50LnJlcGxhY2VGcm9tVG8oc3RhcnQsIG5vZGUuY29uZGl0aW9uLmdldFN0YXJ0KHNvdXJjZUZpbGUpLCAid2hpbGUgKCIpLA0KICAgICAgICAgICAgICAgIExpbnQuUmVwbGFjZW1lbnQuZGVsZXRlRnJvbVRvKG5vZGUuY29uZGl0aW9uLmVuZCwgZW5kIC0gMSksDQogICAgICAgICAgICBdOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBuZXcgTGludC5SdWxlRmFpbHVyZShzb3VyY2VGaWxlLCBzdGFydCwgZW5kLCBSdWxlLkZBSUxVUkVfU1RSSU5HLCB0aGlzLnJ1bGVOYW1lLCBmaXgpOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "EE8D5B1653F03C299E287EA56D883CCB",
              "algorithm": "md5"
            },
            {
              "value": "B8F35E89F3F994B9723B0FB3729088C47D7F4631",
              "algorithm": "sha-1"
            },
            {
              "value": "682D479A81569C0D3E79E3CE18CAAE0F4FB9957687E6AA5594A024A035F33D10",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/promiseFunctionAsyncRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaGFzTW9kaWZpZXIgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IE9QVElPTl9GVU5DVElPTl9ERUNMQVJBVElPTiA9ICJjaGVjay1mdW5jdGlvbi1kZWNsYXJhdGlvbiI7DQpjb25zdCBPUFRJT05fRlVOQ1RJT05fRVhQUkVTU0lPTiA9ICJjaGVjay1mdW5jdGlvbi1leHByZXNzaW9uIjsNCmNvbnN0IE9QVElPTl9BUlJPV19GVU5DVElPTiA9ICJjaGVjay1hcnJvdy1mdW5jdGlvbiI7DQpjb25zdCBPUFRJT05fTUVUSE9EX0RFQ0xBUkFUSU9OID0gImNoZWNrLW1ldGhvZC1kZWNsYXJhdGlvbiI7DQoNCmNvbnN0IEtJTkRfRk9SX09QVElPTjogeyBbYXJnOiBzdHJpbmddOiBudW1iZXIgfSA9IHsNCiAgICBbT1BUSU9OX0ZVTkNUSU9OX0RFQ0xBUkFUSU9OXTogdHMuU3ludGF4S2luZC5GdW5jdGlvbkRlY2xhcmF0aW9uLA0KICAgIFtPUFRJT05fRlVOQ1RJT05fRVhQUkVTU0lPTl06IHRzLlN5bnRheEtpbmQuRnVuY3Rpb25FeHByZXNzaW9uLA0KICAgIFtPUFRJT05fQVJST1dfRlVOQ1RJT05dOiB0cy5TeW50YXhLaW5kLkFycm93RnVuY3Rpb24sDQogICAgW09QVElPTl9NRVRIT0RfREVDTEFSQVRJT05dOiB0cy5TeW50YXhLaW5kLk1ldGhvZERlY2xhcmF0aW9uLA0KfTsNCg0KdHlwZSBFbmFibGVkU3ludGF4S2luZHMgPSBSZWFkb25seVNldDxudW1iZXI+Ow0KDQpmdW5jdGlvbiBwYXJzZU9wdGlvbnMocnVsZUFyZ3VtZW50czogc3RyaW5nW10pOiBFbmFibGVkU3ludGF4S2luZHMgew0KICAgIGlmIChydWxlQXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgew0KICAgICAgICBydWxlQXJndW1lbnRzID0gT2JqZWN0LmtleXMoS0lORF9GT1JfT1BUSU9OKTsNCiAgICB9DQoNCiAgICBjb25zdCBlbmFibGVkS2luZHMgPSBuZXcgU2V0PG51bWJlcj4oKTsNCiAgICBmb3IgKGNvbnN0IGFyZyBvZiBydWxlQXJndW1lbnRzKSB7DQogICAgICAgIGVuYWJsZWRLaW5kcy5hZGQoS0lORF9GT1JfT1BUSU9OW2FyZ10pOw0KICAgIH0NCiAgICByZXR1cm4gZW5hYmxlZEtpbmRzOw0KfQ0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuVHlwZWRSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAicHJvbWlzZS1mdW5jdGlvbi1hc3luYyIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiUmVxdWlyZXMgYW55IGZ1bmN0aW9uIG9yIG1ldGhvZCB0aGF0IHJldHVybnMgYSBwcm9taXNlIHRvIGJlIG1hcmtlZCBhc3luYy4iLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgRW5zdXJlcyB0aGF0IGVhY2ggZnVuY3Rpb24gaXMgb25seSBjYXBhYmxlIG9mIDEpIHJldHVybmluZyBhIHJlamVjdGVkIHByb21pc2UsIG9yIDIpDQogICAgICAgICAgICB0aHJvd2luZyBhbiBFcnJvciBvYmplY3QuIEluIGNvbnRyYXN0LCBub24tXGBhc3luY1xgIFxgUHJvbWlzZVxgLXJldHVybmluZyBmdW5jdGlvbnMNCiAgICAgICAgICAgIGFyZSB0ZWNobmljYWxseSBjYXBhYmxlIG9mIGVpdGhlci4gVGhpcyBwcmFjdGljZSByZW1vdmVzIGEgcmVxdWlyZW1lbnQgZm9yIGNvbnN1bWluZw0KICAgICAgICAgICAgY29kZSB0byBoYW5kbGUgYm90aCBjYXNlcy4NCg0KICAgICAgICAgICAgSWYgbm8gb3B0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0aGVuIGFsbCBmdW5jdGlvbiB0eXBlcyBhcmUgY2hlY2tlZCwNCiAgICAgICAgICAgIG90aGVyd2lzZSB0aGUgc3BlY2lmaWMgZnVuY3Rpb24gdHlwZXMgYXJlIGNoZWNrZWQ6DQoNCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fRlVOQ1RJT05fREVDTEFSQVRJT059IlxgIGNoZWNrIGZ1bmN0aW9uIGRlY2xhcmF0aW9ucy4NCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fRlVOQ1RJT05fRVhQUkVTU0lPTn0iXGAgY2hlY2sgZnVuY3Rpb24gZXhwcmVzc2lvbnMuDQogICAgICAgICAgICAqIFxgIiR7T1BUSU9OX0FSUk9XX0ZVTkNUSU9OfSJcYCBjaGVjayBhcnJvdyBmdW5jdGlvbnMuDQogICAgICAgICAgICAqIFxgIiR7T1BUSU9OX01FVEhPRF9ERUNMQVJBVElPTn0iXGAgY2hlY2sgbWV0aG9kIGRlY2xhcmF0aW9ucy4NCiAgICAgICAgYCwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiAiTm90IGNvbmZpZ3VyYWJsZS4iLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgaXRlbXM6IHsNCiAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICBlbnVtOiBbDQogICAgICAgICAgICAgICAgICAgIE9QVElPTl9GVU5DVElPTl9ERUNMQVJBVElPTiwNCiAgICAgICAgICAgICAgICAgICAgT1BUSU9OX0ZVTkNUSU9OX0VYUFJFU1NJT04sDQogICAgICAgICAgICAgICAgICAgIE9QVElPTl9BUlJPV19GVU5DVElPTiwNCiAgICAgICAgICAgICAgICAgICAgT1BUSU9OX01FVEhPRF9ERUNMQVJBVElPTiwNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIG1pbkxlbmd0aDogMCwNCiAgICAgICAgICAgIG1heExlbmd0aDogNCwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgIFt0cnVlLCBPUFRJT05fRlVOQ1RJT05fREVDTEFSQVRJT04sIE9QVElPTl9NRVRIT0RfREVDTEFSQVRJT05dXSwNCiAgICAgICAgdHlwZTogInR5cGVzY3JpcHQiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgICAgIHJlcXVpcmVzVHlwZUluZm86IHRydWUsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJmdW5jdGlvbnMgdGhhdCByZXR1cm4gcHJvbWlzZXMgbXVzdCBiZSBhc3luYyI7DQoNCiAgICBwdWJsaWMgYXBwbHlXaXRoUHJvZ3JhbShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlLCBwcm9ncmFtOiB0cy5Qcm9ncmFtKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2FsaywgcGFyc2VPcHRpb25zKHRoaXMucnVsZUFyZ3VtZW50cyksIHByb2dyYW0uZ2V0VHlwZUNoZWNrZXIoKSk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDxFbmFibGVkU3ludGF4S2luZHM+LCB0YzogdHMuVHlwZUNoZWNrZXIpIHsNCiAgICBjb25zdCB7IHNvdXJjZUZpbGUsIG9wdGlvbnMgfSA9IGN0eDsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKG9wdGlvbnMuaGFzKG5vZGUua2luZCkpIHsNCiAgICAgICAgICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1ldGhvZERlY2xhcmF0aW9uOg0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5GdW5jdGlvbkRlY2xhcmF0aW9uOg0KICAgICAgICAgICAgICAgICAgICBpZiAoKG5vZGUgYXMgdHMuRnVuY3Rpb25MaWtlRGVjbGFyYXRpb24pLmJvZHkgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaA0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5GdW5jdGlvbkV4cHJlc3Npb246DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkFycm93RnVuY3Rpb246DQogICAgICAgICAgICAgICAgICAgIGlmICghaGFzTW9kaWZpZXIobm9kZS5tb2RpZmllcnMsIHRzLlN5bnRheEtpbmQuQXN5bmNLZXl3b3JkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgJiYgcmV0dXJuc1Byb21pc2Uobm9kZSBhcyB0cy5GdW5jdGlvbkxpa2VEZWNsYXJhdGlvbiwgdGMpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZShub2RlLmdldFN0YXJ0KHNvdXJjZUZpbGUpLCAobm9kZSBhcyB0cy5GdW5jdGlvbkxpa2VEZWNsYXJhdGlvbikuYm9keSEucG9zLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0KDQpmdW5jdGlvbiByZXR1cm5zUHJvbWlzZShub2RlOiB0cy5GdW5jdGlvbkxpa2VEZWNsYXJhdGlvbiwgdGM6IHRzLlR5cGVDaGVja2VyKTogYm9vbGVhbiB7DQogICAgY29uc3QgdHlwZSA9IHRjLmdldFJldHVyblR5cGVPZlNpZ25hdHVyZSh0Yy5nZXRUeXBlQXRMb2NhdGlvbihub2RlKS5nZXRDYWxsU2lnbmF0dXJlcygpWzBdKTsNCiAgICByZXR1cm4gdHlwZS5zeW1ib2wgIT09IHVuZGVmaW5lZCAmJiB0eXBlLnN5bWJvbC5uYW1lID09PSAiUHJvbWlzZSI7DQp9DQo="
          },
          "hashes": [
            {
              "value": "B0FEF59CE694D238BC9587B6844C0FD5",
              "algorithm": "md5"
            },
            {
              "value": "A9A47DFD6E1A68226CB98EFC77107E3A3CC1D162",
              "algorithm": "sha-1"
            },
            {
              "value": "4C9F7558BC18A4447D69507684788B14AA22AF003C670EFEDA87333946CFA378",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/quotemarkRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "785FBCCAD19C6157CCF3901597D4D4FE",
              "algorithm": "md5"
            },
            {
              "value": "89C4718376B9D5CC6800341F5CD1517E8F013F6D",
              "algorithm": "sha-1"
            },
            {
              "value": "1070974C0B664BB237C12E52E57A6510853C0AE8845FB1728ABC2BC0E2A0A65E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/radixRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNDYWxsRXhwcmVzc2lvbiwgaXNJZGVudGlmaWVyLCBpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbiB9IGZyb20gInRzdXRpbHMiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KaW1wb3J0IHsgY29kZUV4YW1wbGVzIH0gZnJvbSAiLi9jb2RlLWV4YW1wbGVzL3JhZGl4LmV4YW1wbGVzIjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogInJhZGl4IiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJSZXF1aXJlcyB0aGUgcmFkaXggcGFyYW1ldGVyIHRvIGJlIHNwZWNpZmllZCB3aGVuIGNhbGxpbmcgYHBhcnNlSW50YC4iLA0KICAgICAgICByYXRpb25hbGU6IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgRnJvbSBbTUROXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9wYXJzZUludCk6DQogICAgICAgICAgICA+IEFsd2F5cyBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyIHRvIGVsaW1pbmF0ZSByZWFkZXIgY29uZnVzaW9uIGFuZCB0byBndWFyYW50ZWUgcHJlZGljdGFibGUgYmVoYXZpb3IuDQogICAgICAgICAgICA+IERpZmZlcmVudCBpbXBsZW1lbnRhdGlvbnMgcHJvZHVjZSBkaWZmZXJlbnQgcmVzdWx0cyB3aGVuIGEgcmFkaXggaXMgbm90IHNwZWNpZmllZCwgdXN1YWxseSBkZWZhdWx0aW5nIHRoZSB2YWx1ZSB0byAxMC5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgICAgICBjb2RlRXhhbXBsZXMsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJNaXNzaW5nIHJhZGl4IHBhcmFtZXRlciI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGspOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gaXNQYXJzZUludChleHByZXNzaW9uOiB0cy5MZWZ0SGFuZFNpZGVFeHByZXNzaW9uKSB7DQogICAgcmV0dXJuIGlzSWRlbnRpZmllcihleHByZXNzaW9uKSAmJiBleHByZXNzaW9uLnRleHQgPT09ICJwYXJzZUludCI7DQp9DQoNCmZ1bmN0aW9uIGlzUHJvcGVydHlBY2Nlc3NQYXJzZUludCgNCiAgICBleHByZXNzaW9uOiB0cy5MZWZ0SGFuZFNpZGVFeHByZXNzaW9uLA0KKTogZXhwcmVzc2lvbiBpcyB0cy5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gew0KICAgIHJldHVybiBpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uKSAmJiBleHByZXNzaW9uLm5hbWUudGV4dCA9PT0gInBhcnNlSW50IjsNCn0NCg0KZnVuY3Rpb24gaXNQcm9wZXJ0eUFjY2Vzc09mSWRlbnRpZmllcigNCiAgICBleHByZXNzaW9uOiB0cy5MZWZ0SGFuZFNpZGVFeHByZXNzaW9uLA0KICAgIGlkZW50aWZlcnM6IHN0cmluZ1tdLA0KKTogZXhwcmVzc2lvbiBpcyB0cy5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gew0KICAgIHJldHVybiBpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uKSAmJiBpc0lkZW50aWZpZXIoZXhwcmVzc2lvbi5leHByZXNzaW9uKSAmJg0KICAgICAgICBpZGVudGlmZXJzLnNvbWUoKGlkZW50aWZlcikgPT4gKGV4cHJlc3Npb24uZXhwcmVzc2lvbiBhcyB0cy5JZGVudGlmaWVyKS50ZXh0ID09PSBpZGVudGlmZXIpOw0KfQ0KDQpmdW5jdGlvbiBpc1Byb3BlcnR5QWNjZXNzT2ZQcm9wZXJ0eSgNCiAgICBleHByZXNzaW9uOiB0cy5MZWZ0SGFuZFNpZGVFeHByZXNzaW9uLA0KICAgIGlkZW50aWZlcnM6IHN0cmluZ1tdLA0KKTogZXhwcmVzc2lvbiBpcyB0cy5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24gew0KICAgIHJldHVybiBpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uKSAmJiBpc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihleHByZXNzaW9uLmV4cHJlc3Npb24pICYmDQogICAgICAgIGlkZW50aWZlcnMuc29tZSgoaWRlbnRpZmVyKSA9PiAoZXhwcmVzc2lvbi5leHByZXNzaW9uIGFzIHRzLlByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbikubmFtZS50ZXh0ID09PSBpZGVudGlmZXIpOw0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPikgew0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzQ2FsbEV4cHJlc3Npb24obm9kZSkgJiYgbm9kZS5hcmd1bWVudHMubGVuZ3RoID09PSAxICYmDQogICAgICAgICAgICAoDQogICAgICAgICAgICAgICAgLy8gcGFyc2VJbnQoIjEyMyIpDQogICAgICAgICAgICAgICAgaXNQYXJzZUludChub2RlLmV4cHJlc3Npb24pIHx8DQogICAgICAgICAgICAgICAgLy8gd2luZG93LnBhcnNlSW50KCIxMjMiKSB8fCBnbG9iYWwucGFyc2VJbnQoIjEyMyIpIHx8IE51bWJlci5wYXJzZUludCgiMTIzIikNCiAgICAgICAgICAgICAgICBpc1Byb3BlcnR5QWNjZXNzUGFyc2VJbnQobm9kZS5leHByZXNzaW9uKSAmJg0KICAgICAgICAgICAgICAgIGlzUHJvcGVydHlBY2Nlc3NPZklkZW50aWZpZXIobm9kZS5leHByZXNzaW9uLCBbICJnbG9iYWwiLCAid2luZG93IiwgIk51bWJlciIgXSkgIHx8DQogICAgICAgICAgICAgICAgLy8gd2luZG93Lk51bWJlci5wYXJzZUludCgiMTIzIikgfHwgZ2xvYmFsLk51bWJlci5wYXJzZUludCgiMTIzIikNCiAgICAgICAgICAgICAgICBpc1Byb3BlcnR5QWNjZXNzUGFyc2VJbnQobm9kZS5leHByZXNzaW9uKSAmJg0KICAgICAgICAgICAgICAgIGlzUHJvcGVydHlBY2Nlc3NPZlByb3BlcnR5KG5vZGUuZXhwcmVzc2lvbiwgWyAiTnVtYmVyIiBdKSAmJg0KICAgICAgICAgICAgICAgIGlzUHJvcGVydHlBY2Nlc3NPZklkZW50aWZpZXIobm9kZS5leHByZXNzaW9uLmV4cHJlc3Npb24sIFsgImdsb2JhbCIsICJ3aW5kb3ciIF0pDQogICAgICAgICAgICApKSB7DQogICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "14667347FA436481DED7F74EA362287F",
              "algorithm": "md5"
            },
            {
              "value": "C59AAB0A2CEA4BF470345A7CCF9DB47D0EA99A6C",
              "algorithm": "sha-1"
            },
            {
              "value": "FB67ACAD994D4C506319250C59539456166EF5808A1FE3881D7A187C70BFC2F0",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/returnUndefinedRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "4F01F0D983B13811B179CB3446033573",
              "algorithm": "md5"
            },
            {
              "value": "3329A82CF5B627FD9F551D7BD6A396CB8297D6EC",
              "algorithm": "sha-1"
            },
            {
              "value": "7897A5CE0305E25893F8644B2F98791A2F54140D84C4D3841E246269051899B6",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/semicolonRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IE9QVElPTl9BTFdBWVMgPSAiYWx3YXlzIjsNCmNvbnN0IE9QVElPTl9ORVZFUiA9ICJuZXZlciI7DQpjb25zdCBPUFRJT05fSUdOT1JFX0JPVU5EX0NMQVNTX01FVEhPRFMgPSAiaWdub3JlLWJvdW5kLWNsYXNzLW1ldGhvZHMiOw0KY29uc3QgT1BUSU9OX1NUUklDVF9CT1VORF9DTEFTU19NRVRIT0RTID0gInN0cmljdC1ib3VuZC1jbGFzcy1tZXRob2RzIjsNCmNvbnN0IE9QVElPTl9JR05PUkVfSU5URVJGQUNFUyA9ICJpZ25vcmUtaW50ZXJmYWNlcyI7DQoNCmNvbnN0IGVudW0gQm91bmRDbGFzc01ldGhvZE9wdGlvbiB7DQogICAgRGVmYXVsdCwNCiAgICBJZ25vcmUsDQogICAgU3RyaWN0LA0KfQ0KDQppbnRlcmZhY2UgT3B0aW9ucyB7DQogICAgYm91bmRDbGFzc01ldGhvZHM6IEJvdW5kQ2xhc3NNZXRob2RPcHRpb247DQogICAgaW50ZXJmYWNlczogYm9vbGVhbjsNCn0NCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogInNlbWljb2xvbiIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiRW5mb3JjZXMgY29uc2lzdGVudCBzZW1pY29sb24gdXNhZ2UgYXQgdGhlIGVuZCBvZiBldmVyeSBzdGF0ZW1lbnQuIiwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgT25lIG9mIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzIG11c3QgYmUgcHJvdmlkZWQ6DQoNCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fQUxXQVlTfSJcYCBlbmZvcmNlcyBzZW1pY29sb25zIGF0IHRoZSBlbmQgb2YgZXZlcnkgc3RhdGVtZW50Lg0KICAgICAgICAgICAgKiBcYCIke09QVElPTl9ORVZFUn0iXGAgZGlzYWxsb3dzIHNlbWljb2xvbnMgYXQgdGhlIGVuZCBvZiBldmVyeSBzdGF0ZW1lbnQgZXhjZXB0IGZvciB3aGVuIHRoZXkgYXJlIG5lY2Vzc2FyeS4NCg0KICAgICAgICAgICAgVGhlIGZvbGxvd2luZyBhcmd1bWVudHMgbWF5IGJlIG9wdGlvbmFsbHkgcHJvdmlkZWQ6DQoNCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fSUdOT1JFX0lOVEVSRkFDRVN9IlxgIHNraXBzIGNoZWNraW5nIHNlbWljb2xvbnMgYXQgdGhlIGVuZCBvZiBpbnRlcmZhY2UgbWVtYmVycy4NCiAgICAgICAgICAgICogXGAiJHtPUFRJT05fSUdOT1JFX0JPVU5EX0NMQVNTX01FVEhPRFN9IlxgIHNraXBzIGNoZWNraW5nIHNlbWljb2xvbnMgYXQgdGhlIGVuZCBvZiBib3VuZCBjbGFzcyBtZXRob2RzLg0KICAgICAgICAgICAgKiBcYCIke09QVElPTl9TVFJJQ1RfQk9VTkRfQ0xBU1NfTUVUSE9EU30iXGAgZGlzYWJsZXMgYW55IHNwZWNpYWwgaGFuZGxpbmcgb2YgYm91bmQgY2xhc3MgbWV0aG9kcyBhbmQgdHJlYXRzIHRoZW0gYXMgYW55DQogICAgICAgICAgICBvdGhlciBhc3NpZ25tZW50LiBUaGlzIG9wdGlvbiBvdmVycmlkZXMgXGAiJHtPUFRJT05fSUdOT1JFX0JPVU5EX0NMQVNTX01FVEhPRFN9IlxgLg0KICAgICAgICBgLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICB0eXBlOiAiYXJyYXkiLA0KICAgICAgICAgICAgaXRlbXM6IFsNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzdHJpbmciLA0KICAgICAgICAgICAgICAgICAgICBlbnVtOiBbT1BUSU9OX0FMV0FZUywgT1BUSU9OX05FVkVSXSwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICAgICAgICAgIGVudW06IFtPUFRJT05fSUdOT1JFX0lOVEVSRkFDRVNdLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICBdLA0KICAgICAgICAgICAgYWRkaXRpb25hbEl0ZW1zOiBmYWxzZSwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFsNCiAgICAgICAgICAgIFt0cnVlLCBPUFRJT05fQUxXQVlTXSwNCiAgICAgICAgICAgIFt0cnVlLCBPUFRJT05fTkVWRVJdLA0KICAgICAgICAgICAgW3RydWUsIE9QVElPTl9BTFdBWVMsIE9QVElPTl9JR05PUkVfSU5URVJGQUNFU10sDQogICAgICAgICAgICBbdHJ1ZSwgT1BUSU9OX0FMV0FZUywgT1BUSU9OX0lHTk9SRV9CT1VORF9DTEFTU19NRVRIT0RTXSwNCiAgICAgICAgXSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfTUlTU0lORyA9ICJNaXNzaW5nIHNlbWljb2xvbiI7DQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19DT01NQSA9ICJQcm9wZXJ0aWVzIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgc2VtaWNvbG9ucyI7DQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19VTk5FQ0VTU0FSWSA9ICJVbm5lY2Vzc2FyeSBzZW1pY29sb24iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICBjb25zdCBvcHRpb25zOiBPcHRpb25zID0gew0KICAgICAgICAgICAgYm91bmRDbGFzc01ldGhvZHM6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9TVFJJQ1RfQk9VTkRfQ0xBU1NfTUVUSE9EUykgIT09IC0xDQogICAgICAgICAgICAgICAgPyBCb3VuZENsYXNzTWV0aG9kT3B0aW9uLlN0cmljdA0KICAgICAgICAgICAgICAgIDogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX0lHTk9SRV9CT1VORF9DTEFTU19NRVRIT0RTKSAhPT0gLTENCiAgICAgICAgICAgICAgICAgICAgPyBCb3VuZENsYXNzTWV0aG9kT3B0aW9uLklnbm9yZQ0KICAgICAgICAgICAgICAgICAgICA6IEJvdW5kQ2xhc3NNZXRob2RPcHRpb24uRGVmYXVsdCwNCiAgICAgICAgICAgIGludGVyZmFjZXM6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9JR05PUkVfSU5URVJGQUNFUykgPT09IC0xLA0KICAgICAgICB9Ow0KICAgICAgICBjb25zdCBXYWxrZXIgPSB0aGlzLnJ1bGVBcmd1bWVudHMuaW5kZXhPZihPUFRJT05fTkVWRVIpID09PSAtMSA/IFNlbWljb2xvbkFsd2F5c1dhbGtlciA6IFNlbWljb2xvbk5ldmVyV2Fsa2VyOw0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhXYWxrZXIobmV3IFdhbGtlcihzb3VyY2VGaWxlLCB0aGlzLnJ1bGVOYW1lLCBvcHRpb25zKSk7DQogICAgfQ0KfQ0KDQphYnN0cmFjdCBjbGFzcyBTZW1pY29sb25XYWxrZXIgZXh0ZW5kcyBMaW50LkFic3RyYWN0V2Fsa2VyPE9wdGlvbnM+IHsNCiAgICBwdWJsaWMgd2Fsayhzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKSB7DQogICAgICAgIGNvbnN0IGNiID0gKG5vZGU6IHRzLk5vZGUpOiB2b2lkID0+IHsNCiAgICAgICAgICAgIHRoaXMudmlzaXROb2RlKG5vZGUpOw0KICAgICAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgICAgIH07DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoc291cmNlRmlsZSwgY2IpOw0KICAgIH0NCg0KICAgIHByb3RlY3RlZCB2aXNpdE5vZGUobm9kZTogdHMuTm9kZSkgew0KICAgICAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlNlbWljb2xvbkNsYXNzRWxlbWVudDoNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvcnRVbm5lY2Vzc2FyeShub2RlLmVuZCk7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRW1wdHlTdGF0ZW1lbnQ6DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tFbXB0eVN0YXRlbWVudChub2RlKTsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Qcm9wZXJ0eURlY2xhcmF0aW9uOg0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0UHJvcGVydHlEZWNsYXJhdGlvbihub2RlIGFzIHRzLlByb3BlcnR5RGVjbGFyYXRpb24pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJvdGVjdGVkIHJlcG9ydFVubmVjZXNzYXJ5KHBvczogbnVtYmVyLCBub0ZpeD86IGJvb2xlYW4pIHsNCiAgICAgICAgdGhpcy5hZGRGYWlsdXJlKHBvcyAtIDEsIHBvcywgUnVsZS5GQUlMVVJFX1NUUklOR19VTk5FQ0VTU0FSWSwgbm9GaXggPyB1bmRlZmluZWQgOiBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZVRleHQocG9zIC0gMSwgMSkpOw0KICAgIH0NCg0KICAgIHByb3RlY3RlZCBjaGVja1NlbWljb2xvbk9yTGluZUJyZWFrKG5vZGU6IHRzLk5vZGUpIHsNCiAgICAgICAgaWYgKHRoaXMuc291cmNlRmlsZS50ZXh0W25vZGUuZW5kIC0gMV0gIT09ICI7Iikgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIGNvbnN0IG5leHRUb2tlbiA9IHV0aWxzLmdldE5leHRUb2tlbihub2RlLCB0aGlzLnNvdXJjZUZpbGUpITsNCiAgICAgICAgc3dpdGNoIChuZXh0VG9rZW4ua2luZCkgew0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkVuZE9mRmlsZVRva2VuOg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNsb3NlQnJhY2VUb2tlbjoNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvcnRVbm5lY2Vzc2FyeShub2RlLmVuZCk7DQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgIGlmICghdXRpbHMuaXNTYW1lTGluZSh0aGlzLnNvdXJjZUZpbGUsIG5vZGUuZW5kLCBuZXh0VG9rZW4uZW5kKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydFVubmVjZXNzYXJ5KG5vZGUuZW5kKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcm90ZWN0ZWQgY2hlY2tVbm5lY2Vzc2FyeShub2RlOiB0cy5Ob2RlKSB7DQogICAgICAgIGlmICh0aGlzLnNvdXJjZUZpbGUudGV4dFtub2RlLmVuZCAtIDFdICE9PSAiOyIpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBsYXN0VG9rZW4gPSB1dGlscy5nZXRQcmV2aW91c1Rva2VuKG5vZGUuZ2V0TGFzdFRva2VuKHRoaXMuc291cmNlRmlsZSksIHRoaXMuc291cmNlRmlsZSkhOw0KICAgICAgICAvLyB5aWVsZCBkb2VzIG5vdCBjb250aW51ZSBvbiB0aGUgbmV4dCBsaW5lIGlmIHRoZXJlIGlzIG5vIHlpZWxkZWQgZXhwcmVzc2lvbg0KICAgICAgICBpZiAobGFzdFRva2VuLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuWWllbGRLZXl3b3JkICYmIGxhc3RUb2tlbi5wYXJlbnQhLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuWWllbGRFeHByZXNzaW9uIHx8DQogICAgICAgICAgICAvLyBhcnJvdyBmdW5jdGlvbnMgd2l0aCBibG9jayBhcyBib2R5IGRvbid0IGNvbnRpbnVlIG9uIHRoZSBuZXh0IGxpbmUNCiAgICAgICAgICAgIGxhc3RUb2tlbi5raW5kID09PSB0cy5TeW50YXhLaW5kLkNsb3NlQnJhY2VUb2tlbiAmJiBsYXN0VG9rZW4ucGFyZW50IS5raW5kID09PSB0cy5TeW50YXhLaW5kLkJsb2NrICYmDQogICAgICAgICAgICAgICAgbGFzdFRva2VuLnBhcmVudCEucGFyZW50IS5raW5kID09PSB0cy5TeW50YXhLaW5kLkFycm93RnVuY3Rpb24pIHsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrU2VtaWNvbG9uT3JMaW5lQnJlYWsobm9kZSk7DQogICAgICAgIH0NCiAgICAgICAgY29uc3QgbmV4dFRva2VuID0gdXRpbHMuZ2V0TmV4dFRva2VuKG5vZGUsIHRoaXMuc291cmNlRmlsZSkhOw0KICAgICAgICBzd2l0Y2ggKG5leHRUb2tlbi5raW5kKSB7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuT3BlblBhcmVuVG9rZW46DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuT3BlbkJyYWNrZXRUb2tlbjoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5QbHVzVG9rZW46DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTWludXNUb2tlbjoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5SZWd1bGFyRXhwcmVzc2lvbkxpdGVyYWw6DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTGVzc1RoYW5Ub2tlbjoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Ob1N1YnN0aXR1dGlvblRlbXBsYXRlTGl0ZXJhbDoNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5UZW1wbGF0ZUhlYWQ6DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ2xvc2VCcmFjZVRva2VuOg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkVuZE9mRmlsZVRva2VuOg0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcG9ydFVubmVjZXNzYXJ5KG5vZGUuZW5kKTsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgaWYgKCF1dGlscy5pc1NhbWVMaW5lKHRoaXMuc291cmNlRmlsZSwgbm9kZS5lbmQsIG5leHRUb2tlbi5lbmQpKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMucmVwb3J0VW5uZWNlc3Nhcnkobm9kZS5lbmQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjaGVja1Byb3BlcnR5RGVjbGFyYXRpb24obm9kZTogdHMuUHJvcGVydHlEZWNsYXJhdGlvbik6IHZvaWQ7DQoNCiAgICBwcml2YXRlIGNoZWNrRW1wdHlTdGF0ZW1lbnQobm9kZTogdHMuTm9kZSkgew0KICAgICAgICAvLyBBbiBlbXB0eSBzdGF0ZW1lbnQgaXMgb25seSBldmVyIHVzZWZ1bCB3aGVuIGl0IGlzIHRoZSBvbmx5IHN0YXRlbWVudCBpbnNpZGUgYSBsb29wDQogICAgICAgIGlmICghdXRpbHMuaXNJdGVyYXRpb25TdGF0ZW1lbnQobm9kZS5wYXJlbnQhKSkgew0KICAgICAgICAgICAgY29uc3QgcGFyZW50S2luZCA9IG5vZGUucGFyZW50IS5raW5kOw0KICAgICAgICAgICAgLy8gZG9uJ3QgcmVtb3ZlIGVtcHR5IHN0YXRlbWVudCBpZiBpdCBpcyBhIGRpcmVjdCBjaGlsZCBvZiBpZiwgd2l0aCBvciBhIExhYmVsZWRTdGF0ZW1lbnQNCiAgICAgICAgICAgIC8vIG90aGVyd2lzZSB0aGlzIHdvdWxkIHVuaW50ZW50aW9uYWxseSBjaGFuZ2UgY29udHJvbCBmbG93DQogICAgICAgICAgICBjb25zdCBub0ZpeCA9IHBhcmVudEtpbmQgPT09IHRzLlN5bnRheEtpbmQuSWZTdGF0ZW1lbnQgfHwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50S2luZCA9PT0gdHMuU3ludGF4S2luZC5MYWJlbGVkU3RhdGVtZW50IHx8DQogICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEtpbmQgPT09IHRzLlN5bnRheEtpbmQuV2l0aFN0YXRlbWVudDsNCiAgICAgICAgICAgIHRoaXMucmVwb3J0VW5uZWNlc3Nhcnkobm9kZS5lbmQsIG5vRml4KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgdmlzaXRQcm9wZXJ0eURlY2xhcmF0aW9uKG5vZGU6IHRzLlByb3BlcnR5RGVjbGFyYXRpb24pIHsNCiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBhIG11bHRpLWxpbmUgYXJyb3cgZnVuY3Rpb24NCiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ib3VuZENsYXNzTWV0aG9kcyAhPT0gQm91bmRDbGFzc01ldGhvZE9wdGlvbi5TdHJpY3QgJiYNCiAgICAgICAgICAgIG5vZGUuaW5pdGlhbGl6ZXIgIT09IHVuZGVmaW5lZCAmJg0KICAgICAgICAgICAgbm9kZS5pbml0aWFsaXplci5raW5kID09PSB0cy5TeW50YXhLaW5kLkFycm93RnVuY3Rpb24gJiYNCiAgICAgICAgICAgICF1dGlscy5pc1NhbWVMaW5lKHRoaXMuc291cmNlRmlsZSwgbm9kZS5nZXRTdGFydCh0aGlzLnNvdXJjZUZpbGUpLCBub2RlLmVuZCkpIHsNCiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYm91bmRDbGFzc01ldGhvZHMgPT09IEJvdW5kQ2xhc3NNZXRob2RPcHRpb24uRGVmYXVsdCkgew0KICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tVbm5lY2Vzc2FyeShub2RlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRoaXMuY2hlY2tQcm9wZXJ0eURlY2xhcmF0aW9uKG5vZGUpOw0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpjbGFzcyBTZW1pY29sb25BbHdheXNXYWxrZXIgZXh0ZW5kcyBTZW1pY29sb25XYWxrZXIgew0KICAgIHByb3RlY3RlZCB2aXNpdE5vZGUobm9kZTogdHMuTm9kZSkgew0KICAgICAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlZhcmlhYmxlU3RhdGVtZW50Og0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkV4cHJlc3Npb25TdGF0ZW1lbnQ6DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUmV0dXJuU3RhdGVtZW50Og0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkJyZWFrU3RhdGVtZW50Og0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNvbnRpbnVlU3RhdGVtZW50Og0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlRocm93U3RhdGVtZW50Og0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkltcG9ydEVxdWFsc0RlY2xhcmF0aW9uOg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkRvU3RhdGVtZW50Og0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkV4cG9ydEFzc2lnbm1lbnQ6DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVHlwZUFsaWFzRGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSW1wb3J0RGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRXhwb3J0RGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRGVidWdnZXJTdGF0ZW1lbnQ6DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tNaXNzaW5nKG5vZGUpOw0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1vZHVsZURlY2xhcmF0aW9uOg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1ldGhvZERlY2xhcmF0aW9uOg0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRGVjbGFyYXRpb246DQogICAgICAgICAgICAgICAgLy8gY2hlY2sgc2hvcnRoYW5kIG1vZHVsZSBkZWNsYXJhdGlvbnMgYW5kIG1ldGhvZCAvIGZ1bmN0aW9uIHNpZ25hdHVyZXMNCiAgICAgICAgICAgICAgICBpZiAoKG5vZGUgYXMgdHMuRnVuY3Rpb25MaWtlRGVjbGFyYXRpb24gfCB0cy5Nb2R1bGVEZWNsYXJhdGlvbikuYm9keSA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tNaXNzaW5nKG5vZGUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5JbnRlcmZhY2VEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmludGVyZmFjZXMpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0ludGVyZmFjZShub2RlIGFzIHRzLkludGVyZmFjZURlY2xhcmF0aW9uKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgIHJldHVybiBzdXBlci52aXNpdE5vZGUobm9kZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcm90ZWN0ZWQgY2hlY2tQcm9wZXJ0eURlY2xhcmF0aW9uKG5vZGU6IHRzLlByb3BlcnR5RGVjbGFyYXRpb24pIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tNaXNzaW5nKG5vZGUpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgY2hlY2tNaXNzaW5nKG5vZGU6IHRzLk5vZGUpIHsNCiAgICAgICAgaWYgKHRoaXMuc291cmNlRmlsZS50ZXh0W25vZGUuZW5kIC0gMV0gIT09ICI7Iikgew0KICAgICAgICAgICAgdGhpcy5yZXBvcnRNaXNzaW5nKG5vZGUuZW5kKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHByaXZhdGUgcmVwb3J0TWlzc2luZyhwb3M6IG51bWJlcikgew0KICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdChwb3MsIDAsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfTUlTU0lORywgTGludC5SZXBsYWNlbWVudC5hcHBlbmRUZXh0KHBvcywgIjsiKSk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBjaGVja0ludGVyZmFjZShub2RlOiB0cy5JbnRlcmZhY2VEZWNsYXJhdGlvbikgew0KICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiBub2RlLm1lbWJlcnMpIHsNCiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zb3VyY2VGaWxlLnRleHRbbWVtYmVyLmVuZCAtIDFdKSB7DQogICAgICAgICAgICAgICAgY2FzZSAiOyI6IGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgIiwiOg0KICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZhaWx1cmVBdChtZW1iZXIuZW5kIC0gMSwgMSwgUnVsZS5GQUlMVVJFX1NUUklOR19DT01NQSwgbmV3IExpbnQuUmVwbGFjZW1lbnQobWVtYmVyLmVuZCAtIDEsIDEsICI7IikpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydE1pc3NpbmcobWVtYmVyLmVuZCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9DQoNCmNsYXNzIFNlbWljb2xvbk5ldmVyV2Fsa2VyIGV4dGVuZHMgU2VtaWNvbG9uV2Fsa2VyIHsNCiAgICBwcm90ZWN0ZWQgdmlzaXROb2RlKG5vZGU6IHRzLk5vZGUpIHsNCiAgICAgICAgc3dpdGNoIChub2RlLmtpbmQpIHsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5FeHByZXNzaW9uU3RhdGVtZW50Og0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlRocm93U3RhdGVtZW50Og0KICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkV4cG9ydEFzc2lnbm1lbnQ6DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tVbm5lY2Vzc2FyeShub2RlIGFzIHRzLlN0YXRlbWVudCk7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVmFyaWFibGVTdGF0ZW1lbnQ6DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tWYXJpYWJsZVN0YXRlbWVudChub2RlIGFzIHRzLlZhcmlhYmxlU3RhdGVtZW50KTsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5SZXR1cm5TdGF0ZW1lbnQ6DQogICAgICAgICAgICAgICAgaWYgKChub2RlIGFzIHRzLlJldHVyblN0YXRlbWVudCkuZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBkb2VzIG5vdCBjb250aW51ZSBvbiB0aGUgbmV4dCBsaW5lIGlmIHRoZSBpcyBubyByZXR1cm5lZCBleHByZXNzaW9uDQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrU2VtaWNvbG9uT3JMaW5lQnJlYWsobm9kZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrVW5uZWNlc3Nhcnkobm9kZSk7DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVHlwZUFsaWFzRGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSW1wb3J0RXF1YWxzRGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSW1wb3J0RGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRXhwb3J0RGVjbGFyYXRpb246DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRGVidWdnZXJTdGF0ZW1lbnQ6DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQnJlYWtTdGF0ZW1lbnQ6DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ29udGludWVTdGF0ZW1lbnQ6DQogICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRG9TdGF0ZW1lbnQ6DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tTZW1pY29sb25PckxpbmVCcmVhayhub2RlKTsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Nb2R1bGVEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgICAgICAvLyBzaG9ydGhhbmQgbW9kdWxlIGRlY2xhcmF0aW9uDQogICAgICAgICAgICAgICAgaWYgKChub2RlIGFzIHRzLk1vZHVsZURlY2xhcmF0aW9uKS5ib2R5ID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1Nob3J0aGFuZE1vZHVsZURlY2xhcmF0aW9uKG5vZGUgYXMgdHMuTW9kdWxlRGVjbGFyYXRpb24pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5NZXRob2REZWNsYXJhdGlvbjoNCiAgICAgICAgICAgICAgICAvLyBjaGVjayBtZXRob2Qgc2lnbmF0dXJlDQogICAgICAgICAgICAgICAgaWYgKChub2RlIGFzIHRzLk1ldGhvZERlY2xhcmF0aW9uKS5ib2R5ID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1NlbWljb2xvbk9yTGluZUJyZWFrKG5vZGUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5GdW5jdGlvbkRlY2xhcmF0aW9uOg0KICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZ1bmN0aW9uIHNpZ25hdHVyZQ0KICAgICAgICAgICAgICAgIGlmICgobm9kZSBhcyB0cy5GdW5jdGlvbkRlY2xhcmF0aW9uKS5ib2R5ID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1NlbWljb2xvbk9yTGluZUJyZWFrKG5vZGUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5JbnRlcmZhY2VEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmludGVyZmFjZXMpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0ludGVyZmFjZShub2RlIGFzIHRzLkludGVyZmFjZURlY2xhcmF0aW9uKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgIHJldHVybiBzdXBlci52aXNpdE5vZGUobm9kZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcm90ZWN0ZWQgY2hlY2tQcm9wZXJ0eURlY2xhcmF0aW9uKG5vZGU6IHRzLlByb3BlcnR5RGVjbGFyYXRpb24pIHsNCiAgICAgICAgaWYgKG5vZGUuaW5pdGlhbGl6ZXIgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tTZW1pY29sb25PckxpbmVCcmVhayhub2RlKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdGhpcy5jaGVja1VubmVjZXNzYXJ5KG5vZGUpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgY2hlY2tWYXJpYWJsZVN0YXRlbWVudChub2RlOiB0cy5WYXJpYWJsZVN0YXRlbWVudCkgew0KICAgICAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBub2RlLmRlY2xhcmF0aW9uTGlzdC5kZWNsYXJhdGlvbnM7DQogICAgICAgIGlmIChkZWNsYXJhdGlvbnNbZGVjbGFyYXRpb25zLmxlbmd0aCAtIDFdLmluaXRpYWxpemVyID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIC8vIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGRvZXMgbm90IGNvbnRpbnVlIG9uIHRoZSBuZXh0IGxpbmUgaWYgaXQgaGFzIG5vIGluaXRpYWxpemVyDQogICAgICAgICAgICByZXR1cm4gdGhpcy5jaGVja1NlbWljb2xvbk9yTGluZUJyZWFrKG5vZGUpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0aGlzLmNoZWNrVW5uZWNlc3Nhcnkobm9kZSk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBjaGVja1Nob3J0aGFuZE1vZHVsZURlY2xhcmF0aW9uKG5vZGU6IHRzLk1vZHVsZURlY2xhcmF0aW9uKSB7DQogICAgICAgIGNvbnN0IG5leHRTdGF0ZW1lbnQgPSB1dGlscy5nZXROZXh0U3RhdGVtZW50KG5vZGUpOw0KICAgICAgICBpZiAobmV4dFN0YXRlbWVudCA9PT0gdW5kZWZpbmVkIHx8IG5leHRTdGF0ZW1lbnQua2luZCAhPT0gdHMuU3ludGF4S2luZC5CbG9jaykgew0KICAgICAgICAgICAgdGhpcy5jaGVja1NlbWljb2xvbk9yTGluZUJyZWFrKG5vZGUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSBjaGVja0ludGVyZmFjZShub2RlOiB0cy5JbnRlcmZhY2VEZWNsYXJhdGlvbikgew0KICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiBub2RlLm1lbWJlcnMpIHsNCiAgICAgICAgICAgIHRoaXMuY2hlY2tTZW1pY29sb25PckxpbmVCcmVhayhtZW1iZXIpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "E24F329ACE6B6302BAFAA3D6A5A74362",
              "algorithm": "md5"
            },
            {
              "value": "A6EFE1EBA3B39E1E79AAA217575F1B0D770063A4",
              "algorithm": "sha-1"
            },
            {
              "value": "8A4EF9C77B691D52A8B68F29D6128C6630A974586D5725A0EFA6EA5337FCB36E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/spaceBeforeFunctionParenRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZ2V0Q2hpbGRPZktpbmQsIGhhc01vZGlmaWVyIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KDQpjb25zdCBBTFdBWVNfT1JfTkVWRVIgPSB7DQogICAgZW51bTogWyJhbHdheXMiLCAibmV2ZXIiXSwNCiAgICB0eXBlOiAic3RyaW5nIiwNCn07DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgZGVzY3JpcHRpb246ICJSZXF1aXJlIG9yIGRpc2FsbG93IGEgc3BhY2UgYmVmb3JlIGZ1bmN0aW9uIHBhcmVudGhlc2lzIiwNCiAgICAgICAgaGFzRml4OiB0cnVlLA0KICAgICAgICBvcHRpb25FeGFtcGxlczogWw0KICAgICAgICAgICAgdHJ1ZSwNCiAgICAgICAgICAgIFt0cnVlLCAiYWx3YXlzIl0sDQogICAgICAgICAgICBbdHJ1ZSwgIm5ldmVyIl0sDQogICAgICAgICAgICBbdHJ1ZSwge2Fub255bW91czogImFsd2F5cyIsIG5hbWVkOiAibmV2ZXIiLCBhc3luY0Fycm93OiAiYWx3YXlzIn1dLA0KICAgICAgICBdLA0KICAgICAgICBvcHRpb25zOiB7DQogICAgICAgICAgICBwcm9wZXJ0aWVzOiB7DQogICAgICAgICAgICAgICAgYW5vbnltb3VzOiBBTFdBWVNfT1JfTkVWRVIsDQogICAgICAgICAgICAgICAgYXN5bmNBcnJvdzogQUxXQVlTX09SX05FVkVSLA0KICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yOiBBTFdBWVNfT1JfTkVWRVIsDQogICAgICAgICAgICAgICAgbWV0aG9kOiBBTFdBWVNfT1JfTkVWRVIsDQogICAgICAgICAgICAgICAgbmFtZWQ6IEFMV0FZU19PUl9ORVZFUiwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB0eXBlOiAib2JqZWN0IiwNCiAgICAgICAgfSwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIE9uZSBhcmd1bWVudCB3aGljaCBpcyBhbiBvYmplY3Qgd2hpY2ggbWF5IGNvbnRhaW4gdGhlIGtleXMgXGBhbm9ueW1vdXNcYCwgXGBuYW1lZFxgLCBhbmQgXGBhc3luY0Fycm93XGANCiAgICAgICAgICAgIFRoZXNlIHNob3VsZCBiZSBzZXQgdG8gZWl0aGVyIFxgImFsd2F5cyJcYCBvciBcYCJuZXZlciJcYC4NCg0KICAgICAgICAgICAgKiBcYCJhbm9ueW1vdXMiXGAgY2hlY2tzIGJlZm9yZSB0aGUgb3BlbmluZyBwYXJlbiBpbiBhbm9ueW1vdXMgZnVuY3Rpb25zDQogICAgICAgICAgICAqIFxgIm5hbWVkIlxgIGNoZWNrcyBiZWZvcmUgdGhlIG9wZW5pbmcgcGFyZW4gaW4gbmFtZWQgZnVuY3Rpb25zDQogICAgICAgICAgICAqIFxgImFzeW5jQXJyb3ciXGAgY2hlY2tzIGJlZm9yZSB0aGUgb3BlbmluZyBwYXJlbiBpbiBhc3luYyBhcnJvdyBmdW5jdGlvbnMNCiAgICAgICAgICAgICogXGAibWV0aG9kIlxgIGNoZWNrcyBiZWZvcmUgdGhlIG9wZW5pbmcgcGFyZW4gaW4gY2xhc3MgbWV0aG9kcw0KICAgICAgICAgICAgKiBcYCJjb25zdHJ1Y3RvciJcYCBjaGVja3MgYmVmb3JlIHRoZSBvcGVuaW5nIHBhcmVuIGluIGNsYXNzIGNvbnN0cnVjdG9ycw0KICAgICAgICBgLA0KICAgICAgICBydWxlTmFtZTogInNwYWNlLWJlZm9yZS1mdW5jdGlvbi1wYXJlbiIsDQogICAgICAgIHR5cGU6ICJzdHlsZSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIHB1YmxpYyBzdGF0aWMgSU5WQUxJRF9XSElURVNQQUNFX0VSUk9SID0gIlNwYWNlcyBiZWZvcmUgZnVuY3Rpb24gcGFyZW5zIGFyZSBkaXNhbGxvd2VkIjsNCiAgICBwdWJsaWMgc3RhdGljIE1JU1NJTkdfV0hJVEVTUEFDRV9FUlJPUiA9ICJNaXNzaW5nIHdoaXRlc3BhY2UgYmVmb3JlIGZ1bmN0aW9uIHBhcmVucyI7DQoNCiAgICBwdWJsaWMgYXBwbHkoc291cmNlRmlsZTogdHMuU291cmNlRmlsZSk6IExpbnQuUnVsZUZhaWx1cmVbXSB7DQogICAgICAgIHJldHVybiB0aGlzLmFwcGx5V2l0aEZ1bmN0aW9uKHNvdXJjZUZpbGUsIHdhbGssIHBhcnNlT3B0aW9ucyh0aGlzLnJ1bGVBcmd1bWVudHNbMF0gYXMgT3B0aW9uIHwgT3B0aW9ucyB8IHVuZGVmaW5lZCkpOw0KICAgIH0NCn0NCg0KdHlwZSBPcHRpb25OYW1lID0gImFub255bW91cyIgfCAiYXN5bmNBcnJvdyIgfCAiY29uc3RydWN0b3IiIHwgIm1ldGhvZCIgfCAibmFtZWQiOw0KY29uc3Qgb3B0aW9uTmFtZXM6IE9wdGlvbk5hbWVbXSA9IFsiYW5vbnltb3VzIiwgImFzeW5jQXJyb3ciLCAiY29uc3RydWN0b3IiLCAibWV0aG9kIiwgIm5hbWVkIl07DQp0eXBlIE9wdGlvbiA9ICJhbHdheXMiIHwgIm5ldmVyIjsNCnR5cGUgT3B0aW9ucyA9IFBhcnRpYWw8UmVjb3JkPE9wdGlvbk5hbWUsIE9wdGlvbj4+Ow0KDQpmdW5jdGlvbiBwYXJzZU9wdGlvbnMoanNvbjogT3B0aW9uIHwgT3B0aW9ucyB8IHVuZGVmaW5lZCk6IE9wdGlvbnMgew0KICAgIC8vIE5lZWQgdG8gc3BlY2lmeSBjb25zdHJ1Y3RvciBvciBpdCB3aWxsIGJlIE9iamVjdA0KICAgIGNvbnN0IG9wdGlvbnM6IE9wdGlvbnMgPSB7IGNvbnN0cnVjdG9yOiB1bmRlZmluZWQgfTsNCiAgICBmb3IgKGNvbnN0IG9wdGlvbk5hbWUgb2Ygb3B0aW9uTmFtZXMpIHsNCiAgICAgICAgb3B0aW9uc1tvcHRpb25OYW1lXSA9IHR5cGVvZiBqc29uID09PSAib2JqZWN0IiA/IGpzb25bb3B0aW9uTmFtZV0gOiBqc29uID09PSB1bmRlZmluZWQgPyAiYWx3YXlzIiA6IGpzb247DQogICAgfQ0KICAgIHJldHVybiBvcHRpb25zOw0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDxPcHRpb25zPik6IHZvaWQgew0KICAgIGNvbnN0IHsgb3B0aW9ucywgc291cmNlRmlsZSB9ID0gY3R4Ow0KICAgIHRzLmZvckVhY2hDaGlsZChzb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGNvbnN0IG9wdGlvbiA9IGdldE9wdGlvbihub2RlLCBvcHRpb25zKTsNCiAgICAgICAgaWYgKG9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICBjaGVjayhub2RlLCBvcHRpb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCg0KICAgIGZ1bmN0aW9uIGNoZWNrKG5vZGU6IHRzLk5vZGUsIG9wdGlvbjogImFsd2F5cyIgfCAibmV2ZXIiKTogdm9pZCB7DQogICAgICAgIGNvbnN0IG9wZW5QYXJlbiA9IGdldENoaWxkT2ZLaW5kKG5vZGUsIHRzLlN5bnRheEtpbmQuT3BlblBhcmVuVG9rZW4sIHNvdXJjZUZpbGUpOw0KICAgICAgICAvLyBvcGVuUGFyZW4gbWF5IGJlIG1pc3NpbmcgZm9yIGFuIGFzeW5jIGFycm93IGZ1bmN0aW9uIGBhc3luYyB4ID0+IC4uLmAuDQogICAgICAgIGlmIChvcGVuUGFyZW4gPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH0NCg0KICAgICAgICBjb25zdCBoYXNTcGFjZSA9IExpbnQuaXNXaGl0ZVNwYWNlKHNvdXJjZUZpbGUudGV4dC5jaGFyQ29kZUF0KG9wZW5QYXJlbi5lbmQgLSAyKSk7DQoNCiAgICAgICAgaWYgKGhhc1NwYWNlICYmIG9wdGlvbiA9PT0gIm5ldmVyIikgew0KICAgICAgICAgICAgY29uc3QgcG9zID0gb3BlblBhcmVuLmdldFN0YXJ0KCkgLSAxOw0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdChwb3MsIDEsIFJ1bGUuSU5WQUxJRF9XSElURVNQQUNFX0VSUk9SLCBMaW50LlJlcGxhY2VtZW50LmRlbGV0ZVRleHQocG9zLCAxKSk7DQogICAgICAgIH0gZWxzZSBpZiAoIWhhc1NwYWNlICYmIG9wdGlvbiA9PT0gImFsd2F5cyIpIHsNCiAgICAgICAgICAgIGNvbnN0IHBvcyA9IG9wZW5QYXJlbi5nZXRTdGFydCgpOw0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdChwb3MsIDEsIFJ1bGUuTUlTU0lOR19XSElURVNQQUNFX0VSUk9SLCBMaW50LlJlcGxhY2VtZW50LmFwcGVuZFRleHQocG9zLCAiICIpKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gZ2V0T3B0aW9uKG5vZGU6IHRzLk5vZGUsIG9wdGlvbnM6IE9wdGlvbnMpOiBPcHRpb24gfCB1bmRlZmluZWQgew0KICAgIHN3aXRjaCAobm9kZS5raW5kKSB7DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5BcnJvd0Z1bmN0aW9uOg0KICAgICAgICAgICAgcmV0dXJuICFoYXNUeXBlUGFyYW1ldGVycyhub2RlKSAmJiBoYXNNb2RpZmllcihub2RlLm1vZGlmaWVycywgdHMuU3ludGF4S2luZC5Bc3luY0tleXdvcmQpDQogICAgICAgICAgICAgICAgPyBvcHRpb25zLmFzeW5jQXJyb3cgOiB1bmRlZmluZWQ7DQoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkNvbnN0cnVjdG9yOg0KICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuY29uc3RydWN0b3I7DQoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRGVjbGFyYXRpb246DQogICAgICAgICAgICAvLyBuYW1lIGlzIG9wdGlvbmFsIGZvciBmdW5jdGlvbiBkZWNsYXJhdGlvbiB3aGljaCBpcyBkZWZhdWx0IGV4cG9ydCAoVFMgd2lsbCBlbWl0IGVycm9yIGluIG90aGVyIGNhc2VzKS4NCiAgICAgICAgICAgIC8vIENhbiBiZSBoYW5kbGVkIGluIHRoZSBzYW1lIHdheSBhcyBmdW5jdGlvbiBleHByZXNzaW9uLg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRnVuY3Rpb25FeHByZXNzaW9uOiB7DQogICAgICAgICAgICBjb25zdCBmdW5jdGlvbk5hbWUgPSAobm9kZSBhcyB0cy5GdW5jdGlvbkV4cHJlc3Npb24pLm5hbWU7DQogICAgICAgICAgICBjb25zdCBoYXNOYW1lID0gZnVuY3Rpb25OYW1lICE9PSB1bmRlZmluZWQgJiYgZnVuY3Rpb25OYW1lLnRleHQgIT09ICIiOw0KDQogICAgICAgICAgICByZXR1cm4gaGFzTmFtZSA/IG9wdGlvbnMubmFtZWQgOiAhaGFzVHlwZVBhcmFtZXRlcnMobm9kZSkgPyBvcHRpb25zLmFub255bW91cyA6IHVuZGVmaW5lZDsNCiAgICAgICAgfQ0KDQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5NZXRob2REZWNsYXJhdGlvbjoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1ldGhvZFNpZ25hdHVyZToNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkdldEFjY2Vzc29yOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuU2V0QWNjZXNzb3I6DQogICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5tZXRob2Q7DQoNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBoYXNUeXBlUGFyYW1ldGVycyhub2RlOiB0cy5Ob2RlKTogYm9vbGVhbiB7DQogICAgcmV0dXJuIChub2RlIGFzIHRzLlNpZ25hdHVyZURlY2xhcmF0aW9uKS50eXBlUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkOw0KfQ0K"
          },
          "hashes": [
            {
              "value": "1755F445BB7EEA4D37A01C31AB1A8780",
              "algorithm": "md5"
            },
            {
              "value": "B7DDB3125E83A705751286341A94AD5892FE8C7A",
              "algorithm": "sha-1"
            },
            {
              "value": "9ACD1D2E66A9A07B075F89B8CCED6A586BB8F14CF13E07241827AD3213D7DE19",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/spaceWithinParensRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "594F3335CEDAFF785AA796526C57C0C9",
              "algorithm": "md5"
            },
            {
              "value": "67FB87BF64729E75DB3CCE62100503ED42BEFAD0",
              "algorithm": "sha-1"
            },
            {
              "value": "4801213F7B731C66491CED359E8172790223E006646C9C39FFE921F2BC77BCFE",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/strictBooleanExpressionsRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "C6461DEFD0A38D968828C059735DF3D9",
              "algorithm": "md5"
            },
            {
              "value": "45597513B21FBDBD7D547EE8D5DD56AA77F72A8D",
              "algorithm": "sha-1"
            },
            {
              "value": "FA16644619D778C7B8F4F03D4883D92ECE0B599C6F88F315AF0DFEE78C3ED20A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/strictTypePredicatesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCaW5hcnlFeHByZXNzaW9uLCBpc0lkZW50aWZpZXIsIGlzTGl0ZXJhbEV4cHJlc3Npb24sIGlzVHlwZUZsYWdTZXQsIGlzVW5pb25UeXBlIH0gZnJvbSAidHN1dGlscyI7DQoNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KaW1wb3J0IHsgc2hvd1dhcm5pbmdPbmNlIH0gZnJvbSAiLi4vZXJyb3IiOw0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCi8vIHRzbGludDpkaXNhYmxlOm5vLWJpdHdpc2UNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLlR5cGVkUnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogInN0cmljdC10eXBlLXByZWRpY2F0ZXMiLA0KICAgICAgICBkZXNjcmlwdGlvbjogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBXYXJucyBmb3IgdHlwZSBwcmVkaWNhdGVzIHRoYXQgYXJlIGFsd2F5cyB0cnVlIG9yIGFsd2F5cyBmYWxzZS4NCiAgICAgICAgICAgIFdvcmtzIGZvciAndHlwZW9mJyBjb21wYXJpc29ucyB0byBjb25zdGFudHMgKGUuZy4gJ3R5cGVvZiBmb28gPT09ICJzdHJpbmciJyksIGFuZCBlcXVhbGl0eSBjb21wYXJpc29uIHRvICdudWxsJy8ndW5kZWZpbmVkJy4NCiAgICAgICAgICAgIChUeXBlU2NyaXB0IHdvbid0IGxldCB5b3UgY29tcGFyZSAnMSA9PT0gMicsIGJ1dCBpdCBoYXMgYW4gZXhjZXB0aW9uIGZvciAnMSA9PT0gdW5kZWZpbmVkJy4pDQogICAgICAgICAgICBEb2VzIG5vdCB5ZXQgd29yayBmb3IgJ2luc3RhbmNlb2YnLg0KICAgICAgICAgICAgRG9lcyAqbm90KiB3YXJuIGZvciAnaWYgKHgueSknIHdoZXJlICd4LnknIGlzIGFsd2F5cyB0cnV0aHkuIEZvciB0aGF0LCBzZWUgc3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnMuDQoNCiAgICAgICAgICAgIFRoaXMgcnVsZSByZXF1aXJlcyBcYHN0cmljdE51bGxDaGVja3NcYCB0byB3b3JrIHByb3Blcmx5LmAsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUuIiwNCiAgICAgICAgb3B0aW9uczogbnVsbCwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlXSwNCiAgICAgICAgdHlwZTogImZ1bmN0aW9uYWxpdHkiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogdHJ1ZSwNCiAgICAgICAgcmVxdWlyZXNUeXBlSW5mbzogdHJ1ZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HX0JBRF9UWVBFT0YgPSAiQmFkIGNvbXBhcmlzb24gZm9yICd0eXBlb2YnLiI7DQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HKHZhbHVlOiBib29sZWFuKTogc3RyaW5nIHsNCiAgICAgICAgcmV0dXJuIGBFeHByZXNzaW9uIGlzIGFsd2F5cyAke3ZhbHVlfS5gOw0KICAgIH0NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJQ1RfUFJFRkVSX1NUUklDVF9FUVVBTFModmFsdWU6ICJudWxsIiB8ICJ1bmRlZmluZWQiLCBpc1Bvc2l0aXZlOiBib29sZWFuKSB7DQogICAgICAgIHJldHVybiBgVXNlICcke2lzUG9zaXRpdmUgPyAiPT09IiA6ICIhPT0ifSAke3ZhbHVlfScgaW5zdGVhZC5gOw0KICAgIH0NCg0KICAgIHB1YmxpYyBhcHBseVdpdGhQcm9ncmFtKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIHByb2dyYW06IHRzLlByb2dyYW0pOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICBpZiAoIUxpbnQuaXNTdHJpY3ROdWxsQ2hlY2tzRW5hYmxlZChwcm9ncmFtLmdldENvbXBpbGVyT3B0aW9ucygpKSkgew0KICAgICAgICAgICAgc2hvd1dhcm5pbmdPbmNlKCJzdHJpY3QtdHlwZS1wcmVkaWNhdGVzIGRvZXMgbm90IHdvcmsgd2l0aG91dCAtLXN0cmljdE51bGxDaGVja3MiKTsNCiAgICAgICAgICAgIHJldHVybiBbXTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB1bmRlZmluZWQsIHByb2dyYW0uZ2V0VHlwZUNoZWNrZXIoKSk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPiwgY2hlY2tlcjogdHMuVHlwZUNoZWNrZXIpOiB2b2lkIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmIChpc0JpbmFyeUV4cHJlc3Npb24obm9kZSkpIHsNCiAgICAgICAgICAgIGNvbnN0IGVxdWFscyA9IExpbnQuZ2V0RXF1YWxzS2luZChub2RlLm9wZXJhdG9yVG9rZW4pOw0KICAgICAgICAgICAgaWYgKGVxdWFscyAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgY2hlY2tFcXVhbHMobm9kZSwgZXF1YWxzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCg0KICAgIGZ1bmN0aW9uIGNoZWNrRXF1YWxzKG5vZGU6IHRzLkJpbmFyeUV4cHJlc3Npb24sIHsgaXNTdHJpY3QsIGlzUG9zaXRpdmUgfTogTGludC5FcXVhbHNLaW5kKTogdm9pZCB7DQogICAgICAgIGNvbnN0IGV4cHJQcmVkID0gZ2V0VHlwZVByZWRpY2F0ZShub2RlLCBpc1N0cmljdCk7DQogICAgICAgIGlmIChleHByUHJlZCA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoZXhwclByZWQua2luZCA9PT0gVHlwZVByZWRpY2F0ZUtpbmQuVHlwZW9mVHlwbykgew0KICAgICAgICAgICAgZmFpbChSdWxlLkZBSUxVUkVfU1RSSU5HX0JBRF9UWVBFT0YpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgZXhwclR5cGUgPSBjaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGV4cHJQcmVkLmV4cHJlc3Npb24pOw0KICAgICAgICAvLyBUT0RPOiBjb3VsZCB1c2UgY2hlY2tlci5nZXRCYXNlQ29uc3RyYWludE9mVHlwZSB0byBoZWxwIHdpdGggdHlwZSBwYXJhbWV0ZXJzLCBidXQgaXQncyBub3QgcHVibGljbHkgZXhwb3NlZC4NCiAgICAgICAgaWYgKGlzVHlwZUZsYWdTZXQoZXhwclR5cGUsIHRzLlR5cGVGbGFncy5BbnkgfCB0cy5UeXBlRmxhZ3MuVHlwZVBhcmFtZXRlcikpIHsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHN3aXRjaCAoZXhwclByZWQua2luZCkgew0KICAgICAgICAgICAgY2FzZSBUeXBlUHJlZGljYXRlS2luZC5QbGFpbjogew0KICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJlZGljYXRlLCBpc051bGxPclVuZGVmaW5lZCB9ID0gZXhwclByZWQ7DQogICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRDb25zdGFudEJvb2xlYW4oZXhwclR5cGUsIHByZWRpY2F0ZSk7DQogICAgICAgICAgICAgICAgLy8gJ251bGwnLyd1bmRlZmluZWQnIGFyZSB0aGUgb25seSB0d28gdmFsdWVzICpub3QqIGFzc2lnbmFibGUgdG8gJ3t9Jy4NCiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAoaXNOdWxsT3JVbmRlZmluZWQgfHwgIWlzRW1wdHlUeXBlKGNoZWNrZXIsIGV4cHJUeXBlKSkpIHsNCiAgICAgICAgICAgICAgICAgICAgZmFpbChSdWxlLkZBSUxVUkVfU1RSSU5HKHZhbHVlID09PSBpc1Bvc2l0aXZlKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBjYXNlIFR5cGVQcmVkaWNhdGVLaW5kLk5vblN0cnVjdE51bGxVbmRlZmluZWQ6IHsNCiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0ZXN0Tm9uU3RyaWN0TnVsbFVuZGVmaW5lZChleHByVHlwZSk7DQogICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgICAgIGZhaWwodHlwZW9mIHJlc3VsdCA9PT0gImJvb2xlYW4iDQogICAgICAgICAgICAgICAgICAgICAgICA/IFJ1bGUuRkFJTFVSRV9TVFJJTkcocmVzdWx0ID09PSBpc1Bvc2l0aXZlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgOiBSdWxlLkZBSUxVUkVfU1RSSUNUX1BSRUZFUl9TVFJJQ1RfRVFVQUxTKHJlc3VsdCwgaXNQb3NpdGl2ZSkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIGZhaWwoZmFpbHVyZTogc3RyaW5nKTogdm9pZCB7DQogICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBmYWlsdXJlKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KLyoqIERldGVjdHMgYSB0eXBlIHByZWRpY2F0ZSBnaXZlbiBgbGVmdCA9PT0gcmlnaHRgLiAqLw0KZnVuY3Rpb24gZ2V0VHlwZVByZWRpY2F0ZShub2RlOiB0cy5CaW5hcnlFeHByZXNzaW9uLCBpc1N0cmljdEVxdWFsczogYm9vbGVhbik6IFR5cGVQcmVkaWNhdGUgfCB1bmRlZmluZWQgew0KICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IG5vZGU7DQogICAgY29uc3QgbHIgPSBnZXRUeXBlUHJlZGljYXRlT25lV2F5KGxlZnQsIHJpZ2h0LCBpc1N0cmljdEVxdWFscyk7DQogICAgcmV0dXJuIGxyICE9PSB1bmRlZmluZWQgPyBsciA6IGdldFR5cGVQcmVkaWNhdGVPbmVXYXkocmlnaHQsIGxlZnQsIGlzU3RyaWN0RXF1YWxzKTsNCn0NCg0KLyoqIE9ubHkgZ2V0cyB0aGUgdHlwZSBwcmVkaWNhdGUgaWYgdGhlIGV4cHJlc3Npb24gaXMgb24gdGhlIGxlZnQuICovDQpmdW5jdGlvbiBnZXRUeXBlUHJlZGljYXRlT25lV2F5KGxlZnQ6IHRzLkV4cHJlc3Npb24sIHJpZ2h0OiB0cy5FeHByZXNzaW9uLCBpc1N0cmljdEVxdWFsczogYm9vbGVhbik6IFR5cGVQcmVkaWNhdGUgfCB1bmRlZmluZWQgew0KICAgIHN3aXRjaCAocmlnaHQua2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVHlwZU9mRXhwcmVzc2lvbjoNCiAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSAocmlnaHQgYXMgdHMuVHlwZU9mRXhwcmVzc2lvbikuZXhwcmVzc2lvbjsNCiAgICAgICAgICAgIGlmICghaXNMaXRlcmFsRXhwcmVzc2lvbihsZWZ0KSkgew0KICAgICAgICAgICAgICAgIGlmIChpc0lkZW50aWZpZXIobGVmdCkgJiYgbGVmdC50ZXh0ID09PSAidW5kZWZpbmVkIiB8fA0KICAgICAgICAgICAgICAgICAgICBsZWZ0LmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTnVsbEtleXdvcmQgfHwNCiAgICAgICAgICAgICAgICAgICAgbGVmdC5raW5kID09PSB0cy5TeW50YXhLaW5kLlRydWVLZXl3b3JkIHx8DQogICAgICAgICAgICAgICAgICAgIGxlZnQua2luZCA9PT0gdHMuU3ludGF4S2luZC5GYWxzZUtleXdvcmQpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtraW5kOiBUeXBlUHJlZGljYXRlS2luZC5UeXBlb2ZUeXBvfTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNvbnN0IHByZWRpY2F0ZSA9IGdldFR5cGVQcmVkaWNhdGVGb3JLaW5kKGxlZnQudGV4dCk7DQogICAgICAgICAgICByZXR1cm4gcHJlZGljYXRlID09PSB1bmRlZmluZWQNCiAgICAgICAgICAgICAgICA/IHsga2luZDogVHlwZVByZWRpY2F0ZUtpbmQuVHlwZW9mVHlwbyB9DQogICAgICAgICAgICAgICAgOiB7IGtpbmQ6IFR5cGVQcmVkaWNhdGVLaW5kLlBsYWluLCBleHByZXNzaW9uLCBwcmVkaWNhdGUsIGlzTnVsbE9yVW5kZWZpbmVkOiBsZWZ0LnRleHQgPT09ICJ1bmRlZmluZWQiIH07DQoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk51bGxLZXl3b3JkOg0KICAgICAgICAgICAgcmV0dXJuIG51bGxPclVuZGVmaW5lZCh0cy5UeXBlRmxhZ3MuTnVsbCk7DQoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLklkZW50aWZpZXI6DQogICAgICAgICAgICBpZiAoKHJpZ2h0IGFzIHRzLklkZW50aWZpZXIpLm9yaWdpbmFsS2V5d29yZEtpbmQgPT09IHRzLlN5bnRheEtpbmQuVW5kZWZpbmVkS2V5d29yZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsT3JVbmRlZmluZWQodW5kZWZpbmVkRmxhZ3MpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gbnVsbE9yVW5kZWZpbmVkKGZsYWdzOiB0cy5UeXBlRmxhZ3MpOiBUeXBlUHJlZGljYXRlIHsNCiAgICAgICAgcmV0dXJuIGlzU3RyaWN0RXF1YWxzDQogICAgICAgICAgICA/IHsga2luZDogVHlwZVByZWRpY2F0ZUtpbmQuUGxhaW4sIGV4cHJlc3Npb246IGxlZnQsIHByZWRpY2F0ZTogZmxhZ1ByZWRpY2F0ZShmbGFncyksIGlzTnVsbE9yVW5kZWZpbmVkOiB0cnVlIH0NCiAgICAgICAgICAgIDogeyBraW5kOiBUeXBlUHJlZGljYXRlS2luZC5Ob25TdHJ1Y3ROdWxsVW5kZWZpbmVkLCBleHByZXNzaW9uOiBsZWZ0IH07DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBpc0VtcHR5VHlwZShjaGVja2VyOiB0cy5UeXBlQ2hlY2tlciwgdHlwZTogdHMuVHlwZSkgew0KICAgIHJldHVybiBjaGVja2VyLnR5cGVUb1N0cmluZyh0eXBlKSA9PT0gInt9IjsNCn0NCg0KY29uc3QgdW5kZWZpbmVkRmxhZ3MgPSB0cy5UeXBlRmxhZ3MuVW5kZWZpbmVkIHwgdHMuVHlwZUZsYWdzLlZvaWQ7DQoNCnR5cGUgVHlwZVByZWRpY2F0ZSA9IFBsYWluVHlwZVByZWRpY2F0ZSB8IE5vblN0cmljdE51bGxVbmRlZmluZWRQcmVkaWNhdGUgfCB7IGtpbmQ6IFR5cGVQcmVkaWNhdGVLaW5kLlR5cGVvZlR5cG8gfTsNCmludGVyZmFjZSBQbGFpblR5cGVQcmVkaWNhdGUgew0KICAgIGtpbmQ6IFR5cGVQcmVkaWNhdGVLaW5kLlBsYWluOw0KICAgIGV4cHJlc3Npb246IHRzLkV4cHJlc3Npb247DQogICAgcHJlZGljYXRlOiBQcmVkaWNhdGU7DQogICAgaXNOdWxsT3JVbmRlZmluZWQ6IGJvb2xlYW47DQp9DQovKiogRm9yIGA9PSBudWxsYCBhbmQgdGhlIGxpa2UuICovDQppbnRlcmZhY2UgTm9uU3RyaWN0TnVsbFVuZGVmaW5lZFByZWRpY2F0ZSB7DQogICAga2luZDogVHlwZVByZWRpY2F0ZUtpbmQuTm9uU3RydWN0TnVsbFVuZGVmaW5lZDsNCiAgICBleHByZXNzaW9uOiB0cy5FeHByZXNzaW9uOw0KfQ0KY29uc3QgZW51bSBUeXBlUHJlZGljYXRlS2luZCB7DQogICAgUGxhaW4sDQogICAgTm9uU3RydWN0TnVsbFVuZGVmaW5lZCwNCiAgICBUeXBlb2ZUeXBvLA0KfQ0KDQp0eXBlIFByZWRpY2F0ZSA9ICh0eXBlOiB0cy5UeXBlKSA9PiBib29sZWFuOw0KDQpmdW5jdGlvbiBnZXRUeXBlUHJlZGljYXRlRm9yS2luZChraW5kOiBzdHJpbmcpOiBQcmVkaWNhdGUgfCB1bmRlZmluZWQgew0KICAgIHN3aXRjaCAoa2luZCkgew0KICAgICAgICBjYXNlICJ1bmRlZmluZWQiOg0KICAgICAgICAgICAgcmV0dXJuIGZsYWdQcmVkaWNhdGUodW5kZWZpbmVkRmxhZ3MpOw0KICAgICAgICBjYXNlICJib29sZWFuIjoNCiAgICAgICAgICAgIHJldHVybiBmbGFnUHJlZGljYXRlKHRzLlR5cGVGbGFncy5Cb29sZWFuTGlrZSk7DQogICAgICAgIGNhc2UgIm51bWJlciI6DQogICAgICAgICAgICByZXR1cm4gZmxhZ1ByZWRpY2F0ZSh0cy5UeXBlRmxhZ3MuTnVtYmVyTGlrZSk7DQogICAgICAgIGNhc2UgInN0cmluZyI6DQogICAgICAgICAgICByZXR1cm4gZmxhZ1ByZWRpY2F0ZSh0cy5UeXBlRmxhZ3MuU3RyaW5nTGlrZSk7DQogICAgICAgIGNhc2UgInN5bWJvbCI6DQogICAgICAgICAgICByZXR1cm4gZmxhZ1ByZWRpY2F0ZSh0cy5UeXBlRmxhZ3MuRVNTeW1ib2wpOw0KICAgICAgICBjYXNlICJmdW5jdGlvbiI6DQogICAgICAgICAgICByZXR1cm4gaXNGdW5jdGlvbjsNCiAgICAgICAgY2FzZSAib2JqZWN0IjoNCiAgICAgICAgICAgIC8vIEl0J3MgYW4gb2JqZWN0IGlmIGl0J3Mgbm90IGFueSBvZiB0aGUgYWJvdmUuDQogICAgICAgICAgICBjb25zdCBhbGxGbGFncyA9IHRzLlR5cGVGbGFncy5VbmRlZmluZWQgfCB0cy5UeXBlRmxhZ3MuVm9pZCB8IHRzLlR5cGVGbGFncy5Cb29sZWFuTGlrZSB8DQogICAgICAgICAgICAgICAgdHMuVHlwZUZsYWdzLk51bWJlckxpa2UgfCB0cy5UeXBlRmxhZ3MuU3RyaW5nTGlrZSB8IHRzLlR5cGVGbGFncy5FU1N5bWJvbDsNCiAgICAgICAgICAgIHJldHVybiAodHlwZSkgPT4gIWlzVHlwZUZsYWdTZXQodHlwZSwgYWxsRmxhZ3MpICYmICFpc0Z1bmN0aW9uKHR5cGUpOw0KICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGZsYWdQcmVkaWNhdGUodGVzdGVkRmxhZzogdHMuVHlwZUZsYWdzKTogUHJlZGljYXRlIHsNCiAgICByZXR1cm4gKHR5cGUpID0+IGlzVHlwZUZsYWdTZXQodHlwZSwgdGVzdGVkRmxhZyk7DQp9DQoNCmZ1bmN0aW9uIGlzRnVuY3Rpb24odDogdHMuVHlwZSk6IGJvb2xlYW4gew0KICAgIGlmICh0LmdldENvbnN0cnVjdFNpZ25hdHVyZXMoKS5sZW5ndGggIT09IDAgfHwgdC5nZXRDYWxsU2lnbmF0dXJlcygpLmxlbmd0aCAhPT0gMCkgew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgY29uc3Qgc3ltYm9sID0gdC5nZXRTeW1ib2woKTsNCiAgICByZXR1cm4gc3ltYm9sICE9PSB1bmRlZmluZWQgJiYgc3ltYm9sLmdldE5hbWUoKSA9PT0gIkZ1bmN0aW9uIjsNCn0NCg0KLyoqIFJldHVybnMgYSBib29sZWFuIHZhbHVlIGlmIHRoYXQgc2hvdWxkIGFsd2F5cyBiZSB0aGUgcmVzdWx0IG9mIGEgdHlwZSBwcmVkaWNhdGUuICovDQpmdW5jdGlvbiBnZXRDb25zdGFudEJvb2xlYW4odHlwZTogdHMuVHlwZSwgcHJlZGljYXRlOiAodDogdHMuVHlwZSkgPT4gYm9vbGVhbik6IGJvb2xlYW4gfCB1bmRlZmluZWQgew0KICAgIGxldCBhbnlUcnVlID0gZmFsc2U7DQogICAgbGV0IGFueUZhbHNlID0gZmFsc2U7DQogICAgZm9yIChjb25zdCB0eSBvZiB1bmlvblBhcnRzKHR5cGUpKSB7DQogICAgICAgIGlmIChwcmVkaWNhdGUodHkpKSB7DQogICAgICAgICAgICBhbnlUcnVlID0gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGFueUZhbHNlID0gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChhbnlUcnVlICYmIGFueUZhbHNlKSB7DQogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuIGFueVRydWU7DQp9DQoNCi8qKiBSZXR1cm5zIGJvb2wgZm9yIGFsd2F5cy9uZXZlciB0cnVlLCBvciBhIHN0cmluZyB0byByZWNvbW1lbmQgc3RyaWN0IGVxdWFsaXR5LiAqLw0KZnVuY3Rpb24gdGVzdE5vblN0cmljdE51bGxVbmRlZmluZWQodHlwZTogdHMuVHlwZSk6IGJvb2xlYW4gfCAibnVsbCIgfCAidW5kZWZpbmVkIiB8IHVuZGVmaW5lZCB7DQogICAgbGV0IGFueU51bGwgPSBmYWxzZTsNCiAgICBsZXQgYW55VW5kZWZpbmVkID0gZmFsc2U7DQogICAgbGV0IGFueU90aGVyID0gZmFsc2U7DQogICAgZm9yIChjb25zdCB0eSBvZiB1bmlvblBhcnRzKHR5cGUpKSB7DQogICAgICAgIGlmIChpc1R5cGVGbGFnU2V0KHR5LCB0cy5UeXBlRmxhZ3MuTnVsbCkpIHsNCiAgICAgICAgICAgIGFueU51bGwgPSB0cnVlOw0KICAgICAgICB9IGVsc2UgaWYgKGlzVHlwZUZsYWdTZXQodHksIHVuZGVmaW5lZEZsYWdzKSkgew0KICAgICAgICAgICAgYW55VW5kZWZpbmVkID0gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGFueU90aGVyID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAhYW55T3RoZXIgPyB0cnVlDQogICAgICAgIDogYW55TnVsbCAmJiBhbnlVbmRlZmluZWQgPyB1bmRlZmluZWQNCiAgICAgICAgOiBhbnlOdWxsID8gIm51bGwiDQogICAgICAgIDogYW55VW5kZWZpbmVkID8gInVuZGVmaW5lZCINCiAgICAgICAgOiBmYWxzZTsNCn0NCg0KZnVuY3Rpb24gdW5pb25QYXJ0cyh0eXBlOiB0cy5UeXBlKSB7DQogICAgcmV0dXJuIGlzVW5pb25UeXBlKHR5cGUpID8gdHlwZS50eXBlcyA6IFt0eXBlXTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "ADF3A9E93A5E682C26A80FA83F14E9F6",
              "algorithm": "md5"
            },
            {
              "value": "1FCEF7641792EB4A216350260D5D8C6728B28EA2",
              "algorithm": "sha-1"
            },
            {
              "value": "94AA7F53404389751C6CBCC06F2A4AEDAAC4EC87F165B4EDF3180C6B7713BF63",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/switchFinalBreakRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgZW5kc0NvbnRyb2xGbG93LCBpc0Jsb2NrLCBpc0JyZWFrU3RhdGVtZW50LCBpc0xhYmVsZWRTdGF0ZW1lbnQsIGlzU3dpdGNoU3RhdGVtZW50IH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IE9QVElPTl9BTFdBWVMgPSAiYWx3YXlzIjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLkFic3RyYWN0UnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogInN3aXRjaC1maW5hbC1icmVhayIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiQ2hlY2tzIHdoZXRoZXIgdGhlIGZpbmFsIGNsYXVzZSBvZiBhIHN3aXRjaCBzdGF0ZW1lbnQgZW5kcyBpbiBcYGJyZWFrO1xgLiIsDQogICAgICAgIGhhc0ZpeDogdHJ1ZSwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudGANCiAgICAgICAgICAgIElmIG5vIG9wdGlvbnMgYXJlIHBhc3NlZCwgYSBmaW5hbCAnYnJlYWs7JyBpcyBmb3JiaWRkZW4uDQogICAgICAgICAgICBJZiB0aGUgImFsd2F5cyIgb3B0aW9uIGlzIHBhc3NlZCB0aGlzIHdpbGwgcmVxdWlyZSBhICdicmVhazsnIHRvIGFsd2F5cyBiZSBwcmVzZW50DQogICAgICAgICAgICB1bmxlc3MgY29udHJvbCBmbG93IGlzIGVzY2FwZWQgaW4gc29tZSBvdGhlciB3YXkuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICBlbnVtOiBbDQogICAgICAgICAgICAgICAgT1BUSU9OX0FMV0FZUywNCiAgICAgICAgICAgIF0sDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZSwgW3RydWUsIE9QVElPTl9BTFdBWVNdXSwNCiAgICAgICAgdHlwZTogInN0eWxlIiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfQUxXQVlTID0gIkZpbmFsIGNsYXVzZSBpbiAnc3dpdGNoJyBzdGF0ZW1lbnQgc2hvdWxkIGVuZCB3aXRoICdicmVhazsnLiI7DQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19ORVZFUiA9ICJGaW5hbCBjbGF1c2UgaW4gJ3N3aXRjaCcgc3RhdGVtZW50IHNob3VsZCBub3QgZW5kIHdpdGggJ2JyZWFrOycuIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2FsaywgeyBhbHdheXM6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9BTFdBWVMpICE9PSAtMSB9KTsNCiAgICB9DQp9DQoNCmludGVyZmFjZSBPcHRpb25zIHsNCiAgICBhbHdheXM6IGJvb2xlYW47DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PE9wdGlvbnM+KTogdm9pZCB7DQogICAgY29uc3QgeyBzb3VyY2VGaWxlLCBvcHRpb25zOiB7IGFsd2F5cyB9IH0gPSBjdHg7DQogICAgdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGUpIHsNCiAgICAgICAgaWYgKGlzU3dpdGNoU3RhdGVtZW50KG5vZGUpKSB7DQogICAgICAgICAgICBjaGVjayhub2RlKTsNCiAgICAgICAgfQ0KICAgICAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KDQogICAgZnVuY3Rpb24gY2hlY2sobm9kZTogdHMuU3dpdGNoU3RhdGVtZW50KTogdm9pZCB7DQogICAgICAgIGNvbnN0IGNsYXVzZSA9IGxhc3Qobm9kZS5jYXNlQmxvY2suY2xhdXNlcyk7DQogICAgICAgIGlmIChjbGF1c2UgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH0NCg0KICAgICAgICBpZiAoYWx3YXlzKSB7DQogICAgICAgICAgICBpZiAoIWVuZHNDb250cm9sRmxvdyhjbGF1c2UpKSB7DQogICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUoY2xhdXNlLmdldENoaWxkQXQoMCksIFJ1bGUuRkFJTFVSRV9TVFJJTkdfQUxXQVlTLCBjcmVhdGVBZGRGaXgoY2xhdXNlKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBjb25zdCBsYXN0U3RhdGVtZW50ID0gZ2V0TGFzdFN0YXRlbWVudChjbGF1c2UpOw0KICAgICAgICBpZiAobGFzdFN0YXRlbWVudCA9PT0gdW5kZWZpbmVkIHx8ICFpc0JyZWFrU3RhdGVtZW50KGxhc3RTdGF0ZW1lbnQpKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAobGFzdFN0YXRlbWVudC5sYWJlbCAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudCE7DQogICAgICAgICAgICBpZiAoIWlzTGFiZWxlZFN0YXRlbWVudChwYXJlbnQpIHx8IHBhcmVudC5sYWJlbCA9PT0gbGFzdFN0YXRlbWVudC5sYWJlbCkgew0KICAgICAgICAgICAgICAgIC8vIGJyZWFrIGp1bXBzIHNvbWV3aGVyZSBlbHNlLCBkb24ndCBjb21wbGFpbg0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKGxhc3RTdGF0ZW1lbnQsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfTkVWRVIsIGNyZWF0ZVJlbW92ZUZpeChsYXN0U3RhdGVtZW50KSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gY3JlYXRlQWRkRml4KGNsYXVzZTogdHMuQ2FzZUNsYXVzZSB8IHRzLkRlZmF1bHRDbGF1c2UpIHsNCiAgICAgICAgY29uc3QgbGFzdFN0YXRlbWVudCA9IGdldExhc3RTdGF0ZW1lbnQoY2xhdXNlKTsNCiAgICAgICAgaWYgKGxhc3RTdGF0ZW1lbnQgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgcmV0dXJuIExpbnQuUmVwbGFjZW1lbnQuYXBwZW5kVGV4dChjbGF1c2UuZW5kLCAiIGJyZWFrOyIpOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgZnVsbFRleHQgPSBsYXN0U3RhdGVtZW50LmdldEZ1bGxUZXh0KGN0eC5zb3VyY2VGaWxlKTsNCiAgICAgICAgY29uc3QgaW5kZW50YXRpb24gPSBmdWxsVGV4dC5zbGljZSgwLCBmdWxsVGV4dC5zZWFyY2goL1xTKy8pKTsNCg0KICAgICAgICByZXR1cm4gTGludC5SZXBsYWNlbWVudC5hcHBlbmRUZXh0KGxhc3RTdGF0ZW1lbnQuZW5kLCBgJHtpbmRlbnRhdGlvbn1icmVhaztgKTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBjcmVhdGVSZW1vdmVGaXgobGFzdFN0YXRlbWVudDogdHMuQnJlYWtTdGF0ZW1lbnQpIHsNCiAgICAgICAgcmV0dXJuIExpbnQuUmVwbGFjZW1lbnQucmVwbGFjZUZyb21UbyhsYXN0U3RhdGVtZW50LmdldEZ1bGxTdGFydCgpLCBsYXN0U3RhdGVtZW50LmVuZCwgIiIpOw0KICAgIH0NCg0KfQ0KDQpmdW5jdGlvbiBnZXRMYXN0U3RhdGVtZW50KGNsYXVzZTogdHMuQ2FzZUNsYXVzZSB8IHRzLkRlZmF1bHRDbGF1c2UpOiB0cy5TdGF0ZW1lbnQgfCB1bmRlZmluZWQgew0KICAgIGlmIChjbGF1c2Uuc3RhdGVtZW50cy5sZW5ndGggPT09IDApIHsNCiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQoNCiAgICBjb25zdCBibG9jayA9IGNsYXVzZS5zdGF0ZW1lbnRzWzBdOw0KICAgIGNvbnN0IHN0YXRlbWVudHMgPSBjbGF1c2Uuc3RhdGVtZW50cy5sZW5ndGggPT09IDEgJiYgaXNCbG9jayhibG9jaykgPyBibG9jay5zdGF0ZW1lbnRzIDogY2xhdXNlLnN0YXRlbWVudHM7DQoNCiAgICByZXR1cm4gbGFzdChzdGF0ZW1lbnRzKTsNCn0NCg0KZnVuY3Rpb24gbGFzdDxUPihhcnI6IFJlYWRvbmx5QXJyYXk8VD4pOiBUIHwgdW5kZWZpbmVkIHsNCiAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "6FA1DC8739CD2421F8E5A97B0531FE1F",
              "algorithm": "md5"
            },
            {
              "value": "509E0D8FC29C58096B49274F67537FEEFC66D694",
              "algorithm": "sha-1"
            },
            {
              "value": "EB1159D140F93EAA6C9FC8820D797E8CBA007FB43A16D8923D60EF2C20F58790",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/trailingCommaRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "B0C3E3A7F117BEDABD6634139DC194AC",
              "algorithm": "md5"
            },
            {
              "value": "81594BA1EF4FB494E437277A67A7C08D8B5F1394",
              "algorithm": "sha-1"
            },
            {
              "value": "A678A051DCEA6129B1252EA6200EA08FAD9F469CBA904ACC6FF94219AA5E495B",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/tripleEqualsRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCaW5hcnlFeHByZXNzaW9uIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQoNCmNvbnN0IE9QVElPTl9BTExPV19OVUxMX0NIRUNLID0gImFsbG93LW51bGwtY2hlY2siOw0KY29uc3QgT1BUSU9OX0FMTE9XX1VOREVGSU5FRF9DSEVDSyA9ICJhbGxvdy11bmRlZmluZWQtY2hlY2siOw0KDQppbnRlcmZhY2UgT3B0aW9ucyB7DQogICAgYWxsb3dOdWxsOiBib29sZWFuOw0KICAgIGFsbG93VW5kZWZpbmVkOiBib29sZWFuOw0KfQ0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAidHJpcGxlLWVxdWFscyIsDQogICAgICAgIGRlc2NyaXB0aW9uOiAiUmVxdWlyZXMgYD09PWAgYW5kIGAhPT1gIGluIHBsYWNlIG9mIGA9PWAgYW5kIGAhPWAuIiwNCiAgICAgICAgb3B0aW9uc0Rlc2NyaXB0aW9uOiBMaW50LlV0aWxzLmRlZGVudCBgDQogICAgICAgICAgICBUd28gYXJndW1lbnRzIG1heSBiZSBvcHRpb25hbGx5IHByb3ZpZGVkOg0KDQogICAgICAgICAgICAqIFxgImFsbG93LW51bGwtY2hlY2siXGAgYWxsb3dzIFxgPT1cYCBhbmQgXGAhPVxgIHdoZW4gY29tcGFyaW5nIHRvIFxgbnVsbFxgLg0KICAgICAgICAgICAgKiBcYCJhbGxvdy11bmRlZmluZWQtY2hlY2siXGAgYWxsb3dzIFxgPT1cYCBhbmQgXGAhPVxgIHdoZW4gY29tcGFyaW5nIHRvIFxgdW5kZWZpbmVkXGAuYCwNCiAgICAgICAgb3B0aW9uczogew0KICAgICAgICAgICAgdHlwZTogImFycmF5IiwNCiAgICAgICAgICAgIGl0ZW1zOiB7DQogICAgICAgICAgICAgICAgdHlwZTogInN0cmluZyIsDQogICAgICAgICAgICAgICAgZW51bTogW09QVElPTl9BTExPV19OVUxMX0NIRUNLLCBPUFRJT05fQUxMT1dfVU5ERUZJTkVEX0NIRUNLXSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBtaW5MZW5ndGg6IDAsDQogICAgICAgICAgICBtYXhMZW5ndGg6IDIsDQogICAgICAgIH0sDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbDQogICAgICAgICAgICB0cnVlLA0KICAgICAgICAgICAgW3RydWUsICJhbGxvdy1udWxsLWNoZWNrIl0sDQogICAgICAgICAgICBbdHJ1ZSwgImFsbG93LXVuZGVmaW5lZC1jaGVjayJdLA0KICAgICAgICBdLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiBmYWxzZSwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEVRX0ZBSUxVUkVfU1RSSU5HID0gIj09IHNob3VsZCBiZSA9PT0iOw0KICAgIHB1YmxpYyBzdGF0aWMgTkVRX0ZBSUxVUkVfU1RSSU5HID0gIiE9IHNob3VsZCBiZSAhPT0iOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB7DQogICAgICAgICAgICBhbGxvd051bGw6IHRoaXMucnVsZUFyZ3VtZW50cy5pbmRleE9mKE9QVElPTl9BTExPV19OVUxMX0NIRUNLKSAhPT0gLTEsDQogICAgICAgICAgICBhbGxvd1VuZGVmaW5lZDogdGhpcy5ydWxlQXJndW1lbnRzLmluZGV4T2YoT1BUSU9OX0FMTE9XX1VOREVGSU5FRF9DSEVDSykgIT09IC0xLA0KICAgICAgICB9KTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PE9wdGlvbnM+KSB7DQogICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChjdHguc291cmNlRmlsZSwgZnVuY3Rpb24gY2Iobm9kZTogdHMuTm9kZSk6IHZvaWQgew0KICAgICAgICBpZiAoaXNCaW5hcnlFeHByZXNzaW9uKG5vZGUpKSB7DQogICAgICAgICAgICBpZiAoKG5vZGUub3BlcmF0b3JUb2tlbi5raW5kID09PSB0cy5TeW50YXhLaW5kLkVxdWFsc0VxdWFsc1Rva2VuIHx8DQogICAgICAgICAgICAgICAgIG5vZGUub3BlcmF0b3JUb2tlbi5raW5kID09PSB0cy5TeW50YXhLaW5kLkV4Y2xhbWF0aW9uRXF1YWxzVG9rZW4pICYmDQogICAgICAgICAgICAgICAgIShpc0V4cHJlc3Npb25BbGxvd2VkKG5vZGUucmlnaHQsIGN0eC5vcHRpb25zKSB8fCBpc0V4cHJlc3Npb25BbGxvd2VkKG5vZGUubGVmdCwgY3R4Lm9wdGlvbnMpKSkgew0KICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUub3BlcmF0b3JUb2tlbiwgbm9kZS5vcGVyYXRvclRva2VuLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuRXF1YWxzRXF1YWxzVG9rZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gUnVsZS5FUV9GQUlMVVJFX1NUUklORw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBSdWxlLk5FUV9GQUlMVVJFX1NUUklORyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRzLmZvckVhY2hDaGlsZChub2RlLCBjYik7DQogICAgfSk7DQp9DQoNCmZ1bmN0aW9uIGlzRXhwcmVzc2lvbkFsbG93ZWQobm9kZTogdHMuRXhwcmVzc2lvbiwgb3B0aW9uczogT3B0aW9ucykgew0KICAgIGlmIChub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTnVsbEtleXdvcmQpIHsNCiAgICAgICAgcmV0dXJuIG9wdGlvbnMuYWxsb3dOdWxsOw0KICAgIH0NCiAgICByZXR1cm4gb3B0aW9ucy5hbGxvd1VuZGVmaW5lZCAmJg0KICAgICAgICBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSWRlbnRpZmllciAmJg0KICAgICAgICAobm9kZSBhcyB0cy5JZGVudGlmaWVyKS5vcmlnaW5hbEtleXdvcmRLaW5kID09PSB0cy5TeW50YXhLaW5kLlVuZGVmaW5lZEtleXdvcmQ7DQp9DQo="
          },
          "hashes": [
            {
              "value": "72C95EB22397FAE3C33FC2F2A3B108EC",
              "algorithm": "md5"
            },
            {
              "value": "5EC845F18970A843FBA94AA5931DA734FD797F14",
              "algorithm": "sha-1"
            },
            {
              "value": "630D7167205D600E073006CE5180E65B233EC6F8EE54783663EBFBF7A532253E",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/typedefRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "9D34A109D46C7504EC31AF8597B653F6",
              "algorithm": "md5"
            },
            {
              "value": "9B6D1F3AFA77DBD50098EE6BB185ED80ABAB686F",
              "algorithm": "sha-1"
            },
            {
              "value": "05E322D42B018FBDA8D6680AC14EA9368E98E28AB0E7C000174978C41FFFD65C",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/typedefWhitespaceRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "3EA931BEE93C5962A160C6390E54ECAE",
              "algorithm": "md5"
            },
            {
              "value": "6290BC55B083C8ED26A5CF09625FB4246E3805D6",
              "algorithm": "sha-1"
            },
            {
              "value": "A9EE6D8F0229F167C8739A7B786F3020333C8DAE0B3755778F677473FD3E72A2",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/typeLiteralDelimiterRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNTYW1lTGluZSwgaXNUeXBlTGl0ZXJhbE5vZGUgfSBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KY29uc3Qgc2luZ2VMaW5lQ29uZmlnT3B0aW9uTmFtZSA9ICJzaW5nbGVMaW5lIjsNCmludGVyZmFjZSBPcHRpb25zIHsNCiAgICBbc2luZ2VMaW5lQ29uZmlnT3B0aW9uTmFtZV0/OiAibmV2ZXIiIHwgImFsd2F5cyI7DQp9DQoNCmV4cG9ydCBjbGFzcyBSdWxlIGV4dGVuZHMgTGludC5SdWxlcy5BYnN0cmFjdFJ1bGUgew0KICAgIC8qIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KICAgIHB1YmxpYyBzdGF0aWMgbWV0YWRhdGE6IExpbnQuSVJ1bGVNZXRhZGF0YSA9IHsNCiAgICAgICAgcnVsZU5hbWU6ICJ0eXBlLWxpdGVyYWwtZGVsaW1pdGVyIiwNCiAgICAgICAgZGVzY3JpcHRpb246IExpbnQuVXRpbHMuZGVkZW50YA0KICAgICAgICAgICAgQ2hlY2tzIHRoYXQgdHlwZSBsaXRlcmFsIG1lbWJlcnMgYXJlIHNlcGFyYXRlZCBieSBzZW1pY29sb25zLg0KICAgICAgICAgICAgRW5mb3JjZXMgYSB0cmFpbGluZyBzZW1pY29sb24gZm9yIG11bHRpbGluZSB0eXBlIGxpdGVyYWxzLmAsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogYFxgeyR7c2luZ2VMaW5lQ29uZmlnT3B0aW9uTmFtZX06ICJhbHdheXMifVxgIGVuZm9yY2VzIHNlbWljb2xvbiBmb3Igb25lIGxpbmVyc2AsDQogICAgICAgIG9wdGlvbnM6IHsNCiAgICAgICAgICAgIHR5cGU6ICJvYmplY3QiLA0KICAgICAgICAgICAgcHJvcGVydGllczogew0KICAgICAgICAgICAgICAgIFtzaW5nZUxpbmVDb25maWdPcHRpb25OYW1lXTogew0KICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3RyaW5nIiwNCiAgICAgICAgICAgICAgICAgICAgZW51bTogWyJhbHdheXMiLCAibmV2ZXIiXSBhcyBBcnJheTxPcHRpb25zWyJzaW5nbGVMaW5lIl0+LA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICB9LA0KICAgICAgICB9LA0KICAgICAgICBoYXNGaXg6IHRydWUsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJzdHlsZSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfTUlTU0lORyA9DQogICAgICAgICJFeHBlY3RlZCB0eXBlIGxpdGVyYWwgdG8gdXNlICc7JyB0byBzZXBhcmF0ZSBtZW1iZXJzLiI7DQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklOR19DT01NQSA9DQogICAgICAgICJFeHBlY3RlZCB0eXBlIGxpdGVyYWwgdG8gdXNlICc7JyBpbnN0ZWFkIG9mICcsJy4iOw0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkdfVFJBSUxJTkcgPQ0KICAgICAgICAiRGlkIG5vdCBleHBlY3Qgc2luZ2xlLWxpbmUgdHlwZSBsaXRlcmFsIHRvIGhhdmUgYSB0cmFpbGluZyAnOycuIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oDQogICAgICAgICAgICBzb3VyY2VGaWxlLA0KICAgICAgICAgICAgd2FsaywNCiAgICAgICAgICAgIHRoaXMuZ2V0UnVsZU9wdGlvbnMoKSk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBnZXRSdWxlT3B0aW9ucygpOiBPcHRpb25zIHsNCiAgICAgICAgaWYgKHRoaXMucnVsZUFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICByZXR1cm4ge307DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5ydWxlQXJndW1lbnRzWzBdIGFzIE9wdGlvbnM7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PE9wdGlvbnM+KTogdm9pZCB7DQogICAgY29uc3QgeyBzb3VyY2VGaWxlLCBvcHRpb25zIH0gPSBjdHg7DQogICAgdHMuZm9yRWFjaENoaWxkKHNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzVHlwZUxpdGVyYWxOb2RlKG5vZGUpKSB7DQogICAgICAgICAgICBjaGVjayhub2RlKTsNCiAgICAgICAgfQ0KICAgICAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KICAgIGZ1bmN0aW9uIGNoZWNrKG5vZGU6IHRzLlR5cGVMaXRlcmFsTm9kZSk6IHZvaWQgew0KICAgICAgICBub2RlLm1lbWJlcnMuZm9yRWFjaCgobWVtYmVyLCBpZHgpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IGVuZCA9IG1lbWJlci5lbmQgLSAxOw0KICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZGVsaW1pdGVyIHNob3VsZCBiZSBvbW1pdHRlZCBmb3IgYSBzaW5nbGUtbGluZSB0eXBlIGxpdGVyYWwuDQogICAgICAgICAgICBjb25zdCBzaG91bGRPbWl0ID0gb3B0aW9ucy5zaW5nbGVMaW5lID09PSAiYWx3YXlzIg0KICAgICAgICAgICAgICAgID8gZmFsc2UNCiAgICAgICAgICAgICAgICA6IGlkeCA9PT0gbm9kZS5tZW1iZXJzLmxlbmd0aCAtIDEgJiYgaXNTYW1lTGluZShzb3VyY2VGaWxlLCBub2RlLmdldFN0YXJ0KHNvdXJjZUZpbGUpLCBub2RlLmdldEVuZCgpKTsNCiAgICAgICAgICAgIGNvbnN0IGRlbGltaXRlciA9IHNvdXJjZUZpbGUudGV4dFtlbmRdOw0KICAgICAgICAgICAgc3dpdGNoIChkZWxpbWl0ZXIpIHsNCiAgICAgICAgICAgICAgICBjYXNlICI7IjoNCiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZE9taXQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXQoZW5kLCAxLCBSdWxlLkZBSUxVUkVfU1RSSU5HX1RSQUlMSU5HLCBMaW50LlJlcGxhY2VtZW50LnJlcGxhY2VGcm9tVG8oZW5kLCBlbmQgKyAxLCAiIikpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgIiwiOg0KICAgICAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0KGVuZCwgMSwgUnVsZS5GQUlMVVJFX1NUUklOR19DT01NQSwgTGludC5SZXBsYWNlbWVudC5yZXBsYWNlRnJvbVRvKGVuZCwgZW5kICsgMSwgIjsiKSk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIGlmICghc2hvdWxkT21pdCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdChlbmQsIDEsIFJ1bGUuRkFJTFVSRV9TVFJJTkdfTUlTU0lORywgTGludC5SZXBsYWNlbWVudC5yZXBsYWNlRnJvbVRvKGVuZCArIDEsIGVuZCArIDEsICI7IikpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCn0NCg=="
          },
          "hashes": [
            {
              "value": "E76F114977EDDB18FB5AFF7F9669E14B",
              "algorithm": "md5"
            },
            {
              "value": "6CB6D120F28C2152737F5BD2D2684D815BFC47A7",
              "algorithm": "sha-1"
            },
            {
              "value": "03F52B07CB8E6FF975A09298295E8C3B21D4846495465BA1B46BEDB3007627BC",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/typeofCompareRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0ICogYXMgdHN1dGlscyBmcm9tICJ0c3V0aWxzIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgKiBhcyBMaW50IGZyb20gIi4uL2luZGV4IjsNCg0KY29uc3QgTEVHQUxfVFlQRU9GX1JFU1VMVFMgPSBuZXcgU2V0KFsidW5kZWZpbmVkIiwgInN0cmluZyIsICJib29sZWFuIiwgIm51bWJlciIsICJmdW5jdGlvbiIsICJvYmplY3QiLCAic3ltYm9sIl0pOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAidHlwZW9mLWNvbXBhcmUiLA0KICAgICAgICBkZXNjcmlwdGlvbjogIk1ha2VzIHN1cmUgcmVzdWx0IG9mIGB0eXBlb2ZgIGlzIGNvbXBhcmVkIHRvIGNvcnJlY3Qgc3RyaW5nIHZhbHVlcyIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUuIiwNCiAgICAgICAgb3B0aW9uczogbnVsbCwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFt0cnVlXSwNCiAgICAgICAgdHlwZTogImZ1bmN0aW9uYWxpdHkiLA0KICAgICAgICB0eXBlc2NyaXB0T25seTogZmFsc2UsDQogICAgICAgIGRlcHJlY2F0aW9uTWVzc2FnZTogIS9eMlwuMVwuLy50ZXN0KHRzLnZlcnNpb24pDQogICAgICAgICAgICA/ICJTdGFydGluZyBmcm9tIFR5cGVTY3JpcHQgMi4yIHRoZSBjb21waWxlciBpbmNsdWRlcyB0aGlzIGNoZWNrIHdoaWNoIG1ha2VzIHRoaXMgcnVsZSByZWR1bmRhbnQuIg0KICAgICAgICAgICAgOiAiIiwNCiAgICB9Ow0KICAgIC8qIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQoNCiAgICBwdWJsaWMgc3RhdGljIEZBSUxVUkVfU1RSSU5HID0NCiAgICAgICAgYCd0eXBlb2YnIGV4cHJlc3Npb24gbXVzdCBiZSBjb21wYXJlZCB0byBvbmUgb2Y6ICR7QXJyYXkuZnJvbShMRUdBTF9UWVBFT0ZfUkVTVUxUUykubWFwKCh4KSA9PiBgIiR7eH0iYCkuam9pbigiLCAiKX1gOw0KDQogICAgcHVibGljIGFwcGx5KHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrKTsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIHdhbGsoY3R4OiBMaW50LldhbGtDb250ZXh0PHZvaWQ+KTogdm9pZCB7DQogICAgdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGlmICh0c3V0aWxzLmlzQmluYXJ5RXhwcmVzc2lvbihub2RlKSkgew0KICAgICAgICAgICAgY29uc3QgeyBvcGVyYXRvclRva2VuLCBsZWZ0LCByaWdodCB9ID0gbm9kZTsNCiAgICAgICAgICAgIGlmIChMaW50LmdldEVxdWFsc0tpbmQob3BlcmF0b3JUb2tlbikgIT09IHVuZGVmaW5lZCAmJiAoaXNGYXVsdHlUeXBlb2YobGVmdCwgcmlnaHQpIHx8IGlzRmF1bHR5VHlwZW9mKHJpZ2h0LCBsZWZ0KSkpIHsNCiAgICAgICAgICAgICAgICBjdHguYWRkRmFpbHVyZUF0Tm9kZShub2RlLCBSdWxlLkZBSUxVUkVfU1RSSU5HKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0KDQpmdW5jdGlvbiBpc0ZhdWx0eVR5cGVvZihsZWZ0OiB0cy5FeHByZXNzaW9uLCByaWdodDogdHMuRXhwcmVzc2lvbikgew0KICAgIHJldHVybiBsZWZ0LmtpbmQgPT09IHRzLlN5bnRheEtpbmQuVHlwZU9mRXhwcmVzc2lvbiAmJiBpc0ZhdWx0eVR5cGVvZlJlc3VsdChyaWdodCk7DQp9DQoNCmZ1bmN0aW9uIGlzRmF1bHR5VHlwZW9mUmVzdWx0KG5vZGU6IHRzLk5vZGUpOiBib29sZWFuIHsNCiAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuU3RyaW5nTGl0ZXJhbDoNCiAgICAgICAgICAgIHJldHVybiAhTEVHQUxfVFlQRU9GX1JFU1VMVFMuaGFzKChub2RlIGFzIHRzLlN0cmluZ0xpdGVyYWwpLnRleHQpOw0KDQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5JZGVudGlmaWVyOg0KICAgICAgICAgICAgcmV0dXJuIChub2RlIGFzIHRzLklkZW50aWZpZXIpLm9yaWdpbmFsS2V5d29yZEtpbmQgPT09IHRzLlN5bnRheEtpbmQuVW5kZWZpbmVkS2V5d29yZDsNCg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTnVsbEtleXdvcmQ6DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5OdW1lcmljTGl0ZXJhbDoNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlRydWVLZXl3b3JkOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRmFsc2VLZXl3b3JkOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuT2JqZWN0TGl0ZXJhbEV4cHJlc3Npb246DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5BcnJheUxpdGVyYWxFeHByZXNzaW9uOg0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQoNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQp9DQo="
          },
          "hashes": [
            {
              "value": "EBC82BE0E18F1912B14DA8BF6B8E7662",
              "algorithm": "md5"
            },
            {
              "value": "0FAAB4B4FAE29B817C2534B19D801778BDF2C6A9",
              "algorithm": "sha-1"
            },
            {
              "value": "78A6EDCCD7BBA279A524E43F12BAF86CD3BC942FF29C84D41A99857051717B19",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/unifiedSignaturesRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "906C6C0B996E6FD2DD62650B14E23BBD",
              "algorithm": "md5"
            },
            {
              "value": "2D8ADBCFEC7B7762BF59B51B64F5DAEF8E9FE103",
              "algorithm": "sha-1"
            },
            {
              "value": "0BBA8C89D516740B5C6DEF9ECDD5E48E9B6A39D618C8B6CC3AEB198B0C143DAB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/useDefaultTypeParameterRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNDbGFzc0xpa2VEZWNsYXJhdGlvbiwgaXNJbnRlcmZhY2VEZWNsYXJhdGlvbiwgaXNTeW1ib2xGbGFnU2V0LCBpc1R5cGVBbGlhc0RlY2xhcmF0aW9uIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCmltcG9ydCAqIGFzIExpbnQgZnJvbSAiLi4vaW5kZXgiOw0KaW1wb3J0IHsgZmluZCB9IGZyb20gIi4uL3V0aWxzIjsNCg0KZXhwb3J0IGNsYXNzIFJ1bGUgZXh0ZW5kcyBMaW50LlJ1bGVzLlR5cGVkUnVsZSB7DQogICAgLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzICovDQogICAgcHVibGljIHN0YXRpYyBtZXRhZGF0YTogTGludC5JUnVsZU1ldGFkYXRhID0gew0KICAgICAgICBydWxlTmFtZTogInVzZS1kZWZhdWx0LXR5cGUtcGFyYW1ldGVyIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJXYXJucyBpZiBhbiBleHBsaWNpdGx5IHNwZWNpZmllZCB0eXBlIGFyZ3VtZW50IGlzIHRoZSBkZWZhdWx0IGZvciB0aGF0IHR5cGUgcGFyYW1ldGVyLiIsDQogICAgICAgIG9wdGlvbnNEZXNjcmlwdGlvbjogIk5vdCBjb25maWd1cmFibGUuIiwNCiAgICAgICAgb3B0aW9uczogbnVsbCwNCiAgICAgICAgb3B0aW9uRXhhbXBsZXM6IFsidHJ1ZSJdLA0KICAgICAgICB0eXBlOiAiZnVuY3Rpb25hbGl0eSIsDQogICAgICAgIHR5cGVzY3JpcHRPbmx5OiB0cnVlLA0KICAgICAgICByZXF1aXJlc1R5cGVJbmZvOiB0cnVlLA0KICAgIH07DQogICAgLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg0KICAgIHB1YmxpYyBzdGF0aWMgRkFJTFVSRV9TVFJJTkcgPSAiVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyB0eXBlIHBhcmFtZXRlciwgc28gaXQgY2FuIGJlIG9taXR0ZWQuIjsNCg0KICAgIHB1YmxpYyBhcHBseVdpdGhQcm9ncmFtKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUsIHByb2dyYW06IHRzLlByb2dyYW0pOiBMaW50LlJ1bGVGYWlsdXJlW10gew0KICAgICAgICByZXR1cm4gdGhpcy5hcHBseVdpdGhGdW5jdGlvbihzb3VyY2VGaWxlLCB3YWxrLCB1bmRlZmluZWQsIHByb2dyYW0uZ2V0VHlwZUNoZWNrZXIoKSk7DQogICAgfQ0KfQ0KDQppbnRlcmZhY2UgQXJnc0FuZFBhcmFtcyB7DQogICAgdHlwZUFyZ3VtZW50czogdHMuTm9kZUFycmF5PHRzLlR5cGVOb2RlPjsNCiAgICB0eXBlUGFyYW1ldGVyczogUmVhZG9ubHlBcnJheTx0cy5UeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24+Ow0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPiwgY2hlY2tlcjogdHMuVHlwZUNoZWNrZXIpOiB2b2lkIHsNCiAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKGN0eC5zb3VyY2VGaWxlLCBmdW5jdGlvbiBjYihub2RlOiB0cy5Ob2RlKTogdm9pZCB7DQogICAgICAgIGNvbnN0IGFyZ3NBbmRQYXJhbXMgPSBnZXRBcmdzQW5kUGFyYW1ldGVycyhub2RlLCBjaGVja2VyKTsNCiAgICAgICAgaWYgKGFyZ3NBbmRQYXJhbXMgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgY2hlY2tBcmdzQW5kUGFyYW1ldGVycyhhcmdzQW5kUGFyYW1zKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdHMuZm9yRWFjaENoaWxkKG5vZGUsIGNiKTsNCiAgICB9KTsNCg0KICAgIGZ1bmN0aW9uIGNoZWNrQXJnc0FuZFBhcmFtZXRlcnMoeyB0eXBlQXJndW1lbnRzLCB0eXBlUGFyYW1ldGVycyB9OiBBcmdzQW5kUGFyYW1zKTogdm9pZCB7DQogICAgICAgIC8vIEp1c3QgY2hlY2sgdGhlIGxhc3Qgb25lLiBNdXN0IHNwZWNpZnkgcHJldmlvdXMgdHlwZSBwYXJhbWV0ZXJzIGlmIHRoZSBsYXN0IG9uZSBpcyBzcGVjaWZpZWQuDQogICAgICAgIGNvbnN0IGkgPSB0eXBlQXJndW1lbnRzLmxlbmd0aCAtIDE7DQogICAgICAgIGNvbnN0IGFyZyA9IHR5cGVBcmd1bWVudHNbaV07DQogICAgICAgIGNvbnN0IHBhcmFtID0gdHlwZVBhcmFtZXRlcnNbaV07DQogICAgICAgIC8vIFRPRE86IHdvdWxkIGxpa2UgY2hlY2tlci5hcmVUeXBlc0VxdWl2YWxlbnQuIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTM1MDINCiAgICAgICAgaWYgKHBhcmFtLmRlZmF1bHQgIT09IHVuZGVmaW5lZCAmJiBwYXJhbS5kZWZhdWx0LmdldFRleHQoKSA9PT0gYXJnLmdldFRleHQoKSkgew0KICAgICAgICAgICAgY3R4LmFkZEZhaWx1cmVBdE5vZGUoYXJnLCBSdWxlLkZBSUxVUkVfU1RSSU5HLCBjcmVhdGVGaXgoKSk7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBjcmVhdGVGaXgoKTogTGludC5GaXggew0KICAgICAgICAgICAgaWYgKGkgPT09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gTGludC5SZXBsYWNlbWVudC5kZWxldGVGcm9tVG8odHlwZUFyZ3VtZW50cy5wb3MgLSAxLCB0eXBlQXJndW1lbnRzLmVuZCArIDEpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gTGludC5SZXBsYWNlbWVudC5kZWxldGVGcm9tVG8odHlwZUFyZ3VtZW50c1tpIC0gMV0uZW5kLCBhcmcuZW5kKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gZ2V0QXJnc0FuZFBhcmFtZXRlcnMobm9kZTogdHMuTm9kZSwgY2hlY2tlcjogdHMuVHlwZUNoZWNrZXIpOiBBcmdzQW5kUGFyYW1zIHwgdW5kZWZpbmVkIHsNCiAgICBzd2l0Y2ggKG5vZGUua2luZCkgew0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ2FsbEV4cHJlc3Npb246DQogICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5OZXdFeHByZXNzaW9uOg0KICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVHlwZVJlZmVyZW5jZToNCiAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkV4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50czoNCiAgICAgICAgICAgIGNvbnN0IGRlY2wgPSBub2RlIGFzIHRzLkNhbGxFeHByZXNzaW9uIHwgdHMuTmV3RXhwcmVzc2lvbiB8IHRzLlR5cGVSZWZlcmVuY2VOb2RlIHwgdHMuRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzOw0KICAgICAgICAgICAgY29uc3QgeyB0eXBlQXJndW1lbnRzIH0gPSBkZWNsOw0KICAgICAgICAgICAgaWYgKHR5cGVBcmd1bWVudHMgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb25zdCB0eXBlUGFyYW1ldGVycyA9IGRlY2wua2luZCA9PT0gdHMuU3ludGF4S2luZC5UeXBlUmVmZXJlbmNlDQogICAgICAgICAgICAgICAgPyB0eXBlUGFyYW1zRnJvbVR5cGUoZGVjbC50eXBlTmFtZSwgY2hlY2tlcikNCiAgICAgICAgICAgICAgICA6IGRlY2wua2luZCA9PT0gdHMuU3ludGF4S2luZC5FeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHMNCiAgICAgICAgICAgICAgICA/IHR5cGVQYXJhbXNGcm9tVHlwZShkZWNsLmV4cHJlc3Npb24sIGNoZWNrZXIpDQogICAgICAgICAgICAgICAgOiB0eXBlUGFyYW1zRnJvbUNhbGwobm9kZSBhcyB0cy5DYWxsRXhwcmVzc2lvbiB8IHRzLk5ld0V4cHJlc3Npb24sIGNoZWNrZXIpOw0KICAgICAgICAgICAgcmV0dXJuIHR5cGVQYXJhbWV0ZXJzID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB7IHR5cGVBcmd1bWVudHMsIHR5cGVQYXJhbWV0ZXJzIH07DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gdHlwZVBhcmFtc0Zyb21DYWxsKG5vZGU6IHRzLkNhbGxMaWtlRXhwcmVzc2lvbiwgY2hlY2tlcjogdHMuVHlwZUNoZWNrZXIpOiBSZWFkb25seUFycmF5PHRzLlR5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvbj4gfCB1bmRlZmluZWQgew0KICAgIGNvbnN0IHNpZyA9IGNoZWNrZXIuZ2V0UmVzb2x2ZWRTaWduYXR1cmUobm9kZSk7DQogICAgY29uc3Qgc2lnRGVjbCA9IHNpZyA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2lnLmdldERlY2xhcmF0aW9uKCk7DQogICAgaWYgKHNpZ0RlY2wgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICByZXR1cm4gbm9kZS5raW5kID09PSB0cy5TeW50YXhLaW5kLk5ld0V4cHJlc3Npb24gPyB0eXBlUGFyYW1zRnJvbVR5cGUobm9kZS5leHByZXNzaW9uLCBjaGVja2VyKSA6IHVuZGVmaW5lZDsNCiAgICB9DQoNCiAgICByZXR1cm4gc2lnRGVjbC50eXBlUGFyYW1ldGVycyA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2lnRGVjbC50eXBlUGFyYW1ldGVyczsNCn0NCg0KZnVuY3Rpb24gdHlwZVBhcmFtc0Zyb21UeXBlKA0KICAgIHR5cGU6IHRzLkVudGl0eU5hbWUgfCB0cy5FeHByZXNzaW9uLA0KICAgIGNoZWNrZXI6IHRzLlR5cGVDaGVja2VyKTogUmVhZG9ubHlBcnJheTx0cy5UeXBlUGFyYW1ldGVyRGVjbGFyYXRpb24+IHwgdW5kZWZpbmVkIHsNCiAgICBjb25zdCBzeW0gPSBnZXRBbGlhc2VkU3ltYm9sKGNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbih0eXBlKSwgY2hlY2tlcik7DQogICAgaWYgKHN5bSA9PT0gdW5kZWZpbmVkIHx8IHN5bS5kZWNsYXJhdGlvbnMgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICByZXR1cm4gdW5kZWZpbmVkOw0KICAgIH0NCg0KICAgIHJldHVybiBmaW5kKHN5bS5kZWNsYXJhdGlvbnMsIChkZWNsKSA9Pg0KICAgICAgICBpc0NsYXNzTGlrZURlY2xhcmF0aW9uKGRlY2wpIHx8IGlzVHlwZUFsaWFzRGVjbGFyYXRpb24oZGVjbCkgfHwgaXNJbnRlcmZhY2VEZWNsYXJhdGlvbihkZWNsKSA/IGRlY2wudHlwZVBhcmFtZXRlcnMgOiB1bmRlZmluZWQpOw0KfQ0KDQpmdW5jdGlvbiBnZXRBbGlhc2VkU3ltYm9sKHN5bWJvbDogdHMuU3ltYm9sIHwgdW5kZWZpbmVkLCBjaGVja2VyOiB0cy5UeXBlQ2hlY2tlcik6IHRzLlN5bWJvbCB8IHVuZGVmaW5lZCB7DQogICAgaWYgKHN5bWJvbCA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgIHJldHVybiB1bmRlZmluZWQ7DQogICAgfQ0KICAgIHJldHVybiBpc1N5bWJvbEZsYWdTZXQoc3ltYm9sLCB0cy5TeW1ib2xGbGFncy5BbGlhcykgPyBjaGVja2VyLmdldEFsaWFzZWRTeW1ib2woc3ltYm9sKSA6IHN5bWJvbDsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "79FD34A31752823B007920DFABA35FA3",
              "algorithm": "md5"
            },
            {
              "value": "F26DC7E28FDAED301AEFAA4E8EA98BE7B50A77DB",
              "algorithm": "sha-1"
            },
            {
              "value": "3F98690330223BE033C737EC4932C4190E315BD3D5D3496C6C7BEAD581A4DBB8",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/useIsnanRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTMgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgaXNCaW5hcnlFeHByZXNzaW9uIH0gZnJvbSAidHN1dGlscyI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0ICogYXMgTGludCBmcm9tICIuLi9pbmRleCI7DQppbXBvcnQgeyBjb2RlRXhhbXBsZXMgfSBmcm9tICIuL2NvZGUtZXhhbXBsZXMvdXNlSXNuYW4uZXhhbXBsZXMiOw0KDQpleHBvcnQgY2xhc3MgUnVsZSBleHRlbmRzIExpbnQuUnVsZXMuQWJzdHJhY3RSdWxlIHsNCiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCiAgICBwdWJsaWMgc3RhdGljIG1ldGFkYXRhOiBMaW50LklSdWxlTWV0YWRhdGEgPSB7DQogICAgICAgIHJ1bGVOYW1lOiAidXNlLWlzbmFuIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICJFbmZvcmNlcyB1c2Ugb2YgdGhlIGBpc05hTigpYCBmdW5jdGlvbiB0byBjaGVjayBmb3IgTmFOIHJlZmVyZW5jZXMgaW5zdGVhZCBvZiBhIGNvbXBhcmlzb24gdG8gdGhlIGBOYU5gIGNvbnN0YW50LiIsDQogICAgICAgIHJhdGlvbmFsZTogTGludC5VdGlscy5kZWRlbnRgDQogICAgICAgICAgICBTaW5jZSBcYE5hTiAhPT0gTmFOXGAsIGNvbXBhcmlzb25zIHdpdGggcmVndWxhciBvcGVyYXRvcnMgd2lsbCBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy4NCiAgICAgICAgICAgIFNvLCBpbnN0ZWFkIG9mIFxgaWYgKG15VmFyID09PSBOYU4pXGAsIGRvIFxgaWYgKGlzTmFOKG15VmFyKSlcYC5gLA0KICAgICAgICBvcHRpb25zRGVzY3JpcHRpb246ICJOb3QgY29uZmlndXJhYmxlLiIsDQogICAgICAgIG9wdGlvbnM6IG51bGwsDQogICAgICAgIG9wdGlvbkV4YW1wbGVzOiBbdHJ1ZV0sDQogICAgICAgIHR5cGU6ICJmdW5jdGlvbmFsaXR5IiwNCiAgICAgICAgdHlwZXNjcmlwdE9ubHk6IGZhbHNlLA0KICAgICAgICBjb2RlRXhhbXBsZXMsDQogICAgfTsNCiAgICAvKiB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyAqLw0KDQogICAgcHVibGljIHN0YXRpYyBGQUlMVVJFX1NUUklORyA9ICJGb3VuZCBhbiBpbnZhbGlkIGNvbXBhcmlzb24gZm9yIE5hTjogIjsNCg0KICAgIHB1YmxpYyBhcHBseShzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogTGludC5SdWxlRmFpbHVyZVtdIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlXaXRoRnVuY3Rpb24oc291cmNlRmlsZSwgd2Fsayk7DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiB3YWxrKGN0eDogTGludC5XYWxrQ29udGV4dDx2b2lkPikgew0KICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQoY3R4LnNvdXJjZUZpbGUsIGZ1bmN0aW9uIGNiKG5vZGU6IHRzLk5vZGUpOiB2b2lkIHsNCiAgICAgICAgaWYgKGlzQmluYXJ5RXhwcmVzc2lvbihub2RlKSkgew0KICAgICAgICAgICAgc3dpdGNoIChub2RlLm9wZXJhdG9yVG9rZW4ua2luZCkgew0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5MZXNzVGhhblRva2VuOg0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5HcmVhdGVyVGhhblRva2VuOg0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5MZXNzVGhhbkVxdWFsc1Rva2VuOg0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5HcmVhdGVyVGhhbkVxdWFsc1Rva2VuOg0KICAgICAgICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5FcXVhbHNFcXVhbHNUb2tlbjoNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRXhjbGFtYXRpb25FcXVhbHNUb2tlbjoNCiAgICAgICAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRXF1YWxzRXF1YWxzRXF1YWxzVG9rZW46DQogICAgICAgICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkV4Y2xhbWF0aW9uRXF1YWxzRXF1YWxzVG9rZW46DQogICAgICAgICAgICAgICAgICAgIGlmIChpc0V4cHJlc3Npb25OYU4obm9kZS5yaWdodCkgfHwgaXNFeHByZXNzaW9uTmFOKG5vZGUubGVmdCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5hZGRGYWlsdXJlQXROb2RlKG5vZGUsIFJ1bGUuRkFJTFVSRV9TVFJJTkcgKyBub2RlLmdldFRleHQoY3R4LnNvdXJjZUZpbGUpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgY2IpOw0KICAgIH0pOw0KfQ0KDQpmdW5jdGlvbiBpc0V4cHJlc3Npb25OYU4obm9kZTogdHMuTm9kZSkgew0KICAgIHJldHVybiBub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSWRlbnRpZmllciAmJiAobm9kZSBhcyB0cy5JZGVudGlmaWVyKS50ZXh0ID09PSAiTmFOIjsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "A78086CD8C500962DF25857D30CD2877",
              "algorithm": "md5"
            },
            {
              "value": "D24BB604743F3A1B5134973F3CB7177D5547E647",
              "algorithm": "sha-1"
            },
            {
              "value": "8504249C836B515FFE6605949647C785B058B30C5D71DA63D5573971C7BADA6A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/variableNameRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "06D5F5A2A42E4569674CD07F5863CF08",
              "algorithm": "md5"
            },
            {
              "value": "8847ACA6ED1F32C972C9E6675EEA4190A77B9BD6",
              "algorithm": "sha-1"
            },
            {
              "value": "0F103D6697D3A5BD16707CA8FC4295091610A2BCAD83D9D7355753BE5A91483F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/rules/whitespaceRule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "83A288CDB3DD13F42125B8166607655B",
              "algorithm": "md5"
            },
            {
              "value": "728794E365FE2A6032B677785E00BB792448F803",
              "algorithm": "sha-1"
            },
            {
              "value": "14D138D5FE7D554DBDA4784A3F1BBF386609FA1EB387B4745A0FF0246F887CA6",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/runner.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "AB2E394CEA209B39D28A27C32390F970",
              "algorithm": "md5"
            },
            {
              "value": "BE38D016D0C28780CF0BF75AF65F83F18F79A8A7",
              "algorithm": "sha-1"
            },
            {
              "value": "3A8AC794D644E34FEC7710FF42BDFB1BDFF40A20110FEC96D7C6A91D3A941F73",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "7BCE1F02C2C49B4E00353BA62C976481",
              "algorithm": "md5"
            },
            {
              "value": "2784103D6DFD81063518EAD1C80DA9C10EC3D1A0",
              "algorithm": "sha-1"
            },
            {
              "value": "B305FB5C3CE8FC7AE459147E9628B475560FC25662C0A7680F0AEE3F1DA6AFE9",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/tslintCli.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "E852414E512115DF9EBA3158557E29C1",
              "algorithm": "md5"
            },
            {
              "value": "C7204DCF7A947A26B7B8CEAE61FA05249CE1ABF2",
              "algorithm": "sha-1"
            },
            {
              "value": "13EDC2822B98E7354F1029FAF9FCA49C5CE4A6188344B1D8E710C1A3D507EA9A",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/utils.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "4CF32A4597567FA52829686B648F46C8",
              "algorithm": "md5"
            },
            {
              "value": "4197B01ECFBFE3029D48848CD9DB4DEBDC4A1D3D",
              "algorithm": "sha-1"
            },
            {
              "value": "419C348E5FB0F68FFC9697EBA267CEE279844BB10938FDB8C498DA0AD5F52EA8",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/verify/lines.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIEBsaWNlbnNlDQogKiBDb3B5cmlnaHQgMjAxNiBQYWxhbnRpciBUZWNobm9sb2dpZXMsIEluYy4NCiAqDQogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KICoNCiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCiAqDQogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCiAqLw0KDQovLyBVc2UgY2xhc3NlcyBoZXJlIGluc3RlYWQgb2YgaW50ZXJmYWNlcyBiZWNhdXNlIHdlIHdhbnQgcnVudGltZSB0eXBlIGRhdGENCmV4cG9ydCBjbGFzcyBMaW5lIHsgfQ0KZXhwb3J0IGNsYXNzIENvZGVMaW5lIGV4dGVuZHMgTGluZSB7IGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZW50czogc3RyaW5nKSB7IHN1cGVyKCk7IH0gfQ0KZXhwb3J0IGNsYXNzIE1lc3NhZ2VTdWJzdGl0dXRpb25MaW5lIGV4dGVuZHMgTGluZSB7IGNvbnN0cnVjdG9yKHB1YmxpYyBrZXk6IHN0cmluZywgcHVibGljIG1lc3NhZ2U6IHN0cmluZykgeyBzdXBlcigpOyB9IH0NCg0KZXhwb3J0IGNsYXNzIEVycm9yTGluZSBleHRlbmRzIExpbmUgeyBjb25zdHJ1Y3RvcihwdWJsaWMgc3RhcnRDb2w6IG51bWJlcikgeyBzdXBlcigpOyB9IH0NCmV4cG9ydCBjbGFzcyBNdWx0aWxpbmVFcnJvckxpbmUgZXh0ZW5kcyBFcnJvckxpbmUgeyBjb25zdHJ1Y3RvcihzdGFydENvbDogbnVtYmVyKSB7IHN1cGVyKHN0YXJ0Q29sKTsgfSB9DQpleHBvcnQgY2xhc3MgRW5kRXJyb3JMaW5lIGV4dGVuZHMgRXJyb3JMaW5lIHsNCiAgICBjb25zdHJ1Y3RvcihzdGFydENvbDogbnVtYmVyLCBwdWJsaWMgZW5kQ29sOiBudW1iZXIsIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcpIHsgc3VwZXIoc3RhcnRDb2wpOyB9DQp9DQoNCi8vIGV4YW1wbGUgbWF0Y2hlcyAoYmV0d2VlbiB0aGUgcXVvdGVzKToNCi8vICIgICAgfn5+fn5+fn4iDQpjb25zdCBtdWx0aWxpbmVFcnJvclJlZ2V4ID0gL15ccyoofit8fm5pbCkkLzsNCi8vICIgICAgfn5+fn5+fn5+ICAgW3NvbWUgZXJyb3IgbWVzc2FnZV0iDQpjb25zdCBlbmRFcnJvclJlZ2V4ID0gL15ccyoofit8fm5pbClccypcWyguKylcXVxzKiQvOw0KLy8gIltzaG9ydGN1dF06IGZ1bGwgbWVzc2FnZXMgZ29lcyBoZXJlISEgICINCmNvbnN0IG1lc3NhZ2VTdWJzdGl0dXRpb25SZWdleCA9IC9eXFsoWy1cd10rPyldOiBccyooLis/KVxzKiQvOw0KDQpleHBvcnQgY29uc3QgWkVST19MRU5HVEhfRVJST1IgPSAifm5pbCI7DQoNCi8qKg0KICogTWFwcyBhIGxpbmUgb2YgdGV4dCBmcm9tIGEgLmxpbnQgZmlsZSB0byBhbiBhcHByb3ByaWF0ZSBMaW5lIG9iamVjdA0KICovDQpleHBvcnQgZnVuY3Rpb24gcGFyc2VMaW5lKHRleHQ6IHN0cmluZyk6IExpbmUgew0KICAgIGNvbnN0IG11bHRpbGluZUVycm9yTWF0Y2ggPSB0ZXh0Lm1hdGNoKG11bHRpbGluZUVycm9yUmVnZXgpOw0KICAgIGlmIChtdWx0aWxpbmVFcnJvck1hdGNoICE9PSBudWxsKSB7DQogICAgICAgIGNvbnN0IHN0YXJ0RXJyb3JDb2wgPSB0ZXh0LmluZGV4T2YoIn4iKTsNCiAgICAgICAgcmV0dXJuIG5ldyBNdWx0aWxpbmVFcnJvckxpbmUoc3RhcnRFcnJvckNvbCk7DQogICAgfQ0KDQogICAgY29uc3QgZW5kRXJyb3JNYXRjaCA9IHRleHQubWF0Y2goZW5kRXJyb3JSZWdleCk7DQogICAgaWYgKGVuZEVycm9yTWF0Y2ggIT09IG51bGwpIHsNCiAgICAgICAgY29uc3QgWywgc3F1aWdnbGVzLCBtZXNzYWdlXSA9IGVuZEVycm9yTWF0Y2g7DQogICAgICAgIGNvbnN0IHN0YXJ0RXJyb3JDb2wgPSB0ZXh0LmluZGV4T2YoIn4iKTsNCiAgICAgICAgY29uc3QgemVyb0xlbmd0aEVycm9yID0gKHNxdWlnZ2xlcyA9PT0gWkVST19MRU5HVEhfRVJST1IpOw0KICAgICAgICBjb25zdCBlbmRFcnJvckNvbCA9IHplcm9MZW5ndGhFcnJvciA/IHN0YXJ0RXJyb3JDb2wgOiB0ZXh0Lmxhc3RJbmRleE9mKCJ+IikgKyAxOw0KICAgICAgICByZXR1cm4gbmV3IEVuZEVycm9yTGluZShzdGFydEVycm9yQ29sLCBlbmRFcnJvckNvbCwgbWVzc2FnZSk7DQogICAgfQ0KDQogICAgY29uc3QgbWVzc2FnZVN1YnN0aXR1dGlvbk1hdGNoID0gdGV4dC5tYXRjaChtZXNzYWdlU3Vic3RpdHV0aW9uUmVnZXgpOw0KICAgIGlmIChtZXNzYWdlU3Vic3RpdHV0aW9uTWF0Y2ggIT09IG51bGwpIHsNCiAgICAgICAgY29uc3QgWywga2V5LCBtZXNzYWdlXSA9IG1lc3NhZ2VTdWJzdGl0dXRpb25NYXRjaDsNCiAgICAgICAgcmV0dXJuIG5ldyBNZXNzYWdlU3Vic3RpdHV0aW9uTGluZShrZXksIG1lc3NhZ2UpOw0KICAgIH0NCg0KICAgIC8vIGxpbmUgZG9lc24ndCBtYXRjaCBhbnkgc3ludGF4IGZvciBlcnJvciBtYXJrdXAsIHNvIGl0J3MgYSBsaW5lIG9mIGNvZGUgdG8gYmUgbGludGVkDQogICAgcmV0dXJuIG5ldyBDb2RlTGluZSh0ZXh0KTsNCn0NCg0KLyoqDQogKiBNYXBzIGEgTGluZSBvYmplY3QgdG8gYSBtYXRjaGluZyBsaW5lIG9mIHRleHQgdGhhdCBjb3VsZCBiZSBpbiBhIC5saW50IGZpbGUuDQogKiBUaGlzIGlzIGFsbW9zdCB0aGUgaW52ZXJzZSBvZiBwYXJzZUxpbmUuDQogKiBJZiB5b3UgcmFuIGBwcmludExpbmUocGFyc2VMaW5lKHNvbWVUZXh0KSwgY29kZSlgLCB0aGUgd2hpdGVzcGFjZSBpbiB0aGUgcmVzdWx0IG1heSBiZSBkaWZmZXJlbnQgdGhhbiBpbiBzb21lVGV4dA0KICogQHBhcmFtIGxpbmUgLSBBIExpbmUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gdGV4dA0KICogQHBhcmFtIGNvZGUgLSBJZiBsaW5lIHJlcHJlc2VudHMgZXJyb3IgbWFya3VwLCB0aGlzIGlzIHRoZSBsaW5lIG9mIGNvZGUgcHJlY2VkaW5nIHRoZSBtYXJrdXAuDQogKiAgICAgICAgICAgICAgIE90aGVyd2lzZSwgdGhpcyBwYXJhbWV0ZXIgaXMgbm90IHJlcXVpcmVkLg0KICovDQpleHBvcnQgZnVuY3Rpb24gcHJpbnRMaW5lKGxpbmU6IExpbmUsIGNvZGU/OiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQgew0KICAgIGlmIChsaW5lIGluc3RhbmNlb2YgRXJyb3JMaW5lKSB7DQogICAgICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJNdXN0IHN1cHBseSBhcmd1bWVudCBmb3IgY29kZSBwYXJhbWV0ZXIgd2hlbiBsaW5lIGlzIGFuIEVycm9yTGluZSIpOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgbGVhZGluZ1NwYWNlcyA9ICIgIi5yZXBlYXQobGluZS5zdGFydENvbCk7DQogICAgICAgIGlmIChsaW5lIGluc3RhbmNlb2YgTXVsdGlsaW5lRXJyb3JMaW5lKSB7DQogICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIHdoZW4gdGhlIGxpbmUgb2YgY29kZSBpcyBzaW1wbHkgYSBuZXdsaW5lLg0KICAgICAgICAgICAgLy8gdXNlICJ+bmlsIiB0byBpbmRpY2F0ZSB0aGUgZXJyb3IgY29udGludWVzIG9uIHRoYXQgbGluZQ0KICAgICAgICAgICAgaWYgKGNvZGUubGVuZ3RoID09PSAwICYmIGxpbmUuc3RhcnRDb2wgPT09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gWkVST19MRU5HVEhfRVJST1I7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGNvbnN0IHRpbGRlcyA9ICJ+Ii5yZXBlYXQoY29kZS5sZW5ndGggLSBsZWFkaW5nU3BhY2VzLmxlbmd0aCk7DQogICAgICAgICAgICByZXR1cm4gYCR7bGVhZGluZ1NwYWNlc30ke3RpbGRlc31gOw0KICAgICAgICB9IGVsc2UgaWYgKGxpbmUgaW5zdGFuY2VvZiBFbmRFcnJvckxpbmUpIHsNCiAgICAgICAgICAgIGxldCB0aWxkZXMgPSAifiIucmVwZWF0KGxpbmUuZW5kQ29sIC0gbGluZS5zdGFydENvbCk7DQogICAgICAgICAgICBpZiAoY29kZS5sZW5ndGggPCBsaW5lLmVuZENvbCkgew0KICAgICAgICAgICAgICAgIC8vIEJldHRlciB0aGFuIGNyYXNoaW5nIGluIFN0cmluZy5yZXBlYXQNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJhZCBlcnJvciBtYXJrZXIgYXQgJHtKU09OLnN0cmluZ2lmeShsaW5lKX1gKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGxldCBlbmRTcGFjZXMgPSAiICIucmVwZWF0KGNvZGUubGVuZ3RoIC0gbGluZS5lbmRDb2wpOw0KICAgICAgICAgICAgaWYgKHRpbGRlcy5sZW5ndGggPT09IDApIHsNCiAgICAgICAgICAgICAgICB0aWxkZXMgPSBaRVJPX0xFTkdUSF9FUlJPUjsNCiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGFkZCAifm5pbCIgd2UgbmVlZCBmb3VyIGxlc3Mgc3BhY2VzIHRoYW4gbm9ybWFsIGF0IHRoZSBlbmQNCiAgICAgICAgICAgICAgICAvLyBhbHdheXMgbWFrZSBzdXJlIHdlIGhhdmUgYXQgbGVhc3Qgb25lIHNwYWNlIHRob3VnaA0KICAgICAgICAgICAgICAgIGVuZFNwYWNlcyA9IGVuZFNwYWNlcy5zdWJzdHJpbmcoMCwgTWF0aC5tYXgoZW5kU3BhY2VzLmxlbmd0aCAtIDQsIDEpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBgJHtsZWFkaW5nU3BhY2VzfSR7dGlsZGVzfSR7ZW5kU3BhY2VzfSBbJHtsaW5lLm1lc3NhZ2V9XWA7DQogICAgICAgIH0NCiAgICB9IGVsc2UgaWYgKGxpbmUgaW5zdGFuY2VvZiBNZXNzYWdlU3Vic3RpdHV0aW9uTGluZSkgew0KICAgICAgICByZXR1cm4gYFske2xpbmUua2V5fV06ICR7bGluZS5tZXNzYWdlfWA7DQogICAgfSBlbHNlIGlmIChsaW5lIGluc3RhbmNlb2YgQ29kZUxpbmUpIHsNCiAgICAgICAgcmV0dXJuIGxpbmUuY29udGVudHM7DQogICAgfQ0KICAgIHJldHVybiB1bmRlZmluZWQ7DQp9DQo="
          },
          "hashes": [
            {
              "value": "F8CE5A5B9466003E147B9BCFB894DADA",
              "algorithm": "md5"
            },
            {
              "value": "6CB35FFA9E9B20D4ADD2657A7EF568FA0ADB7130",
              "algorithm": "sha-1"
            },
            {
              "value": "9BB2625D8DE94F79723EE65F3A5D2708CD5047A700D862DE20C5474A22EC4CF3",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/verify/lintError.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIEBsaWNlbnNlDQogKiBDb3B5cmlnaHQgMjAxNiBQYWxhbnRpciBUZWNobm9sb2dpZXMsIEluYy4NCiAqDQogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KICoNCiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCiAqDQogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCiAqLw0KDQpleHBvcnQgaW50ZXJmYWNlIFBvc2l0aW9uSW5GaWxlIHsNCiAgIGxpbmU6IG51bWJlcjsNCiAgIGNvbDogbnVtYmVyOw0KfQ0KDQpleHBvcnQgaW50ZXJmYWNlIExpbnRFcnJvciB7DQogICBzdGFydFBvczogUG9zaXRpb25JbkZpbGU7DQogICBlbmRQb3M6IFBvc2l0aW9uSW5GaWxlOw0KICAgbWVzc2FnZTogc3RyaW5nOw0KfQ0KDQpleHBvcnQgZnVuY3Rpb24gZXJyb3JDb21wYXJhdG9yKGVycjE6IExpbnRFcnJvciwgZXJyMjogTGludEVycm9yKSB7DQogICAgaWYgKGVycjEuc3RhcnRQb3MubGluZSAhPT0gZXJyMi5zdGFydFBvcy5saW5lKSB7DQogICAgICAgIHJldHVybiBlcnIxLnN0YXJ0UG9zLmxpbmUgLSBlcnIyLnN0YXJ0UG9zLmxpbmU7DQogICAgfSBlbHNlIGlmIChlcnIxLnN0YXJ0UG9zLmNvbCAhPT0gZXJyMi5zdGFydFBvcy5jb2wpIHsNCiAgICAgICAgcmV0dXJuIGVycjEuc3RhcnRQb3MuY29sIC0gZXJyMi5zdGFydFBvcy5jb2w7DQogICAgfSBlbHNlIGlmIChlcnIxLmVuZFBvcy5saW5lICE9PSBlcnIyLmVuZFBvcy5saW5lKSB7DQogICAgICAgIHJldHVybiBlcnIxLmVuZFBvcy5saW5lIC0gZXJyMi5lbmRQb3MubGluZTsNCiAgICB9IGVsc2UgaWYgKGVycjEuZW5kUG9zLmNvbCAhPT0gZXJyMi5lbmRQb3MuY29sKSB7DQogICAgICAgIHJldHVybiBlcnIxLmVuZFBvcy5jb2wgLSBlcnIyLmVuZFBvcy5jb2w7DQogICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuIGVycjEubWVzc2FnZS5sb2NhbGVDb21wYXJlKGVycjIubWVzc2FnZSk7DQogICAgfQ0KfQ0KDQpleHBvcnQgZnVuY3Rpb24gbGludFN5bnRheEVycm9yKG1lc3NhZ2U6IHN0cmluZykgew0KICAgIHJldHVybiBuZXcgRXJyb3IoYExpbnQgRmlsZSBTeW50YXggRXJyb3I6ICR7bWVzc2FnZX1gKTsNCn0NCg=="
          },
          "hashes": [
            {
              "value": "68BF513205FCEEAD251A74E669328DF4",
              "algorithm": "md5"
            },
            {
              "value": "F313ED3644970C46712547F0EA6633CDE4220CAD",
              "algorithm": "sha-1"
            },
            {
              "value": "095A137472EA645ACB0FA4ACCFE75D9086D2DF2AD29DD11367CD60BF4F8E6C38",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/src/verify/parse.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "E63EAB21A8526EF06DDD4E618127DCFC",
              "algorithm": "md5"
            },
            {
              "value": "43BEE71841FD5E4563B47661B0C33C922C9730B5",
              "algorithm": "sha-1"
            },
            {
              "value": "04341319F5B43036E3374A1D0A2FFD8B1094D143DAF8908EBEED05E2FC23D634",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/configurationTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "D29F175741A095B74300F4A973BCBA1A",
              "algorithm": "md5"
            },
            {
              "value": "7444918909C335EBDA3281DC33EFBC562D38E4A8",
              "algorithm": "sha-1"
            },
            {
              "value": "E4F5D52A093DFBD61E7B99F579F19351F226808DC39318A51F296B6433AE1C3C",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/executable/executableTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "78A9741A67B6A48A51EFACB727DD0F78",
              "algorithm": "md5"
            },
            {
              "value": "F59482F148B9BE5264CFC0A10D7F5F07DE4F0AA3",
              "algorithm": "sha-1"
            },
            {
              "value": "F4508A4F0CDA81F1CF51DEA1FF2BAC83A9B0F61107F6525F7AD747B4709218E6",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/allow-js-exclude-node-modules/test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "aW1wb3J0ICogYXMgZGVwZW5kZW5jeSBmcm9tICdkZXBlbmRlbmN5JzsKY29uc29sZS5sb2coZGVwZW5kZW5jeSk7Cg=="
          },
          "hashes": [
            {
              "value": "3CFB5625EC945D9C9096EC31B3F10344",
              "algorithm": "md5"
            },
            {
              "value": "EAADE549553DE3C67A0EAED11E4A2688F6DE34C1",
              "algorithm": "sha-1"
            },
            {
              "value": "7133709BA0E06738321B0821C7816C46181693DD618ACF82D393EBCDA07B9D49",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/config-exclude/excluded.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Y29uc29sZS5sb2coIm1pc3Npbmcgc2VtaWNvbG9uIGF0IGVuZCBvZiBsaW5lIikK"
          },
          "hashes": [
            {
              "value": "44C17F47914E5821AED986233AED50DF",
              "algorithm": "md5"
            },
            {
              "value": "0D46D8350D6D4226CA9F9CE82BCC26CF1AFEA5A2",
              "algorithm": "sha-1"
            },
            {
              "value": "B84D9EA4162AC2F849FA5D3D5D102757B2D8BD464A583A166FF5C1294E740A38",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/config-exclude/excluded1.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Y29uc29sZS5sb2coIm1pc3Npbmcgc2VtaWNvbG9uIGF0IGVuZCBvZiBsaW5lIikK"
          },
          "hashes": [
            {
              "value": "44C17F47914E5821AED986233AED50DF",
              "algorithm": "md5"
            },
            {
              "value": "0D46D8350D6D4226CA9F9CE82BCC26CF1AFEA5A2",
              "algorithm": "sha-1"
            },
            {
              "value": "B84D9EA4162AC2F849FA5D3D5D102757B2D8BD464A583A166FF5C1294E740A38",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/config-exclude/included.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Y29uc29sZS5sb2coIm1pc3Npbmcgc2VtaWNvbG9uIGF0IGVuZCBvZiBsaW5lIikK"
          },
          "hashes": [
            {
              "value": "44C17F47914E5821AED986233AED50DF",
              "algorithm": "md5"
            },
            {
              "value": "0D46D8350D6D4226CA9F9CE82BCC26CF1AFEA5A2",
              "algorithm": "sha-1"
            },
            {
              "value": "B84D9EA4162AC2F849FA5D3D5D102757B2D8BD464A583A166FF5C1294E740A38",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/config-exclude/subdir/excluded.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Y29uc29sZS5sb2coIm1pc3Npbmcgc2VtaWNvbG9uIGF0IGVuZCBvZiBsaW5lIikK"
          },
          "hashes": [
            {
              "value": "44C17F47914E5821AED986233AED50DF",
              "algorithm": "md5"
            },
            {
              "value": "0D46D8350D6D4226CA9F9CE82BCC26CF1AFEA5A2",
              "algorithm": "sha-1"
            },
            {
              "value": "B84D9EA4162AC2F849FA5D3D5D102757B2D8BD464A583A166FF5C1294E740A38",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/config-exclude/subdir/excluded2.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Y29uc29sZS5sb2coIm1pc3Npbmcgc2VtaWNvbG9uIGF0IGVuZCBvZiBsaW5lIikK"
          },
          "hashes": [
            {
              "value": "44C17F47914E5821AED986233AED50DF",
              "algorithm": "md5"
            },
            {
              "value": "0D46D8350D6D4226CA9F9CE82BCC26CF1AFEA5A2",
              "algorithm": "sha-1"
            },
            {
              "value": "B84D9EA4162AC2F849FA5D3D5D102757B2D8BD464A583A166FF5C1294E740A38",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/config-findup/no-config/index.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Jyc7Cg=="
          },
          "hashes": [
            {
              "value": "0E45A206EBBEFA1FDE56567DF067EB1F",
              "algorithm": "md5"
            },
            {
              "value": "916646BF6AD3FB7125B79F761ADFCD0746D68FE1",
              "algorithm": "sha-1"
            },
            {
              "value": "E02266840177EA1B345C3C06DE74B10F42F30406FA18D2D6DD39AA6C1D2AE1B6",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/codeFrameFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "bW9kdWxlIENvZGVGcmFtZU1vZHVsZSB7CiAgICBleHBvcnQgY2xhc3MgQ29kZUZyYW1lQ2xhc3MgewogICAgICAgIHByaXZhdGUgbmFtZTogc3RyaW5nOwoKICAgICAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHsKICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgICB9CiAgICB9Cn0K"
          },
          "hashes": [
            {
              "value": "D30412150BD72B4837E3AC6B21E308B4",
              "algorithm": "md5"
            },
            {
              "value": "60F1972E97110D1EA40AF4140949F4808ABC0C4F",
              "algorithm": "sha-1"
            },
            {
              "value": "24FF7B77B89B47770FA21115736A10E7C50117B663E2F2B186BE3BCCCB3CC0DF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/externalFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "bW9kdWxlIFNpbXBsZU1vZHVsZSB7CiAgICBleHBvcnQgY2xhc3MgU2ltcGxlQ2xhc3MgewogICAgICAgIHByaXZhdGUgbmFtZTogc3RyaW5nOwoKICAgICAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHsKICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgICB9CiAgICB9Cn0K"
          },
          "hashes": [
            {
              "value": "A87E47F7335F7F01132EA809FA8BEAF3",
              "algorithm": "md5"
            },
            {
              "value": "0F52ED8E4CE4EE642F8720E661BD446B0BC38D3F",
              "algorithm": "sha-1"
            },
            {
              "value": "D26A48E3485BF6998469C9D9259AEE72FB63830AB8C8C4F8123D007B9F8415AF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/fileslistFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "bW9kdWxlIEZpbGVzTGlzdE1vZHVsZSB7CiAgICBleHBvcnQgY2xhc3MgRmlsZXNMaXN0Q2xhc3MgewogICAgICAgIG5hbWU6IHN0cmluZzsKCiAgICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7CiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgfQogICAgfQp9Cg=="
          },
          "hashes": [
            {
              "value": "B6D7E8CE51F599BB6AE9B8AF092BC75A",
              "algorithm": "md5"
            },
            {
              "value": "D54B138414D611DE62728A323CD7DD602DBC269F",
              "algorithm": "sha-1"
            },
            {
              "value": "118988CD0739256AA3AFA809DA484212FA04912E305C76CEF7C6EC60040A39C7",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/jsonFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "dmFyIHggPSAxMjM7CnZhciB5ID0gImFiY2QiOwp2YXIgeiA9IHsKICB4OiB4LAogIHk6IHkKfTsK"
          },
          "hashes": [
            {
              "value": "B177B9CE0D35D5DFCA74307460BD99B6",
              "algorithm": "md5"
            },
            {
              "value": "6A291C262914490479B52C31FAEA305A5F180E70",
              "algorithm": "sha-1"
            },
            {
              "value": "4E7A5228D1717B2B4B545A415637CE183F46ED48BA4FE29CC463868EACFFF490",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/msbuildFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "bW9kdWxlIFByb3NlTW9kdWxlIHsKICAgIGV4cG9ydCBjbGFzcyBQcm9zZUNsYXNzIHsKICAgICAgICBwcml2YXRlIG5hbWU6IHN0cmluZzsKCiAgICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7CiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgfQogICAgfQp9Cg=="
          },
          "hashes": [
            {
              "value": "022A0E28B12B16E60C8A6408FCBAA14F",
              "algorithm": "md5"
            },
            {
              "value": "5944F4E45A950F7E283F35CCF578A6F25762D973",
              "algorithm": "sha-1"
            },
            {
              "value": "BCA64C88A69D83EF17936F15C5AD15771C92AE37514E45288327328A6BCF0A62",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/pmdFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "dmFyIHggPSAxMjM7CnZhciB5ID0gImFiY2QiOwp2YXIgeiA9IHsKICAgIHg6IHgsCiAgICB5OiB5Cn07Cg=="
          },
          "hashes": [
            {
              "value": "6F2B8A51670496BF3D0DF2F10FA1FF66",
              "algorithm": "md5"
            },
            {
              "value": "822145ABF0DC2FF99E0180953329EBEE16F5514D",
              "algorithm": "sha-1"
            },
            {
              "value": "035F268FA71967B903955001E74401922929214E10037FDB4A2FFAA499EF21C7",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/proseFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "bW9kdWxlIFByb3NlTW9kdWxlIHsKICAgIGV4cG9ydCBjbGFzcyBQcm9zZUNsYXNzIHsKICAgICAgICBwcml2YXRlIG5hbWU6IHN0cmluZzsKCiAgICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7CiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgfQogICAgfQp9Cg=="
          },
          "hashes": [
            {
              "value": "022A0E28B12B16E60C8A6408FCBAA14F",
              "algorithm": "md5"
            },
            {
              "value": "5944F4E45A950F7E283F35CCF578A6F25762D973",
              "algorithm": "sha-1"
            },
            {
              "value": "BCA64C88A69D83EF17936F15C5AD15771C92AE37514E45288327328A6BCF0A62",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/stylishFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "bW9kdWxlIFN0eWxpc2hNb2R1bGUgewogICAgZXhwb3J0IGNsYXNzIFN0eWxpc2hDbGFzcyB7CiAgICAgICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmc7CgogICAgICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykgewogICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICAgIH0KICAgIH0KfQo="
          },
          "hashes": [
            {
              "value": "86493CBC112F85B4B9C9F73BCA1835CF",
              "algorithm": "md5"
            },
            {
              "value": "425CE01AA810181CE48EF943E52C00815E415A42",
              "algorithm": "sha-1"
            },
            {
              "value": "6D0B5FF9CAD484029D917C610ECFFBF3489BD63A02471AEA27F42E05E98D1DEB",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/tapFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "dmFyIHggPSAxMjM7Cg=="
          },
          "hashes": [
            {
              "value": "4450242B42DBFD38B8B662B94DE82C17",
              "algorithm": "md5"
            },
            {
              "value": "7160DB5161E056C914D6D9F602992A206FCEA2BC",
              "algorithm": "sha-1"
            },
            {
              "value": "CF3AF342BE9D0A6476361A4711B810D170FC3AC8487458B4EE6D0FC98B0399CA",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/formatters/vsoFormatter.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "bW9kdWxlIFByb3NlTW9kdWxlIHsKICAgIGV4cG9ydCBjbGFzcyBQcm9zZUNsYXNzIHsKICAgICAgICBwcml2YXRlIG5hbWU6IHN0cmluZzsKCiAgICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7CiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgfQogICAgfQp9Cg=="
          },
          "hashes": [
            {
              "value": "022A0E28B12B16E60C8A6408FCBAA14F",
              "algorithm": "md5"
            },
            {
              "value": "5944F4E45A950F7E283F35CCF578A6F25762D973",
              "algorithm": "sha-1"
            },
            {
              "value": "BCA64C88A69D83EF17936F15C5AD15771C92AE37514E45288327328A6BCF0A62",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/multiple-excludes/invalid.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "dmFyIGZvbyA9IDQy"
          },
          "hashes": [
            {
              "value": "7B54C11B7E1EBD5BB9EED877EDFF945C",
              "algorithm": "md5"
            },
            {
              "value": "4E0FF4E1355E7E85C7CFF0913D93332355528197",
              "algorithm": "sha-1"
            },
            {
              "value": "51B4B6A578E7A3B271FC505839B8354027F690270F4EFD87F63EC510591B4455",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/multiple-excludes/invalid2.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "bW9kdWxlLmV4cG9ydHMgPSB7fQ=="
          },
          "hashes": [
            {
              "value": "E7CC3AD0963C134FC27FA77673531983",
              "algorithm": "md5"
            },
            {
              "value": "1A99B089B6F83D69645D80AB69B22DB67E45C9E5",
              "algorithm": "sha-1"
            },
            {
              "value": "35AB14B4A7B597C4CB3C568CDDF39EE07C557CDD7E19F2EB8B83467EAFD70609",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/multiple-excludes/valid.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "dmFyIGZvbyA9IDQyOw=="
          },
          "hashes": [
            {
              "value": "821230AD2173FCEB40D4B556B4F42DE3",
              "algorithm": "md5"
            },
            {
              "value": "AA059FDF4A51B4A88E4AC2B7B40258FD5F247F46",
              "algorithm": "sha-1"
            },
            {
              "value": "4B4BF43CCC1F3CC85D1D134B16BB29EE1E1F1F230DF4D44730BCF3F2B7CA214B",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/project-multiple-fixes/after.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZGVjbGFyZSB2YXIgd2luc3RvbjogYW55OwoKY29uc3QgRGVmYXVsdE9wdGlvbnMgPSB7CiAgICB0cmFuc3BvcnRzOiBbCiAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoewogICAgICAgIGpzb246IHRydWUsCiAgICAgICAgY29sb3JpemU6IHRydWUsCiAgICAgICAgc3RyaW5naWZ5OiB0cnVlLAogICAgfSldLAogICAgcmV3cml0ZXJzOiBbCiAgICAgICAgKGxldmVsLCBtZXNzYWdlLCBtZXRhKSA9PiB7CiAgICAgICAgICAgIGlmIChtZXRhKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBtZXRhLnRpbWVTdGFtcCA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG1ldGE7CiAgICAgICAgfSwKICAgIF0sCgp9OwoKZXhwb3J0IGNvbnN0IExvZ2dlciA9IG5ldyB3aW5zdG9uLkxvZ2dlcihEZWZhdWx0T3B0aW9ucyk7Cg=="
          },
          "hashes": [
            {
              "value": "4F378E20224300E7E322CCFDD6ED946A",
              "algorithm": "md5"
            },
            {
              "value": "59B92B26888F9F1B2DEBA42F5FA3A7EBB77008F6",
              "algorithm": "sha-1"
            },
            {
              "value": "DC9313EBFF7B65D2AD1EF623020925E42F10AD0721EE594686A617B5A198329F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/project-multiple-fixes/before.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZGVjbGFyZSB2YXIgd2luc3RvbjogYW55OwoKY29uc3QgRGVmYXVsdE9wdGlvbnMgPSB7CiAgICB0cmFuc3BvcnRzOiBbCiAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoewogICAgICAgIGpzb246IHRydWUsCiAgICAgICAgY29sb3JpemU6IHRydWUsCiAgICAgICAgc3RyaW5naWZ5OiB0cnVlCiAgICB9KV0sCiAgICByZXdyaXRlcnM6IFsKICAgICAgICAobGV2ZWwsIG1lc3NhZ2UsIG1ldGEpID0+IHsKICAgICAgICAgICAgaWYgKG1ldGEpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG1ldGEudGltZVN0YW1wID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbWV0YTsKICAgICAgICB9CiAgICBdCgoKfTsKCmV4cG9ydCBjb25zdCBMb2dnZXIgPSBuZXcgd2luc3Rvbi5Mb2dnZXIoRGVmYXVsdE9wdGlvbnMpOwo="
          },
          "hashes": [
            {
              "value": "70801729BE7BC8739FFC9B1D35C3909C",
              "algorithm": "md5"
            },
            {
              "value": "DF410208AEF2342254EDF0E67E96042CBB95B57F",
              "algorithm": "sha-1"
            },
            {
              "value": "50C2C88CB295898F45C6DE5B2B0AFCE94DA54884E6F1E823E8BC400FB1834541",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/tsconfig-extends-relative/src/src.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZXhwb3J0IGludGVyZmFjZSBUZXN0IHt9"
          },
          "hashes": [
            {
              "value": "5C8CCB28A1BE06DD0FC74F573698DE1B",
              "algorithm": "md5"
            },
            {
              "value": "A745623C35C00E7B78B7FD90340E722235405BC9",
              "algorithm": "sha-1"
            },
            {
              "value": "94BA1FA0FC597D83FF99D2C07E9101D9DB446324536FA886B6FFBA7530E714C8",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/tsconfig-extends-relative/test/test.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZXhwb3J0IGludGVyZmFjZSBJRm9vIHt9"
          },
          "hashes": [
            {
              "value": "B17271B153F948AA57EBF78809E36C3B",
              "algorithm": "md5"
            },
            {
              "value": "92F69A8E6C16766D561004A4C3C69C44649C2879",
              "algorithm": "sha-1"
            },
            {
              "value": "CCE33BEBCC91A47650C0090C270035145919840E02444BB5B3E9E5E46DF5F723",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/files/tsconfig-test/other.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Y29uc29sZS5sb2coMSk7Cg=="
          },
          "hashes": [
            {
              "value": "626A127738510C71FD0ADD3C0002DE7E",
              "algorithm": "md5"
            },
            {
              "value": "7CDFEEE0082419B26A0A5D5F490E1E9024C60C76",
              "algorithm": "sha-1"
            },
            {
              "value": "B603D946EB2B396CA4ECF65C223DAFF659DBE6F1CFEAC235B7C61D3BA6964CAE",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/formatters/checkstyleFormatterTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAiY2hhaSI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0IHsgSUZvcm1hdHRlciwgVGVzdFV0aWxzIH0gZnJvbSAiLi4vbGludCI7DQppbXBvcnQgeyBjcmVhdGVGYWlsdXJlIH0gZnJvbSAiLi91dGlscyI7DQoNCmRlc2NyaWJlKCJDaGVja3N0eWxlIEZvcm1hdHRlciIsICgpID0+IHsNCiAgICBjb25zdCBURVNUX0ZJTEVfMSA9ICJmb3JtYXR0ZXJzL2pzb25Gb3JtYXR0ZXIudGVzdC50cyI7IC8vIHJldXNlIGV4aXN0aW5nIHNhbXBsZSBmaWxlDQogICAgY29uc3QgVEVTVF9GSUxFXzIgPSAiZm9ybWF0dGVycy9wbWRGb3JtYXR0ZXIudGVzdC50cyI7IC8vIHJldXNlIGV4aXN0aW5nIHNhbXBsZSBmaWxlDQogICAgbGV0IHNvdXJjZUZpbGUxOiB0cy5Tb3VyY2VGaWxlOw0KICAgIGxldCBzb3VyY2VGaWxlMjogdHMuU291cmNlRmlsZTsNCiAgICBsZXQgZm9ybWF0dGVyOiBJRm9ybWF0dGVyOw0KDQogICAgYmVmb3JlKCgpID0+IHsNCiAgICAgICAgY29uc3QgRm9ybWF0dGVyID0gVGVzdFV0aWxzLmdldEZvcm1hdHRlcigiY2hlY2tzdHlsZSIpOw0KICAgICAgICBzb3VyY2VGaWxlMSA9IFRlc3RVdGlscy5nZXRTb3VyY2VGaWxlKFRFU1RfRklMRV8xKTsNCiAgICAgICAgc291cmNlRmlsZTIgPSBUZXN0VXRpbHMuZ2V0U291cmNlRmlsZShURVNUX0ZJTEVfMik7DQogICAgICAgIGZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXIoKTsNCiAgICB9KTsNCg0KICAgIGl0KCJmb3JtYXRzIGZhaWx1cmVzIiwgKCkgPT4gew0KICAgICAgICBjb25zdCBtYXhQb3NpdGlvbjEgPSBzb3VyY2VGaWxlMS5nZXRGdWxsV2lkdGgoKTsNCiAgICAgICAgY29uc3QgbWF4UG9zaXRpb24yID0gc291cmNlRmlsZTIuZ2V0RnVsbFdpZHRoKCk7DQoNCiAgICAgICAgY29uc3QgZmFpbHVyZXMgPSBbDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUxLCAwLCAxLCAiZmlyc3QgZmFpbHVyZSIsICJmaXJzdC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZTEsIDIsIDMsICImPD4nXCIgc2hvdWxkIGJlIGVzY2FwZWQiLCAiZXNjYXBlIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZTEsIG1heFBvc2l0aW9uMSAtIDEsIG1heFBvc2l0aW9uMSwgImxhc3QgZmFpbHVyZSIsICJsYXN0LW5hbWUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlMiwgMCwgMSwgImZpcnN0IGZhaWx1cmUiLCAiZmlyc3QtbmFtZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUyLCAyLCAzLCAiJjw+J1wiIHNob3VsZCBiZSBlc2NhcGVkIiwgImVzY2FwZSIsIHVuZGVmaW5lZCwgIndhcm5pbmciKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZTIsIG1heFBvc2l0aW9uMiAtIDEsIG1heFBvc2l0aW9uMiwgImxhc3QgZmFpbHVyZSIsICJsYXN0LW5hbWUiLCB1bmRlZmluZWQsICJ3YXJuaW5nIiksDQogICAgICAgIF07DQogICAgICAgIC8vIHRzbGludDpkaXNhYmxlIG1heC1saW5lLWxlbmd0aA0KICAgICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9DQogICAgICAgICAgICBgPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCiAgICAgICAgICAgIDxjaGVja3N0eWxlIHZlcnNpb249IjQuMyI+DQogICAgICAgICAgICA8ZmlsZSBuYW1lPSIke1RFU1RfRklMRV8xfSI+DQogICAgICAgICAgICAgICAgPGVycm9yIGxpbmU9IjEiIGNvbHVtbj0iMSIgc2V2ZXJpdHk9ImVycm9yIiBtZXNzYWdlPSJmaXJzdCBmYWlsdXJlIiBzb3VyY2U9ImZhaWx1cmUudHNsaW50LmZpcnN0LW5hbWUiIC8+DQogICAgICAgICAgICAgICAgPGVycm9yIGxpbmU9IjEiIGNvbHVtbj0iMyIgc2V2ZXJpdHk9ImVycm9yIiBtZXNzYWdlPSImYW1wOyZsdDsmZ3Q7JiMzOTsmcXVvdDsgc2hvdWxkIGJlIGVzY2FwZWQiIHNvdXJjZT0iZmFpbHVyZS50c2xpbnQuZXNjYXBlIiAvPg0KICAgICAgICAgICAgICAgIDxlcnJvciBsaW5lPSI2IiBjb2x1bW49IjMiIHNldmVyaXR5PSJlcnJvciIgbWVzc2FnZT0ibGFzdCBmYWlsdXJlIiBzb3VyY2U9ImZhaWx1cmUudHNsaW50Lmxhc3QtbmFtZSIgLz4NCiAgICAgICAgICAgIDwvZmlsZT4NCiAgICAgICAgICAgIDxmaWxlIG5hbWU9IiR7VEVTVF9GSUxFXzJ9Ij4NCiAgICAgICAgICAgICAgICA8ZXJyb3IgbGluZT0iMSIgY29sdW1uPSIxIiBzZXZlcml0eT0iZXJyb3IiIG1lc3NhZ2U9ImZpcnN0IGZhaWx1cmUiIHNvdXJjZT0iZmFpbHVyZS50c2xpbnQuZmlyc3QtbmFtZSIgLz4NCiAgICAgICAgICAgICAgICA8ZXJyb3IgbGluZT0iMSIgY29sdW1uPSIzIiBzZXZlcml0eT0id2FybmluZyIgbWVzc2FnZT0iJmFtcDsmbHQ7Jmd0OyYjMzk7JnF1b3Q7IHNob3VsZCBiZSBlc2NhcGVkIiBzb3VyY2U9ImZhaWx1cmUudHNsaW50LmVzY2FwZSIgLz4NCiAgICAgICAgICAgICAgICA8ZXJyb3IgbGluZT0iNiIgY29sdW1uPSIzIiBzZXZlcml0eT0id2FybmluZyIgbWVzc2FnZT0ibGFzdCBmYWlsdXJlIiBzb3VyY2U9ImZhaWx1cmUudHNsaW50Lmxhc3QtbmFtZSIgLz4NCiAgICAgICAgICAgIDwvZmlsZT4NCiAgICAgICAgICAgIDwvY2hlY2tzdHlsZT5gLnJlcGxhY2UoLz5ccysvZywgIj4iKTsgLy8gUmVtb3ZlIHdoaXRlc3BhY2UgYmV0d2VlbiB0YWdzDQoNCiAgICAgICAgYXNzZXJ0LmVxdWFsKGZvcm1hdHRlci5mb3JtYXQoZmFpbHVyZXMpLCBleHBlY3RlZFJlc3VsdCk7DQogICAgfSk7DQoNCiAgICBpdCgiaGFuZGxlcyBubyBmYWlsdXJlcyIsICgpID0+IHsNCiAgICAgICAgY29uc3QgcmVzdWx0ID0gZm9ybWF0dGVyLmZvcm1hdChbXSk7DQogICAgICAgIGFzc2VydC5kZWVwRXF1YWwocmVzdWx0LCAnPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48Y2hlY2tzdHlsZSB2ZXJzaW9uPSI0LjMiPjwvY2hlY2tzdHlsZT4nKTsNCiAgICB9KTsNCn0pOw0K"
          },
          "hashes": [
            {
              "value": "FCC360FAE8DB9FF918F6881B985F5740",
              "algorithm": "md5"
            },
            {
              "value": "46AE3C8BC7511BE761BD2A082989079CAE76D3CF",
              "algorithm": "sha-1"
            },
            {
              "value": "701C1B26B3036AE2715BCC2FA9971905627ABAEA3FDE4CC3D1EF466275ED1DB2",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/formatters/codeFrameFormatterTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDEzIFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCmltcG9ydCB7IGFzc2VydCB9IGZyb20gImNoYWkiOw0KaW1wb3J0IGNoYWxrIGZyb20gImNoYWxrIjsNCg0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IElGb3JtYXR0ZXIsIFRlc3RVdGlscyB9IGZyb20gIi4uL2xpbnQiOw0KaW1wb3J0IHsgY3JlYXRlRmFpbHVyZSB9IGZyb20gIi4vdXRpbHMiOw0KDQpkZXNjcmliZSgiQ29kZUZyYW1lIEZvcm1hdHRlciIsICgpID0+IHsNCiAgICBjb25zdCBURVNUX0ZJTEUgPSAiZm9ybWF0dGVycy9jb2RlRnJhbWVGb3JtYXR0ZXIudGVzdC50cyI7DQogICAgbGV0IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGU7DQogICAgbGV0IGZvcm1hdHRlcjogSUZvcm1hdHRlcjsNCiAgICBsZXQgY29sb3JzRW5hYmxlZDogYm9vbGVhbjsNCiAgICBiZWZvcmUoKCkgPT4gew0KICAgICAgICBjb2xvcnNFbmFibGVkID0gY2hhbGsuZW5hYmxlZDsNCiAgICAgICAgY29uc3QgRm9ybWF0dGVyID0gVGVzdFV0aWxzLmdldEZvcm1hdHRlcigiY29kZUZyYW1lIik7DQogICAgICAgIHNvdXJjZUZpbGUgPSBUZXN0VXRpbHMuZ2V0U291cmNlRmlsZShURVNUX0ZJTEUpOw0KICAgICAgICBmb3JtYXR0ZXIgPSBuZXcgRm9ybWF0dGVyKCk7DQogICAgfSk7DQoNCiAgICBhZnRlcigoKSA9PiB7DQogICAgICAgIChjaGFsayBhcyBhbnkpLmVuYWJsZWQgPSBjb2xvcnNFbmFibGVkOw0KICAgIH0pOw0KDQogICAgaXQoImZvcm1hdHMgZmFpbHVyZXMgd2l0aCBjb2xvcnMiLCAoKSA9PiB7DQogICAgICAgIChjaGFsayBhcyBhbnkpLmVuYWJsZWQgPSB0cnVlOw0KICAgICAgICBjb25zdCBtYXhQb3NpdGlvbiA9IHNvdXJjZUZpbGUuZ2V0RnVsbFdpZHRoKCk7DQoNCiAgICAgICAgY29uc3QgZmFpbHVyZXMgPSBbDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIDAsIDEsICJmaXJzdCBmYWlsdXJlIiwgImZpcnN0LW5hbWUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlLCAyLCAzLCAiJjw+J1wiIHNob3VsZCBiZSBlc2NhcGVkIiwgImVzY2FwZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIG1heFBvc2l0aW9uIC0gMSwgbWF4UG9zaXRpb24sICJsYXN0IGZhaWx1cmUiLCAibGFzdC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgMCwgbWF4UG9zaXRpb24sICJmdWxsIGZhaWx1cmUiLCAiZnVsbC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgMCwgbWF4UG9zaXRpb24sICJ3YXJuaW5nIGZhaWx1cmUiLCAid2FybmluZy1uYW1lIiwgdW5kZWZpbmVkLCAid2FybmluZyIpLA0KICAgICAgICBdOw0KDQogICAgICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0Q29sb3JlZCA9DQogICAgICAgICAgICBgZm9ybWF0dGVycy9jb2RlRnJhbWVGb3JtYXR0ZXIudGVzdC50cw0KICAgICAgICAgICAgXHUwMDFiWzMxbWZpcnN0IGZhaWx1cmVcdTAwMWJbMzltIFx1MDAxYls5MG0oZmlyc3QtbmFtZSlcdTAwMWJbMzltDQogICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzFtXHUwMDFiWzFtPlx1MDAxYlsyMm1cdTAwMWJbMzltXHUwMDFiWzkwbSAxIHwgXHUwMDFiWzM5bW1vZHVsZSBcdTAwMWJbMzNtQ29kZUZyYW1lTW9kdWxlXHUwMDFiWzM5bSB7DQogICAgICAgICAgICBcdTAwMWJbOTBtIDIgfCBcdTAwMWJbMzltICAgIFx1MDAxYlszNm1leHBvcnRcdTAwMWJbMzltIFx1MDAxYlszNm1jbGFzc1x1MDAxYlszOW0gXHUwMDFiWzMzbUNvZGVGcmFtZUNsYXNzXHUwMDFiWzM5bSB7DQogICAgICAgICAgICBcdTAwMWJbOTBtIDMgfCBcdTAwMWJbMzltICAgICAgICBwcml2YXRlIG5hbWVcdTAwMWJbMzNtOlx1MDAxYlszOW0gc3RyaW5nXHUwMDFiWzMzbTtcdTAwMWJbMzltDQogICAgICAgICAgICBcdTAwMWJbOTBtIDQgfCBcdTAwMWJbMzltXHUwMDFiWzBtDQoNCiAgICAgICAgICAgIFx1MDAxYlszMW1mdWxsIGZhaWx1cmVcdTAwMWJbMzltIFx1MDAxYls5MG0oZnVsbC1uYW1lKVx1MDAxYlszOW0NCiAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMW1cdTAwMWJbMW0+XHUwMDFiWzIybVx1MDAxYlszOW1cdTAwMWJbOTBtIDEgfCBcdTAwMWJbMzltbW9kdWxlIFx1MDAxYlszM21Db2RlRnJhbWVNb2R1bGVcdTAwMWJbMzltIHsNCiAgICAgICAgICAgIFx1MDAxYls5MG0gMiB8IFx1MDAxYlszOW0gICAgXHUwMDFiWzM2bWV4cG9ydFx1MDAxYlszOW0gXHUwMDFiWzM2bWNsYXNzXHUwMDFiWzM5bSBcdTAwMWJbMzNtQ29kZUZyYW1lQ2xhc3NcdTAwMWJbMzltIHsNCiAgICAgICAgICAgIFx1MDAxYls5MG0gMyB8IFx1MDAxYlszOW0gICAgICAgIHByaXZhdGUgbmFtZVx1MDAxYlszM206XHUwMDFiWzM5bSBzdHJpbmdcdTAwMWJbMzNtO1x1MDAxYlszOW0NCiAgICAgICAgICAgIFx1MDAxYls5MG0gNCB8IFx1MDAxYlszOW1cdTAwMWJbMG0NCg0KICAgICAgICAgICAgXHUwMDFiWzMzbXdhcm5pbmcgZmFpbHVyZVx1MDAxYlszOW0gXHUwMDFiWzkwbSh3YXJuaW5nLW5hbWUpXHUwMDFiWzM5bQ0KICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMxbVx1MDAxYlsxbT5cdTAwMWJbMjJtXHUwMDFiWzM5bVx1MDAxYls5MG0gMSB8IFx1MDAxYlszOW1tb2R1bGUgXHUwMDFiWzMzbUNvZGVGcmFtZU1vZHVsZVx1MDAxYlszOW0gew0KICAgICAgICAgICAgXHUwMDFiWzkwbSAyIHwgXHUwMDFiWzM5bSAgICBcdTAwMWJbMzZtZXhwb3J0XHUwMDFiWzM5bSBcdTAwMWJbMzZtY2xhc3NcdTAwMWJbMzltIFx1MDAxYlszM21Db2RlRnJhbWVDbGFzc1x1MDAxYlszOW0gew0KICAgICAgICAgICAgXHUwMDFiWzkwbSAzIHwgXHUwMDFiWzM5bSAgICAgICAgcHJpdmF0ZSBuYW1lXHUwMDFiWzMzbTpcdTAwMWJbMzltIHN0cmluZ1x1MDAxYlszM207XHUwMDFiWzM5bQ0KICAgICAgICAgICAgXHUwMDFiWzkwbSA0IHwgXHUwMDFiWzM5bVx1MDAxYlswbQ0KDQogICAgICAgICAgICBcdTAwMWJbMzFtJjw+J1wiIHNob3VsZCBiZSBlc2NhcGVkXHUwMDFiWzM5bSBcdTAwMWJbOTBtKGVzY2FwZSlcdTAwMWJbMzltDQogICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzFtXHUwMDFiWzFtPlx1MDAxYlsyMm1cdTAwMWJbMzltXHUwMDFiWzkwbSAxIHwgXHUwMDFiWzM5bW1vZHVsZSBcdTAwMWJbMzNtQ29kZUZyYW1lTW9kdWxlXHUwMDFiWzM5bSB7DQogICAgICAgICAgICBcdTAwMWJbOTBtICAgfCBcdTAwMWJbMzltIFx1MDAxYlszMW1cdTAwMWJbMW1eXHUwMDFiWzIybVx1MDAxYlszOW0NCiAgICAgICAgICAgIFx1MDAxYls5MG0gMiB8IFx1MDAxYlszOW0gICAgXHUwMDFiWzM2bWV4cG9ydFx1MDAxYlszOW0gXHUwMDFiWzM2bWNsYXNzXHUwMDFiWzM5bSBcdTAwMWJbMzNtQ29kZUZyYW1lQ2xhc3NcdTAwMWJbMzltIHsNCiAgICAgICAgICAgIFx1MDAxYls5MG0gMyB8IFx1MDAxYlszOW0gICAgICAgIHByaXZhdGUgbmFtZVx1MDAxYlszM206XHUwMDFiWzM5bSBzdHJpbmdcdTAwMWJbMzNtO1x1MDAxYlszOW0NCiAgICAgICAgICAgIFx1MDAxYls5MG0gNCB8IFx1MDAxYlszOW1cdTAwMWJbMG0NCg0KICAgICAgICAgICAgXHUwMDFiWzMxbWxhc3QgZmFpbHVyZVx1MDAxYlszOW0gXHUwMDFiWzkwbShsYXN0LW5hbWUpXHUwMDFiWzM5bQ0KICAgICAgICAgICAgXHUwMDFiWzBtIFx1MDAxYls5MG0gIDcgfCBcdTAwMWJbMzltICAgICAgICB9DQogICAgICAgICAgICBcdTAwMWJbOTBtICA4IHwgXHUwMDFiWzM5bSAgICB9DQogICAgICAgICAgICBcdTAwMWJbMzFtXHUwMDFiWzFtPlx1MDAxYlsyMm1cdTAwMWJbMzltXHUwMDFiWzkwbSAgOSB8IFx1MDAxYlszOW19DQogICAgICAgICAgICBcdTAwMWJbOTBtICAgIHwgXHUwMDFiWzM5bVx1MDAxYlszMW1cdTAwMWJbMW1eXHUwMDFiWzIybVx1MDAxYlszOW0NCiAgICAgICAgICAgIFx1MDAxYls5MG0gMTAgfCBcdTAwMWJbMzltXHUwMDFiWzBtDQoNCiAgICAgICAgYDsNCg0KICAgICAgICAvKiogQ29udmVydCBvdXRwdXQgbGluZXMgdG8gYW4gYXJyYXkgb2YgdHJpbW1lZCBsaW5lcyBmb3IgZWFzaWVyIGNvbXBhcmluZyAqLw0KICAgICAgICBmdW5jdGlvbiB0b1RyaW1tZWRMaW5lcyhsaW5lczogc3RyaW5nKTogc3RyaW5nW10gew0KICAgICAgICAgICAgcmV0dXJuIGxpbmVzLnNwbGl0KCJcbiIpLm1hcCgobGluZSkgPT4gbGluZS50cmltKCkpOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSB0b1RyaW1tZWRMaW5lcyhleHBlY3RlZFJlc3VsdENvbG9yZWQpOw0KICAgICAgICBjb25zdCByZXN1bHQgPSB0b1RyaW1tZWRMaW5lcyhmb3JtYXR0ZXIuZm9ybWF0KGZhaWx1cmVzKSk7DQoNCiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChyZXN1bHQsIGV4cGVjdGVkUmVzdWx0KTsNCiAgICB9KTsNCg0KICAgIGl0KCJoYW5kbGVzIG5vIGZhaWx1cmVzIiwgKCkgPT4gew0KICAgICAgICBjb25zdCByZXN1bHQgPSBmb3JtYXR0ZXIuZm9ybWF0KFtdKTsNCiAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgIlxuIik7DQogICAgfSk7DQp9KTsNCg=="
          },
          "hashes": [
            {
              "value": "87311373D3A001D3A26DBBFED5ED5A12",
              "algorithm": "md5"
            },
            {
              "value": "43C43E726EA1ECE95FFEDF2B7AF7DA9FA5719ECA",
              "algorithm": "sha-1"
            },
            {
              "value": "418DA57E20625506E4D60BDD8B6E117369646A4D475969CE3621904C23E5F517",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/formatters/junitFormatterTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTYgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAiY2hhaSI7DQppbXBvcnQgKiBhcyB0cyBmcm9tICJ0eXBlc2NyaXB0IjsNCg0KaW1wb3J0IHsgSUZvcm1hdHRlciwgVGVzdFV0aWxzIH0gZnJvbSAiLi4vbGludCI7DQppbXBvcnQgeyBjcmVhdGVGYWlsdXJlIH0gZnJvbSAiLi91dGlscyI7DQoNCmRlc2NyaWJlKCJKVW5pdCBGb3JtYXR0ZXIiLCAoKSA9PiB7DQogICAgY29uc3QgVEVTVF9GSUxFXzEgPSAiZm9ybWF0dGVycy9qc29uRm9ybWF0dGVyLnRlc3QudHMiOyAvLyByZXVzZSBleGlzdGluZyBzYW1wbGUgZmlsZQ0KICAgIGNvbnN0IFRFU1RfRklMRV8yID0gImZvcm1hdHRlcnMvcG1kRm9ybWF0dGVyLnRlc3QudHMiOyAvLyByZXVzZSBleGlzdGluZyBzYW1wbGUgZmlsZQ0KICAgIGxldCBzb3VyY2VGaWxlMTogdHMuU291cmNlRmlsZTsNCiAgICBsZXQgc291cmNlRmlsZTI6IHRzLlNvdXJjZUZpbGU7DQogICAgbGV0IGZvcm1hdHRlcjogSUZvcm1hdHRlcjsNCg0KICAgIGJlZm9yZSgoKSA9PiB7DQogICAgICAgIGNvbnN0IEZvcm1hdHRlciA9IFRlc3RVdGlscy5nZXRGb3JtYXR0ZXIoImp1bml0Iik7DQogICAgICAgIHNvdXJjZUZpbGUxID0gVGVzdFV0aWxzLmdldFNvdXJjZUZpbGUoVEVTVF9GSUxFXzEpOw0KICAgICAgICBzb3VyY2VGaWxlMiA9IFRlc3RVdGlscy5nZXRTb3VyY2VGaWxlKFRFU1RfRklMRV8yKTsNCiAgICAgICAgZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcigpOw0KICAgIH0pOw0KDQogICAgaXQoImZvcm1hdHMgZmFpbHVyZXMiLCAoKSA9PiB7DQogICAgICAgIGNvbnN0IG1heFBvc2l0aW9uMSA9IHNvdXJjZUZpbGUxLmdldEZ1bGxXaWR0aCgpOw0KICAgICAgICBjb25zdCBtYXhQb3NpdGlvbjIgPSBzb3VyY2VGaWxlMi5nZXRGdWxsV2lkdGgoKTsNCg0KICAgICAgICBjb25zdCBmYWlsdXJlcyA9IFsNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZTEsIDAsIDEsICJmaXJzdCBmYWlsdXJlIiwgImZpcnN0LW5hbWUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlMSwgMiwgMywgIiY8PidcIiBzaG91bGQgYmUgZXNjYXBlZCIsICJlc2NhcGUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlMSwgbWF4UG9zaXRpb24xIC0gMSwgbWF4UG9zaXRpb24xLCAibGFzdCBmYWlsdXJlIiwgImxhc3QtbmFtZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUyLCAwLCAxLCAiZmlyc3QgZmFpbHVyZSIsICJmaXJzdC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZTIsIDIsIDMsICImPD4nXCIgc2hvdWxkIGJlIGVzY2FwZWQiLCAiZXNjYXBlIiwgdW5kZWZpbmVkLCAid2FybmluZyIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlMiwgbWF4UG9zaXRpb24yIC0gMSwgbWF4UG9zaXRpb24yLCAibGFzdCBmYWlsdXJlIiwgImxhc3QtbmFtZSIsIHVuZGVmaW5lZCwgIndhcm5pbmciKSwNCiAgICAgICAgXTsNCg0KICAgICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9DQogICAgICAgICAgICBgPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCiAgICAgICAgICAgIDx0ZXN0c3VpdGVzIHBhY2thZ2U9InRzbGludCI+DQogICAgICAgICAgICAgICAgPHRlc3RzdWl0ZSBuYW1lPSIke1RFU1RfRklMRV8xfSI+DQogICAgICAgICAgICAgICAgICAgIDx0ZXN0Y2FzZSBuYW1lPSJMaW5lIDEsIENvbHVtbiAxOiBmaXJzdC1uYW1lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxmYWlsdXJlIHR5cGU9ImVycm9yIj5maXJzdCBmYWlsdXJlPC9mYWlsdXJlPg0KICAgICAgICAgICAgICAgICAgICA8L3Rlc3RjYXNlPg0KICAgICAgICAgICAgICAgICAgICA8dGVzdGNhc2UgbmFtZT0iTGluZSAxLCBDb2x1bW4gMzogZXNjYXBlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxmYWlsdXJlIHR5cGU9ImVycm9yIj4mYW1wOyZsdDsmZ3Q7JiMzOTsmcXVvdDsgc2hvdWxkIGJlIGVzY2FwZWQ8L2ZhaWx1cmU+DQogICAgICAgICAgICAgICAgICAgIDwvdGVzdGNhc2U+DQogICAgICAgICAgICAgICAgICAgIDx0ZXN0Y2FzZSBuYW1lPSJMaW5lIDYsIENvbHVtbiAzOiBsYXN0LW5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGZhaWx1cmUgdHlwZT0iZXJyb3IiPmxhc3QgZmFpbHVyZTwvZmFpbHVyZT4NCiAgICAgICAgICAgICAgICAgICAgPC90ZXN0Y2FzZT4NCiAgICAgICAgICAgICAgICA8L3Rlc3RzdWl0ZT4NCiAgICAgICAgICAgICAgICA8dGVzdHN1aXRlIG5hbWU9IiR7VEVTVF9GSUxFXzJ9Ij4NCiAgICAgICAgICAgICAgICAgICAgPHRlc3RjYXNlIG5hbWU9IkxpbmUgMSwgQ29sdW1uIDE6IGZpcnN0LW5hbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGZhaWx1cmUgdHlwZT0iZXJyb3IiPmZpcnN0IGZhaWx1cmU8L2ZhaWx1cmU+DQogICAgICAgICAgICAgICAgICAgIDwvdGVzdGNhc2U+DQogICAgICAgICAgICAgICAgICAgIDx0ZXN0Y2FzZSBuYW1lPSJMaW5lIDEsIENvbHVtbiAzOiBlc2NhcGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGZhaWx1cmUgdHlwZT0id2FybmluZyI+JmFtcDsmbHQ7Jmd0OyYjMzk7JnF1b3Q7IHNob3VsZCBiZSBlc2NhcGVkPC9mYWlsdXJlPg0KICAgICAgICAgICAgICAgICAgICA8L3Rlc3RjYXNlPg0KICAgICAgICAgICAgICAgICAgICA8dGVzdGNhc2UgbmFtZT0iTGluZSA2LCBDb2x1bW4gMzogbGFzdC1uYW1lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxmYWlsdXJlIHR5cGU9Indhcm5pbmciPmxhc3QgZmFpbHVyZTwvZmFpbHVyZT4NCiAgICAgICAgICAgICAgICAgICAgPC90ZXN0Y2FzZT4NCiAgICAgICAgICAgICAgICA8L3Rlc3RzdWl0ZT4NCiAgICAgICAgICAgIDwvdGVzdHN1aXRlcz5gLnJlcGxhY2UoLz5ccysvZywgIj4iKTsgLy8gUmVtb3ZlIHdoaXRlc3BhY2UgYmV0d2VlbiB0YWdzOw0KDQogICAgICAgIGFzc2VydC5lcXVhbChmb3JtYXR0ZXIuZm9ybWF0KGZhaWx1cmVzKSwgZXhwZWN0ZWRSZXN1bHQpOw0KICAgIH0pOw0KDQogICAgaXQoImhhbmRsZXMgbm8gZmFpbHVyZXMiLCAoKSA9PiB7DQogICAgICAgIGNvbnN0IHJlc3VsdCA9IGZvcm1hdHRlci5mb3JtYXQoW10pOw0KICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHJlc3VsdCwgJzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8+PHRlc3RzdWl0ZXMgcGFja2FnZT0idHNsaW50Ij48L3Rlc3RzdWl0ZXM+Jyk7DQogICAgfSk7DQp9KTsNCg=="
          },
          "hashes": [
            {
              "value": "CBE7F9FB1DEE937E94DB06D4CB52FC3A",
              "algorithm": "md5"
            },
            {
              "value": "38330EE981D6D8020F44F9BCFEBE8DBFF5355582",
              "algorithm": "sha-1"
            },
            {
              "value": "C1FDEE9B377E3F3A4AB43A363080C0D885FCFD49682D9D827A4B5A13F5DD7396",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/formatters/msbuildFormatterTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDEzIFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCmltcG9ydCB7IGFzc2VydCB9IGZyb20gImNoYWkiOw0KaW1wb3J0ICogYXMgcGF0aCBmcm9tICJwYXRoIjsNCmltcG9ydCAqIGFzIHRzIGZyb20gInR5cGVzY3JpcHQiOw0KDQppbXBvcnQgeyBJRm9ybWF0dGVyLCBUZXN0VXRpbHMgfSBmcm9tICIuLi9saW50IjsNCmltcG9ydCB7IGNyZWF0ZUZhaWx1cmUgfSBmcm9tICIuL3V0aWxzIjsNCg0KZGVzY3JpYmUoIk1TQnVpbGQgRm9ybWF0dGVyIiwgKCkgPT4gew0KICAgIGNvbnN0IFRFU1RfRklMRSA9ICJmb3JtYXR0ZXJzL21zYnVpbGRGb3JtYXR0ZXIudGVzdC50cyI7DQogICAgbGV0IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGU7DQogICAgbGV0IGZvcm1hdHRlcjogSUZvcm1hdHRlcjsNCg0KICAgIGJlZm9yZSgoKSA9PiB7DQogICAgICAgIGNvbnN0IEZvcm1hdHRlciA9IFRlc3RVdGlscy5nZXRGb3JtYXR0ZXIoIm1zYnVpbGQiKTsNCiAgICAgICAgc291cmNlRmlsZSA9IFRlc3RVdGlscy5nZXRTb3VyY2VGaWxlKFRFU1RfRklMRSk7DQogICAgICAgIGZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXIoKTsNCiAgICB9KTsNCg0KICAgIGl0KCJmb3JtYXRzIGZhaWx1cmVzIiwgKCkgPT4gew0KICAgICAgICBjb25zdCBtYXhQb3NpdGlvbiA9IHNvdXJjZUZpbGUuZ2V0RnVsbFdpZHRoKCk7DQoNCiAgICAgICAgY29uc3QgZmFpbHVyZXMgPSBbDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIDAsIDEsICJmaXJzdCBmYWlsdXJlIiwgImZpcnN0LW5hbWUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlLCAzMiwgMzYsICJtaWQgZmFpbHVyZSIsICJtaWQtbmFtZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIG1heFBvc2l0aW9uIC0gMSwgbWF4UG9zaXRpb24sICJsYXN0IGZhaWx1cmUiLCAibGFzdC1uYW1lIiwgdW5kZWZpbmVkLCAid2FybmluZyIpLA0KICAgICAgICBdOw0KDQogICAgICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0NCiAgICAgICAgICAgIGdldEZhaWx1cmVTdHJpbmcoVEVTVF9GSUxFLCAxLCAgMSwgImZpcnN0IGZhaWx1cmUiLCAiZmlyc3ROYW1lIiwgImVycm9yIikgKw0KICAgICAgICAgICAgZ2V0RmFpbHVyZVN0cmluZyhURVNUX0ZJTEUsIDIsIDEyLCAibWlkIGZhaWx1cmUiLCAibWlkTmFtZSIsICJlcnJvciIpICsNCiAgICAgICAgICAgIGdldEZhaWx1cmVTdHJpbmcoVEVTVF9GSUxFLCA5LCAgMiwgICJsYXN0IGZhaWx1cmUiLCAibGFzdE5hbWUiLCAid2FybmluZyIpOw0KDQogICAgICAgIGNvbnN0IGFjdHVhbFJlc3VsdCA9IGZvcm1hdHRlci5mb3JtYXQoZmFpbHVyZXMpOw0KICAgICAgICBhc3NlcnQuZXF1YWwoYWN0dWFsUmVzdWx0LCBleHBlY3RlZFJlc3VsdCk7DQogICAgfSk7DQoNCiAgICBpdCgiaGFuZGxlcyBubyBmYWlsdXJlcyIsICgpID0+IHsNCiAgICAgICAgY29uc3QgcmVzdWx0ID0gZm9ybWF0dGVyLmZvcm1hdChbXSk7DQogICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsICJcbiIpOw0KICAgIH0pOw0KDQogICAgZnVuY3Rpb24gZ2V0RmFpbHVyZVN0cmluZyhmaWxlOiBzdHJpbmcsIGxpbmU6IG51bWJlciwgY2hhcmFjdGVyOiBudW1iZXIsIHJlYXNvbjogc3RyaW5nLCBydWxlQ2FtZWxDYXNlOiBzdHJpbmcsIHNldmVyaXR5OiBzdHJpbmcpIHsNCiAgICAgICAgcmV0dXJuIGAke3BhdGgubm9ybWFsaXplKGZpbGUpfSgke2xpbmV9LCR7Y2hhcmFjdGVyfSk6ICR7c2V2ZXJpdHl9ICR7cnVsZUNhbWVsQ2FzZX06ICR7cmVhc29ufVxuYDsNCiAgICB9DQp9KTsNCg=="
          },
          "hashes": [
            {
              "value": "8BAADE3F7B77E46DF225A0841AA19AB6",
              "algorithm": "md5"
            },
            {
              "value": "218E1B9CC8556484C354B014F865CA2E1EB34B9A",
              "algorithm": "sha-1"
            },
            {
              "value": "A70A14274CA6103487A073839082C64EC5AA82B37FC325EB3F3F6552E3B76C8B",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/formatters/pmdFormatterTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDEzIFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCmltcG9ydCB7IGFzc2VydCB9IGZyb20gImNoYWkiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IElGb3JtYXR0ZXIsIFRlc3RVdGlscyB9IGZyb20gIi4uL2xpbnQiOw0KaW1wb3J0IHsgY3JlYXRlRmFpbHVyZSB9IGZyb20gIi4vdXRpbHMiOw0KDQpkZXNjcmliZSgiUE1EIEZvcm1hdHRlciIsICgpID0+IHsNCiAgICBjb25zdCBURVNUX0ZJTEUgPSAiZm9ybWF0dGVycy9wbWRGb3JtYXR0ZXIudGVzdC50cyI7DQogICAgbGV0IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGU7DQogICAgbGV0IGZvcm1hdHRlcjogSUZvcm1hdHRlcjsNCg0KICAgIGJlZm9yZSgoKSA9PiB7DQogICAgICAgIGNvbnN0IEZvcm1hdHRlciA9IFRlc3RVdGlscy5nZXRGb3JtYXR0ZXIoInBtZCIpOw0KICAgICAgICBzb3VyY2VGaWxlID0gVGVzdFV0aWxzLmdldFNvdXJjZUZpbGUoVEVTVF9GSUxFKTsNCiAgICAgICAgZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcigpOw0KICAgIH0pOw0KDQogICAgaXQoImZvcm1hdHMgZmFpbHVyZXMiLCAoKSA9PiB7DQogICAgICAgIGNvbnN0IG1heFBvc2l0aW9uID0gc291cmNlRmlsZS5nZXRGdWxsV2lkdGgoKTsNCg0KICAgICAgICBjb25zdCBmYWlsdXJlcyA9IFsNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgMCwgMSwgImZpcnN0IGZhaWx1cmUiLCAiZmlyc3QtbmFtZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIDIsIDMsICImPD4nXCIgc2hvdWxkIGJlIGVzY2FwZWQiLCAiZXNjYXBlIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgbWF4UG9zaXRpb24gLSAxLCBtYXhQb3NpdGlvbiwgImxhc3QgZmFpbHVyZSIsICJsYXN0LW5hbWUiLCB1bmRlZmluZWQsICJ3YXJuaW5nIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIDAsIG1heFBvc2l0aW9uLCAiZnVsbCBmYWlsdXJlIiwgImZ1bGwtbmFtZSIsIHVuZGVmaW5lZCwgIndhcm5pbmciKSwNCiAgICAgICAgXTsNCiAgICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPQ0KICAgICAgICAgICAgYDxwbWQgdmVyc2lvbj0idHNsaW50Ij4NCiAgICAgICAgICAgICAgICA8ZmlsZSBuYW1lPSJmb3JtYXR0ZXJzL3BtZEZvcm1hdHRlci50ZXN0LnRzIj4NCiAgICAgICAgICAgICAgICAgICAgPHZpb2xhdGlvbiBiZWdpbmNvbHVtbj0iMSIgYmVnaW5saW5lPSIxIiBwcmlvcml0eT0iMyIgcnVsZT0iZmlyc3QgZmFpbHVyZSI+DQogICAgICAgICAgICAgICAgICAgIDwvdmlvbGF0aW9uPg0KICAgICAgICAgICAgICAgIDwvZmlsZT4NCiAgICAgICAgICAgICAgICA8ZmlsZSBuYW1lPSJmb3JtYXR0ZXJzL3BtZEZvcm1hdHRlci50ZXN0LnRzIj4NCiAgICAgICAgICAgICAgICAgICAgPHZpb2xhdGlvbiBiZWdpbmNvbHVtbj0iMyIgYmVnaW5saW5lPSIxIiBwcmlvcml0eT0iMyIgcnVsZT0iJmFtcDsmbHQ7Jmd0OyYjMzk7JnF1b3Q7IHNob3VsZCBiZSBlc2NhcGVkIj4NCiAgICAgICAgICAgICAgICAgICAgPC92aW9sYXRpb24+DQogICAgICAgICAgICAgICAgPC9maWxlPg0KICAgICAgICAgICAgICAgIDxmaWxlIG5hbWU9ImZvcm1hdHRlcnMvcG1kRm9ybWF0dGVyLnRlc3QudHMiPg0KICAgICAgICAgICAgICAgICAgICA8dmlvbGF0aW9uIGJlZ2luY29sdW1uPSIzIiBiZWdpbmxpbmU9IjYiIHByaW9yaXR5PSI0IiBydWxlPSJsYXN0IGZhaWx1cmUiPg0KICAgICAgICAgICAgICAgICAgICA8L3Zpb2xhdGlvbj4NCiAgICAgICAgICAgICAgICA8L2ZpbGU+DQogICAgICAgICAgICAgICAgPGZpbGUgbmFtZT0iZm9ybWF0dGVycy9wbWRGb3JtYXR0ZXIudGVzdC50cyI+DQogICAgICAgICAgICAgICAgICAgIDx2aW9sYXRpb24gYmVnaW5jb2x1bW49IjEiIGJlZ2lubGluZT0iMSIgcHJpb3JpdHk9IjQiIHJ1bGU9ImZ1bGwgZmFpbHVyZSI+DQogICAgICAgICAgICAgICAgICAgIDwvdmlvbGF0aW9uPg0KICAgICAgICAgICAgICAgIDwvZmlsZT4NCiAgICAgICAgICAgIDwvcG1kPmAucmVwbGFjZSgvPlxzKy9nLCAiPiIpOyAvLyBSZW1vdmUgd2hpdGVzcGFjZSBiZXR3ZWVuIHRhZ3MNCg0KICAgICAgICBhc3NlcnQuZXF1YWwoZm9ybWF0dGVyLmZvcm1hdChmYWlsdXJlcyksIGV4cGVjdGVkUmVzdWx0KTsNCiAgICB9KTsNCg0KICAgIGl0KCJoYW5kbGVzIG5vIGZhaWx1cmVzIiwgKCkgPT4gew0KICAgICAgICBjb25zdCByZXN1bHQgPSBmb3JtYXR0ZXIuZm9ybWF0KFtdKTsNCiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChyZXN1bHQsICc8cG1kIHZlcnNpb249InRzbGludCI+PC9wbWQ+Jyk7DQogICAgfSk7DQp9KTsNCg=="
          },
          "hashes": [
            {
              "value": "B3D9C239FFBE24AA4518D3D62543534E",
              "algorithm": "md5"
            },
            {
              "value": "1BC9582515B2D0C3D7E50E08DF7E5A953B216D05",
              "algorithm": "sha-1"
            },
            {
              "value": "FE22FB5F53BBA3F0DAC7503E2149004A461DDE4AB315D17C465E6F6D505BBC22",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/formatters/proseFormatterTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDEzIFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCmltcG9ydCB7IGFzc2VydCB9IGZyb20gImNoYWkiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IGRlZGVudCB9IGZyb20gIi4uLy4uL3NyYy91dGlscyI7DQppbXBvcnQgeyBJRm9ybWF0dGVyLCBSdWxlRmFpbHVyZSwgVGVzdFV0aWxzIH0gZnJvbSAiLi4vbGludCI7DQppbXBvcnQgeyBjcmVhdGVGYWlsdXJlIH0gZnJvbSAiLi91dGlscyI7DQoNCmRlc2NyaWJlKCJQcm9zZSBGb3JtYXR0ZXIiLCAoKSA9PiB7DQogICAgY29uc3QgVEVTVF9GSUxFID0gImZvcm1hdHRlcnMvcHJvc2VGb3JtYXR0ZXIudGVzdC50cyI7DQogICAgbGV0IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGU7DQogICAgbGV0IGZvcm1hdHRlcjogSUZvcm1hdHRlcjsNCg0KICAgIGJlZm9yZSgoKSA9PiB7DQogICAgICAgIGNvbnN0IEZvcm1hdHRlciA9IFRlc3RVdGlscy5nZXRGb3JtYXR0ZXIoInByb3NlIik7DQogICAgICAgIHNvdXJjZUZpbGUgPSBUZXN0VXRpbHMuZ2V0U291cmNlRmlsZShURVNUX0ZJTEUpOw0KICAgICAgICBmb3JtYXR0ZXIgPSBuZXcgRm9ybWF0dGVyKCk7DQogICAgfSk7DQoNCiAgICBpdCgiZm9ybWF0cyBmYWlsdXJlcyIsICgpID0+IHsNCiAgICAgICAgY29uc3QgbWF4UG9zaXRpb24gPSBzb3VyY2VGaWxlLmdldEZ1bGxXaWR0aCgpOw0KDQogICAgICAgIGNvbnN0IGZhaWx1cmVzID0gWw0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlLCAwLCAxLCAiZmlyc3QgZmFpbHVyZSIsICJmaXJzdC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgMzIsIDM2LCAibWlkIGZhaWx1cmUiLCAibWlkLW5hbWUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlLCBtYXhQb3NpdGlvbiAtIDEsIG1heFBvc2l0aW9uLCAibGFzdCBmYWlsdXJlIiwgImxhc3QtbmFtZSIsIHVuZGVmaW5lZCwgIndhcm5pbmciKSwNCiAgICAgICAgXTsNCg0KICAgICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IGRlZGVudGANCiAgICAgICAgICAgIEVSUk9SOiAke1RFU1RfRklMRX0ke2dldFBvc2l0aW9uU3RyaW5nKDEsIDEpfWZpcnN0IGZhaWx1cmUNCiAgICAgICAgICAgIEVSUk9SOiAke1RFU1RfRklMRX0ke2dldFBvc2l0aW9uU3RyaW5nKDIsIDEyKX1taWQgZmFpbHVyZQ0KICAgICAgICAgICAgV0FSTklORzogJHtURVNUX0ZJTEV9JHtnZXRQb3NpdGlvblN0cmluZyg5LCAyKX1sYXN0IGZhaWx1cmVcbmAuc2xpY2UoMSk7IC8vIHJlbW92ZSBsZWFkaW5nIG5ld2xpbmUNCg0KICAgICAgICBjb25zdCBhY3R1YWxSZXN1bHQgPSBmb3JtYXR0ZXIuZm9ybWF0KGZhaWx1cmVzKTsNCiAgICAgICAgYXNzZXJ0LmVxdWFsKGFjdHVhbFJlc3VsdCwgZXhwZWN0ZWRSZXN1bHQpOw0KICAgIH0pOw0KDQogICAgaXQoImZvcm1hdHMgZml4ZXMiLCAoKSA9PiB7DQogICAgICAgIGNvbnN0IGZhaWx1cmVzID0gWw0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlLCAwLCAxLCAiZmlyc3QgZmFpbHVyZSIsICJmaXJzdC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgXTsNCg0KICAgICAgICBjb25zdCBtb2NrRml4ID0geyBnZXRGaWxlTmFtZTogKCkgPT4gImZpbGUyIiB9IGFzIGFueSBhcyBSdWxlRmFpbHVyZTsgIC8vIHRzbGludDpkaXNhYmxlLWxpbmUgbm8tb2JqZWN0LWxpdGVyYWwtdHlwZS1hc3NlcnRpb24NCg0KICAgICAgICBjb25zdCBmaXhlcyA9IFsNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgMCwgMSwgImZpcnN0IGZhaWx1cmUiLCAiZmlyc3QtbmFtZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIDMyLCAzNiwgIm1pZCBmYWlsdXJlIiwgIm1pZC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIG1vY2tGaXgsDQogICAgICAgIF07DQoNCiAgICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSBkZWRlbnRgDQogICAgICAgICAgICBGaXhlZCAyIGVycm9yKHMpIGluICR7VEVTVF9GSUxFfQ0KICAgICAgICAgICAgRml4ZWQgMSBlcnJvcihzKSBpbiBmaWxlMg0KDQogICAgICAgICAgICBFUlJPUjogJHtURVNUX0ZJTEV9JHtnZXRQb3NpdGlvblN0cmluZygxLCAxKX1maXJzdCBmYWlsdXJlXG5gLnNsaWNlKDEpOyAvLyByZW1vdmUgbGVhZGluZyBuZXdsaW5lDQoNCiAgICAgICAgY29uc3QgYWN0dWFsUmVzdWx0ID0gZm9ybWF0dGVyLmZvcm1hdChmYWlsdXJlcywgZml4ZXMpOw0KICAgICAgICBhc3NlcnQuZXF1YWwoYWN0dWFsUmVzdWx0LCBleHBlY3RlZFJlc3VsdCk7DQogICAgfSk7DQoNCiAgICBpdCgiaGFuZGxlcyBubyBmYWlsdXJlcyIsICgpID0+IHsNCiAgICAgICAgY29uc3QgcmVzdWx0ID0gZm9ybWF0dGVyLmZvcm1hdChbXSk7DQogICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsICJcbiIpOw0KICAgIH0pOw0KDQogICAgZnVuY3Rpb24gZ2V0UG9zaXRpb25TdHJpbmcobGluZTogbnVtYmVyLCBjaGFyYWN0ZXI6IG51bWJlcikgew0KICAgICAgICByZXR1cm4gYFske2xpbmV9LCAke2NoYXJhY3Rlcn1dOiBgOw0KICAgIH0NCn0pOw0K"
          },
          "hashes": [
            {
              "value": "0C6A7C3152F3A9189BDF1E4773680FB4",
              "algorithm": "md5"
            },
            {
              "value": "D0D157D1FA54DF1E9075F8035E3C4CD178C45B85",
              "algorithm": "sha-1"
            },
            {
              "value": "DAD4D55B8DDECEAAC4C430E7231E39822A565434F456435C2B35DADBBB588951",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/formatters/stylishFormatterTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDEzIFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCmltcG9ydCB7IGFzc2VydCB9IGZyb20gImNoYWkiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IGRlZGVudCB9IGZyb20gIi4uLy4uL3NyYy91dGlscyI7DQppbXBvcnQgeyBJRm9ybWF0dGVyLCBUZXN0VXRpbHMgfSBmcm9tICIuLi9saW50IjsNCmltcG9ydCB7IGNyZWF0ZUZhaWx1cmUgfSBmcm9tICIuL3V0aWxzIjsNCg0KZGVzY3JpYmUoIlN0eWxpc2ggRm9ybWF0dGVyIiwgKCkgPT4gew0KICAgIGNvbnN0IFRFU1RfRklMRSA9ICJmb3JtYXR0ZXJzL3N0eWxpc2hGb3JtYXR0ZXIudGVzdC50cyI7DQogICAgbGV0IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGU7DQogICAgbGV0IGZvcm1hdHRlcjogSUZvcm1hdHRlcjsNCg0KICAgIGJlZm9yZSgoKSA9PiB7DQogICAgICAgIGNvbnN0IEZvcm1hdHRlciA9IFRlc3RVdGlscy5nZXRGb3JtYXR0ZXIoInN0eWxpc2giKTsNCiAgICAgICAgc291cmNlRmlsZSA9IFRlc3RVdGlscy5nZXRTb3VyY2VGaWxlKFRFU1RfRklMRSk7DQogICAgICAgIGZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXIoKTsNCiAgICB9KTsNCg0KICAgIGl0KCJmb3JtYXRzIGZhaWx1cmVzIiwgKCkgPT4gew0KICAgICAgICBjb25zdCBtYXhQb3NpdGlvbiA9IHNvdXJjZUZpbGUuZ2V0RnVsbFdpZHRoKCk7DQoNCiAgICAgICAgY29uc3QgZmFpbHVyZXMgPSBbDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIDAsIDEsICJmaXJzdCBmYWlsdXJlIiwgImZpcnN0LW5hbWUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlLCAyLCAzLCAiJjw+J1wiIHNob3VsZCBiZSBlc2NhcGVkIiwgImVzY2FwZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIG1heFBvc2l0aW9uIC0gMSwgbWF4UG9zaXRpb24sICJsYXN0IGZhaWx1cmUiLCAibGFzdC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgMCwgbWF4UG9zaXRpb24sICJmdWxsIGZhaWx1cmUiLCAiZnVsbC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgXTsNCg0KICAgICAgICBjb25zdCBtYXhQb3NpdGlvbk9iaiA9IHNvdXJjZUZpbGUuZ2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24obWF4UG9zaXRpb24gLSAxKTsNCg0KICAgICAgICBjb25zdCBtYXhQb3NpdGlvblR1cGxlID0gYCR7bWF4UG9zaXRpb25PYmoubGluZSArIDF9OiR7bWF4UG9zaXRpb25PYmouY2hhcmFjdGVyICsgMX1gOw0KDQogICAgICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0gZGVkZW50YA0KICAgICAgICAgICAgZm9ybWF0dGVycy9zdHlsaXNoRm9ybWF0dGVyLnRlc3QudHNcdTAwMWJbOG06MToxXHUwMDFiWzI4bQ0KICAgICAgICAgICAgXHUwMDFiWzMxbUVSUk9SOiAxOjFcdTAwMWJbMzltICBcdTAwMWJbOTBtZmlyc3QtbmFtZVx1MDAxYlszOW0gIFx1MDAxYlszM21maXJzdCBmYWlsdXJlXHUwMDFiWzM5bQ0KICAgICAgICAgICAgXHUwMDFiWzMxbUVSUk9SOiAxOjFcdTAwMWJbMzltICBcdTAwMWJbOTBtZnVsbC1uYW1lIFx1MDAxYlszOW0gIFx1MDAxYlszM21mdWxsIGZhaWx1cmVcdTAwMWJbMzltDQogICAgICAgICAgICBcdTAwMWJbMzFtRVJST1I6IDE6M1x1MDAxYlszOW0gIFx1MDAxYls5MG1lc2NhcGUgICAgXHUwMDFiWzM5bSAgXHUwMDFiWzMzbSY8PidcIiBzaG91bGQgYmUgZXNjYXBlZFx1MDAxYlszOW0NCiAgICAgICAgICAgIFx1MDAxYlszMW1FUlJPUjogJHttYXhQb3NpdGlvblR1cGxlfVx1MDAxYlszOW0gIFx1MDAxYls5MG1sYXN0LW5hbWUgXHUwMDFiWzM5bSAgXHUwMDFiWzMzbWxhc3QgZmFpbHVyZVx1MDAxYlszOW1cbmANCiAgICAgICAgICAgIC5zbGljZSgxKTsgLy8gcmVtb3ZlIGxlYWRpbmcgbmV3bGluZQ0KDQogICAgICAgIGFzc2VydC5lcXVhbChmb3JtYXR0ZXIuZm9ybWF0KGZhaWx1cmVzKSwgZXhwZWN0ZWRSZXN1bHQpOw0KICAgIH0pOw0KDQogICAgaXQoImhhbmRsZXMgbm8gZmFpbHVyZXMiLCAoKSA9PiB7DQogICAgICAgIGNvbnN0IHJlc3VsdCA9IGZvcm1hdHRlci5mb3JtYXQoW10pOw0KICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCAiXG4iKTsNCiAgICB9KTsNCn0pOw0K"
          },
          "hashes": [
            {
              "value": "E57FE6E56DD4D6D95796FA6A3F1A3F24",
              "algorithm": "md5"
            },
            {
              "value": "60F8236D2D5ECA9D7AD3324F65215A78AA382AC8",
              "algorithm": "sha-1"
            },
            {
              "value": "1342F3A38ADF44B787ACB730007F0D3B9BF11C2FCF86BF8FC6C986FA85DFF519",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/formatters/vsoFormatterTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDEzIFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCmltcG9ydCB7IGFzc2VydCB9IGZyb20gImNoYWkiOw0KaW1wb3J0ICogYXMgdHMgZnJvbSAidHlwZXNjcmlwdCI7DQoNCmltcG9ydCB7IElGb3JtYXR0ZXIsIFRlc3RVdGlscyB9IGZyb20gIi4uL2xpbnQiOw0KaW1wb3J0IHsgY3JlYXRlRmFpbHVyZSB9IGZyb20gIi4vdXRpbHMiOw0KDQpkZXNjcmliZSgiVlNPIEZvcm1hdHRlciIsICgpID0+IHsNCiAgICBjb25zdCBURVNUX0ZJTEUgPSAiZm9ybWF0dGVycy92c29Gb3JtYXR0ZXIudGVzdC50cyI7DQogICAgbGV0IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGU7DQogICAgbGV0IGZvcm1hdHRlcjogSUZvcm1hdHRlcjsNCg0KICAgIGJlZm9yZSgoKSA9PiB7DQogICAgICAgIGNvbnN0IEZvcm1hdHRlciA9IFRlc3RVdGlscy5nZXRGb3JtYXR0ZXIoInZzbyIpOw0KICAgICAgICBzb3VyY2VGaWxlID0gVGVzdFV0aWxzLmdldFNvdXJjZUZpbGUoVEVTVF9GSUxFKTsNCiAgICAgICAgZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcigpOw0KICAgIH0pOw0KDQogICAgaXQoImZvcm1hdHMgZmFpbHVyZXMiLCAoKSA9PiB7DQogICAgICAgIGNvbnN0IG1heFBvc2l0aW9uID0gc291cmNlRmlsZS5nZXRGdWxsV2lkdGgoKTsNCg0KICAgICAgICBjb25zdCBmYWlsdXJlcyA9IFsNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgMCwgMSwgImZpcnN0IGZhaWx1cmUiLCAiZmlyc3QtbmFtZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIDMyLCAzNiwgIm1pZCBmYWlsdXJlIiwgIm1pZC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgICAgIGNyZWF0ZUZhaWx1cmUoc291cmNlRmlsZSwgbWF4UG9zaXRpb24gLSAxLCBtYXhQb3NpdGlvbiwgImxhc3QgZmFpbHVyZSIsICJsYXN0LW5hbWUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICBdOw0KDQogICAgICAgIGNvbnN0IGV4cGVjdGVkUmVzdWx0ID0NCiAgICAgICAgICAgIGdldEZhaWx1cmVTdHJpbmcoVEVTVF9GSUxFLCAxLCAgMSwgImZpcnN0IGZhaWx1cmUiLCAiZmlyc3QtbmFtZSIpICsNCiAgICAgICAgICAgIGdldEZhaWx1cmVTdHJpbmcoVEVTVF9GSUxFLCAyLCAxMiwgIm1pZCBmYWlsdXJlIiwgIm1pZC1uYW1lIikgKw0KICAgICAgICAgICAgZ2V0RmFpbHVyZVN0cmluZyhURVNUX0ZJTEUsIDksICAyLCAgImxhc3QgZmFpbHVyZSIsICJsYXN0LW5hbWUiKTsNCg0KICAgICAgICBjb25zdCBhY3R1YWxSZXN1bHQgPSBmb3JtYXR0ZXIuZm9ybWF0KGZhaWx1cmVzKTsNCiAgICAgICAgYXNzZXJ0LmVxdWFsKGFjdHVhbFJlc3VsdCwgZXhwZWN0ZWRSZXN1bHQpOw0KICAgIH0pOw0KDQogICAgaXQoImRvZXMgbm90IGR1cGxpY2F0ZSBvdXRwdXQgZm9yIGZpeGVkIGZhaWx1cmVzIiwgKCkgPT4gew0KICAgICAgICBjb25zdCBtYXhQb3NpdGlvbiA9IHNvdXJjZUZpbGUuZ2V0RnVsbFdpZHRoKCk7DQoNCiAgICAgICAgY29uc3QgZmFpbHVyZXMgPSBbDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIDAsIDEsICJmaXJzdCBmYWlsdXJlIiwgImZpcnN0LW5hbWUiLCB1bmRlZmluZWQsICJlcnJvciIpLA0KICAgICAgICAgICAgY3JlYXRlRmFpbHVyZShzb3VyY2VGaWxlLCAzMiwgMzYsICJtaWQgZmFpbHVyZSIsICJtaWQtbmFtZSIsIHVuZGVmaW5lZCwgImVycm9yIiksDQogICAgICAgICAgICBjcmVhdGVGYWlsdXJlKHNvdXJjZUZpbGUsIG1heFBvc2l0aW9uIC0gMSwgbWF4UG9zaXRpb24sICJsYXN0IGZhaWx1cmUiLCAibGFzdC1uYW1lIiwgdW5kZWZpbmVkLCAiZXJyb3IiKSwNCiAgICAgICAgXTsNCg0KICAgICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9DQogICAgICAgICAgICBnZXRGYWlsdXJlU3RyaW5nKFRFU1RfRklMRSwgMSwgIDEsICJmaXJzdCBmYWlsdXJlIiwgImZpcnN0LW5hbWUiKSArDQogICAgICAgICAgICBnZXRGYWlsdXJlU3RyaW5nKFRFU1RfRklMRSwgMiwgMTIsICJtaWQgZmFpbHVyZSIsICJtaWQtbmFtZSIpICsNCiAgICAgICAgICAgIGdldEZhaWx1cmVTdHJpbmcoVEVTVF9GSUxFLCA5LCAgMiwgICJsYXN0IGZhaWx1cmUiLCAibGFzdC1uYW1lIik7DQoNCiAgICAgICAgY29uc3QgZml4ZWQgPSBmYWlsdXJlcy5zbGljZSgpOw0KDQogICAgICAgIGNvbnN0IGFjdHVhbFJlc3VsdCA9IGZvcm1hdHRlci5mb3JtYXQoZmFpbHVyZXMsIGZpeGVkKTsNCiAgICAgICAgYXNzZXJ0LmVxdWFsKGFjdHVhbFJlc3VsdCwgZXhwZWN0ZWRSZXN1bHQpOw0KICAgIH0pOw0KDQogICAgaXQoImhhbmRsZXMgbm8gZmFpbHVyZXMiLCAoKSA9PiB7DQogICAgICAgIGNvbnN0IHJlc3VsdCA9IGZvcm1hdHRlci5mb3JtYXQoW10pOw0KICAgICAgICBhc3NlcnQuZXF1YWwocmVzdWx0LCAiXG4iKTsNCiAgICB9KTsNCg0KICAgIGZ1bmN0aW9uIGdldEZhaWx1cmVTdHJpbmcoZmlsZTogc3RyaW5nLCBsaW5lOiBudW1iZXIsIGNoYXJhY3RlcjogbnVtYmVyLCByZWFzb246IHN0cmluZywgY29kZTogc3RyaW5nKSB7DQogICAgICAgIHJldHVybiBgIyN2c29bdGFzay5sb2dpc3N1ZSB0eXBlPXdhcm5pbmc7c291cmNlcGF0aD0ke2ZpbGV9O2xpbmVudW1iZXI9JHtsaW5lfTtjb2x1bW5udW1iZXI9JHtjaGFyYWN0ZXJ9O2NvZGU9JHtjb2RlfTtdJHtyZWFzb259XG5gOw0KICAgIH0NCn0pOw0K"
          },
          "hashes": [
            {
              "value": "C13CAC7BEEEFFFA46BD421B5F0AC67A1",
              "algorithm": "md5"
            },
            {
              "value": "8F3E0A9C8217DD4D2BB59CD462B21CD3B1232399",
              "algorithm": "sha-1"
            },
            {
              "value": "2831FAC6950250525316505DA0938574C92AFFCD557ACA849A783BC25E147913",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rule-tester/parseTests.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDE2IFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCmltcG9ydCB7IGFzc2VydCB9IGZyb20gImNoYWkiOw0KDQppbXBvcnQgKiBhcyBwYXJzZSBmcm9tICIuLi8uLi9zcmMvdmVyaWZ5L3BhcnNlIjsNCmltcG9ydCAqIGFzIHRlc3REYXRhIGZyb20gIi4vdGVzdERhdGEiOw0KDQpkZXNjcmliZSgiUnVsZSBUZXN0IFBhcnNlIiwgKCkgPT4gew0KICAgIGRlc2NyaWJlKCJyZW1vdmVFcnJvck1hcmt1cCIsICgpID0+IHsNCiAgICAgICAgaXQoInNob3VsZCByZXR1cm4gdGhlIGNvbnRlbnRzIG9mIGEgcmVndWxhciBzdHJpbmcgdW5jaGFuZ2VkIiwgKCkgPT4gew0KICAgICAgICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHBhcnNlLnJlbW92ZUVycm9yTWFya3VwKHRlc3REYXRhLmxpbnRTdHIxKSwgdGVzdERhdGEuY29kZVN0cjEpOw0KICAgICAgICB9KTsNCg0KICAgICAgICBpdCgic2hvdWxkIHJlbW92ZSBhIHNpbmdsZS1saW5lIGVycm9yIG1hcmt1cCBjb3JyZWN0bHkiLCAoKSA9PiB7DQogICAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwocGFyc2UucmVtb3ZlRXJyb3JNYXJrdXAodGVzdERhdGEubGludFN0cjIpLCB0ZXN0RGF0YS5jb2RlU3RyMik7DQogICAgICAgIH0pOw0KDQogICAgICAgIGl0KCJzaG91bGQgcmVtb3ZlIGEgbWl4IG9mIGVycm9yIG1hcmt1cCBjb3JyZWN0bHkiLCAoKSA9PiB7DQogICAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwocGFyc2UucmVtb3ZlRXJyb3JNYXJrdXAodGVzdERhdGEubGludFN0cjMpLCB0ZXN0RGF0YS5jb2RlU3RyMyk7DQogICAgICAgIH0pOw0KDQogICAgICAgIGl0KCJzaG91bGQgaGFuZGxlIG1lc3NhZ2Ugc3Vic3RpdHV0aW9ucyBjb3JyZWN0bHkiLCAoKSA9PiB7DQogICAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwocGFyc2UucmVtb3ZlRXJyb3JNYXJrdXAodGVzdERhdGEubGludFN0cjYpLCB0ZXN0RGF0YS5jb2RlU3RyNik7DQogICAgICAgIH0pOw0KDQogICAgICAgIGl0KCJzaG91bGQgaGFuZGxlIG5pbC1sZW5ndGggZXJyb3JzIGNvcnJlY3RseSIsICgpID0+IHsNCiAgICAgICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChwYXJzZS5yZW1vdmVFcnJvck1hcmt1cCh0ZXN0RGF0YS5saW50U3RyNyksIHRlc3REYXRhLmNvZGVTdHI3KTsNCiAgICAgICAgfSk7DQogICAgfSk7DQoNCiAgICBkZXNjcmliZSgicGFyc2VFcnJvcnMiLCAoKSA9PiB7DQogICAgICAgIGl0KCJzaG91bGQgcmV0dXJuIG5vIGVycm9ycyBmcm9tIGEgcmVndWxhciBzdHJpbmciLCAoKSA9PiB7DQogICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHBhcnNlLnBhcnNlRXJyb3JzRnJvbU1hcmt1cCh0ZXN0RGF0YS5saW50U3RyMSksIHRlc3REYXRhLnJlc3VsdEVycnMxKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgaXQoInNob3VsZCBmaW5kIGEgc2luZ2xlLWxpbmUgZXJyb3IgY29ycmVjdGx5IiwgKCkgPT4gew0KICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChwYXJzZS5wYXJzZUVycm9yc0Zyb21NYXJrdXAodGVzdERhdGEubGludFN0cjIpLCB0ZXN0RGF0YS5yZXN1bHRFcnJzMik7DQogICAgICAgIH0pOw0KDQogICAgICAgIGl0KCJzaG91bGQgZmluZCBhIG1peCBvZiBlcnJvcnMgY29ycmVjdGx5IiwgKCkgPT4gew0KICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChwYXJzZS5wYXJzZUVycm9yc0Zyb21NYXJrdXAodGVzdERhdGEubGludFN0cjMpLCB0ZXN0RGF0YS5yZXN1bHRFcnJzMyk7DQogICAgICAgIH0pOw0KDQogICAgICAgIGl0KCJzaG91bGQgaGFuZGxlIG1lc3NhZ2Ugc3Vic3RpdHV0aW9ucyBjb3JyZWN0bHkiLCAoKSA9PiB7DQogICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHBhcnNlLnBhcnNlRXJyb3JzRnJvbU1hcmt1cCh0ZXN0RGF0YS5saW50U3RyNiksIHRlc3REYXRhLnJlc3VsdEVycnM2KTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgaXQoInNob3VsZCBoYW5kbGUgbmlsLWxlbmd0aCBlcnJvcnMgY29ycmVjdGx5IiwgKCkgPT4gew0KICAgICAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChwYXJzZS5wYXJzZUVycm9yc0Zyb21NYXJrdXAodGVzdERhdGEubGludFN0cjcpLCB0ZXN0RGF0YS5yZXN1bHRFcnJzNyk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KDQogICAgZGVzY3JpYmUoImNyZWF0ZU1hcmt1cEZyb21FcnJvcnMiLCAoKSA9PiB7DQogICAgICAgIGl0KCJzaG91bGQgZ2VuZXJhdGUgY29ycmVjdCBtYXJrdXAiLCAoKSA9PiB7DQogICAgICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwocGFyc2UuY3JlYXRlTWFya3VwRnJvbUVycm9ycyh0ZXN0RGF0YS5jb2RlU3RyNSwgdGVzdERhdGEucmVzdWx0RXJyczUpLCB0ZXN0RGF0YS5saW50U3RyNSk7DQogICAgICAgIH0pOw0KDQogICAgICAgIGl0KCJzaG91bGQgZ2VuZXJhdGUgY29ycmVjdCBtYXJrdXAgd2l0aCBuaWwtbGVuZ3RoIGVycm9ycyIsICgpID0+IHsNCiAgICAgICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChwYXJzZS5jcmVhdGVNYXJrdXBGcm9tRXJyb3JzKHRlc3REYXRhLmNvZGVTdHI3LCB0ZXN0RGF0YS5yZXN1bHRFcnJzNyksIHRlc3REYXRhLmxpbnRTdHI3KTsNCiAgICAgICAgfSk7DQogICAgfSk7DQp9KTsNCg=="
          },
          "hashes": [
            {
              "value": "28BDC3D3605658E05578CEF57ECEC599",
              "algorithm": "md5"
            },
            {
              "value": "179C08AC53725D284656CAD2A4103F2B363AFDBA",
              "algorithm": "sha-1"
            },
            {
              "value": "4B3FC5C65E27A5BDCB366A7B9E9953A6F4D3F245ECE4979A36F53756420B30D1",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rule-tester/testData.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoNCiAqIENvcHlyaWdodCAyMDE2IFBhbGFudGlyIFRlY2hub2xvZ2llcywgSW5jLg0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQogKg0KICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICoNCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICovDQoNCmltcG9ydCB7IExpbnRFcnJvciB9IGZyb20gIi4uLy4uL3NyYy92ZXJpZnkvbGludEVycm9yIjsNCg0KLyogdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIG5vLWNvbnNlY3V0aXZlLWJsYW5rLWxpbmVzICovDQoNCmV4cG9ydCBjb25zdCBsaW50U3RyMSA9IGANCllheSBzb21lIGZpbGUgY29udGVudHMNClRoYXQgaGF2ZSB+fiBpbiBpdCBpbiB0aGUgbWlkZGxlDQpBbmQgc29tZSBicmFja2V0cyB0b28gICBbYnJhY2tldHMgYXJlIGhlcmVdDQp+fn4gQW5kIGV2ZW4gbGluZXMgdGhhdCBzdGFydCB3aXRoICAgW3RpbGRlc10NCmA7DQpleHBvcnQgY29uc3QgY29kZVN0cjEgPSBsaW50U3RyMTsNCmV4cG9ydCBjb25zdCByZXN1bHRFcnJzMTogTGludEVycm9yW10gPSBbXTsNCg0KDQpleHBvcnQgY29uc3QgbGludFN0cjIgPSBgDQpBIGZpbGUgd2l0aCBhbiBlcnJvcg0Kfn5+fn4gICAgICAgICAgICAgICAgICBbZXJyb3JdDQpgOw0KZXhwb3J0IGNvbnN0IGNvZGVTdHIyID0gYA0KQSBmaWxlIHdpdGggYW4gZXJyb3INCmA7DQpleHBvcnQgY29uc3QgcmVzdWx0RXJyczI6IExpbnRFcnJvcltdID0gWw0KICB7IHN0YXJ0UG9zOiB7IGxpbmU6IDEsIGNvbDogMCB9LCBlbmRQb3M6IHsgbGluZTogMSwgY29sOiA1IH0sIG1lc3NhZ2U6ICJlcnJvciIgfSwNCl07DQoNCg0KZXhwb3J0IGNvbnN0IGxpbnRTdHIzID0gYA0KQSBmaWxlIHdpdGggbG90cyBvZiBlcnJvcnMNCn5+fn5+ICAgICAgICAgICAgICAgICAgW2Vycm9yXQ0KICAgIH5+fn5+fn5+fn5+fn4gICAgICBbZXJyb3IyXQ0KICAgfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4NCiAgIFNvbWUgbW9yZSBjb2RlIGdvZXMgaGVyZQ0Kfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+DQp+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4NCiAgIEFuZCBtb3JlIGNvZGUgaGVyZQ0Kfn5+fn5+fn5+fn5+ICAgIFttdWx0aWxpbmUgZXJyb3IxXQ0Kfn5+fn5+fn5+fn5+fn5+fn5+fn5+DQogICAgICB+ICBbZXJyb3IzOiBmdW5dDQogICBGaW5hbCBjb2RlIGhlcmUNCn5+ICBbbXVsdGlsaW5lIGVycm9yMl0NCmA7DQoNCmV4cG9ydCBjb25zdCBjb2RlU3RyMyA9IGANCkEgZmlsZSB3aXRoIGxvdHMgb2YgZXJyb3JzDQogICBTb21lIG1vcmUgY29kZSBnb2VzIGhlcmUNCiAgIEFuZCBtb3JlIGNvZGUgaGVyZQ0KICAgRmluYWwgY29kZSBoZXJlDQpgOw0KZXhwb3J0IGNvbnN0IHJlc3VsdEVycnMzOiBMaW50RXJyb3JbXSA9IFsNCiAgeyBzdGFydFBvczogeyBsaW5lOiAxLCBjb2w6IDAgfSwgZW5kUG9zOiB7IGxpbmU6IDEsIGNvbDogNSB9LCBtZXNzYWdlOiAiZXJyb3IiIH0sDQogIHsgc3RhcnRQb3M6IHsgbGluZTogMSwgY29sOiAzIH0sIGVuZFBvczogeyBsaW5lOiAzLCBjb2w6IDEyIH0sIG1lc3NhZ2U6ICJtdWx0aWxpbmUgZXJyb3IxIiB9LA0KICB7IHN0YXJ0UG9zOiB7IGxpbmU6IDEsIGNvbDogNCB9LCBlbmRQb3M6IHsgbGluZTogMSwgY29sOiAxNyB9LCBtZXNzYWdlOiAiZXJyb3IyIiB9LA0KICB7IHN0YXJ0UG9zOiB7IGxpbmU6IDIsIGNvbDogMCB9LCBlbmRQb3M6IHsgbGluZTogNCwgY29sOiAyIH0sIG1lc3NhZ2U6ICJtdWx0aWxpbmUgZXJyb3IyIiB9LA0KICB7IHN0YXJ0UG9zOiB7IGxpbmU6IDMsIGNvbDogNiB9LCBlbmRQb3M6IHsgbGluZTogMywgY29sOiA3IH0sIG1lc3NhZ2U6ICJlcnJvcjM6IGZ1biIgfSwNCl07DQoNCg0KZXhwb3J0IGNvbnN0IGxpbnRTdHI0ID0gIiI7DQpleHBvcnQgY29uc3QgY29kZVN0cjQgPSAiIjsNCmV4cG9ydCBjb25zdCByZXN1bHRFcnJzNDogTGludEVycm9yW10gPSBbXTsNCg0KDQovLyB0aGlzIGlzIGEgaWRlYWxseSBmb3JtYXR0ZWQgbGludCBzdHJpbmcsIGVycm9ycyBvcmRlcmVkIGJ5IHN0YXJ0IHBvc2l0aW9uLA0KLy8gZXJyb3IgbWVzc2FnZXMgb25lIHNwYWNlIGFmdGVyIGVuZCBvZiBsaW5lIG9mIGNvZGUgYWJvdmUNCmV4cG9ydCBjb25zdCBsaW50U3RyNSA9IGANCnNvbWVPYmplY3Quc29tZVByb3BlcnR5LmRvU29tZXRoaW5nKCk7DQogICAgICAgICAgfn5+fn5+fn5+fn5+fiAgICAgICAgICAgICAgICBbdW5zYWZlIGFjY2Vzc10NCiAgICAgICAgICAgIH5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+DQpzb21lVmFyIDwtIHNvbWVPYmplY3QuY3JhenlNZXRob2QoYXJnMSwgYXJnMiwgYXJnMyk7DQp+fn5+fn5+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFthbm90aGVyIGVycm9yXQ0KYDsNCmV4cG9ydCBjb25zdCBjb2RlU3RyNSA9IGANCnNvbWVPYmplY3Quc29tZVByb3BlcnR5LmRvU29tZXRoaW5nKCk7DQpzb21lVmFyIDwtIHNvbWVPYmplY3QuY3JhenlNZXRob2QoYXJnMSwgYXJnMiwgYXJnMyk7DQpgOw0KZXhwb3J0IGNvbnN0IHJlc3VsdEVycnM1OiBMaW50RXJyb3JbXSA9IFsNCiAgeyBzdGFydFBvczogeyBsaW5lOiAxLCBjb2w6IDEwIH0sIGVuZFBvczogeyBsaW5lOiAxLCBjb2w6IDIzfSwgbWVzc2FnZTogInVuc2FmZSBhY2Nlc3MiIH0sDQogIHsgc3RhcnRQb3M6IHsgbGluZTogMSwgY29sOiAxMiB9LCBlbmRQb3M6IHsgbGluZTogMiwgY29sOiA3IH0sIG1lc3NhZ2U6ICJhbm90aGVyIGVycm9yIiB9LA0KXTsNCg0KDQpleHBvcnQgY29uc3QgbGludFN0cjYgPSBgDQppZiAoY29kZSA9PT0gbGludC1lcnJvci1mcmVlKSB7DQogICAgICAgICAgICAgfn5+fn5+fn5+fn5+fn5+ICAgIFtlcnJdDQp9DQoNCltlcnJdOiBBIGxvbmdlciBlcnJvciBtZXNzYWdlIEkgZGlkbid0IHdhbnQgdG8gdHlwZSBldmVyeSB0aW1lIQ0KYDsNCmV4cG9ydCBjb25zdCBjb2RlU3RyNiA9IGANCmlmIChjb2RlID09PSBsaW50LWVycm9yLWZyZWUpIHsNCn0NCg0KYDsNCmV4cG9ydCBjb25zdCByZXN1bHRFcnJzNjogTGludEVycm9yW10gPSBbDQogICAgeyBzdGFydFBvczogeyBsaW5lOiAxLCBjb2w6IDEzIH0sIGVuZFBvczogeyBsaW5lOiAxLCBjb2w6IDI4IH0sIG1lc3NhZ2U6ICJBIGxvbmdlciBlcnJvciBtZXNzYWdlIEkgZGlkbid0IHdhbnQgdG8gdHlwZSBldmVyeSB0aW1lISIgfSwNCl07DQoNCg0KZXhwb3J0IGNvbnN0IGxpbnRTdHI3ID0gYA0Kc29tZUNvZGUuc29tZXRoaW5nKCk7DQogfm5pbCAgICAgICAgICAgICAgICAgW3NvbWUgZXJyb3JdDQptb3JlIGNvZGUgew0KDQp+bmlsDQoNCn5uaWwgW2Fub3RoZXIgZXJyb3JdDQp9DQpgOw0KZXhwb3J0IGNvbnN0IGNvZGVTdHI3ID0gYA0Kc29tZUNvZGUuc29tZXRoaW5nKCk7DQptb3JlIGNvZGUgew0KDQoNCn0NCmA7DQpleHBvcnQgY29uc3QgcmVzdWx0RXJyczc6IExpbnRFcnJvcltdID0gWw0KICB7IHN0YXJ0UG9zOiB7IGxpbmU6IDEsIGNvbDogMSB9LCBlbmRQb3M6IHsgbGluZTogMSwgY29sOiAxIH0sIG1lc3NhZ2U6ICJzb21lIGVycm9yIiB9LA0KICB7IHN0YXJ0UG9zOiB7IGxpbmU6IDMsIGNvbDogMCB9LCBlbmRQb3M6IHsgbGluZTogNCwgY29sOiAwIH0sIG1lc3NhZ2U6ICJhbm90aGVyIGVycm9yIiB9LA0KXTsNCg0KLyogdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgKi8NCg=="
          },
          "hashes": [
            {
              "value": "1F41CC7ADB402973BEE4928C8B8E63CC",
              "algorithm": "md5"
            },
            {
              "value": "7D9E682132307D2D0A8F0D93DCC00DE664A974D3",
              "algorithm": "sha-1"
            },
            {
              "value": "42B652E3242E9931D7195029DB8BBEC40333A4FC4B6BBD6DF2614AC8582FBDB6",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/deprecation/other.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqIEBkZXByZWNhdGVkIHJlYXNvbiAqLw0KZXhwb3J0IGZ1bmN0aW9uIG90aGVyKCk6IHZvaWQ7DQovKiogbm90IGRlcHJlY2F0ZWQgKi8NCmV4cG9ydCBmdW5jdGlvbiBvdGhlcihudW06IG51bWJlcik7DQpleHBvcnQgZnVuY3Rpb24gb3RoZXIoX251bT86IG51bWJlcikge30NCg0KLyoqIEBkZXByZWNhdGVkICovDQpleHBvcnQgbGV0IG90aGVyMjogRnVuY3Rpb247DQoNCi8qKiBUaGlzIG9uZSBoYXMgQGRlcHJlY2F0ZWQgc29tZXdoZXJlIGluIGl0J3MganNkb2MgKi8NCmV4cG9ydCBsZXQgbm90RGVwcmVjYXRlZDogYW55Ow0KLyogQGRlcHJlY2F0ZWQgYnV0IGl0J3Mgbm8gSnNEb2MgKi8NCmV4cG9ydCBsZXQgbm90RGVwcmVjYXRlZDI6IGFueTsNCg0KLyoqIEBkZXByZWNhdGVkIGRlcHJlY2F0ZWQgZGVmYXVsdCBleHBvcnQgKi8NCmxldCBkZWYgPSAiIjsNCmV4cG9ydCBkZWZhdWx0IGRlZjsNCg0KLyoqIEBkZXByZWNhdGVkICovDQpleHBvcnQgY2xhc3MgRGVwcmVjYXRlZENsYXNzIHsNCiAgICBjb25zdHJ1Y3RvcigpIHt9DQp9DQoNCmV4cG9ydCBjbGFzcyBEZXByZWNhdGVkQ29uc3RydWN0b3JDbGFzcyB7DQogICAgLyoqIEBkZXByZWNhdGVkICovDQogICAgY29uc3RydWN0b3IoKSB7fQ0KfQ0KDQpleHBvcnQgY2xhc3MgUGFydGlhbGx5RGVwcmVjYXRlZENsYXNzIHsNCiAgICBjb25zdHJ1Y3RvcigpOw0KICAgIC8qKiBAZGVwcmVjYXRlZCAqLw0KICAgIGNvbnN0cnVjdG9yKGZvbzogbnVtYmVyKTsNCiAgICBjb25zdHJ1Y3RvcihfZm9vPzogbnVtYmVyKSB7fQ0KfQ0K"
          },
          "hashes": [
            {
              "value": "772F08A0EC2D7F00012A420522A39DA2",
              "algorithm": "md5"
            },
            {
              "value": "6CDB58CFDF5FE038F84C41E9AD6F484DBE55F934",
              "algorithm": "sha-1"
            },
            {
              "value": "AE2648CF6D362B0DB55414D71C0967FEEACABBEB439B21E7ABB02487089EA87F",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/deprecation/other2.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqIEBkZXByZWNhdGVkICovDQpsZXQgeCA9ICIiOw0KZXhwb3J0ID0geDs="
          },
          "hashes": [
            {
              "value": "24744E8E270643CE8B2B4F08DCB4C394",
              "algorithm": "md5"
            },
            {
              "value": "927002564896E2175746B0C8753ABCCD9EB1D1B9",
              "algorithm": "sha-1"
            },
            {
              "value": "5799FE6B0A9930B9FB7012F81CA9F706F33F69B564E4F68685A6D7AF76AD02F2",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/match-default-export-name/named.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYSgpIHt9DQo="
          },
          "hashes": [
            {
              "value": "166EFA055FC35834001BD5F1CA50E694",
              "algorithm": "md5"
            },
            {
              "value": "62AD152DDDC9F4DEC558328BF1B1FB930E854235",
              "algorithm": "sha-1"
            },
            {
              "value": "3B852CF96B8FC8928959369E233E6308620848AB49E478F40C0DB793F1143100",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/no-irregular-whitespace/test.builder.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "LyoqDQogKiBAbGljZW5zZQ0KICogQ29weXJpZ2h0IDIwMTcgUGFsYW50aXIgVGVjaG5vbG9naWVzLCBJbmMuDQogKg0KICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAqDQogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogKg0KICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogKi8NCg0KLyoqDQogKiBUaGlzIHNjcmlwdCBhdXRvLWdlbmVyYXRlIHRlc3QgZmlsZXMgZm9yIHRoZSBgbm8taXJyZWd1bGFyLXdoaXRlc3BhY2VgIHJ1bGUNCiAqLw0KDQppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7DQppbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnOw0KDQppbXBvcnQgeyBJUlJFR1VMQVJfV0hJVEVTUEFDRV9SRUdFWCB9IGZyb20gJy4uLy4uLy4uL3NyYy9ydWxlcy9ub0lycmVndWxhcldoaXRlc3BhY2VSdWxlJzsNCg0KY29uc3QgbWF0Y2hlcyA9IElSUkVHVUxBUl9XSElURVNQQUNFX1JFR0VYLnNvdXJjZQ0KICAgIC5zdWJzdHJpbmcoMSwgSVJSRUdVTEFSX1dISVRFU1BBQ0VfUkVHRVguc291cmNlLmxlbmd0aCAtIDIpDQogICAgLm1hdGNoKC9cXFx3Ky9nKQ0KICAgIC5maWx0ZXIobWF0Y2ggPT4gWydcXHUyMDI5JywgJ1xcdTIwMjgnXS5pbmRleE9mKG1hdGNoKSA9PT0gLTEpIC8vIHRob3NlIHNlZW1zIHRvIGJyZWFrIHRoZSBwYXJzZXINCiAgICAubWFwKG1hdGNoID0+IEpTT04ucGFyc2UoYCIke21hdGNofSJgKSBhcyBzdHJpbmcpOw0KDQpjb25zdCBsaW50RmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAidGVzdC50cy5saW50Iik7DQpjb25zdCBsaW50RmlsZUNvbnRlbnQgPSBtYXRjaGVzLnJlZHVjZSgoYWNjOiBzdHJpbmcsIG1hdGNoKSA9PiB7DQogICAgcmV0dXJuIGFjYyArPSBgbGV0ICR7bWF0Y2h9IGZvbztcbiAgICB+ICAgIFtJcnJlZ3VsYXIgd2hpdGVzcGFjZSBub3QgYWxsb3dlZF1cbmA7DQp9LCAnJyk7DQpmcy53cml0ZUZpbGVTeW5jKGxpbnRGaWxlUGF0aCwgbGludEZpbGVDb250ZW50KTsNCg0KY29uc3QgZml4RmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAidGVzdC50cy5maXgiKTsNCmNvbnN0IGZpeEZpbGVDb250ZW50ID0gJ2xldCAgIGZvbztcbicucmVwZWF0KG1hdGNoZXMubGVuZ3RoKQ0KZnMud3JpdGVGaWxlU3luYyhmaXhGaWxlUGF0aCwgZml4RmlsZUNvbnRlbnQpOw0K"
          },
          "hashes": [
            {
              "value": "4C4DA208EDD30494A25EC991263DD217",
              "algorithm": "md5"
            },
            {
              "value": "396E6D924D1EBA1699E4B6EE464D785470EDC41B",
              "algorithm": "sha-1"
            },
            {
              "value": "CAB7EBC1CA2286A30F7EA1A507623D319C659A87DD6C5BECC28BEC17EB4586B8",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/no-unnecessary-qualifier/b.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZXhwb3J0IHR5cGUgVCA9IG51bWJlcjs="
          },
          "hashes": [
            {
              "value": "0DA8BB1A52D94F5312D29861B3DE1DB3",
              "algorithm": "md5"
            },
            {
              "value": "3B226765F90EE388E580A229970104368A474C8B",
              "algorithm": "sha-1"
            },
            {
              "value": "C269E6D5DBE225D187258784BC6952715575AECF1AD28401FB80FF642F4294B2",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/no-unsafe-any/default/commonjsModule.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Y29uc3QgeDogYW55ID0gMDsNCm5hbWVzcGFjZSB4IHt9DQpleHBvcnQgPSB4Ow0K"
          },
          "hashes": [
            {
              "value": "B4AFC5BF176C526124A5D6973E5ADE0B",
              "algorithm": "md5"
            },
            {
              "value": "A96592CF861AD0021566AAC8536C3C606231063A",
              "algorithm": "sha-1"
            },
            {
              "value": "AC8A7601C6DDC2786DABBBC823104A7F7AFE39C1021F2D652FBCEBD911A0DDA6",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/no-unsafe-any/default/es6Module.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "Y29uc3QgZGVmYXVsdEV4cG9ydDogYW55ID0gMDsNCmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRFeHBvcnQ7DQpleHBvcnQgY29uc3QgbmFtZWRFeHBvcnQ6IGFueSA9IDA7DQpleHBvcnQgdHlwZSBUID0gbnVtYmVyOw0KDQpleHBvcnQgbmFtZXNwYWNlIE5TIHsNCiAgICBleHBvcnQgaW50ZXJmYWNlIElUZXN0IHt9DQp9DQo="
          },
          "hashes": [
            {
              "value": "83DE5F69DC7A2C56BA39C8E8A952E21D",
              "algorithm": "md5"
            },
            {
              "value": "73596EEA4DCA0BDA2EE53310C8B0C4A6AB76AA06",
              "algorithm": "sha-1"
            },
            {
              "value": "7F1C3EDBA7C595EDB058CED0D926CE8814AF50CAADBA4A611F7FD0F78DF8A217",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/no-unused-variable/default/node_modules/react.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZXhwb3J0IGRlZmF1bHQgeCA9IDA7"
          },
          "hashes": [
            {
              "value": "F96BA046C24B24CCF5FF3A415751A19F",
              "algorithm": "md5"
            },
            {
              "value": "0170A0E1F05A59BE6EFF4101D519D229DD70A5FF",
              "algorithm": "sha-1"
            },
            {
              "value": "2C2841A0EF67615503244FABF39F8CE0AE34371ED45BAB63D1734B0C91E23664",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/no-unused-variable/default/node_modules/react/addons.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZXhwb3J0IGNvbnN0IHggPSAwOw=="
          },
          "hashes": [
            {
              "value": "6204101202C535462490ECC82A015626",
              "algorithm": "md5"
            },
            {
              "value": "8130D5DF75302D37225B5D01299E1301D3C2FD80",
              "algorithm": "sha-1"
            },
            {
              "value": "861E3219E587660D25EFD54BB7980E3F111EC1C6D20743CF18B88DA355F51397",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/no-unused-variable/ignore-pattern/a.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZXhwb3J0IGNsYXNzIF9BIHt9DQo="
          },
          "hashes": [
            {
              "value": "83485420D305CBD24108CEA64F1E7995",
              "algorithm": "md5"
            },
            {
              "value": "2DD46BCE053A45C285EA6FB130301B354FA196F2",
              "algorithm": "sha-1"
            },
            {
              "value": "CB2A7C485AE59122C8DA21890F32445CA48E7B21B59DCB16272CBC7C8D9CDAFF",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/test/rules/no-unused-variable/type-checked/a.test.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": "ZXhwb3J0IGNsYXNzIEEge30NCmV4cG9ydCB2YXIgYTogQTsNCg=="
          },
          "hashes": [
            {
              "value": "1E0572146DA0FC022C357101E0FF2124",
              "algorithm": "md5"
            },
            {
              "value": "80DE3BBD53A241AB2A05E7B0E832D043AD2A1995",
              "algorithm": "sha-1"
            },
            {
              "value": "501CB140AC158DCCCC11E4461A90B2320E24EEFFD2058535508D5C44913614B0",
              "algorithm": "sha-256"
            }
          ]
        },
        "#SRCROOT#src/tslint/scripts/buildDocs.ts": {
          "mimeType": "text/typescript",
          "contents": {
            "binary": ""
          },
          "hashes": [
            {
              "value": "F13E91BA0BB7F8E090DC789F5FE20D28",
              "algorithm": "md5"
            },
            {
              "value": "7FB2048B5896568764DCF981243F4B8B66C2DA76",
              "algorithm": "sha-1"
            },
            {
              "value": "B23BFDE07F630D563A712F7569C7D0AE0E43C20ED36AB419ABEA12A4B2EDB0EF",
              "algorithm": "sha-256"
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/scripts/buildDocs.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 11,
                  "endLine": 46,
                  "endColumn": 21,
                  "charOffset": 1641,
                  "charLength": 10,
                  "snippet": {
                    "text": "Documented"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/scripts/buildDocs.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 1,
                  "endLine": 136,
                  "endColumn": 126,
                  "charOffset": 4291,
                  "charLength": 125,
                  "snippet": {
                    "text": "    const getDirectories = (source: string) => fs.readdirSync(source).filter((name) => isDirectory(path.join(source, name)));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "member-ordering",
          "level": "error",
          "message": {
            "text": "Declaration of public instance field not allowed after declaration of public instance method. Instead, this should come at the beginning of the class/interface."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/scripts/buildDocs.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 5,
                  "endLine": 79,
                  "endColumn": 26,
                  "charOffset": 2297,
                  "charLength": 21,
                  "snippet": {
                    "text": "subDirectory: string;"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/scripts/buildDocs.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1713,
                        "charLength": 607
                      },
                      "insertedContent": {
                        "text": "    /**\r\n     * File name for the json data file listing.\r\n     */\r\n    dataFileName: string;\r\n\r\n    /**\r\n     * Exported item name from each file.\r\n     */\r\n    exportName: string;\r\n\r\n    /**\r\n     * Pattern matching files to be documented.\r\n     */\r\n    globPattern: string;\r\n\r\n    /**\r\n     * Key of the item's name within the metadata object.\r\n     */\r\n    nameMetadataKey: string;\r\n\r\n    /**\r\n     * Documentation subdirectory to output to.\r\n     */\r\n    subDirectory: string;\r\n\r\n    /**\r\n     * Function to generate individual documentation pages.\r\n     */\r\n    pageGenerator(metadata: any): string;\r\n"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/scripts/generate-changelog.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 162,
                  "endColumn": 130,
                  "charOffset": 5443,
                  "charLength": 129,
                  "snippet": {
                    "text": "            result += text.slice(lastIndex, match.index) + `[${match[0]}](https://palantir.github.io/tslint/rules/${match[1]}/)`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ordered-imports",
          "level": "error",
          "message": {
            "text": "Import sources within a group must be alphabetized."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/scripts/generate-changelog.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 26,
                  "charOffset": 977,
                  "charLength": 25,
                  "snippet": {
                    "text": "import * as fs from \"fs\";"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/scripts/generate-changelog.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 938,
                        "charLength": 124
                      },
                      "insertedContent": {
                        "text": "import * as fs from \"fs\";\r\nimport GitHubApi = require(\"github\");\r\nimport * as os from \"os\";\r\nimport * as path from \"path\";\r\n"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configs/all.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 1,
                  "endLine": 277,
                  "endColumn": 127,
                  "charOffset": 8843,
                  "charLength": 126,
                  "snippet": {
                    "text": "    [\"ban\", \"fileHeader\", \"importBlacklist\", \"noInvalidThis\", \"noSwitchCaseFallThrough\", \"typeofCompare\", \"noUnusedVariable\"];"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 18,
                  "endLine": 459,
                  "endColumn": 31,
                  "charOffset": 18102,
                  "charLength": 13,
                  "snippet": {
                    "text": "RawConfigFile"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 18,
                  "endLine": 467,
                  "endColumn": 32,
                  "charOffset": 18363,
                  "charLength": 14,
                  "snippet": {
                    "text": "RawRulesConfig"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 1,
                  "endLine": 129,
                  "endColumn": 123,
                  "charOffset": 4912,
                  "charLength": 122,
                  "snippet": {
                    "text": "export function findConfigurationPath(suppliedConfigFilePath: string | null, inputFilePath?: string): string | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 1,
                  "endLine": 250,
                  "endColumn": 128,
                  "charOffset": 9899,
                  "charLength": 127,
                  "snippet": {
                    "text": "            // include the configuration file being parsed in the error since it may differ from the directly referenced config"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 1,
                  "endLine": 392,
                  "endColumn": 123,
                  "charOffset": 15729,
                  "charLength": 122,
                  "snippet": {
                    "text": "function parseRuleOptions(ruleConfigValue: RawRuleConfig, rawDefaultRuleSeverity: string | undefined): Partial<IOptions> {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 1,
                  "endLine": 477,
                  "endColumn": 138,
                  "charOffset": 18642,
                  "charLength": 137,
                  "snippet": {
                    "text": " * If `configFileDir` and `readConfig` are provided, this function will load all base configs and reduce them to the final configuration."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 1,
                  "endLine": 481,
                  "endColumn": 128,
                  "charOffset": 18916,
                  "charLength": 127,
                  "snippet": {
                    "text": " * @param readConfig Will be used to load all base configurations while parsing. The function is called with the resolved path."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 1,
                  "endLine": 534,
                  "endColumn": 122,
                  "charOffset": 21196,
                  "charLength": 121,
                  "snippet": {
                    "text": "    function parseLinterOptions(raw: RawConfigFile[\"linterOptions\"], dir?: string): IConfigurationFile[\"linterOptions\"] {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.warn' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 21,
                  "endLine": 444,
                  "endColumn": 33,
                  "charOffset": 17721,
                  "charLength": 12,
                  "snippet": {
                    "text": "console.warn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 34,
                  "charOffset": 5067,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "== should be ==="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 24,
                  "endLine": 221,
                  "endColumn": 26,
                  "charOffset": 8527,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 19,
                  "endLine": 346,
                  "endColumn": 21,
                  "charOffset": 13871,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "== should be ==="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 25,
                  "endLine": 413,
                  "endColumn": 27,
                  "charOffset": 16469,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 37,
                  "endLine": 448,
                  "endColumn": 39,
                  "charOffset": 17910,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 42,
                  "endLine": 554,
                  "endColumn": 44,
                  "charOffset": 22101,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 40,
                  "endLine": 556,
                  "endColumn": 42,
                  "charOffset": 22199,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "variable-name",
          "level": "error",
          "message": {
            "text": "variable name must be in lowerCamelCase, PascalCase or UPPER_CASE"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/configuration.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 68,
                  "endLine": 219,
                  "endColumn": 85,
                  "charOffset": 8471,
                  "charLength": 17,
                  "snippet": {
                    "text": "_originalFilePath"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/enableDisableRules.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 133,
                  "charOffset": 2930,
                  "charLength": 132,
                  "snippet": {
                    "text": "                const rulesToSwitch = rulesList === \"all\" ? Array.from(failingRules) : rulesList.filter((r) => failingRules.has(r));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/enableDisableRules.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 1,
                  "endLine": 136,
                  "endColumn": 130,
                  "charOffset": 5820,
                  "charLength": 129,
                  "snippet": {
                    "text": "function parseComment(commentText: string): { rulesList: string[] | \"all\"; isEnabled: boolean; modifier: Modifier } | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/error.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 2,
                  "charOffset": 1193,
                  "charLength": 331,
                  "snippet": {
                    "text": "export class FatalError extends Error {\r\n    public static NAME = \"FatalError\";\r\n    constructor(public message: string, public innerError?: Error) {\r\n        super(message);\r\n        this.name = FatalError.NAME;\r\n\r\n        // Fix prototype chain for target ES5\r\n        Object.setPrototypeOf(this, FatalError.prototype);\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/error.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 136,
                  "charOffset": 803,
                  "charLength": 135,
                  "snippet": {
                    "text": " * Using the `node` version causes a compilation error when this code is used as an npm library if @types/node is not already imported."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.warn' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/error.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 9,
                  "endLine": 52,
                  "endColumn": 21,
                  "charOffset": 1794,
                  "charLength": 12,
                  "snippet": {
                    "text": "console.warn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.warn' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/error.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 58,
                  "endColumn": 17,
                  "charOffset": 1964,
                  "charLength": 12,
                  "snippet": {
                    "text": "console.warn"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/error.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 26,
                  "endLine": 47,
                  "endColumn": 28,
                  "charOffset": 1624,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/formatterLoader.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 133,
                  "charOffset": 901,
                  "charLength": 132,
                  "snippet": {
                    "text": "export function findFormatter(name: string | FormatterConstructor, formattersDirectory?: string): FormatterConstructor | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/formatterLoader.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 140,
                  "charOffset": 2374,
                  "charLength": 139,
                  "snippet": {
                    "text": "        // Resolve using node's path resolution to allow developers to write custom formatters in TypeScript which can be loaded by TS-Node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/formatters/checkstyleFormatter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 128,
                  "charOffset": 1454,
                  "charLength": 127,
                  "snippet": {
                    "text": "                <error line=\"1\" column=\"14\" severity=\"warning\" message=\"Missing semicolon\" source=\"failure.tslint.semicolon\" />"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/formatters/codeFrameFormatter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 126,
                  "charOffset": 2656,
                  "charLength": 125,
                  "snippet": {
                    "text": "            failureString = failure.getRuleSeverity() === \"warning\" ? chalk.yellow(failureString) : chalk.red(failureString);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/formatters/tapFormatter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 122,
                  "charOffset": 1126,
                  "charLength": 121,
                  "snippet": {
                    "text": "        descriptionDetails: \"Provides error messages output in TAP13 format which can be consumed by any TAP formatter.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/formatters/verboseFormatter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 126,
                  "charOffset": 2058,
                  "charLength": 125,
                  "snippet": {
                    "text": "            return `${failure.getRuleSeverity().toUpperCase()}: (${ruleName}) ${fileName}${positionTuple}: ${failureString}`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/formatters/vsoFormatter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 136,
                  "charOffset": 1327,
                  "charLength": 135,
                  "snippet": {
                    "text": "        sample: \"##vso[task.logissue type=warning;sourcepath=myFile.ts;linenumber=1;columnnumber=14;code=semicolon;]Missing semicolon\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/index.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 18,
                  "endLine": 37,
                  "endColumn": 28,
                  "charOffset": 1340,
                  "charLength": 10,
                  "snippet": {
                    "text": "LintResult"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/formatter/formatter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 18,
                  "endLine": 49,
                  "endColumn": 38,
                  "charOffset": 1274,
                  "charLength": 20,
                  "snippet": {
                    "text": "FormatterConstructor"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/rule/abstractRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 138,
                  "charOffset": 1823,
                  "charLength": 137,
                  "snippet": {
                    "text": "    protected applyWithFunction<T>(sourceFile: ts.SourceFile, walkFn: (ctx: WalkContext<T>) => void, options: NoInfer<T>): RuleFailure[];"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "member-ordering",
          "level": "error",
          "message": {
            "text": "Declaration of public instance field not allowed after declaration of protected instance field. Instead, this should come after public static fields."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/rule/abstractRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 29,
                  "endColumn": 29,
                  "charOffset": 1074,
                  "charLength": 24,
                  "snippet": {
                    "text": "public ruleName: string;"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/src/language/rule/abstractRule.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 928,
                        "charLength": 1877
                      },
                      "insertedContent": {
                        "text": "    public static metadata: IRuleMetadata;\r\n    public ruleName: string;\r\n    protected readonly ruleArguments: any[];\r\n    protected readonly ruleSeverity: RuleSeverity;\r\n\r\n    constructor(private readonly options: IOptions) {\r\n        this.ruleName = options.ruleName;\r\n        this.ruleArguments = options.ruleArguments;\r\n        this.ruleSeverity = options.ruleSeverity;\r\n    }\r\n\r\n    public getOptions(): IOptions {\r\n        return this.options;\r\n    }\r\n\r\n    public abstract apply(sourceFile: ts.SourceFile): RuleFailure[];\r\n\r\n    public applyWithWalker(walker: IWalker): RuleFailure[] {\r\n        walker.walk(walker.getSourceFile());\r\n        return walker.getFailures();\r\n    }\r\n\r\n    public isEnabled(): boolean {\r\n        return this.ruleSeverity !== \"off\";\r\n    }\r\n\r\n    protected applyWithFunction(sourceFile: ts.SourceFile, walkFn: (ctx: WalkContext<void>) => void): RuleFailure[];\r\n    protected applyWithFunction<T>(sourceFile: ts.SourceFile, walkFn: (ctx: WalkContext<T>) => void, options: NoInfer<T>): RuleFailure[];\r\n    protected applyWithFunction<T, U>(\r\n        sourceFile: ts.SourceFile,\r\n        walkFn: (ctx: WalkContext<T>, programOrChecker: U) => void,\r\n        options: NoInfer<T>,\r\n        checker: NoInfer<U>,\r\n    ): RuleFailure[];\r\n    protected applyWithFunction<T, U>(\r\n        sourceFile: ts.SourceFile,\r\n        walkFn: (ctx: WalkContext<T | void>, programOrChecker?: U) => void,\r\n        options?: T,\r\n        programOrChecker?: U,\r\n    ): RuleFailure[] {\r\n        const ctx = new WalkContext(sourceFile, this.ruleName, options);\r\n        walkFn(ctx, programOrChecker);\r\n        return ctx.failures;\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * Failures will be filtered based on `tslint:disable` comments by tslint.\r\n     * This method now does nothing.\r\n     */\r\n    protected filterFailures(failures: RuleFailure[]) { return failures; }\r\n"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/rule/rule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 18,
                  "endLine": 23,
                  "endColumn": 33,
                  "charOffset": 786,
                  "charLength": 15,
                  "snippet": {
                    "text": "RuleConstructor"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/rule/rule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 18,
                  "endLine": 162,
                  "endColumn": 33,
                  "charOffset": 4202,
                  "charLength": 15,
                  "snippet": {
                    "text": "ReplacementJson"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/rule/rule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 1,
                  "endLine": 247,
                  "endColumn": 2,
                  "charOffset": 6110,
                  "charLength": 857,
                  "snippet": {
                    "text": "export class RuleFailurePosition {\r\n    constructor(private readonly position: number, private readonly lineAndCharacter: ts.LineAndCharacter) {\r\n    }\r\n\r\n    public getPosition() {\r\n        return this.position;\r\n    }\r\n\r\n    public getLineAndCharacter() {\r\n        return this.lineAndCharacter;\r\n    }\r\n\r\n    public toJson(): IRuleFailurePositionJson {\r\n        return {\r\n            character: this.lineAndCharacter.character,\r\n            line: this.lineAndCharacter.line,\r\n            position: this.position,\r\n        };\r\n    }\r\n\r\n    public equals(ruleFailurePosition: RuleFailurePosition) {\r\n        const ll = this.lineAndCharacter;\r\n        const rr = ruleFailurePosition.lineAndCharacter;\r\n\r\n        return this.position === ruleFailurePosition.position\r\n            && ll.line === rr.line\r\n            && ll.character === rr.character;\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/rule/rule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 1,
                  "endLine": 343,
                  "endColumn": 2,
                  "charOffset": 7081,
                  "charLength": 2866,
                  "snippet": {
                    "text": "export class RuleFailure {\r\n    private readonly fileName: string;\r\n    private readonly startPosition: RuleFailurePosition;\r\n    private readonly endPosition: RuleFailurePosition;\r\n    private readonly rawLines: string;\r\n    private ruleSeverity: RuleSeverity;\r\n\r\n    public static compare(a: RuleFailure, b: RuleFailure): number {\r\n        if (a.fileName !== b.fileName) {\r\n            return a.fileName < b.fileName ? -1 : 1;\r\n        }\r\n        return a.startPosition.getPosition() - b.startPosition.getPosition();\r\n    }\r\n\r\n    constructor(private readonly sourceFile: ts.SourceFile,\r\n                start: number,\r\n                end: number,\r\n                private readonly failure: string,\r\n                private readonly ruleName: string,\r\n                private readonly fix?: Fix) {\r\n\r\n        this.fileName = sourceFile.fileName;\r\n        this.startPosition = this.createFailurePosition(start);\r\n        this.endPosition = this.createFailurePosition(end);\r\n        this.rawLines = sourceFile.text;\r\n        this.ruleSeverity = \"error\";\r\n    }\r\n\r\n    public getFileName() {\r\n        return this.fileName;\r\n    }\r\n\r\n    public getRuleName() {\r\n        return this.ruleName;\r\n    }\r\n\r\n    public getStartPosition(): RuleFailurePosition {\r\n        return this.startPosition;\r\n    }\r\n\r\n    public getEndPosition(): RuleFailurePosition {\r\n        return this.endPosition;\r\n    }\r\n\r\n    public getFailure() {\r\n        return this.failure;\r\n    }\r\n\r\n    public hasFix() {\r\n        return this.fix !== undefined;\r\n    }\r\n\r\n    public getFix() {\r\n        return this.fix;\r\n    }\r\n\r\n    public getRawLines() {\r\n        return this.rawLines;\r\n    }\r\n\r\n    public getRuleSeverity() {\r\n        return this.ruleSeverity;\r\n    }\r\n\r\n    public setRuleSeverity(value: RuleSeverity) {\r\n        this.ruleSeverity = value;\r\n    }\r\n\r\n    public toJson(): IRuleFailureJson {\r\n        return {\r\n            endPosition: this.endPosition.toJson(),\r\n            failure: this.failure,\r\n            fix: this.fix === undefined ? undefined : Array.isArray(this.fix) ? this.fix.map((r) => r.toJson()) : this.fix.toJson(),\r\n            name: this.fileName,\r\n            ruleName: this.ruleName,\r\n            ruleSeverity: this.ruleSeverity.toUpperCase(),\r\n            startPosition: this.startPosition.toJson(),\r\n        };\r\n    }\r\n\r\n    public equals(ruleFailure: RuleFailure) {\r\n        return this.failure  === ruleFailure.getFailure()\r\n            && this.fileName === ruleFailure.getFileName()\r\n            && this.startPosition.equals(ruleFailure.getStartPosition())\r\n            && this.endPosition.equals(ruleFailure.getEndPosition());\r\n    }\r\n\r\n    private createFailurePosition(position: number) {\r\n        const lineAndCharacter = this.sourceFile.getLineAndCharacterOfPosition(position);\r\n        return new RuleFailurePosition(position, lineAndCharacter);\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/rule/rule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 1,
                  "endLine": 324,
                  "endColumn": 133,
                  "charOffset": 9060,
                  "charLength": 132,
                  "snippet": {
                    "text": "            fix: this.fix === undefined ? undefined : Array.isArray(this.fix) ? this.fix.map((r) => r.toJson()) : this.fix.toJson(),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "member-ordering",
          "level": "error",
          "message": {
            "text": "Declaration of public static method not allowed after declaration of private instance field. Instead, this should come at the beginning of the class/interface."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/rule/rule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 5,
                  "endLine": 264,
                  "endColumn": 6,
                  "charOffset": 7350,
                  "charLength": 256,
                  "snippet": {
                    "text": "public static compare(a: RuleFailure, b: RuleFailure): number {\r\n        if (a.fileName !== b.fileName) {\r\n            return a.fileName < b.fileName ? -1 : 1;\r\n        }\r\n        return a.startPosition.getPosition() - b.startPosition.getPosition();\r\n    }"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/src/language/rule/rule.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7109,
                        "charLength": 2837
                      },
                      "insertedContent": {
                        "text": "\r\n    public static compare(a: RuleFailure, b: RuleFailure): number {\r\n        if (a.fileName !== b.fileName) {\r\n            return a.fileName < b.fileName ? -1 : 1;\r\n        }\r\n        return a.startPosition.getPosition() - b.startPosition.getPosition();\r\n    }\r\n    private readonly fileName: string;\r\n    private readonly startPosition: RuleFailurePosition;\r\n    private readonly endPosition: RuleFailurePosition;\r\n    private readonly rawLines: string;\r\n    private ruleSeverity: RuleSeverity;\r\n\r\n    constructor(private readonly sourceFile: ts.SourceFile,\r\n                start: number,\r\n                end: number,\r\n                private readonly failure: string,\r\n                private readonly ruleName: string,\r\n                private readonly fix?: Fix) {\r\n\r\n        this.fileName = sourceFile.fileName;\r\n        this.startPosition = this.createFailurePosition(start);\r\n        this.endPosition = this.createFailurePosition(end);\r\n        this.rawLines = sourceFile.text;\r\n        this.ruleSeverity = \"error\";\r\n    }\r\n\r\n    public getFileName() {\r\n        return this.fileName;\r\n    }\r\n\r\n    public getRuleName() {\r\n        return this.ruleName;\r\n    }\r\n\r\n    public getStartPosition(): RuleFailurePosition {\r\n        return this.startPosition;\r\n    }\r\n\r\n    public getEndPosition(): RuleFailurePosition {\r\n        return this.endPosition;\r\n    }\r\n\r\n    public getFailure() {\r\n        return this.failure;\r\n    }\r\n\r\n    public hasFix() {\r\n        return this.fix !== undefined;\r\n    }\r\n\r\n    public getFix() {\r\n        return this.fix;\r\n    }\r\n\r\n    public getRawLines() {\r\n        return this.rawLines;\r\n    }\r\n\r\n    public getRuleSeverity() {\r\n        return this.ruleSeverity;\r\n    }\r\n\r\n    public setRuleSeverity(value: RuleSeverity) {\r\n        this.ruleSeverity = value;\r\n    }\r\n\r\n    public toJson(): IRuleFailureJson {\r\n        return {\r\n            endPosition: this.endPosition.toJson(),\r\n            failure: this.failure,\r\n            fix: this.fix === undefined ? undefined : Array.isArray(this.fix) ? this.fix.map((r) => r.toJson()) : this.fix.toJson(),\r\n            name: this.fileName,\r\n            ruleName: this.ruleName,\r\n            ruleSeverity: this.ruleSeverity.toUpperCase(),\r\n            startPosition: this.startPosition.toJson(),\r\n        };\r\n    }\r\n\r\n    public equals(ruleFailure: RuleFailure) {\r\n        return this.failure  === ruleFailure.getFailure()\r\n            && this.fileName === ruleFailure.getFileName()\r\n            && this.startPosition.equals(ruleFailure.getStartPosition())\r\n            && this.endPosition.equals(ruleFailure.getEndPosition());\r\n    }\r\n\r\n    private createFailurePosition(position: number) {\r\n        const lineAndCharacter = this.sourceFile.getLineAndCharacterOfPosition(position);\r\n        return new RuleFailurePosition(position, lineAndCharacter);\r\n    }\r\n"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 18,
                  "endLine": 264,
                  "endColumn": 31,
                  "charOffset": 10572,
                  "charLength": 13,
                  "snippet": {
                    "text": "TokenPosition"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 18,
                  "endLine": 458,
                  "endColumn": 28,
                  "charOffset": 19820,
                  "charLength": 10,
                  "snippet": {
                    "text": "EqualsKind"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 138,
                  "charOffset": 1186,
                  "charLength": 137,
                  "snippet": {
                    "text": "export function doesIntersect(failure: RuleFailure, disabledIntervals: IDisabledInterval[]): boolean { // tslint:disable-line deprecation"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 124,
                  "charOffset": 3108,
                  "charLength": 123,
                  "snippet": {
                    "text": "    return (variableDeclaration === null) || isBlockScopedVariable(variableDeclaration); // tslint:disable-line:deprecation"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 134,
                  "charOffset": 4443,
                  "charLength": 133,
                  "snippet": {
                    "text": "    return predicate(node) || (node.parent !== undefined && someAncestor(node.parent, predicate)); // tslint:disable-line:deprecation"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 1,
                  "endLine": 120,
                  "endColumn": 125,
                  "charOffset": 4962,
                  "charLength": 124,
                  "snippet": {
                    "text": "/** @deprecated use `isBinaryExpression(node) && isAssignmentKind(node.operatorToken.kind)` with functions from `tsutils` */"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 1,
                  "endLine": 283,
                  "endColumn": 138,
                  "charOffset": 11401,
                  "charLength": 137,
                  "snippet": {
                    "text": " * @param cb Is called for every token of `node`. It gets the full text of the SourceFile and the position of the token within that text."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 1,
                  "endLine": 284,
                  "endColumn": 139,
                  "charOffset": 11540,
                  "charLength": 138,
                  "snippet": {
                    "text": " * @param filter If provided, will be called for every Node and Token found. If it returns false `cb` will not be called for this subtree."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 1,
                  "endLine": 371,
                  "endColumn": 139,
                  "charOffset": 15887,
                  "charLength": 138,
                  "snippet": {
                    "text": "            // Comments before the first token (pos.fullStart === 0) are all considered leading comments, so no need for special treatment"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 1,
                  "endLine": 483,
                  "endColumn": 124,
                  "charOffset": 20775,
                  "charLength": 123,
                  "snippet": {
                    "text": "export function isNegativeNumberLiteral(node: ts.Node): node is ts.PrefixUnaryExpression & { operand: ts.NumericLiteral } {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/walker/blockScopeAwareRuleWalker.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 129,
                  "charOffset": 837,
                  "charLength": 128,
                  "snippet": {
                    "text": "// tslint:disable:deprecation (extends deprecated class and uses deprecated utils - doesn't matter because it's deprecated, too)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/walker/walkContext.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 124,
                  "charOffset": 815,
                  "charLength": 123,
                  "snippet": {
                    "text": "    constructor(public readonly sourceFile: ts.SourceFile, public readonly ruleName: string, public readonly options: T) {}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/language/walker/walkContext.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 131,
                  "charOffset": 1347,
                  "charLength": 130,
                  "snippet": {
                    "text": "            new RuleFailure(this.sourceFile, Math.min(start, fileLength), Math.min(end, fileLength), failure, this.ruleName, fix),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/linter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 134,
                  "charOffset": 2803,
                  "charLength": 133,
                  "snippet": {
                    "text": "        const parsed = ts.parseJsonConfigFileContent(config.config, parseConfigHost, path.resolve(projectDirectory), {noEmit: true});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/linter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 1,
                  "endLine": 174,
                  "endColumn": 132,
                  "charOffset": 7203,
                  "charLength": 131,
                  "snippet": {
                    "text": "            enabledRules: IRule[], fileFailures: RuleFailure[], sourceFile: ts.SourceFile, sourceFileName: string): RuleFailure[] {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/linter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 1,
                  "endLine": 218,
                  "endColumn": 139,
                  "charOffset": 9512,
                  "charLength": 138,
                  "snippet": {
                    "text": "            this.program = ts.createProgram(this.program.getRootFileNames(), options, ts.createCompilerHost(options, true), this.program);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/linter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 1,
                  "endLine": 251,
                  "endColumn": 141,
                  "charOffset": 11067,
                  "charLength": 140,
                  "snippet": {
                    "text": "                    Invalid source file: ${fileName}. Ensure that the files supplied to lint have a .ts, .tsx, .d.ts, .js or .jsx extension."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "member-ordering",
          "level": "error",
          "message": {
            "text": "Declaration of public static method not allowed after declaration of private instance field. Instead, this should come after public static fields."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/linter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "endLine": 88,
                  "endColumn": 6,
                  "charOffset": 2062,
                  "charLength": 1620,
                  "snippet": {
                    "text": "public static createProgram(configFile: string, projectDirectory: string = path.dirname(configFile)): ts.Program {\r\n        const config = ts.readConfigFile(configFile, ts.sys.readFile);\r\n        if (config.error !== undefined) {\r\n            throw new FatalError(ts.formatDiagnostics([config.error], {\r\n                getCanonicalFileName: (f) => f,\r\n                getCurrentDirectory: process.cwd,\r\n                getNewLine: () => \"\\n\",\r\n            }));\r\n        }\r\n        const parseConfigHost: ts.ParseConfigHost = {\r\n            fileExists: fs.existsSync,\r\n            readDirectory: ts.sys.readDirectory,\r\n            readFile: (file) => fs.readFileSync(file, \"utf8\"),\r\n            useCaseSensitiveFileNames: true,\r\n        };\r\n        const parsed = ts.parseJsonConfigFileContent(config.config, parseConfigHost, path.resolve(projectDirectory), {noEmit: true});\r\n        if (parsed.errors !== undefined) {\r\n            // ignore warnings and 'TS18003: No inputs were found in config file ...'\r\n            const errors = parsed.errors.filter((d) => d.category === ts.DiagnosticCategory.Error && d.code !== 18003);\r\n            if (errors.length !== 0) {\r\n                throw new FatalError(ts.formatDiagnostics(errors, {\r\n                    getCanonicalFileName: (f) => f,\r\n                    getCurrentDirectory: process.cwd,\r\n                    getNewLine: () => \"\\n\",\r\n                }));\r\n            }\r\n        }\r\n        const host = ts.createCompilerHost(parsed.options, true);\r\n        const program = ts.createProgram(parsed.fileNames, parsed.options, host);\r\n\r\n        return program;\r\n    }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "member-ordering",
          "level": "error",
          "message": {
            "text": "Declaration of public static method not allowed after declaration of private instance field. Instead, this should come after public static fields."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/linter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 5,
                  "endLine": 102,
                  "endColumn": 6,
                  "charOffset": 3864,
                  "charLength": 337,
                  "snippet": {
                    "text": "public static getFileNames(program: ts.Program): string[] {\r\n        return mapDefined(\r\n            program.getSourceFiles(),\r\n            (file) =>\r\n                file.fileName.endsWith(\".d.ts\") || program.isSourceFileFromExternalLibrary(file)\r\n                    ? undefined\r\n                    : file.fileName,\r\n        );\r\n    }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/linter.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 44,
                  "endLine": 108,
                  "endColumn": 46,
                  "charOffset": 4474,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/ruleLoader.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 135,
                  "charOffset": 4630,
                  "charLength": 134,
                  "snippet": {
                    "text": "        // Resolve using node's path resolution to allow developers to write custom rules in TypeScript which can be loaded by TS-Node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/adjacentOverloadSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 139,
                  "endColumn": 133,
                  "charOffset": 5351,
                  "charLength": 132,
                  "snippet": {
                    "text": "                    return utils.isLiteralExpression(expression) ? expression.text : { name: expression.getText(), computed: true };"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/alignRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 11,
                  "endLine": 29,
                  "endColumn": 18,
                  "charOffset": 975,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/alignRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 194,
                  "endColumn": 2,
                  "charOffset": 3411,
                  "charLength": 5562,
                  "snippet": {
                    "text": "class AlignWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (this.options.statements && isBlockLike(node)) {\r\n                this.checkAlignment(node.statements.filter((s) => s.kind !== ts.SyntaxKind.EmptyStatement), OPTION_STATEMENTS);\r\n            } else {\r\n                switch (node.kind) {\r\n                    case ts.SyntaxKind.NewExpression:\r\n                        if ((node as ts.NewExpression).arguments === undefined) {\r\n                            break;\r\n                        }\r\n                        // falls through\r\n                    case ts.SyntaxKind.CallExpression:\r\n                        if (this.options.arguments) {\r\n                            this.checkAlignment((node as ts.CallExpression | ts.NewExpression).arguments!, OPTION_ARGUMENTS);\r\n                        }\r\n                        break;\r\n                    case ts.SyntaxKind.FunctionDeclaration:\r\n                    case ts.SyntaxKind.FunctionExpression:\r\n                    case ts.SyntaxKind.Constructor:\r\n                    case ts.SyntaxKind.MethodDeclaration:\r\n                    case ts.SyntaxKind.ArrowFunction:\r\n                    case ts.SyntaxKind.CallSignature:\r\n                    case ts.SyntaxKind.ConstructSignature:\r\n                    case ts.SyntaxKind.MethodSignature:\r\n                    case ts.SyntaxKind.FunctionType:\r\n                    case ts.SyntaxKind.ConstructorType:\r\n                        if (this.options.parameters) {\r\n                            this.checkAlignment((node as ts.SignatureDeclaration).parameters, OPTION_PARAMETERS);\r\n                        }\r\n                        break;\r\n                    case ts.SyntaxKind.ArrayLiteralExpression:\r\n                    case ts.SyntaxKind.ArrayBindingPattern:\r\n                        if (this.options.elements) {\r\n                            this.checkAlignment((node as ts.ArrayBindingOrAssignmentPattern).elements, OPTION_ELEMENTS);\r\n                        }\r\n                        break;\r\n                    case ts.SyntaxKind.TupleType:\r\n                        if (this.options.elements) {\r\n                            this.checkAlignment((node as ts.TupleTypeNode).elementTypes, OPTION_ELEMENTS);\r\n                        }\r\n                        break;\r\n                    case ts.SyntaxKind.ObjectLiteralExpression:\r\n                        if (this.options.members) {\r\n                            this.checkAlignment((node as ts.ObjectLiteralExpression).properties, OPTION_MEMBERS);\r\n                        }\r\n                        break;\r\n                    case ts.SyntaxKind.ObjectBindingPattern:\r\n                        if (this.options.members) {\r\n                            this.checkAlignment((node as ts.ObjectBindingPattern).elements, OPTION_MEMBERS);\r\n                        }\r\n                        break;\r\n                    case ts.SyntaxKind.ClassDeclaration:\r\n                    case ts.SyntaxKind.ClassExpression:\r\n                        if (this.options.members) {\r\n                            this.checkAlignment(\r\n                                (node as ts.ClassLikeDeclaration).members.filter((m) => m.kind !== ts.SyntaxKind.SemicolonClassElement),\r\n                                OPTION_MEMBERS,\r\n                            );\r\n                        }\r\n                        break;\r\n                    case ts.SyntaxKind.InterfaceDeclaration:\r\n                    case ts.SyntaxKind.TypeLiteral:\r\n                        if (this.options.members) {\r\n                            this.checkAlignment((node as ts.InterfaceDeclaration | ts.TypeLiteralNode).members, OPTION_MEMBERS);\r\n                        }\r\n                }\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return cb(sourceFile);\r\n    }\r\n\r\n    private checkAlignment(nodes: ReadonlyArray<ts.Node>, kind: string) {\r\n        if (nodes.length <= 1) {\r\n            return;\r\n        }\r\n        const sourceFile = this.sourceFile;\r\n\r\n        let pos = getLineAndCharacterWithoutBom(sourceFile, this.getStart(nodes[0]));\r\n        const alignToColumn = pos.character;\r\n        let line = pos.line;\r\n\r\n        // skip first node in list\r\n        for (let i = 1; i < nodes.length; ++i) {\r\n            const node = nodes[i];\r\n            const start = this.getStart(node);\r\n            pos = ts.getLineAndCharacterOfPosition(sourceFile, start);\r\n            if (line !== pos.line && pos.character !== alignToColumn) {\r\n                const diff = alignToColumn - pos.character;\r\n                let fix: Lint.Fix | undefined;\r\n                if (diff >= 0) {\r\n                    fix = Lint.Replacement.appendText(start, \" \".repeat(diff));\r\n                } else if (node.pos <= start + diff && /^\\s+$/.test(sourceFile.text.substring(start + diff, start))) {\r\n                    // only delete text if there is only whitespace\r\n                    fix = Lint.Replacement.deleteText(start + diff, -diff);\r\n                }\r\n                this.addFailure(start, Math.max(node.end, start), kind + Rule.FAILURE_STRING_SUFFIX, fix);\r\n            }\r\n            line = pos.line;\r\n        }\r\n    }\r\n\r\n    private getStart(node: ts.Node) {\r\n        return node.kind !== ts.SyntaxKind.OmittedExpression\r\n            ? node.getStart(this.sourceFile)\r\n            // find the comma token following the OmmitedExpression\r\n            : getNextToken(node, this.sourceFile)!.getStart(this.sourceFile);\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/alignRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 124,
                  "charOffset": 2024,
                  "charLength": 123,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_MEMBERS}\"\\` checks alignment of members of classes, interfaces, type literal, object literals and"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/alignRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 125,
                  "charOffset": 2184,
                  "charLength": 124,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_ELEMENTS}\"\\` checks alignment of elements of array iterals, array destructuring and tuple types.`,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/alignRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 128,
                  "charOffset": 3627,
                  "charLength": 127,
                  "snippet": {
                    "text": "                this.checkAlignment(node.statements.filter((s) => s.kind !== ts.SyntaxKind.EmptyStatement), OPTION_STATEMENTS);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/alignRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 1,
                  "endLine": 99,
                  "endColumn": 126,
                  "charOffset": 4170,
                  "charLength": 125,
                  "snippet": {
                    "text": "                            this.checkAlignment((node as ts.CallExpression | ts.NewExpression).arguments!, OPTION_ARGUMENTS);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/alignRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 137,
                  "charOffset": 6583,
                  "charLength": 136,
                  "snippet": {
                    "text": "                                (node as ts.ClassLikeDeclaration).members.filter((m) => m.kind !== ts.SyntaxKind.SemicolonClassElement),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/alignRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 1,
                  "endLine": 149,
                  "endColumn": 129,
                  "charOffset": 7029,
                  "charLength": 128,
                  "snippet": {
                    "text": "                            this.checkAlignment((node as ts.InterfaceDeclaration | ts.TypeLiteralNode).members, OPTION_MEMBERS);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrayTypeRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 126,
                  "charOffset": 1448,
                  "charLength": 125,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_ARRAY_SIMPLE}\"\\` enforces use of \\`T[]\\` if \\`T\\` is a simple type (primitive or type reference).`,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrayTypeRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 129,
                  "charOffset": 2139,
                  "charLength": 128,
                  "snippet": {
                    "text": "    public static FAILURE_STRING_ARRAY_SIMPLE = \"Array type using 'Array<T>' is forbidden for simple types. Use 'T[]' instead.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrayTypeRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 52,
                  "endColumn": 135,
                  "charOffset": 2269,
                  "charLength": 134,
                  "snippet": {
                    "text": "    public static FAILURE_STRING_GENERIC_SIMPLE = \"Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrayTypeRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 126,
                  "charOffset": 3618,
                  "charLength": 125,
                  "snippet": {
                    "text": "        const space = parens === 0 && parent!.kind === ts.SyntaxKind.AsExpression && node.getStart() === node.getFullStart();"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrayTypeRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 128,
                  "charOffset": 4566,
                  "charLength": 127,
                  "snippet": {
                    "text": "            ctx.addFailureAtNode(node, failureString, Lint.Replacement.replaceFromTo(node.getStart(), node.getEnd(), \"any[]\"));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrayTypeRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 1,
                  "endLine": 160,
                  "endColumn": 134,
                  "charOffset": 6844,
                  "charLength": 133,
                  "snippet": {
                    "text": "                    return typeName.kind === ts.SyntaxKind.Identifier && typeName.text === \"Array\" && isSimpleType(typeArguments[0]);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowParensRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 11,
                  "endLine": 25,
                  "endColumn": 18,
                  "charOffset": 844,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowParensRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 125,
                  "charOffset": 1817,
                  "charLength": 124,
                  "snippet": {
                    "text": "    public static FAILURE_STRING_MISSING = \"Parentheses are required around the parameters of an arrow function definition\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowParensRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 133,
                  "charOffset": 1943,
                  "charLength": 132,
                  "snippet": {
                    "text": "    public static FAILURE_STRING_EXISTS = \"Parentheses are prohibited around the parameter in this single parameter arrow function\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowParensRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 126,
                  "charOffset": 3530,
                  "charLength": 125,
                  "snippet": {
                    "text": "                    Lint.Replacement.replaceFromTo(openParen.pos, node.parameters[0].getStart(ctx.sourceFile), replaceValue),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowReturnShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 11,
                  "endLine": 63,
                  "endColumn": 18,
                  "charOffset": 2476,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowReturnShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 122,
                  "charOffset": 2026,
                  "charLength": 121,
                  "snippet": {
                    "text": "        const start = \"This arrow function body can be simplified by omitting the curly braces and the keyword 'return'\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowReturnShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 125,
                  "charOffset": 2328,
                  "charLength": 124,
                  "snippet": {
                    "text": "        return this.applyWithFunction(sourceFile, walk, { multiline: this.ruleArguments.indexOf(OPTION_MULTILINE) !== -1 });"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowReturnShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 132,
                  "charOffset": 2840,
                  "charLength": 131,
                  "snippet": {
                    "text": "            if (expr !== undefined && (multiline || utils.isSameLine(sourceFile, node.body.getStart(sourceFile), node.body.end))) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowReturnShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 138,
                  "charOffset": 3067,
                  "charLength": 137,
                  "snippet": {
                    "text": "                ctx.addFailureAtNode(node.body, Rule.FAILURE_STRING(isObjectLiteral), createFix(node, node.body, expr, sourceFile.text));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowReturnShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 137,
                  "charOffset": 3289,
                  "charLength": 136,
                  "snippet": {
                    "text": "function createFix(arrowFunction: ts.FunctionLikeDeclaration, body: ts.Block, expr: ts.Expression, text: string): Lint.Fix | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/arrowReturnShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 128,
                  "charOffset": 3903,
                  "charLength": 127,
                  "snippet": {
                    "text": "    const anyComments = hasComments(arrow) || hasComments(openBrace) || hasComments(statement) || hasComments(returnKeyword) ||"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/awaitPromiseRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 122,
                  "charOffset": 642,
                  "charLength": 121,
                  "snippet": {
                    "text": "import { isAwaitExpression, isForOfStatement, isTypeFlagSet, isTypeReference, isUnionOrIntersectionType } from \"tsutils\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banCommaOperatorRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 136,
                  "charOffset": 2195,
                  "charLength": 135,
                  "snippet": {
                    "text": "    public static FAILURE_STRING = \"Do not use comma operator here because it can be easily misunderstood or lead to unintended bugs.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banCommaOperatorRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 127,
                  "charOffset": 2596,
                  "charLength": 126,
                  "snippet": {
                    "text": "        if (isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.CommaToken && !isForLoopIncrementor(node)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 11,
                  "endLine": 22,
                  "endColumn": 22,
                  "charOffset": 811,
                  "charLength": 11,
                  "snippet": {
                    "text": "FunctionBan"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 20,
                  "charOffset": 881,
                  "charLength": 9,
                  "snippet": {
                    "text": "MethodBan"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 11,
                  "endLine": 30,
                  "endColumn": 18,
                  "charOffset": 952,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 23,
                  "charOffset": 1036,
                  "charLength": 12,
                  "snippet": {
                    "text": "OptionsInput"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 1,
                  "endLine": 186,
                  "endColumn": 2,
                  "charOffset": 5680,
                  "charLength": 1729,
                  "snippet": {
                    "text": "class BanFunctionWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (isCallExpression(node)) {\r\n                if (isIdentifier(node.expression)) {\r\n                    this.checkFunctionBan(node.expression);\r\n                } else if (isPropertyAccessExpression(node.expression)) {\r\n                    this.checkForObjectMethodBan(node.expression);\r\n                }\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private checkForObjectMethodBan(expression: ts.PropertyAccessExpression) {\r\n        for (const ban of this.options.methods) {\r\n            if (expression.name.text !== ban.name) { continue; }\r\n            let current = expression.expression;\r\n            for (let i = ban.object.length - 1; i > 0; --i) {\r\n                if (!isPropertyAccessExpression(current) || current.name.text !== ban.object[i]) { continue; }\r\n                current = current.expression;\r\n            }\r\n            if (ban.object[0] === \"*\" ||\r\n                isIdentifier(current) && current.text === ban.object[0]) {\r\n                this.addFailureAtNode(expression, Rule.FAILURE_STRING_FACTORY(`${ban.object.join(\".\")}.${ban.name}`, ban.message));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkFunctionBan(name: ts.Identifier) {\r\n        const {text} = name;\r\n        for (const ban of this.options.functions) {\r\n            if (ban.name === text) {\r\n                this.addFailureAtNode(name, Rule.FAILURE_STRING_FACTORY(text, ban.message));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 123,
                  "charOffset": 1691,
                  "charLength": 122,
                  "snippet": {
                    "text": "              * an object in the following format: \\`{\"name\": \"functionName\", \"message\": \"optional explanation message\"}\\`"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 136,
                  "charOffset": 1847,
                  "charLength": 135,
                  "snippet": {
                    "text": "              * an array with the object name, method name and optional message: \\`[\"functionName\", \"methodName\", \"optional message\"]\\`"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 125,
                  "charOffset": 1984,
                  "charLength": 124,
                  "snippet": {
                    "text": "              * an object in the following format: \\`{\"name\": [\"objectName\", \"methodName\"], \"message\": \"optional message\"}\\`"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 129,
                  "charOffset": 2228,
                  "charLength": 128,
                  "snippet": {
                    "text": "                * the first element can contain a wildcard (\\`*\\`) that matches everything. \\`{\"name\": [\"*\", \"forEach\"]}\\` bans\\"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 139,
                  "endColumn": 126,
                  "charOffset": 5479,
                  "charLength": 125,
                  "snippet": {
                    "text": "                    methods.push({name: arg.name[arg.name.length - 1], object: arg.name.slice(0, -1), message: arg.message});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 1,
                  "endLine": 171,
                  "endColumn": 132,
                  "charOffset": 6891,
                  "charLength": 131,
                  "snippet": {
                    "text": "                this.addFailureAtNode(expression, Rule.FAILURE_STRING_FACTORY(`${ban.object.join(\".\")}.${ban.name}`, ban.message));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/banTypesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 11,
                  "endLine": 23,
                  "endColumn": 17,
                  "charOffset": 774,
                  "charLength": 6,
                  "snippet": {
                    "text": "Option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/binaryExpressionOperandOrderRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 125,
                  "charOffset": 2153,
                  "charLength": 124,
                  "snippet": {
                    "text": "        if (isBinaryExpression(node) && isLiteral(node.left) && !isLiteral(node.right) && !isAllowedOrderedOperator(node)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/callableTypesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 127,
                  "charOffset": 642,
                  "charLength": 126,
                  "snippet": {
                    "text": "import { getChildOfKind, isCallSignatureDeclaration, isIdentifier, isInterfaceDeclaration, isTypeLiteralNode } from \"tsutils\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/callableTypesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 133,
                  "charOffset": 2536,
                  "charLength": 132,
                  "snippet": {
                    "text": "                    Rule.FAILURE_STRING_FACTORY(node.kind === ts.SyntaxKind.TypeLiteral ? \"Type literal\" : \"Interface\", suggestion),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/code-examples/arrowReturnShorthand.examples.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 130,
                  "charOffset": 765,
                  "charLength": 129,
                  "snippet": {
                    "text": "        description: \"Enforces usage of the shorthand return syntax when an arrow function's body does not span multiple lines.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/code-examples/arrowReturnShorthand.examples.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 127,
                  "charOffset": 1572,
                  "charLength": 126,
                  "snippet": {
                    "text": "        description: \"Enforces usage of the shorthand return syntax even when an arrow function's body spans multiple lines.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/code-examples/oneVariablePerDeclaration.examples.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 128,
                  "charOffset": 1179,
                  "charLength": 127,
                  "snippet": {
                    "text": "        description: \"Disallows multiple variable definitions in the same declaration statement but allows them in for-loops.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/commentFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 11,
                  "endLine": 30,
                  "endColumn": 18,
                  "charOffset": 992,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/commentFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 132,
                  "charOffset": 2056,
                  "charLength": 131,
                  "snippet": {
                    "text": "            * \\`\"check-lowercase\"\\` requires that the first non-whitespace character of a comment must be lowercase, if applicable."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/commentFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 132,
                  "charOffset": 2189,
                  "charLength": 131,
                  "snippet": {
                    "text": "            * \\`\"check-uppercase\"\\` requires that the first non-whitespace character of a comment must be uppercase, if applicable."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/commentFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 137,
                  "charOffset": 2324,
                  "charLength": 136,
                  "snippet": {
                    "text": "            Exceptions to \\`\"check-lowercase\"\\` or \\`\"check-uppercase\"\\` can be managed with object that may be passed as last argument."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/commentFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 1,
                  "endLine": 117,
                  "endColumn": 139,
                  "charOffset": 4652,
                  "charLength": 138,
                  "snippet": {
                    "text": "    public static IGNORE_PATTERN_FAILURE_FACTORY = (pattern: string): string => ` or its start must match the regex pattern \"${pattern}\"`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/commentFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 123,
                  "charOffset": 5426,
                  "charLength": 122,
                  "snippet": {
                    "text": "function composeExceptions(option?: string | IExceptionsObject): undefined | {exceptions: RegExp; failureSuffix: string} {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/completed-docs/exclusionFactory.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 132,
                  "charOffset": 1920,
                  "charLength": 131,
                  "snippet": {
                    "text": "                exclusionsMap.set(docType as DocType, this.createRequirementsForDocType(docType as DocType, descriptors[docType]));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/completedDocsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 1,
                  "endLine": 207,
                  "endColumn": 133,
                  "charOffset": 7147,
                  "charLength": 132,
                  "snippet": {
                    "text": "                    * \\`\"${TAGS_FOR_CONTENT}\"\\`: Object mapping tags to \\`RegExp\\` bodies content allowed to count as complete docs."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/completedDocsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 1,
                  "endLine": 286,
                  "endColumn": 139,
                  "charOffset": 10657,
                  "charLength": 138,
                  "snippet": {
                    "text": "            Note: use this rule sparingly. It's better to have self-documenting names on components with single, consice responsibilities."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/completedDocsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 1,
                  "endLine": 409,
                  "endColumn": 128,
                  "charOffset": 15515,
                  "charLength": 127,
                  "snippet": {
                    "text": "    function checkComments(node: ts.Node, nodeDescriptor: string, comments: ts.SymbolDisplayPart[], requirementNode: ts.Node) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/curlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 18,
                  "charOffset": 989,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/curlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 173,
                  "endColumn": 2,
                  "charOffset": 4260,
                  "charLength": 2609,
                  "snippet": {
                    "text": "class CurlyWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (isIterationStatement(node)) {\r\n                this.checkStatement(node.statement, node, 0, node.end);\r\n            } else if (isIfStatement(node)) {\r\n                this.checkStatement(node.thenStatement, node, 0);\r\n                if (node.elseStatement !== undefined && node.elseStatement.kind !== ts.SyntaxKind.IfStatement) {\r\n                    this.checkStatement(node.elseStatement, node, 5);\r\n                }\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private checkStatement(statement: ts.Statement, node: ts.IterationStatement | ts.IfStatement, childIndex: number, end = statement.end) {\r\n        const sameLine = isSameLine(this.sourceFile, statement.pos, statement.end);\r\n        if (statement.kind !== ts.SyntaxKind.Block &&\r\n            !(this.options.ignoreSameLine && sameLine)) {\r\n            const token = node.getChildAt(childIndex, this.sourceFile);\r\n            const tokenText = ts.tokenToString(token.kind)!;\r\n            this.addFailure(\r\n                token.end - tokenText.length, end, Rule.FAILURE_STRING_FACTORY(tokenText),\r\n                this.createMissingBraceFix(statement, node, sameLine));\r\n        }\r\n    }\r\n\r\n    /** Generate the necessary replacement to add braces to a statement that needs them. */\r\n    private createMissingBraceFix(statement: ts.Statement, node: ts.IterationStatement | ts.IfStatement, sameLine: boolean) {\r\n        if (sameLine) {\r\n            return [\r\n                Lint.Replacement.appendText(statement.pos, \" {\"),\r\n                Lint.Replacement.appendText(statement.end, \" }\"),\r\n            ];\r\n        } else {\r\n            const match = /\\n([\\t ])/.exec(node.getFullText(this.sourceFile)); // determine which character to use (tab or space)\r\n            const indentation = match === null ?\r\n                \"\" :\r\n                // indentation should match start of statement\r\n                match[1].repeat(ts.getLineAndCharacterOfPosition(this.sourceFile, node.getStart(this.sourceFile)).character);\r\n\r\n            const maybeCarriageReturn = this.sourceFile.text[this.sourceFile.getLineEndOfPosition(node.pos) - 1] === \"\\r\" ? \"\\r\" : \"\";\r\n\r\n            return [\r\n                Lint.Replacement.appendText(statement.pos, \" {\"),\r\n                Lint.Replacement.appendText(statement.end, `${maybeCarriageReturn}\\n${indentation}}`),\r\n            ];\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/curlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 139,
                  "endColumn": 141,
                  "charOffset": 4981,
                  "charLength": 140,
                  "snippet": {
                    "text": "    private checkStatement(statement: ts.Statement, node: ts.IterationStatement | ts.IfStatement, childIndex: number, end = statement.end) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/curlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 126,
                  "charOffset": 5765,
                  "charLength": 125,
                  "snippet": {
                    "text": "    private createMissingBraceFix(statement: ts.Statement, node: ts.IterationStatement | ts.IfStatement, sameLine: boolean) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/curlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 1,
                  "endLine": 159,
                  "endColumn": 130,
                  "charOffset": 6107,
                  "charLength": 129,
                  "snippet": {
                    "text": "            const match = /\\n([\\t ])/.exec(node.getFullText(this.sourceFile)); // determine which character to use (tab or space)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/curlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 1,
                  "endLine": 163,
                  "endColumn": 126,
                  "charOffset": 6374,
                  "charLength": 125,
                  "snippet": {
                    "text": "                match[1].repeat(ts.getLineAndCharacterOfPosition(this.sourceFile, node.getStart(this.sourceFile)).character);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/curlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 1,
                  "endLine": 165,
                  "endColumn": 135,
                  "charOffset": 6503,
                  "charLength": 134,
                  "snippet": {
                    "text": "            const maybeCarriageReturn = this.sourceFile.text[this.sourceFile.getLineEndOfPosition(node.pos) - 1] === \"\\r\" ? \"\\r\" : \"\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/deprecationRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 1,
                  "endLine": 130,
                  "endColumn": 133,
                  "charOffset": 5094,
                  "charLength": 132,
                  "snippet": {
                    "text": "    return isTaggedTemplateExpression(parent) || (isCallExpression(parent) || isNewExpression(parent)) && parent.expression === node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/eoflineRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 125,
                  "charOffset": 1041,
                  "charLength": 124,
                  "snippet": {
                    "text": "        rationale: \"It is a [standard convention](https://stackoverflow.com/q/729692/3124288) to end files with a newline.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/fileHeaderRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 122,
                  "charOffset": 2510,
                  "charLength": 121,
                  "snippet": {
                    "text": "            (pos, end, kind) => text.substring(pos + 2, kind === ts.SyntaxKind.SingleLineCommentTrivia ? end : end - 2));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/fileHeaderRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 75,
                  "endColumn": 135,
                  "charOffset": 3060,
                  "charLength": 134,
                  "snippet": {
                    "text": "                ? Lint.Replacement.appendText(offset, this.createComment(sourceFile, textToInsert, leadingNewlines, trailingNewlines))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/forinRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 124,
                  "charOffset": 1396,
                  "charLength": 123,
                  "snippet": {
                    "text": "            See [MDN's \\`for...in\\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/forinRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 130,
                  "charOffset": 1597,
                  "charLength": 129,
                  "snippet": {
                    "text": "            Also consider using a [\\`Map\\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/forinRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 136,
                  "charOffset": 3049,
                  "charLength": 135,
                  "snippet": {
                    "text": "            return statements[0].kind === ts.SyntaxKind.IfStatement && nodeIsContinue((statements[0] as ts.IfStatement).thenStatement);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/importSpacingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 135,
                  "endColumn": 2,
                  "charOffset": 2140,
                  "charLength": 4015,
                  "snippet": {
                    "text": "class Walker extends Lint.AbstractWalker<void> {\r\n    public walk({ statements }: ts.SourceFile): void {\r\n        for (const statement of statements) {\r\n            if (!isImportDeclaration(statement)) {\r\n                continue;\r\n            }\r\n\r\n            const { importClause } = statement;\r\n            if (importClause === undefined) {\r\n                this.checkModuleWithSideEffect(statement);\r\n            } else {\r\n                this.checkImportClause(statement, importClause);\r\n                const { namedBindings } = importClause;\r\n                if (namedBindings !== undefined && isNamespaceImport(namedBindings)) {\r\n                    this.checkNamespaceImport(namedBindings);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkImportClause(node: ts.ImportDeclaration, importClause: ts.ImportClause): void {\r\n        const text = node.getText(this.sourceFile);\r\n        const nodeStart = node.getStart(this.sourceFile);\r\n        const importKeywordEnd = nodeStart + \"import\".length;\r\n        const moduleSpecifierStart = node.moduleSpecifier.getStart(this.sourceFile);\r\n        const importClauseEnd = importClause.getEnd();\r\n        const importClauseStart = importClause.getStart(this.sourceFile);\r\n\r\n        if (importKeywordEnd === importClauseStart) {\r\n            this.addFailureAt(nodeStart, \"import\".length, Rule.ADD_SPACE_AFTER_IMPORT);\r\n        } else if (importClauseStart > importKeywordEnd + 1) {\r\n            this.addFailure(nodeStart, importClauseStart, Rule.TOO_MANY_SPACES_AFTER_IMPORT);\r\n        }\r\n\r\n        const fromString = text.substring(importClauseEnd - nodeStart, moduleSpecifierStart - nodeStart);\r\n\r\n        if (/from$/.test(fromString)) {\r\n            this.addFailureAt(importClauseEnd, fromString.length, Rule.ADD_SPACE_AFTER_FROM);\r\n        } else if (/from\\s{2,}$/.test(fromString)) {\r\n            this.addFailureAt(importClauseEnd, fromString.length, Rule.TOO_MANY_SPACES_AFTER_FROM);\r\n        }\r\n\r\n        if (/^\\s{2,}from/.test(fromString)) {\r\n            this.addFailureAt(importClauseEnd, fromString.length, Rule.TOO_MANY_SPACES_BEFORE_FROM);\r\n        } else if (/^from/.test(fromString)) {\r\n            this.addFailureAt(importClauseEnd, fromString.length, Rule.ADD_SPACE_BEFORE_FROM);\r\n        }\r\n\r\n        const beforeImportClauseText = text.substring(0, importClauseStart - nodeStart);\r\n        const afterImportClauseText = text.substring(importClauseEnd - nodeStart);\r\n        if (LINE_BREAK_REGEX.test(beforeImportClauseText)) {\r\n            this.addFailure(nodeStart, importClauseStart - 1, Rule.NO_LINE_BREAKS);\r\n        }\r\n        if (LINE_BREAK_REGEX.test(afterImportClauseText)) {\r\n            this.addFailure(importClauseEnd, node.getEnd(), Rule.NO_LINE_BREAKS);\r\n        }\r\n    }\r\n\r\n    private checkNamespaceImport(node: ts.NamespaceImport): void {\r\n        const text = node.getText(this.sourceFile);\r\n        if (text.indexOf(\"*as\") > -1) {\r\n            this.addFailureAtNode(node, Rule.ADD_SPACE_AFTER_STAR);\r\n        } else if (/\\*\\s{2,}as/.test(text)) {\r\n            this.addFailureAtNode(node, Rule.TOO_MANY_SPACES_AFTER_STAR);\r\n        } else if (LINE_BREAK_REGEX.test(text)) {\r\n            this.addFailureAtNode(node, Rule.NO_LINE_BREAKS);\r\n        }\r\n    }\r\n\r\n    private checkModuleWithSideEffect(node: ts.ImportDeclaration): void {\r\n        const nodeStart = node.getStart(this.sourceFile);\r\n        const moduleSpecifierStart = node.moduleSpecifier.getStart(this.sourceFile);\r\n\r\n        if (nodeStart + \"import\".length + 1 < moduleSpecifierStart) {\r\n            this.addFailure(nodeStart, moduleSpecifierStart, Rule.TOO_MANY_SPACES_AFTER_IMPORT);\r\n        } else if (nodeStart + \"import\".length === moduleSpecifierStart) {\r\n            this.addFailureAtNode(getChildOfKind(node, ts.SyntaxKind.ImportKeyword, this.sourceFile)!, Rule.ADD_SPACE_AFTER_IMPORT);\r\n        }\r\n\r\n        if (LINE_BREAK_REGEX.test(node.getText())) {\r\n            this.addFailureAtNode(node, Rule.NO_LINE_BREAKS);\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/importSpacingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 133,
                  "charOffset": 5872,
                  "charLength": 132,
                  "snippet": {
                    "text": "            this.addFailureAtNode(getChildOfKind(node, ts.SyntaxKind.ImportKeyword, this.sourceFile)!, Rule.ADD_SPACE_AFTER_IMPORT);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/indentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 11,
                  "endLine": 98,
                  "endColumn": 18,
                  "charOffset": 3741,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/indentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 141,
                  "charOffset": 1997,
                  "charLength": 140,
                  "snippet": {
                    "text": "            **NOTE**: auto-fixing will only convert invalid indent whitespace to the desired type, it will not fix invalid whitespace sizes."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/indentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 123,
                  "charOffset": 4936,
                  "charLength": 122,
                  "snippet": {
                    "text": "function createFix(lineStart: number, fullLeadingWhitespace: string, tabs: boolean, size?: number): Lint.Fix | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/interfaceOverTypeLiteralRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 136,
                  "charOffset": 1104,
                  "charLength": 135,
                  "snippet": {
                    "text": "        rationale: \"Interfaces are generally preferred over type literals because interfaces can be implemented, extended and merged.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/jsdocFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 11,
                  "endLine": 69,
                  "endColumn": 18,
                  "charOffset": 2923,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/jsdocFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 135,
                  "charOffset": 1594,
                  "charLength": 134,
                  "snippet": {
                    "text": "            * multiline comments don't allow text after \\`/** \\` in the first line (with option \\`\"${OPTION_CHECK_MULTILINE_START}\"\\`)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/linebreakStyleRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 126,
                  "charOffset": 2485,
                  "charLength": 125,
                  "snippet": {
                    "text": "                ctx.addFailure(lineStarts[i - 1], lineEnd - 1, Rule.FAILURE_LF, Lint.Replacement.deleteText(lineEnd - 1, 1));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/maxClassesPerFileRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 11,
                  "endLine": 22,
                  "endColumn": 18,
                  "charOffset": 790,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/maxFileLineCountRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 123,
                  "charOffset": 2198,
                  "charLength": 122,
                  "snippet": {
                    "text": "        return [new Lint.RuleFailure(sourceFile, len - 1, len, Rule.FAILURE_STRING(lineCount, lineLimit), this.ruleName)];"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/maxLineLengthRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 11,
                  "endLine": 22,
                  "endColumn": 35,
                  "charOffset": 766,
                  "charLength": 24,
                  "snippet": {
                    "text": "MaxLineLengthRuleOptions"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/maxLineLengthRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 126,
                  "charOffset": 2132,
                  "charLength": 125,
                  "snippet": {
                    "text": "             * \\`^import |^export \\{(.*?)\\}|class [a-zA-Z]+ implements |// \\` pattern will ignore all the cases listed above."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberAccessRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 18,
                  "charOffset": 1201,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberAccessRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 124,
                  "charOffset": 2594,
                  "charLength": 123,
                  "snippet": {
                    "text": "                enum: [OPTION_NO_PUBLIC, OPTION_CHECK_ACCESSOR, OPTION_CHECK_CONSTRUCTOR, OPTION_CHECK_PARAMETER_PROPERTY],"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberAccessRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 1,
                  "endLine": 156,
                  "endColumn": 129,
                  "charOffset": 6537,
                  "charLength": 128,
                  "snippet": {
                    "text": "                    Lint.Replacement.deleteFromTo(start, getNextToken(publicKeyword, ctx.sourceFile)!.getStart(ctx.sourceFile)),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberAccessRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 132,
                  "charOffset": 6994,
                  "charLength": 131,
                  "snippet": {
                    "text": "            const memberName = node.name !== undefined && node.name.kind === ts.SyntaxKind.Identifier ? node.name.text : undefined;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberAccessRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 1,
                  "endLine": 175,
                  "endColumn": 124,
                  "charOffset": 7526,
                  "charLength": 123,
                  "snippet": {
                    "text": "    const node = member.decorators === undefined ? member : getTokenAtPosition(member, member.decorators.end, sourceFile)!;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 11,
                  "endLine": 452,
                  "endColumn": 18,
                  "charOffset": 18086,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 11,
                  "endLine": 511,
                  "endColumn": 23,
                  "charOffset": 20652,
                  "charLength": 12,
                  "snippet": {
                    "text": "NameAndKinds"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 1,
                  "endLine": 384,
                  "endColumn": 2,
                  "charOffset": 7680,
                  "charLength": 7858,
                  "snippet": {
                    "text": "class MemberOrderingWalker extends Lint.AbstractWalker<Options> {\r\n\r\n    private readonly fixes: Array<[Lint.RuleFailure, Lint.Replacement]> = [];\r\n\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            // NB: iterate through children first!\r\n            ts.forEachChild(node, cb);\r\n\r\n            switch (node.kind) {\r\n                case ts.SyntaxKind.ClassDeclaration:\r\n                case ts.SyntaxKind.ClassExpression:\r\n                case ts.SyntaxKind.InterfaceDeclaration:\r\n                case ts.SyntaxKind.TypeLiteral:\r\n                    this.checkMembers((node as ts.ClassLikeDeclaration | ts.InterfaceDeclaration | ts.TypeLiteralNode).members);\r\n            }\r\n        };\r\n        ts.forEachChild(sourceFile, cb);\r\n\r\n        // assign Replacements which have not been merged into surrounding ones to their RuleFailures.\r\n        this.fixes.forEach(([failure, replacement]) => {\r\n            (failure.getFix() as Lint.Replacement[]).push(replacement);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check wether the passed members adhere to the configured order. If not, RuleFailures are generated and a single\r\n     * Lint.Replacement is generated, which replaces the entire NodeArray with a correctly sorted one. The Replacement\r\n     * is not immediately added to a RuleFailure, as incorrectly sorted nodes can be nested (e.g. a class declaration\r\n     * in a method implementation), but instead temporarily stored in `this.fixes`. Nested Replacements are manually\r\n     * merged, as TSLint doesn't handle overlapping ones. For this reason it is important that the recursion happens\r\n     * before the checkMembers call in this.walk().\r\n     */\r\n    private checkMembers(members: ts.NodeArray<Member>) {\r\n        let prevRank = -1;\r\n        let prevName: string | undefined;\r\n        let failureExists = false;\r\n        for (const member of members) {\r\n            const rank = this.memberRank(member);\r\n            if (rank === -1) {\r\n                // no explicit ordering for this kind of node specified, so continue\r\n                continue;\r\n            }\r\n\r\n            if (rank < prevRank) {\r\n                const nodeType = this.rankName(rank);\r\n                const prevNodeType = this.rankName(prevRank);\r\n                const lowerRank = this.findLowerRank(members, rank);\r\n                const locationHint = lowerRank !== -1\r\n                    ? `after ${this.rankName(lowerRank)}s`\r\n                    : \"at the beginning of the class/interface\";\r\n                const errorLine1 = `Declaration of ${nodeType} not allowed after declaration of ${prevNodeType}. ` +\r\n                    `Instead, this should come ${locationHint}.`;\r\n                // add empty array as fix so we can add a replacement later. (fix itself is readonly)\r\n                this.addFailureAtNode(member, errorLine1, []);\r\n                failureExists = true;\r\n            } else {\r\n                if (this.options.alphabetize && member.name !== undefined) {\r\n                    if (rank !== prevRank) {\r\n                        // No alphabetical ordering between different ranks\r\n                        prevName = undefined;\r\n                    }\r\n\r\n                    const curName = nameString(member.name);\r\n                    if (prevName !== undefined && caseInsensitiveLess(curName, prevName)) {\r\n                        this.addFailureAtNode(\r\n                            member.name,\r\n                            Rule.FAILURE_STRING_ALPHABETIZE(this.findLowerName(members, rank, curName), curName), []);\r\n                        failureExists = true;\r\n                    } else {\r\n                        prevName = curName;\r\n                    }\r\n                }\r\n\r\n                // keep track of last good node\r\n                prevRank = rank;\r\n            }\r\n        }\r\n        if (failureExists) {\r\n            const sortedMemberIndexes = members.map((_, i) => i).sort((ai, bi) => {\r\n                const a = members[ai];\r\n                const b = members[bi];\r\n\r\n                // first, sort by member rank\r\n                const rankDiff = this.memberRank(a) - this.memberRank(b);\r\n                if (rankDiff !== 0) { return rankDiff; }\r\n                // then lexicographically if alphabetize == true\r\n                if (this.options.alphabetize && a.name !== undefined && b.name !== undefined) {\r\n                    const aName = nameString(a.name);\r\n                    const bName = nameString(b.name);\r\n                    const nameDiff = aName.localeCompare(bName);\r\n                    if (nameDiff !== 0) { return nameDiff; }\r\n                }\r\n                // finally, sort by position in original NodeArray so the sort remains stable.\r\n                return ai - bi;\r\n            });\r\n            const splits = getSplitIndexes(members, this.sourceFile.text);\r\n            const sortedMembersText = sortedMemberIndexes.map((i) => {\r\n                const start = splits[i];\r\n                const end = splits[i + 1];\r\n                let nodeText = this.sourceFile.text.substring(start, end);\r\n                while (true) {\r\n                    // check if there are previous fixes which we need to merge into this one\r\n                    // if yes, remove it from the list so that we do not return overlapping Replacements\r\n                    const fixIndex = arrayFindLastIndex(\r\n                        this.fixes,\r\n                        ([, r]) => r.start >= start && r.start + r.length <= end,\r\n                    );\r\n                    if (fixIndex === -1) {\r\n                        break;\r\n                    }\r\n                    const fix = this.fixes.splice(fixIndex, 1)[0];\r\n                    const [, replacement] = fix;\r\n                    nodeText = applyReplacementOffset(nodeText, replacement, start);\r\n                }\r\n                return nodeText;\r\n            });\r\n            // instead of assigning the fix immediately to the last failure, we temporarily store it in `this.fixes`,\r\n            // in case a containing node needs to be fixed too. We only \"add\" the fix to the last failure, although\r\n            // it fixes all failures in this NodeArray, as TSLint doesn't handle duplicate Replacements.\r\n            this.fixes.push([\r\n                arrayLast(this.failures),\r\n                Lint.Replacement.replaceFromTo(splits[0], arrayLast(splits), sortedMembersText.join(\"\")),\r\n            ]);\r\n        }\r\n    }\r\n\r\n    /** Finds the lowest name higher than 'targetName'. */\r\n    private findLowerName(members: ReadonlyArray<Member>, targetRank: Rank, targetName: string): string {\r\n        for (const member of members) {\r\n            if (member.name === undefined || this.memberRank(member) !== targetRank) {\r\n                continue;\r\n            }\r\n            const name = nameString(member.name);\r\n            if (caseInsensitiveLess(targetName, name)) {\r\n                return name;\r\n            }\r\n        }\r\n        throw new Error(\"Expected to find a name\");\r\n    }\r\n\r\n    /** Finds the highest existing rank lower than `targetRank`. */\r\n    private findLowerRank(members: ReadonlyArray<Member>, targetRank: Rank): Rank | -1 {\r\n        let max: Rank | -1 = -1;\r\n        for (const member of members) {\r\n            const rank = this.memberRank(member);\r\n            if (rank !== -1 && rank < targetRank) {\r\n                max = Math.max(max, rank);\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n\r\n    private memberRank(member: Member): Rank | -1 {\r\n        const optionName = getMemberKind(member);\r\n        if (optionName === undefined) {\r\n            return -1;\r\n        }\r\n        return this.options.order.findIndex((category) => category.has(optionName));\r\n    }\r\n\r\n    private rankName(rank: Rank): string {\r\n        return this.options.order[rank].name;\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 1,
                  "endLine": 445,
                  "endColumn": 2,
                  "charOffset": 17771,
                  "charLength": 176,
                  "snippet": {
                    "text": "class MemberCategory {\r\n    constructor(readonly name: string, private readonly kinds: Set<MemberKind>) {}\r\n    public has(kind: MemberKind) { return this.kinds.has(kind); }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 136,
                  "charOffset": 3664,
                  "charLength": 135,
                  "snippet": {
                    "text": "    You can also omit the access modifier to refer to \"public-\", \"protected-\", and \"private-\" all at once; for example, \"static-field\"."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 133,
                  "charOffset": 4161,
                  "charLength": 132,
                  "snippet": {
                    "text": "    The '${OPTION_ALPHABETIZE}' option will enforce that members within the same category should be alphabetically sorted by name.`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 1,
                  "endLine": 234,
                  "endColumn": 129,
                  "charOffset": 8265,
                  "charLength": 128,
                  "snippet": {
                    "text": "                    this.checkMembers((node as ts.ClassLikeDeclaration | ts.InterfaceDeclaration | ts.TypeLiteralNode).members);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 1,
                  "endLine": 394,
                  "endColumn": 127,
                  "charOffset": 15789,
                  "charLength": 126,
                  "snippet": {
                    "text": "function memberKindForMethodOrField(access: Access, membership: \"Static\" | \"Instance\", kind: \"Method\" | \"Field\"): MemberKind {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 1,
                  "endLine": 472,
                  "endColumn": 123,
                  "charOffset": 19044,
                  "charLength": 122,
                  "snippet": {
                    "text": "        return { order: convertFromOldStyleOptions(allOptions), alphabetize: false }; // presume allOptions to be string[]"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 1,
                  "endLine": 475,
                  "endColumn": 124,
                  "charOffset": 19177,
                  "charLength": 123,
                  "snippet": {
                    "text": "    return { order: categoryFromOption(firstOption[OPTION_ORDER]), alphabetize: firstOption[OPTION_ALPHABETIZE] === true };"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 1,
                  "endLine": 512,
                  "endColumn": 133,
                  "charOffset": 20701,
                  "charLength": 132,
                  "snippet": {
                    "text": "function splitOldStyleOptions(categories: NameAndKinds[], filter: (name: string) => boolean, a: string, b: string): NameAndKinds[] {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 1,
                  "endLine": 661,
                  "endColumn": 137,
                  "charOffset": 26380,
                  "charLength": 136,
                  "snippet": {
                    "text": "                            if (text.charCodeAt(pos) === CharacterCodes.asterisk && text.charCodeAt(pos + 1) === CharacterCodes.slash) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "== should be ==="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 20,
                  "endLine": 465,
                  "endColumn": 22,
                  "charOffset": 18685,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "== should be ==="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/memberOrderingRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 77,
                  "endLine": 465,
                  "endColumn": 79,
                  "charOffset": 18742,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/newlineBeforeReturnRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 83,
                  "endColumn": 2,
                  "charOffset": 1613,
                  "charLength": 1799,
                  "snippet": {
                    "text": "class NewlineBeforeReturnWalker extends Lint.AbstractWalker<void> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (node.kind === ts.SyntaxKind.ReturnStatement) {\r\n                this.visitReturnStatement(node as ts.ReturnStatement);\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private visitReturnStatement(node: ts.ReturnStatement) {\r\n        const prev = getPreviousStatement(node);\r\n        if (prev === undefined) {\r\n            // return is not within a block (e.g. the only child of an IfStatement) or the first statement of the block\r\n            // no need to check for preceding newline\r\n            return;\r\n        }\r\n\r\n        let start = node.getStart(this.sourceFile);\r\n        let line = ts.getLineAndCharacterOfPosition(this.sourceFile, start).line;\r\n        const comments = ts.getLeadingCommentRanges(this.sourceFile.text, node.pos);\r\n        if (comments !== undefined) {\r\n            // check for blank lines between comments\r\n            for (let i = comments.length - 1; i >= 0; --i) {\r\n                const endLine = ts.getLineAndCharacterOfPosition(this.sourceFile, comments[i].end).line;\r\n                if (endLine < line - 1) {\r\n                    return;\r\n                }\r\n                start = comments[i].pos;\r\n                line = ts.getLineAndCharacterOfPosition(this.sourceFile, start).line;\r\n            }\r\n        }\r\n        const prevLine = ts.getLineAndCharacterOfPosition(this.sourceFile, prev.end).line;\r\n\r\n        if (prevLine >= line - 1) {\r\n            // Previous statement is on the same or previous line\r\n            this.addFailure(start, start, Rule.FAILURE_STRING);\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/newlinePerChainedCallRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 2,
                  "charOffset": 1824,
                  "charLength": 904,
                  "snippet": {
                    "text": "class NewlinePerChainedCallWalker extends Lint.AbstractWalker<void> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const checkForSameLine = (node: ts.Node): void => {\r\n            if (\r\n                isCallExpression(node) &&\r\n                isPropertyAccessExpression(node.expression) &&\r\n                isSameLine(\r\n                    sourceFile,\r\n                    node.expression.expression.end,\r\n                    node.expression.name.pos,\r\n                ) &&\r\n                hasChildCall(node.expression)\r\n            ) {\r\n                this.addFailure(\r\n                    node.expression.name.pos - 1,\r\n                    node.expression.name.end,\r\n                    Rule.FAILURE_STRING,\r\n                );\r\n            }\r\n            return ts.forEachChild(node, checkForSameLine);\r\n        };\r\n        return ts.forEachChild(sourceFile, checkForSameLine);\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noAngleBracketTypeAssertionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 126,
                  "charOffset": 2994,
                  "charLength": 125,
                  "snippet": {
                    "text": "        (parent.operatorToken.kind === ts.SyntaxKind.AmpersandToken || parent.operatorToken.kind === ts.SyntaxKind.BarToken);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 127,
                  "charOffset": 1319,
                  "charLength": 126,
                  "snippet": {
                    "text": "            Either add type annotations for properties that may exist or change the data type to the empty object type \\`{}\\`."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 125,
                  "charOffset": 1449,
                  "charLength": 124,
                  "snippet": {
                    "text": "            Alternately, if you're creating storage or handling for consistent but unknown types, such as in data structures"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 131,
                  "charOffset": 1974,
                  "charLength": 130,
                  "snippet": {
                    "text": "    public static FAILURE_STRING = \"Type declaration of 'any' loses type-safety. Consider replacing it with a more precise type.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noArgRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 124,
                  "charOffset": 2003,
                  "charLength": 123,
                  "snippet": {
                    "text": "            node.expression.kind === ts.SyntaxKind.Identifier && (node.expression as ts.Identifier).text === \"arguments\") {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noBooleanLiteralCompareRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 11,
                  "endLine": 63,
                  "endColumn": 18,
                  "charOffset": 2452,
                  "charLength": 7,
                  "snippet": {
                    "text": "Compare"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noBooleanLiteralCompareRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 123,
                  "charOffset": 1209,
                  "charLength": 122,
                  "snippet": {
                    "text": "            Comparing boolean values to boolean literals is unnecessary, as those expressions will result in booleans too."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noBooleanLiteralCompareRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 124,
                  "charOffset": 1612,
                  "charLength": 123,
                  "snippet": {
                    "text": "        return `This expression is unnecessarily compared to a boolean. Just ${negate ? \"negate it\" : \"use it directly\"}.`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noBooleanLiteralCompareRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 137,
                  "charOffset": 2674,
                  "charLength": 136,
                  "snippet": {
                    "text": "    return cmp === undefined || !utils.isTypeFlagSet(checker.getTypeAtLocation(cmp.expression), ts.TypeFlags.Boolean) ? undefined : cmp;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noConditionalAssignmentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 134,
                  "charOffset": 1052,
                  "charLength": 133,
                  "snippet": {
                    "text": "        descriptionDetails: \"This applies to `do-while`, `for`, `if`, and `while` statements and conditional (ternary) expressions.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noConditionalAssignmentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 1,
                  "endLine": 93,
                  "endColumn": 128,
                  "charOffset": 4102,
                  "charLength": 127,
                  "snippet": {
                    "text": "                    return cb((node as ts.AssertionExpression | ts.NonNullExpression | ts.ParenthesizedExpression).expression);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noConsecutiveBlankLinesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 124,
                  "charOffset": 3976,
                  "charLength": 123,
                  "snippet": {
                    "text": "        if (!templateRanges.some((template) => template.pos < possibleFailure.pos && possibleFailure.pos < template.end)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noConsecutiveBlankLinesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 140,
                  "charOffset": 4413,
                  "charLength": 139,
                  "snippet": {
                    "text": "                    possibleFailure.end === sourceText.length ? getStartOfLineBreak(sourceText, possibleFailure.pos) : possibleFailure.pos,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noConsoleRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 127,
                  "charOffset": 1139,
                  "charLength": 126,
                  "snippet": {
                    "text": "        optionsDescription: \"A list of method names to ban. If no method names are provided, all console methods are banned.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 128,
                  "charOffset": 1157,
                  "charLength": 127,
                  "snippet": {
                    "text": "            Using a single import statement per module will make the code clearer because you can see everything being imported"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 133,
                  "charOffset": 2391,
                  "charLength": 132,
                  "snippet": {
                    "text": "        if (isModuleDeclaration(statement) && statement.body !== undefined && statement.name.kind === ts.SyntaxKind.StringLiteral) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 132,
                  "charOffset": 2792,
                  "charLength": 131,
                  "snippet": {
                    "text": "            walkWorker(ctx, (statement.body as ts.ModuleBlock).statements, ts.isExternalModule(ctx.sourceFile) ? seen : new Set());"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateSuperRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 11,
                  "endLine": 186,
                  "endColumn": 17,
                  "charOffset": 7362,
                  "charLength": 6,
                  "snippet": {
                    "text": "Single"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateSuperRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 132,
                  "charOffset": 2998,
                  "charLength": 131,
                  "snippet": {
                    "text": "                return node.parent!.kind === ts.SyntaxKind.CallExpression && (node.parent as ts.CallExpression).expression === node"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateSuperRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 95,
                  "endColumn": 139,
                  "charOffset": 3953,
                  "charLength": 138,
                  "snippet": {
                    "text": "                return worse(getSuperForNode(thenStatement), elseStatement !== undefined ? getSuperForNode(elseStatement) : Kind.NoSuper);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 11,
                  "endLine": 25,
                  "endColumn": 18,
                  "charOffset": 816,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 2,
                  "charOffset": 2401,
                  "charLength": 1631,
                  "snippet": {
                    "text": "class NoDuplicateVariableWalker extends Lint.AbstractWalker<Options> {\r\n    private scope: Set<string> = new Set();\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        this.scope = new Set();\r\n        const cb = (node: ts.Node): void => {\r\n            if (utils.isFunctionScopeBoundary(node)) {\r\n                const oldScope = this.scope;\r\n                this.scope = new Set();\r\n                ts.forEachChild(node, cb);\r\n                this.scope = oldScope;\r\n                return;\r\n            }\r\n            if (this.options.parameters && utils.isParameterDeclaration(node)) {\r\n                this.handleBindingName(node.name, false);\r\n            } else if (utils.isVariableDeclarationList(node) && !utils.isBlockScopedVariableDeclarationList(node)) {\r\n                for (const variable of node.declarations) {\r\n                    this.handleBindingName(variable.name, true);\r\n                }\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private handleBindingName(name: ts.BindingName, check: boolean) {\r\n        if (name.kind === ts.SyntaxKind.Identifier) {\r\n            if (check && this.scope.has(name.text)) {\r\n                this.addFailureAtNode(name, Rule.FAILURE_STRING(name.text));\r\n            } else {\r\n                this.scope.add(name.text);\r\n            }\r\n        } else {\r\n            for (const e of name.elements) {\r\n                if (e.kind !== ts.SyntaxKind.OmittedExpression) {\r\n                    this.handleBindingName(e.name, check);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDuplicateVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 138,
                  "charOffset": 1536,
                  "charLength": 137,
                  "snippet": {
                    "text": "        optionsDescription: `You can specify \\`\"${OPTION_CHECK_PARAMETERS}\"\\` to check for variables with the same name as a parameter.`,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noDynamicDeleteRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 130,
                  "charOffset": 1181,
                  "charLength": 129,
                  "snippet": {
                    "text": "            Also consider using a [\\`Map\\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noEmptyInterfaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 127,
                  "charOffset": 2514,
                  "charLength": 126,
                  "snippet": {
                    "text": "            return types[0].typeArguments === undefined; // allow interfaces that provide type arguments for the extended type"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noEmptyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 919,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noEmptyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 131,
                  "charOffset": 4333,
                  "charLength": 130,
                  "snippet": {
                    "text": "            /* The public modifier does not serve a purpose here. It can only be used to allow instantiation of a base class where"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noEmptyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 124,
                  "charOffset": 4465,
                  "charLength": 123,
                  "snippet": {
                    "text": "               the super constructor is protected. But then the block would not be empty, because of the call to super() */"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noImplicitDependenciesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 882,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noImplicitDependenciesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 11,
                  "endLine": 121,
                  "endColumn": 23,
                  "charOffset": 4348,
                  "charLength": 12,
                  "snippet": {
                    "text": "Dependencies"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noImplicitDependenciesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 11,
                  "endLine": 125,
                  "endColumn": 22,
                  "charOffset": 4420,
                  "charLength": 11,
                  "snippet": {
                    "text": "PackageJson"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noImportSideEffectRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 124,
                  "charOffset": 1975,
                  "charLength": 123,
                  "snippet": {
                    "text": "        const patternConfig = this.ruleArguments[this.ruleArguments.length - 1] as { \"ignore-module\": string } | undefined;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInferrableTypesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 869,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInferrableTypesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 90,
                  "endColumn": 2,
                  "charOffset": 2902,
                  "charLength": 759,
                  "snippet": {
                    "text": "class NoInferrableTypesWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (shouldCheck(node, this.options)) {\r\n                const { name, type, initializer } = node;\r\n                if (type !== undefined && initializer !== undefined\r\n                    && typeIsInferrable(type.kind, initializer)) {\r\n                    const fix = Lint.Replacement.deleteFromTo(name.end, type.end);\r\n                    this.addFailureAtNode(type, Rule.FAILURE_STRING_FACTORY(ts.tokenToString(type.kind)!), fix);\r\n                }\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInferrableTypesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 134,
                  "charOffset": 1147,
                  "charLength": 133,
                  "snippet": {
                    "text": "        description: \"Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInferredEmptyObjectTypeRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 2,
                  "charOffset": 2140,
                  "charLength": 2294,
                  "snippet": {
                    "text": "class NoInferredEmptyObjectTypeRule extends Lint.AbstractWalker<void> {\r\n    constructor(sourceFile: ts.SourceFile, ruleName: string, private readonly checker: ts.TypeChecker) {\r\n        super(sourceFile, ruleName, undefined);\r\n    }\r\n\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (node.kind === ts.SyntaxKind.CallExpression) {\r\n                this.checkCallExpression(node as ts.CallExpression);\r\n            } else if (node.kind === ts.SyntaxKind.NewExpression) {\r\n                this.checkNewExpression(node as ts.NewExpression);\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private checkNewExpression(node: ts.NewExpression): void {\r\n        if (node.typeArguments === undefined) {\r\n            const type = this.checker.getTypeAtLocation(node);\r\n            if (isTypeReference(type) && type.typeArguments !== undefined &&\r\n                type.typeArguments.some((a) => isObjectType(a) && this.isEmptyObjectInterface(a))) {\r\n                this.addFailureAtNode(node, Rule.EMPTY_INTERFACE_INSTANCE);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkCallExpression(node: ts.CallExpression): void {\r\n        if (node.typeArguments !== undefined) {\r\n            return;\r\n        }\r\n\r\n        const callSig = this.checker.getResolvedSignature(node);\r\n        if (callSig === undefined) {\r\n            return;\r\n        }\r\n\r\n        const retType = this.checker.getReturnTypeOfSignature(callSig);\r\n        if (isObjectType(retType) && this.isEmptyObjectInterface(retType)) {\r\n            this.addFailureAtNode(node, Rule.EMPTY_INTERFACE_FUNCTION);\r\n        }\r\n    }\r\n\r\n    private isEmptyObjectInterface(objType: ts.ObjectType): boolean {\r\n        return isObjectFlagSet(objType, ts.ObjectFlags.Anonymous) &&\r\n            objType.getProperties().length === 0 &&\r\n            objType.getNumberIndexType() === undefined &&\r\n            objType.getStringIndexType() === undefined &&\r\n            objType.getCallSignatures().every((signature) => {\r\n                const type = this.checker.getReturnTypeOfSignature(signature);\r\n                return isObjectType(type) && this.isEmptyObjectInterface(type);\r\n            });\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInferredEmptyObjectTypeRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 125,
                  "charOffset": 2002,
                  "charLength": 124,
                  "snippet": {
                    "text": "        return this.applyWithWalker(new NoInferredEmptyObjectTypeRule(sourceFile, this.ruleName, program.getTypeChecker()));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInternalModuleRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 2,
                  "charOffset": 1698,
                  "charLength": 1519,
                  "snippet": {
                    "text": "class NoInternalModuleWalker extends Lint.AbstractWalker<void> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        return this.checkStatements(sourceFile.statements);\r\n    }\r\n\r\n    private checkStatements(statements: ReadonlyArray<ts.Statement>) {\r\n        for (const statement of statements) {\r\n            if (statement.kind === ts.SyntaxKind.ModuleDeclaration) {\r\n                this.checkModuleDeclaration(statement as ts.ModuleDeclaration);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkModuleDeclaration(node: ts.ModuleDeclaration, nested?: boolean): void {\r\n        if (!nested &&\r\n            node.name.kind === ts.SyntaxKind.Identifier &&\r\n            !isNodeFlagSet(node, ts.NodeFlags.Namespace) &&\r\n            // augmenting global uses a special syntax that is allowed\r\n            // see https://github.com/Microsoft/TypeScript/pull/6213\r\n            !isNodeFlagSet(node, ts.NodeFlags.GlobalAugmentation)) {\r\n            const end = node.name.pos;\r\n            const start = end - \"module\".length;\r\n            this.addFailure(start, end, Rule.FAILURE_STRING, Lint.Replacement.replaceFromTo(start, end, \"namespace\"));\r\n        }\r\n        if (node.body !== undefined) {\r\n            switch (node.body.kind) {\r\n                case ts.SyntaxKind.ModuleBlock:\r\n                    return this.checkStatements(node.body.statements);\r\n                case ts.SyntaxKind.ModuleDeclaration:\r\n                    return this.checkModuleDeclaration(node.body, true);\r\n            }\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInternalModuleRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 136,
                  "charOffset": 1006,
                  "charLength": 135,
                  "snippet": {
                    "text": "        rationale: \"Using `module` leads to a confusion of concepts with external modules. Use the newer `namespace` keyword instead.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInvalidThisRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 126,
                  "charOffset": 1170,
                  "charLength": 125,
                  "snippet": {
                    "text": "        rationale: \"See [the rule's author's rationale here.](https://github.com/palantir/tslint/pull/1105#issue-147549402)\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInvalidThisRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 123,
                  "charOffset": 2058,
                  "charLength": 122,
                  "snippet": {
                    "text": "    public static FAILURE_STRING_INSIDE = \"the \\\"this\\\" keyword is disallowed in function bodies inside class methods, \" +"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noInvalidThisRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 123,
                  "charOffset": 2375,
                  "charLength": 122,
                  "snippet": {
                    "text": "        const checkFuncInMethod = hasOption(DEPRECATED_OPTION_FUNCTION_IN_METHOD) || hasOption(OPTION_FUNCTION_IN_METHOD);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noMagicNumbersRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 2,
                  "charOffset": 2815,
                  "charLength": 1226,
                  "snippet": {
                    "text": "class NoMagicNumbersWalker extends Lint.AbstractWalker<number[]> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (isCallExpression(node) && isIdentifier(node.expression) && node.expression.text === \"parseInt\") {\r\n                return node.arguments.length === 0 ? undefined : cb(node.arguments[0]);\r\n            }\r\n\r\n            if (node.kind === ts.SyntaxKind.NumericLiteral) {\r\n                return this.checkNumericLiteral(node, (node as ts.NumericLiteral).text);\r\n            }\r\n            if (isNegativeNumberLiteral(node)) {\r\n                return this.checkNumericLiteral(node, `-${(node.operand as ts.NumericLiteral).text}`);\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private checkNumericLiteral(node: ts.Node, num: string) {\r\n        /* Using Object.is() to differentiate between pos/neg zero */\r\n        if (\r\n            !Rule.ALLOWED_NODES.has(node.parent!.kind) &&\r\n            !this.options.some((allowedNum) => Object.is(allowedNum, parseFloat(num)))\r\n        ) {\r\n            this.addFailureAtNode(node, Rule.FAILURE_STRING);\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noMergeableNamespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 90,
                  "endColumn": 2,
                  "charOffset": 1600,
                  "charLength": 1715,
                  "snippet": {
                    "text": "class Walker extends Lint.AbstractWalker<void> {\r\n    public walk(node: ts.SourceFile) {\r\n        return this.checkStatements(node.statements);\r\n    }\r\n\r\n    private checkStatements(statements: ReadonlyArray<ts.Statement>): void {\r\n        const seen = new Map<string, ts.NamespaceDeclaration>();\r\n\r\n        for (const statement of statements) {\r\n            if (statement.kind !== ts.SyntaxKind.ModuleDeclaration) {\r\n                continue;\r\n            }\r\n\r\n            const { name } = statement as ts.ModuleDeclaration;\r\n            if (name.kind === ts.SyntaxKind.Identifier) {\r\n                const { text } = name;\r\n                const prev = seen.get(text);\r\n                if (prev !== undefined) {\r\n                    this.addFailureAtNode(name, Rule.failureStringFactory(text, this.getLineOfNode(prev.name)));\r\n                }\r\n                seen.set(text, statement as ts.NamespaceDeclaration);\r\n            }\r\n\r\n            // Recursively check in all module declarations\r\n            this.checkModuleDeclaration(statement as ts.ModuleDeclaration);\r\n        }\r\n    }\r\n\r\n    private checkModuleDeclaration(decl: ts.ModuleDeclaration): void {\r\n        const { body } = decl;\r\n        if (body === undefined) {\r\n            return;\r\n        }\r\n\r\n        switch (body.kind) {\r\n            case ts.SyntaxKind.ModuleBlock:\r\n                this.checkStatements(body.statements);\r\n                break;\r\n            case ts.SyntaxKind.ModuleDeclaration:\r\n                this.checkModuleDeclaration(body as ts.ModuleDeclaration);\r\n        }\r\n    }\r\n\r\n    private getLineOfNode(node: ts.Node): number {\r\n        return ts.getLineAndCharacterOfPosition(this.sourceFile, node.pos).line + 1;\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noMisusedNewRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 137,
                  "charOffset": 642,
                  "charLength": 136,
                  "snippet": {
                    "text": "import { getPropertyName, isConstructSignatureDeclaration, isMethodDeclaration, isMethodSignature, isTypeReferenceNode } from \"tsutils\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noMisusedNewRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 126,
                  "charOffset": 1746,
                  "charLength": 125,
                  "snippet": {
                    "text": "    public static FAILURE_STRING_INTERFACE = \"Interfaces cannot be constructed, only classes. Did you mean `declare class`?\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noNamespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 11,
                  "endLine": 25,
                  "endColumn": 18,
                  "charOffset": 840,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noNullKeywordRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 140,
                  "charOffset": 642,
                  "charLength": 139,
                  "snippet": {
                    "text": "// with due reference to https://github.com/Microsoft/TypeScript/blob/7813121c4d77e50aad0eed3152ef1f1156c7b574/scripts/tslint/noNullRule.ts"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noNullKeywordRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 126,
                  "charOffset": 3354,
                  "charLength": 125,
                  "snippet": {
                    "text": "            ctx.addFailureAtNode(node, Rule.FAILURE_STRING, Lint.Replacement.replaceNode(node, \"undefined\", ctx.sourceFile));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noObjectLiteralTypeAssertionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 132,
                  "charOffset": 2390,
                  "charLength": 131,
                  "snippet": {
                    "text": "            isObjectLiteralExpression(isParenthesizedExpression(node.expression) ? node.expression.expression : node.expression)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noReturnAwaitRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 132,
                  "charOffset": 1155,
                  "charLength": 131,
                  "snippet": {
                    "text": "            Using \\`return await\\` just adds extra time before the overreaching promise is resolved without changing the semantics."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 11,
                  "endLine": 121,
                  "endColumn": 23,
                  "charOffset": 5051,
                  "charLength": 12,
                  "snippet": {
                    "text": "VariableInfo"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 1,
                  "endLine": 150,
                  "endColumn": 2,
                  "charOffset": 5123,
                  "charLength": 1092,
                  "snippet": {
                    "text": "class Scope {\r\n    public functionScope: Scope;\r\n    public variables = new Map<string, VariableInfo[]>();\r\n    public variablesSeen = new Map<string, ts.Identifier[]>();\r\n    public reassigned = new Set<string>();\r\n    constructor(functionScope?: Scope) {\r\n        // if no functionScope is provided we are in the process of creating a new function scope, which for consistency links to itself\r\n        this.functionScope = functionScope !== undefined ? functionScope : this;\r\n    }\r\n\r\n    public addVariable(identifier: ts.Identifier, blockScoped = true, tdz = false) {\r\n        // block scoped variables go to the block scope, function scoped variables to the containing function scope\r\n        const scope = blockScoped ? this : this.functionScope;\r\n        const list = scope.variables.get(identifier.text);\r\n        const variableInfo: VariableInfo = {\r\n            identifier,\r\n            tdz,\r\n        };\r\n        if (list === undefined) {\r\n            scope.variables.set(identifier.text, [variableInfo]);\r\n        } else {\r\n            list.push(variableInfo);\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 345,
                  "endColumn": 2,
                  "charOffset": 6219,
                  "charLength": 9453,
                  "snippet": {
                    "text": "class NoShadowedVariableWalker extends Lint.AbstractWalker<Options> {\r\n    private scope: Scope = new Scope();\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        if (sourceFile.isDeclarationFile) {\r\n            return;\r\n        }\r\n        this.scope = new Scope();\r\n\r\n        const cb = (node: ts.Node): void => {\r\n            const parentScope = this.scope;\r\n            if ((this.options.function && isFunctionExpression(node) || this.options.class && isClassExpression(node)) &&\r\n                node.name !== undefined) {\r\n                /* special handling for named function and class expressions:\r\n                   technically the name of the function is only visible inside of it,\r\n                   but variables with the same name declared inside don't cause compiler errors.\r\n                   Therefore we add an additional function scope only for the function name to avoid merging with other declarations */\r\n                const functionScope = new Scope();\r\n                functionScope.addVariable(node.name, false);\r\n                this.scope = new Scope();\r\n                if (isClassExpression(node)) {\r\n                    this.visitClassLikeDeclaration(node, functionScope, cb);\r\n                } else {\r\n                    ts.forEachChild(node, cb);\r\n                }\r\n                this.onScopeEnd(functionScope);\r\n                this.scope = functionScope;\r\n                this.onScopeEnd(parentScope);\r\n                this.scope = parentScope;\r\n                return;\r\n            }\r\n\r\n            /* Visit decorators before entering a function scope.\r\n               In the AST decorators are children of the declaration they decorate, but we don't want to warn for the following code:\r\n               @decorator((param) => param)\r\n               function foo(param) {}\r\n            */\r\n            if (node.decorators !== undefined) {\r\n                for (const decorator of node.decorators) {\r\n                    ts.forEachChild(decorator, cb);\r\n                }\r\n            }\r\n\r\n            const boundary = isScopeBoundary(node);\r\n            if (boundary === ScopeBoundary.Block) {\r\n                this.scope = new Scope(parentScope.functionScope);\r\n            } else if (boundary === ScopeBoundary.Function) {\r\n                this.scope = new Scope();\r\n            }\r\n            switch (node.kind) {\r\n                case ts.SyntaxKind.Decorator:\r\n                    return; // handled above\r\n                case ts.SyntaxKind.VariableDeclarationList:\r\n                    this.handleVariableDeclarationList(node as ts.VariableDeclarationList);\r\n                    break;\r\n                case ts.SyntaxKind.TypeParameter:\r\n                    if (this.options.typeParameter) {\r\n                        this.scope.addVariable((node as ts.TypeParameterDeclaration).name);\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.FunctionDeclaration:\r\n                    if (this.options.function && (node as ts.FunctionDeclaration).name !== undefined) {\r\n                        parentScope.addVariable((node as ts.FunctionDeclaration).name!, false);\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.ClassDeclaration:\r\n                    if (this.options.class && (node as ts.ClassDeclaration).name !== undefined) {\r\n                        parentScope.addVariable((node as ts.ClassDeclaration).name!, true, true);\r\n                    }\r\n                    // falls through\r\n                case ts.SyntaxKind.ClassExpression:\r\n                    this.visitClassLikeDeclaration(node as ts.ClassLikeDeclaration, parentScope, cb);\r\n                    this.onScopeEnd(parentScope);\r\n                    this.scope = parentScope;\r\n                    return;\r\n                case ts.SyntaxKind.TypeAliasDeclaration:\r\n                    if (this.options.typeAlias) {\r\n                        parentScope.addVariable((node as ts.TypeAliasDeclaration).name);\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.EnumDeclaration:\r\n                    if (this.options.enum) {\r\n                        parentScope.addVariable((node as ts.EnumDeclaration).name, true, true);\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.InterfaceDeclaration:\r\n                    if (this.options.interface) {\r\n                        parentScope.addVariable((node as ts.InterfaceDeclaration).name);\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.Parameter:\r\n                    if (node.parent!.kind !== ts.SyntaxKind.IndexSignature &&\r\n                        !isThisParameter(node as ts.ParameterDeclaration) &&\r\n                        isFunctionWithBody(node.parent!)) {\r\n                        this.handleBindingName((node as ts.ParameterDeclaration).name, false, true);\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.ModuleDeclaration:\r\n                    if (this.options.namespace &&\r\n                        node.parent!.kind !== ts.SyntaxKind.ModuleDeclaration &&\r\n                        (node as ts.ModuleDeclaration).name.kind === ts.SyntaxKind.Identifier &&\r\n                        !isNodeFlagSet(node, ts.NodeFlags.GlobalAugmentation)\r\n                    ) {\r\n                        parentScope.addVariable((node as ts.NamespaceDeclaration).name, false);\r\n                    }\r\n                    if (hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword)) {\r\n                        this.onScopeEnd(parentScope);\r\n                        this.scope = parentScope;\r\n                        return; // don't check any ambient declaration blocks\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.ImportClause:\r\n                    if (this.options.import && (node as ts.ImportClause).name !== undefined) {\r\n                        this.scope.addVariable((node as ts.ImportClause).name!, false);\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.NamespaceImport:\r\n                case ts.SyntaxKind.ImportSpecifier:\r\n                case ts.SyntaxKind.ImportEqualsDeclaration:\r\n                    if (this.options.import) {\r\n                        this.scope.addVariable((node as ts.NamespaceImport | ts.ImportSpecifier | ts.ImportEqualsDeclaration).name, false);\r\n                    }\r\n            }\r\n            if (boundary !== ScopeBoundary.None) {\r\n                ts.forEachChild(node, cb);\r\n                this.onScopeEnd(parentScope);\r\n                this.scope = parentScope;\r\n            } else {\r\n                return ts.forEachChild(node, cb);\r\n            }\r\n        };\r\n\r\n        ts.forEachChild(sourceFile, cb);\r\n        this.onScopeEnd();\r\n    }\r\n\r\n    private visitClassLikeDeclaration(declaration: ts.ClassLikeDeclaration, parentScope: Scope, cb: (node: ts.Node) => void) {\r\n        const currentScope = this.scope;\r\n        ts.forEachChild(declaration, (node) => {\r\n            if (!hasModifier(node.modifiers, ts.SyntaxKind.StaticKeyword)) {\r\n                return cb(node);\r\n            }\r\n            /* Don't treat static members as children of the class' scope. That avoid shadowed type parameter warnings on static members.\r\n               class C<T> {\r\n                   static method<T>() {}\r\n               }\r\n            */\r\n            this.scope = parentScope;\r\n            cb(node);\r\n            this.scope = currentScope;\r\n        });\r\n    }\r\n\r\n    private handleVariableDeclarationList(node: ts.VariableDeclarationList) {\r\n        const blockScoped = isBlockScopedVariableDeclarationList(node);\r\n        for (const variable of node.declarations) {\r\n            this.handleBindingName(variable.name, blockScoped);\r\n        }\r\n    }\r\n\r\n    private handleBindingName(node: ts.BindingName, blockScoped: boolean, tdz = blockScoped) {\r\n        if (node.kind === ts.SyntaxKind.Identifier) {\r\n            this.scope.addVariable(node, blockScoped, tdz);\r\n        } else {\r\n            for (const element of node.elements) {\r\n                if (element.kind !== ts.SyntaxKind.OmittedExpression) {\r\n                    this.handleBindingName(element.name, blockScoped, tdz);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onScopeEnd(parent?: Scope) {\r\n        const {variables, variablesSeen} = this.scope;\r\n        variablesSeen.forEach((identifiers, name) => {\r\n            const declarationsInScope = variables.get(name);\r\n            for (const identifier of identifiers) {\r\n                if (declarationsInScope !== undefined &&\r\n                    (this.options.temporalDeadZone ||\r\n                     // check if any of the declaration either has no temporal dead zone or is declared before the identifier\r\n                     declarationsInScope.some((declaration) => !declaration.tdz || declaration.identifier.pos < identifier.pos))\r\n                ) {\r\n                    this.addFailureAtNode(identifier, Rule.FAILURE_STRING_FACTORY(name));\r\n                } else if (parent !== undefined) {\r\n                    addOneToList(parent.variablesSeen, name, identifier);\r\n                }\r\n            }\r\n        });\r\n        if (parent !== undefined) {\r\n            variables.forEach((identifiers, name) => {\r\n                addToList(parent.variablesSeen, name, identifiers);\r\n            });\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 131,
                  "charOffset": 652,
                  "charLength": 130,
                  "snippet": {
                    "text": "    hasModifier, isBlockScopedVariableDeclarationList, isClassExpression, isFunctionExpression, isFunctionWithBody, isNodeFlagSet,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 135,
                  "charOffset": 1868,
                  "charLength": 134,
                  "snippet": {
                    "text": "            Possible keys are \\`\"class\"\\`, \\`\"enum\"\\`, \\`\"function\"\\`, \\`\"import\"\\`, \\`\"interface\"\\`, \\`\"namespace\"\\`, \\`\"typeAlias\"\\`"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 136,
                  "charOffset": 2253,
                  "charLength": 135,
                  "snippet": {
                    "text": "            The option \\`\"temporalDeadZone\"\\` defaults to \\`true\\` which shows errors when shadowing block scoped declarations in their"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 138,
                  "charOffset": 3859,
                  "charLength": 137,
                  "snippet": {
                    "text": "            [true, {class: true, enum: true, function: true, interface: false, namespace: true, typeAlias: false, typeParameter: false}],"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 138,
                  "charOffset": 4350,
                  "charLength": 137,
                  "snippet": {
                    "text": "            new NoShadowedVariableWalker(sourceFile, this.ruleName, parseOptions(this.ruleArguments[0] as Partial<Options> | undefined)),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 135,
                  "charOffset": 4513,
                  "charLength": 134,
                  "snippet": {
                    "text": "type Kind = \"class\" | \"import\" | \"interface\" | \"function\" | \"enum\" | \"namespace\" | \"typeParameter\" | \"typeAlias\" | \"temporalDeadZone\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 1,
                  "endLine": 132,
                  "endColumn": 137,
                  "charOffset": 5381,
                  "charLength": 136,
                  "snippet": {
                    "text": "        // if no functionScope is provided we are in the process of creating a new function scope, which for consistency links to itself"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 162,
                  "endColumn": 122,
                  "charOffset": 6583,
                  "charLength": 121,
                  "snippet": {
                    "text": "            if ((this.options.function && isFunctionExpression(node) || this.options.class && isClassExpression(node)) &&"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 1,
                  "endLine": 167,
                  "endColumn": 136,
                  "charOffset": 7014,
                  "charLength": 135,
                  "snippet": {
                    "text": "                   Therefore we add an additional function scope only for the function name to avoid merging with other declarations */"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 1,
                  "endLine": 184,
                  "endColumn": 134,
                  "charOffset": 7820,
                  "charLength": 133,
                  "snippet": {
                    "text": "               In the AST decorators are children of the declaration they decorate, but we don't want to warn for the following code:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 1,
                  "endLine": 271,
                  "endColumn": 140,
                  "charOffset": 12512,
                  "charLength": 139,
                  "snippet": {
                    "text": "                        this.scope.addVariable((node as ts.NamespaceImport | ts.ImportSpecifier | ts.ImportEqualsDeclaration).name, false);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 1,
                  "endLine": 287,
                  "endColumn": 127,
                  "charOffset": 13058,
                  "charLength": 126,
                  "snippet": {
                    "text": "    private visitClassLikeDeclaration(declaration: ts.ClassLikeDeclaration, parentScope: Scope, cb: (node: ts.Node) => void) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 1,
                  "endLine": 293,
                  "endColumn": 138,
                  "charOffset": 13405,
                  "charLength": 137,
                  "snippet": {
                    "text": "            /* Don't treat static members as children of the class' scope. That avoid shadowed type parameter warnings on static members."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 1,
                  "endLine": 330,
                  "endColumn": 126,
                  "charOffset": 14931,
                  "charLength": 125,
                  "snippet": {
                    "text": "                     // check if any of the declaration either has no temporal dead zone or is declared before the identifier"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noShadowedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 1,
                  "endLine": 331,
                  "endColumn": 129,
                  "charOffset": 15058,
                  "charLength": 128,
                  "snippet": {
                    "text": "                     declarationsInScope.some((declaration) => !declaration.tdz || declaration.identifier.pos < identifier.pos))"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noSubmoduleImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 124,
                  "charOffset": 1694,
                  "charLength": 123,
                  "snippet": {
                    "text": "    public static FAILURE_STRING = \"Submodule import paths from this package are disallowed; import from the root instead\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noSwitchCaseFallThroughRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 99,
                  "endColumn": 2,
                  "charOffset": 2464,
                  "charLength": 1278,
                  "snippet": {
                    "text": "export class NoSwitchCaseFallThroughWalker extends Lint.AbstractWalker<void> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (utils.isSwitchStatement(node)) {\r\n                this.visitSwitchStatement(node);\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private visitSwitchStatement({ caseBlock: { clauses } }: ts.SwitchStatement): void {\r\n        clauses.forEach((clause, i) => {\r\n            if (i !== clauses.length - 1\r\n                    && clause.statements.length !== 0\r\n                    && !utils.endsControlFlow(clause)\r\n                    && !this.isFallThroughAllowed(clause)) {\r\n                const keyword = clauses[i + 1].getChildAt(0);\r\n                this.addFailureAtNode(keyword, Rule.FAILURE_STRING(keyword.kind));\r\n            }\r\n        });\r\n    }\r\n\r\n    private isFallThroughAllowed(clause: ts.CaseOrDefaultClause): boolean {\r\n        const comments = ts.getLeadingCommentRanges(this.sourceFile.text, clause.end);\r\n        return comments !== undefined &&\r\n            comments.some((comment) => /^\\s*falls through\\b/i.test(this.sourceFile.text.slice(comment.pos + 2, comment.end)));\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noSwitchCaseFallThroughRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 1,
                  "endLine": 97,
                  "endColumn": 127,
                  "charOffset": 3606,
                  "charLength": 126,
                  "snippet": {
                    "text": "            comments.some((comment) => /^\\s*falls through\\b/i.test(this.sourceFile.text.slice(comment.pos + 2, comment.end)));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noThisAssignmentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 865,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noThisAssignmentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 24,
                  "charOffset": 954,
                  "charLength": 13,
                  "snippet": {
                    "text": "ConfigOptions"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noThisAssignmentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 167,
                  "endColumn": 2,
                  "charOffset": 4133,
                  "charLength": 1509,
                  "snippet": {
                    "text": "class NoThisAssignmentWalker extends Lint.AbstractWalker<Options> {\r\n    private readonly allowedThisNameTesters = this.options.allowedNames.map(\r\n        (allowedThisName) => new RegExp(allowedThisName));\r\n\r\n    public walk(sourceFile: ts.SourceFile): void {\r\n        ts.forEachChild(sourceFile, this.visitNode);\r\n    }\r\n\r\n    private readonly visitNode = (node: ts.Node): void => {\r\n        if (utils.isVariableDeclaration(node)) {\r\n            this.visitVariableDeclaration(node);\r\n        }\r\n\r\n        ts.forEachChild(node, this.visitNode);\r\n    }\r\n\r\n    private visitVariableDeclaration(node: ts.VariableDeclaration): void {\r\n        if (node.initializer === undefined || node.initializer.kind !== ts.SyntaxKind.ThisKeyword) {\r\n            return;\r\n        }\r\n\r\n        switch (node.name.kind) {\r\n            case ts.SyntaxKind.Identifier:\r\n                if (this.variableNameIsBanned(node.name.text)) {\r\n                    this.addFailureAtNode(node, Rule.FAILURE_STRING_FACTORY_IDENTIFIERS(node.name.text));\r\n                }\r\n                break;\r\n\r\n            default:\r\n                if (!this.options.allowDestructuring) {\r\n                    this.addFailureAtNode(node, Rule.FAILURE_STRING_BINDINGS);\r\n                }\r\n        }\r\n    }\r\n\r\n    private variableNameIsBanned(name: string): boolean {\r\n        for (const tester of this.allowedThisNameTesters) {\r\n            if (tester.test(name)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noThisAssignmentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 80,
                  "endColumn": 136,
                  "charOffset": 2465,
                  "charLength": 135,
                  "snippet": {
                    "text": "            * \\`${ALLOW_THIS_DESTRUCTURING}\\` allows using destructuring to access members of \\`this\\` (e.g. \\`{ foo, bar } = this;\\`)."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noThisAssignmentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 125,
                  "charOffset": 2602,
                  "charLength": 124,
                  "snippet": {
                    "text": "            * \\`${ALLOWED_THIS_NAMES}\\` may be specified as a list of regular expressions to match allowed variable names.`,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noThisAssignmentRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 1,
                  "endLine": 83,
                  "endColumn": 123,
                  "charOffset": 2767,
                  "charLength": 122,
                  "snippet": {
                    "text": "            Assigning a variable to \\`this\\` instead of properly using arrow lambdas may be a symptom of pre-ES6 practices"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noTrailingWhitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 11,
                  "endLine": 29,
                  "endColumn": 18,
                  "charOffset": 1098,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noTrailingWhitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 128,
                  "charOffset": 2224,
                  "charLength": 127,
                  "snippet": {
                    "text": "                enum: [OPTION_IGNORE_COMMENTS, OPTION_IGNORE_JSDOC, OPTION_IGNORE_TEMPLATE_STRINGS, OPTION_IGNORE_BLANK_LINES],"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noTrailingWhitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 132,
                  "charOffset": 5853,
                  "charLength": 131,
                  "snippet": {
                    "text": "    return kind === ts.SyntaxKind.MultiLineCommentTrivia && sourceText[range.pos + 2] === \"*\" && sourceText[range.pos + 3] !== \"*\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnboundMethodRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 11,
                  "endLine": 24,
                  "endColumn": 18,
                  "charOffset": 841,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryClassRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 11,
                  "endLine": 29,
                  "endColumn": 18,
                  "charOffset": 876,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryClassRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 1,
                  "endLine": 130,
                  "endColumn": 2,
                  "charOffset": 3306,
                  "charLength": 1617,
                  "snippet": {
                    "text": "class NoUnnecessaryClassWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const checkIfUnnecessaryClass = (node: ts.Node): void => {\r\n            if (isClassDeclaration(node) && !hasExtendsClause(node)) {\r\n                this.checkMembers(node);\r\n            }\r\n            return ts.forEachChild(node, checkIfUnnecessaryClass);\r\n        };\r\n        ts.forEachChild(sourceFile, checkIfUnnecessaryClass);\r\n    }\r\n\r\n    private checkMembers(node: ts.ClassDeclaration) {\r\n        if (node.members.length === 0) {\r\n            if (!this.options.allowEmptyClass) {\r\n                this.addFailureAtNode(getChildOfKind(node, ts.SyntaxKind.ClassKeyword)!, Rule.FAILURE_EMPTY_CLASS);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const allMembersAreConstructors = node.members.every(isConstructorDeclaration);\r\n        if (\r\n            allMembersAreConstructors &&\r\n            !this.options.allowConstructorOnly &&\r\n            !node.members.some(isConstructorWithShorthandProps)\r\n        ) {\r\n            this.addFailureAtNode(\r\n                getChildOfKind(node, ts.SyntaxKind.ClassKeyword, this.sourceFile)!,\r\n                Rule.FAILURE_CONSTRUCTOR_ONLY,\r\n            );\r\n        }\r\n\r\n        if (\r\n            !allMembersAreConstructors &&\r\n            !this.options.allowStaticOnly &&\r\n            !node.members.some(isNonStaticMember)\r\n        ) {\r\n            this.addFailureAtNode(\r\n                getChildOfKind(node, ts.SyntaxKind.ClassKeyword, this.sourceFile)!,\r\n                Rule.FAILURE_STATIC_ONLY,\r\n            );\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryClassRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 122,
                  "charOffset": 2877,
                  "charLength": 121,
                  "snippet": {
                    "text": "    public static FAILURE_STATIC_ONLY = \"Every member of this class is static. Use namespaces or plain objects instead.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryInitializerRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 132,
                  "charOffset": 2291,
                  "charLength": 131,
                  "snippet": {
                    "text": "                if (!isBindingPattern((node as ts.VariableDeclaration).name) && !isNodeFlagSet(node.parent!, ts.NodeFlags.Const)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryQualifierRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 126,
                  "charOffset": 2869,
                  "charLength": 125,
                  "snippet": {
                    "text": "    function visitNamespaceAccess(node: ts.Node, qualifier: ts.EntityNameOrEntityNameExpression, name: ts.Identifier): void {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryQualifierRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 125,
                  "charOffset": 5285,
                  "charLength": 124,
                  "snippet": {
                    "text": "            // For compatibility with typescript@2.5: compare declarations because the symbols don't have the same reference"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryTypeAssertionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 99,
                  "endColumn": 2,
                  "charOffset": 1874,
                  "charLength": 2223,
                  "snippet": {
                    "text": "class Walker extends Lint.AbstractWalker<string[]> {\r\n    constructor(sourceFile: ts.SourceFile, ruleName: string, options: string[], private readonly checker: ts.TypeChecker) {\r\n        super(sourceFile, ruleName, options);\r\n    }\r\n\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            switch (node.kind) {\r\n                case ts.SyntaxKind.NonNullExpression:\r\n                    this.checkNonNullAssertion(node as ts.NonNullExpression);\r\n                    break;\r\n                case ts.SyntaxKind.TypeAssertionExpression:\r\n                case ts.SyntaxKind.AsExpression:\r\n                    this.verifyCast(node as ts.AssertionExpression);\r\n            }\r\n\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private checkNonNullAssertion(node: ts.NonNullExpression) {\r\n        const type = this.checker.getTypeAtLocation(node.expression);\r\n        if (type === this.checker.getNonNullableType(type)) {\r\n            this.addFailureAtNode(node, Rule.FAILURE_STRING, Lint.Replacement.deleteFromTo(node.expression.end, node.end));\r\n        }\r\n    }\r\n\r\n    private verifyCast(node: ts.AssertionExpression) {\r\n        if (this.options.indexOf(node.type.getText(this.sourceFile)) !== -1) {\r\n            return;\r\n        }\r\n        const castType = this.checker.getTypeAtLocation(node);\r\n\r\n        if (isTypeFlagSet(castType, ts.TypeFlags.Literal) ||\r\n            isObjectType(castType) && (isObjectFlagSet(castType, ts.ObjectFlags.Tuple) || couldBeTupleType(castType))) {\r\n\r\n            // It's not always safe to remove a cast to a literal type or tuple\r\n            // type, as those types are sometimes widened without the cast.\r\n            return;\r\n        }\r\n\r\n        const uncastType = this.checker.getTypeAtLocation(node.expression);\r\n        if (uncastType === castType) {\r\n            this.addFailureAtNode(node, Rule.FAILURE_STRING, node.kind === ts.SyntaxKind.TypeAssertionExpression\r\n                ? Lint.Replacement.deleteFromTo(node.getStart(), node.expression.getStart())\r\n                : Lint.Replacement.deleteFromTo(node.expression.end, node.end));\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryTypeAssertionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 122,
                  "charOffset": 1739,
                  "charLength": 121,
                  "snippet": {
                    "text": "        return this.applyWithWalker(new Walker(sourceFile, this.ruleName, this.ruleArguments, program.getTypeChecker()));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryTypeAssertionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 124,
                  "charOffset": 1928,
                  "charLength": 123,
                  "snippet": {
                    "text": "    constructor(sourceFile: ts.SourceFile, ruleName: string, options: string[], private readonly checker: ts.TypeChecker) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnnecessaryTypeAssertionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 124,
                  "charOffset": 2914,
                  "charLength": 123,
                  "snippet": {
                    "text": "            this.addFailureAtNode(node, Rule.FAILURE_STRING, Lint.Replacement.deleteFromTo(node.expression.end, node.end));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 361,
                  "endColumn": 2,
                  "charOffset": 2518,
                  "charLength": 15735,
                  "snippet": {
                    "text": "class NoUnsafeAnyWalker extends Lint.AbstractWalker<void> {\r\n    constructor(sourceFile: ts.SourceFile, ruleName: string, private readonly checker: ts.TypeChecker) {\r\n        super(sourceFile, ruleName, undefined);\r\n    }\r\n\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        if (sourceFile.isDeclarationFile) {\r\n            return; // Not possible in a declaration file.\r\n        }\r\n        sourceFile.statements.forEach(this.visitNodeCallback);\r\n    }\r\n\r\n    /** Wraps `visitNode` with the correct `this` binding and discards the return value to prevent `forEachChild` from returning early */\r\n    private readonly visitNodeCallback = (node: ts.Node) => void this.visitNode(node);\r\n\r\n    private visitNode(node: ts.Node, anyOk?: boolean): boolean | undefined {\r\n        switch (node.kind) {\r\n            case ts.SyntaxKind.ParenthesizedExpression:\r\n                // Don't warn on a parenthesized expression, warn on its contents.\r\n                return this.visitNode((node as ts.ParenthesizedExpression).expression, anyOk);\r\n            case ts.SyntaxKind.LabeledStatement:\r\n                // Ignore label\r\n                return this.visitNode((node as ts.LabeledStatement).statement);\r\n            // ignore labels\r\n            case ts.SyntaxKind.BreakStatement:\r\n            case ts.SyntaxKind.ContinueStatement:\r\n            // Ignore types\r\n            case ts.SyntaxKind.InterfaceDeclaration:\r\n            case ts.SyntaxKind.TypeAliasDeclaration:\r\n            case ts.SyntaxKind.TypeParameter:\r\n            case ts.SyntaxKind.IndexSignature:\r\n            // Ignore imports\r\n            case ts.SyntaxKind.ImportEqualsDeclaration:\r\n            case ts.SyntaxKind.ImportDeclaration:\r\n            case ts.SyntaxKind.ExportDeclaration:\r\n            case ts.SyntaxKind.ExportAssignment:\r\n                return false;\r\n            case ts.SyntaxKind.ThisKeyword:\r\n            case ts.SyntaxKind.Identifier:\r\n                return anyOk ? false : this.check(node as ts.Expression);\r\n            // Recurse through these, but ignore the immediate child because it is allowed to be 'any'.\r\n            case ts.SyntaxKind.DeleteExpression:\r\n            case ts.SyntaxKind.ExpressionStatement:\r\n            case ts.SyntaxKind.TypeAssertionExpression:\r\n            case ts.SyntaxKind.AsExpression:\r\n            case ts.SyntaxKind.TemplateSpan: // Allow stringification (works on all values). Note: tagged templates handled differently.\r\n            case ts.SyntaxKind.ThrowStatement:\r\n            case ts.SyntaxKind.TypeOfExpression:\r\n            case ts.SyntaxKind.VoidExpression:\r\n                return this.visitNode(\r\n                    (node as ts.ExpressionStatement | ts.AssertionExpression | ts.TemplateSpan | ts.ThrowStatement | ts.TypeOfExpression |\r\n                             ts.VoidExpression).expression,\r\n                    true,\r\n                );\r\n            case ts.SyntaxKind.PropertyAssignment: {\r\n                const {name, initializer} = (node as ts.PropertyAssignment);\r\n                this.visitNode(name, /*anyOk*/ true);\r\n                if (isReassignmentTarget(node.parent as ts.ObjectLiteralExpression)) {\r\n                    return this.visitNode(initializer, true);\r\n                }\r\n                return this.checkContextualType(initializer, true);\r\n            }\r\n            case ts.SyntaxKind.ShorthandPropertyAssignment: {\r\n                const { name, objectAssignmentInitializer} = node as ts.ShorthandPropertyAssignment;\r\n                if (objectAssignmentInitializer !== undefined) {\r\n                    return this.checkContextualType(objectAssignmentInitializer);\r\n                }\r\n                return this.checkContextualType(name, true);\r\n            }\r\n            case ts.SyntaxKind.PropertyDeclaration: {\r\n                const { name, initializer } = node as ts.PropertyDeclaration;\r\n                this.visitNode(name, true);\r\n                return initializer !== undefined &&\r\n                    this.visitNode(initializer, isPropertyAny(node as ts.PropertyDeclaration, this.checker));\r\n            }\r\n            case ts.SyntaxKind.SpreadAssignment:\r\n                return this.visitNode(\r\n                    (node as ts.SpreadAssignment).expression,\r\n                    // allow any in object spread, but not in object rest\r\n                    !isReassignmentTarget(node.parent as ts.ObjectLiteralExpression),\r\n                );\r\n            case ts.SyntaxKind.ComputedPropertyName:\r\n                return this.visitNode((node as ts.ComputedPropertyName).expression, true);\r\n            case ts.SyntaxKind.TaggedTemplateExpression: {\r\n                const { tag, template } = node as ts.TaggedTemplateExpression;\r\n                if (template.kind === ts.SyntaxKind.TemplateExpression) {\r\n                    for (const { expression } of template.templateSpans) {\r\n                        this.checkContextualType(expression);\r\n                    }\r\n                }\r\n                // Also check the template expression itself\r\n                if (this.visitNode(tag)) {\r\n                    return true;\r\n                }\r\n                return anyOk ? false : this.check(node as ts.Expression);\r\n            }\r\n            case ts.SyntaxKind.CallExpression:\r\n            case ts.SyntaxKind.NewExpression: {\r\n                const { expression, arguments: args } = node as ts.CallExpression | ts.NewExpression;\r\n                if (args !== undefined) {\r\n                    for (const arg of args) {\r\n                        this.checkContextualType(arg);\r\n                    }\r\n                }\r\n                if (this.visitNode(expression)) {\r\n                    return true;\r\n                }\r\n                // Also check the call expression itself\r\n                return anyOk ? false : this.check(node as ts.Expression);\r\n            }\r\n            case ts.SyntaxKind.PropertyAccessExpression:\r\n                // Don't warn for right hand side; this is redundant if we warn for the access itself.\r\n                if (this.visitNode((node as ts.PropertyAccessExpression).expression)) {\r\n                    return true;\r\n                }\r\n                return anyOk ? false : this.check(node as ts.Expression);\r\n            case ts.SyntaxKind.ElementAccessExpression: {\r\n                const { expression, argumentExpression } = node as ts.ElementAccessExpression;\r\n                if (argumentExpression !== undefined) {\r\n                    this.visitNode(argumentExpression, true);\r\n                }\r\n                if (this.visitNode(expression)) {\r\n                    return true;\r\n                }\r\n                return anyOk ? false : this.check(node as ts.Expression);\r\n            }\r\n            case ts.SyntaxKind.ReturnStatement: {\r\n                const { expression } = node as ts.ReturnStatement;\r\n                return expression !== undefined  && this.checkContextualType(expression, true);\r\n            }\r\n            case ts.SyntaxKind.SwitchStatement: {\r\n                const { expression, caseBlock: { clauses } } = node as ts.SwitchStatement;\r\n                // Allow `switch (x) {}` where `x` is any\r\n                this.visitNode(expression, /*anyOk*/ true);\r\n                for (const clause of clauses) {\r\n                    if (clause.kind === ts.SyntaxKind.CaseClause) {\r\n                        // Allow `case x:` where `x` is any\r\n                        this.visitNode(clause.expression, /*anyOk*/ true);\r\n                    }\r\n                    for (const statement of clause.statements) {\r\n                        this.visitNode(statement);\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            case ts.SyntaxKind.ModuleDeclaration: {\r\n                // In `declare global { ... }`, don't mark `global` as unsafe any.\r\n                const { body } = node as ts.ModuleDeclaration;\r\n                return body !== undefined && this.visitNode(body);\r\n            }\r\n            case ts.SyntaxKind.IfStatement: {\r\n                const { expression, thenStatement, elseStatement } = node as ts.IfStatement;\r\n                this.visitNode(expression, true); // allow truthyness check\r\n                this.visitNode(thenStatement);\r\n                return elseStatement !== undefined && this.visitNode(elseStatement);\r\n            }\r\n            case ts.SyntaxKind.PrefixUnaryExpression: {\r\n                const {operator, operand} = node as ts.PrefixUnaryExpression;\r\n                this.visitNode(operand, operator === ts.SyntaxKind.ExclamationToken); // allow falsyness check\r\n                return false;\r\n            }\r\n            case ts.SyntaxKind.ForStatement: {\r\n                const { initializer, condition, incrementor, statement } = node as ts.ForStatement;\r\n                if (initializer !== undefined) { this.visitNode(initializer, true); }\r\n                if (condition !== undefined) { this.visitNode(condition, true); } // allow truthyness check\r\n                if (incrementor !== undefined) { this.visitNode(incrementor, true); }\r\n                return this.visitNode(statement);\r\n            }\r\n            case ts.SyntaxKind.DoStatement:\r\n            case ts.SyntaxKind.WhileStatement:\r\n                this.visitNode((node as ts.DoStatement | ts.WhileStatement).expression, true);\r\n                return this.visitNode((node as ts.IterationStatement).statement);\r\n            case ts.SyntaxKind.ConditionalExpression: {\r\n                const { condition, whenTrue, whenFalse } = node as ts.ConditionalExpression;\r\n                this.visitNode(condition, true);\r\n                const left = this.visitNode(whenTrue, anyOk);\r\n                return this.visitNode(whenFalse, anyOk) || left;\r\n            }\r\n            case ts.SyntaxKind.VariableDeclaration:\r\n            case ts.SyntaxKind.Parameter:\r\n                return this.checkVariableOrParameterDeclaration(node as ts.VariableDeclaration | ts.ParameterDeclaration);\r\n            case ts.SyntaxKind.BinaryExpression:\r\n                return this.checkBinaryExpression(node as ts.BinaryExpression, anyOk);\r\n            case ts.SyntaxKind.AwaitExpression:\r\n                this.visitNode((node as ts.AwaitExpression).expression);\r\n                return anyOk ? false : this.check(node as ts.Expression);\r\n            case ts.SyntaxKind.YieldExpression:\r\n                return this.checkYieldExpression(node as ts.YieldExpression, anyOk);\r\n            case ts.SyntaxKind.ClassExpression:\r\n            case ts.SyntaxKind.ClassDeclaration:\r\n                this.checkClassLikeDeclaration(node as ts.ClassLikeDeclaration);\r\n                return false;\r\n            case ts.SyntaxKind.ArrayLiteralExpression: {\r\n                for (const element of (node as ts.ArrayLiteralExpression).elements) {\r\n                    this.checkContextualType(element, true);\r\n                }\r\n                return false;\r\n            }\r\n            case ts.SyntaxKind.JsxExpression:\r\n                return (node as ts.JsxExpression).expression !== undefined &&\r\n                    this.checkContextualType((node as ts.JsxExpression).expression!);\r\n        }\r\n        if (isTypeNodeKind(node.kind) || isTokenKind(node.kind)) {\r\n            return false;\r\n        }\r\n        return ts.forEachChild(node, this.visitNodeCallback);\r\n    }\r\n\r\n    private check(node: ts.Expression): boolean {\r\n        if (!isNodeAny(node, this.checker)) {\r\n            return false;\r\n        }\r\n        this.addFailureAtNode(node, Rule.FAILURE_STRING);\r\n        return true;\r\n    }\r\n\r\n    private checkContextualType(node: ts.Expression, allowIfNoContextualType?: boolean) {\r\n        const type = this.checker.getContextualType(node);\r\n        return this.visitNode(node, type === undefined && allowIfNoContextualType || isAny(type));\r\n    }\r\n\r\n    // Allow `const x = foo;` and `const x: any = foo`, but not `const x: Foo = foo;`.\r\n    private checkVariableOrParameterDeclaration({ name, type, initializer }: ts.VariableDeclaration | ts.ParameterDeclaration) {\r\n        this.checkBindingName(name);\r\n        // Always allow the LHS to be `any`. Just don't allow RHS to be `any` when LHS isn't.\r\n        return initializer !== undefined &&\r\n            this.visitNode(\r\n                initializer,\r\n                /*anyOk*/\r\n                name.kind === ts.SyntaxKind.Identifier && (type === undefined || type.kind === ts.SyntaxKind.AnyKeyword) ||\r\n                type !== undefined && type.kind === ts.SyntaxKind.AnyKeyword,\r\n            );\r\n    }\r\n\r\n    private checkBinaryExpression(node: ts.BinaryExpression, anyOk: boolean | undefined) {\r\n        let allowAnyLeft = false;\r\n        let allowAnyRight = false;\r\n        switch (node.operatorToken.kind) {\r\n            case ts.SyntaxKind.ExclamationEqualsEqualsToken:\r\n            case ts.SyntaxKind.ExclamationEqualsToken:\r\n            case ts.SyntaxKind.EqualsEqualsEqualsToken:\r\n            case ts.SyntaxKind.EqualsEqualsToken:\r\n            case ts.SyntaxKind.CommaToken: // Allow `any, any`\r\n            case ts.SyntaxKind.BarBarToken: // Allow `any || any`\r\n            case ts.SyntaxKind.AmpersandAmpersandToken: // Allow `any && any`\r\n                allowAnyLeft = allowAnyRight = true;\r\n                break;\r\n            case ts.SyntaxKind.InstanceOfKeyword: // Allow test\r\n                allowAnyLeft = true;\r\n                break;\r\n            case ts.SyntaxKind.EqualsToken:\r\n                // Allow assignment if the lhs is also *any*.\r\n                allowAnyLeft = true;\r\n                allowAnyRight = isNodeAny(node.left, this.checker);\r\n                break;\r\n            case ts.SyntaxKind.PlusToken: // Allow implicit stringification\r\n            case ts.SyntaxKind.PlusEqualsToken:\r\n                allowAnyLeft = allowAnyRight = isStringLike(node.left, this.checker)\r\n                    || (isStringLike(node.right, this.checker) && node.operatorToken.kind === ts.SyntaxKind.PlusToken);\r\n        }\r\n        this.visitNode(node.left, allowAnyLeft);\r\n        this.visitNode(node.right, allowAnyRight);\r\n        return anyOk ? false : this.check(node);\r\n    }\r\n\r\n    private checkYieldExpression(node: ts.YieldExpression, anyOk: boolean | undefined) {\r\n        if (node.expression !== undefined) {\r\n            this.checkContextualType(node.expression, true);\r\n        }\r\n        if (anyOk) {\r\n            return false;\r\n        }\r\n        this.addFailureAtNode(node, Rule.FAILURE_STRING);\r\n        return true;\r\n    }\r\n\r\n    private checkClassLikeDeclaration(node: ts.ClassLikeDeclaration) {\r\n        if (node.decorators !== undefined) {\r\n            node.decorators.forEach(this.visitNodeCallback);\r\n        }\r\n        if (node.heritageClauses !== undefined) {\r\n            node.heritageClauses.forEach(this.visitNodeCallback);\r\n        }\r\n        return node.members.forEach(this.visitNodeCallback);\r\n    }\r\n\r\n    private checkBindingName(node: ts.BindingName) {\r\n        if (node.kind !== ts.SyntaxKind.Identifier) {\r\n            if (isNodeAny(node, this.checker)) {\r\n                this.addFailureAtNode(node, Rule.FAILURE_STRING);\r\n            }\r\n            for (const element of node.elements) {\r\n                if (element.kind !== ts.SyntaxKind.OmittedExpression) {\r\n                    if (element.propertyName !== undefined && element.propertyName.kind === ts.SyntaxKind.ComputedPropertyName) {\r\n                        this.visitNode(element.propertyName.expression);\r\n                    }\r\n                    this.checkBindingName(element.name);\r\n                    if (element.initializer !== undefined) {\r\n                        this.checkContextualType(element.initializer);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 123,
                  "charOffset": 642,
                  "charLength": 122,
                  "snippet": {
                    "text": "import { isIdentifier, isReassignmentTarget, isSymbolFlagSet, isTokenKind, isTypeFlagSet, isTypeNodeKind } from \"tsutils\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 127,
                  "charOffset": 1658,
                  "charLength": 126,
                  "snippet": {
                    "text": "            Either add type annotations for properties that may exist or change the data type to the empty object type \\`{}\\`."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 125,
                  "charOffset": 1788,
                  "charLength": 124,
                  "snippet": {
                    "text": "            Alternately, if you're creating storage or handling for consistent but unknown types, such as in data structures"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 69,
                  "endColumn": 138,
                  "charOffset": 2978,
                  "charLength": 137,
                  "snippet": {
                    "text": "    /** Wraps `visitNode` with the correct `this` binding and discards the return value to prevent `forEachChild` from returning early */"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 137,
                  "charOffset": 4823,
                  "charLength": 136,
                  "snippet": {
                    "text": "            case ts.SyntaxKind.TemplateSpan: // Allow stringification (works on all values). Note: tagged templates handled differently."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 139,
                  "charOffset": 5147,
                  "charLength": 138,
                  "snippet": {
                    "text": "                    (node as ts.ExpressionStatement | ts.AssertionExpression | ts.TemplateSpan | ts.ThrowStatement | ts.TypeOfExpression |"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 1,
                  "endLine": 237,
                  "endColumn": 123,
                  "charOffset": 12371,
                  "charLength": 122,
                  "snippet": {
                    "text": "                return this.checkVariableOrParameterDeclaration(node as ts.VariableDeclaration | ts.ParameterDeclaration);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 1,
                  "endLine": 279,
                  "endColumn": 129,
                  "charOffset": 14426,
                  "charLength": 128,
                  "snippet": {
                    "text": "    private checkVariableOrParameterDeclaration({ name, type, initializer }: ts.VariableDeclaration | ts.ParameterDeclaration) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 1,
                  "endLine": 286,
                  "endColumn": 124,
                  "charOffset": 14820,
                  "charLength": 123,
                  "snippet": {
                    "text": "                name.kind === ts.SyntaxKind.Identifier && (type === undefined || type.kind === ts.SyntaxKind.AnyKeyword) ||"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 1,
                  "endLine": 350,
                  "endColumn": 130,
                  "charOffset": 17757,
                  "charLength": 129,
                  "snippet": {
                    "text": "                    if (element.propertyName !== undefined && element.propertyName.kind === ts.SyntaxKind.ComputedPropertyName) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnsafeAnyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 1,
                  "endLine": 383,
                  "endColumn": 131,
                  "charOffset": 19213,
                  "charLength": 130,
                  "snippet": {
                    "text": "        // NamespaceModule is a type-only namespace without runtime value, its type is 'any' when used as 'ns.Type' -> avoid error"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 11,
                  "endLine": 30,
                  "endColumn": 18,
                  "charOffset": 1076,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 1,
                  "endLine": 118,
                  "endColumn": 125,
                  "charOffset": 4967,
                  "charLength": 124,
                  "snippet": {
                    "text": "            if (!isLiteralZero(isParenthesizedExpression(node.expression) ? node.expression.expression : node.expression)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 1,
                  "endLine": 122,
                  "endColumn": 128,
                  "charOffset": 5176,
                  "charLength": 127,
                  "snippet": {
                    "text": "        } else if (isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.CommaToken && !isIndirectEval(node)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 11,
                  "endLine": 87,
                  "endColumn": 18,
                  "charOffset": 3764,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 135,
                  "charOffset": 6901,
                  "charLength": 134,
                  "snippet": {
                    "text": "function addImportSpecifierFailures(ctx: Lint.WalkContext<Options>, failures: Map<ts.Identifier, string>, sourceFile: ts.SourceFile) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 1,
                  "endLine": 182,
                  "endColumn": 134,
                  "charOffset": 7613,
                  "charLength": 133,
                  "snippet": {
                    "text": "        const allNamedBindingsAreFailures = namedBindings === undefined || namedBindings.elements.every((e) => failures.has(e.name));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 1,
                  "endLine": 199,
                  "endColumn": 124,
                  "charOffset": 8432,
                  "charLength": 123,
                  "snippet": {
                    "text": "                const end = namedBindings !== undefined ? namedBindings.getStart() : importNode.moduleSpecifier.getStart();"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 1,
                  "endLine": 223,
                  "endColumn": 131,
                  "charOffset": 9729,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    const end = nextElement !== undefined && prevElement == undefined ? nextElement.getStart() : element.getEnd();"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 24,
                  "endLine": 99,
                  "endColumn": 26,
                  "charOffset": 4254,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "== should be ==="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noUnusedVariableRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 74,
                  "endLine": 223,
                  "endColumn": 76,
                  "charOffset": 9802,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noVarKeywordRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 140,
                  "charOffset": 642,
                  "charLength": 139,
                  "snippet": {
                    "text": "import { hasModifier, isBlockScopedVariableDeclarationList, isNodeFlagSet, isVariableDeclarationList, isVariableStatement } from \"tsutils\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noVarKeywordRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 124,
                  "charOffset": 1344,
                  "charLength": 123,
                  "snippet": {
                    "text": "            Declaring variables using \\`var\\` has several edge case behaviors that make \\`var\\` unsuitable for modern code."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noVarKeywordRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 131,
                  "charOffset": 1469,
                  "charLength": 130,
                  "snippet": {
                    "text": "            Variables declared by \\`var\\` have their parent function block as their scope, ignoring other control flow statements."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noVarKeywordRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 122,
                  "charOffset": 1601,
                  "charLength": 121,
                  "snippet": {
                    "text": "            \\`var\\`s have declaration \"hoisting\" (similar to \\`function\\`s) and can appear to be used before declaration."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noVarRequiresRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 2,
                  "charOffset": 2256,
                  "charLength": 691,
                  "snippet": {
                    "text": "class NoVarRequiresWalker extends Lint.ScopeAwareRuleWalker<{}> {\r\n    public createScope(): {} {\r\n        return {};\r\n    }\r\n\r\n    public visitCallExpression(node: ts.CallExpression) {\r\n        const expression = node.expression;\r\n\r\n        if (this.getCurrentDepth() <= 1 && expression.kind === ts.SyntaxKind.Identifier) {\r\n            const identifierName = (expression as ts.Identifier).text;\r\n            if (identifierName === \"require\") {\r\n                // if we're calling (invoking) require, then it's not part of an import statement\r\n                this.addFailureAtNode(node, Rule.FAILURE_STRING);\r\n            }\r\n        }\r\n\r\n        super.visitCallExpression(node);\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noVarRequiresRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 129,
                  "charOffset": 1558,
                  "charLength": 128,
                  "snippet": {
                    "text": "            ES2015-style \\`import\\`s are part of the JavaScript language specfication and recommended as the path going forward."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/noVoidExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 11,
                  "endLine": 69,
                  "endColumn": 18,
                  "charOffset": 2805,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/numberLiteralFormatRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 137,
                  "charOffset": 1002,
                  "charLength": 136,
                  "snippet": {
                    "text": "        description: \"Checks that decimal literals should begin with '0.' instead of just '.', and should not end with a trailing '0'.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralKeyQuotesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 11,
                  "endLine": 28,
                  "endColumn": 18,
                  "charOffset": 1102,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralKeyQuotesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 154,
                  "endColumn": 2,
                  "charOffset": 4055,
                  "charLength": 3043,
                  "snippet": {
                    "text": "class ObjectLiteralKeyQuotesWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (isObjectLiteralExpression(node)) {\r\n                const propertyNames = Lint.Utils.mapDefined(node.properties, mapPropertyName);\r\n                outer: switch (this.options.option) {\r\n                    case \"always\":\r\n                        for (const name of propertyNames) {\r\n                            if (name.kind !== ts.SyntaxKind.StringLiteral) {\r\n                                this.reportMissing(name);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"as-needed\":\r\n                        for (const name of propertyNames) {\r\n                            if (name.kind === ts.SyntaxKind.StringLiteral && isValidPropertyName(name.text)) {\r\n                                this.reportUnnecessary(name);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"consistent\":\r\n                        if (hasInconsistentQuotes(propertyNames)) {\r\n                            // No fix -- don't know if they would want to add quotes or remove them.\r\n                            this.addFailureAt(node.getStart(this.sourceFile), 1, Rule.INCONSISTENT_PROPERTY);\r\n                        }\r\n                        break;\r\n                    case \"consistent-as-needed\":\r\n                        for (const name of propertyNames) {\r\n                            if (name.kind === ts.SyntaxKind.StringLiteral && !isValidPropertyName(name.text)) {\r\n                                for (const propertyName of propertyNames) {\r\n                                    if (propertyName.kind !== ts.SyntaxKind.StringLiteral) {\r\n                                        this.reportMissing(propertyName);\r\n                                    }\r\n                                }\r\n                                break outer;\r\n                            }\r\n                        }\r\n                        for (const name of propertyNames) {\r\n                            if (name.kind === ts.SyntaxKind.StringLiteral) {\r\n                                this.reportUnnecessary(name);\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private reportMissing(node: ts.NumericLiteral | ts.Identifier) {\r\n        const start = node.getStart(this.sourceFile);\r\n        this.addFailure(\r\n            start,\r\n            node.end,\r\n            Rule.UNQUOTED_PROPERTY(node.text),\r\n            Lint.Replacement.replaceFromTo(start, node.end, `\"${node.text}\"`),\r\n        );\r\n    }\r\n\r\n    private reportUnnecessary(node: ts.StringLiteral) {\r\n        this.addFailureAtNode(node, Rule.UNNEEDED_QUOTES(node.text), Lint.Replacement.replaceNode(node, node.text, this.sourceFile));\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralKeyQuotesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 126,
                  "charOffset": 963,
                  "charLength": 125,
                  "snippet": {
                    "text": "type Option = typeof OPTION_ALWAYS | typeof OPTION_AS_NEEDED | typeof OPTION_CONSISTENT | typeof OPTION_CONSISTENT_AS_NEEDED;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralKeyQuotesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 130,
                  "charOffset": 2400,
                  "charLength": 129,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_AS_NEEDED}\"\\`: Only property names which require quotes may be quoted (e.g. those with spaces in them)."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralKeyQuotesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 140,
                  "charOffset": 2630,
                  "charLength": 139,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_CONSISTENT_AS_NEEDED}\"\\`: If any property name requires quotes, then all properties must be quoted. Otherwise, no"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralKeyQuotesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 128,
                  "charOffset": 3395,
                  "charLength": 127,
                  "snippet": {
                    "text": "    public static INCONSISTENT_PROPERTY = \"All property names in this object literal must be consistently quoted or unquoted.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralKeyQuotesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 134,
                  "charOffset": 6955,
                  "charLength": 133,
                  "snippet": {
                    "text": "        this.addFailureAtNode(node, Rule.UNNEEDED_QUOTES(node.text), Lint.Replacement.replaceNode(node, node.text, this.sourceFile));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralKeyQuotesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 1,
                  "endLine": 156,
                  "endColumn": 132,
                  "charOffset": 7102,
                  "charLength": 131,
                  "snippet": {
                    "text": "function mapPropertyName(property: ts.ObjectLiteralElementLike): ts.StringLiteral | ts.NumericLiteral | ts.Identifier | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 1,
                  "endLine": 121,
                  "endColumn": 138,
                  "charOffset": 4764,
                  "charLength": 137,
                  "snippet": {
                    "text": "function handleLonghandMethod(name: ts.PropertyName, initializer: ts.FunctionExpression, sourceFile: ts.SourceFile): [string, Lint.Fix] {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralShorthandRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 123,
                  "endColumn": 129,
                  "charOffset": 4953,
                  "charLength": 128,
                  "snippet": {
                    "text": "    let fix: Lint.Fix = Lint.Replacement.deleteFromTo(name.end, getChildOfKind(initializer, ts.SyntaxKind.OpenParenToken)!.pos);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralSortKeysRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 11,
                  "endLine": 28,
                  "endColumn": 18,
                  "charOffset": 1102,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralSortKeysRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 132,
                  "charOffset": 642,
                  "charLength": 131,
                  "snippet": {
                    "text": "import { isInterfaceDeclaration, isObjectLiteralExpression, isSameLine, isTypeAliasDeclaration, isTypeLiteralNode } from \"tsutils\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralSortKeysRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 139,
                  "charOffset": 2070,
                  "charLength": 138,
                  "snippet": {
                    "text": "            * \"${OPTION_MATCH_DECLARATION_ORDER}\" will prefer to use the key ordering of the contextual type of the object literal, as in:"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralSortKeysRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 1,
                  "endLine": 136,
                  "endColumn": 136,
                  "charOffset": 5475,
                  "charLength": 135,
                  "snippet": {
                    "text": "                && type.members.every((m) => m.kind === ts.SyntaxKind.PropertySignature || m.kind === ts.SyntaxKind.MethodSignature)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralSortKeysRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 132,
                  "charOffset": 5612,
                  "charLength": 131,
                  "snippet": {
                    "text": "                checkMatchesDeclarationOrder(node, type, type.members as ReadonlyArray<ts.PropertySignature | ts.MethodSignature>);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/objectLiteralSortKeysRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 162,
                  "endColumn": 126,
                  "charOffset": 6760,
                  "charLength": 125,
                  "snippet": {
                    "text": "                                ctx.addFailureAtNode(property.name, Rule.FAILURE_STRING_SHORTHAND_FIRST(property.name.text));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/oneLineRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 11,
                  "endLine": 29,
                  "endColumn": 18,
                  "charOffset": 1025,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/oneLineRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 1,
                  "endLine": 165,
                  "endColumn": 2,
                  "charOffset": 3220,
                  "charLength": 4730,
                  "snippet": {
                    "text": "class OneLineWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            switch (node.kind) {\r\n                case ts.SyntaxKind.Block:\r\n                    if (!isBlockLike(node.parent!)\r\n                        || node.parent!.kind === ts.SyntaxKind.CaseClause && (node.parent as ts.CaseClause).statements.length === 1) {\r\n                        this.check({pos: node.pos, end: (node as ts.Block).statements.pos});\r\n                    }\r\n                    break;\r\n                case ts.SyntaxKind.CaseBlock:\r\n                    this.check({pos: node.pos, end: (node as ts.CaseBlock).clauses.pos});\r\n                    break;\r\n                case ts.SyntaxKind.ModuleBlock:\r\n                    this.check({pos: node.pos, end: (node as ts.ModuleBlock).statements.pos});\r\n                    break;\r\n                case ts.SyntaxKind.EnumDeclaration:\r\n                    this.check({pos: (node as ts.EnumDeclaration).name.end, end: (node as ts.EnumDeclaration).members.pos});\r\n                    break;\r\n                case ts.SyntaxKind.InterfaceDeclaration:\r\n                case ts.SyntaxKind.ClassDeclaration:\r\n                case ts.SyntaxKind.ClassExpression: {\r\n                    const openBrace = getChildOfKind(node, ts.SyntaxKind.OpenBraceToken, sourceFile);\r\n                    if (openBrace !== undefined) {\r\n                        this.check(openBrace);\r\n                    }\r\n                    break;\r\n                }\r\n                case ts.SyntaxKind.IfStatement: {\r\n                    const { thenStatement, elseStatement } = node as ts.IfStatement;\r\n                    if (elseStatement !== undefined && thenStatement.kind === ts.SyntaxKind.Block) {\r\n                        this.check({pos: thenStatement.end, end: elseStatement.pos}, \"else\");\r\n                    }\r\n                    break;\r\n                }\r\n                case ts.SyntaxKind.TryStatement: {\r\n                    const { finallyBlock, catchClause, tryBlock } = node as ts.TryStatement;\r\n                    if (catchClause !== undefined) {\r\n                        this.check(catchClause.getChildAt(0, sourceFile), \"catch\");\r\n                        if (finallyBlock !== undefined) {\r\n                            this.check({pos: catchClause.end, end: finallyBlock.pos}, \"finally\");\r\n                        }\r\n                    } else if (finallyBlock !== undefined) {\r\n                        this.check({pos: tryBlock.end, end: finallyBlock.pos}, \"finally\");\r\n                    }\r\n                    break;\r\n                }\r\n                case ts.SyntaxKind.BinaryExpression: {\r\n                    const { operatorToken, right } = node as ts.BinaryExpression;\r\n                    if (operatorToken.kind === ts.SyntaxKind.EqualsToken && isObjectLiteralExpression(right)) {\r\n                        this.check({pos: right.pos, end: right.properties.pos});\r\n                    }\r\n                    break;\r\n                }\r\n                case ts.SyntaxKind.VariableDeclaration: {\r\n                    const { initializer } = node as ts.VariableDeclaration;\r\n                    if (initializer !== undefined && isObjectLiteralExpression(initializer)) {\r\n                        this.check({pos: initializer.pos, end: initializer.properties.pos});\r\n                    }\r\n                    break;\r\n                }\r\n                case ts.SyntaxKind.TypeAliasDeclaration: {\r\n                    const { type } = node as ts.TypeAliasDeclaration;\r\n                    if (type.kind === ts.SyntaxKind.MappedType || type.kind === ts.SyntaxKind.TypeLiteral) {\r\n                        this.check(type.getChildAt(0, sourceFile));\r\n                    }\r\n                }\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private check(range: ts.TextRange, kind?: \"catch\" | \"else\" | \"finally\") {\r\n        const tokenStart = range.end - (kind === undefined ? 1 : kind.length);\r\n        if (this.options[kind === undefined ? \"brace\" : kind] && !isSameLine(this.sourceFile, range.pos, tokenStart)) {\r\n            this.addFailure(\r\n                tokenStart,\r\n                range.end,\r\n                `misplaced ${kind === undefined ? \"opening brace\" : `'${kind}'`}`,\r\n                Lint.Replacement.replaceFromTo(range.pos, tokenStart, this.options.whitespace ? \" \" : \"\"),\r\n            );\r\n        } else if (this.options.whitespace && range.pos === tokenStart) {\r\n            this.addFailure(tokenStart, range.end, Rule.WHITESPACE_FAILURE_STRING, Lint.Replacement.appendText(range.pos, \" \"));\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/oneLineRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 135,
                  "charOffset": 3502,
                  "charLength": 134,
                  "snippet": {
                    "text": "                        || node.parent!.kind === ts.SyntaxKind.CaseClause && (node.parent as ts.CaseClause).statements.length === 1) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/oneLineRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 125,
                  "charOffset": 4175,
                  "charLength": 124,
                  "snippet": {
                    "text": "                    this.check({pos: (node as ts.EnumDeclaration).name.end, end: (node as ts.EnumDeclaration).members.pos});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/oneLineRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 162,
                  "endColumn": 129,
                  "charOffset": 7801,
                  "charLength": 128,
                  "snippet": {
                    "text": "            this.addFailure(tokenStart, range.end, Rule.WHITESPACE_FAILURE_STRING, Lint.Replacement.appendText(range.pos, \" \"));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/oneVariablePerDeclarationRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 135,
                  "charOffset": 2052,
                  "charLength": 134,
                  "snippet": {
                    "text": "        return this.applyWithFunction(sourceFile, walk, { ignoreForLoop: this.ruleArguments.indexOf(OPTION_IGNORE_FOR_LOOP) !== -1 });"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/onlyArrowFunctionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 11,
                  "endLine": 62,
                  "endColumn": 18,
                  "charOffset": 2459,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/onlyArrowFunctionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 131,
                  "charOffset": 1230,
                  "charLength": 130,
                  "snippet": {
                    "text": "        rationale: \"Traditional functions don't bind lexical scope, which can lead to unexpected behavior when accessing 'this'.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/onlyArrowFunctionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 123,
                  "charOffset": 1558,
                  "charLength": 122,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_ALLOW_NAMED_FUNCTIONS}\"\\` allows the expression \\`function foo() {}\\` but not \\`function() {}\\`."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/onlyArrowFunctionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 139,
                  "charOffset": 3499,
                  "charLength": 138,
                  "snippet": {
                    "text": "                    ctx.addFailureAtNode(utils.getChildOfKind(node, ts.SyntaxKind.FunctionKeyword, ctx.sourceFile)!, Rule.FAILURE_STRING);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/onlyArrowFunctionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 123,
                  "charOffset": 4155,
                  "charLength": 122,
                  "snippet": {
                    "text": "    return node.kind === ts.SyntaxKind.ThisKeyword || !utils.hasOwnThisReference(node) && ts.forEachChild(node, usesThis);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/orderedImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 11,
                  "endLine": 153,
                  "endColumn": 18,
                  "charOffset": 6461,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/orderedImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 11,
                  "endLine": 160,
                  "endColumn": 22,
                  "charOffset": 6640,
                  "charLength": 11,
                  "snippet": {
                    "text": "JsonOptions"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/orderedImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 1,
                  "endLine": 377,
                  "endColumn": 2,
                  "charOffset": 7439,
                  "charLength": 8284,
                  "snippet": {
                    "text": "class Walker extends Lint.AbstractWalker<Options> {\r\n    private readonly importsBlocks = [new ImportsBlock()];\r\n    // keep a reference to the last Fix object so when the entire block is replaced, the replacement can be added\r\n    private lastFix: Lint.Replacement[] | undefined;\r\n    private nextType = ImportType.LIBRARY_IMPORT;\r\n\r\n    private get currentImportsBlock(): ImportsBlock {\r\n        return this.importsBlocks[this.importsBlocks.length - 1];\r\n    }\r\n\r\n    public walk(sourceFile: ts.SourceFile): void {\r\n        for (const statement of sourceFile.statements) {\r\n            this.checkStatement(statement);\r\n        }\r\n        this.endBlock();\r\n        if (this.options.groupedImports) {\r\n            this.checkBlocksGrouping();\r\n        }\r\n    }\r\n\r\n    private checkStatement(statement: ts.Statement): void {\r\n        if (!(isImportDeclaration(statement) || isImportEqualsDeclaration(statement)) ||\r\n            /\\r?\\n\\r?\\n/.test(this.sourceFile.text.slice(statement.getFullStart(), statement.getStart(this.sourceFile)))) {\r\n            this.endBlock();\r\n        }\r\n\r\n        if (isImportDeclaration(statement)) {\r\n            this.checkImportDeclaration(statement);\r\n        } else if (isImportEqualsDeclaration(statement)) {\r\n            this.checkImportEqualsDeclaration(statement);\r\n        } else if (isModuleDeclaration(statement)) {\r\n            const body = moduleDeclarationBody(statement);\r\n            if (body !== undefined) {\r\n                for (const subStatement of body.statements) {\r\n                    this.checkStatement(subStatement);\r\n                }\r\n                this.endBlock();\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkImportDeclaration(node: ts.ImportDeclaration) {\r\n        if (!isStringLiteral(node.moduleSpecifier)) {\r\n            // Ignore grammar error\r\n            return;\r\n        }\r\n\r\n        const source = this.options.importSourcesOrderTransform(removeQuotes(node.moduleSpecifier.text));\r\n        this.checkSource(source, node);\r\n\r\n        const { importClause } = node;\r\n        if (importClause !== undefined && importClause.namedBindings !== undefined && isNamedImports(importClause.namedBindings)) {\r\n            this.checkNamedImports(importClause.namedBindings);\r\n        }\r\n    }\r\n\r\n    private checkImportEqualsDeclaration(node: ts.ImportEqualsDeclaration) {\r\n        // only allowed `import x = require('y');`\r\n\r\n        const { moduleReference } = node;\r\n\r\n        if (!isExternalModuleReference(moduleReference)) {\r\n            return;\r\n        }\r\n\r\n        const { expression } = moduleReference;\r\n\r\n        if (expression === undefined || !isStringLiteral(expression)) {\r\n            return;\r\n        }\r\n\r\n        const source = this.options.importSourcesOrderTransform(removeQuotes(expression.text));\r\n        this.checkSource(source, node);\r\n    }\r\n\r\n    private checkSource(source: string, node: ImportDeclaration[\"node\"]) {\r\n        const currentSource = this.options.moduleSourcePath(source);\r\n        const previousSource = this.currentImportsBlock.getLastImportSource();\r\n        this.currentImportsBlock.addImportDeclaration(this.sourceFile, node, currentSource);\r\n\r\n        if (previousSource !== null && compare(currentSource, previousSource) === -1) {\r\n            this.lastFix = [];\r\n            this.addFailureAtNode(node, Rule.IMPORT_SOURCES_UNORDERED, this.lastFix);\r\n        }\r\n    }\r\n\r\n    private endBlock(): void {\r\n        if (this.lastFix !== undefined) {\r\n            const replacement = this.currentImportsBlock.getReplacement();\r\n            if (replacement !== undefined) {\r\n                this.lastFix.push(replacement);\r\n            }\r\n            this.lastFix = undefined;\r\n        }\r\n        this.importsBlocks.push(new ImportsBlock());\r\n    }\r\n\r\n    private checkNamedImports(node: ts.NamedImports): void {\r\n        const imports = node.elements;\r\n\r\n        const pair = findUnsortedPair(imports, this.options.namedImportsOrderTransform);\r\n        if (pair !== undefined) {\r\n            const [a, b] = pair;\r\n            const sortedDeclarations = sortByKey(imports, (x) =>\r\n                this.options.namedImportsOrderTransform(x.getText())).map((x) => x.getText());\r\n            // replace in reverse order to preserve earlier offsets\r\n            for (let i = imports.length - 1; i >= 0; i--) {\r\n                const start = imports[i].getStart();\r\n                const length = imports[i].getText().length;\r\n\r\n                // replace the named imports one at a time to preserve whitespace\r\n                this.currentImportsBlock.replaceNamedImports(start, length, sortedDeclarations[i]);\r\n            }\r\n\r\n            this.lastFix = [];\r\n            this.addFailure(a.getStart(), b.getEnd(), Rule.NAMED_IMPORTS_UNORDERED, this.lastFix);\r\n        }\r\n    }\r\n\r\n    private checkBlocksGrouping(): void {\r\n        this.importsBlocks.some(this.checkBlockGroups, this);\r\n    }\r\n\r\n    private checkBlockGroups(importsBlock: ImportsBlock): boolean {\r\n        const oddImportDeclaration = this.getOddImportDeclaration(importsBlock);\r\n        if (oddImportDeclaration !== undefined) {\r\n            this.addFailureAtNode(oddImportDeclaration.node, Rule.IMPORT_SOURCES_NOT_GROUPED, this.getReplacements());\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getOddImportDeclaration(importsBlock: ImportsBlock): ImportDeclaration | undefined {\r\n        const importDeclarations = importsBlock.getImportDeclarations();\r\n        if (importDeclarations.length === 0) {\r\n            return undefined;\r\n        }\r\n        const type = importDeclarations[0].type;\r\n        if (type < this.nextType) {\r\n            return importDeclarations[0];\r\n        } else {\r\n            this.nextType = type;\r\n            return importDeclarations.find((importDeclaration) => importDeclaration.type !== type);\r\n        }\r\n    }\r\n\r\n    private getReplacements(): Lint.Replacement[] {\r\n        const importDeclarationsList = this.importsBlocks\r\n            .map((block) => block.getImportDeclarations())\r\n            .filter((imports) => imports.length > 0);\r\n        const allImportDeclarations = ([] as ImportDeclaration[]).concat(...importDeclarationsList);\r\n        const replacements = this.getReplacementsForExistingImports(importDeclarationsList);\r\n        const startOffset = allImportDeclarations.length === 0 ? 0 : allImportDeclarations[0].nodeStartOffset;\r\n        replacements.push(Lint.Replacement.appendText(startOffset, this.getGroupedImports(allImportDeclarations)));\r\n        return replacements;\r\n    }\r\n\r\n    private getReplacementsForExistingImports(importDeclarationsList: ImportDeclaration[][]): Lint.Replacement[] {\r\n        return importDeclarationsList.map((items, index) => {\r\n            let start = items[0].nodeStartOffset;\r\n            if (index > 0) {\r\n                const prevItems = importDeclarationsList[index - 1];\r\n                const last = prevItems[prevItems.length - 1];\r\n                if (/[\\r\\n]+/.test(this.sourceFile.text.slice(last.nodeEndOffset, start))) {\r\n                    // remove whitespace between blocks\r\n                    start = last.nodeEndOffset;\r\n                }\r\n            }\r\n            return Lint.Replacement.deleteFromTo(start, items[items.length - 1].nodeEndOffset);\r\n        });\r\n    }\r\n\r\n    private getGroupedImports(importDeclarations: ImportDeclaration[]): string {\r\n        return [ImportType.LIBRARY_IMPORT, ImportType.PARENT_DIRECTORY_IMPORT, ImportType.CURRENT_DIRECTORY_IMPORT]\r\n            .map((type) => {\r\n                const imports = importDeclarations.filter((importDeclaration) => importDeclaration.type === type);\r\n                return getSortedImportDeclarationsAsText(imports);\r\n            })\r\n            .filter((text) => text.length > 0)\r\n            .join(this.getEolChar());\r\n    }\r\n\r\n    private getEolChar(): string {\r\n        const lineEnd = this.sourceFile.getLineEndOfPosition(0);\r\n        let newLine;\r\n        if (lineEnd > 0) {\r\n            if (lineEnd > 1 && this.sourceFile.text[lineEnd - 1] === \"\\r\") {\r\n                newLine = \"\\r\\n\";\r\n            } else if (this.sourceFile.text[lineEnd] === \"\\n\") {\r\n                newLine = \"\\n\";\r\n            }\r\n        }\r\n        return newLine === undefined ? ts.sys.newLine : newLine;\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/orderedImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 1,
                  "endLine": 480,
                  "endColumn": 2,
                  "charOffset": 16146,
                  "charLength": 3642,
                  "snippet": {
                    "text": "class ImportsBlock {\r\n    private importDeclarations: ImportDeclaration[] = [];\r\n\r\n    public addImportDeclaration(sourceFile: ts.SourceFile, node: ImportDeclaration[\"node\"], sourcePath: string) {\r\n        const start = this.getStartOffset(node);\r\n        const end = this.getEndOffset(sourceFile, node);\r\n        const text = sourceFile.text.substring(start, end);\r\n        const type = this.getImportType(sourcePath);\r\n\r\n        if (start > node.getStart() || end === 0) {\r\n            // skip block if any statements don't end with a newline to simplify implementation\r\n            this.importDeclarations = [];\r\n            return;\r\n        }\r\n\r\n        this.importDeclarations.push({\r\n            node,\r\n            nodeEndOffset: end,\r\n            nodeStartOffset: start,\r\n            sourcePath,\r\n            text,\r\n            type,\r\n        });\r\n    }\r\n\r\n    public getImportDeclarations(): ImportDeclaration[] {\r\n        return this.importDeclarations;\r\n    }\r\n\r\n    // replaces the named imports on the most recent import declaration\r\n    public replaceNamedImports(fileOffset: number, length: number, replacement: string) {\r\n        const importDeclaration = this.getLastImportDeclaration();\r\n        if (importDeclaration === undefined) {\r\n            // nothing to replace. This can happen if the block is skipped\r\n            return;\r\n        }\r\n\r\n        const start = fileOffset - importDeclaration.nodeStartOffset;\r\n        if (start < 0 || start + length > importDeclaration.node.getEnd()) {\r\n            throw new Error(\"Unexpected named import position\");\r\n        }\r\n\r\n        const initialText = importDeclaration.text;\r\n        importDeclaration.text = initialText.substring(0, start) + replacement + initialText.substring(start + length);\r\n    }\r\n\r\n    public getLastImportSource() {\r\n        if (this.importDeclarations.length === 0) {\r\n            return null;\r\n        }\r\n        return this.getLastImportDeclaration()!.sourcePath;\r\n    }\r\n\r\n    // creates a Lint.Replacement object with ordering fixes for the entire block\r\n    public getReplacement() {\r\n        if (this.importDeclarations.length === 0) {\r\n            return undefined;\r\n        }\r\n        const fixedText = getSortedImportDeclarationsAsText(this.importDeclarations);\r\n        const start = this.importDeclarations[0].nodeStartOffset;\r\n        const end = this.getLastImportDeclaration()!.nodeEndOffset;\r\n        return new Lint.Replacement(start, end - start, fixedText);\r\n    }\r\n\r\n    // gets the offset immediately after the end of the previous declaration to include comment above\r\n    private getStartOffset(node: ImportDeclaration[\"node\"]) {\r\n        if (this.importDeclarations.length === 0) {\r\n            return node.getStart();\r\n        }\r\n        return this.getLastImportDeclaration()!.nodeEndOffset;\r\n    }\r\n\r\n    // gets the offset of the end of the import's line, including newline, to include comment to the right\r\n    private getEndOffset(sourceFile: ts.SourceFile, node: ImportDeclaration[\"node\"]) {\r\n        return sourceFile.text.indexOf(\"\\n\", node.end) + 1;\r\n    }\r\n\r\n    private getLastImportDeclaration(): ImportDeclaration | undefined {\r\n        return this.importDeclarations[this.importDeclarations.length - 1];\r\n    }\r\n\r\n    private getImportType(sourcePath: string): ImportType {\r\n        if (sourcePath.charAt(0) === \".\") {\r\n            if (sourcePath.charAt(1) === \".\") {\r\n                return ImportType.PARENT_DIRECTORY_IMPORT;\r\n            } else {\r\n                return ImportType.CURRENT_DIRECTORY_IMPORT;\r\n            }\r\n        } else {\r\n            return ImportType.LIBRARY_IMPORT;\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/orderedImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 1,
                  "endLine": 205,
                  "endColumn": 124,
                  "charOffset": 8353,
                  "charLength": 123,
                  "snippet": {
                    "text": "            /\\r?\\n\\r?\\n/.test(this.sourceFile.text.slice(statement.getFullStart(), statement.getStart(this.sourceFile)))) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/orderedImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 1,
                  "endLine": 234,
                  "endColumn": 132,
                  "charOffset": 9482,
                  "charLength": 131,
                  "snippet": {
                    "text": "        if (importClause !== undefined && importClause.namedBindings !== undefined && isNamedImports(importClause.namedBindings)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/orderedImportsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 1,
                  "endLine": 496,
                  "endColumn": 122,
                  "charOffset": 20288,
                  "charLength": 121,
                  "snippet": {
                    "text": "function findUnsortedPair(xs: ReadonlyArray<ts.Node>, transform: (x: string) => string): [ts.Node, ts.Node] | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConditionalExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 11,
                  "endLine": 25,
                  "endColumn": 18,
                  "charOffset": 881,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConditionalExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 131,
                  "charOffset": 1173,
                  "charLength": 130,
                  "snippet": {
                    "text": "            Recommends to use a conditional expression instead of assigning to the same thing in each branch of an if statement.`,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConditionalExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 127,
                  "charOffset": 1439,
                  "charLength": 126,
                  "snippet": {
                    "text": "        optionsDescription: `If \\`${OPTION_CHECK_ELSE_IF}\\` is specified, the rule also checks nested if-else-if statements.`,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConditionalExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 1,
                  "endLine": 89,
                  "endColumn": 131,
                  "charOffset": 3518,
                  "charLength": 130,
                  "snippet": {
                    "text": " * @param inElse `undefined` when this is the top level if statement, `false` when inside the then branch, `true` when inside else"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConditionalExpressionRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 1,
                  "endLine": 113,
                  "endColumn": 135,
                  "charOffset": 4749,
                  "charLength": 134,
                  "snippet": {
                    "text": "        return kind === ts.SyntaxKind.EqualsToken && isSameLine(sourceFile, right.getStart(sourceFile), right.end) ? left : undefined;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 845,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 11,
                  "endLine": 96,
                  "endColumn": 23,
                  "charOffset": 3924,
                  "charLength": 12,
                  "snippet": {
                    "text": "VariableInfo"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 11,
                  "endLine": 103,
                  "endColumn": 30,
                  "charOffset": 4107,
                  "charLength": 19,
                  "snippet": {
                    "text": "DeclarationListInfo"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 11,
                  "endLine": 112,
                  "endColumn": 38,
                  "charOffset": 4336,
                  "charLength": 27,
                  "snippet": {
                    "text": "UnchangeableDeclarationInfo"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 11,
                  "endLine": 119,
                  "endColumn": 28,
                  "charOffset": 4512,
                  "charLength": 17,
                  "snippet": {
                    "text": "DestructuringInfo"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 2,
                  "charOffset": 2976,
                  "charLength": 934,
                  "snippet": {
                    "text": "class Scope {\r\n    public functionScope: Scope;\r\n    public variables = new Map<string, VariableInfo>();\r\n    public reassigned = new Set<string>();\r\n    constructor(functionScope?: Scope) {\r\n        // if no functionScope is provided we are in the process of creating a new function scope, which for consistency links to itself\r\n        this.functionScope = functionScope === undefined ? this : functionScope;\r\n    }\r\n\r\n    public addVariable(identifier: ts.Identifier, declarationInfo: DeclarationInfo, destructuringInfo?: DestructuringInfo) {\r\n        // block scoped variables go to the block scope, function scoped variables to the containing function scope\r\n        const scope = declarationInfo.isBlockScoped ? this : this.functionScope;\r\n        scope.variables.set(identifier.text, {\r\n            declarationInfo,\r\n            destructuringInfo,\r\n            identifier,\r\n            reassigned: false,\r\n        });\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 340,
                  "endColumn": 2,
                  "charOffset": 4572,
                  "charLength": 10852,
                  "snippet": {
                    "text": "class PreferConstWalker extends Lint.AbstractWalker<Options> {\r\n    private scope: Scope = new Scope();\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        // don't check anything on declaration files\r\n        if (sourceFile.isDeclarationFile) {\r\n            return;\r\n        }\r\n\r\n        this.scope = new Scope();\r\n        const cb = (node: ts.Node): void => {\r\n            const savedScope = this.scope;\r\n            const boundary = utils.isScopeBoundary(node);\r\n            if (boundary !== utils.ScopeBoundary.None) {\r\n                if (boundary === utils.ScopeBoundary.Function) {\r\n                    if (node.kind === ts.SyntaxKind.ModuleDeclaration && utils.hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword)) {\r\n                        // don't check ambient namespaces\r\n                        return;\r\n                    }\r\n                    this.scope = new Scope();\r\n                    if (utils.isFunctionDeclaration(node) ||\r\n                        utils.isMethodDeclaration(node) ||\r\n                        utils.isFunctionExpression(node) ||\r\n                        utils.isArrowFunction(node) ||\r\n                        utils.isConstructorDeclaration(node)) {\r\n                        // special handling for function parameters\r\n                        // each parameter initializer can only reassign preceding parameters of variables of the containing scope\r\n                        if (node.body !== undefined) {\r\n                            for (const param of node.parameters) {\r\n                                cb(param);\r\n                                this.settle(savedScope);\r\n                            }\r\n                            cb(node.body);\r\n                            this.onScopeEnd(savedScope);\r\n                        }\r\n                        this.scope = savedScope;\r\n                        return;\r\n                    }\r\n                } else {\r\n                    this.scope = new Scope(this.scope.functionScope);\r\n                    if ((utils.isForInStatement(node) || utils.isForOfStatement(node)) &&\r\n                        node.initializer.kind !== ts.SyntaxKind.VariableDeclarationList) {\r\n                        this.handleExpression(node.initializer);\r\n                    }\r\n                }\r\n            }\r\n            if (node.kind === ts.SyntaxKind.VariableDeclarationList) {\r\n                this.handleVariableDeclaration(node as ts.VariableDeclarationList);\r\n            } else if (node.kind === ts.SyntaxKind.CatchClause) {\r\n                if ((node as ts.CatchClause).variableDeclaration !== undefined) {\r\n                    this.handleBindingName((node as ts.CatchClause).variableDeclaration!.name, {\r\n                        canBeConst: false,\r\n                        isBlockScoped: true,\r\n                    });\r\n                }\r\n            } else if (node.kind === ts.SyntaxKind.Parameter) {\r\n                if (node.parent!.kind !== ts.SyntaxKind.IndexSignature) {\r\n                    this.handleBindingName((node as ts.ParameterDeclaration).name, {\r\n                        canBeConst: false,\r\n                        isBlockScoped: true,\r\n                    });\r\n                }\r\n            } else if (utils.isPostfixUnaryExpression(node) ||\r\n                       utils.isPrefixUnaryExpression(node) &&\r\n                       (node.operator === ts.SyntaxKind.PlusPlusToken || node.operator === ts.SyntaxKind.MinusMinusToken)) {\r\n                if (utils.isIdentifier(node.operand)) {\r\n                    this.scope.reassigned.add(node.operand.text);\r\n                }\r\n            } else if (utils.isBinaryExpression(node) && utils.isAssignmentKind(node.operatorToken.kind)) {\r\n                this.handleExpression(node.left);\r\n            }\r\n\r\n            if (boundary !== utils.ScopeBoundary.None) {\r\n                ts.forEachChild(node, cb);\r\n                this.onScopeEnd(savedScope);\r\n                this.scope = savedScope;\r\n            } else {\r\n                return ts.forEachChild(node, cb);\r\n            }\r\n        };\r\n\r\n        if (ts.isExternalModule(sourceFile)) {\r\n            ts.forEachChild(sourceFile, cb);\r\n            this.onScopeEnd();\r\n        } else {\r\n            return ts.forEachChild(sourceFile, cb);\r\n        }\r\n    }\r\n\r\n    private handleExpression(node: ts.Expression): void {\r\n        switch (node.kind) {\r\n            case ts.SyntaxKind.Identifier:\r\n                this.scope.reassigned.add((node as ts.Identifier).text);\r\n                break;\r\n            case ts.SyntaxKind.ParenthesizedExpression:\r\n                this.handleExpression((node as ts.ParenthesizedExpression).expression);\r\n                break;\r\n            case ts.SyntaxKind.ArrayLiteralExpression:\r\n                for (const element of (node as ts.ArrayLiteralExpression).elements) {\r\n                    if (element.kind === ts.SyntaxKind.SpreadElement) {\r\n                        this.handleExpression((element as ts.SpreadElement).expression);\r\n                    } else {\r\n                        this.handleExpression(element);\r\n                    }\r\n                }\r\n                break;\r\n            case ts.SyntaxKind.ObjectLiteralExpression:\r\n                for (const property of (node as ts.ObjectLiteralExpression).properties) {\r\n                    switch (property.kind) {\r\n                        case ts.SyntaxKind.ShorthandPropertyAssignment:\r\n                            this.scope.reassigned.add(property.name.text);\r\n                            break;\r\n                        case ts.SyntaxKind.SpreadAssignment:\r\n                            if (property.name !== undefined) {\r\n                                this.scope.reassigned.add((property.name as ts.Identifier).text);\r\n                            } else {\r\n                                // handle `...(variable)`\r\n                                this.handleExpression(property.expression);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            this.handleExpression((property as ts.PropertyAssignment).initializer);\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    private handleBindingName(name: ts.BindingName, declarationInfo: DeclarationInfo) {\r\n        if (name.kind === ts.SyntaxKind.Identifier) {\r\n            this.scope.addVariable(name, declarationInfo);\r\n        } else {\r\n            const destructuringInfo: DestructuringInfo = {\r\n                reassignedSiblings: false,\r\n            };\r\n            utils.forEachDestructuringIdentifier(\r\n                name,\r\n                (declaration) => this.scope.addVariable(declaration.name, declarationInfo, destructuringInfo),\r\n            );\r\n        }\r\n    }\r\n\r\n    private handleVariableDeclaration(declarationList: ts.VariableDeclarationList) {\r\n        let declarationInfo: DeclarationInfo;\r\n        const kind = utils.getVariableDeclarationKind(declarationList);\r\n        if (kind === utils.VariableDeclarationKind.Const ||\r\n            utils.hasModifier(declarationList.parent!.modifiers, ts.SyntaxKind.ExportKeyword, ts.SyntaxKind.DeclareKeyword)) {\r\n\r\n            declarationInfo = {\r\n                canBeConst: false,\r\n                isBlockScoped: kind !== utils.VariableDeclarationKind.Var,\r\n            };\r\n        } else {\r\n            declarationInfo = {\r\n                allInitialized: declarationList.parent!.kind === ts.SyntaxKind.ForOfStatement ||\r\n                                declarationList.parent!.kind === ts.SyntaxKind.ForInStatement ||\r\n                                declarationList.declarations.every((declaration) => declaration.initializer !== undefined),\r\n                canBeConst: true,\r\n                declarationList,\r\n                isBlockScoped: kind === utils.VariableDeclarationKind.Let,\r\n                isForLoop: declarationList.parent!.kind === ts.SyntaxKind.ForStatement ||\r\n                           declarationList.parent!.kind === ts.SyntaxKind.ForOfStatement,\r\n                reassignedSiblings: false,\r\n            };\r\n        }\r\n\r\n        for (const declaration of declarationList.declarations) {\r\n            this.handleBindingName(declaration.name, declarationInfo);\r\n        }\r\n    }\r\n\r\n    private settle(parent?: Scope) {\r\n        const {variables, reassigned} = this.scope;\r\n        reassigned.forEach((name) => {\r\n            const variableInfo = variables.get(name);\r\n            if (variableInfo !== undefined) {\r\n                if (variableInfo.declarationInfo.canBeConst) {\r\n                    variableInfo.reassigned = true;\r\n                    variableInfo.declarationInfo.reassignedSiblings = true;\r\n                    if (variableInfo.destructuringInfo !== undefined) {\r\n                        variableInfo.destructuringInfo.reassignedSiblings = true;\r\n                    }\r\n                }\r\n            } else if (parent !== undefined) {\r\n                // if the reassigned variable was not declared in this scope we defer to the parent scope\r\n                parent.reassigned.add(name);\r\n            }\r\n        });\r\n        reassigned.clear();\r\n    }\r\n\r\n    private onScopeEnd(parent?: Scope) {\r\n        this.settle(parent);\r\n        const appliedFixes = new Set<ts.VariableDeclarationList>();\r\n        this.scope.variables.forEach((info, name) => {\r\n            if (info.declarationInfo.canBeConst &&\r\n                !info.reassigned &&\r\n                // don't add failures for reassigned variables in for loop initializer\r\n                !(info.declarationInfo.reassignedSiblings && info.declarationInfo.isForLoop) &&\r\n                // if {destructuring: \"all\"} is set, only add a failure if all variables in a destructuring assignment can be const\r\n                (!this.options.destructuringAll ||\r\n                 info.destructuringInfo === undefined ||\r\n                 !info.destructuringInfo.reassignedSiblings)) {\r\n\r\n                let fix: Lint.Fix | undefined;\r\n                // only apply fixes if the VariableDeclarationList has no reassigned variables\r\n                // and the variable is block scoped aka `let` and initialized\r\n                if (info.declarationInfo.allInitialized &&\r\n                    !info.declarationInfo.reassignedSiblings &&\r\n                    info.declarationInfo.isBlockScoped &&\r\n                    !appliedFixes.has(info.declarationInfo.declarationList)) {\r\n                    fix = new Lint.Replacement(info.declarationInfo.declarationList.getStart(this.sourceFile), 3, \"const\");\r\n                    // add only one fixer per VariableDeclarationList\r\n                    appliedFixes.add(info.declarationInfo.declarationList);\r\n                }\r\n                this.addFailureAtNode(info.identifier, Rule.FAILURE_STRING_FACTORY(name, info.declarationInfo.isBlockScoped), fix);\r\n            }\r\n        });\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 140,
                  "charOffset": 1527,
                  "charLength": 139,
                  "snippet": {
                    "text": "            * \"${OPTION_DESTRUCTURING_ANY}\" (default) - If any variable in destructuring can be const, this rule warns for those variables."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 123,
                  "charOffset": 2386,
                  "charLength": 122,
                  "snippet": {
                    "text": "        return `Identifier '${identifier}' is never reassigned; use 'const' instead of '${blockScoped ? \"let\" : \"var\"}'.`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 80,
                  "endColumn": 137,
                  "charOffset": 3168,
                  "charLength": 136,
                  "snippet": {
                    "text": "        // if no functionScope is provided we are in the process of creating a new function scope, which for consistency links to itself"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 1,
                  "endLine": 84,
                  "endColumn": 125,
                  "charOffset": 3397,
                  "charLength": 124,
                  "snippet": {
                    "text": "    public addVariable(identifier: ts.Identifier, declarationInfo: DeclarationInfo, destructuringInfo?: DestructuringInfo) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 140,
                  "charOffset": 5165,
                  "charLength": 139,
                  "snippet": {
                    "text": "                    if (node.kind === ts.SyntaxKind.ModuleDeclaration && utils.hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 1,
                  "endLine": 148,
                  "endColumn": 130,
                  "charOffset": 5841,
                  "charLength": 129,
                  "snippet": {
                    "text": "                        // each parameter initializer can only reassign preceding parameters of variables of the containing scope"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 1,
                  "endLine": 186,
                  "endColumn": 125,
                  "charOffset": 7893,
                  "charLength": 124,
                  "snippet": {
                    "text": "                       (node.operator === ts.SyntaxKind.PlusPlusToken || node.operator === ts.SyntaxKind.MinusMinusToken)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 1,
                  "endLine": 267,
                  "endColumn": 127,
                  "charOffset": 11581,
                  "charLength": 126,
                  "snippet": {
                    "text": "            utils.hasModifier(declarationList.parent!.modifiers, ts.SyntaxKind.ExportKeyword, ts.SyntaxKind.DeclareKeyword)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 1,
                  "endLine": 277,
                  "endColumn": 124,
                  "charOffset": 12119,
                  "charLength": 123,
                  "snippet": {
                    "text": "                                declarationList.declarations.every((declaration) => declaration.initializer !== undefined),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 1,
                  "endLine": 320,
                  "endColumn": 132,
                  "charOffset": 14166,
                  "charLength": 131,
                  "snippet": {
                    "text": "                // if {destructuring: \"all\"} is set, only add a failure if all variables in a destructuring assignment can be const"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 1,
                  "endLine": 332,
                  "endColumn": 124,
                  "charOffset": 14963,
                  "charLength": 123,
                  "snippet": {
                    "text": "                    fix = new Lint.Replacement(info.declarationInfo.declarationList.getStart(this.sourceFile), 3, \"const\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferConstRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 1,
                  "endLine": 336,
                  "endColumn": 132,
                  "charOffset": 15255,
                  "charLength": 131,
                  "snippet": {
                    "text": "                this.addFailureAtNode(info.identifier, Rule.FAILURE_STRING_FACTORY(name, info.declarationInfo.isBlockScoped), fix);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferForOfRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 140,
                  "charOffset": 997,
                  "charLength": 139,
                  "snippet": {
                    "text": "        description: \"Recommends a 'for-of' loop over a standard 'for' loop if the index is only used to access the array being iterated.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferForOfRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 123,
                  "charOffset": 2550,
                  "charLength": 122,
                  "snippet": {
                    "text": "            if (location.pos < node.initializer!.end || location.pos >= node.end || // bail out on use outside of for loop"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferForOfRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 1,
                  "endLine": 92,
                  "endColumn": 130,
                  "charOffset": 3708,
                  "charLength": 129,
                  "snippet": {
                    "text": "function getForLoopHeaderInfo(forLoop: ts.ForStatement): { indexVariable: ts.Identifier; arrayExpr: ts.Expression } | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferForOfRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 1,
                  "endLine": 157,
                  "endColumn": 131,
                  "charOffset": 6284,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    return rhsOp.kind === ts.SyntaxKind.PlusToken && (isVar(left) && isOne(right) || isOne(left) && isVar(right));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferFunctionOverMethodRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 923,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferFunctionOverMethodRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 11,
                  "endLine": 107,
                  "endColumn": 19,
                  "charOffset": 4647,
                  "charLength": 8,
                  "snippet": {
                    "text": "ThisUsed"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferFunctionOverMethodRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 105,
                  "endColumn": 2,
                  "charOffset": 2311,
                  "charLength": 2322,
                  "snippet": {
                    "text": "class PreferFunctionOverMethodWalker extends Lint.AbstractWalker<Options> {\r\n    private currentScope?: ThisUsed;\r\n\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            if (isMethodDeclaration(node) && !this.isExempt(node)) {\r\n                // currentScope is always undefined here, so we don't need to save it and just set it to undefined afterwards\r\n                this.currentScope = {\r\n                    isThisUsed: false,\r\n                    name: getPropertyName(node.name),\r\n                };\r\n                ts.forEachChild(node, cb);\r\n                if (!this.currentScope.isThisUsed) {\r\n                    this.addFailureAtNode(node.name, Rule.FAILURE_STRING);\r\n                }\r\n                this.currentScope = undefined;\r\n            } else if (hasOwnThisReference(node)) {\r\n                const scope = this.currentScope;\r\n                this.currentScope = undefined;\r\n                ts.forEachChild(node, cb);\r\n                this.currentScope = scope;\r\n            } else if (this.currentScope !== undefined &&\r\n                       (node.kind === ts.SyntaxKind.ThisKeyword && !isRecursiveCall(node, this.currentScope.name) ||\r\n                        node.kind === ts.SyntaxKind.SuperKeyword)) {\r\n                this.currentScope.isThisUsed = true;\r\n            } else {\r\n                return ts.forEachChild(node, cb);\r\n            }\r\n\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private isExempt(node: ts.MethodDeclaration): boolean {\r\n        // TODO: handle the override keyword once it lands in the language\r\n        return node.body === undefined || // exclude abstract methods and overload signatures\r\n            // exclude object methods\r\n            node.parent!.kind !== ts.SyntaxKind.ClassDeclaration && node.parent!.kind !== ts.SyntaxKind.ClassExpression ||\r\n            hasModifier(node.modifiers, ts.SyntaxKind.StaticKeyword) ||\r\n            this.options.allowProtected && hasModifier(node.modifiers, ts.SyntaxKind.ProtectedKeyword) ||\r\n            this.options.allowPublic && (hasModifier(node.modifiers, ts.SyntaxKind.PublicKeyword) ||\r\n                                         !hasModifier(node.modifiers, ts.SyntaxKind.ProtectedKeyword, ts.SyntaxKind.PrivateKeyword));\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferFunctionOverMethodRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 68,
                  "endColumn": 126,
                  "charOffset": 2591,
                  "charLength": 125,
                  "snippet": {
                    "text": "                // currentScope is always undefined here, so we don't need to save it and just set it to undefined afterwards"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferFunctionOverMethodRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 1,
                  "endLine": 99,
                  "endColumn": 123,
                  "charOffset": 4084,
                  "charLength": 122,
                  "snippet": {
                    "text": "            node.parent!.kind !== ts.SyntaxKind.ClassDeclaration && node.parent!.kind !== ts.SyntaxKind.ClassExpression ||"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferFunctionOverMethodRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 134,
                  "charOffset": 4490,
                  "charLength": 133,
                  "snippet": {
                    "text": "                                         !hasModifier(node.modifiers, ts.SyntaxKind.ProtectedKeyword, ts.SyntaxKind.PrivateKeyword));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "arrow-parens",
          "level": "error",
          "message": {
            "text": "Parentheses are required around the parameters of an arrow function definition"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferMethodSignatureRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 53,
                  "endLine": 49,
                  "endColumn": 55,
                  "charOffset": 1887,
                  "charLength": 2,
                  "snippet": {
                    "text": "tp"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/src/rules/preferMethodSignatureRule.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1887
                      },
                      "insertedContent": {
                        "text": "("
                      }
                    },
                    {
                      "deletedRegion": {
                        "charOffset": 1889
                      },
                      "insertedContent": {
                        "text": ")"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "arrow-parens",
          "level": "error",
          "message": {
            "text": "Parentheses are required around the parameters of an arrow function definition"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferMethodSignatureRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 46,
                  "endLine": 52,
                  "endColumn": 47,
                  "charOffset": 2019,
                  "charLength": 1,
                  "snippet": {
                    "text": "v"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/src/rules/preferMethodSignatureRule.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2019
                      },
                      "insertedContent": {
                        "text": "("
                      }
                    },
                    {
                      "deletedRegion": {
                        "charOffset": 2020
                      },
                      "insertedContent": {
                        "text": ")"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "trailing-comma",
          "level": "error",
          "message": {
            "text": "Missing trailing comma"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferMethodSignatureRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 30,
                  "endLine": 33,
                  "endColumn": 30,
                  "charOffset": 1263,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/src/rules/preferMethodSignatureRule.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1263
                      },
                      "insertedContent": {
                        "text": ","
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "trailing-comma",
          "level": "error",
          "message": {
            "text": "Missing trailing comma"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferMethodSignatureRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 92,
                  "endLine": 74,
                  "endColumn": 92,
                  "charOffset": 2856,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/src/rules/preferMethodSignatureRule.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2856
                      },
                      "insertedContent": {
                        "text": ","
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferObjectSpreadRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 140,
                  "charOffset": 1682,
                  "charLength": 139,
                  "snippet": {
                    "text": "    public static ASSIGNMENT_FAILURE_STRING = \"'Object.assign' returns the first argument. Prefer object spread if you want a new object.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferObjectSpreadRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 123,
                  "charOffset": 3039,
                  "charLength": 122,
                  "snippet": {
                    "text": "            } else if (isExpressionValueUsed(node) && !hasSideEffects(node.arguments[0], SideEffectOptions.Constructor)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferObjectSpreadRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 1,
                  "endLine": 84,
                  "endColumn": 133,
                  "charOffset": 3577,
                  "charLength": 132,
                  "snippet": {
                    "text": "        Lint.Replacement.replaceFromTo(node.getStart(sourceFile), args[0].getStart(sourceFile), `${objectNeedsParens ? \"(\" : \"\"}{`),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferReadonlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 11,
                  "endLine": 28,
                  "endColumn": 18,
                  "charOffset": 975,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferReadonlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 1,
                  "endLine": 300,
                  "endColumn": 2,
                  "charOffset": 7933,
                  "charLength": 3076,
                  "snippet": {
                    "text": "class ClassScope {\r\n    private readonly privateModifiableMembers = new Map<string, ParameterOrPropertyDeclaration>();\r\n    private readonly privateModifiableStatics = new Map<string, ParameterOrPropertyDeclaration>();\r\n    private readonly memberVariableModifications = new Set<string>();\r\n    private readonly staticVariableModifications = new Set<string>();\r\n\r\n    private readonly typeChecker: ts.TypeChecker;\r\n    private readonly classType: ts.Type;\r\n\r\n    private constructorScopeDepth = OUTSIDE_CONSTRUCTOR;\r\n\r\n    public constructor(classNode: ts.Node, typeChecker: ts.TypeChecker) {\r\n        this.classType = typeChecker.getTypeAtLocation(classNode);\r\n        this.typeChecker = typeChecker;\r\n    }\r\n\r\n    public addDeclaredVariable(node: ParameterOrPropertyDeclaration) {\r\n        if (!utils.isModifierFlagSet(node, ts.ModifierFlags.Private)\r\n            || utils.isModifierFlagSet(node, ts.ModifierFlags.Readonly)\r\n            || node.name.kind === ts.SyntaxKind.ComputedPropertyName) {\r\n            return;\r\n        }\r\n\r\n        if (utils.isModifierFlagSet(node, ts.ModifierFlags.Static)) {\r\n            this.privateModifiableStatics.set(node.name.getText(), node);\r\n        } else {\r\n            this.privateModifiableMembers.set(node.name.getText(), node);\r\n        }\r\n    }\r\n\r\n    public addVariableModification(node: ts.PropertyAccessExpression) {\r\n        const modifierType = this.typeChecker.getTypeAtLocation(node.expression);\r\n        if (modifierType.symbol === undefined || !typeIsOrHasBaseType(modifierType, this.classType)) {\r\n            return;\r\n        }\r\n\r\n        const toStatic = utils.isObjectType(modifierType) && utils.isObjectFlagSet(modifierType, ts.ObjectFlags.Anonymous);\r\n        if (!toStatic && this.constructorScopeDepth === DIRECTLY_INSIDE_CONSTRUCTOR) {\r\n            return;\r\n        }\r\n\r\n        const variable = node.name.text;\r\n\r\n        (toStatic ? this.staticVariableModifications : this.memberVariableModifications).add(variable);\r\n    }\r\n\r\n    public enterConstructor() {\r\n        this.constructorScopeDepth = DIRECTLY_INSIDE_CONSTRUCTOR;\r\n    }\r\n\r\n    public exitConstructor() {\r\n        this.constructorScopeDepth = OUTSIDE_CONSTRUCTOR;\r\n    }\r\n\r\n    public enterNonConstructorScope() {\r\n        if (this.constructorScopeDepth !== OUTSIDE_CONSTRUCTOR) {\r\n            this.constructorScopeDepth += 1;\r\n        }\r\n    }\r\n\r\n    public exitNonConstructorScope() {\r\n        if (this.constructorScopeDepth !== OUTSIDE_CONSTRUCTOR) {\r\n            this.constructorScopeDepth -= 1;\r\n        }\r\n    }\r\n\r\n    public finalizeUnmodifiedPrivateNonReadonlys() {\r\n        this.memberVariableModifications.forEach((variableName) => {\r\n            this.privateModifiableMembers.delete(variableName);\r\n        });\r\n\r\n        this.staticVariableModifications.forEach((variableName) => {\r\n            this.privateModifiableStatics.delete(variableName);\r\n        });\r\n\r\n        return [\r\n            ...Array.from(this.privateModifiableMembers.values()),\r\n            ...Array.from(this.privateModifiableStatics.values()),\r\n        ];\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferReadonlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 135,
                  "charOffset": 1126,
                  "charLength": 134,
                  "snippet": {
                    "text": "        description: \"Requires that private variables are marked as `readonly` if they're never modified outside of the constructor.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferReadonlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 124,
                  "charOffset": 1861,
                  "charLength": 123,
                  "snippet": {
                    "text": "            Marking never-modified variables as readonly helps enforce the code's intent of keeping them as never-modified."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferReadonlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 124,
                  "charOffset": 5809,
                  "charLength": 123,
                  "snippet": {
                    "text": "                handleParentPostfixOrPrefixUnaryExpression(parent as ts.PostfixUnaryExpression | ts.PrefixUnaryExpression);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferReadonlyRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 1,
                  "endLine": 256,
                  "endColumn": 124,
                  "charOffset": 9520,
                  "charLength": 123,
                  "snippet": {
                    "text": "        const toStatic = utils.isObjectType(modifierType) && utils.isObjectFlagSet(modifierType, ts.ObjectFlags.Anonymous);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferTemplateRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 901,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferTemplateRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 141,
                  "charOffset": 1281,
                  "charLength": 140,
                  "snippet": {
                    "text": "            If \\`${OPTION_SINGLE_CONCAT}\\` is specified, then a single concatenation (\\`x + y\\`) is allowed, but not more (\\`x + y + z\\`).`,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferTemplateRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 137,
                  "charOffset": 1839,
                  "charLength": 136,
                  "snippet": {
                    "text": "    public static FAILURE_STRING_MULTILINE = \"Use a multiline template literal instead of concatenating string literals with newlines.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferTemplateRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 86,
                  "endColumn": 136,
                  "charOffset": 3287,
                  "charLength": 135,
                  "snippet": {
                    "text": "        return containsNewline(left as StringLike) || containsNewline(right as StringLike) ? Rule.FAILURE_STRING_MULTILINE : undefined;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferTemplateRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 135,
                  "charOffset": 3841,
                  "charLength": 134,
                  "snippet": {
                    "text": "        return !containsOnlyStringLiterals(left) && (!allowSingleConcat || isPlusExpression(left))  ? Rule.FAILURE_STRING : undefined;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferTemplateRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 132,
                  "charOffset": 4389,
                  "charLength": 131,
                  "snippet": {
                    "text": "    return isPlusExpression(node) && isStringLike(node.right) && (isStringLike(node.left) || containsAnyStringLiterals(node.left));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferTemplateRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 1,
                  "endLine": 115,
                  "endColumn": 132,
                  "charOffset": 4595,
                  "charLength": 131,
                  "snippet": {
                    "text": "    return isPlusExpression(node) && (isStringLike(node.right) || isStringLike(node.left) || containsAnyStringLiterals(node.left));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/preferWhileRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 122,
                  "charOffset": 1511,
                  "charLength": 121,
                  "snippet": {
                    "text": "    public static FAILURE_STRING = \"Prefer `while` loops instead of `for` loops without an initializer and incrementor.\";"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/promiseFunctionAsyncRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 136,
                  "charOffset": 4760,
                  "charLength": 135,
                  "snippet": {
                    "text": "                        ctx.addFailure(node.getStart(sourceFile), (node as ts.FunctionLikeDeclaration).body!.pos, Rule.FAILURE_STRING);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/quotemarkRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 18,
                  "charOffset": 1166,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/quotemarkRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 134,
                  "charOffset": 2043,
                  "charLength": 133,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_AVOID_TEMPLATE}\"\\` forbids single-line untagged template strings that do not contain string interpolations."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/quotemarkRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 1,
                  "endLine": 55,
                  "endColumn": 135,
                  "charOffset": 2178,
                  "charLength": 134,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_AVOID_ESCAPE}\"\\` allows you to use the \"other\" quotemark in cases where escaping would normally be required."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/quotemarkRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 131,
                  "charOffset": 2314,
                  "charLength": 130,
                  "snippet": {
                    "text": "            For example, \\`[true, \"${OPTION_DOUBLE}\", \"${OPTION_AVOID_ESCAPE}\"]\\` would not report a failure on the string literal"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/quotemarkRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 131,
                  "charOffset": 4427,
                  "charLength": 130,
                  "snippet": {
                    "text": "            const expectedQuoteMark = node.parent!.kind === ts.SyntaxKind.JsxAttribute ? options.jsxQuoteMark : options.quoteMark;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/radixRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 135,
                  "charOffset": 1415,
                  "charLength": 134,
                  "snippet": {
                    "text": "            > Different implementations produce different results when a radix is not specified, usually defaulting the value to 10.`,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/returnUndefinedRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 123,
                  "charOffset": 4106,
                  "charLength": 122,
                  "snippet": {
                    "text": "    const returnType = contextual !== undefined ? contextual : tryGetReturnType(checker.getTypeAtLocation(node), checker);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/returnUndefinedRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 1,
                  "endLine": 119,
                  "endColumn": 128,
                  "charOffset": 4350,
                  "charLength": 127,
                  "snippet": {
                    "text": "    if ((hasModifier(node.modifiers, ts.SyntaxKind.AsyncKeyword) ? isEffectivelyVoidPromise : isEffectivelyVoid)(returnType)) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/semicolonRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 18,
                  "charOffset": 1110,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/semicolonRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 203,
                  "endColumn": 2,
                  "charOffset": 4121,
                  "charLength": 4733,
                  "snippet": {
                    "text": "abstract class SemicolonWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            this.visitNode(node);\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    protected visitNode(node: ts.Node) {\r\n        switch (node.kind) {\r\n            case ts.SyntaxKind.SemicolonClassElement:\r\n                return this.reportUnnecessary(node.end);\r\n            case ts.SyntaxKind.EmptyStatement:\r\n                return this.checkEmptyStatement(node);\r\n            case ts.SyntaxKind.PropertyDeclaration:\r\n                return this.visitPropertyDeclaration(node as ts.PropertyDeclaration);\r\n        }\r\n    }\r\n\r\n    protected reportUnnecessary(pos: number, noFix?: boolean) {\r\n        this.addFailure(pos - 1, pos, Rule.FAILURE_STRING_UNNECESSARY, noFix ? undefined : Lint.Replacement.deleteText(pos - 1, 1));\r\n    }\r\n\r\n    protected checkSemicolonOrLineBreak(node: ts.Node) {\r\n        if (this.sourceFile.text[node.end - 1] !== \";\") {\r\n            return;\r\n        }\r\n        const nextToken = utils.getNextToken(node, this.sourceFile)!;\r\n        switch (nextToken.kind) {\r\n            case ts.SyntaxKind.EndOfFileToken:\r\n            case ts.SyntaxKind.CloseBraceToken:\r\n                return this.reportUnnecessary(node.end);\r\n            default:\r\n                if (!utils.isSameLine(this.sourceFile, node.end, nextToken.end)) {\r\n                    this.reportUnnecessary(node.end);\r\n                }\r\n        }\r\n    }\r\n\r\n    protected checkUnnecessary(node: ts.Node) {\r\n        if (this.sourceFile.text[node.end - 1] !== \";\") {\r\n            return;\r\n        }\r\n        const lastToken = utils.getPreviousToken(node.getLastToken(this.sourceFile), this.sourceFile)!;\r\n        // yield does not continue on the next line if there is no yielded expression\r\n        if (lastToken.kind === ts.SyntaxKind.YieldKeyword && lastToken.parent!.kind === ts.SyntaxKind.YieldExpression ||\r\n            // arrow functions with block as body don't continue on the next line\r\n            lastToken.kind === ts.SyntaxKind.CloseBraceToken && lastToken.parent!.kind === ts.SyntaxKind.Block &&\r\n                lastToken.parent!.parent!.kind === ts.SyntaxKind.ArrowFunction) {\r\n            return this.checkSemicolonOrLineBreak(node);\r\n        }\r\n        const nextToken = utils.getNextToken(node, this.sourceFile)!;\r\n        switch (nextToken.kind) {\r\n            case ts.SyntaxKind.OpenParenToken:\r\n            case ts.SyntaxKind.OpenBracketToken:\r\n            case ts.SyntaxKind.PlusToken:\r\n            case ts.SyntaxKind.MinusToken:\r\n            case ts.SyntaxKind.RegularExpressionLiteral:\r\n            case ts.SyntaxKind.LessThanToken:\r\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\r\n            case ts.SyntaxKind.TemplateHead:\r\n                break;\r\n            case ts.SyntaxKind.CloseBraceToken:\r\n            case ts.SyntaxKind.EndOfFileToken:\r\n                return this.reportUnnecessary(node.end);\r\n            default:\r\n                if (!utils.isSameLine(this.sourceFile, node.end, nextToken.end)) {\r\n                    this.reportUnnecessary(node.end);\r\n                }\r\n        }\r\n    }\r\n\r\n    protected abstract checkPropertyDeclaration(node: ts.PropertyDeclaration): void;\r\n\r\n    private checkEmptyStatement(node: ts.Node) {\r\n        // An empty statement is only ever useful when it is the only statement inside a loop\r\n        if (!utils.isIterationStatement(node.parent!)) {\r\n            const parentKind = node.parent!.kind;\r\n            // don't remove empty statement if it is a direct child of if, with or a LabeledStatement\r\n            // otherwise this would unintentionally change control flow\r\n            const noFix = parentKind === ts.SyntaxKind.IfStatement ||\r\n                          parentKind === ts.SyntaxKind.LabeledStatement ||\r\n                          parentKind === ts.SyntaxKind.WithStatement;\r\n            this.reportUnnecessary(node.end, noFix);\r\n        }\r\n    }\r\n\r\n    private visitPropertyDeclaration(node: ts.PropertyDeclaration) {\r\n        // check if this is a multi-line arrow function\r\n        if (this.options.boundClassMethods !== BoundClassMethodOption.Strict &&\r\n            node.initializer !== undefined &&\r\n            node.initializer.kind === ts.SyntaxKind.ArrowFunction &&\r\n            !utils.isSameLine(this.sourceFile, node.getStart(this.sourceFile), node.end)) {\r\n            if (this.options.boundClassMethods === BoundClassMethodOption.Default) {\r\n                this.checkUnnecessary(node);\r\n            }\r\n        } else {\r\n            this.checkPropertyDeclaration(node);\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/semicolonRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 1,
                  "endLine": 266,
                  "endColumn": 2,
                  "charOffset": 8858,
                  "charLength": 2524,
                  "snippet": {
                    "text": "class SemicolonAlwaysWalker extends SemicolonWalker {\r\n    protected visitNode(node: ts.Node) {\r\n        switch (node.kind) {\r\n            case ts.SyntaxKind.VariableStatement:\r\n            case ts.SyntaxKind.ExpressionStatement:\r\n            case ts.SyntaxKind.ReturnStatement:\r\n            case ts.SyntaxKind.BreakStatement:\r\n            case ts.SyntaxKind.ContinueStatement:\r\n            case ts.SyntaxKind.ThrowStatement:\r\n            case ts.SyntaxKind.ImportEqualsDeclaration:\r\n            case ts.SyntaxKind.DoStatement:\r\n            case ts.SyntaxKind.ExportAssignment:\r\n            case ts.SyntaxKind.TypeAliasDeclaration:\r\n            case ts.SyntaxKind.ImportDeclaration:\r\n            case ts.SyntaxKind.ExportDeclaration:\r\n            case ts.SyntaxKind.DebuggerStatement:\r\n                return this.checkMissing(node);\r\n            case ts.SyntaxKind.ModuleDeclaration:\r\n            case ts.SyntaxKind.MethodDeclaration:\r\n            case ts.SyntaxKind.FunctionDeclaration:\r\n                // check shorthand module declarations and method / function signatures\r\n                if ((node as ts.FunctionLikeDeclaration | ts.ModuleDeclaration).body === undefined) {\r\n                    this.checkMissing(node);\r\n                }\r\n                break;\r\n            case ts.SyntaxKind.InterfaceDeclaration:\r\n                if (this.options.interfaces) {\r\n                    this.checkInterface(node as ts.InterfaceDeclaration);\r\n                }\r\n                break;\r\n            default:\r\n                return super.visitNode(node);\r\n        }\r\n    }\r\n\r\n    protected checkPropertyDeclaration(node: ts.PropertyDeclaration) {\r\n        return this.checkMissing(node);\r\n    }\r\n\r\n    private checkMissing(node: ts.Node) {\r\n        if (this.sourceFile.text[node.end - 1] !== \";\") {\r\n            this.reportMissing(node.end);\r\n        }\r\n    }\r\n\r\n    private reportMissing(pos: number) {\r\n        this.addFailureAt(pos, 0, Rule.FAILURE_STRING_MISSING, Lint.Replacement.appendText(pos, \";\"));\r\n    }\r\n\r\n    private checkInterface(node: ts.InterfaceDeclaration) {\r\n        for (const member of node.members) {\r\n            switch (this.sourceFile.text[member.end - 1]) {\r\n                case \";\": break;\r\n                case \",\":\r\n                    this.addFailureAt(member.end - 1, 1, Rule.FAILURE_STRING_COMMA, new Lint.Replacement(member.end - 1, 1, \";\"));\r\n                    break;\r\n                default:\r\n                    this.reportMissing(member.end);\r\n            }\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/semicolonRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 1,
                  "endLine": 348,
                  "endColumn": 2,
                  "charOffset": 11386,
                  "charLength": 3624,
                  "snippet": {
                    "text": "class SemicolonNeverWalker extends SemicolonWalker {\r\n    protected visitNode(node: ts.Node) {\r\n        switch (node.kind) {\r\n            case ts.SyntaxKind.ExpressionStatement:\r\n            case ts.SyntaxKind.ThrowStatement:\r\n            case ts.SyntaxKind.ExportAssignment:\r\n                return this.checkUnnecessary(node as ts.Statement);\r\n            case ts.SyntaxKind.VariableStatement:\r\n                return this.checkVariableStatement(node as ts.VariableStatement);\r\n            case ts.SyntaxKind.ReturnStatement:\r\n                if ((node as ts.ReturnStatement).expression === undefined) {\r\n                    // return does not continue on the next line if the is no returned expression\r\n                    return this.checkSemicolonOrLineBreak(node);\r\n                }\r\n                return this.checkUnnecessary(node);\r\n            case ts.SyntaxKind.TypeAliasDeclaration:\r\n            case ts.SyntaxKind.ImportEqualsDeclaration:\r\n            case ts.SyntaxKind.ImportDeclaration:\r\n            case ts.SyntaxKind.ExportDeclaration:\r\n            case ts.SyntaxKind.DebuggerStatement:\r\n            case ts.SyntaxKind.BreakStatement:\r\n            case ts.SyntaxKind.ContinueStatement:\r\n            case ts.SyntaxKind.DoStatement:\r\n                return this.checkSemicolonOrLineBreak(node);\r\n            case ts.SyntaxKind.ModuleDeclaration:\r\n                // shorthand module declaration\r\n                if ((node as ts.ModuleDeclaration).body === undefined) {\r\n                    this.checkShorthandModuleDeclaration(node as ts.ModuleDeclaration);\r\n                }\r\n                break;\r\n            case ts.SyntaxKind.MethodDeclaration:\r\n                // check method signature\r\n                if ((node as ts.MethodDeclaration).body === undefined) {\r\n                    this.checkSemicolonOrLineBreak(node);\r\n                }\r\n                break;\r\n            case ts.SyntaxKind.FunctionDeclaration:\r\n                // check function signature\r\n                if ((node as ts.FunctionDeclaration).body === undefined) {\r\n                    this.checkSemicolonOrLineBreak(node);\r\n                }\r\n                break;\r\n            case ts.SyntaxKind.InterfaceDeclaration:\r\n                if (this.options.interfaces) {\r\n                    this.checkInterface(node as ts.InterfaceDeclaration);\r\n                }\r\n                break;\r\n            default:\r\n                return super.visitNode(node);\r\n        }\r\n    }\r\n\r\n    protected checkPropertyDeclaration(node: ts.PropertyDeclaration) {\r\n        if (node.initializer === undefined) {\r\n            return this.checkSemicolonOrLineBreak(node);\r\n        }\r\n        return this.checkUnnecessary(node);\r\n    }\r\n\r\n    private checkVariableStatement(node: ts.VariableStatement) {\r\n        const declarations = node.declarationList.declarations;\r\n        if (declarations[declarations.length - 1].initializer === undefined) {\r\n            // variable declaration does not continue on the next line if it has no initializer\r\n            return this.checkSemicolonOrLineBreak(node);\r\n        }\r\n        return this.checkUnnecessary(node);\r\n    }\r\n\r\n    private checkShorthandModuleDeclaration(node: ts.ModuleDeclaration) {\r\n        const nextStatement = utils.getNextStatement(node);\r\n        if (nextStatement === undefined || nextStatement.kind !== ts.SyntaxKind.Block) {\r\n            this.checkSemicolonOrLineBreak(node);\r\n        }\r\n    }\r\n\r\n    private checkInterface(node: ts.InterfaceDeclaration) {\r\n        for (const member of node.members) {\r\n            this.checkSemicolonOrLineBreak(member);\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/semicolonRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 123,
                  "charOffset": 1704,
                  "charLength": 122,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_NEVER}\"\\` disallows semicolons at the end of every statement except for when they are necessary."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/semicolonRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 133,
                  "charOffset": 2124,
                  "charLength": 132,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_STRICT_BOUND_CLASS_METHODS}\"\\` disables any special handling of bound class methods and treats them as any"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/semicolonRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 123,
                  "endColumn": 133,
                  "charOffset": 4951,
                  "charLength": 132,
                  "snippet": {
                    "text": "        this.addFailure(pos - 1, pos, Rule.FAILURE_STRING_UNNECESSARY, noFix ? undefined : Lint.Replacement.deleteText(pos - 1, 1));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/semicolonRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 1,
                  "endLine": 259,
                  "endColumn": 131,
                  "charOffset": 11109,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    this.addFailureAt(member.end - 1, 1, Rule.FAILURE_STRING_COMMA, new Lint.Replacement(member.end - 1, 1, \";\"));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/spaceBeforeFunctionParenRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 126,
                  "charOffset": 2627,
                  "charLength": 125,
                  "snippet": {
                    "text": "        return this.applyWithFunction(sourceFile, walk, parseOptions(this.ruleArguments[0] as Option | Options | undefined));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/spaceWithinParensRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 11,
                  "endLine": 23,
                  "endColumn": 18,
                  "charOffset": 767,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/spaceWithinParensRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 159,
                  "endColumn": 2,
                  "charOffset": 2542,
                  "charLength": 3754,
                  "snippet": {
                    "text": "class SpaceWithinParensWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        forEachToken(sourceFile, (token: ts.Node) => {\r\n            if (token.kind === ts.SyntaxKind.OpenParenToken) {\r\n                if (sourceFile.text.charAt(token.end) !== \")\") {\r\n                    this.checkOpenParenToken(token);\r\n                }\r\n            } else if (token.kind === ts.SyntaxKind.CloseParenToken) {\r\n                if (sourceFile.text.charAt(token.end - 2) !== \"(\") {\r\n                    this.checkCloseParenToken(token);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private checkOpenParenToken(tokenNode: ts.Node) {\r\n        let currentPos = tokenNode.end;\r\n        let currentChar = this.sourceFile.text.charCodeAt(currentPos);\r\n        const allowedSpaceCount = this.options.size;\r\n\r\n        while (ts.isWhiteSpaceSingleLine(currentChar)) {\r\n            ++currentPos;\r\n            currentChar = this.sourceFile.text.charCodeAt(currentPos);\r\n        }\r\n        if (!ts.isLineBreak(currentChar)) {\r\n            const whitespaceCount = currentPos - tokenNode.end;\r\n            if (whitespaceCount !== allowedSpaceCount) {\r\n                let length = 0;\r\n                let pos = tokenNode.end;\r\n\r\n                if (whitespaceCount > allowedSpaceCount) {\r\n                    pos += allowedSpaceCount;\r\n                    length = whitespaceCount - allowedSpaceCount;\r\n                } else if (whitespaceCount > 0 && whitespaceCount < allowedSpaceCount) {\r\n                    pos += allowedSpaceCount - whitespaceCount;\r\n                }\r\n                this.addFailureAtWithFix(pos, length, whitespaceCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkCloseParenToken(tokenNode: ts.Node) {\r\n        let currentPos = tokenNode.end - 2;\r\n        let currentChar = this.sourceFile.text.charCodeAt(currentPos);\r\n        const allowedSpaceCount = this.options.size;\r\n\r\n        while (ts.isWhiteSpaceSingleLine(currentChar)) {\r\n            --currentPos;\r\n            currentChar = this.sourceFile.text.charCodeAt(currentPos);\r\n        }\r\n        /**\r\n         * Number 40 is open parenthese char code, we skip this cause\r\n         * it's already been caught by `checkOpenParenToken`\r\n         */\r\n        if (!ts.isLineBreak(currentChar) && currentChar !== 40) {\r\n            const whitespaceCount = tokenNode.end - currentPos - 2;\r\n            if (whitespaceCount !== allowedSpaceCount) {\r\n                let length = 0;\r\n                const pos = currentPos + 1;\r\n\r\n                if (whitespaceCount > allowedSpaceCount) {\r\n                    length = whitespaceCount - allowedSpaceCount;\r\n                }\r\n                this.addFailureAtWithFix(pos, length, whitespaceCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addFailureAtWithFix(position: number, length: number, whitespaceCount: number) {\r\n        let lintMsg: string;\r\n        let lintFix: Lint.Replacement;\r\n        const allowedSpaceCount = this.options.size;\r\n\r\n        if (allowedSpaceCount === 0) {\r\n            lintMsg = Rule.FAILURE_NO_SPACE;\r\n            lintFix = Lint.Replacement.deleteText(position, length);\r\n        } else if (allowedSpaceCount > whitespaceCount) {\r\n            lintMsg = Rule.FAILURE_NEEDS_SPACE(allowedSpaceCount - whitespaceCount);\r\n            const whitespace = \" \".repeat(allowedSpaceCount - whitespaceCount);\r\n            lintFix = Lint.Replacement.appendText(position, whitespace);\r\n        } else {\r\n            lintMsg = Rule.FAILURE_NO_EXTRA_SPACE(allowedSpaceCount);\r\n            lintFix = Lint.Replacement.deleteText(position, whitespaceCount - allowedSpaceCount);\r\n        }\r\n\r\n        this.addFailureAt(position, length, lintMsg, lintFix);\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/spaceWithinParensRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 130,
                  "charOffset": 1929,
                  "charLength": 129,
                  "snippet": {
                    "text": "        return this.applyWithWalker(new SpaceWithinParensWalker(sourceFile, this.ruleName, parseOptions(this.ruleArguments[0])));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictBooleanExpressionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 11,
                  "endLine": 100,
                  "endColumn": 18,
                  "charOffset": 4760,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictBooleanExpressionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 129,
                  "charOffset": 1975,
                  "charLength": 128,
                  "snippet": {
                    "text": "              - Without the '--strictNullChecks' compiler option, this will allow anything other than a string, number, or enum."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictBooleanExpressionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 129,
                  "charOffset": 2260,
                  "charLength": 128,
                  "snippet": {
                    "text": "              - Without the '--strictNullChecks' compiler option, this will allow anything other than a string, number, or enum."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictBooleanExpressionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 1,
                  "endLine": 66,
                  "endColumn": 139,
                  "charOffset": 3409,
                  "charLength": 138,
                  "snippet": {
                    "text": "              - This option is a subset of \\`${OPTION_ALLOW_UNDEFINED_UNION}\\`, so you don't need to enable both options at the same time."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictBooleanExpressionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 86,
                  "endColumn": 136,
                  "charOffset": 4114,
                  "charLength": 135,
                  "snippet": {
                    "text": "            [true, OPTION_ALLOW_NULL_UNION, OPTION_ALLOW_UNDEFINED_UNION, OPTION_ALLOW_STRING, OPTION_ALLOW_ENUM, OPTION_ALLOW_NUMBER],"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictBooleanExpressionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 1,
                  "endLine": 215,
                  "endColumn": 127,
                  "charOffset": 9121,
                  "charLength": 126,
                  "snippet": {
                    "text": "            return isTypeFlagSet(type, ts.TypeFlags.Any | ts.TypeFlags.BooleanLiteral) ? undefined : TypeFailure.AlwaysTruthy;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictBooleanExpressionsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 1,
                  "endLine": 382,
                  "endColumn": 131,
                  "charOffset": 14947,
                  "charLength": 130,
                  "snippet": {
                    "text": "    return node.kind === ts.SyntaxKind.BinaryExpression && binaryBooleanExpressionKind(node as ts.BinaryExpression) !== undefined;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictTypePredicatesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 11,
                  "endLine": 173,
                  "endColumn": 29,
                  "charOffset": 7490,
                  "charLength": 18,
                  "snippet": {
                    "text": "PlainTypePredicate"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictTypePredicatesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 11,
                  "endLine": 180,
                  "endColumn": 42,
                  "charOffset": 7689,
                  "charLength": 31,
                  "snippet": {
                    "text": "NonStrictNullUndefinedPredicate"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictTypePredicatesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 137,
                  "charOffset": 1219,
                  "charLength": 136,
                  "snippet": {
                    "text": "            Works for 'typeof' comparisons to constants (e.g. 'typeof foo === \"string\"'), and equality comparison to 'null'/'undefined'."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictTypePredicatesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 1,
                  "endLine": 129,
                  "endColumn": 129,
                  "charOffset": 5435,
                  "charLength": 128,
                  "snippet": {
                    "text": "function getTypePredicateOneWay(left: ts.Expression, right: ts.Expression, isStrictEquals: boolean): TypePredicate | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictTypePredicatesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 1,
                  "endLine": 145,
                  "endColumn": 122,
                  "charOffset": 6329,
                  "charLength": 121,
                  "snippet": {
                    "text": "                : { kind: TypePredicateKind.Plain, expression, predicate, isNullOrUndefined: left.text === \"undefined\" };"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/strictTypePredicatesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 1,
                  "endLine": 161,
                  "endColumn": 124,
                  "charOffset": 6953,
                  "charLength": 123,
                  "snippet": {
                    "text": "            ? { kind: TypePredicateKind.Plain, expression: left, predicate: flagPredicate(flags), isNullOrUndefined: true }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/switchFinalBreakRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 11,
                  "endLine": 55,
                  "endColumn": 18,
                  "charOffset": 2189,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 1009,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 1,
                  "endLine": 260,
                  "endColumn": 2,
                  "charOffset": 5604,
                  "charLength": 5793,
                  "snippet": {
                    "text": "class TrailingCommaWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            switch (node.kind) {\r\n                case ts.SyntaxKind.ArrayLiteralExpression:\r\n                    this.checkList((node as ts.ArrayLiteralExpression).elements, node.end, \"arrays\", isArrayRest);\r\n                    break;\r\n                case ts.SyntaxKind.ArrayBindingPattern:\r\n                    this.checkList((node as ts.BindingPattern).elements, node.end, \"arrays\", isDestructuringRest);\r\n                    break;\r\n                case ts.SyntaxKind.ObjectBindingPattern:\r\n                    this.checkList((node as ts.BindingPattern).elements, node.end, \"objects\", isDestructuringRest);\r\n                    break;\r\n                case ts.SyntaxKind.NamedImports:\r\n                    this.checkList((node as ts.NamedImports).elements, node.end, \"imports\", noRest);\r\n                    break;\r\n                case ts.SyntaxKind.NamedExports:\r\n                    this.checkList((node as ts.NamedExports).elements, node.end, \"exports\", noRest);\r\n                    break;\r\n                case ts.SyntaxKind.ObjectLiteralExpression:\r\n                    this.checkList((node as ts.ObjectLiteralExpression).properties, node.end, \"objects\", isObjectRest);\r\n                    break;\r\n                case ts.SyntaxKind.EnumDeclaration:\r\n                    this.checkList((node as ts.EnumDeclaration).members, node.end, \"objects\", noRest);\r\n                    break;\r\n                case ts.SyntaxKind.NewExpression:\r\n                    if ((node as ts.NewExpression).arguments === undefined) {\r\n                        break;\r\n                    }\r\n                    // falls through\r\n                case ts.SyntaxKind.CallExpression:\r\n                    this.checkList((node as ts.CallExpression | ts.NewExpression).arguments!, node.end, \"functions\", noRest);\r\n                    break;\r\n                case ts.SyntaxKind.ArrowFunction:\r\n                    // don't check arrow functions without parens around the parameter\r\n                    if (getChildOfKind(node, ts.SyntaxKind.OpenParenToken, this.sourceFile) === undefined) {\r\n                        break;\r\n                    }\r\n                    // falls through\r\n                case ts.SyntaxKind.Constructor:\r\n                case ts.SyntaxKind.FunctionDeclaration:\r\n                case ts.SyntaxKind.FunctionExpression:\r\n                case ts.SyntaxKind.MethodDeclaration:\r\n                case ts.SyntaxKind.SetAccessor:\r\n                case ts.SyntaxKind.MethodSignature:\r\n                case ts.SyntaxKind.ConstructSignature:\r\n                case ts.SyntaxKind.ConstructorType:\r\n                case ts.SyntaxKind.FunctionType:\r\n                case ts.SyntaxKind.CallSignature:\r\n                    this.checkList(\r\n                        (node as ts.SignatureDeclaration).parameters,\r\n                        getChildOfKind(node, ts.SyntaxKind.CloseParenToken, this.sourceFile)!.end,\r\n                        \"functions\",\r\n                        isRestParameter,\r\n                    );\r\n                    break;\r\n                case ts.SyntaxKind.TypeLiteral:\r\n                    this.checkTypeLiteral(node as ts.TypeLiteralNode);\r\n                    break;\r\n                default:\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private checkTypeLiteral(node: ts.TypeLiteralNode) {\r\n        const members = node.members;\r\n        if (members.length === 0) {\r\n            return;\r\n        }\r\n        const sourceText = this.sourceFile.text;\r\n        for (const member of members) {\r\n            // PropertySignature in TypeLiteral can end with semicolon or comma. If one ends with a semicolon don't check for trailing comma\r\n            if (sourceText[member.end - 1] === \";\") {\r\n                return;\r\n            }\r\n        }\r\n        // The trailing comma is part of the last member and therefore not present as hasTrailingComma on the NodeArray\r\n        const hasTrailingComma = sourceText[members.end - 1] === \",\";\r\n        return this.checkComma(hasTrailingComma, members, node.end, \"typeLiterals\", noRest);\r\n    }\r\n\r\n    private checkList<T extends ts.Node>(list: ts.NodeArray<T>, closeElementPos: number, optionKey: OptionName, isRest: (n: T) => boolean) {\r\n        if (list.length === 0) {\r\n            return;\r\n        }\r\n        return this.checkComma(list.hasTrailingComma, list, closeElementPos, optionKey, isRest);\r\n    }\r\n\r\n    /* Expects `list.length !== 0` */\r\n    private checkComma<T extends ts.Node>(\r\n        hasTrailingComma: boolean | undefined,\r\n        list: ts.NodeArray<T>,\r\n        closeTokenPos: number,\r\n        optionKey: OptionName,\r\n        isRest: (node: T) => boolean,\r\n    ) {\r\n        const last = list[list.length - 1];\r\n        if (this.options.specCompliant && isRest(last)) {\r\n            if (hasTrailingComma) {\r\n                this.addFailureAt(list.end - 1, 1, Rule.FAILURE_STRING_FORBIDDEN, Lint.Replacement.deleteText(list.end - 1, 1));\r\n            }\r\n            return;\r\n        }\r\n\r\n        const options = isSameLine(this.sourceFile, last.end, closeTokenPos)\r\n            ? this.options.singleline\r\n            : this.options.multiline;\r\n        const option = options[optionKey];\r\n\r\n        if (option === \"always\" && !hasTrailingComma) {\r\n            this.addFailureAt(list.end, 0, Rule.FAILURE_STRING_ALWAYS, Lint.Replacement.appendText(list.end, \",\"));\r\n        } else if (option === \"never\" && hasTrailingComma) {\r\n            this.addFailureAt(list.end - 1, 1, Rule.FAILURE_STRING_NEVER, Lint.Replacement.deleteText(list.end - 1, 1));\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 135,
                  "charOffset": 1448,
                  "charLength": 134,
                  "snippet": {
                    "text": "type OptionsJson = Partial<Record<\"multiline\" | \"singleline\", Partial<CustomOptionValue> | OptionValue> & {esSpecCompliant: boolean}>;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 1,
                  "endLine": 47,
                  "endColumn": 140,
                  "charOffset": 1644,
                  "charLength": 139,
                  "snippet": {
                    "text": "    return { multiline: normalize(options.multiline), singleline: normalize(options.singleline), specCompliant: !!options.esSpecCompliant};"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 125,
                  "charOffset": 2636,
                  "charLength": 124,
                  "snippet": {
                    "text": "            Requires or disallows trailing commas in array and object literals, destructuring assignments, function typings,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 1,
                  "endLine": 174,
                  "endColumn": 126,
                  "charOffset": 7435,
                  "charLength": 125,
                  "snippet": {
                    "text": "                    this.checkList((node as ts.CallExpression | ts.NewExpression).arguments!, node.end, \"functions\", noRest);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 1,
                  "endLine": 216,
                  "endColumn": 141,
                  "charOffset": 9365,
                  "charLength": 140,
                  "snippet": {
                    "text": "            // PropertySignature in TypeLiteral can end with semicolon or comma. If one ends with a semicolon don't check for trailing comma"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 1,
                  "endLine": 226,
                  "endColumn": 141,
                  "charOffset": 9908,
                  "charLength": 140,
                  "snippet": {
                    "text": "    private checkList<T extends ts.Node>(list: ts.NodeArray<T>, closeElementPos: number, optionKey: OptionName, isRest: (n: T) => boolean) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/trailingCommaRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 1,
                  "endLine": 244,
                  "endColumn": 129,
                  "charOffset": 10639,
                  "charLength": 128,
                  "snippet": {
                    "text": "                this.addFailureAt(list.end - 1, 1, Rule.FAILURE_STRING_FORBIDDEN, Lint.Replacement.deleteText(list.end - 1, 1));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/tripleEqualsRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 18,
                  "charOffset": 891,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typedefRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 11,
                  "endLine": 24,
                  "endColumn": 18,
                  "charOffset": 827,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typedefRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 212,
                  "endColumn": 2,
                  "charOffset": 4325,
                  "charLength": 4940,
                  "snippet": {
                    "text": "class TypedefWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile): void {\r\n        const cb = (node: ts.Node): void => {\r\n            switch (node.kind) {\r\n                case ts.SyntaxKind.FunctionDeclaration:\r\n                case ts.SyntaxKind.FunctionExpression:\r\n                case ts.SyntaxKind.GetAccessor:\r\n                case ts.SyntaxKind.MethodDeclaration:\r\n                case ts.SyntaxKind.MethodSignature: {\r\n                    const { name, parameters, type } = node as ts.CallSignatureDeclaration;\r\n                    this.checkTypeAnnotation(\"call-signature\", name !== undefined ? name : parameters, type, name);\r\n                    break;\r\n                }\r\n                case ts.SyntaxKind.ArrowFunction:\r\n                    this.checkArrowFunction(node as ts.ArrowFunction);\r\n                    break;\r\n                case ts.SyntaxKind.Parameter:\r\n                    this.checkParameter(node as ts.ParameterDeclaration);\r\n                    break;\r\n                case ts.SyntaxKind.PropertyDeclaration:\r\n                    this.checkPropertyDeclaration(node as ts.PropertyDeclaration);\r\n                    break;\r\n                case ts.SyntaxKind.PropertySignature: {\r\n                    const { name, type } = node as ts.PropertySignature;\r\n                    this.checkTypeAnnotation(\"property-declaration\", name, type, name);\r\n                    break;\r\n                }\r\n                case ts.SyntaxKind.VariableDeclaration:\r\n                    this.checkVariableDeclaration(node as ts.VariableDeclaration);\r\n            }\r\n\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private checkArrowFunction({ parent, parameters, type }: ts.ArrowFunction): void {\r\n        if (parent!.kind !== ts.SyntaxKind.CallExpression && !isTypedPropertyDeclaration(parent!)) {\r\n            this.checkTypeAnnotation(\"arrow-call-signature\", parameters, type);\r\n        }\r\n    }\r\n\r\n    private checkParameter({ parent, name, type }: ts.ParameterDeclaration): void {\r\n        const isArrowFunction = parent!.kind === ts.SyntaxKind.ArrowFunction;\r\n\r\n        const option = (() => {\r\n            if (!isArrowFunction) {\r\n                return \"parameter\";\r\n            } else if (isTypedPropertyDeclaration(parent!.parent!)) {\r\n                return undefined;\r\n            } else if (utils.isPropertyDeclaration(parent!.parent!)) {\r\n                return \"member-variable-declaration\";\r\n            } else {\r\n                return \"arrow-parameter\";\r\n            }\r\n        })();\r\n\r\n        if (option !== undefined) {\r\n            this.checkTypeAnnotation(option, name, type, name);\r\n        }\r\n    }\r\n\r\n    private checkPropertyDeclaration({ initializer, name, type }: ts.PropertyDeclaration): void {\r\n        // If this is an arrow function, it doesn't need to have a typedef on the property declaration\r\n        // as the typedefs can be on the function's parameters instead\r\n        if (initializer === undefined || initializer.kind !== ts.SyntaxKind.ArrowFunction) {\r\n            this.checkTypeAnnotation(\"member-variable-declaration\", name, type, name);\r\n        }\r\n    }\r\n\r\n    private checkVariableDeclaration({ parent, name, type }: ts.VariableDeclaration): void {\r\n        // variable declarations should always have a grandparent, but check that to be on the safe side.\r\n        // catch statements will be the parent of the variable declaration\r\n        // for-in/for-of loops will be the gradparent of the variable declaration\r\n        if (parent!.kind === ts.SyntaxKind.CatchClause\r\n                || parent!.parent!.kind === ts.SyntaxKind.ForInStatement\r\n                || parent!.parent!.kind === ts.SyntaxKind.ForOfStatement) {\r\n            return;\r\n        }\r\n\r\n        const option = (() => {\r\n            switch (name.kind) {\r\n                case ts.SyntaxKind.ObjectBindingPattern:\r\n                    return \"object-destructuring\";\r\n                case ts.SyntaxKind.ArrayBindingPattern:\r\n                    return \"array-destructuring\";\r\n                default:\r\n                    return \"variable-declaration\";\r\n            }\r\n        })();\r\n\r\n        this.checkTypeAnnotation(option, name, type, name);\r\n    }\r\n\r\n    private checkTypeAnnotation(\r\n            option: Option,\r\n            location: ts.Node | ts.NodeArray<ts.Node>,\r\n            typeAnnotation: ts.TypeNode | undefined,\r\n            name?: ts.Node): void {\r\n        if (this.options[option] === true && typeAnnotation === undefined) {\r\n            const failure = `expected ${option}${name === undefined ? \"\" : `: '${name.getText()}'`} to have a typedef`;\r\n            if (isNodeArray(location)) {\r\n                this.addFailure(location.pos - 1, location.end + 1, failure);\r\n            } else {\r\n                this.addFailureAtNode(location, failure);\r\n            }\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typedefWhitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 1,
                  "endLine": 186,
                  "endColumn": 2,
                  "charOffset": 4157,
                  "charLength": 3307,
                  "snippet": {
                    "text": "class TypedefWhitespaceWalker extends Lint.AbstractWalker<Options> {\r\n    public walk(sourceFile: ts.SourceFile) {\r\n        const cb = (node: ts.Node): void => {\r\n            const optionType = getOptionType(node);\r\n            if (optionType !== undefined) {\r\n                this.checkSpace(node as ts.SignatureDeclaration | ts.VariableLikeDeclaration, optionType);\r\n            }\r\n            return ts.forEachChild(node, cb);\r\n        };\r\n        return ts.forEachChild(sourceFile, cb);\r\n    }\r\n\r\n    private checkSpace(node: ts.SignatureDeclaration | ts.VariableLikeDeclaration, key: OptionType) {\r\n        if (!(\"type\" in node) || node.type === undefined) {\r\n            return;\r\n        }\r\n        const {left, right} = this.options;\r\n        const colon = getChildOfKind(node, ts.SyntaxKind.ColonToken, this.sourceFile)!;\r\n        if (right !== undefined && right[key] !== undefined) {\r\n            this.checkRight(colon.end, right[key]!, key);\r\n        }\r\n        if (left !== undefined && left[key] !== undefined) {\r\n            this.checkLeft(colon.end - 1, left[key]!, key);\r\n        }\r\n    }\r\n\r\n    private checkRight(colonEnd: number, option: Option, key: OptionType) {\r\n        let pos = colonEnd;\r\n        const {text} = this.sourceFile;\r\n        let current = text.charCodeAt(pos);\r\n        if (ts.isLineBreak(current)) {\r\n            return;\r\n        }\r\n        while (ts.isWhiteSpaceSingleLine(current)) {\r\n            ++pos;\r\n            current = text.charCodeAt(pos);\r\n        }\r\n        return this.validateWhitespace(colonEnd, pos, option, \"after\", key);\r\n    }\r\n\r\n    private checkLeft(colonStart: number, option: Option, key: OptionType) {\r\n        let pos = colonStart;\r\n        const {text} = this.sourceFile;\r\n        let current = text.charCodeAt(pos - 1);\r\n        while (ts.isWhiteSpaceSingleLine(current)) {\r\n            --pos;\r\n            current = text.charCodeAt(pos - 1);\r\n        }\r\n        if (ts.isLineBreak(current)) {\r\n            return;\r\n        }\r\n        return this.validateWhitespace(pos, colonStart, option, \"before\", key);\r\n    }\r\n\r\n    private validateWhitespace(start: number, end: number, option: Option, location: \"before\" | \"after\", key: OptionType) {\r\n        switch (option) {\r\n            case \"nospace\":\r\n                if (start !== end) {\r\n                    this.addFailure(start, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.deleteFromTo(start, end));\r\n                }\r\n                break;\r\n            case \"space\":\r\n                if (start === end) {\r\n                    this.addFailure(end, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.appendText(end, \" \"));\r\n                }\r\n                break;\r\n            case \"onespace\":\r\n                switch (end - start) {\r\n                    case 0:\r\n                        this.addFailure(end, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.appendText(end, \" \"));\r\n                        break;\r\n                    case 1:\r\n                        break;\r\n                    default:\r\n                        this.addFailure(start + 1, end, Rule.FAILURE_STRING(option, location, key),\r\n                                        Lint.Replacement.deleteFromTo(start + 1, end));\r\n                }\r\n        }\r\n    }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typedefWhitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 1,
                  "endLine": 161,
                  "endColumn": 124,
                  "charOffset": 6241,
                  "charLength": 123,
                  "snippet": {
                    "text": "    private validateWhitespace(start: number, end: number, option: Option, location: \"before\" | \"after\", key: OptionType) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typedefWhitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 1,
                  "endLine": 165,
                  "endColumn": 136,
                  "charOffset": 6460,
                  "charLength": 135,
                  "snippet": {
                    "text": "                    this.addFailure(start, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.deleteFromTo(start, end));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typedefWhitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 1,
                  "endLine": 170,
                  "endColumn": 130,
                  "charOffset": 6705,
                  "charLength": 129,
                  "snippet": {
                    "text": "                    this.addFailure(end, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.appendText(end, \" \"));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typedefWhitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 176,
                  "endColumn": 134,
                  "charOffset": 6978,
                  "charLength": 133,
                  "snippet": {
                    "text": "                        this.addFailure(end, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.appendText(end, \" \"));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typeLiteralDelimiterRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 11,
                  "endLine": 24,
                  "endColumn": 18,
                  "charOffset": 833,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typeLiteralDelimiterRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 130,
                  "charOffset": 3490,
                  "charLength": 129,
                  "snippet": {
                    "text": "                        ctx.addFailureAt(end, 1, Rule.FAILURE_STRING_TRAILING, Lint.Replacement.replaceFromTo(end, end + 1, \"\"));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typeLiteralDelimiterRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 124,
                  "charOffset": 3699,
                  "charLength": 123,
                  "snippet": {
                    "text": "                    ctx.addFailureAt(end, 1, Rule.FAILURE_STRING_COMMA, Lint.Replacement.replaceFromTo(end, end + 1, \";\"));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typeLiteralDelimiterRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 134,
                  "charOffset": 3918,
                  "charLength": 133,
                  "snippet": {
                    "text": "                        ctx.addFailureAt(end, 1, Rule.FAILURE_STRING_MISSING, Lint.Replacement.replaceFromTo(end + 1, end + 1, \";\"));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typeofCompareRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 1,
                  "endLine": 42,
                  "endColumn": 127,
                  "charOffset": 1612,
                  "charLength": 126,
                  "snippet": {
                    "text": "        `'typeof' expression must be compared to one of: ${Array.from(LEGAL_TYPEOF_RESULTS).map((x) => `\"${x}\"`).join(\", \")}`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/typeofCompareRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 131,
                  "charOffset": 2110,
                  "charLength": 130,
                  "snippet": {
                    "text": "            if (Lint.getEqualsKind(operatorToken) !== undefined && (isFaultyTypeof(left, right) || isFaultyTypeof(right, left))) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 11,
                  "endLine": 146,
                  "endColumn": 18,
                  "charOffset": 6351,
                  "charLength": 7,
                  "snippet": {
                    "text": "Failure"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 131,
                  "charOffset": 1069,
                  "charLength": 130,
                  "snippet": {
                    "text": "        description: \"Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 124,
                  "charOffset": 1773,
                  "charLength": 123,
                  "snippet": {
                    "text": "    public static FAILURE_STRING_SINGLE_PARAMETER_DIFFERENCE(otherLine: number | undefined, type1: string, type2: string) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 122,
                  "charOffset": 2149,
                  "charLength": 121,
                  "snippet": {
                    "text": "        const overloads = otherLine === undefined ? \"These overloads\" : `This overload and the one on line ${otherLine}`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 1,
                  "endLine": 110,
                  "endColumn": 126,
                  "charOffset": 4691,
                  "charLength": 125,
                  "snippet": {
                    "text": "            const signature = member as ts.CallSignatureDeclaration | ts.ConstructSignatureDeclaration | ts.MethodSignature |"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 1,
                  "endLine": 126,
                  "endColumn": 123,
                  "charOffset": 5479,
                  "charLength": 122,
                  "snippet": {
                    "text": "                        Rule.FAILURE_STRING_SINGLE_PARAMETER_DIFFERENCE(lineOfOtherOverload, typeText(p0), typeText(p1)));"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 131,
                  "charOffset": 6524,
                  "charLength": 130,
                  "snippet": {
                    "text": "    | { kind: \"extra-parameter\"; extraParameter: ts.ParameterDeclaration; otherSignature: ts.NodeArray<ts.ParameterDeclaration> };"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 1,
                  "endLine": 178,
                  "endColumn": 138,
                  "charOffset": 7592,
                  "charLength": 137,
                  "snippet": {
                    "text": "function compareSignatures(a: ts.SignatureDeclaration, b: ts.SignatureDeclaration, isTypeParameter: IsTypeParameter): Unify | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 1,
                  "endLine": 188,
                  "endColumn": 133,
                  "charOffset": 8042,
                  "charLength": 132,
                  "snippet": {
                    "text": "function signaturesCanBeUnified(a: ts.SignatureDeclaration, b: ts.SignatureDeclaration, isTypeParameter: IsTypeParameter): boolean {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 1,
                  "endLine": 198,
                  "endColumn": 139,
                  "charOffset": 8703,
                  "charLength": 138,
                  "snippet": {
                    "text": "function signaturesDifferBySingleParameter(types1: ReadonlyArray<ts.ParameterDeclaration>, types2: ReadonlyArray<ts.ParameterDeclaration>,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 1,
                  "endLine": 221,
                  "endColumn": 126,
                  "charOffset": 9697,
                  "charLength": 125,
                  "snippet": {
                    "text": " * Returns the parameter declaration (`x: number` in this example) that should be optional/rest, and overload it's a part of."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 1,
                  "endLine": 223,
                  "endColumn": 141,
                  "charOffset": 9829,
                  "charLength": 140,
                  "snippet": {
                    "text": "function signaturesDifferByOptionalOrRestParameter(sig1: ts.NodeArray<ts.ParameterDeclaration>, sig2: ts.NodeArray<ts.ParameterDeclaration>,"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/unifiedSignaturesRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 1,
                  "endLine": 293,
                  "endColumn": 126,
                  "charOffset": 12663,
                  "charLength": 125,
                  "snippet": {
                    "text": " * Does not rely on overloads being adjacent. This is similar to code in adjacentOverloadSignaturesRule.ts, but not the same."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/useDefaultTypeParameterRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 11,
                  "endLine": 44,
                  "endColumn": 24,
                  "charOffset": 1773,
                  "charLength": 13,
                  "snippet": {
                    "text": "ArgsAndParams"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/useDefaultTypeParameterRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 1,
                  "endLine": 84,
                  "endColumn": 127,
                  "charOffset": 3538,
                  "charLength": 126,
                  "snippet": {
                    "text": "            const decl = node as ts.CallExpression | ts.NewExpression | ts.TypeReferenceNode | ts.ExpressionWithTypeArguments;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/useDefaultTypeParameterRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 140,
                  "charOffset": 4341,
                  "charLength": 139,
                  "snippet": {
                    "text": "function typeParamsFromCall(node: ts.CallLikeExpression, checker: ts.TypeChecker): ReadonlyArray<ts.TypeParameterDeclaration> | undefined {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/useDefaultTypeParameterRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 1,
                  "endLine": 119,
                  "endColumn": 137,
                  "charOffset": 5247,
                  "charLength": 136,
                  "snippet": {
                    "text": "        isClassLikeDeclaration(decl) || isTypeAliasDeclaration(decl) || isInterfaceDeclaration(decl) ? decl.typeParameters : undefined);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/useIsnanRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 138,
                  "charOffset": 1018,
                  "charLength": 137,
                  "snippet": {
                    "text": "        description: \"Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant.\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/variableNameRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 11,
                  "endLine": 79,
                  "endColumn": 18,
                  "charOffset": 3432,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/variableNameRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 136,
                  "charOffset": 1858,
                  "charLength": 135,
                  "snippet": {
                    "text": "              * \\`\"${OPTION_LEADING_UNDERSCORE}\"\\` allows underscores at the beginning (only has an effect if \"check-format\" specified)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/variableNameRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 132,
                  "charOffset": 1995,
                  "charLength": 131,
                  "snippet": {
                    "text": "              * \\`\"${OPTION_TRAILING_UNDERSCORE}\"\\` allows underscores at the end. (only has an effect if \"check-format\" specified)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/variableNameRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 125,
                  "charOffset": 2327,
                  "charLength": 124,
                  "snippet": {
                    "text": "            * \\`\"${OPTION_BAN_KEYWORDS}\"\\`: disallows the use of certain TypeScript keywords as variable or parameter names."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/variableNameRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 1,
                  "endLine": 112,
                  "endColumn": 127,
                  "charOffset": 4770,
                  "charLength": 126,
                  "snippet": {
                    "text": "                    // A destructuring pattern that does not rebind an expression is always an alias, e.g. `var {Foo} = ...;`."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/variableNameRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 1,
                  "endLine": 131,
                  "endColumn": 129,
                  "charOffset": 5653,
                  "charLength": 128,
                  "snippet": {
                    "text": "                const { name, initializer } = node as ts.ParameterDeclaration | ts.PropertyDeclaration | ts.VariableDeclaration;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/whitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 125,
                  "charOffset": 1615,
                  "charLength": 124,
                  "snippet": {
                    "text": "            * \\`\"check-branch\"\\` checks branching statements (\\`if\\`/\\`else\\`/\\`for\\`/\\`while\\`) are followed by whitespace."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/whitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 128,
                  "charOffset": 3564,
                  "charLength": 127,
                  "snippet": {
                    "text": "    \"branch\" | \"decl\" | \"operator\" | \"module\" | \"separator\" | \"restSpread\" | \"type\" | \"typecast\" | \"typeOperator\" | \"preblock\","
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "variable-name",
          "level": "error",
          "message": {
            "text": "variable name must be in lowerCamelCase, PascalCase or UPPER_CASE"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/rules/whitespaceRule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 47,
                  "endLine": 246,
                  "endColumn": 52,
                  "charOffset": 10888,
                  "charLength": 5,
                  "snippet": {
                    "text": "_text"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 36,
                  "endColumn": 25,
                  "charOffset": 1190,
                  "charLength": 7,
                  "snippet": {
                    "text": "Options"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 18,
                  "endLine": 120,
                  "endColumn": 24,
                  "charOffset": 2876,
                  "charLength": 6,
                  "snippet": {
                    "text": "Logger"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 133,
                  "charOffset": 2493,
                  "charLength": 132,
                  "snippet": {
                    "text": "     * When this property is `true` the `files` property is used to specify the directories from which the tests should be executed."
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 1,
                  "endLine": 213,
                  "endColumn": 133,
                  "charOffset": 6615,
                  "charLength": 132,
                  "snippet": {
                    "text": "                logger.error(`'${file}' does not exist. This will be an error in TSLint 6.\\n`); // TODO make this an error in v6.0.0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 1,
                  "endLine": 224,
                  "endColumn": 139,
                  "charOffset": 6999,
                  "charLength": 138,
                  "snippet": {
                    "text": "    const matcher = patterns.map((pattern) => new Minimatch(pattern, {dot: !include})); // `glob` always enables `dot` for ignore patterns"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 1,
                  "endLine": 228,
                  "endColumn": 127,
                  "charOffset": 7240,
                  "charLength": 126,
                  "snippet": {
                    "text": "function resolveGlobs(files: string[], ignore: string[], outputAbsolutePaths: boolean | undefined, logger: Logger): string[] {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 1,
                  "endLine": 236,
                  "endColumn": 129,
                  "charOffset": 7767,
                  "charLength": 128,
                  "snippet": {
                    "text": "            logger.error(`'${file}' does not exist. This will be an error in TSLint 6.\\n`); // TODO make this an error in v6.0.0"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 1,
                  "endLine": 243,
                  "endColumn": 132,
                  "charOffset": 8061,
                  "charLength": 131,
                  "snippet": {
                    "text": "async function doLinting(options: Options, files: string[], program: ts.Program | undefined, logger: Logger): Promise<LintResult> {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 1,
                  "endLine": 288,
                  "endColumn": 130,
                  "charOffset": 9561,
                  "charLength": 129,
                  "snippet": {
                    "text": "        if (configFile === undefined || configFile.linterOptions == undefined || configFile.linterOptions.exclude == undefined) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 1,
                  "endLine": 319,
                  "endColumn": 141,
                  "charOffset": 10895,
                  "charLength": 140,
                  "snippet": {
                    "text": "function showDiagnostic({ file, start, category, messageText }: ts.Diagnostic, program: ts.Program, outputAbsolutePaths?: boolean): string {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "== should be ==="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 66,
                  "endLine": 288,
                  "endColumn": 68,
                  "charOffset": 9626,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "== should be ==="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/runner.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 115,
                  "endLine": 288,
                  "endColumn": 117,
                  "charOffset": 9675,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 36,
                  "endColumn": 28,
                  "charOffset": 1268,
                  "charLength": 10,
                  "snippet": {
                    "text": "TestOutput"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 18,
                  "endLine": 46,
                  "endColumn": 29,
                  "charOffset": 1519,
                  "charLength": 11,
                  "snippet": {
                    "text": "SkippedTest"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 18,
                  "endLine": 51,
                  "endColumn": 28,
                  "charOffset": 1602,
                  "charLength": 10,
                  "snippet": {
                    "text": "TestResult"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 95,
                  "endColumn": 140,
                  "charOffset": 3568,
                  "charLength": 139,
                  "snippet": {
                    "text": "        let fileText = isEncodingRule ? readBufferWithDetectedEncoding(fs.readFileSync(fileToLint)) : fs.readFileSync(fileToLint, \"utf-8\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 1,
                  "endLine": 129,
                  "endColumn": 123,
                  "charOffset": 5590,
                  "charLength": 122,
                  "snippet": {
                    "text": "                        filenameToGet = path.join(path.dirname(ts.getDefaultLibFilePath(compilerOptions)), filenameToGet);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/tslintCli.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 11,
                  "endLine": 27,
                  "endColumn": 15,
                  "charOffset": 896,
                  "charLength": 4,
                  "snippet": {
                    "text": "Argv"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/tslintCli.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 11,
                  "endLine": 46,
                  "endColumn": 17,
                  "charOffset": 1293,
                  "charLength": 6,
                  "snippet": {
                    "text": "Option"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/tslintCli.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 1,
                  "endLine": 231,
                  "endColumn": 131,
                  "charOffset": 8745,
                  "charLength": 130,
                  "snippet": {
                    "text": "        `${optionUsageTag(o)}:${o.description.startsWith(\"\\n\") ? o.description.replace(/\\n/g, indent) : indent + o.description}`);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 134,
                  "charOffset": 2948,
                  "charLength": 133,
                  "snippet": {
                    "text": "    const regexp: RegExp = /(\"(?:[^\\\\\\\"]*(?:\\\\.)?)*\")|('(?:[^\\\\\\']*(?:\\\\.)?)*')|(\\/\\*(?:\\r?\\n|.)*?\\*\\/)|(\\/{2,}.*?(?:(?:\\r?\\n)|$))/g;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 1,
                  "endLine": 126,
                  "endColumn": 125,
                  "charOffset": 4151,
                  "charLength": 124,
                  "snippet": {
                    "text": "export function arraysAreEqual<T>(a: ReadonlyArray<T> | undefined, b: ReadonlyArray<T> | undefined, eq: Equal<T>): boolean {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 1,
                  "endLine": 142,
                  "endColumn": 122,
                  "charOffset": 4813,
                  "charLength": 121,
                  "snippet": {
                    "text": "export function flatMap<T, U>(inputs: ReadonlyArray<T>, getOutputs: (input: T, index: number) => ReadonlyArray<U>): U[] {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 20,
                  "endLine": 24,
                  "endColumn": 22,
                  "charOffset": 829,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "!= should be !=="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 42,
                  "charOffset": 1097,
                  "charLength": 2,
                  "snippet": {
                    "text": "!="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "variable-name",
          "level": "error",
          "message": {
            "text": "variable name must be in lowerCamelCase, PascalCase or UPPER_CASE"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 60,
                  "endLine": 95,
                  "endColumn": 63,
                  "charOffset": 3142,
                  "charLength": 3,
                  "snippet": {
                    "text": "_m1"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "variable-name",
          "level": "error",
          "message": {
            "text": "variable name must be in lowerCamelCase, PascalCase or UPPER_CASE"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 73,
                  "endLine": 95,
                  "endColumn": 76,
                  "charOffset": 3155,
                  "charLength": 3,
                  "snippet": {
                    "text": "_m2"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/lines.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 89,
                  "charOffset": 741,
                  "charLength": 88,
                  "snippet": {
                    "text": "export class CodeLine extends Line { constructor(public contents: string) { super(); } }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/lines.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 123,
                  "charOffset": 831,
                  "charLength": 122,
                  "snippet": {
                    "text": "export class MessageSubstitutionLine extends Line { constructor(public key: string, public message: string) { super(); } }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/lines.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 90,
                  "charOffset": 957,
                  "charLength": 89,
                  "snippet": {
                    "text": "export class ErrorLine extends Line { constructor(public startCol: number) { super(); } }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/lines.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 105,
                  "charOffset": 1048,
                  "charLength": 104,
                  "snippet": {
                    "text": "export class MultilineErrorLine extends ErrorLine { constructor(startCol: number) { super(startCol); } }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/lines.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 2,
                  "charOffset": 1154,
                  "charLength": 151,
                  "snippet": {
                    "text": "export class EndErrorLine extends ErrorLine {\r\n    constructor(startCol: number, public endCol: number, public message: string) { super(startCol); }\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/lines.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 123,
                  "charOffset": 831,
                  "charLength": 122,
                  "snippet": {
                    "text": "export class MessageSubstitutionLine extends Line { constructor(public key: string, public message: string) { super(); } }"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/lintError.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 18,
                  "endLine": 18,
                  "endColumn": 32,
                  "charOffset": 658,
                  "charLength": 14,
                  "snippet": {
                    "text": "PositionInFile"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/lintError.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 18,
                  "endLine": 23,
                  "endColumn": 27,
                  "charOffset": 733,
                  "charLength": 9,
                  "snippet": {
                    "text": "LintError"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/parse.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 1,
                  "endLine": 121,
                  "endColumn": 125,
                  "charOffset": 4117,
                  "charLength": 124,
                  "snippet": {
                    "text": "    const messageSubstitutionLines = lines.filter((l) => l instanceof MessageSubstitutionLine) as MessageSubstitutionLine[];"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/parse.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 1,
                  "endLine": 193,
                  "endColumn": 141,
                  "charOffset": 7276,
                  "charLength": 140,
                  "snippet": {
                    "text": " * Tries to format the message when it has the correct format or returns it unchanged:  name % ('substitution1' [, \"substitution2\" [, ...]])"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/src/verify/parse.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 1,
                  "endLine": 268,
                  "endColumn": 134,
                  "charOffset": 10359,
                  "charLength": 133,
                  "snippet": {
                    "text": "    return flatMap(codeText, (line, i) => [line, ...mapDefined(errorLinesForCodeText[i], (err) => printLine(err, line))]).join(\"\\n\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/configurationTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 1,
                  "endLine": 272,
                  "endColumn": 125,
                  "charOffset": 12239,
                  "charLength": 124,
                  "snippet": {
                    "text": "            const config = loadConfigurationFromPath(\"./test/config/tslint-extends-default-severity-only-in-extended.json\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/configurationTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 1,
                  "endLine": 413,
                  "endColumn": 140,
                  "charOffset": 19997,
                  "charLength": 139,
                  "snippet": {
                    "text": "            assert.deepEqual(config.rulesDirectory, [path.join(process.cwd(), \"test/config/node_modules/tslint-test-custom-rules/rules\")]);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "triple-equals",
          "level": "error",
          "message": {
            "text": "== should be ==="
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/configurationTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 13,
                  "endLine": 526,
                  "endColumn": 15,
                  "charOffset": 25287,
                  "charLength": 2,
                  "snippet": {
                    "text": "=="
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 129,
                  "charOffset": 4844,
                  "charLength": 128,
                  "snippet": {
                    "text": "            const status = await execRunner({config: \"test/config/tslint-extends-package-no-mod.json\", files: [\"src/test.ts\"]});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 124,
                  "charOffset": 5148,
                  "charLength": 123,
                  "snippet": {
                    "text": "            const result = await execRunnerWithOutput({config: \"test/config/tslint-invalid.json\", files: [\"src/test.ts\"]});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 133,
                  "charOffset": 5370,
                  "charLength": 132,
                  "snippet": {
                    "text": "            assert.include(result.stderr, \"Failed to load\", \"stderr should contain notification about failing to load json config\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 1,
                  "endLine": 119,
                  "endColumn": 124,
                  "charOffset": 5691,
                  "charLength": 123,
                  "snippet": {
                    "text": "            const result = await execRunnerWithOutput({config: \"test/config/tslint-invalid.yaml\", files: [\"src/test.ts\"]});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 1,
                  "endLine": 122,
                  "endColumn": 133,
                  "charOffset": 5911,
                  "charLength": 132,
                  "snippet": {
                    "text": "            assert.include(result.stderr, \"Failed to load\", \"stderr should contain notification about failing to load yaml config\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 1,
                  "endLine": 127,
                  "endColumn": 132,
                  "charOffset": 6253,
                  "charLength": 131,
                  "snippet": {
                    "text": "            const result = await execRunnerWithOutput({config: \"test/config/tslint-extends-invalid.json\", files: [\"src/test.ts\"]});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 1,
                  "endLine": 130,
                  "endColumn": 133,
                  "charOffset": 6483,
                  "charLength": 132,
                  "snippet": {
                    "text": "            assert.include(result.stderr, \"Failed to load\", \"stderr should contain notification about failing to load json config\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 1,
                  "endLine": 146,
                  "endColumn": 127,
                  "charOffset": 7365,
                  "charLength": 126,
                  "snippet": {
                    "text": "                    assert.include(stdout, \"hello from custom formatter\", \"stdout should contain output of custom formatter\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 1,
                  "endLine": 156,
                  "endColumn": 127,
                  "charOffset": 7761,
                  "charLength": 126,
                  "snippet": {
                    "text": "                {config: \"./test/config/tslint-custom-rules.json\", rulesDirectory: \"./someRandomDir\", files: [\"src/test.ts\"]},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 1,
                  "endLine": 163,
                  "endColumn": 137,
                  "charOffset": 8159,
                  "charLength": 136,
                  "snippet": {
                    "text": "                {config: \"./test/config/tslint-custom-rules.json\", rulesDirectory: \"./test/files/custom-rules\", files: [\"src/test.ts\"]},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 1,
                  "endLine": 179,
                  "endColumn": 130,
                  "charOffset": 8917,
                  "charLength": 129,
                  "snippet": {
                    "text": "        it(\"exits with code 2 if custom rules directory is specified in config file and file contains lint errors\", async () => {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 1,
                  "endLine": 180,
                  "endColumn": 130,
                  "charOffset": 9048,
                  "charLength": 129,
                  "snippet": {
                    "text": "            const status = await execRunner({config: \"./test/config/tslint-custom-rules-with-dir.json\", files: [\"src/test.ts\"]});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 206,
                  "endColumn": 133,
                  "charOffset": 10179,
                  "charLength": 132,
                  "snippet": {
                    "text": "                {config: \"./test/files/config-exclude/tslint-exclude-one.json\", files: [\"./test/files/config-exclude/included.ts\"]},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 1,
                  "endLine": 213,
                  "endColumn": 133,
                  "charOffset": 10568,
                  "charLength": 132,
                  "snippet": {
                    "text": "                {config: \"./test/files/config-exclude/tslint-exclude-one.json\", files: [\"./test/files/config-exclude/excluded.ts\"]},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 1,
                  "endLine": 222,
                  "endColumn": 124,
                  "charOffset": 11071,
                  "charLength": 123,
                  "snippet": {
                    "text": "                    files: [\"./test/rules/config-exclude/excluded1.ts\", \"./test/rules/config-exclude/subdir/excluded2.ts\"],"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 1,
                  "endLine": 230,
                  "endColumn": 140,
                  "charOffset": 11453,
                  "charLength": 139,
                  "snippet": {
                    "text": "                {config: \"./test/files/config-exclude/tslint-exclude-one.json\", files: [\"./test/files/config-exclude/subdir/excluded.ts\"]},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 1,
                  "endLine": 320,
                  "endColumn": 124,
                  "charOffset": 15959,
                  "charLength": 123,
                  "snippet": {
                    "text": "                {test: true, files: [\"test/files/custom-rule-cli-rule-test\"], rulesDirectory: \"test/files/custom-rules-2\"},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 1,
                  "endLine": 337,
                  "endColumn": 139,
                  "charOffset": 16913,
                  "charLength": 138,
                  "snippet": {
                    "text": "            const status = await execRunner({test: true, files: [\"test/files/custom-rule-rule-test\", \"test/files/incorrect-fixes-test\"]});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 1,
                  "endLine": 384,
                  "endColumn": 131,
                  "charOffset": 19269,
                  "charLength": 130,
                  "snippet": {
                    "text": "                {config: \"test/files/tsconfig-no-ts-files/tslint.json\", project: \"test/files/tsconfig-no-ts-files/tsconfig.json\"},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 1,
                  "endLine": 408,
                  "endColumn": 127,
                  "charOffset": 20448,
                  "charLength": 126,
                  "snippet": {
                    "text": "                {project: \"test/files/tsconfig-test/tsconfig.json\", files: [\"test/files/tsconfig-test/non-existent.test.ts\"]},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 1,
                  "endLine": 411,
                  "endColumn": 129,
                  "charOffset": 20688,
                  "charLength": 128,
                  "snippet": {
                    "text": "            assert.include(result.stderr, `${path.normalize(\"test/files/tsconfig-test/non-existent.test.ts\")}' does not exist`);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 1,
                  "endLine": 425,
                  "endColumn": 125,
                  "charOffset": 21440,
                  "charLength": 124,
                  "snippet": {
                    "text": "            const result = await execRunnerWithOutput({project: \"test/files/tsconfig-test/tsconfig.json\", files: [\"*.js\"]});"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 1,
                  "endLine": 464,
                  "endColumn": 133,
                  "charOffset": 23647,
                  "charLength": 132,
                  "snippet": {
                    "text": "                {project: \"test/files/tsconfig-allow-js/tsconfig.json\", exclude: [\"test/files/tsconfig-allow-js/testfile.test.js\"]},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 1,
                  "endLine": 525,
                  "endColumn": 123,
                  "charOffset": 26531,
                  "charLength": 122,
                  "snippet": {
                    "text": "        it(\"exits with code 2 if correctly finds file containing lint errors when glob is in double quotes\", async () => {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 1,
                  "endLine": 530,
                  "endColumn": 140,
                  "charOffset": 26951,
                  "charLength": 139,
                  "snippet": {
                    "text": "                {config: \"./test/config/tslint-custom-rules.json\", rulesDirectory: \"./test/files/custom-rules\", files: [\"src/**/test.ts\"]},"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 1,
                  "endLine": 535,
                  "endColumn": 123,
                  "charOffset": 27202,
                  "charLength": 122,
                  "snippet": {
                    "text": "        it(\"exits with code 2 if correctly finds file containing lint errors when glob is in single quotes\", async () => {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 1,
                  "endLine": 569,
                  "endColumn": 123,
                  "charOffset": 28851,
                  "charLength": 122,
                  "snippet": {
                    "text": "function execCli(args: string[], options: cp.ExecFileOptions | ExecFileCallback, cb?: ExecFileCallback): cp.ChildProcess {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/executable/executableTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 602,
                  "startColumn": 1,
                  "endLine": 602,
                  "endColumn": 125,
                  "charOffset": 29874,
                  "charLength": 124,
                  "snippet": {
                    "text": "function execRunner(options: Partial<Options>, logger: Logger = dummyLogger) { // tslint:disable-line:promise-function-async"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.log' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/allow-js-exclude-node-modules/test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 12,
                  "charOffset": 42,
                  "charLength": 11,
                  "snippet": {
                    "text": "console.log"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/allow-js-exclude-node-modules/test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 29,
                  "endLine": 1,
                  "endColumn": 41,
                  "charOffset": 28,
                  "charLength": 12,
                  "snippet": {
                    "text": "'dependency'"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/allow-js-exclude-node-modules/test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "\"dependency\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.log' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/excluded.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 12,
                  "charLength": 11,
                  "snippet": {
                    "text": "console.log"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "semicolon",
          "level": "error",
          "message": {
            "text": "Missing semicolon"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/excluded.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 48,
                  "endLine": 1,
                  "endColumn": 48,
                  "charOffset": 47,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/config-exclude/excluded.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 47
                      },
                      "insertedContent": {
                        "text": ";"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.log' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/excluded1.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 12,
                  "charLength": 11,
                  "snippet": {
                    "text": "console.log"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "semicolon",
          "level": "error",
          "message": {
            "text": "Missing semicolon"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/excluded1.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 48,
                  "endLine": 1,
                  "endColumn": 48,
                  "charOffset": 47,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/config-exclude/excluded1.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 47
                      },
                      "insertedContent": {
                        "text": ";"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.log' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/included.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 12,
                  "charLength": 11,
                  "snippet": {
                    "text": "console.log"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "semicolon",
          "level": "error",
          "message": {
            "text": "Missing semicolon"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/included.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 48,
                  "endLine": 1,
                  "endColumn": 48,
                  "charOffset": 47,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/config-exclude/included.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 47
                      },
                      "insertedContent": {
                        "text": ";"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.log' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/subdir/excluded.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 12,
                  "charLength": 11,
                  "snippet": {
                    "text": "console.log"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "semicolon",
          "level": "error",
          "message": {
            "text": "Missing semicolon"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/subdir/excluded.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 48,
                  "endLine": 1,
                  "endColumn": 48,
                  "charOffset": 47,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/config-exclude/subdir/excluded.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 47
                      },
                      "insertedContent": {
                        "text": ";"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.log' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/subdir/excluded2.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 12,
                  "charLength": 11,
                  "snippet": {
                    "text": "console.log"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "semicolon",
          "level": "error",
          "message": {
            "text": "Missing semicolon"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-exclude/subdir/excluded2.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 48,
                  "endLine": 1,
                  "endColumn": 48,
                  "charOffset": 47,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/config-exclude/subdir/excluded2.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 47
                      },
                      "insertedContent": {
                        "text": ";"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/config-findup/no-config/index.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 3,
                  "charLength": 2,
                  "snippet": {
                    "text": "''"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/config-findup/no-config/index.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 2
                      },
                      "insertedContent": {
                        "text": "\"\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-internal-module",
          "level": "error",
          "message": {
            "text": "The internal 'module' syntax is deprecated, use the 'namespace' keyword instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/codeFrameFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 7,
                  "charLength": 6,
                  "snippet": {
                    "text": "module"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/codeFrameFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 6
                      },
                      "insertedContent": {
                        "text": "namespace"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/codeFrameFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 2,
                  "charLength": 173,
                  "snippet": {
                    "text": "module CodeFrameModule {\n    export class CodeFrameClass {\n        private name: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-internal-module",
          "level": "error",
          "message": {
            "text": "The internal 'module' syntax is deprecated, use the 'namespace' keyword instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/externalFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 7,
                  "charLength": 6,
                  "snippet": {
                    "text": "module"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/externalFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 6
                      },
                      "insertedContent": {
                        "text": "namespace"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/externalFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 2,
                  "charLength": 167,
                  "snippet": {
                    "text": "module SimpleModule {\n    export class SimpleClass {\n        private name: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "member-access",
          "level": "error",
          "message": {
            "text": "The class property 'name' must be marked either 'private', 'public', or 'protected'"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/fileslistFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 9,
                  "endLine": 3,
                  "endColumn": 13,
                  "charOffset": 67,
                  "charLength": 4,
                  "snippet": {
                    "text": "name"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/fileslistFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 67
                      },
                      "insertedContent": {
                        "text": "public "
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-internal-module",
          "level": "error",
          "message": {
            "text": "The internal 'module' syntax is deprecated, use the 'namespace' keyword instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/fileslistFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 7,
                  "charLength": 6,
                  "snippet": {
                    "text": "module"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/fileslistFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 6
                      },
                      "insertedContent": {
                        "text": "namespace"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/fileslistFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 2,
                  "charLength": 165,
                  "snippet": {
                    "text": "module FilesListModule {\n    export class FilesListClass {\n        name: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 4,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 4,
                  "charOffset": 13,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 4,
                  "charOffset": 29,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "object-literal-shorthand",
          "level": "error",
          "message": {
            "text": "Expected property shorthand in object literal ('{x}')."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 7,
                  "charOffset": 41,
                  "charLength": 4,
                  "snippet": {
                    "text": "x: x"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 42,
                        "charLength": 3
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "object-literal-shorthand",
          "level": "error",
          "message": {
            "text": "Expected property shorthand in object literal ('{y}')."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 7,
                  "charOffset": 49,
                  "charLength": 4,
                  "snippet": {
                    "text": "y: y"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 50,
                        "charLength": 3
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "trailing-comma",
          "level": "error",
          "message": {
            "text": "Missing trailing comma"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 7,
                  "endLine": 5,
                  "endColumn": 7,
                  "charOffset": 53,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/jsonFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 53
                      },
                      "insertedContent": {
                        "text": ","
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-internal-module",
          "level": "error",
          "message": {
            "text": "The internal 'module' syntax is deprecated, use the 'namespace' keyword instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/msbuildFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 7,
                  "charLength": 6,
                  "snippet": {
                    "text": "module"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/msbuildFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 6
                      },
                      "insertedContent": {
                        "text": "namespace"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/msbuildFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 2,
                  "charLength": 165,
                  "snippet": {
                    "text": "module ProseModule {\n    export class ProseClass {\n        private name: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 4,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 4,
                  "charOffset": 13,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 13,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 4,
                  "charOffset": 29,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 29,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "object-literal-shorthand",
          "level": "error",
          "message": {
            "text": "Expected property shorthand in object literal ('{x}')."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 5,
                  "endLine": 4,
                  "endColumn": 9,
                  "charOffset": 43,
                  "charLength": 4,
                  "snippet": {
                    "text": "x: x"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 44,
                        "charLength": 3
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "object-literal-shorthand",
          "level": "error",
          "message": {
            "text": "Expected property shorthand in object literal ('{y}')."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "endLine": 5,
                  "endColumn": 9,
                  "charOffset": 53,
                  "charLength": 4,
                  "snippet": {
                    "text": "y: y"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 54,
                        "charLength": 3
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "trailing-comma",
          "level": "error",
          "message": {
            "text": "Missing trailing comma"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 9,
                  "endLine": 5,
                  "endColumn": 9,
                  "charOffset": 57,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/pmdFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 57
                      },
                      "insertedContent": {
                        "text": ","
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-internal-module",
          "level": "error",
          "message": {
            "text": "The internal 'module' syntax is deprecated, use the 'namespace' keyword instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/proseFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 7,
                  "charLength": 6,
                  "snippet": {
                    "text": "module"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/proseFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 6
                      },
                      "insertedContent": {
                        "text": "namespace"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/proseFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 2,
                  "charLength": 165,
                  "snippet": {
                    "text": "module ProseModule {\n    export class ProseClass {\n        private name: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-internal-module",
          "level": "error",
          "message": {
            "text": "The internal 'module' syntax is deprecated, use the 'namespace' keyword instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/stylishFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 7,
                  "charLength": 6,
                  "snippet": {
                    "text": "module"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/stylishFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 6
                      },
                      "insertedContent": {
                        "text": "namespace"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/stylishFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 2,
                  "charLength": 169,
                  "snippet": {
                    "text": "module StylishModule {\n    export class StylishClass {\n        private name: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/tapFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 4,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/tapFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-internal-module",
          "level": "error",
          "message": {
            "text": "The internal 'module' syntax is deprecated, use the 'namespace' keyword instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/vsoFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 7,
                  "charLength": 6,
                  "snippet": {
                    "text": "module"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/formatters/vsoFormatter.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 6
                      },
                      "insertedContent": {
                        "text": "namespace"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/formatters/vsoFormatter.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 2,
                  "charLength": 165,
                  "snippet": {
                    "text": "module ProseModule {\n    export class ProseClass {\n        private name: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n    }\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/multiple-excludes/invalid.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 13,
                  "endLine": 1,
                  "endColumn": 13,
                  "charOffset": 12,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/multiple-excludes/invalid.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 4,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/multiple-excludes/invalid.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "semicolon",
          "level": "error",
          "message": {
            "text": "Missing semicolon"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/multiple-excludes/invalid.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 13,
                  "endLine": 1,
                  "endColumn": 13,
                  "charOffset": 12,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/multiple-excludes/invalid.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12
                      },
                      "insertedContent": {
                        "text": ";"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/multiple-excludes/invalid2.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 20,
                  "endLine": 1,
                  "endColumn": 20,
                  "charOffset": 19,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "semicolon",
          "level": "error",
          "message": {
            "text": "Missing semicolon"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/multiple-excludes/invalid2.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 20,
                  "endLine": 1,
                  "endColumn": 20,
                  "charOffset": 19,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/multiple-excludes/invalid2.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 19
                      },
                      "insertedContent": {
                        "text": ";"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/multiple-excludes/valid.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 1,
                  "endColumn": 14,
                  "charOffset": 13,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/multiple-excludes/valid.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 4,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/multiple-excludes/valid.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "object-literal-sort-keys",
          "level": "error",
          "message": {
            "text": "The key 'rewriters' is not sorted alphabetically"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/after.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 5,
                  "endLine": 10,
                  "endColumn": 14,
                  "charOffset": 189,
                  "charLength": 9,
                  "snippet": {
                    "text": "rewriters"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "object-literal-sort-keys",
          "level": "error",
          "message": {
            "text": "The key 'colorize' is not sorted alphabetically"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/after.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 9,
                  "endLine": 7,
                  "endColumn": 17,
                  "charOffset": 135,
                  "charLength": 8,
                  "snippet": {
                    "text": "colorize"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "one-line",
          "level": "error",
          "message": {
            "text": "misplaced opening brace"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/after.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 13,
                  "endLine": 13,
                  "endColumn": 14,
                  "charOffset": 272,
                  "charLength": 1,
                  "snippet": {
                    "text": "{"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/project-multiple-fixes/after.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 259,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": " "
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-consecutive-blank-lines",
          "level": "error",
          "message": {
            "text": "Consecutive blank lines are forbidden"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 1,
                  "charOffset": 374,
                  "charLength": 1,
                  "snippet": {
                    "text": "\n"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 374,
                        "charLength": 1
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "object-literal-sort-keys",
          "level": "error",
          "message": {
            "text": "The key 'rewriters' is not sorted alphabetically"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 5,
                  "endLine": 10,
                  "endColumn": 14,
                  "charOffset": 188,
                  "charLength": 9,
                  "snippet": {
                    "text": "rewriters"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "object-literal-sort-keys",
          "level": "error",
          "message": {
            "text": "The key 'colorize' is not sorted alphabetically"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 9,
                  "endLine": 7,
                  "endColumn": 17,
                  "charOffset": 135,
                  "charLength": 8,
                  "snippet": {
                    "text": "colorize"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "one-line",
          "level": "error",
          "message": {
            "text": "misplaced opening brace"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 13,
                  "endLine": 13,
                  "endColumn": 14,
                  "charOffset": 271,
                  "charLength": 1,
                  "snippet": {
                    "text": "{"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 258,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": " "
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "trailing-comma",
          "level": "error",
          "message": {
            "text": "Missing trailing comma"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 6,
                  "endLine": 18,
                  "endColumn": 6,
                  "charOffset": 372,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 372
                      },
                      "insertedContent": {
                        "text": ","
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "trailing-comma",
          "level": "error",
          "message": {
            "text": "Missing trailing comma"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 24,
                  "endLine": 8,
                  "endColumn": 24,
                  "charOffset": 174,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 174
                      },
                      "insertedContent": {
                        "text": ","
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "trailing-comma",
          "level": "error",
          "message": {
            "text": "Missing trailing comma"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 10,
                  "charOffset": 366,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/files/project-multiple-fixes/before.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 366
                      },
                      "insertedContent": {
                        "text": ","
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/tsconfig-extends-relative/src/src.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 25,
                  "charOffset": 24,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "interface-name",
          "level": "error",
          "message": {
            "text": "interface name must start with a capitalized I"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/tsconfig-extends-relative/src/src.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 18,
                  "endLine": 1,
                  "endColumn": 22,
                  "charOffset": 17,
                  "charLength": 4,
                  "snippet": {
                    "text": "Test"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-empty-interface",
          "level": "error",
          "message": {
            "text": "An empty interface is equivalent to `{}`."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/tsconfig-extends-relative/src/src.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 18,
                  "endLine": 1,
                  "endColumn": 22,
                  "charOffset": 17,
                  "charLength": 4,
                  "snippet": {
                    "text": "Test"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/tsconfig-extends-relative/test/test.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 25,
                  "endLine": 1,
                  "endColumn": 25,
                  "charOffset": 24,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-empty-interface",
          "level": "error",
          "message": {
            "text": "An empty interface is equivalent to `{}`."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/tsconfig-extends-relative/test/test.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 18,
                  "endLine": 1,
                  "endColumn": 22,
                  "charOffset": 17,
                  "charLength": 4,
                  "snippet": {
                    "text": "IFoo"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "error",
          "message": {
            "text": "Calls to 'console.log' are not allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/files/tsconfig-test/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 12,
                  "charLength": 11,
                  "snippet": {
                    "text": "console.log"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/checkstyleFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 123,
                  "charOffset": 2104,
                  "charLength": 122,
                  "snippet": {
                    "text": "            createFailure(sourceFile2, maxPosition2 - 1, maxPosition2, \"last failure\", \"last-name\", undefined, \"warning\"),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/codeFrameFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 131,
                  "charOffset": 2234,
                  "charLength": 130,
                  "snippet": {
                    "text": "            \\u001b[0m\\u001b[31m\\u001b[1m>\\u001b[22m\\u001b[39m\\u001b[90m 1 | \\u001b[39mmodule \\u001b[33mCodeFrameModule\\u001b[39m {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/codeFrameFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "endLine": 57,
                  "endColumn": 131,
                  "charOffset": 2366,
                  "charLength": 130,
                  "snippet": {
                    "text": "            \\u001b[90m 2 | \\u001b[39m    \\u001b[36mexport\\u001b[39m \\u001b[36mclass\\u001b[39m \\u001b[33mCodeFrameClass\\u001b[39m {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/codeFrameFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 131,
                  "charOffset": 2734,
                  "charLength": 130,
                  "snippet": {
                    "text": "            \\u001b[0m\\u001b[31m\\u001b[1m>\\u001b[22m\\u001b[39m\\u001b[90m 1 | \\u001b[39mmodule \\u001b[33mCodeFrameModule\\u001b[39m {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/codeFrameFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 131,
                  "charOffset": 2866,
                  "charLength": 130,
                  "snippet": {
                    "text": "            \\u001b[90m 2 | \\u001b[39m    \\u001b[36mexport\\u001b[39m \\u001b[36mclass\\u001b[39m \\u001b[33mCodeFrameClass\\u001b[39m {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/codeFrameFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 68,
                  "endColumn": 131,
                  "charOffset": 3240,
                  "charLength": 130,
                  "snippet": {
                    "text": "            \\u001b[0m\\u001b[31m\\u001b[1m>\\u001b[22m\\u001b[39m\\u001b[90m 1 | \\u001b[39mmodule \\u001b[33mCodeFrameModule\\u001b[39m {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/codeFrameFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 69,
                  "endColumn": 131,
                  "charOffset": 3372,
                  "charLength": 130,
                  "snippet": {
                    "text": "            \\u001b[90m 2 | \\u001b[39m    \\u001b[36mexport\\u001b[39m \\u001b[36mclass\\u001b[39m \\u001b[33mCodeFrameClass\\u001b[39m {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/codeFrameFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 1,
                  "endLine": 74,
                  "endColumn": 131,
                  "charOffset": 3749,
                  "charLength": 130,
                  "snippet": {
                    "text": "            \\u001b[0m\\u001b[31m\\u001b[1m>\\u001b[22m\\u001b[39m\\u001b[90m 1 | \\u001b[39mmodule \\u001b[33mCodeFrameModule\\u001b[39m {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/codeFrameFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 131,
                  "charOffset": 3961,
                  "charLength": 130,
                  "snippet": {
                    "text": "            \\u001b[90m 2 | \\u001b[39m    \\u001b[36mexport\\u001b[39m \\u001b[36mclass\\u001b[39m \\u001b[33mCodeFrameClass\\u001b[39m {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/junitFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 123,
                  "charOffset": 2094,
                  "charLength": 122,
                  "snippet": {
                    "text": "            createFailure(sourceFile2, maxPosition2 - 1, maxPosition2, \"last failure\", \"last-name\", undefined, \"warning\"),"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/msbuildFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 136,
                  "charOffset": 2183,
                  "charLength": 135,
                  "snippet": {
                    "text": "    function getFailureString(file: string, line: number, character: number, reason: string, ruleCamelCase: string, severity: string) {"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/pmdFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 125,
                  "charOffset": 2053,
                  "charLength": 124,
                  "snippet": {
                    "text": "                    <violation begincolumn=\"3\" beginline=\"1\" priority=\"3\" rule=\"&amp;&lt;&gt;&#39;&quot; should be escaped\">"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/proseFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 135,
                  "charOffset": 2241,
                  "charLength": 134,
                  "snippet": {
                    "text": "        const mockFix = { getFileName: () => \"file2\" } as any as RuleFailure;  // tslint:disable-line no-object-literal-type-assertion"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/stylishFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 128,
                  "charOffset": 2401,
                  "charLength": 127,
                  "snippet": {
                    "text": "            \\u001b[31mERROR: ${maxPositionTuple}\\u001b[39m  \\u001b[90mlast-name \\u001b[39m  \\u001b[33mlast failure\\u001b[39m\\n`"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/formatters/vsoFormatterTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 141,
                  "charOffset": 3140,
                  "charLength": 140,
                  "snippet": {
                    "text": "        return `##vso[task.logissue type=warning;sourcepath=${file};linenumber=${line};columnnumber=${character};code=${code};]${reason}\\n`;"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rule-tester/parseTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 1,
                  "endLine": 69,
                  "endColumn": 122,
                  "charOffset": 2813,
                  "charLength": 121,
                  "snippet": {
                    "text": "            assert.strictEqual(parse.createMarkupFromErrors(testData.codeStr5, testData.resultErrs5), testData.lintStr5);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rule-tester/parseTests.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 122,
                  "charOffset": 3028,
                  "charLength": 121,
                  "snippet": {
                    "text": "            assert.strictEqual(parse.createMarkupFromErrors(testData.codeStr7, testData.resultErrs7), testData.lintStr7);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-line-length",
          "level": "error",
          "message": {
            "text": "Exceeds maximum line length of 120"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rule-tester/testData.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 139,
                  "charOffset": 3518,
                  "charLength": 138,
                  "snippet": {
                    "text": "    { startPos: { line: 1, col: 13 }, endPos: { line: 1, col: 28 }, message: \"A longer error message I didn't want to type every time!\" },"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ban-types",
          "level": "error",
          "message": {
            "text": "Don't use 'Function' as a type. Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 20,
                  "endLine": 8,
                  "endColumn": 28,
                  "charOffset": 201,
                  "charLength": 8,
                  "snippet": {
                    "text": "Function"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 2,
                  "charOffset": 538,
                  "charLength": 90,
                  "snippet": {
                    "text": "export class DeprecatedConstructorClass {\r\n    /** @deprecated */\r\n    constructor() {}\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "max-classes-per-file",
          "level": "error",
          "message": {
            "text": "A maximum of 1 class per file is allowed."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 2,
                  "charOffset": 632,
                  "charLength": 152,
                  "snippet": {
                    "text": "export class PartiallyDeprecatedClass {\r\n    constructor();\r\n    /** @deprecated */\r\n    constructor(foo: number);\r\n    constructor(_foo?: number) {}\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-empty",
          "level": "error",
          "message": {
            "text": "block is empty"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 5,
                  "endColumn": 40,
                  "charOffset": 156,
                  "charLength": 2,
                  "snippet": {
                    "text": "{}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-empty",
          "level": "error",
          "message": {
            "text": "block is empty"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 19,
                  "endLine": 21,
                  "endColumn": 21,
                  "charOffset": 529,
                  "charLength": 2,
                  "snippet": {
                    "text": "{}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-empty",
          "level": "error",
          "message": {
            "text": "block is empty"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 19,
                  "endLine": 26,
                  "endColumn": 21,
                  "charOffset": 623,
                  "charLength": 2,
                  "snippet": {
                    "text": "{}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-empty",
          "level": "error",
          "message": {
            "text": "block is empty"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 32,
                  "endLine": 33,
                  "endColumn": 34,
                  "charOffset": 779,
                  "charLength": 2,
                  "snippet": {
                    "text": "{}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "prefer-const",
          "level": "error",
          "message": {
            "text": "Identifier 'def' is never reassigned; use 'const' instead of 'let'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "endLine": 16,
                  "endColumn": 8,
                  "charOffset": 425,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/deprecation/other.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 421,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "const"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "unified-signatures",
          "level": "error",
          "message": {
            "text": "These overloads can be combined into one signature with an optional parameter."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 28,
                  "charOffset": 733,
                  "charLength": 11,
                  "snippet": {
                    "text": "foo: number"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "variable-name",
          "level": "error",
          "message": {
            "text": "variable name must be in lowerCamelCase, PascalCase or UPPER_CASE"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "endLine": 5,
                  "endColumn": 27,
                  "charOffset": 141,
                  "charLength": 4,
                  "snippet": {
                    "text": "_num"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "variable-name",
          "level": "error",
          "message": {
            "text": "variable name must be in lowerCamelCase, PascalCase or UPPER_CASE"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 21,
                  "charOffset": 764,
                  "charLength": 4,
                  "snippet": {
                    "text": "_foo"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other2.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 12,
                  "endLine": 3,
                  "endColumn": 12,
                  "charOffset": 44,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/deprecation/other2.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 44
                      },
                      "insertedContent": {
                        "text": "\r\n"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "prefer-const",
          "level": "error",
          "message": {
            "text": "Identifier 'x' is never reassigned; use 'const' instead of 'let'."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/deprecation/other2.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5,
                  "endLine": 2,
                  "endColumn": 6,
                  "charOffset": 24,
                  "charLength": 1,
                  "snippet": {
                    "text": "x"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/deprecation/other2.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 20,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "const"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "no-empty",
          "level": "error",
          "message": {
            "text": "block is empty"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/match-default-export-name/named.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 29,
                  "endLine": 1,
                  "endColumn": 31,
                  "charOffset": 28,
                  "charLength": 2,
                  "snippet": {
                    "text": "{}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "arrow-parens",
          "level": "error",
          "message": {
            "text": "Parentheses are required around the parameters of an arrow function definition"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 13,
                  "endLine": 30,
                  "endColumn": 18,
                  "charOffset": 1038,
                  "charLength": 5,
                  "snippet": {
                    "text": "match"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1038
                      },
                      "insertedContent": {
                        "text": "("
                      }
                    },
                    {
                      "deletedRegion": {
                        "charOffset": 1043
                      },
                      "insertedContent": {
                        "text": ")"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "arrow-parens",
          "level": "error",
          "message": {
            "text": "Parentheses are required around the parameters of an arrow function definition"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 15,
                  "charOffset": 1138,
                  "charLength": 5,
                  "snippet": {
                    "text": "match"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1138
                      },
                      "insertedContent": {
                        "text": "("
                      }
                    },
                    {
                      "deletedRegion": {
                        "charOffset": 1143
                      },
                      "insertedContent": {
                        "text": ")"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 21,
                  "endLine": 22,
                  "endColumn": 25,
                  "charOffset": 754,
                  "charLength": 4,
                  "snippet": {
                    "text": "'fs'"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 754,
                        "charLength": 4
                      },
                      "insertedContent": {
                        "text": "\"fs\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 23,
                  "endLine": 23,
                  "endColumn": 29,
                  "charOffset": 783,
                  "charLength": 6,
                  "snippet": {
                    "text": "'path'"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 783,
                        "charLength": 6
                      },
                      "insertedContent": {
                        "text": "\"path\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 44,
                  "endLine": 25,
                  "endColumn": 90,
                  "charOffset": 837,
                  "charLength": 46,
                  "snippet": {
                    "text": "'../../../src/rules/noIrregularWhitespaceRule'"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 837,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "\"../../../src/rules/noIrregularWhitespaceRule\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 23,
                  "endLine": 30,
                  "endColumn": 32,
                  "charOffset": 1048,
                  "charLength": 9,
                  "snippet": {
                    "text": "'\\\\u2029'"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1048,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "\"\\\\u2029\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 34,
                  "endLine": 30,
                  "endColumn": 43,
                  "charOffset": 1059,
                  "charLength": 9,
                  "snippet": {
                    "text": "'\\\\u2028'"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1059,
                        "charLength": 9
                      },
                      "insertedContent": {
                        "text": "\"\\\\u2028\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 6,
                  "charOffset": 1403,
                  "charLength": 2,
                  "snippet": {
                    "text": "''"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1403,
                        "charLength": 2
                      },
                      "insertedContent": {
                        "text": "\"\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "quotemark",
          "level": "error",
          "message": {
            "text": "' should be \""
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 24,
                  "endLine": 40,
                  "endColumn": 38,
                  "charOffset": 1542,
                  "charLength": 14,
                  "snippet": {
                    "text": "'let   foo;\\n'"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1542,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "\"let   foo;\\n\""
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "semicolon",
          "level": "error",
          "message": {
            "text": "Missing semicolon"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 61,
                  "endLine": 40,
                  "endColumn": 61,
                  "charOffset": 1579,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-irregular-whitespace/test.builder.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1579
                      },
                      "insertedContent": {
                        "text": ";"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-unnecessary-qualifier/b.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 24,
                  "endLine": 1,
                  "endColumn": 24,
                  "charOffset": 23,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-unsafe-any/default/commonjsModule.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 15,
                  "charOffset": 19,
                  "charLength": 14,
                  "snippet": {
                    "text": "namespace x {}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-empty-interface",
          "level": "error",
          "message": {
            "text": "An empty interface is equivalent to `{}`."
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-unsafe-any/default/es6Module.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 22,
                  "endLine": 7,
                  "endColumn": 27,
                  "charOffset": 169,
                  "charLength": 5,
                  "snippet": {
                    "text": "ITest"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-namespace",
          "level": "error",
          "message": {
            "text": "'namespace' and 'module' are disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-unsafe-any/default/es6Module.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 2,
                  "charOffset": 125,
                  "charLength": 55,
                  "snippet": {
                    "text": "export namespace NS {\r\n    export interface ITest {}\r\n}"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-unused-variable/default/node_modules/react.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 22,
                  "endLine": 1,
                  "endColumn": 22,
                  "charOffset": 21,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "eofline",
          "level": "error",
          "message": {
            "text": "file should end with a newline"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-unused-variable/default/node_modules/react/addons.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 20,
                  "endLine": 1,
                  "endColumn": 20,
                  "charOffset": 19,
                  "snippet": {
                    "text": ""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "class-name",
          "level": "error",
          "message": {
            "text": "Class name must be in pascal case"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-unused-variable/ignore-pattern/a.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 1,
                  "endColumn": 16,
                  "charOffset": 13,
                  "charLength": 2,
                  "snippet": {
                    "text": "_A"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-var-keyword",
          "level": "error",
          "message": {
            "text": "Forbidden 'var' keyword, use 'let' or 'const' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "src/tslint/test/rules/no-unused-variable/type-checked/a.test.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 11,
                  "charOffset": 26,
                  "charLength": 3,
                  "snippet": {
                    "text": "var"
                  }
                }
              }
            }
          ],
          "fixes": [
            {
              "fileChanges": [
                {
                  "fileLocation": {
                    "uri": "src/tslint/test/rules/no-unused-variable/type-checked/a.test.ts"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 26,
                        "charLength": 3
                      },
                      "insertedContent": {
                        "text": "let"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}