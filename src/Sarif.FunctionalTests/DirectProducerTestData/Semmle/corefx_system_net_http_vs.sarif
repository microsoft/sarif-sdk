{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Semmle",
        "version": "1.15.2"
      },
      "files": {
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/prerequisites/Web.config": {
          "mimeType": "text/xml",
          "contents": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0NCiAgRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIGNvbmZpZ3VyZSB5b3VyIEFTUC5ORVQgYXBwbGljYXRpb24sIHBsZWFzZSB2aXNpdA0KICBodHRwOi8vZ28ubWljcm9zb2Z0LmNvbS9md2xpbmsvP0xpbmtJZD0xNjk0MzMNCiAgLS0+DQo8Y29uZmlndXJhdGlvbj4NCiAgPHN5c3RlbS53ZWJTZXJ2ZXI+DQogICAgPG1vZHVsZXM+DQogICAgICA8YWRkIG5hbWU9IldlYkFwcGxpY2F0aW9uMSIgdHlwZT0iQmFzaWNBdXRoTW9kdWxlIi8+DQogICAgPC9tb2R1bGVzPg0KICA8L3N5c3RlbS53ZWJTZXJ2ZXI+DQogIDxzeXN0ZW0ud2ViPg0KICAgIDxjdXN0b21FcnJvcnMgbW9kZT0iT2ZmIiAvPg0KICA8L3N5c3RlbS53ZWI+DQo8L2NvbmZpZ3VyYXRpb24+DQo="
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/DefaultCredentialsTest.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpCookieProtocolTests.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs": {
          "mimeType": "text/x-csharp",
          "contents": "Ly8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLg0KLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS4NCi8vIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb24uDQoNCnVzaW5nIFN5c3RlbS5UZXh0Ow0KdXNpbmcgU3lzdGVtLlRocmVhZGluZy5UYXNrczsNCnVzaW5nIFh1bml0Ow0KdXNpbmcgWHVuaXQuQWJzdHJhY3Rpb25zOw0KDQpuYW1lc3BhY2UgU3lzdGVtLk5ldC5IdHRwLkZ1bmN0aW9uYWwuVGVzdHMNCnsNCiAgICB1c2luZyBDb25maWd1cmF0aW9uID0gU3lzdGVtLk5ldC5UZXN0LkNvbW1vbi5Db25maWd1cmF0aW9uOw0KDQogICAgLy8gTm90ZTogIERpc3Bvc2luZyB0aGUgSHR0cENsaWVudCBvYmplY3QgYXV0b21hdGljYWxseSBkaXNwb3NlcyB0aGUgaGFuZGxlciB3aXRoaW4uIFNvLCBpdCBpcyBub3QgbmVjZXNzYXJ5DQogICAgLy8gdG8gc2VwYXJhdGVseSBEaXNwb3NlIChvciBoYXZlIGEgJ3VzaW5nJyBzdGF0ZW1lbnQpIGZvciB0aGUgaGFuZGxlci4NCiAgICBbU2tpcE9uVGFyZ2V0RnJhbWV3b3JrKFRhcmdldEZyYW1ld29ya01vbmlrZXJzLlVhcCwgImRvdG5ldC9jb3JlZnggIzIwMDEwIildDQogICAgcHVibGljIGFic3RyYWN0IGNsYXNzIFBvc3RTY2VuYXJpb1Rlc3QgOiBIdHRwQ2xpZW50VGVzdEJhc2UNCiAgICB7DQogICAgICAgIHByaXZhdGUgY29uc3Qgc3RyaW5nIEV4cGVjdGVkQ29udGVudCA9ICJUZXN0IGNvbnRlc3QiOw0KICAgICAgICBwcml2YXRlIGNvbnN0IHN0cmluZyBVc2VyTmFtZSA9ICJ1c2VyMSI7DQogICAgICAgIHByaXZhdGUgY29uc3Qgc3RyaW5nIFBhc3N3b3JkID0gInBhc3N3b3JkMSI7DQogICAgICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFVyaSBCYXNpY0F1dGhTZXJ2ZXJVcmkgPQ0KICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5IdHRwLkJhc2ljQXV0aFVyaUZvckNyZWRzKGZhbHNlLCBVc2VyTmFtZSwgUGFzc3dvcmQpOw0KICAgICAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBVcmkgU2VjdXJlQmFzaWNBdXRoU2VydmVyVXJpID0NCiAgICAgICAgICAgIENvbmZpZ3VyYXRpb24uSHR0cC5CYXNpY0F1dGhVcmlGb3JDcmVkcyh0cnVlLCBVc2VyTmFtZSwgUGFzc3dvcmQpOw0KDQogICAgICAgIHByaXZhdGUgcmVhZG9ubHkgSVRlc3RPdXRwdXRIZWxwZXIgX291dHB1dDsNCg0KICAgICAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IG9iamVjdFtdW10gRWNob1NlcnZlcnMgPSBDb25maWd1cmF0aW9uLkh0dHAuRWNob1NlcnZlcnM7DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBvYmplY3RbXVtdIEJhc2ljQXV0aEVjaG9TZXJ2ZXJzID0NCiAgICAgICAgICAgIG5ldyBvYmplY3RbXVtdDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBuZXcgb2JqZWN0W10geyBCYXNpY0F1dGhTZXJ2ZXJVcmkgfSwNCiAgICAgICAgICAgICAgICAgICAgbmV3IG9iamVjdFtdIHsgU2VjdXJlQmFzaWNBdXRoU2VydmVyVXJpIH0NCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgIHB1YmxpYyBQb3N0U2NlbmFyaW9UZXN0KElUZXN0T3V0cHV0SGVscGVyIG91dHB1dCkNCiAgICAgICAgew0KICAgICAgICAgICAgX291dHB1dCA9IG91dHB1dDsNCiAgICAgICAgfQ0KDQogICAgICAgIFtPdXRlckxvb3BdIC8vIFRPRE86IElzc3VlICMxMTM0NQ0KICAgICAgICBbVGhlb3J5LCBNZW1iZXJEYXRhKG5hbWVvZihFY2hvU2VydmVycykpXQ0KICAgICAgICBwdWJsaWMgYXN5bmMgVGFzayBQb3N0Tm9Db250ZW50VXNpbmdDb250ZW50TGVuZ3RoU2VtYW50aWNzX1N1Y2Nlc3MoVXJpIHNlcnZlclVyaSkNCiAgICAgICAgew0KICAgICAgICAgICAgYXdhaXQgUG9zdEhlbHBlcihzZXJ2ZXJVcmksIHN0cmluZy5FbXB0eSwgbnVsbCwNCiAgICAgICAgICAgICAgICB1c2VDb250ZW50TGVuZ3RoVXBsb2FkOiB0cnVlLCB1c2VDaHVua2VkRW5jb2RpbmdVcGxvYWQ6IGZhbHNlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFtPdXRlckxvb3BdIC8vIFRPRE86IElzc3VlICMxMTM0NQ0KICAgICAgICBbVGhlb3J5LCBNZW1iZXJEYXRhKG5hbWVvZihFY2hvU2VydmVycykpXQ0KICAgICAgICBwdWJsaWMgYXN5bmMgVGFzayBQb3N0RW1wdHlDb250ZW50VXNpbmdDb250ZW50TGVuZ3RoU2VtYW50aWNzX1N1Y2Nlc3MoVXJpIHNlcnZlclVyaSkNCiAgICAgICAgew0KICAgICAgICAgICAgYXdhaXQgUG9zdEhlbHBlcihzZXJ2ZXJVcmksIHN0cmluZy5FbXB0eSwgbmV3IFN0cmluZ0NvbnRlbnQoc3RyaW5nLkVtcHR5KSwNCiAgICAgICAgICAgICAgICB1c2VDb250ZW50TGVuZ3RoVXBsb2FkOiB0cnVlLCB1c2VDaHVua2VkRW5jb2RpbmdVcGxvYWQ6IGZhbHNlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFtPdXRlckxvb3BdIC8vIFRPRE86IElzc3VlICMxMTM0NQ0KICAgICAgICBbVGhlb3J5LCBNZW1iZXJEYXRhKG5hbWVvZihFY2hvU2VydmVycykpXQ0KICAgICAgICBwdWJsaWMgYXN5bmMgVGFzayBQb3N0RW1wdHlDb250ZW50VXNpbmdDaHVua2VkRW5jb2RpbmdfU3VjY2VzcyhVcmkgc2VydmVyVXJpKQ0KICAgICAgICB7DQogICAgICAgICAgICBhd2FpdCBQb3N0SGVscGVyKHNlcnZlclVyaSwgc3RyaW5nLkVtcHR5LCBuZXcgU3RyaW5nQ29udGVudChzdHJpbmcuRW1wdHkpLA0KICAgICAgICAgICAgICAgIHVzZUNvbnRlbnRMZW5ndGhVcGxvYWQ6IGZhbHNlLCB1c2VDaHVua2VkRW5jb2RpbmdVcGxvYWQ6IHRydWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgW091dGVyTG9vcF0gLy8gVE9ETzogSXNzdWUgIzExMzQ1DQogICAgICAgIFtUaGVvcnksIE1lbWJlckRhdGEobmFtZW9mKEVjaG9TZXJ2ZXJzKSldDQogICAgICAgIHB1YmxpYyBhc3luYyBUYXNrIFBvc3RFbXB0eUNvbnRlbnRVc2luZ0NvbmZsaWN0aW5nU2VtYW50aWNzX1N1Y2Nlc3MoVXJpIHNlcnZlclVyaSkNCiAgICAgICAgew0KICAgICAgICAgICAgYXdhaXQgUG9zdEhlbHBlcihzZXJ2ZXJVcmksIHN0cmluZy5FbXB0eSwgbmV3IFN0cmluZ0NvbnRlbnQoc3RyaW5nLkVtcHR5KSwNCiAgICAgICAgICAgICAgICB1c2VDb250ZW50TGVuZ3RoVXBsb2FkOiB0cnVlLCB1c2VDaHVua2VkRW5jb2RpbmdVcGxvYWQ6IHRydWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgW091dGVyTG9vcF0gLy8gVE9ETzogSXNzdWUgIzExMzQ1DQogICAgICAgIFtUaGVvcnksIE1lbWJlckRhdGEobmFtZW9mKEVjaG9TZXJ2ZXJzKSldDQogICAgICAgIHB1YmxpYyBhc3luYyBUYXNrIFBvc3RVc2luZ0NvbnRlbnRMZW5ndGhTZW1hbnRpY3NfU3VjY2VzcyhVcmkgc2VydmVyVXJpKQ0KICAgICAgICB7DQogICAgICAgICAgICBhd2FpdCBQb3N0SGVscGVyKHNlcnZlclVyaSwgRXhwZWN0ZWRDb250ZW50LCBuZXcgU3RyaW5nQ29udGVudChFeHBlY3RlZENvbnRlbnQpLA0KICAgICAgICAgICAgICAgIHVzZUNvbnRlbnRMZW5ndGhVcGxvYWQ6IHRydWUsIHVzZUNodW5rZWRFbmNvZGluZ1VwbG9hZDogZmFsc2UpOw0KICAgICAgICB9DQoNCiAgICAgICAgW091dGVyTG9vcF0gLy8gVE9ETzogSXNzdWUgIzExMzQ1DQogICAgICAgIFtUaGVvcnksIE1lbWJlckRhdGEobmFtZW9mKEVjaG9TZXJ2ZXJzKSldDQogICAgICAgIHB1YmxpYyBhc3luYyBUYXNrIFBvc3RVc2luZ0NodW5rZWRFbmNvZGluZ19TdWNjZXNzKFVyaSBzZXJ2ZXJVcmkpDQogICAgICAgIHsNCiAgICAgICAgICAgIGF3YWl0IFBvc3RIZWxwZXIoc2VydmVyVXJpLCBFeHBlY3RlZENvbnRlbnQsIG5ldyBTdHJpbmdDb250ZW50KEV4cGVjdGVkQ29udGVudCksDQogICAgICAgICAgICAgICAgdXNlQ29udGVudExlbmd0aFVwbG9hZDogZmFsc2UsIHVzZUNodW5rZWRFbmNvZGluZ1VwbG9hZDogdHJ1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICBbT3V0ZXJMb29wXSAvLyBUT0RPOiBJc3N1ZSAjMTEzNDUNCiAgICAgICAgW1RoZW9yeSwgTWVtYmVyRGF0YShuYW1lb2YoRWNob1NlcnZlcnMpKV0NCiAgICAgICAgcHVibGljIGFzeW5jIFRhc2sgUG9zdFN5bmNCbG9ja2luZ0NvbnRlbnRVc2luZ0NodW5rZWRFbmNvZGluZ19TdWNjZXNzKFVyaSBzZXJ2ZXJVcmkpDQogICAgICAgIHsNCiAgICAgICAgICAgIGF3YWl0IFBvc3RIZWxwZXIoc2VydmVyVXJpLCBFeHBlY3RlZENvbnRlbnQsIG5ldyBTeW5jQmxvY2tpbmdDb250ZW50KEV4cGVjdGVkQ29udGVudCksDQogICAgICAgICAgICAgICAgdXNlQ29udGVudExlbmd0aFVwbG9hZDogZmFsc2UsIHVzZUNodW5rZWRFbmNvZGluZ1VwbG9hZDogdHJ1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICBbT3V0ZXJMb29wXSAvLyBUT0RPOiBJc3N1ZSAjMTEzNDUNCiAgICAgICAgW1RoZW9yeSwgTWVtYmVyRGF0YShuYW1lb2YoRWNob1NlcnZlcnMpKV0NCiAgICAgICAgcHVibGljIGFzeW5jIFRhc2sgUG9zdFJlcGVhdGVkRmx1c2hDb250ZW50VXNpbmdDaHVua2VkRW5jb2RpbmdfU3VjY2VzcyhVcmkgc2VydmVyVXJpKQ0KICAgICAgICB7DQogICAgICAgICAgICBhd2FpdCBQb3N0SGVscGVyKHNlcnZlclVyaSwgRXhwZWN0ZWRDb250ZW50LCBuZXcgUmVwZWF0ZWRGbHVzaENvbnRlbnQoRXhwZWN0ZWRDb250ZW50KSwNCiAgICAgICAgICAgICAgICB1c2VDb250ZW50TGVuZ3RoVXBsb2FkOiBmYWxzZSwgdXNlQ2h1bmtlZEVuY29kaW5nVXBsb2FkOiB0cnVlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFtPdXRlckxvb3BdIC8vIFRPRE86IElzc3VlICMxMTM0NQ0KICAgICAgICBbVGhlb3J5LCBNZW1iZXJEYXRhKG5hbWVvZihFY2hvU2VydmVycykpXQ0KICAgICAgICBwdWJsaWMgYXN5bmMgVGFzayBQb3N0VXNpbmdVc2luZ0NvbmZsaWN0aW5nU2VtYW50aWNzX1VzZXNDaHVua2VkU2VtYW50aWNzKFVyaSBzZXJ2ZXJVcmkpDQogICAgICAgIHsNCiAgICAgICAgICAgIGF3YWl0IFBvc3RIZWxwZXIoc2VydmVyVXJpLCBFeHBlY3RlZENvbnRlbnQsIG5ldyBTdHJpbmdDb250ZW50KEV4cGVjdGVkQ29udGVudCksDQogICAgICAgICAgICAgICAgdXNlQ29udGVudExlbmd0aFVwbG9hZDogdHJ1ZSwgdXNlQ2h1bmtlZEVuY29kaW5nVXBsb2FkOiB0cnVlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFtPdXRlckxvb3BdIC8vIFRPRE86IElzc3VlICMxMTM0NQ0KICAgICAgICBbVGhlb3J5LCBNZW1iZXJEYXRhKG5hbWVvZihFY2hvU2VydmVycykpXQ0KICAgICAgICBbU2tpcE9uVGFyZ2V0RnJhbWV3b3JrKFRhcmdldEZyYW1ld29ya01vbmlrZXJzLk5ldEZyYW1ld29yaywgIm5ldGZ4IGJlaGF2ZXMgZGlmZmVyZW50bHkgYW5kIHdpbGwgYnVmZmVyIGNvbnRlbnQgYW5kIHVzZSAnQ29udGVudC1MZW5ndGgnIHNlbWFudGljcyIpXQ0KICAgICAgICBwdWJsaWMgYXN5bmMgVGFzayBQb3N0VXNpbmdOb1NwZWNpZmllZFNlbWFudGljc19Vc2VzQ2h1bmtlZFNlbWFudGljcyhVcmkgc2VydmVyVXJpKQ0KICAgICAgICB7DQogICAgICAgICAgICBhd2FpdCBQb3N0SGVscGVyKHNlcnZlclVyaSwgRXhwZWN0ZWRDb250ZW50LCBuZXcgU3RyaW5nQ29udGVudChFeHBlY3RlZENvbnRlbnQpLA0KICAgICAgICAgICAgICAgIHVzZUNvbnRlbnRMZW5ndGhVcGxvYWQ6IGZhbHNlLCB1c2VDaHVua2VkRW5jb2RpbmdVcGxvYWQ6IGZhbHNlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFtPdXRlckxvb3BdIC8vIFRPRE86IElzc3VlICMxMTM0NQ0KICAgICAgICBbVGhlb3J5XQ0KICAgICAgICBbSW5saW5lRGF0YSg1ICogMTAyNCldDQogICAgICAgIFtJbmxpbmVEYXRhKDYzICogMTAyNCldDQogICAgICAgIHB1YmxpYyBhc3luYyBUYXNrIFBvc3RMb25nZXJDb250ZW50TGVuZ3Roc19Vc2VzQ2h1bmtlZFNlbWFudGljcyhpbnQgY29udGVudExlbmd0aCkNCiAgICAgICAgew0KICAgICAgICAgICAgdmFyIHJhbmQgPSBuZXcgUmFuZG9tKDQyKTsNCiAgICAgICAgICAgIHZhciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKGNvbnRlbnRMZW5ndGgpOw0KICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBjb250ZW50TGVuZ3RoOyBpKyspDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc2IuQXBwZW5kKChjaGFyKShyYW5kLk5leHQoMCwgMjYpICsgJ2EnKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzdHJpbmcgY29udGVudCA9IHNiLlRvU3RyaW5nKCk7DQoNCiAgICAgICAgICAgIGF3YWl0IFBvc3RIZWxwZXIoQ29uZmlndXJhdGlvbi5IdHRwLlJlbW90ZUVjaG9TZXJ2ZXIsIGNvbnRlbnQsIG5ldyBTdHJpbmdDb250ZW50KGNvbnRlbnQpLA0KICAgICAgICAgICAgICAgIHVzZUNvbnRlbnRMZW5ndGhVcGxvYWQ6IHRydWUsIHVzZUNodW5rZWRFbmNvZGluZ1VwbG9hZDogZmFsc2UpOw0KICAgICAgICB9DQoNCiAgICAgICAgW091dGVyTG9vcF0gLy8gVE9ETzogSXNzdWUgIzExMzQ1DQogICAgICAgIFtUaGVvcnksIE1lbWJlckRhdGEobmFtZW9mKEJhc2ljQXV0aEVjaG9TZXJ2ZXJzKSldDQogICAgICAgIHB1YmxpYyBhc3luYyBUYXNrIFBvc3RSZXdpbmRhYmxlQ29udGVudFVzaW5nQXV0aF9Ob1ByZUF1dGhlbnRpY2F0ZV9TdWNjZXNzKFVyaSBzZXJ2ZXJVcmkpDQogICAgICAgIHsNCiAgICAgICAgICAgIEh0dHBDb250ZW50IGNvbnRlbnQgPSBDdXN0b21Db250ZW50LkNyZWF0ZShFeHBlY3RlZENvbnRlbnQsIHRydWUpOw0KICAgICAgICAgICAgdmFyIGNyZWRlbnRpYWwgPSBuZXcgTmV0d29ya0NyZWRlbnRpYWwoVXNlck5hbWUsIFBhc3N3b3JkKTsNCiAgICAgICAgICAgIGF3YWl0IFBvc3RVc2luZ0F1dGhIZWxwZXIoc2VydmVyVXJpLCBFeHBlY3RlZENvbnRlbnQsIGNvbnRlbnQsIGNyZWRlbnRpYWwsIGZhbHNlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFtPdXRlckxvb3BdIC8vIFRPRE86IElzc3VlICMxMTM0NQ0KICAgICAgICBbVGhlb3J5LCBNZW1iZXJEYXRhKG5hbWVvZihCYXNpY0F1dGhFY2hvU2VydmVycykpXQ0KICAgICAgICBwdWJsaWMgYXN5bmMgVGFzayBQb3N0Tm9uUmV3aW5kYWJsZUNvbnRlbnRVc2luZ0F1dGhfTm9QcmVBdXRoZW50aWNhdGVfVGhyb3dzSHR0cFJlcXVlc3RFeGNlcHRpb24oVXJpIHNlcnZlclVyaSkNCiAgICAgICAgew0KICAgICAgICAgICAgSHR0cENvbnRlbnQgY29udGVudCA9IEN1c3RvbUNvbnRlbnQuQ3JlYXRlKEV4cGVjdGVkQ29udGVudCwgZmFsc2UpOw0KICAgICAgICAgICAgdmFyIGNyZWRlbnRpYWwgPSBuZXcgTmV0d29ya0NyZWRlbnRpYWwoVXNlck5hbWUsIFBhc3N3b3JkKTsNCiAgICAgICAgICAgIGF3YWl0IEFzc2VydC5UaHJvd3NBc3luYzxIdHRwUmVxdWVzdEV4Y2VwdGlvbj4oKCkgPT4gDQogICAgICAgICAgICAgICAgUG9zdFVzaW5nQXV0aEhlbHBlcihzZXJ2ZXJVcmksIEV4cGVjdGVkQ29udGVudCwgY29udGVudCwgY3JlZGVudGlhbCwgcHJlQXV0aGVudGljYXRlOiBmYWxzZSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgW091dGVyTG9vcF0gLy8gVE9ETzogSXNzdWUgIzExMzQ1DQogICAgICAgIFtUaGVvcnksIE1lbWJlckRhdGEobmFtZW9mKEJhc2ljQXV0aEVjaG9TZXJ2ZXJzKSldDQogICAgICAgIHB1YmxpYyBhc3luYyBUYXNrIFBvc3ROb25SZXdpbmRhYmxlQ29udGVudFVzaW5nQXV0aF9QcmVBdXRoZW50aWNhdGVfU3VjY2VzcyhVcmkgc2VydmVyVXJpKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAoSXNXaW5IdHRwSGFuZGxlcikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAvLyBJc3N1ZSAjOTIyOA0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgSHR0cENvbnRlbnQgY29udGVudCA9IEN1c3RvbUNvbnRlbnQuQ3JlYXRlKEV4cGVjdGVkQ29udGVudCwgZmFsc2UpOw0KICAgICAgICAgICAgdmFyIGNyZWRlbnRpYWwgPSBuZXcgTmV0d29ya0NyZWRlbnRpYWwoVXNlck5hbWUsIFBhc3N3b3JkKTsNCiAgICAgICAgICAgIGF3YWl0IFBvc3RVc2luZ0F1dGhIZWxwZXIoc2VydmVyVXJpLCBFeHBlY3RlZENvbnRlbnQsIGNvbnRlbnQsIGNyZWRlbnRpYWwsIHByZUF1dGhlbnRpY2F0ZTogdHJ1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICBbT3V0ZXJMb29wXSAvLyBUT0RPOiBJc3N1ZSAjMTEzNDUNCiAgICAgICAgW1RoZW9yeSwgTWVtYmVyRGF0YShuYW1lb2YoRWNob1NlcnZlcnMpKV0NCiAgICAgICAgcHVibGljIGFzeW5jIFRhc2sgUG9zdEFzeW5jX0VtcHR5Q29udGVudF9Db250ZW50VHlwZUhlYWRlck5vdFNlbnQoVXJpIHNlcnZlclVyaSkNCiAgICAgICAgew0KICAgICAgICAgICAgdXNpbmcgKEh0dHBDbGllbnQgY2xpZW50ID0gQ3JlYXRlSHR0cENsaWVudCgpKQ0KICAgICAgICAgICAgdXNpbmcgKEh0dHBSZXNwb25zZU1lc3NhZ2UgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuUG9zdEFzeW5jKHNlcnZlclVyaSwgbnVsbCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgc3RyaW5nIHJlc3BvbnNlQ29udGVudCA9IGF3YWl0IHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKTsNCiAgICAgICAgICAgICAgICBib29sIHNlbnRDb250ZW50VHlwZSA9IFRlc3RIZWxwZXIuSnNvbk1lc3NhZ2VDb250YWluc0tleShyZXNwb25zZUNvbnRlbnQsICJDb250ZW50LVR5cGUiKTsNCg0KICAgICAgICAgICAgICAgIEFzc2VydC5GYWxzZShzZW50Q29udGVudFR5cGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSBhc3luYyBUYXNrIFBvc3RIZWxwZXIoDQogICAgICAgICAgICBVcmkgc2VydmVyVXJpLA0KICAgICAgICAgICAgc3RyaW5nIHJlcXVlc3RCb2R5LA0KICAgICAgICAgICAgSHR0cENvbnRlbnQgcmVxdWVzdENvbnRlbnQsDQogICAgICAgICAgICBib29sIHVzZUNvbnRlbnRMZW5ndGhVcGxvYWQsDQogICAgICAgICAgICBib29sIHVzZUNodW5rZWRFbmNvZGluZ1VwbG9hZCkNCiAgICAgICAgew0KICAgICAgICAgICAgdXNpbmcgKEh0dHBDbGllbnQgY2xpZW50ID0gQ3JlYXRlSHR0cENsaWVudCgpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0Q29udGVudCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZUNvbnRlbnRMZW5ndGhVcGxvYWQpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IENvbnRlbnQtTGVuZ3RoIGlzIHBvcHVsYXRlZCAoc2VlIGlzc3VlICMyNzI0NSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDb250ZW50LkhlYWRlcnMuQ29udGVudExlbmd0aCA9IHJlcXVlc3RDb250ZW50LkhlYWRlcnMuQ29udGVudExlbmd0aDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDb250ZW50LkhlYWRlcnMuQ29udGVudExlbmd0aCA9IG51bGw7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYgKHVzZUNodW5rZWRFbmNvZGluZ1VwbG9hZCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGNsaWVudC5EZWZhdWx0UmVxdWVzdEhlYWRlcnMuVHJhbnNmZXJFbmNvZGluZ0NodW5rZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHVzaW5nIChIdHRwUmVzcG9uc2VNZXNzYWdlIHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LlBvc3RBc3luYyhzZXJ2ZXJVcmksIHJlcXVlc3RDb250ZW50KSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIEFzc2VydC5FcXVhbChIdHRwU3RhdHVzQ29kZS5PSywgcmVzcG9uc2UuU3RhdHVzQ29kZSk7DQogICAgICAgICAgICAgICAgICAgIHN0cmluZyByZXNwb25zZUNvbnRlbnQgPSBhd2FpdCByZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCk7DQogICAgICAgICAgICAgICAgICAgIF9vdXRwdXQuV3JpdGVMaW5lKHJlc3BvbnNlQ29udGVudCk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VDb250ZW50TGVuZ3RoVXBsb2FkICYmICF1c2VDaHVua2VkRW5jb2RpbmdVcGxvYWQpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVzZUNodW5rZWRFbmNvZGluZ1VwbG9hZCA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBUZXN0SGVscGVyLlZlcmlmeVJlc3BvbnNlQm9keSgNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlQ29udGVudCwNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLkNvbnRlbnQuSGVhZGVycy5Db250ZW50TUQ1LA0KICAgICAgICAgICAgICAgICAgICAgICAgdXNlQ2h1bmtlZEVuY29kaW5nVXBsb2FkLA0KICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEJvZHkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gICAgICAgICAgDQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIGFzeW5jIFRhc2sgUG9zdFVzaW5nQXV0aEhlbHBlcigNCiAgICAgICAgICAgIFVyaSBzZXJ2ZXJVcmksDQogICAgICAgICAgICBzdHJpbmcgcmVxdWVzdEJvZHksDQogICAgICAgICAgICBIdHRwQ29udGVudCByZXF1ZXN0Q29udGVudCwNCiAgICAgICAgICAgIE5ldHdvcmtDcmVkZW50aWFsIGNyZWRlbnRpYWwsDQogICAgICAgICAgICBib29sIHByZUF1dGhlbnRpY2F0ZSkNCiAgICAgICAgew0KICAgICAgICAgICAgSHR0cENsaWVudEhhbmRsZXIgaGFuZGxlciA9IENyZWF0ZUh0dHBDbGllbnRIYW5kbGVyKCk7DQogICAgICAgICAgICBoYW5kbGVyLlByZUF1dGhlbnRpY2F0ZSA9IHByZUF1dGhlbnRpY2F0ZTsNCiAgICAgICAgICAgIGhhbmRsZXIuQ3JlZGVudGlhbHMgPSBjcmVkZW50aWFsOw0KICAgICAgICAgICAgdXNpbmcgKHZhciBjbGllbnQgPSBuZXcgSHR0cENsaWVudChoYW5kbGVyKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAvLyBTZW5kIEhFQUQgcmVxdWVzdCB0byBoZWxwIGJ5cGFzcyB0aGUgNDAxIGF1dGggY2hhbGxlbmdlIGZvciB0aGUgbGF0dGVyIFBPU1QgYXNzdW1pbmcNCiAgICAgICAgICAgICAgICAvLyB0aGF0IHRoZSBhdXRoZW50aWNhdGlvbiB3aWxsIGJlIGNhY2hlZCBhbmQgcmUtdXNlZCBsYXRlciB3aGVuIFByZUF1dGhlbnRpY2F0ZSBpcyB0cnVlLg0KICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IEh0dHBSZXF1ZXN0TWVzc2FnZShIdHRwTWV0aG9kLkhlYWQsIHNlcnZlclVyaSk7DQogICAgICAgICAgICAgICAgdXNpbmcgKEh0dHBSZXNwb25zZU1lc3NhZ2UgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuU2VuZEFzeW5jKHJlcXVlc3QpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgQXNzZXJ0LkVxdWFsKEh0dHBTdGF0dXNDb2RlLk9LLCByZXNwb25zZS5TdGF0dXNDb2RlKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyBOb3cgc2VuZCBQT1NUIHJlcXVlc3QuDQogICAgICAgICAgICAgICAgcmVxdWVzdCA9IG5ldyBIdHRwUmVxdWVzdE1lc3NhZ2UoSHR0cE1ldGhvZC5Qb3N0LCBzZXJ2ZXJVcmkpOw0KICAgICAgICAgICAgICAgIHJlcXVlc3QuQ29udGVudCA9IHJlcXVlc3RDb250ZW50Ow0KICAgICAgICAgICAgICAgIHJlcXVlc3RDb250ZW50LkhlYWRlcnMuQ29udGVudExlbmd0aCA9IG51bGw7DQogICAgICAgICAgICAgICAgcmVxdWVzdC5IZWFkZXJzLlRyYW5zZmVyRW5jb2RpbmdDaHVua2VkID0gdHJ1ZTsNCg0KICAgICAgICAgICAgICAgIHVzaW5nIChIdHRwUmVzcG9uc2VNZXNzYWdlIHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LlNlbmRBc3luYyhyZXF1ZXN0KSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIEFzc2VydC5FcXVhbChIdHRwU3RhdHVzQ29kZS5PSywgcmVzcG9uc2UuU3RhdHVzQ29kZSk7DQogICAgICAgICAgICAgICAgICAgIHN0cmluZyByZXNwb25zZUNvbnRlbnQgPSBhd2FpdCByZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCk7DQogICAgICAgICAgICAgICAgICAgIF9vdXRwdXQuV3JpdGVMaW5lKHJlc3BvbnNlQ29udGVudCk7DQoNCiAgICAgICAgICAgICAgICAgICAgVGVzdEhlbHBlci5WZXJpZnlSZXNwb25zZUJvZHkoDQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZUNvbnRlbnQsDQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5Db250ZW50LkhlYWRlcnMuQ29udGVudE1ENSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Net.Http/tests/UnitTests/DigestAuthenticationTests.cs": {
          "mimeType": "text/x-csharp",
          "contents": "Ly8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLg0KLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS4NCi8vIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb24uDQoNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOw0KdXNpbmcgU3lzdGVtLk5ldC5IdHRwOw0KdXNpbmcgWHVuaXQ7DQoNCm5hbWVzcGFjZSBTeXN0ZW0uTmV0Lkh0dHAuVGVzdHMNCnsNCiAgICBwdWJsaWMgY2xhc3MgRGlnZXN0QXV0aGVudGljYXRpb25UZXN0cw0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTGlzdDxzdHJpbmc+IHNfa2V5TGlzdFdpdGhDb3VudFR3byA9IG5ldyBMaXN0PHN0cmluZz4geyAia2V5MSIsICJrZXkyIiB9Ow0KICAgICAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBMaXN0PHN0cmluZz4gc192YWx1ZUxpc3RXaXRoQ291bnRUd28gPSBuZXcgTGlzdDxzdHJpbmc+IHsgInZhbHVlMSIsICJ2YWx1ZTIiIH07DQogICAgICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IExpc3Q8c3RyaW5nPiBzX2xpc3RXaXRoQ291bnRPbmUgPSBuZXcgTGlzdDxzdHJpbmc+IHsgIml0ZW0xIiB9Ow0KICAgICAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBMaXN0PHN0cmluZz4gc19lbXB0eVN0cmluZ0xpc3QgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQoNCiAgICAgICAgW1RoZW9yeV0NCiAgICAgICAgW01lbWJlckRhdGEobmFtZW9mKERpZ2VzdFJlc3BvbnNlX0NoYWxsZW5nZV9UZXN0RGF0YSkpXQ0KICAgICAgICBwdWJsaWMgdm9pZCBEaWdlc3RSZXNwb25zZV9QYXJzZV9TdWNjZWVkcyhzdHJpbmcgY2hhbGxlbmdlLCBMaXN0PHN0cmluZz4ga2V5cywgTGlzdDxzdHJpbmc+IHZhbHVlcykNCiAgICAgICAgew0KICAgICAgICAgICAgQXV0aGVudGljYXRpb25IZWxwZXIuRGlnZXN0UmVzcG9uc2UgZGlnZXN0UmVzcG9uc2UgPSBuZXcgQXV0aGVudGljYXRpb25IZWxwZXIuRGlnZXN0UmVzcG9uc2UoY2hhbGxlbmdlKTsNCiAgICAgICAgICAgIEFzc2VydC5FcXVhbChrZXlzLkNvdW50LCBkaWdlc3RSZXNwb25zZS5QYXJhbWV0ZXJzLkNvdW50KTsNCiAgICAgICAgICAgIEFzc2VydC5FcXVhbCh2YWx1ZXMuQ291bnQsIGRpZ2VzdFJlc3BvbnNlLlBhcmFtZXRlcnMuQ291bnQpOw0KICAgICAgICAgICAgQXNzZXJ0LkVxdWFsKGtleXMsIGRpZ2VzdFJlc3BvbnNlLlBhcmFtZXRlcnMuS2V5cyk7DQogICAgICAgICAgICBBc3NlcnQuRXF1YWwodmFsdWVzLCBkaWdlc3RSZXNwb25zZS5QYXJhbWV0ZXJzLlZhbHVlcyk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIElFbnVtZXJhYmxlPG9iamVjdFtdPiBEaWdlc3RSZXNwb25zZV9DaGFsbGVuZ2VfVGVzdERhdGEoKQ0KICAgICAgICB7DQogICAgICAgICAgICB5aWVsZCByZXR1cm4gbmV3IG9iamVjdFtdIHsgImtleTE9dmFsdWUxLGtleTI9dmFsdWUyIiwgc19rZXlMaXN0V2l0aENvdW50VHdvLCBzX3ZhbHVlTGlzdFdpdGhDb3VudFR3byB9Ow0KICAgICAgICAgICAgeWllbGQgcmV0dXJuIG5ldyBvYmplY3RbXSB7ICJcdGtleTE9PT12YWx1ZTEsa2V5MiBcdD09PVx0dmFsdWUyIiwgc19rZXlMaXN0V2l0aENvdW50VHdvLCBzX3ZhbHVlTGlzdFdpdGhDb3VudFR3byB9Ow0KICAgICAgICAgICAgeWllbGQgcmV0dXJuIG5ldyBvYmplY3RbXSB7ICIgICAga2V5MSA9IHZhbHVlMSwga2V5MiA9ICAgIHZhbHVlMiwiLCBzX2tleUxpc3RXaXRoQ291bnRUd28sIHNfdmFsdWVMaXN0V2l0aENvdW50VHdvIH07DQogICAgICAgICAgICB5aWVsZCByZXR1cm4gbmV3IG9iamVjdFtdIHsgIml0ZW0xID09PSBpdGVtMSxrZXkyPSwgdmFsdWUyIiwgc19saXN0V2l0aENvdW50T25lLCBzX2xpc3RXaXRoQ291bnRPbmUgfTsNCiAgICAgICAgICAgIHlpZWxkIHJldHVybiBuZXcgb2JqZWN0W10geyAiaXRlbTEsPT1pdGVtMSwsLCAgICBrZXkyPVwidmFsdWUyXCIsIGtleTMgbSIsIG5ldyBMaXN0PHN0cmluZz4geyAiaXRlbTEsIiB9LCBzX2xpc3RXaXRoQ291bnRPbmUgfTsNCiAgICAgICAgICAgIHlpZWxkIHJldHVybiBuZXcgb2JqZWN0W10geyAia2V5MT0gXCJ2YWx1ZTEgICBcIixrZXkyICA9ICBcInYgYWx1I2UyXCIgICAsIiwgc19rZXlMaXN0V2l0aENvdW50VHdvLCBuZXcgTGlzdDxzdHJpbmc+IHsgInZhbHVlMSAgICIsICJ2IGFsdSNlMiJ9IH07DQogICAgICAgICAgICB5aWVsZCByZXR1cm4gbmV3IG9iamVjdFtdIHsgImtleTEgICAiLCBzX2VtcHR5U3RyaW5nTGlzdCwgc19lbXB0eVN0cmluZ0xpc3QgfTsNCiAgICAgICAgICAgIHlpZWxkIHJldHVybiBuZXcgb2JqZWN0W10geyAiPT09PT0iLCBzX2VtcHR5U3RyaW5nTGlzdCwgc19lbXB0eVN0cmluZ0xpc3QgfTsNCiAgICAgICAgICAgIHlpZWxkIHJldHVybiBuZXcgb2JqZWN0W10geyAiLCwiLCBzX2VtcHR5U3RyaW5nTGlzdCwgc19lbXB0eVN0cmluZ0xpc3QgfTsNCiAgICAgICAgICAgIHlpZWxkIHJldHVybiBuZXcgb2JqZWN0W10geyAiPSw9Iiwgc19lbXB0eVN0cmluZ0xpc3QsIHNfZW1wdHlTdHJpbmdMaXN0IH07DQogICAgICAgICAgICB5aWVsZCByZXR1cm4gbmV3IG9iamVjdFtdIHsgIj12YWx1ZTEsa2V5Mj0sIiwgc19lbXB0eVN0cmluZ0xpc3QsIHNfZW1wdHlTdHJpbmdMaXN0IH07DQogICAgICAgICAgICB5aWVsZCByZXR1cm4gbmV3IG9iamVjdFtdIHsgImtleTFcdG09IHZhbHVlMSIsIHNfZW1wdHlTdHJpbmdMaXN0LCBzX2VtcHR5U3RyaW5nTGlzdCB9Ow0KICAgICAgICB9DQoNCiAgICAgICAgW1RoZW9yeV0NCiAgICAgICAgW0lubGluZURhdGEoInJlYWxtPVwiTmV0Q29yZVwiLCBub25jZT1cInFNUnFXZ0FBQUFBUU1qSUFCZ0FBQUZ3RWlFd0FBQUFBXCIsIHFvcD1cImF1dGhcIiwgc3RhbGU9ZmFsc2UiLCB0cnVlKV0NCiAgICAgICAgW0lubGluZURhdGEoInJlYWxtPVwiTmV0Q29yZVwiLCBub25jZT1cInFNUnFXZ0FBQUFBUU1qSUFCZ0FBQUZ3RWlFd0FBQUFBXCIiLCB0cnVlKV0NCiAgICAgICAgW0lubGluZURhdGEoIm5vbmNlPVwicU1ScVdnQUFBQUFRTWpJQUJnQUFBRndFaUV3QUFBQUFcIiwgcW9wPVwiYXV0aFwiLCBzdGFsZT1mYWxzZSIsIGZhbHNlKV0NCiAgICAgICAgW0lubGluZURhdGEoInJlYWxtPVwiTmV0Q29yZVwiLCBxb3A9XCJhdXRoXCIsIHN0YWxlPWZhbHNlIiwgZmFsc2UpXQ0KICAgICAgICBwdWJsaWMgYXN5bmMgdm9pZCBEaWdlc3RSZXNwb25zZV9BdXRoVG9rZW5fSGFuZGxpbmcoc3RyaW5nIHJlc3BvbnNlLCBib29sIGV4cGVjdGVkUmVzdWx0KQ0KICAgICAgICB7DQogICAgICAgICAgICBOZXR3b3JrQ3JlZGVudGlhbCBjcmVkZW50aWFsID0gbmV3IE5ldHdvcmtDcmVkZW50aWFsKCJmb28iLCJiYXIiKTsNCiAgICAgICAgICAgIEF1dGhlbnRpY2F0aW9uSGVscGVyLkRpZ2VzdFJlc3BvbnNlIGRpZ2VzdFJlc3BvbnNlID0gbmV3IEF1dGhlbnRpY2F0aW9uSGVscGVyLkRpZ2VzdFJlc3BvbnNlKHJlc3BvbnNlKTsNCiAgICAgICAgICAgIEh0dHBSZXF1ZXN0TWVzc2FnZSByZXF1ZXN0ID0gbmV3IEh0dHBSZXF1ZXN0TWVzc2FnZShIdHRwTWV0aG9kLkdldCwgImh0dHA6Ly9taWNyb3NvZnQuY29tLyIpOw0KICAgICAgICAgICAgc3RyaW5nIHBhcmFtZXRlciA9IGF3YWl0IEF1dGhlbnRpY2F0aW9uSGVscGVyLkdldERpZ2VzdFRva2VuRm9yQ3JlZGVudGlhbChjcmVkZW50aWFsLCByZXF1ZXN0LCBkaWdlc3RSZXNwb25zZSkuQ29uZmlndXJlQXdhaXQoZmFsc2UpOw0KDQogICAgICAgICAgICBBc3NlcnQuRXF1YWwoZXhwZWN0ZWRSZXN1bHQsIHBhcmFtZXRlciAhPSBudWxsKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="
        }
      },
      "results": [
        {
          "ruleId": "cs/web/missing-global-error-handler",
          "level": "warning",
          "message": "'customErrors' mode set to off in Web.config, and no 'Application_Error' handler specified in the global.asax file.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/prerequisites/Web.config",
                "region": {
                  "startLine": 13,
                  "startColumn": -1,
                  "length": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/web/missing-x-frame-options",
          "level": "warning",
          "message": "Configuration file is missing the X-Frame-Options setting.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/prerequisites/Web.config"
              }
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"notarealuser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/DefaultCredentialsTest.cs",
                "region": {
                  "startLine": 130,
                  "startColumn": 44,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/DefaultCredentialsTest.cs",
                "region": {
                  "startLine": 130,
                  "startColumn": 44,
                  "length": 14
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/DefaultCredentialsTest.cs",
                "region": {
                  "startLine": 130,
                  "startColumn": 22,
                  "length": 47
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"123456\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/DefaultCredentialsTest.cs",
                "region": {
                  "startLine": 130,
                  "startColumn": 60,
                  "length": 8
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/DefaultCredentialsTest.cs",
                "region": {
                  "startLine": 130,
                  "startColumn": 60,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/DefaultCredentialsTest.cs",
                "region": {
                  "startLine": 130,
                  "startColumn": 22,
                  "length": 47
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 32,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 90,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 58,
                  "length": 49
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 32,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 111,
                  "startColumn": 68,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 111,
                  "startColumn": 36,
                  "length": 49
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 32,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 70,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 38,
                  "length": 49
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testusername\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 80,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 58,
                  "length": 49
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testusername\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 111,
                  "startColumn": 58,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 111,
                  "startColumn": 36,
                  "length": 49
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testusername\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 60,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 38,
                  "length": 49
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"wronguser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 137,
                  "length": 11
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 137,
                  "length": 11
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 115,
                  "length": 51
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"wrongpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 150,
                  "length": 15
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 150,
                  "length": 15
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 115,
                  "length": 51
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"username\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 34,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 34,
                  "length": 10
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 12,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 46,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 46,
                  "length": 10
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 12,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"rightusername\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 47,
                  "length": 15
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 47,
                  "length": 15
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 25,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"rightpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 64,
                  "length": 15
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 64,
                  "length": 15
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 25,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"wrongusername\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 52,
                  "length": 15
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 52,
                  "length": 15
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 30,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"wrongpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 69,
                  "length": 15
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 69,
                  "length": 15
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 30,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"UsernameNotUsed\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 150,
                  "startColumn": 56,
                  "length": 17
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 150,
                  "startColumn": 56,
                  "length": 17
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 150,
                  "startColumn": 34,
                  "length": 59
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"PasswordNotUsed\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 150,
                  "startColumn": 75,
                  "length": 17
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 150,
                  "startColumn": 75,
                  "length": 17
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.DefaultProxyCredentials.cs",
                "region": {
                  "startLine": 150,
                  "startColumn": 34,
                  "length": 59
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"rightusername\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 76,
                  "length": 15
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 76,
                  "length": 15
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 54,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"rightpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 93,
                  "length": 15
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 93,
                  "length": 15
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.ServerCertificates.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 54,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testuser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 32,
                  "startColumn": 32,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 71,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 49,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 32,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 81,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 49,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"username\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 34,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 34,
                  "length": 10
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 12,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 46,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 46,
                  "length": 10
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 12,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testusername\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 2992,
                  "startColumn": 32,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 2996,
                  "startColumn": 39,
                  "length": 16
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 2996,
                  "startColumn": 17,
                  "length": 57
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 2993,
                  "startColumn": 32,
                  "length": 14
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 2996,
                  "startColumn": 57,
                  "length": 16
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 2996,
                  "startColumn": 17,
                  "length": 57
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"username\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3032,
                  "startColumn": 50,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3032,
                  "startColumn": 50,
                  "length": 10
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3032,
                  "startColumn": 28,
                  "length": 45
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3032,
                  "startColumn": 62,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3032,
                  "startColumn": 62,
                  "length": 10
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3032,
                  "startColumn": 28,
                  "length": 45
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"username\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3033,
                  "startColumn": 50,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3033,
                  "startColumn": 50,
                  "length": 10
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3033,
                  "startColumn": 28,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3033,
                  "startColumn": 62,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3033,
                  "startColumn": 62,
                  "length": 10
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3033,
                  "startColumn": 28,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"user:name\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3042,
                  "startColumn": 50,
                  "length": 11
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3042,
                  "startColumn": 50,
                  "length": 11
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3042,
                  "startColumn": 28,
                  "length": 46
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3042,
                  "startColumn": 63,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3042,
                  "startColumn": 63,
                  "length": 10
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3042,
                  "startColumn": 28,
                  "length": 46
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"username\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3043,
                  "startColumn": 50,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3043,
                  "startColumn": 50,
                  "length": 10
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3043,
                  "startColumn": 28,
                  "length": 58
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3043,
                  "startColumn": 62,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3043,
                  "startColumn": 62,
                  "length": 10
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 3043,
                  "startColumn": 28,
                  "length": 58
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"unused\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 553,
                  "startColumn": 44,
                  "length": 8
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 553,
                  "startColumn": 44,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 553,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"unused\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 553,
                  "startColumn": 54,
                  "length": 8
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 553,
                  "startColumn": 54,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs",
                "region": {
                  "startLine": 553,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"user\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpCookieProtocolTests.cs",
                "region": {
                  "startLine": 545,
                  "startColumn": 44,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpCookieProtocolTests.cs",
                "region": {
                  "startLine": 545,
                  "startColumn": 44,
                  "length": 6
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpCookieProtocolTests.cs",
                "region": {
                  "startLine": 545,
                  "startColumn": 22,
                  "length": 37
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"pass\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpCookieProtocolTests.cs",
                "region": {
                  "startLine": 545,
                  "startColumn": 52,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpCookieProtocolTests.cs",
                "region": {
                  "startLine": 545,
                  "startColumn": 52,
                  "length": 6
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/HttpCookieProtocolTests.cs",
                "region": {
                  "startLine": 545,
                  "startColumn": 22,
                  "length": 37
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"user1\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 32,
                  "length": 7
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 147,
                  "startColumn": 39,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 147,
                  "startColumn": 17,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"user1\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 32,
                  "length": 7
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 156,
                  "startColumn": 39,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 156,
                  "startColumn": 17,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"user1\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 32,
                  "length": 7
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 172,
                  "startColumn": 39,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 172,
                  "startColumn": 17,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password1\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 32,
                  "length": 11
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 147,
                  "startColumn": 49,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 147,
                  "startColumn": 17,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password1\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 32,
                  "length": 11
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 156,
                  "startColumn": 49,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 156,
                  "startColumn": 17,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password1\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 32,
                  "length": 11
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 172,
                  "startColumn": 49,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioTest.cs",
                "region": {
                  "startLine": 172,
                  "startColumn": 17,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testuser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 44,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 54,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testuser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 44,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 60,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 54,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testuser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 87,
                  "startColumn": 44,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 87,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 84,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 87,
                  "startColumn": 54,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 87,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testuser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 111,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 115,
                  "startColumn": 44,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 115,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 115,
                  "startColumn": 54,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 115,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"testuser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 139,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 143,
                  "startColumn": 44,
                  "length": 8
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 143,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 140,
                  "startColumn": 18,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 143,
                  "startColumn": 54,
                  "length": 8
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/PostScenarioUWPTest.cs",
                "region": {
                  "startLine": 143,
                  "startColumn": 22,
                  "length": 41
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"username\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1052,
                  "startColumn": 43,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1052,
                  "startColumn": 43,
                  "length": 10
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1052,
                  "startColumn": 21,
                  "length": 45
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1052,
                  "startColumn": 55,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1052,
                  "startColumn": 55,
                  "length": 10
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1052,
                  "startColumn": 21,
                  "length": 45
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"username\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1065,
                  "startColumn": 43,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1065,
                  "startColumn": 43,
                  "length": 10
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1065,
                  "startColumn": 21,
                  "length": 45
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"password\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1065,
                  "startColumn": 55,
                  "length": 10
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1065,
                  "startColumn": 55,
                  "length": 10
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1065,
                  "startColumn": 21,
                  "length": 45
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"anotheruser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1303,
                  "startColumn": 87,
                  "length": 13
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1303,
                  "startColumn": 87,
                  "length": 13
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1303,
                  "startColumn": 65,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"anotherpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1303,
                  "startColumn": 102,
                  "length": 17
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1303,
                  "startColumn": 102,
                  "length": 17
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1303,
                  "startColumn": 65,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"anotheruser\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1304,
                  "startColumn": 99,
                  "length": 13
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1304,
                  "startColumn": 99,
                  "length": 13
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1304,
                  "startColumn": 77,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"anotherpassword\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1304,
                  "startColumn": 114,
                  "length": 17
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1304,
                  "startColumn": 114,
                  "length": 17
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs",
                "region": {
                  "startLine": 1304,
                  "startColumn": 77,
                  "length": 55
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"foo\" flows to the [userName] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/UnitTests/DigestAuthenticationTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 53,
                  "length": 5
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/UnitTests/DigestAuthenticationTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 53,
                  "length": 5
                }
              },
              "message": "userName"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/UnitTests/DigestAuthenticationTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 31,
                  "length": 34
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"bar\" flows to the [password] parameter in [object creation of type NetworkCredential].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/UnitTests/DigestAuthenticationTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 59,
                  "length": 5
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/UnitTests/DigestAuthenticationTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 59,
                  "length": 5
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Net.Http/tests/UnitTests/DigestAuthenticationTests.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 31,
                  "length": 34
                }
              },
              "message": "object creation of type NetworkCredential"
            }
          ]
        }
      ],
      "rules": {
        "cs/ldap-injection": {
          "id": "cs/ldap-injection",
          "name": "cs/ldap-injection",
          "shortDescription": "LDAP query built from user-controlled sources",
          "fullDescription": "Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-090"
],
            "kind": "problem",
            "precision": "medium",
            "name": "LDAP query built from user-controlled sources",
            "description": "Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
            "id": "cs/ldap-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-090/LDAPInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/xpath-injection": {
          "id": "cs/xml/xpath-injection",
          "name": "cs/xml/xpath-injection",
          "shortDescription": "XPath injection",
          "fullDescription": "Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-643"
],
            "kind": "problem",
            "precision": "medium",
            "name": "XPath injection",
            "description": "Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user.",
            "id": "cs/xml/xpath-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-643/XPathInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/command-line-injection": {
          "id": "cs/command-line-injection",
          "name": "cs/command-line-injection",
          "shortDescription": "Uncontrolled command line",
          "fullDescription": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "correctness",
  "security",
  "external/cwe/cwe-078",
  "external/cwe/cwe-088"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled command line",
            "description": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
            "id": "cs/command-line-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-078/CommandInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/directory-browse-enabled": {
          "id": "cs/web/directory-browse-enabled",
          "name": "cs/web/directory-browse-enabled",
          "shortDescription": "ASP.NET config file enables directory browsing",
          "fullDescription": "Directory browsing should not be enabled in production as it can leak sensitive information.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-548"
],
            "kind": "problem",
            "precision": "very-high",
            "name": "ASP.NET config file enables directory browsing",
            "description": "Directory browsing should not be enabled in production as it can leak sensitive information.",
            "id": "cs/web/directory-browse-enabled",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-548/ASPNetDirectoryListing.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/unvalidated-url-redirection": {
          "id": "cs/web/unvalidated-url-redirection",
          "name": "cs/web/unvalidated-url-redirection",
          "shortDescription": "URL redirection from remote source",
          "fullDescription": "URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-601"
],
            "kind": "problem",
            "precision": "medium",
            "name": "URL redirection from remote source",
            "description": "URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
            "id": "cs/web/unvalidated-url-redirection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-601/UrlRedirect.ql",
            "problem.severity": "error"
          }
        },
        "cs/path-injection": {
          "id": "cs/path-injection",
          "name": "cs/path-injection",
          "shortDescription": "Uncontrolled data used in path expression",
          "fullDescription": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-022",
  "external/cwe/cwe-023",
  "external/cwe/cwe-036",
  "external/cwe/cwe-073",
  "external/cwe/cwe-099"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled data used in path expression",
            "description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
            "id": "cs/path-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-022/TaintedPath.ql",
            "problem.severity": "error"
          }
        },
        "cs/user-controlled-bypass": {
          "id": "cs/user-controlled-bypass",
          "name": "cs/user-controlled-bypass",
          "shortDescription": "User-controlled bypass of sensitive method",
          "fullDescription": "User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-807",
  "external/cwe/cwe-247",
  "external/cwe/cwe-350"
],
            "kind": "problem",
            "precision": "medium",
            "name": "User-controlled bypass of sensitive method",
            "description": "User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems.",
            "id": "cs/user-controlled-bypass",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-807/ConditionalBypass.ql",
            "problem.severity": "error"
          }
        },
        "cs/sensitive-data-transmission": {
          "id": "cs/sensitive-data-transmission",
          "name": "cs/sensitive-data-transmission",
          "shortDescription": "Information exposure through transmitted data",
          "fullDescription": "Transmitting sensitive information to the user is a potential security risk.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-201"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Information exposure through transmitted data",
            "description": "Transmitting sensitive information to the user is a potential security risk.",
            "id": "cs/sensitive-data-transmission",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-201/ExposureInTransmittedData.ql",
            "problem.severity": "error"
          }
        },
        "cs/inappropriate-encoding": {
          "id": "cs/inappropriate-encoding",
          "name": "cs/inappropriate-encoding",
          "shortDescription": "Inappropriate encoding",
          "fullDescription": "Using an inappropriate encoding may give unintended results and may pose a security risk.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-838"
],
            "kind": "problem",
            "precision": "low",
            "name": "Inappropriate encoding",
            "description": "Using an inappropriate encoding may give unintended results and may pose a security risk.",
            "id": "cs/inappropriate-encoding",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-838/InappropriateEncoding.ql",
            "problem.severity": "error"
          }
        },
        "cs/hardcoded-credentials": {
          "id": "cs/hardcoded-credentials",
          "name": "cs/hardcoded-credentials",
          "shortDescription": "Hard-coded credentials",
          "fullDescription": "Credentials are hard coded in the source code of the application.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-259",
  "external/cwe/cwe-321",
  "external/cwe/cwe-798"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Hard-coded credentials",
            "description": "Credentials are hard coded in the source code of the application.",
            "id": "cs/hardcoded-credentials",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-798/HardcodedCredentials.ql",
            "problem.severity": "error"
          }
        },
        "cs/insecure-randomness": {
          "id": "cs/insecure-randomness",
          "name": "cs/insecure-randomness",
          "shortDescription": "Insecure randomness",
          "fullDescription": "Using a cryptographically weak pseudo-random number generator to generate a security sensitive value may allow an attacker to predict what sensitive value will be generated.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-338"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Insecure randomness",
            "description": "Using a cryptographically weak pseudo-random number generator to generate a security sensitive value may allow an attacker to predict what sensitive value will be generated.",
            "id": "cs/insecure-randomness",
            "query-path": "/semmlecode-csharp-queries/Security Features/InsecureRandomness.ql",
            "problem.severity": "warning"
          }
        },
        "cs/empty-password-in-configuration": {
          "id": "cs/empty-password-in-configuration",
          "name": "cs/empty-password-in-configuration",
          "shortDescription": "Empty password in configuration file",
          "fullDescription": "Finds empty passwords in configuration files.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-258",
  "external/cwe/cwe-862"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Empty password in configuration file",
            "description": "Finds empty passwords in configuration files.",
            "id": "cs/empty-password-in-configuration",
            "query-path": "/semmlecode-csharp-queries/Configuration/EmptyPasswordInConfigurationFile.ql",
            "problem.severity": "warning"
          }
        },
        "cs/information-exposure-through-exception": {
          "id": "cs/information-exposure-through-exception",
          "name": "cs/information-exposure-through-exception",
          "shortDescription": "Information exposure through an exception",
          "fullDescription": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-209",
  "external/cwe/cwe-497"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Information exposure through an exception",
            "description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
            "id": "cs/information-exposure-through-exception",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-209/ExceptionInformationExposure.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/missing-token-validation": {
          "id": "cs/web/missing-token-validation",
          "name": "cs/web/missing-token-validation",
          "shortDescription": "Missing cross-site request forgery token validation",
          "fullDescription": "Handling a POST request without verifying that the request came from the user allows a malicious attacker to submit a request on behalf of the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-352"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Missing cross-site request forgery token validation",
            "description": "Handling a POST request without verifying that the request came from the user allows a malicious attacker to submit a request on behalf of the user.",
            "id": "cs/web/missing-token-validation",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-352/MissingAntiForgeryTokenValidation.ql",
            "problem.severity": "error"
          }
        },
        "cs/second-order-sql-injection": {
          "id": "cs/second-order-sql-injection",
          "name": "cs/second-order-sql-injection",
          "shortDescription": "SQL query built from stored user-controlled sources",
          "fullDescription": "Building a SQL query from stored user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-089"
],
            "kind": "problem",
            "precision": "medium",
            "name": "SQL query built from stored user-controlled sources",
            "description": "Building a SQL query from stored user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
            "id": "cs/second-order-sql-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-089/SecondOrderSqlInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/unsynchronized-static-access": {
          "id": "cs/unsynchronized-static-access",
          "name": "cs/unsynchronized-static-access",
          "shortDescription": "Unsynchronized access to static collection member in non-static context",
          "fullDescription": "If an unsynchronized access to a static collection member occurs during an addition or resizing operation, an infinite loop can occur.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "concurrency",
  "external/cwe/cwe-362",
  "external/cwe/cwe-567"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Unsynchronized access to static collection member in non-static context",
            "description": "If an unsynchronized access to a static collection member occurs during an addition or resizing operation, an infinite loop can occur.",
            "id": "cs/unsynchronized-static-access",
            "query-path": "/semmlecode-csharp-queries/Concurrency/UnsynchronizedStaticAccess.ql",
            "problem.severity": "error"
          }
        },
        "cs/insufficient-key-size": {
          "id": "cs/insufficient-key-size",
          "name": "cs/insufficient-key-size",
          "shortDescription": "Weak encryption: Insufficient key size",
          "fullDescription": "Finds uses of encryption algorithms with too small a key size",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption: Insufficient key size",
            "description": "Finds uses of encryption algorithms with too small a key size",
            "id": "cs/insufficient-key-size",
            "query-path": "/semmlecode-csharp-queries/Security Features/InsufficientKeySize.ql",
            "problem.severity": "warning"
          }
        },
        "cs/stored-command-line-injection": {
          "id": "cs/stored-command-line-injection",
          "name": "cs/stored-command-line-injection",
          "shortDescription": "Uncontrolled command line from stored user input",
          "fullDescription": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "correctness",
  "security",
  "external/cwe/cwe-078",
  "external/cwe/cwe-088"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled command line from stored user input",
            "description": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
            "id": "cs/stored-command-line-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-078/StoredCommandInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/ecb-encryption": {
          "id": "cs/ecb-encryption",
          "name": "cs/ecb-encryption",
          "shortDescription": "Encryption using ECB",
          "fullDescription": "Highlights uses of the encryption mode 'CipherMode.ECB'. This mode should normally not be used because it is vulnerable to replay attacks.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Encryption using ECB",
            "description": "Highlights uses of the encryption mode \u0027CipherMode.ECB\u0027. This mode should normally not be used because it is vulnerable to replay attacks.",
            "id": "cs/ecb-encryption",
            "query-path": "/semmlecode-csharp-queries/Security Features/Encryption using ECB.ql",
            "problem.severity": "warning"
          }
        },
        "cs/inadequate-rsa-padding": {
          "id": "cs/inadequate-rsa-padding",
          "name": "cs/inadequate-rsa-padding",
          "shortDescription": "Weak encryption: inadequate RSA padding",
          "fullDescription": "Finds uses of RSA encryption with inadequate padding.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327",
  "external/cwe/cwe-780"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption: inadequate RSA padding",
            "description": "Finds uses of RSA encryption with inadequate padding.",
            "id": "cs/inadequate-rsa-padding",
            "query-path": "/semmlecode-csharp-queries/Security Features/InadequateRSAPadding.ql",
            "problem.severity": "warning"
          }
        },
        "cs/cleartext-storage-of-sensitive-information": {
          "id": "cs/cleartext-storage-of-sensitive-information",
          "name": "cs/cleartext-storage-of-sensitive-information",
          "shortDescription": "Clear text storage of sensitive information",
          "fullDescription": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-312",
  "external/cwe/cwe-315",
  "external/cwe/cwe-359"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Clear text storage of sensitive information",
            "description": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
            "id": "cs/cleartext-storage-of-sensitive-information",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-312/CleartextStorage.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/missing-global-error-handler": {
          "id": "cs/web/missing-global-error-handler",
          "name": "cs/web/missing-global-error-handler",
          "shortDescription": "Missing global error handler",
          "fullDescription": "ASP.NET applications should not set the 'customError' mode to \"off\" without providing a global error handler, otherwise they may leak exception information.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-12",
  "external/cwe/cwe-248"
],
            "kind": "problem",
            "precision": "high",
            "name": "Missing global error handler",
            "description": "ASP.NET applications should not set the \u0027customError\u0027 mode to \"off\" without providing a global error handler, otherwise they may leak exception information.",
            "id": "cs/web/missing-global-error-handler",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-248/MissingASPNETGlobalErrorHandler.ql",
            "problem.severity": "warning"
          }
        },
        "cs/session-reuse": {
          "id": "cs/session-reuse",
          "name": "cs/session-reuse",
          "shortDescription": "Failure to abandon session",
          "fullDescription": "Reusing an existing session as a different user could allow an attacker to access someone else's account by using their session.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-384"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Failure to abandon session",
            "description": "Reusing an existing session as a different user could allow an attacker to access someone else\u0027s account by using their session.",
            "id": "cs/session-reuse",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-384/AbandonSession.ql",
            "problem.severity": "error"
          }
        },
        "cs/password-in-configuration": {
          "id": "cs/password-in-configuration",
          "name": "cs/password-in-configuration",
          "shortDescription": "Password in configuration file",
          "fullDescription": "Finds passwords in configuration files.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-13",
  "external/cwe/cwe-256",
  "external/cwe/cwe-313"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Password in configuration file",
            "description": "Finds passwords in configuration files.",
            "id": "cs/password-in-configuration",
            "query-path": "/semmlecode-csharp-queries/Configuration/PasswordInConfigurationFile.ql",
            "problem.severity": "warning"
          }
        },
        "cs/xml/missing-validation": {
          "id": "cs/xml/missing-validation",
          "name": "cs/xml/missing-validation",
          "shortDescription": "Missing XML validation",
          "fullDescription": "User input should not be processed as XML without validating it against a known schema.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-112"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Missing XML validation",
            "description": "User input should not be processed as XML without validating it against a known schema.",
            "id": "cs/xml/missing-validation",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-112/MissingXMLValidation.ql",
            "problem.severity": "recommendation"
          }
        },
        "cs/web/broad-cookie-domain": {
          "id": "cs/web/broad-cookie-domain",
          "name": "cs/web/broad-cookie-domain",
          "shortDescription": "Cookie security: overly broad domain",
          "fullDescription": "Finds cookies with an overly broad domain.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-287"
],
            "kind": "problem",
            "precision": "high",
            "name": "Cookie security: overly broad domain",
            "description": "Finds cookies with an overly broad domain.",
            "id": "cs/web/broad-cookie-domain",
            "query-path": "/semmlecode-csharp-queries/Security Features/CookieWithOverlyBroadDomain.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/persistent-cookie": {
          "id": "cs/web/persistent-cookie",
          "name": "cs/web/persistent-cookie",
          "shortDescription": "Cookie security: persistent cookie",
          "fullDescription": "Persistent cookies are vulnerable to attacks.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-539"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Cookie security: persistent cookie",
            "description": "Persistent cookies are vulnerable to attacks.",
            "id": "cs/web/persistent-cookie",
            "query-path": "/semmlecode-csharp-queries/Security Features/PersistentCookie.ql",
            "problem.severity": "warning"
          }
        },
        "cs/insecure-xml-read": {
          "id": "cs/insecure-xml-read",
          "name": "cs/insecure-xml-read",
          "shortDescription": "XML is read insecurely",
          "fullDescription": "XML may include dangerous external references, which should be restricted using a secure resolver or disabling DTD processing.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-611",
  "external/cwe/cwe-827",
  "external/cwe/cwe-776"
],
            "kind": "problem",
            "precision": "medium",
            "name": "XML is read insecurely",
            "description": "XML may include dangerous external references, which should be restricted using a secure resolver or disabling DTD processing.",
            "id": "cs/insecure-xml-read",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-611/UseXmlSecureResolver.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/xss": {
          "id": "cs/web/xss",
          "name": "cs/web/xss",
          "shortDescription": "Cross-site scripting",
          "fullDescription": "Writing user input directly to a web page allows for a cross-site scripting vulnerability.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-079",
  "external/cwe/cwe-116"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Cross-site scripting",
            "description": "Writing user input directly to a web page allows for a cross-site scripting vulnerability.",
            "id": "cs/web/xss",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-079/XSS.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/stored-xpath-injection": {
          "id": "cs/xml/stored-xpath-injection",
          "name": "cs/xml/stored-xpath-injection",
          "shortDescription": "Stored XPath injection",
          "fullDescription": "Building an XPath expression from stored data which may have been provided by the user is vulnerable to insertion of malicious code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-643"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Stored XPath injection",
            "description": "Building an XPath expression from stored data which may have been provided by the user is vulnerable to insertion of malicious code by the user.",
            "id": "cs/xml/stored-xpath-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-643/StoredXPathInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/stored-xss": {
          "id": "cs/web/stored-xss",
          "name": "cs/web/stored-xss",
          "shortDescription": "Stored cross-site scripting",
          "fullDescription": "Writing input from the database directly to a web page indicates a cross-site scripting vulnerability if the data was originally user-provided.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-079",
  "external/cwe/cwe-116"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Stored cross-site scripting",
            "description": "Writing input from the database directly to a web page indicates a cross-site scripting vulnerability if the data was originally user-provided.",
            "id": "cs/web/stored-xss",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-079/StoredXSS.ql",
            "problem.severity": "error"
          }
        },
        "cs/resource-injection": {
          "id": "cs/resource-injection",
          "name": "cs/resource-injection",
          "shortDescription": "Resource injection",
          "fullDescription": "Building a resource descriptor from untrusted user input is vulnerable to a malicious user providing an unintended resource.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-099"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Resource injection",
            "description": "Building a resource descriptor from untrusted user input is vulnerable to a malicious user providing an unintended resource.",
            "id": "cs/resource-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-099/ResourceInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/debug-binary": {
          "id": "cs/web/debug-binary",
          "name": "cs/web/debug-binary",
          "shortDescription": "Creating an ASP.NET debug binary may reveal sensitive information",
          "fullDescription": "ASP.NET projects should not produce debug binaries when deploying to production as debug builds provide additional information useful to a malicious attacker.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "maintainability",
  "frameworks/asp.net",
  "external/cwe/cwe-11"
],
            "kind": "problem",
            "precision": "very-high",
            "name": "Creating an ASP.NET debug binary may reveal sensitive information",
            "description": "ASP.NET projects should not produce debug binaries when deploying to production as debug builds provide additional information useful to a malicious attacker.",
            "id": "cs/web/debug-binary",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-011/ASPNetDebug.ql",
            "problem.severity": "warning"
          }
        },
        "cs/stored-ldap-injection": {
          "id": "cs/stored-ldap-injection",
          "name": "cs/stored-ldap-injection",
          "shortDescription": "LDAP query built from stored user-controlled sources",
          "fullDescription": "Building an LDAP query from stored user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-090"
],
            "kind": "problem",
            "precision": "medium",
            "name": "LDAP query built from stored user-controlled sources",
            "description": "Building an LDAP query from stored user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
            "id": "cs/stored-ldap-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-090/StoredLDAPInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/code-injection": {
          "id": "cs/code-injection",
          "name": "cs/code-injection",
          "shortDescription": "Improper control of generation of code",
          "fullDescription": "Treating externally controlled strings as code can allow an attacker to execute malicious code.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-094",
  "external/cwe/cwe-095",
  "external/cwe/cwe-096"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Improper control of generation of code",
            "description": "Treating externally controlled strings as code can allow an attacker to execute malicious code.",
            "id": "cs/code-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-094/CodeInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/unvalidated-local-pointer-arithmetic": {
          "id": "cs/unvalidated-local-pointer-arithmetic",
          "name": "cs/unvalidated-local-pointer-arithmetic",
          "shortDescription": "Unvalidated local pointer arithmetic",
          "fullDescription": "Using the result of a virtual method call in pointer arithmetic without validation is dangerous because the method may be overridden by a subtype to return any value.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-119",
  "external/cwe/cwe-120",
  "external/cwe/cwe-122",
  "external/cwe/cwe-788"
],
            "kind": "problem",
            "precision": "high",
            "name": "Unvalidated local pointer arithmetic",
            "description": "Using the result of a virtual method call in pointer arithmetic without validation is dangerous because the method may be overridden by a subtype to return any value.",
            "id": "cs/unvalidated-local-pointer-arithmetic",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-119/LocalUnvalidatedArithmetic.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/missing-x-frame-options": {
          "id": "cs/web/missing-x-frame-options",
          "name": "cs/web/missing-x-frame-options",
          "shortDescription": "Missing X-Frame-Options HTTP header",
          "fullDescription": "If the 'X-Frame-Options' setting is not provided, a malicious user may be able to overlay their own UI on top of the site by using an iframe.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-451",
  "external/cwe/cwe-829"
],
            "kind": "problem",
            "precision": "high",
            "name": "Missing X-Frame-Options HTTP header",
            "description": "If the \u0027X-Frame-Options\u0027 setting is not provided, a malicious user may be able to overlay their own UI on top of the site by using an iframe.",
            "id": "cs/web/missing-x-frame-options",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-451/MissingXFrameOptions.ql",
            "problem.severity": "error"
          }
        },
        "cs/hardcoded-connection-string-credentials": {
          "id": "cs/hardcoded-connection-string-credentials",
          "name": "cs/hardcoded-connection-string-credentials",
          "shortDescription": "Hard-coded connection string with credentials",
          "fullDescription": "Credentials are hard-coded in a connection string in the source code of the application.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-259",
  "external/cwe/cwe-321",
  "external/cwe/cwe-798"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Hard-coded connection string with credentials",
            "description": "Credentials are hard-coded in a connection string in the source code of the application.",
            "id": "cs/hardcoded-connection-string-credentials",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-798/HardcodedConnectionString.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/broad-cookie-path": {
          "id": "cs/web/broad-cookie-path",
          "name": "cs/web/broad-cookie-path",
          "shortDescription": "Cookie security: overly broad path",
          "fullDescription": "Finds cookies with an overly broad path.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-287"
],
            "kind": "problem",
            "precision": "high",
            "name": "Cookie security: overly broad path",
            "description": "Finds cookies with an overly broad path.",
            "id": "cs/web/broad-cookie-path",
            "query-path": "/semmlecode-csharp-queries/Security Features/CookieWithOverlyBroadPath.ql",
            "problem.severity": "warning"
          }
        },
        "cs/weak-encryption": {
          "id": "cs/weak-encryption",
          "name": "cs/weak-encryption",
          "shortDescription": "Weak encryption",
          "fullDescription": "Finds uses of encryption algorithms that are weak and obsolete",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption",
            "description": "Finds uses of encryption algorithms that are weak and obsolete",
            "id": "cs/weak-encryption",
            "query-path": "/semmlecode-csharp-queries/Security Features/WeakEncryption.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/disabled-header-checking": {
          "id": "cs/web/disabled-header-checking",
          "name": "cs/web/disabled-header-checking",
          "shortDescription": "Header checking disabled",
          "fullDescription": "Finds places where header checking is disabled.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-113"
],
            "kind": "problem",
            "precision": "high",
            "name": "Header checking disabled",
            "description": "Finds places where header checking is disabled.",
            "id": "cs/web/disabled-header-checking",
            "query-path": "/semmlecode-csharp-queries/Security Features/HeaderCheckingDisabled.ql",
            "problem.severity": "warning"
          }
        },
        "cs/log-forging": {
          "id": "cs/log-forging",
          "name": "cs/log-forging",
          "shortDescription": "Log entries created from user input",
          "fullDescription": "Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-117"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Log entries created from user input",
            "description": "Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.",
            "id": "cs/log-forging",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-117/LogForging.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/requiressl-not-set": {
          "id": "cs/web/requiressl-not-set",
          "name": "cs/web/requiressl-not-set",
          "shortDescription": "'requireSSL' attribute is not set to true",
          "fullDescription": "Omitting the 'requireSSL' attribute allows data to be transmitted insecurely using HTTP. Always set 'requireSSL' to 'true' to ensure that HTTPS is used at all times.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-319",
  "external/cwe/cwe-614"
],
            "kind": "problem",
            "precision": "high",
            "name": "\u0027requireSSL\u0027 attribute is not set to true",
            "description": "Omitting the \u0027requireSSL\u0027 attribute allows data to be transmitted insecurely using HTTP. Always set \u0027requireSSL\u0027 to \u0027true\u0027 to ensure that HTTPS is used at all times.",
            "id": "cs/web/requiressl-not-set",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-614/RequireSSL.ql",
            "problem.severity": "error"
          }
        },
        "cs/regex-injection": {
          "id": "cs/regex-injection",
          "name": "cs/regex-injection",
          "shortDescription": "Regular expression injection",
          "fullDescription": "User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to provide a regex that could require exponential time on certain inputs.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-730",
  "external/cwe/cwe-400"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Regular expression injection",
            "description": "User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to provide a regex that could require exponential time on certain inputs.",
            "id": "cs/regex-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-730/RegexInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/insecure-dtd-handling": {
          "id": "cs/xml/insecure-dtd-handling",
          "name": "cs/xml/insecure-dtd-handling",
          "shortDescription": "Untrusted XML is read insecurely",
          "fullDescription": "Untrusted XML is read with an insecure resolver and DTD processing enabled.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-611",
  "external/cwe/cwe-827",
  "external/cwe/cwe-776"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Untrusted XML is read insecurely",
            "description": "Untrusted XML is read with an insecure resolver and DTD processing enabled.",
            "id": "cs/xml/insecure-dtd-handling",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-611/UntrustedDataInsecureXml.ql",
            "problem.severity": "error"
          }
        },
        "cs/sql-injection": {
          "id": "cs/sql-injection",
          "name": "cs/sql-injection",
          "shortDescription": "SQL query built from user-controlled sources",
          "fullDescription": "Building a SQL query from user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-089"
],
            "kind": "problem",
            "precision": "medium",
            "name": "SQL query built from user-controlled sources",
            "description": "Building a SQL query from user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
            "id": "cs/sql-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-089/SqlInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/redos": {
          "id": "cs/redos",
          "name": "cs/redos",
          "shortDescription": "Denial of Service from comparison of user input against expensive regex",
          "fullDescription": "User input should not be matched against a regular expression that could require exponential time on certain input.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-730",
  "external/cwe/cwe-400"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Denial of Service from comparison of user input against expensive regex",
            "description": "User input should not be matched against a regular expression that could require exponential time on certain input.",
            "id": "cs/redos",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-730/ReDoS.ql",
            "problem.severity": "error"
          }
        },
        "cs/exposure-of-sensitive-information": {
          "id": "cs/exposure-of-sensitive-information",
          "name": "cs/exposure-of-sensitive-information",
          "shortDescription": "Exposure of private information",
          "fullDescription": "If private information is written to an external location, it may be accessible by unauthorized persons.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-359"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Exposure of private information",
            "description": "If private information is written to an external location, it may be accessible by unauthorized persons.",
            "id": "cs/exposure-of-sensitive-information",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-359/ExposureOfPrivateInformation.ql",
            "problem.severity": "error"
          }
        }
      },
      "properties": {
        "originalUriBaseIds": {
  "%SRCROOT%": "file:///C:/corefx/src/System.Net.Http/"
}
      }
    }
  ]
}