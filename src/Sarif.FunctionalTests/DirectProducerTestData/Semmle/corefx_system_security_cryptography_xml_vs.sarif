{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Semmle",
        "version": "1.15.2"
      },
      "files": {
        "file:///C:/corefx/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/SymmetricKeyWrap.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/Utils.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/TestHelpers.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/XmlDsigC14NWithCommentsTransformTest.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/XmlDsigExcC14NTransformTest.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        }
      },
      "results": [
        {
          "ruleId": "cs/ecb-encryption",
          "level": "warning",
          "message": "The ECB (Electronic Code Book) encryption mode is vulnerable to replay attacks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/SymmetricKeyWrap.cs",
                "region": {
                  "startLine": 139,
                  "startColumn": 11,
                  "length": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/ecb-encryption",
          "level": "warning",
          "message": "The ECB (Electronic Code Book) encryption mode is vulnerable to replay attacks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/SymmetricKeyWrap.cs",
                "region": {
                  "startLine": 202,
                  "startColumn": 11,
                  "length": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing enabled in settings, insecure resolver set in settings",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/Utils.cs",
                "region": {
                  "startLine": 172,
                  "startColumn": 19,
                  "length": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing enabled in settings, insecure resolver set in settings",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/Utils.cs",
                "region": {
                  "startLine": 202,
                  "startColumn": 19,
                  "length": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing enabled in settings, insecure resolver set in settings",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/Utils.cs",
                "region": {
                  "startLine": 223,
                  "startColumn": 19,
                  "length": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing enabled in settings, insecure resolver set in settings",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/TestHelpers.cs",
                "region": {
                  "startLine": 101,
                  "startColumn": 26,
                  "length": 149
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing enabled in settings, insecure resolver set in settings",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/XmlDsigC14NWithCommentsTransformTest.cs",
                "region": {
                  "startLine": 119,
                  "startColumn": 26,
                  "length": 149
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing enabled in settings, insecure resolver set in settings",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/XmlDsigExcC14NTransformTest.cs",
                "region": {
                  "startLine": 362,
                  "startColumn": 26,
                  "length": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"mono\" flows to the [password] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 665,
                  "startColumn": 54,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 665,
                  "startColumn": 54,
                  "length": 6
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 665,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"mono\" flows to the [password] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 724,
                  "startColumn": 54,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 724,
                  "startColumn": 54,
                  "length": 6
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 724,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"mono\" flows to the [password] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 766,
                  "startColumn": 54,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 766,
                  "startColumn": 54,
                  "length": 6
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 766,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"mono\" flows to the [password] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 829,
                  "startColumn": 54,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 829,
                  "startColumn": 54,
                  "length": 6
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 829,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"mono\" flows to the [password] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 886,
                  "startColumn": 54,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 886,
                  "startColumn": 54,
                  "length": 6
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 886,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"mono\" flows to the [password] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 944,
                  "startColumn": 54,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 944,
                  "startColumn": 54,
                  "length": 6
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 944,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1030,
                  "startColumn": 30,
                  "length": 3058
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 681,
                  "startColumn": 48,
                  "length": 5
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 681,
                  "startColumn": 27,
                  "length": 27
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1030,
                  "startColumn": 30,
                  "length": 3058
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 740,
                  "startColumn": 48,
                  "length": 5
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 740,
                  "startColumn": 27,
                  "length": 27
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1030,
                  "startColumn": 30,
                  "length": 3058
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 981,
                  "startColumn": 48,
                  "length": 5
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 981,
                  "startColumn": 27,
                  "length": 27
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1071,
                  "startColumn": 32,
                  "length": 10253
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 665,
                  "startColumn": 45,
                  "length": 7
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 665,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1071,
                  "startColumn": 32,
                  "length": 10253
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 724,
                  "startColumn": 45,
                  "length": 7
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 724,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1071,
                  "startColumn": 32,
                  "length": 10253
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 766,
                  "startColumn": 45,
                  "length": 7
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 766,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1071,
                  "startColumn": 32,
                  "length": 10253
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 829,
                  "startColumn": 45,
                  "length": 7
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 829,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1071,
                  "startColumn": 32,
                  "length": 10253
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 886,
                  "startColumn": 45,
                  "length": 7
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 886,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "This hard-coded value flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 1071,
                  "startColumn": 32,
                  "length": 10253
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 944,
                  "startColumn": 45,
                  "length": 7
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/SignedXmlTest.cs",
                "region": {
                  "startLine": 944,
                  "startColumn": 24,
                  "length": 37
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"MIIFpQIBAzCCBV8GCSqGSIb3DQEHAaCCBVAEggVMMIIFSDCCAl8GCSqGSIb3DQEHBqCCAlAwggJMAgEAMIICRQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQMwDgQIGTfVa4+vR1UCAgfQgIICGJuFE9alFWJFkaoeewKDIEnVwRxXfMsi8dcySYnp7jljEUQBfW/GIbOf7Lg2nHd0qxvxYI2YL4Zs+d0jWbqfNHamGFCMPe1dK957Z2PsKXR183vMSgnmlLAHktsIN+Gor7q1GbQ4ljfZkGqZ/rkgUsgsSYZSnJevP/uH0VnvxemljVJ7N7gKMYO0aqrca4qJ0O4YxBYyaerPFUOYunQlvk6DOF3SQXza5oFKcPGrSpE/9eQrnmm64BtbdnUE6qqEjfZfNa6MOD3vOnapLUBsel2TtVCu8tEl7I8FGxozTLXVTXOBkL3k7xLRS52ZtpbcU2JIhlDGpxeFXmjKYzdzHoL20iJubfdkUYtHwB0XjBKKLcI7jfgGgjNauaTLAx8FF+5O9s7Zbj2+SKWv56kqAwdX+iH21VgjAN9EByIXHb3p2ZOvy4ONDXTmfSn7jbuPLZTi+u6bxn2JOLf/gjEA8FiCuQDL9gF247bnUq08Z1uzuAUeaPL13U8mxwEuvCOXx5NEQIuf3cusnaH4+7uIhPk5tnfA5XOaABySetRjZhVN5dC5/g3KTwmaDamlW3Y7Az/NzAC4uKa2ny5jwYKBgHviEKOyJfLDKr5fOMRToOfgxvAdXZohQQTE1+TcBjp+eeV5koDfB1ReCKIRHugPZu5j9SCVcYanwFeJ5M4cEHZ9U1Ytsmzjh0fwV17D/hxQ4aS4VwVpOMypMIIC4QYJKoZIhvcNAQcBoIIC0gSCAs4wggLKMIICxgYLKoZIhvcNAQwKAQKgggKeMIICmjAcBgoqhkiG9w0BDAEDMA4ECBRdKqx022cfAgIH0ASCAnjZx9fvPCHizdH6apVzWWmfy/84HvDPjFOUV1TPehTnDPkNpF/uK/ya4jlbl4Kw0Zfknt5Xydl89SMXIWa2q+nWmxyG3XyfGqOAeBfJBSdCF5K3qkZZnzEfraKZZ5Hh8IEmK+ey45O6sltua6Xl5MRBmKLiwma7vX4ihXQTMfb0WlWDYCXZi85OeF0OlUjRWAwz4PeeiBK4nmI/vNmF1EzDVdZGkrrE8mot3Y4z6bvwqip2tUUbHuMnC+/1ikAcJzCOw4NpnEWCRtIJxgJ9es8E8CUfHESnWKe4nh6tJVJ15B8/7oF7N6j7oq4Oj346JthKoWWkzifNaH79A60/uFh08Rv7zrtJf6kedY6Ve2bR5lhWn0cv9Q6IaoqTmKKTmKJnjdQO9lKRCR6iI2OsYtXBropD8xhNNqsyfpNmP0G6wFiEZZxZjWOkZEJLUzFbH+Su+7l2l4FN9sM7k211/l3/3YF1QJHwZsgL98DZL4qE+nkuZQcdtOUx8QTyTOcVb3IzgCAwZm0rgdXQpJ9yRBgOC/6MnqaCPI0jJuavXF/a28GJWWGlazx7SWTrbzNVJ83ZhQ+pfPEPtMi3t0YVLLvapu3otgpiMkv4ew/ssXwYbg6xBWfotK+NG1cPwVFy9/V9+H5dpdvRI/le2QG0F5xCfCeKh/3AuNiMPEGoVUR5kj5cwFK6eskvt/+74ZenxfNPZ2Uttiw8DsqtTx1gxhcSZeU5YWpO7O78RaYE4Ll4kPbbvIaR18Napb6NKP846z02zvaw+feXARLe0HUY58TlmUjSX3MZRK4PEdyMIQ/URyPimj4rImaDfFrKPAHIjqT3EKv+KuNs8TEVMBMGCSqGSIb3DQEJFTEGBAQBAAAAMD0wITAJBgUrDgMCGgUABBRZOo132cuo2zNyy+SH2c+pN4OGmQQU2nQao3je7DTj2G6Gge8pooPf2ncCAgfQ\" flows to the [rawData] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/TestHelpers.cs",
                "region": {
                  "startLine": 189,
                  "startColumn": 1,
                  "length": 1935
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/TestHelpers.cs",
                "region": {
                  "startLine": 193,
                  "startColumn": 28,
                  "length": 9
                }
              },
              "message": "rawData"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/TestHelpers.cs",
                "region": {
                  "startLine": 193,
                  "startColumn": 7,
                  "length": 39
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        },
        {
          "ruleId": "cs/hardcoded-credentials",
          "level": "warning",
          "message": "The hard-coded value \"mono\" flows to the [password] parameter in [object creation of type X509Certificate2].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/TestHelpers.cs",
                "region": {
                  "startLine": 193,
                  "startColumn": 39,
                  "length": 6
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/TestHelpers.cs",
                "region": {
                  "startLine": 193,
                  "startColumn": 39,
                  "length": 6
                }
              },
              "message": "password"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Security.Cryptography.Xml/tests/TestHelpers.cs",
                "region": {
                  "startLine": 193,
                  "startColumn": 7,
                  "length": 39
                }
              },
              "message": "object creation of type X509Certificate2"
            }
          ]
        }
      ],
      "rules": {
        "cs/ldap-injection": {
          "id": "cs/ldap-injection",
          "name": "cs/ldap-injection",
          "shortDescription": "LDAP query built from user-controlled sources",
          "fullDescription": "Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-090"
],
            "kind": "problem",
            "precision": "medium",
            "name": "LDAP query built from user-controlled sources",
            "description": "Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
            "id": "cs/ldap-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-090/LDAPInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/xpath-injection": {
          "id": "cs/xml/xpath-injection",
          "name": "cs/xml/xpath-injection",
          "shortDescription": "XPath injection",
          "fullDescription": "Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-643"
],
            "kind": "problem",
            "precision": "medium",
            "name": "XPath injection",
            "description": "Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user.",
            "id": "cs/xml/xpath-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-643/XPathInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/command-line-injection": {
          "id": "cs/command-line-injection",
          "name": "cs/command-line-injection",
          "shortDescription": "Uncontrolled command line",
          "fullDescription": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "correctness",
  "security",
  "external/cwe/cwe-078",
  "external/cwe/cwe-088"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled command line",
            "description": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
            "id": "cs/command-line-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-078/CommandInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/directory-browse-enabled": {
          "id": "cs/web/directory-browse-enabled",
          "name": "cs/web/directory-browse-enabled",
          "shortDescription": "ASP.NET config file enables directory browsing",
          "fullDescription": "Directory browsing should not be enabled in production as it can leak sensitive information.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-548"
],
            "kind": "problem",
            "precision": "very-high",
            "name": "ASP.NET config file enables directory browsing",
            "description": "Directory browsing should not be enabled in production as it can leak sensitive information.",
            "id": "cs/web/directory-browse-enabled",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-548/ASPNetDirectoryListing.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/unvalidated-url-redirection": {
          "id": "cs/web/unvalidated-url-redirection",
          "name": "cs/web/unvalidated-url-redirection",
          "shortDescription": "URL redirection from remote source",
          "fullDescription": "URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-601"
],
            "kind": "problem",
            "precision": "medium",
            "name": "URL redirection from remote source",
            "description": "URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
            "id": "cs/web/unvalidated-url-redirection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-601/UrlRedirect.ql",
            "problem.severity": "error"
          }
        },
        "cs/path-injection": {
          "id": "cs/path-injection",
          "name": "cs/path-injection",
          "shortDescription": "Uncontrolled data used in path expression",
          "fullDescription": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-022",
  "external/cwe/cwe-023",
  "external/cwe/cwe-036",
  "external/cwe/cwe-073",
  "external/cwe/cwe-099"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled data used in path expression",
            "description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
            "id": "cs/path-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-022/TaintedPath.ql",
            "problem.severity": "error"
          }
        },
        "cs/user-controlled-bypass": {
          "id": "cs/user-controlled-bypass",
          "name": "cs/user-controlled-bypass",
          "shortDescription": "User-controlled bypass of sensitive method",
          "fullDescription": "User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-807",
  "external/cwe/cwe-247",
  "external/cwe/cwe-350"
],
            "kind": "problem",
            "precision": "medium",
            "name": "User-controlled bypass of sensitive method",
            "description": "User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems.",
            "id": "cs/user-controlled-bypass",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-807/ConditionalBypass.ql",
            "problem.severity": "error"
          }
        },
        "cs/sensitive-data-transmission": {
          "id": "cs/sensitive-data-transmission",
          "name": "cs/sensitive-data-transmission",
          "shortDescription": "Information exposure through transmitted data",
          "fullDescription": "Transmitting sensitive information to the user is a potential security risk.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-201"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Information exposure through transmitted data",
            "description": "Transmitting sensitive information to the user is a potential security risk.",
            "id": "cs/sensitive-data-transmission",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-201/ExposureInTransmittedData.ql",
            "problem.severity": "error"
          }
        },
        "cs/inappropriate-encoding": {
          "id": "cs/inappropriate-encoding",
          "name": "cs/inappropriate-encoding",
          "shortDescription": "Inappropriate encoding",
          "fullDescription": "Using an inappropriate encoding may give unintended results and may pose a security risk.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-838"
],
            "kind": "problem",
            "precision": "low",
            "name": "Inappropriate encoding",
            "description": "Using an inappropriate encoding may give unintended results and may pose a security risk.",
            "id": "cs/inappropriate-encoding",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-838/InappropriateEncoding.ql",
            "problem.severity": "error"
          }
        },
        "cs/hardcoded-credentials": {
          "id": "cs/hardcoded-credentials",
          "name": "cs/hardcoded-credentials",
          "shortDescription": "Hard-coded credentials",
          "fullDescription": "Credentials are hard coded in the source code of the application.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-259",
  "external/cwe/cwe-321",
  "external/cwe/cwe-798"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Hard-coded credentials",
            "description": "Credentials are hard coded in the source code of the application.",
            "id": "cs/hardcoded-credentials",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-798/HardcodedCredentials.ql",
            "problem.severity": "error"
          }
        },
        "cs/insecure-randomness": {
          "id": "cs/insecure-randomness",
          "name": "cs/insecure-randomness",
          "shortDescription": "Insecure randomness",
          "fullDescription": "Using a cryptographically weak pseudo-random number generator to generate a security sensitive value may allow an attacker to predict what sensitive value will be generated.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-338"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Insecure randomness",
            "description": "Using a cryptographically weak pseudo-random number generator to generate a security sensitive value may allow an attacker to predict what sensitive value will be generated.",
            "id": "cs/insecure-randomness",
            "query-path": "/semmlecode-csharp-queries/Security Features/InsecureRandomness.ql",
            "problem.severity": "warning"
          }
        },
        "cs/empty-password-in-configuration": {
          "id": "cs/empty-password-in-configuration",
          "name": "cs/empty-password-in-configuration",
          "shortDescription": "Empty password in configuration file",
          "fullDescription": "Finds empty passwords in configuration files.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-258",
  "external/cwe/cwe-862"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Empty password in configuration file",
            "description": "Finds empty passwords in configuration files.",
            "id": "cs/empty-password-in-configuration",
            "query-path": "/semmlecode-csharp-queries/Configuration/EmptyPasswordInConfigurationFile.ql",
            "problem.severity": "warning"
          }
        },
        "cs/information-exposure-through-exception": {
          "id": "cs/information-exposure-through-exception",
          "name": "cs/information-exposure-through-exception",
          "shortDescription": "Information exposure through an exception",
          "fullDescription": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-209",
  "external/cwe/cwe-497"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Information exposure through an exception",
            "description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
            "id": "cs/information-exposure-through-exception",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-209/ExceptionInformationExposure.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/missing-token-validation": {
          "id": "cs/web/missing-token-validation",
          "name": "cs/web/missing-token-validation",
          "shortDescription": "Missing cross-site request forgery token validation",
          "fullDescription": "Handling a POST request without verifying that the request came from the user allows a malicious attacker to submit a request on behalf of the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-352"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Missing cross-site request forgery token validation",
            "description": "Handling a POST request without verifying that the request came from the user allows a malicious attacker to submit a request on behalf of the user.",
            "id": "cs/web/missing-token-validation",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-352/MissingAntiForgeryTokenValidation.ql",
            "problem.severity": "error"
          }
        },
        "cs/second-order-sql-injection": {
          "id": "cs/second-order-sql-injection",
          "name": "cs/second-order-sql-injection",
          "shortDescription": "SQL query built from stored user-controlled sources",
          "fullDescription": "Building a SQL query from stored user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-089"
],
            "kind": "problem",
            "precision": "medium",
            "name": "SQL query built from stored user-controlled sources",
            "description": "Building a SQL query from stored user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
            "id": "cs/second-order-sql-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-089/SecondOrderSqlInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/unsynchronized-static-access": {
          "id": "cs/unsynchronized-static-access",
          "name": "cs/unsynchronized-static-access",
          "shortDescription": "Unsynchronized access to static collection member in non-static context",
          "fullDescription": "If an unsynchronized access to a static collection member occurs during an addition or resizing operation, an infinite loop can occur.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "concurrency",
  "external/cwe/cwe-362",
  "external/cwe/cwe-567"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Unsynchronized access to static collection member in non-static context",
            "description": "If an unsynchronized access to a static collection member occurs during an addition or resizing operation, an infinite loop can occur.",
            "id": "cs/unsynchronized-static-access",
            "query-path": "/semmlecode-csharp-queries/Concurrency/UnsynchronizedStaticAccess.ql",
            "problem.severity": "error"
          }
        },
        "cs/insufficient-key-size": {
          "id": "cs/insufficient-key-size",
          "name": "cs/insufficient-key-size",
          "shortDescription": "Weak encryption: Insufficient key size",
          "fullDescription": "Finds uses of encryption algorithms with too small a key size",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption: Insufficient key size",
            "description": "Finds uses of encryption algorithms with too small a key size",
            "id": "cs/insufficient-key-size",
            "query-path": "/semmlecode-csharp-queries/Security Features/InsufficientKeySize.ql",
            "problem.severity": "warning"
          }
        },
        "cs/stored-command-line-injection": {
          "id": "cs/stored-command-line-injection",
          "name": "cs/stored-command-line-injection",
          "shortDescription": "Uncontrolled command line from stored user input",
          "fullDescription": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "correctness",
  "security",
  "external/cwe/cwe-078",
  "external/cwe/cwe-088"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled command line from stored user input",
            "description": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
            "id": "cs/stored-command-line-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-078/StoredCommandInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/ecb-encryption": {
          "id": "cs/ecb-encryption",
          "name": "cs/ecb-encryption",
          "shortDescription": "Encryption using ECB",
          "fullDescription": "Highlights uses of the encryption mode 'CipherMode.ECB'. This mode should normally not be used because it is vulnerable to replay attacks.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Encryption using ECB",
            "description": "Highlights uses of the encryption mode \u0027CipherMode.ECB\u0027. This mode should normally not be used because it is vulnerable to replay attacks.",
            "id": "cs/ecb-encryption",
            "query-path": "/semmlecode-csharp-queries/Security Features/Encryption using ECB.ql",
            "problem.severity": "warning"
          }
        },
        "cs/inadequate-rsa-padding": {
          "id": "cs/inadequate-rsa-padding",
          "name": "cs/inadequate-rsa-padding",
          "shortDescription": "Weak encryption: inadequate RSA padding",
          "fullDescription": "Finds uses of RSA encryption with inadequate padding.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327",
  "external/cwe/cwe-780"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption: inadequate RSA padding",
            "description": "Finds uses of RSA encryption with inadequate padding.",
            "id": "cs/inadequate-rsa-padding",
            "query-path": "/semmlecode-csharp-queries/Security Features/InadequateRSAPadding.ql",
            "problem.severity": "warning"
          }
        },
        "cs/cleartext-storage-of-sensitive-information": {
          "id": "cs/cleartext-storage-of-sensitive-information",
          "name": "cs/cleartext-storage-of-sensitive-information",
          "shortDescription": "Clear text storage of sensitive information",
          "fullDescription": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-312",
  "external/cwe/cwe-315",
  "external/cwe/cwe-359"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Clear text storage of sensitive information",
            "description": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
            "id": "cs/cleartext-storage-of-sensitive-information",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-312/CleartextStorage.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/missing-global-error-handler": {
          "id": "cs/web/missing-global-error-handler",
          "name": "cs/web/missing-global-error-handler",
          "shortDescription": "Missing global error handler",
          "fullDescription": "ASP.NET applications should not set the 'customError' mode to \"off\" without providing a global error handler, otherwise they may leak exception information.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-12",
  "external/cwe/cwe-248"
],
            "kind": "problem",
            "precision": "high",
            "name": "Missing global error handler",
            "description": "ASP.NET applications should not set the \u0027customError\u0027 mode to \"off\" without providing a global error handler, otherwise they may leak exception information.",
            "id": "cs/web/missing-global-error-handler",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-248/MissingASPNETGlobalErrorHandler.ql",
            "problem.severity": "warning"
          }
        },
        "cs/session-reuse": {
          "id": "cs/session-reuse",
          "name": "cs/session-reuse",
          "shortDescription": "Failure to abandon session",
          "fullDescription": "Reusing an existing session as a different user could allow an attacker to access someone else's account by using their session.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-384"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Failure to abandon session",
            "description": "Reusing an existing session as a different user could allow an attacker to access someone else\u0027s account by using their session.",
            "id": "cs/session-reuse",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-384/AbandonSession.ql",
            "problem.severity": "error"
          }
        },
        "cs/password-in-configuration": {
          "id": "cs/password-in-configuration",
          "name": "cs/password-in-configuration",
          "shortDescription": "Password in configuration file",
          "fullDescription": "Finds passwords in configuration files.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-13",
  "external/cwe/cwe-256",
  "external/cwe/cwe-313"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Password in configuration file",
            "description": "Finds passwords in configuration files.",
            "id": "cs/password-in-configuration",
            "query-path": "/semmlecode-csharp-queries/Configuration/PasswordInConfigurationFile.ql",
            "problem.severity": "warning"
          }
        },
        "cs/xml/missing-validation": {
          "id": "cs/xml/missing-validation",
          "name": "cs/xml/missing-validation",
          "shortDescription": "Missing XML validation",
          "fullDescription": "User input should not be processed as XML without validating it against a known schema.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-112"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Missing XML validation",
            "description": "User input should not be processed as XML without validating it against a known schema.",
            "id": "cs/xml/missing-validation",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-112/MissingXMLValidation.ql",
            "problem.severity": "recommendation"
          }
        },
        "cs/web/broad-cookie-domain": {
          "id": "cs/web/broad-cookie-domain",
          "name": "cs/web/broad-cookie-domain",
          "shortDescription": "Cookie security: overly broad domain",
          "fullDescription": "Finds cookies with an overly broad domain.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-287"
],
            "kind": "problem",
            "precision": "high",
            "name": "Cookie security: overly broad domain",
            "description": "Finds cookies with an overly broad domain.",
            "id": "cs/web/broad-cookie-domain",
            "query-path": "/semmlecode-csharp-queries/Security Features/CookieWithOverlyBroadDomain.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/persistent-cookie": {
          "id": "cs/web/persistent-cookie",
          "name": "cs/web/persistent-cookie",
          "shortDescription": "Cookie security: persistent cookie",
          "fullDescription": "Persistent cookies are vulnerable to attacks.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-539"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Cookie security: persistent cookie",
            "description": "Persistent cookies are vulnerable to attacks.",
            "id": "cs/web/persistent-cookie",
            "query-path": "/semmlecode-csharp-queries/Security Features/PersistentCookie.ql",
            "problem.severity": "warning"
          }
        },
        "cs/insecure-xml-read": {
          "id": "cs/insecure-xml-read",
          "name": "cs/insecure-xml-read",
          "shortDescription": "XML is read insecurely",
          "fullDescription": "XML may include dangerous external references, which should be restricted using a secure resolver or disabling DTD processing.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-611",
  "external/cwe/cwe-827",
  "external/cwe/cwe-776"
],
            "kind": "problem",
            "precision": "medium",
            "name": "XML is read insecurely",
            "description": "XML may include dangerous external references, which should be restricted using a secure resolver or disabling DTD processing.",
            "id": "cs/insecure-xml-read",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-611/UseXmlSecureResolver.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/xss": {
          "id": "cs/web/xss",
          "name": "cs/web/xss",
          "shortDescription": "Cross-site scripting",
          "fullDescription": "Writing user input directly to a web page allows for a cross-site scripting vulnerability.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-079",
  "external/cwe/cwe-116"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Cross-site scripting",
            "description": "Writing user input directly to a web page allows for a cross-site scripting vulnerability.",
            "id": "cs/web/xss",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-079/XSS.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/stored-xpath-injection": {
          "id": "cs/xml/stored-xpath-injection",
          "name": "cs/xml/stored-xpath-injection",
          "shortDescription": "Stored XPath injection",
          "fullDescription": "Building an XPath expression from stored data which may have been provided by the user is vulnerable to insertion of malicious code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-643"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Stored XPath injection",
            "description": "Building an XPath expression from stored data which may have been provided by the user is vulnerable to insertion of malicious code by the user.",
            "id": "cs/xml/stored-xpath-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-643/StoredXPathInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/stored-xss": {
          "id": "cs/web/stored-xss",
          "name": "cs/web/stored-xss",
          "shortDescription": "Stored cross-site scripting",
          "fullDescription": "Writing input from the database directly to a web page indicates a cross-site scripting vulnerability if the data was originally user-provided.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-079",
  "external/cwe/cwe-116"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Stored cross-site scripting",
            "description": "Writing input from the database directly to a web page indicates a cross-site scripting vulnerability if the data was originally user-provided.",
            "id": "cs/web/stored-xss",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-079/StoredXSS.ql",
            "problem.severity": "error"
          }
        },
        "cs/resource-injection": {
          "id": "cs/resource-injection",
          "name": "cs/resource-injection",
          "shortDescription": "Resource injection",
          "fullDescription": "Building a resource descriptor from untrusted user input is vulnerable to a malicious user providing an unintended resource.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-099"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Resource injection",
            "description": "Building a resource descriptor from untrusted user input is vulnerable to a malicious user providing an unintended resource.",
            "id": "cs/resource-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-099/ResourceInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/debug-binary": {
          "id": "cs/web/debug-binary",
          "name": "cs/web/debug-binary",
          "shortDescription": "Creating an ASP.NET debug binary may reveal sensitive information",
          "fullDescription": "ASP.NET projects should not produce debug binaries when deploying to production as debug builds provide additional information useful to a malicious attacker.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "maintainability",
  "frameworks/asp.net",
  "external/cwe/cwe-11"
],
            "kind": "problem",
            "precision": "very-high",
            "name": "Creating an ASP.NET debug binary may reveal sensitive information",
            "description": "ASP.NET projects should not produce debug binaries when deploying to production as debug builds provide additional information useful to a malicious attacker.",
            "id": "cs/web/debug-binary",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-011/ASPNetDebug.ql",
            "problem.severity": "warning"
          }
        },
        "cs/stored-ldap-injection": {
          "id": "cs/stored-ldap-injection",
          "name": "cs/stored-ldap-injection",
          "shortDescription": "LDAP query built from stored user-controlled sources",
          "fullDescription": "Building an LDAP query from stored user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-090"
],
            "kind": "problem",
            "precision": "medium",
            "name": "LDAP query built from stored user-controlled sources",
            "description": "Building an LDAP query from stored user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
            "id": "cs/stored-ldap-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-090/StoredLDAPInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/code-injection": {
          "id": "cs/code-injection",
          "name": "cs/code-injection",
          "shortDescription": "Improper control of generation of code",
          "fullDescription": "Treating externally controlled strings as code can allow an attacker to execute malicious code.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-094",
  "external/cwe/cwe-095",
  "external/cwe/cwe-096"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Improper control of generation of code",
            "description": "Treating externally controlled strings as code can allow an attacker to execute malicious code.",
            "id": "cs/code-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-094/CodeInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/unvalidated-local-pointer-arithmetic": {
          "id": "cs/unvalidated-local-pointer-arithmetic",
          "name": "cs/unvalidated-local-pointer-arithmetic",
          "shortDescription": "Unvalidated local pointer arithmetic",
          "fullDescription": "Using the result of a virtual method call in pointer arithmetic without validation is dangerous because the method may be overridden by a subtype to return any value.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-119",
  "external/cwe/cwe-120",
  "external/cwe/cwe-122",
  "external/cwe/cwe-788"
],
            "kind": "problem",
            "precision": "high",
            "name": "Unvalidated local pointer arithmetic",
            "description": "Using the result of a virtual method call in pointer arithmetic without validation is dangerous because the method may be overridden by a subtype to return any value.",
            "id": "cs/unvalidated-local-pointer-arithmetic",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-119/LocalUnvalidatedArithmetic.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/missing-x-frame-options": {
          "id": "cs/web/missing-x-frame-options",
          "name": "cs/web/missing-x-frame-options",
          "shortDescription": "Missing X-Frame-Options HTTP header",
          "fullDescription": "If the 'X-Frame-Options' setting is not provided, a malicious user may be able to overlay their own UI on top of the site by using an iframe.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-451",
  "external/cwe/cwe-829"
],
            "kind": "problem",
            "precision": "high",
            "name": "Missing X-Frame-Options HTTP header",
            "description": "If the \u0027X-Frame-Options\u0027 setting is not provided, a malicious user may be able to overlay their own UI on top of the site by using an iframe.",
            "id": "cs/web/missing-x-frame-options",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-451/MissingXFrameOptions.ql",
            "problem.severity": "error"
          }
        },
        "cs/hardcoded-connection-string-credentials": {
          "id": "cs/hardcoded-connection-string-credentials",
          "name": "cs/hardcoded-connection-string-credentials",
          "shortDescription": "Hard-coded connection string with credentials",
          "fullDescription": "Credentials are hard-coded in a connection string in the source code of the application.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-259",
  "external/cwe/cwe-321",
  "external/cwe/cwe-798"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Hard-coded connection string with credentials",
            "description": "Credentials are hard-coded in a connection string in the source code of the application.",
            "id": "cs/hardcoded-connection-string-credentials",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-798/HardcodedConnectionString.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/broad-cookie-path": {
          "id": "cs/web/broad-cookie-path",
          "name": "cs/web/broad-cookie-path",
          "shortDescription": "Cookie security: overly broad path",
          "fullDescription": "Finds cookies with an overly broad path.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-287"
],
            "kind": "problem",
            "precision": "high",
            "name": "Cookie security: overly broad path",
            "description": "Finds cookies with an overly broad path.",
            "id": "cs/web/broad-cookie-path",
            "query-path": "/semmlecode-csharp-queries/Security Features/CookieWithOverlyBroadPath.ql",
            "problem.severity": "warning"
          }
        },
        "cs/weak-encryption": {
          "id": "cs/weak-encryption",
          "name": "cs/weak-encryption",
          "shortDescription": "Weak encryption",
          "fullDescription": "Finds uses of encryption algorithms that are weak and obsolete",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption",
            "description": "Finds uses of encryption algorithms that are weak and obsolete",
            "id": "cs/weak-encryption",
            "query-path": "/semmlecode-csharp-queries/Security Features/WeakEncryption.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/disabled-header-checking": {
          "id": "cs/web/disabled-header-checking",
          "name": "cs/web/disabled-header-checking",
          "shortDescription": "Header checking disabled",
          "fullDescription": "Finds places where header checking is disabled.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-113"
],
            "kind": "problem",
            "precision": "high",
            "name": "Header checking disabled",
            "description": "Finds places where header checking is disabled.",
            "id": "cs/web/disabled-header-checking",
            "query-path": "/semmlecode-csharp-queries/Security Features/HeaderCheckingDisabled.ql",
            "problem.severity": "warning"
          }
        },
        "cs/log-forging": {
          "id": "cs/log-forging",
          "name": "cs/log-forging",
          "shortDescription": "Log entries created from user input",
          "fullDescription": "Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-117"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Log entries created from user input",
            "description": "Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.",
            "id": "cs/log-forging",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-117/LogForging.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/requiressl-not-set": {
          "id": "cs/web/requiressl-not-set",
          "name": "cs/web/requiressl-not-set",
          "shortDescription": "'requireSSL' attribute is not set to true",
          "fullDescription": "Omitting the 'requireSSL' attribute allows data to be transmitted insecurely using HTTP. Always set 'requireSSL' to 'true' to ensure that HTTPS is used at all times.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-319",
  "external/cwe/cwe-614"
],
            "kind": "problem",
            "precision": "high",
            "name": "\u0027requireSSL\u0027 attribute is not set to true",
            "description": "Omitting the \u0027requireSSL\u0027 attribute allows data to be transmitted insecurely using HTTP. Always set \u0027requireSSL\u0027 to \u0027true\u0027 to ensure that HTTPS is used at all times.",
            "id": "cs/web/requiressl-not-set",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-614/RequireSSL.ql",
            "problem.severity": "error"
          }
        },
        "cs/regex-injection": {
          "id": "cs/regex-injection",
          "name": "cs/regex-injection",
          "shortDescription": "Regular expression injection",
          "fullDescription": "User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to provide a regex that could require exponential time on certain inputs.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-730",
  "external/cwe/cwe-400"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Regular expression injection",
            "description": "User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to provide a regex that could require exponential time on certain inputs.",
            "id": "cs/regex-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-730/RegexInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/insecure-dtd-handling": {
          "id": "cs/xml/insecure-dtd-handling",
          "name": "cs/xml/insecure-dtd-handling",
          "shortDescription": "Untrusted XML is read insecurely",
          "fullDescription": "Untrusted XML is read with an insecure resolver and DTD processing enabled.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-611",
  "external/cwe/cwe-827",
  "external/cwe/cwe-776"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Untrusted XML is read insecurely",
            "description": "Untrusted XML is read with an insecure resolver and DTD processing enabled.",
            "id": "cs/xml/insecure-dtd-handling",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-611/UntrustedDataInsecureXml.ql",
            "problem.severity": "error"
          }
        },
        "cs/sql-injection": {
          "id": "cs/sql-injection",
          "name": "cs/sql-injection",
          "shortDescription": "SQL query built from user-controlled sources",
          "fullDescription": "Building a SQL query from user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-089"
],
            "kind": "problem",
            "precision": "medium",
            "name": "SQL query built from user-controlled sources",
            "description": "Building a SQL query from user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
            "id": "cs/sql-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-089/SqlInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/redos": {
          "id": "cs/redos",
          "name": "cs/redos",
          "shortDescription": "Denial of Service from comparison of user input against expensive regex",
          "fullDescription": "User input should not be matched against a regular expression that could require exponential time on certain input.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-730",
  "external/cwe/cwe-400"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Denial of Service from comparison of user input against expensive regex",
            "description": "User input should not be matched against a regular expression that could require exponential time on certain input.",
            "id": "cs/redos",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-730/ReDoS.ql",
            "problem.severity": "error"
          }
        },
        "cs/exposure-of-sensitive-information": {
          "id": "cs/exposure-of-sensitive-information",
          "name": "cs/exposure-of-sensitive-information",
          "shortDescription": "Exposure of private information",
          "fullDescription": "If private information is written to an external location, it may be accessible by unauthorized persons.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-359"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Exposure of private information",
            "description": "If private information is written to an external location, it may be accessible by unauthorized persons.",
            "id": "cs/exposure-of-sensitive-information",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-359/ExposureOfPrivateInformation.ql",
            "problem.severity": "error"
          }
        }
      },
      "properties": {
        "originalUriBaseIds": {
  "%SRCROOT%": "file:///C:/corefx/src/System.Security.Cryptography.Xml/"
}
      }
    }
  ]
}