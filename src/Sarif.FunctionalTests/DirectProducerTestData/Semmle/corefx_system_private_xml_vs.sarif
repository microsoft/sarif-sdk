{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Semmle",
        "version": "1.15.2"
      },
      "files": {
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Serialization/Types.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Serialization/XmlSerializer.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Core/XmlValidatingReaderImpl.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Dom/XmlDocument.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/SchemaCollectionpreProcessor.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XdrBuilder.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XdrValidator.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XmlSchema.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XmlSchemaCollection.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XsdValidator.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/XPath/XPathNavigator.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/XmlReader/Tests/BaseUriTests.cs": {
          "mimeType": "text/x-csharp",
          "contents": "Ly8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLg0KLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS4NCi8vIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb24uDQoNCnVzaW5nIFN5c3RlbTsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOw0KdXNpbmcgU3lzdGVtLklPOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBYdW5pdDsNCg0KbmFtZXNwYWNlIFN5c3RlbS5YbWwuVGVzdHMNCnsNCiAgICBwdWJsaWMgY2xhc3MgQmFzZVVyaVRlc3RzIDogRmlsZUNsZWFudXBUZXN0QmFzZQ0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSBjb25zdCBzdHJpbmcgRHVtbXlYbWwgPSBAIjw/eG1sIHZlcnNpb249IiIxLjAiIj8+IjsNCg0KICAgICAgICBwdWJsaWMgc3RhdGljIElFbnVtZXJhYmxlPG9iamVjdFtdPiBHZXRYbWxSZWFkZXJVcmxDcmVhdGVNZXRob2RzKCkNCiAgICAgICAgew0KICAgICAgICAgICAgeWllbGQgcmV0dXJuIG5ldyBbXSB7IG5ldyBGdW5jPHN0cmluZywgWG1sUmVhZGVyPihzID0+IFhtbFJlYWRlci5DcmVhdGUocykpIH07DQogICAgICAgICAgICB5aWVsZCByZXR1cm4gbmV3IFtdIHsgbmV3IEZ1bmM8c3RyaW5nLCBYbWxSZWFkZXI+KHMgPT4gWG1sUmVhZGVyLkNyZWF0ZShGaWxlLk9wZW5SZWFkKHMpLCBuZXcgWG1sUmVhZGVyU2V0dGluZ3MgeyBDbG9zZUlucHV0ID0gdHJ1ZSB9LCBzKSkgfTsNCiAgICAgICAgICAgIHlpZWxkIHJldHVybiBuZXcgW10geyBuZXcgRnVuYzxzdHJpbmcsIFhtbFJlYWRlcj4ocyA9PiBYbWxSZWFkZXIuQ3JlYXRlKG5ldyBTdHJlYW1SZWFkZXIoRmlsZS5PcGVuUmVhZChzKSksIG5ldyBYbWxSZWFkZXJTZXR0aW5ncyB7IENsb3NlSW5wdXQgPSB0cnVlIH0sIHMpKSB9Ow0KICAgICAgICAgICAgeWllbGQgcmV0dXJuIG5ldyBbXSB7IG5ldyBGdW5jPHN0cmluZywgWG1sUmVhZGVyPihzID0+IG5ldyBYbWxUZXh0UmVhZGVyKHMpKSB9Ow0KICAgICAgICAgICAgeWllbGQgcmV0dXJuIG5ldyBbXSB7IG5ldyBGdW5jPHN0cmluZywgWG1sUmVhZGVyPihzID0+IG5ldyBYbWxUZXh0UmVhZGVyKHMsIEZpbGUuT3BlblJlYWQocykpKSB9Ow0KICAgICAgICAgICAgeWllbGQgcmV0dXJuIG5ldyBbXSB7IG5ldyBGdW5jPHN0cmluZywgWG1sUmVhZGVyPihzID0+IG5ldyBYbWxUZXh0UmVhZGVyKHMsIG5ldyBTdHJlYW1SZWFkZXIoRmlsZS5PcGVuUmVhZChzKSkpKSB9Ow0KICAgICAgICB9DQoNCiAgICAgICAgW1RoZW9yeV0NCiAgICAgICAgW01lbWJlckRhdGEobmFtZW9mKEdldFhtbFJlYWRlclVybENyZWF0ZU1ldGhvZHMpKV0NCiAgICAgICAgcHVibGljIHZvaWQgQ3JlYXRlV2l0aEFic29sdXRlUGF0aEdpdmVzQWJzb2x1dGVCYXNlVXJpKEZ1bmM8c3RyaW5nLCBYbWxSZWFkZXI+IGZhY3RvcnkpDQogICAgICAgIHsNCiAgICAgICAgICAgIHN0cmluZyB0ZW1wUGF0aCA9IEdldFRlc3RGaWxlUGF0aCgpOw0KICAgICAgICAgICAgRmlsZS5Xcml0ZUFsbFRleHQodGVtcFBhdGgsIER1bW15WG1sKTsNCiAgICAgICAgICAgIHVzaW5nIChYbWxSZWFkZXIgcmVhZGVyID0gZmFjdG9yeSh0ZW1wUGF0aCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgQXNzZXJ0LlRydWUobmV3IFVyaShyZWFkZXIuQmFzZVVSSSwgVXJpS2luZC5SZWxhdGl2ZU9yQWJzb2x1dGUpLklzQWJzb2x1dGVVcmkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Misc.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_ProhibitDTD.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_ValidationEventHandler.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/XmlSerializer/XmlSerializerTests.RuntimeOnly.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/XmlSerializer/XmlSerializerTests.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/TempFiles.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XslCompiledTransform.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XsltApiV2.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXmlCache.cs": {
          "mimeType": "text/x-csharp",
          "contents": "Ly8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLg0KLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS4NCi8vIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb24uDQoNCnVzaW5nIFh1bml0LkFic3RyYWN0aW9uczsNCnVzaW5nIFN5c3RlbTsNCnVzaW5nIFN5c3RlbS5JTzsNCnVzaW5nIFN5c3RlbS5UZXh0Ow0KdXNpbmcgU3lzdGVtLlhtbDsNCnVzaW5nIFN5c3RlbS5YbWwuU2NoZW1hOw0KDQpwdWJsaWMgZW51bSBOb2RlRmxhZ3MNCnsNCiAgICBOb25lID0gMCwNCiAgICBFbXB0eUVsZW1lbnQgPSAxLA0KICAgIEhhc1ZhbHVlID0gMiwNCiAgICBTaW5nbGVRdW90ZSA9IDQsDQogICAgRGVmYXVsdEF0dHJpYnV0ZSA9IDgsDQogICAgVW5wYXJzZWRFbnRpdGllcyA9IDE2LA0KICAgIElzV2hpdGVzcGFjZSA9IDMyLA0KICAgIERvY3VtZW50Um9vdCA9IDY0LA0KICAgIEF0dHJpYnV0ZVRleHROb2RlID0gMTI4LA0KICAgIE1peGVkQ29udGVudCA9IDI1NiwNCiAgICBJbmRlbnQgPSA1MTINCn0NCg0KYWJzdHJhY3QgcHVibGljIGNsYXNzIENYbWxCYXNlDQp7DQogICAgcHJvdGVjdGVkIFhtbE5vZGVUeXBlIF9uVHlwZTsNCiAgICBwcm90ZWN0ZWQgc3RyaW5nIF9zdHJOYW1lOw0KICAgIHByb3RlY3RlZCBzdHJpbmcgX3N0ckxvY2FsTmFtZTsNCiAgICBwcm90ZWN0ZWQgc3RyaW5nIF9zdHJQcmVmaXg7DQogICAgcHJvdGVjdGVkIHN0cmluZyBfc3RyTmFtZXNwYWNlOw0KICAgIGludGVybmFsIGludCBfbkRlcHRoOw0KICAgIGludGVybmFsIE5vZGVGbGFncyBfZUZsYWdzID0gTm9kZUZsYWdzLk5vbmU7DQogICAgaW50ZXJuYWwgQ1htbEJhc2UgX3JOZXh0Tm9kZSA9IG51bGw7DQogICAgaW50ZXJuYWwgQ1htbEJhc2UgX3JQYXJlbnROb2RlID0gbnVsbDsNCiAgICBpbnRlcm5hbCBDWG1sQmFzZSBfckZpcnN0Q2hpbGROb2RlID0gbnVsbDsNCiAgICBpbnRlcm5hbCBDWG1sQmFzZSBfckxhc3RDaGlsZE5vZGUgPSBudWxsOw0KICAgIGludGVybmFsIGludCBfbkNoaWxkTm9kZXMgPSAwOw0KDQogICAgLy8NCiAgICAvLyBDb25zdHJ1Y3RvcnMNCiAgICAvLw0KICAgIHB1YmxpYyBDWG1sQmFzZShzdHJpbmcgc3RyUHJlZml4LCBzdHJpbmcgc3RyTmFtZSwgc3RyaW5nIHN0ckxvY2FsTmFtZSwgWG1sTm9kZVR5cGUgTm9kZVR5cGUsIHN0cmluZyBzdHJOYW1lc3BhY2UpDQogICAgew0KICAgICAgICBfc3RyUHJlZml4ID0gc3RyUHJlZml4Ow0KICAgICAgICBfc3RyTmFtZSA9IHN0ck5hbWU7DQogICAgICAgIF9zdHJMb2NhbE5hbWUgPSBzdHJMb2NhbE5hbWU7DQogICAgICAgIF9uVHlwZSA9IE5vZGVUeXBlOw0KICAgICAgICBfc3RyTmFtZXNwYWNlID0gc3RyTmFtZXNwYWNlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBDWG1sQmFzZShzdHJpbmcgc3RyUHJlZml4LCBzdHJpbmcgc3RyTmFtZSwgWG1sTm9kZVR5cGUgTm9kZVR5cGUsIHN0cmluZyBzdHJOYW1lc3BhY2UpDQogICAgICAgIDogdGhpcyhzdHJQcmVmaXgsIHN0ck5hbWUsIHN0ck5hbWUsIE5vZGVUeXBlLCBzdHJOYW1lc3BhY2UpDQogICAgeyB9DQoNCiAgICBwdWJsaWMgQ1htbEJhc2Uoc3RyaW5nIHN0clByZWZpeCwgc3RyaW5nIHN0ck5hbWUsIFhtbE5vZGVUeXBlIE5vZGVUeXBlKQ0KICAgICAgICA6IHRoaXMoc3RyUHJlZml4LCBzdHJOYW1lLCBzdHJOYW1lLCBOb2RlVHlwZSwgIiIpDQogICAgeyB9DQoNCiAgICBwdWJsaWMgQ1htbEJhc2Uoc3RyaW5nIHN0ck5hbWUsIFhtbE5vZGVUeXBlIE5vZGVUeXBlKQ0KICAgICAgICA6IHRoaXMoIiIsIHN0ck5hbWUsIHN0ck5hbWUsIE5vZGVUeXBlLCAiIikNCiAgICB7IH0NCg0KICAgIC8vDQogICAgLy8gVmlydHVhbCBNZXRob2RzIGFuZCBQcm9wZXJ0aWVzDQogICAgLy8NCiAgICBhYnN0cmFjdCBwdWJsaWMgdm9pZCBXcml0ZShYbWxXcml0ZXIgclhtbFdyaXRlcik7DQoNCiAgICBhYnN0cmFjdCBwdWJsaWMgdm9pZCBXcml0ZVhtbChUZXh0V3JpdGVyIHJUVyk7DQoNCiAgICBhYnN0cmFjdCBwdWJsaWMgc3RyaW5nIFZhbHVlDQogICAgeyBnZXQ7IH0NCg0KICAgIC8vDQogICAgLy8gUHVibGljIE1ldGhvZHMgYW5kIFByb3BlcnRpZXMNCiAgICAvLw0KICAgIHB1YmxpYyBzdHJpbmcgTmFtZQ0KICAgIHsNCiAgICAgICAgZ2V0IHsgcmV0dXJuIF9zdHJOYW1lOyB9DQogICAgfQ0KDQogICAgcHVibGljIHN0cmluZyBMb2NhbE5hbWUNCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBfc3RyTG9jYWxOYW1lOyB9DQogICAgfQ0KDQogICAgcHVibGljIHN0cmluZyBQcmVmaXgNCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBfc3RyUHJlZml4OyB9DQogICAgfQ0KDQogICAgcHVibGljIHN0cmluZyBOYW1lc3BhY2UNCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBfc3RyTmFtZXNwYWNlOyB9DQogICAgfQ0KDQogICAgcHVibGljIGludCBEZXB0aA0KICAgIHsNCiAgICAgICAgZ2V0IHsgcmV0dXJuIF9uRGVwdGg7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgWG1sTm9kZVR5cGUgTm9kZVR5cGUNCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBfblR5cGU7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgTm9kZUZsYWdzIEZsYWdzDQogICAgew0KICAgICAgICBnZXQgeyByZXR1cm4gX2VGbGFnczsgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBpbnQgQ2hpbGROb2RlQ291bnQNCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBfbkNoaWxkTm9kZXM7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgdm9pZCBJbnNlcnROb2RlKENYbWxCYXNlIHJOb2RlKQ0KICAgIHsNCiAgICAgICAgaWYgKF9yRmlyc3RDaGlsZE5vZGUgPT0gbnVsbCkNCiAgICAgICAgew0KICAgICAgICAgICAgX3JGaXJzdENoaWxkTm9kZSA9IF9yTGFzdENoaWxkTm9kZSA9IHJOb2RlOw0KICAgICAgICB9DQogICAgICAgIGVsc2UNCiAgICAgICAgew0KICAgICAgICAgICAgX3JMYXN0Q2hpbGROb2RlLl9yTmV4dE5vZGUgPSByTm9kZTsNCiAgICAgICAgICAgIF9yTGFzdENoaWxkTm9kZSA9IHJOb2RlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCh0aGlzLl9lRmxhZ3MgJiBOb2RlRmxhZ3MuSXNXaGl0ZXNwYWNlKSA9PSAwKQ0KICAgICAgICAgICAgX25DaGlsZE5vZGVzKys7DQoNCiAgICAgICAgck5vZGUuX3JQYXJlbnROb2RlID0gdGhpczsNCiAgICB9DQoNCiAgICAvLw0KICAgIC8vIEludGVybmFsIE1ldGhvZHMgYW5kIFByb3BlcnRpZXMNCiAgICAvLw0KICAgIGludGVybmFsIENYbWxCYXNlIF9DaGlsZChpbnQgbikNCiAgICB7DQogICAgICAgIGludCBpOw0KICAgICAgICBpbnQgajsNCiAgICAgICAgQ1htbEJhc2UgckNoaWxkID0gX3JGaXJzdENoaWxkTm9kZTsNCg0KICAgICAgICBmb3IgKGkgPSAwLCBqID0gMDsgckNoaWxkICE9IG51bGw7IGkrKywgckNoaWxkID0gckNoaWxkLl9yTmV4dE5vZGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICgockNoaWxkLl9lRmxhZ3MgJiBOb2RlRmxhZ3MuSXNXaGl0ZXNwYWNlKSA9PSAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChqKysgPT0gbikgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gckNoaWxkOw0KICAgIH0NCg0KICAgIGludGVybmFsIENYbWxCYXNlIF9DaGlsZChzdHJpbmcgc3RyKQ0KICAgIHsNCiAgICAgICAgQ1htbEJhc2UgckNoaWxkOw0KDQogICAgICAgIGZvciAockNoaWxkID0gX3JGaXJzdENoaWxkTm9kZTsgckNoaWxkICE9IG51bGw7IHJDaGlsZCA9IHJDaGlsZC5fck5leHROb2RlKQ0KICAgICAgICAgICAgaWYgKHJDaGlsZC5OYW1lID09IHN0cikgYnJlYWs7DQoNCiAgICAgICAgcmV0dXJuIHJDaGlsZDsNCiAgICB9DQp9DQoNCnB1YmxpYyBjbGFzcyBDWG1sQXR0cmlidXRlIDogQ1htbEJhc2UNCnsNCiAgICAvLw0KICAgIC8vIENvbnN0cnVjdG9yDQogICAgLy8NCiAgICBwdWJsaWMgQ1htbEF0dHJpYnV0ZShYbWxSZWFkZXIgclhtbFJlYWRlcikNCiAgICAgICAgOiBiYXNlKHJYbWxSZWFkZXIuUHJlZml4LCByWG1sUmVhZGVyLk5hbWUsIHJYbWxSZWFkZXIuTG9jYWxOYW1lLCByWG1sUmVhZGVyLk5vZGVUeXBlLCByWG1sUmVhZGVyLk5hbWVzcGFjZVVSSSkNCiAgICB7DQogICAgICAgIGlmIChyWG1sUmVhZGVyLklzRGVmYXVsdCkNCiAgICAgICAgICAgIF9lRmxhZ3MgfD0gTm9kZUZsYWdzLkRlZmF1bHRBdHRyaWJ1dGU7DQoNCiAgICAgICAgaWYgKHJYbWxSZWFkZXIuUXVvdGVDaGFyID09ICdcJycpDQogICAgICAgICAgICBfZUZsYWdzIHw9IE5vZGVGbGFncy5TaW5nbGVRdW90ZTsNCiAgICB9DQoNCiAgICAvLw0KICAgIC8vIFB1YmxpYyBNZXRob2RzIGFuZCBQcm9wZXJ0aWVzIChPdmVycmlkZSkNCiAgICAvLw0KICAgIG92ZXJyaWRlIHB1YmxpYyB2b2lkIFdyaXRlKFhtbFdyaXRlciByWG1sV3JpdGVyKQ0KICAgIHsNCiAgICAgICAgQ1htbEJhc2Ugck5vZGU7DQoNCiAgICAgICAgaWYgKCh0aGlzLl9lRmxhZ3MgJiBOb2RlRmxhZ3MuRGVmYXVsdEF0dHJpYnV0ZSkgPT0gMCkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHJYbWxXcml0ZXIgaXMgWG1sVGV4dFdyaXRlcikNCiAgICAgICAgICAgICAgICAoKFhtbFRleHRXcml0ZXIpclhtbFdyaXRlcikuUXVvdGVDaGFyID0gdGhpcy5RdW90ZTsNCg0KICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZVN0YXJ0QXR0cmlidXRlKHRoaXMuUHJlZml4LCB0aGlzLkxvY2FsTmFtZSwgdGhpcy5OYW1lc3BhY2UpOw0KDQogICAgICAgICAgICBmb3IgKHJOb2RlID0gdGhpcy5fckZpcnN0Q2hpbGROb2RlOyByTm9kZSAhPSBudWxsOyByTm9kZSA9IHJOb2RlLl9yTmV4dE5vZGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgck5vZGUuV3JpdGUoclhtbFdyaXRlcik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJYbWxXcml0ZXIuV3JpdGVFbmRBdHRyaWJ1dGUoKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIG92ZXJyaWRlIHB1YmxpYyB2b2lkIFdyaXRlWG1sKFRleHRXcml0ZXIgclRXKQ0KICAgIHsNCiAgICAgICAgaWYgKCh0aGlzLl9lRmxhZ3MgJiBOb2RlRmxhZ3MuRGVmYXVsdEF0dHJpYnV0ZSkgPT0gMCkNCiAgICAgICAgew0KICAgICAgICAgICAgQ1htbEJhc2Ugck5vZGU7DQoNCiAgICAgICAgICAgIHJUVy5Xcml0ZSgnICcgKyB0aGlzLk5hbWUgKyAnPScgKyB0aGlzLlF1b3RlKTsNCiAgICAgICAgICAgIGZvciAock5vZGUgPSB0aGlzLl9yRmlyc3RDaGlsZE5vZGU7IHJOb2RlICE9IG51bGw7IHJOb2RlID0gck5vZGUuX3JOZXh0Tm9kZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByTm9kZS5Xcml0ZVhtbChyVFcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgclRXLldyaXRlKHRoaXMuUXVvdGUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8NCiAgICAvLyBQdWJsaWMgTWV0aG9kcyBhbmQgUHJvcGVydGllcw0KICAgIC8vDQogICAgb3ZlcnJpZGUgcHVibGljIHN0cmluZyBWYWx1ZQ0KICAgIHsNCiAgICAgICAgZ2V0DQogICAgICAgIHsNCiAgICAgICAgICAgIENYbWxOb2RlIHJOb2RlOw0KICAgICAgICAgICAgc3RyaW5nIHN0clZhbHVlID0gc3RyaW5nLkVtcHR5Ow0KDQogICAgICAgICAgICBmb3IgKHJOb2RlID0gKENYbWxOb2RlKXRoaXMuX3JGaXJzdENoaWxkTm9kZTsgck5vZGUgIT0gbnVsbDsgck5vZGUgPSByTm9kZS5OZXh0Tm9kZSkNCiAgICAgICAgICAgICAgICBzdHJWYWx1ZSArPSByTm9kZS5WYWx1ZTsNCg0KICAgICAgICAgICAgcmV0dXJuIHN0clZhbHVlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHVibGljIENYbWxBdHRyaWJ1dGUgTmV4dEF0dHJpYnV0ZQ0KICAgIHsNCiAgICAgICAgZ2V0IHsgcmV0dXJuIChDWG1sQXR0cmlidXRlKXRoaXMuX3JOZXh0Tm9kZTsgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBjaGFyIFF1b3RlDQogICAgew0KICAgICAgICBnZXQgeyByZXR1cm4gKChiYXNlLl9lRmxhZ3MgJiBOb2RlRmxhZ3MuU2luZ2xlUXVvdGUpICE9IDAgPyAnXCcnIDogJyInKTsgfQ0KICAgICAgICBzZXQgeyBpZiAodmFsdWUgPT0gJ1wnJykgYmFzZS5fZUZsYWdzIHw9IE5vZGVGbGFncy5TaW5nbGVRdW90ZTsgZWxzZSBiYXNlLl9lRmxhZ3MgJj0gfk5vZGVGbGFncy5TaW5nbGVRdW90ZTsgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBDWG1sTm9kZSBGaXJzdENoaWxkDQogICAgew0KICAgICAgICBnZXQgeyByZXR1cm4gKENYbWxOb2RlKWJhc2UuX3JGaXJzdENoaWxkTm9kZTsgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBDWG1sTm9kZSBDaGlsZChpbnQgbikNCiAgICB7DQogICAgICAgIHJldHVybiAoQ1htbE5vZGUpYmFzZS5fQ2hpbGQobik7DQogICAgfQ0KDQogICAgcHVibGljIENYbWxOb2RlIENoaWxkKHN0cmluZyBzdHIpDQogICAgew0KICAgICAgICByZXR1cm4gKENYbWxOb2RlKWJhc2UuX0NoaWxkKHN0cik7DQogICAgfQ0KfQ0KDQpwdWJsaWMgY2xhc3MgQ1htbE5vZGUgOiBDWG1sQmFzZQ0Kew0KICAgIGludGVybmFsIHN0cmluZyBfc3RyVmFsdWUgPSBudWxsOw0KICAgIHByaXZhdGUgQ1htbEF0dHJpYnV0ZSBfckZpcnN0QXR0cmlidXRlID0gbnVsbDsNCiAgICBwcml2YXRlIENYbWxBdHRyaWJ1dGUgX3JMYXN0QXR0cmlidXRlID0gbnVsbDsNCiAgICBwcml2YXRlIGludCBfbkF0dHJpYnV0ZUNvdW50ID0gMDsNCg0KICAgIC8vDQogICAgLy8gQ29uc3RydWN0b3JzDQogICAgLy8NCiAgICBwdWJsaWMgQ1htbE5vZGUoc3RyaW5nIHN0clByZWZpeCwgc3RyaW5nIHN0ck5hbWUsIFhtbE5vZGVUeXBlIE5vZGVUeXBlKQ0KICAgICAgICA6IGJhc2Uoc3RyUHJlZml4LCBzdHJOYW1lLCBOb2RlVHlwZSkNCiAgICB7IH0NCg0KICAgIHB1YmxpYyBDWG1sTm9kZShYbWxSZWFkZXIgclhtbFJlYWRlcikNCiAgICAgICAgOiBiYXNlKHJYbWxSZWFkZXIuUHJlZml4LCByWG1sUmVhZGVyLk5hbWUsIHJYbWxSZWFkZXIuTG9jYWxOYW1lLCByWG1sUmVhZGVyLk5vZGVUeXBlLCByWG1sUmVhZGVyLk5hbWVzcGFjZVVSSSkNCiAgICB7DQogICAgICAgIF9lRmxhZ3MgfD0gQ1htbENhY2hlLl9lRGVmYXVsdEZsYWdzOw0KDQogICAgICAgIGlmIChOb2RlVHlwZSA9PSBYbWxOb2RlVHlwZS5XaGl0ZXNwYWNlIHx8DQogICAgICAgICAgICBOb2RlVHlwZSA9PSBYbWxOb2RlVHlwZS5TaWduaWZpY2FudFdoaXRlc3BhY2UpDQogICAgICAgIHsNCiAgICAgICAgICAgIF9lRmxhZ3MgfD0gTm9kZUZsYWdzLklzV2hpdGVzcGFjZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChyWG1sUmVhZGVyLklzRW1wdHlFbGVtZW50KQ0KICAgICAgICB7DQogICAgICAgICAgICBfZUZsYWdzIHw9IE5vZGVGbGFncy5FbXB0eUVsZW1lbnQ7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoclhtbFJlYWRlci5IYXNWYWx1ZSkNCiAgICAgICAgew0KICAgICAgICAgICAgX2VGbGFncyB8PSBOb2RlRmxhZ3MuSGFzVmFsdWU7DQogICAgICAgICAgICBfc3RyVmFsdWUgPSByWG1sUmVhZGVyLlZhbHVlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8NCiAgICAvLyBQdWJsaWMgTWV0aG9kcyBhbmQgUHJvcGVydGllcyAoT3ZlcnJpZGUpDQogICAgLy8NCiAgICBvdmVycmlkZSBwdWJsaWMgdm9pZCBXcml0ZShYbWxXcml0ZXIgclhtbFdyaXRlcikNCiAgICB7DQogICAgICAgIENYbWxCYXNlIHJOb2RlOw0KICAgICAgICBDWG1sQXR0cmlidXRlIHJBdHRyaWJ1dGU7DQogICAgICAgIHN0cmluZyBEb2NUeXBlUHVibGljID0gbnVsbDsNCiAgICAgICAgc3RyaW5nIERvY1R5cGVTeXN0ZW0gPSBudWxsOw0KDQogICAgICAgIHN3aXRjaCAodGhpcy5Ob2RlVHlwZSkNCiAgICAgICAgew0KICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5DREFUQToNCiAgICAgICAgICAgICAgICByWG1sV3JpdGVyLldyaXRlQ0RhdGEodGhpcy5fc3RyVmFsdWUpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLkNvbW1lbnQ6DQogICAgICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZUNvbW1lbnQodGhpcy5fc3RyVmFsdWUpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLkRvY3VtZW50VHlwZToNCiAgICAgICAgICAgICAgICBmb3IgKHJBdHRyaWJ1dGUgPSBfckZpcnN0QXR0cmlidXRlOyByQXR0cmlidXRlICE9IG51bGw7IHJBdHRyaWJ1dGUgPSByQXR0cmlidXRlLk5leHRBdHRyaWJ1dGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAockF0dHJpYnV0ZS5OYW1lID09ICJQVUJMSUMiKQ0KICAgICAgICAgICAgICAgICAgICB7IERvY1R5cGVQdWJsaWMgPSByQXR0cmlidXRlLlZhbHVlOyB9DQogICAgICAgICAgICAgICAgICAgIGlmIChyQXR0cmlidXRlLk5hbWUgPT0gIlNZU1RFTSIpDQogICAgICAgICAgICAgICAgICAgIHsgRG9jVHlwZVN5c3RlbSA9IHJBdHRyaWJ1dGUuVmFsdWU7IH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZURvY1R5cGUodGhpcy5OYW1lLCBEb2NUeXBlUHVibGljLCBEb2NUeXBlU3lzdGVtLCB0aGlzLl9zdHJWYWx1ZSk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuRW50aXR5UmVmZXJlbmNlOg0KICAgICAgICAgICAgICAgIHJYbWxXcml0ZXIuV3JpdGVFbnRpdHlSZWYodGhpcy5OYW1lKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246DQogICAgICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLk5hbWUsIHRoaXMuX3N0clZhbHVlKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5UZXh0Og0KICAgICAgICAgICAgICAgIGlmICh0aGlzLk5hbWUgPT0gc3RyaW5nLkVtcHR5KQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCh0aGlzLkZsYWdzICYgTm9kZUZsYWdzLlVucGFyc2VkRW50aXRpZXMpID09IDApDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJYbWxXcml0ZXIuV3JpdGVTdHJpbmcodGhpcy5fc3RyVmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZVJhdyh0aGlzLl9zdHJWYWx1ZS5Ub0NoYXJBcnJheSgpLCAwLCB0aGlzLl9zdHJWYWx1ZS5MZW5ndGgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdHJOYW1lWzBdID09ICcjJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHJYbWxXcml0ZXIuV3JpdGVDaGFyRW50aXR5KHRoaXMuX3N0clZhbHVlWzBdKTsNCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZUVudGl0eVJlZih0aGlzLk5hbWUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5XaGl0ZXNwYWNlOg0KICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5TaWduaWZpY2FudFdoaXRlc3BhY2U6DQogICAgICAgICAgICAgICAgaWYgKCh0aGlzLl9yUGFyZW50Tm9kZS5fZUZsYWdzICYgTm9kZUZsYWdzLkRvY3VtZW50Um9vdCkgIT0gMCkNCiAgICAgICAgICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZVJhdyh0aGlzLl9zdHJWYWx1ZS5Ub0NoYXJBcnJheSgpLCAwLCB0aGlzLl9zdHJWYWx1ZS5MZW5ndGgpOw0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZVN0cmluZyh0aGlzLl9zdHJWYWx1ZSk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuRWxlbWVudDoNCiAgICAgICAgICAgICAgICByWG1sV3JpdGVyLldyaXRlU3RhcnRFbGVtZW50KHRoaXMuUHJlZml4LCB0aGlzLkxvY2FsTmFtZSwgbnVsbCk7DQoNCiAgICAgICAgICAgICAgICBmb3IgKHJBdHRyaWJ1dGUgPSBfckZpcnN0QXR0cmlidXRlOyByQXR0cmlidXRlICE9IG51bGw7IHJBdHRyaWJ1dGUgPSByQXR0cmlidXRlLk5leHRBdHRyaWJ1dGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByQXR0cmlidXRlLldyaXRlKHJYbWxXcml0ZXIpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmICgodGhpcy5GbGFncyAmIE5vZGVGbGFncy5FbXB0eUVsZW1lbnQpID09IDApDQogICAgICAgICAgICAgICAgICAgIHJYbWxXcml0ZXIuV3JpdGVTdHJpbmcoc3RyaW5nLkVtcHR5KTsNCg0KICAgICAgICAgICAgICAgIGZvciAock5vZGUgPSBiYXNlLl9yRmlyc3RDaGlsZE5vZGU7IHJOb2RlICE9IG51bGw7IHJOb2RlID0gck5vZGUuX3JOZXh0Tm9kZSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJOb2RlLldyaXRlKHJYbWxXcml0ZXIpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIFNob3VsZCBvbmx5IHByb2R1Y2UgZW1wdHkgdGFnIGlmIHRoZSBvcmlnaW5hbCBkb2N1bWVudCB1c2VkIGVtcHR5IHRhZw0KICAgICAgICAgICAgICAgIGlmICgodGhpcy5GbGFncyAmIE5vZGVGbGFncy5FbXB0eUVsZW1lbnQpID09IDApDQogICAgICAgICAgICAgICAgICAgIHJYbWxXcml0ZXIuV3JpdGVGdWxsRW5kRWxlbWVudCgpOw0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgclhtbFdyaXRlci5Xcml0ZUVuZEVsZW1lbnQoKTsNCg0KICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLlhtbERlY2xhcmF0aW9uOg0KICAgICAgICAgICAgICAgIHJYbWxXcml0ZXIuV3JpdGVSYXcoIjw/eG1sICIgKyB0aGlzLl9zdHJWYWx1ZSArICI/PiIpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgIHRocm93IChuZXcgRXhjZXB0aW9uKCJOb2RlLldyaXRlOiBVbmhhbmRsZWQgbm9kZSB0eXBlICIgKyB0aGlzLk5vZGVUeXBlLlRvU3RyaW5nKCkpKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIG92ZXJyaWRlIHB1YmxpYyB2b2lkIFdyaXRlWG1sKFRleHRXcml0ZXIgclRXKQ0KICAgIHsNCiAgICAgICAgU3RyaW5nIHN0clhtbDsNCiAgICAgICAgQ1htbEF0dHJpYnV0ZSByQXR0cmlidXRlOw0KICAgICAgICBDWG1sQmFzZSByTm9kZTsNCg0KICAgICAgICBzd2l0Y2ggKHRoaXMuX25UeXBlKQ0KICAgICAgICB7DQogICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLlRleHQ6DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0ck5hbWUgPT0gIiIpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByVFcuV3JpdGUodGhpcy5fc3RyVmFsdWUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RyTmFtZS5TdGFydHNXaXRoKCIjIikpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJUVy5Xcml0ZSgiJiIgKyBDb252ZXJ0LlRvU3RyaW5nKENvbnZlcnQuVG9JbnQzMih0aGlzLl9zdHJWYWx1ZVswXSkpICsgIjsiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJUVy5Xcml0ZSgiJiIgKyB0aGlzLk5hbWUgKyAiOyIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLldoaXRlc3BhY2U6DQogICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLlNpZ25pZmljYW50V2hpdGVzcGFjZToNCiAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuRG9jdW1lbnRUeXBlOg0KICAgICAgICAgICAgICAgIHJUVy5Xcml0ZSh0aGlzLl9zdHJWYWx1ZSk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuRWxlbWVudDoNCiAgICAgICAgICAgICAgICBzdHJYbWwgPSB0aGlzLk5hbWU7DQogICAgICAgICAgICAgICAgclRXLldyaXRlKCc8JyArIHN0clhtbCk7DQoNCiAgICAgICAgICAgICAgICAvL1B1dCBpbiBhbGwgdGhlIEF0dHJpYnV0ZXMNCiAgICAgICAgICAgICAgICBmb3IgKHJBdHRyaWJ1dGUgPSBfckZpcnN0QXR0cmlidXRlOyByQXR0cmlidXRlICE9IG51bGw7IHJBdHRyaWJ1dGUgPSByQXR0cmlidXRlLk5leHRBdHRyaWJ1dGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByQXR0cmlidXRlLldyaXRlWG1sKHJUVyk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy9JZiB0aGVyZSBpcyBjaGlsZHJlbiwgcHV0IHRob3NlIGluLCBvdGhlcndpc2UgY2xvc2UgdGhlIHRhZy4NCiAgICAgICAgICAgICAgICBpZiAoKGJhc2UuX2VGbGFncyAmIE5vZGVGbGFncy5FbXB0eUVsZW1lbnQpID09IDApDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICByVFcuV3JpdGUoJz4nKTsNCg0KICAgICAgICAgICAgICAgICAgICBmb3IgKHJOb2RlID0gYmFzZS5fckZpcnN0Q2hpbGROb2RlOyByTm9kZSAhPSBudWxsOyByTm9kZSA9IHJOb2RlLl9yTmV4dE5vZGUpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJOb2RlLldyaXRlWG1sKHJUVyk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICByVFcuV3JpdGUoIjwvIiArIHN0clhtbCArICI+Iik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHJUVy5Xcml0ZSgiIC8+Iik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuRW50aXR5UmVmZXJlbmNlOg0KICAgICAgICAgICAgICAgIHJUVy5Xcml0ZSgiJiIgKyB0aGlzLl9zdHJOYW1lICsgIjsiKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5Ob3RhdGlvbjoNCiAgICAgICAgICAgICAgICByVFcuV3JpdGUoIjwhTk9UQVRJT04gIiArIHRoaXMuX3N0clZhbHVlICsgIj4iKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5DREFUQToNCiAgICAgICAgICAgICAgICByVFcuV3JpdGUoIjwhW0NEQVRBWyIgKyB0aGlzLl9zdHJWYWx1ZSArICJdXT4iKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5YbWxEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uOg0KICAgICAgICAgICAgICAgIHJUVy5Xcml0ZSgiPD8iICsgdGhpcy5fc3RyTmFtZSArICIgIiArIHRoaXMuX3N0clZhbHVlICsgIj8+Iik7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuQ29tbWVudDoNCiAgICAgICAgICAgICAgICByVFcuV3JpdGUoIjwhLS0iICsgdGhpcy5fc3RyVmFsdWUgKyAiLS0+Iik7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgdGhyb3cgKG5ldyBFeGNlcHRpb24oIlVuaGFuZGxlZCBOb2RlVHlwZSAiICsgdGhpcy5fblR5cGUuVG9TdHJpbmcoKSkpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8NCiAgICAvLyBQdWJsaWMgTWV0aG9kcyBhbmQgUHJvcGVydGllcw0KICAgIC8vDQogICAgcHVibGljIHN0cmluZyBOb2RlVmFsdWUNCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBfc3RyVmFsdWU7IH0NCiAgICB9DQoNCiAgICBvdmVycmlkZSBwdWJsaWMgc3RyaW5nIFZhbHVlDQogICAgew0KICAgICAgICBnZXQNCiAgICAgICAgew0KICAgICAgICAgICAgc3RyaW5nIHN0clZhbHVlID0gIiI7DQogICAgICAgICAgICBDWG1sTm9kZSByQ2hpbGQ7DQoNCiAgICAgICAgICAgIGlmICgodGhpcy5fZUZsYWdzICYgTm9kZUZsYWdzLkhhc1ZhbHVlKSAhPSAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGNoYXIgY2hFbnQ7DQogICAgICAgICAgICAgICAgaW50IG5JbmRleEFtcCA9IDA7DQogICAgICAgICAgICAgICAgaW50IG5JbmRleFNlbSA9IDA7DQoNCiAgICAgICAgICAgICAgICBpZiAoKHRoaXMuX2VGbGFncyAmIE5vZGVGbGFncy5VbnBhcnNlZEVudGl0aWVzKSA9PSAwKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RyVmFsdWU7DQoNCiAgICAgICAgICAgICAgICBzdHJWYWx1ZSA9IHRoaXMuX3N0clZhbHVlOw0KDQogICAgICAgICAgICAgICAgd2hpbGUgKChuSW5kZXhBbXAgPSBzdHJWYWx1ZS5JbmRleE9mKCcmJywgbkluZGV4QW1wKSkgIT0gLTEpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBuSW5kZXhTZW0gPSBzdHJWYWx1ZS5JbmRleE9mKCc7JywgbkluZGV4QW1wKTsNCiAgICAgICAgICAgICAgICAgICAgY2hFbnQgPSBSZXNvbHZlQ2hhckVudGl0eShzdHJWYWx1ZS5TdWJzdHJpbmcobkluZGV4QW1wICsgMSwgbkluZGV4U2VtIC0gbkluZGV4QW1wIC0gMSkpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hFbnQgIT0gY2hhci5NaW5WYWx1ZSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyVmFsdWUgPSBzdHJWYWx1ZS5TdWJzdHJpbmcoMCwgbkluZGV4QW1wKSArIGNoRW50ICsgc3RyVmFsdWUuU3Vic3RyaW5nKG5JbmRleFNlbSArIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgbkluZGV4QW1wKys7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgbkluZGV4QW1wID0gbkluZGV4U2VtOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gc3RyVmFsdWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZvciAockNoaWxkID0gKENYbWxOb2RlKXRoaXMuX3JGaXJzdENoaWxkTm9kZTsgckNoaWxkICE9IG51bGw7IHJDaGlsZCA9IChDWG1sTm9kZSlyQ2hpbGQuX3JOZXh0Tm9kZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBzdHJWYWx1ZSA9IHN0clZhbHVlICsgckNoaWxkLlZhbHVlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gc3RyVmFsdWU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgQ1htbE5vZGUgTmV4dE5vZGUNCiAgICB7DQogICAgICAgIGdldA0KICAgICAgICB7DQogICAgICAgICAgICBDWG1sQmFzZSByTm9kZSA9IHRoaXMuX3JOZXh0Tm9kZTsNCg0KICAgICAgICAgICAgd2hpbGUgKHJOb2RlICE9IG51bGwgJiYNCiAgICAgICAgICAgICAgICAgICAock5vZGUuRmxhZ3MgJiBOb2RlRmxhZ3MuSXNXaGl0ZXNwYWNlKSAhPSAwKQ0KICAgICAgICAgICAgICAgIHJOb2RlID0gck5vZGUuX3JOZXh0Tm9kZTsNCiAgICAgICAgICAgIHJldHVybiAoQ1htbE5vZGUpck5vZGU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgQ1htbE5vZGUgRmlyc3RDaGlsZA0KICAgIHsNCiAgICAgICAgZ2V0DQogICAgICAgIHsNCiAgICAgICAgICAgIENYbWxCYXNlIHJOb2RlID0gdGhpcy5fckZpcnN0Q2hpbGROb2RlOw0KDQogICAgICAgICAgICB3aGlsZSAock5vZGUgIT0gbnVsbCAmJg0KICAgICAgICAgICAgICAgICAgIChyTm9kZS5GbGFncyAmIE5vZGVGbGFncy5Jc1doaXRlc3BhY2UpICE9IDApDQogICAgICAgICAgICAgICAgck5vZGUgPSByTm9kZS5fck5leHROb2RlOw0KICAgICAgICAgICAgcmV0dXJuIChDWG1sTm9kZSlyTm9kZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBDWG1sTm9kZSBDaGlsZChpbnQgbikNCiAgICB7DQogICAgICAgIGludCBpOw0KICAgICAgICBDWG1sTm9kZSByQ2hpbGQ7DQoNCiAgICAgICAgaSA9IDA7DQogICAgICAgIGZvciAockNoaWxkID0gRmlyc3RDaGlsZDsgckNoaWxkICE9IG51bGw7IHJDaGlsZCA9IHJDaGlsZC5OZXh0Tm9kZSkNCiAgICAgICAgICAgIGlmIChpKysgPT0gbikgYnJlYWs7DQoNCiAgICAgICAgcmV0dXJuIHJDaGlsZDsNCiAgICB9DQoNCiAgICBwdWJsaWMgQ1htbE5vZGUgQ2hpbGQoc3RyaW5nIHN0cikNCiAgICB7DQogICAgICAgIHJldHVybiAoQ1htbE5vZGUpYmFzZS5fQ2hpbGQoc3RyKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgaW50IFR5cGUNCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBDb252ZXJ0LlRvSW50MzIoYmFzZS5fblR5cGUpOyB9DQogICAgfQ0KDQogICAgcHVibGljIENYbWxBdHRyaWJ1dGUgRmlyc3RBdHRyaWJ1dGUNCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBfckZpcnN0QXR0cmlidXRlOyB9DQogICAgfQ0KDQogICAgcHVibGljIGludCBBdHRyaWJ1dGVDb3VudA0KICAgIHsNCiAgICAgICAgZ2V0IHsgcmV0dXJuIF9uQXR0cmlidXRlQ291bnQ7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgQ1htbEF0dHJpYnV0ZSBBdHRyaWJ1dGUoaW50IG4pDQogICAgew0KICAgICAgICBpbnQgaTsNCiAgICAgICAgQ1htbEF0dHJpYnV0ZSByQXR0cmlidXRlOw0KDQogICAgICAgIGkgPSAwOw0KICAgICAgICBmb3IgKHJBdHRyaWJ1dGUgPSBfckZpcnN0QXR0cmlidXRlOyByQXR0cmlidXRlICE9IG51bGw7IHJBdHRyaWJ1dGUgPSByQXR0cmlidXRlLk5leHRBdHRyaWJ1dGUpDQogICAgICAgICAgICBpZiAoaSsrID09IG4pIGJyZWFrOw0KICAgICAgICByZXR1cm4gckF0dHJpYnV0ZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgQ1htbEF0dHJpYnV0ZSBBdHRyaWJ1dGUoc3RyaW5nIHN0cikNCiAgICB7DQogICAgICAgIENYbWxBdHRyaWJ1dGUgckF0dHJpYnV0ZTsNCg0KICAgICAgICBmb3IgKHJBdHRyaWJ1dGUgPSBfckZpcnN0QXR0cmlidXRlOyByQXR0cmlidXRlICE9IG51bGw7IHJBdHRyaWJ1dGUgPSByQXR0cmlidXRlLk5leHRBdHRyaWJ1dGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChyQXR0cmlidXRlLk5hbWUgPT0gc3RyKSBicmVhazsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiByQXR0cmlidXRlOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIEFkZEF0dHJpYnV0ZShDWG1sQXR0cmlidXRlIHJBdHRyaWJ1dGUpDQogICAgew0KICAgICAgICBpZiAoX3JGaXJzdEF0dHJpYnV0ZSA9PSBudWxsKQ0KICAgICAgICB7DQogICAgICAgICAgICBfckZpcnN0QXR0cmlidXRlID0gckF0dHJpYnV0ZTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAgIF9yTGFzdEF0dHJpYnV0ZS5fck5leHROb2RlID0gckF0dHJpYnV0ZTsNCiAgICAgICAgfQ0KICAgICAgICBfckxhc3RBdHRyaWJ1dGUgPSByQXR0cmlidXRlOw0KICAgICAgICBfbkF0dHJpYnV0ZUNvdW50Kys7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBjaGFyIFJlc29sdmVDaGFyRW50aXR5KHN0cmluZyBzdHJOYW1lKQ0KICAgIHsNCiAgICAgICAgaWYgKHN0ck5hbWVbMF0gPT0gJyMnKQ0KICAgICAgICAgICAgaWYgKHN0ck5hbWVbMV0gPT0gJ3gnKQ0KICAgICAgICAgICAgICAgIHJldHVybiBDb252ZXJ0LlRvQ2hhcihDb252ZXJ0LlRvSW50MzIoc3RyTmFtZS5TdWJzdHJpbmcoMiksIDE2KSk7DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgcmV0dXJuIENvbnZlcnQuVG9DaGFyKENvbnZlcnQuVG9JbnQzMihzdHJOYW1lLlN1YnN0cmluZygxKSkpOw0KICAgICAgICBpZiAoc3RyTmFtZSA9PSAibHQiKQ0KICAgICAgICAgICAgcmV0dXJuICc8JzsNCiAgICAgICAgaWYgKHN0ck5hbWUgPT0gImd0IikNCiAgICAgICAgICAgIHJldHVybiAnPic7DQogICAgICAgIGlmIChzdHJOYW1lID09ICJhbXAiKQ0KICAgICAgICAgICAgcmV0dXJuICcmJzsNCiAgICAgICAgaWYgKHN0ck5hbWUgPT0gImFwb3MiKQ0KICAgICAgICAgICAgcmV0dXJuICdcJyc7DQogICAgICAgIGlmIChzdHJOYW1lID09ICJxdW90IikNCiAgICAgICAgICAgIHJldHVybiAnIic7DQoNCiAgICAgICAgcmV0dXJuIGNoYXIuTWluVmFsdWU7DQogICAgfQ0KfQ0KDQpwdWJsaWMgY2xhc3MgQ1htbENhY2hlDQp7DQogICAgLy9DWG1sQ2FjaGUgUHJvcGVydGllcw0KICAgIHByaXZhdGUgYm9vbCBfZlRyYWNlID0gZmFsc2U7DQoNCiAgICBwcml2YXRlIGJvb2wgX2ZUaHJvdyA9IHRydWU7DQogICAgcHJpdmF0ZSBib29sIF9mUmVhZE5vZGUgPSB0cnVlOw0KICAgIHByaXZhdGUgaW50IF9ociA9IDA7DQogICAgcHJpdmF0ZSBFbmNvZGluZyBfZUVuY29kaW5nID0gU3lzdGVtLlRleHQuRW5jb2RpbmcuVVRGODsNCiAgICBwcml2YXRlIHN0cmluZyBfc3RyUGFyc2VFcnJvciA9ICIiOw0KDQogICAgLy9YbWxSZWFkZXIgUHJvcGVydGllcw0KI3ByYWdtYSB3YXJuaW5nIGRpc2FibGUgMDYxOA0KICAgIHByaXZhdGUgVmFsaWRhdGlvblR5cGUgX2VWYWxpZGF0aW9uTW9kZSA9IFZhbGlkYXRpb25UeXBlLkF1dG87DQojcHJhZ21hIHdhcm5pbmcgcmVzdG9yZSAwNjE4DQoNCiAgICBwcml2YXRlIFdoaXRlc3BhY2VIYW5kbGluZyBfZVdoaXRlc3BhY2VNb2RlID0gV2hpdGVzcGFjZUhhbmRsaW5nLk5vbmU7DQogICAgcHJpdmF0ZSBFbnRpdHlIYW5kbGluZyBfZUVudGl0eU1vZGUgPSBFbnRpdHlIYW5kbGluZy5FeHBhbmRFbnRpdGllczsNCiAgICBwcml2YXRlIGJvb2wgX2ZOYW1lc3BhY2VzID0gdHJ1ZTsNCg0KICAgIHByaXZhdGUgYm9vbCBfZlZhbGlkYXRpb25DYWxsYmFjayA9IGZhbHNlOw0KICAgIHByaXZhdGUgYm9vbCBfZkV4cGFuZEF0dHJpYnV0ZVZhbHVlcyA9IGZhbHNlOw0KDQogICAgLy9JbnRlcm5hbCBzdHVmZg0KICAgIHByb3RlY3RlZCBYbWxSZWFkZXIgX3JYbWxSZWFkZXIgPSBudWxsOw0KDQogICAgcHJvdGVjdGVkIENYbWxOb2RlIF9yRG9jdW1lbnRSb290Tm9kZTsNCiAgICBwcm90ZWN0ZWQgQ1htbE5vZGUgX3JSb290Tm9kZSA9IG51bGw7DQogICAgaW50ZXJuYWwgc3RhdGljIE5vZGVGbGFncyBfZURlZmF1bHRGbGFncyA9IE5vZGVGbGFncy5Ob25lOw0KDQogICAgcHJpdmF0ZSBJVGVzdE91dHB1dEhlbHBlciBfb3V0cHV0Ow0KICAgIHB1YmxpYyBDWG1sQ2FjaGUoSVRlc3RPdXRwdXRIZWxwZXIgb3V0cHV0KQ0KICAgIHsNCiAgICAgICAgX291dHB1dCA9IG91dHB1dDsNCiAgICB9DQoNCiAgICAvLw0KICAgIC8vIENvbnN0cnVjdG9yDQogICAgLy8NCiAgICBwdWJsaWMgQ1htbENhY2hlKCkNCiAgICB7DQogICAgfQ0KDQogICAgLy8NCiAgICAvLyBQdWJsaWMgTWV0aG9kcyBhbmQgUHJvcGVydGllcw0KICAgIC8vDQogICAgcHVibGljIHZpcnR1YWwgYm9vbCBMb2FkKFhtbFJlYWRlciByWG1sUmVhZGVyKQ0KICAgIHsNCiAgICAgICAgLy9Ib29rIHVwIHlvdXIgcmVhZGVyIGFzIG15IHJlYWRlcg0KICAgICAgICBfclhtbFJlYWRlciA9IHJYbWxSZWFkZXI7DQoNCiAgICAgICAgaWYgKHJYbWxSZWFkZXIgaXMgWG1sVGV4dFJlYWRlcikNCiAgICAgICAgew0KICAgICAgICAgICAgX2VXaGl0ZXNwYWNlTW9kZSA9ICgoWG1sVGV4dFJlYWRlcilyWG1sUmVhZGVyKS5XaGl0ZXNwYWNlSGFuZGxpbmc7DQogICAgICAgICAgICBfZk5hbWVzcGFjZXMgPSAoKFhtbFRleHRSZWFkZXIpclhtbFJlYWRlcikuTmFtZXNwYWNlczsNCiAgICAgICAgICAgIF9lVmFsaWRhdGlvbk1vZGUgPSBWYWxpZGF0aW9uVHlwZS5Ob25lOw0KICAgICAgICB9DQojcHJhZ21hIHdhcm5pbmcgZGlzYWJsZSAwNjE4DQogICAgICAgIGlmIChyWG1sUmVhZGVyIGlzIFhtbFZhbGlkYXRpbmdSZWFkZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICgoKFhtbFZhbGlkYXRpbmdSZWFkZXIpclhtbFJlYWRlcikuUmVhZGVyIGlzIFhtbFRleHRSZWFkZXIpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgX2VXaGl0ZXNwYWNlTW9kZSA9ICgoWG1sVGV4dFJlYWRlcikoKFhtbFZhbGlkYXRpbmdSZWFkZXIpclhtbFJlYWRlcikuUmVhZGVyKS5XaGl0ZXNwYWNlSGFuZGxpbmc7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgX2VXaGl0ZXNwYWNlTW9kZSA9IFdoaXRlc3BhY2VIYW5kbGluZy5Ob25lOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgX2ZOYW1lc3BhY2VzID0gKChYbWxWYWxpZGF0aW5nUmVhZGVyKXJYbWxSZWFkZXIpLk5hbWVzcGFjZXM7DQogICAgICAgICAgICBfZVZhbGlkYXRpb25Nb2RlID0gKChYbWxWYWxpZGF0aW5nUmVhZGVyKXJYbWxSZWFkZXIpLlZhbGlkYXRpb25UeXBlOw0KICAgICAgICAgICAgX2VFbnRpdHlNb2RlID0gKChYbWxWYWxpZGF0aW5nUmVhZGVyKXJYbWxSZWFkZXIpLkVudGl0eUhhbmRsaW5nOw0KICAgICAgICB9DQojcHJhZ21hIHdhcm5pbmcgcmVzdG9yZSAwNjE4DQoNCiAgICAgICAgRGVidWdUcmFjZSgiU2V0dGluZyBWYWxpZGF0aW9uTW9kZT0iICsgX2VWYWxpZGF0aW9uTW9kZS5Ub1N0cmluZygpKTsNCiAgICAgICAgRGVidWdUcmFjZSgiU2V0dGluZyBFbnRpdHlNb2RlPSIgKyBfZUVudGl0eU1vZGUuVG9TdHJpbmcoKSk7DQogICAgICAgIERlYnVnVHJhY2UoIlNldHRpbmcgV2hpdGVzcGFjZU1vZGU9IiArIF9lV2hpdGVzcGFjZU1vZGUuVG9TdHJpbmcoKSk7DQoNCiAgICAgICAgLy9Qcm9jZXNzIHRoZSBEb2N1bWVudA0KICAgICAgICB0cnkNCiAgICAgICAgew0KICAgICAgICAgICAgX3JEb2N1bWVudFJvb3ROb2RlID0gbmV3IENYbWxOb2RlKCIiLCAiIiwgWG1sTm9kZVR5cGUuRWxlbWVudCk7DQogICAgICAgICAgICBfckRvY3VtZW50Um9vdE5vZGUuX2VGbGFncyA9IE5vZGVGbGFncy5Eb2N1bWVudFJvb3QgfCBOb2RlRmxhZ3MuSW5kZW50Ow0KICAgICAgICAgICAgUHJvY2VzcyhfckRvY3VtZW50Um9vdE5vZGUpOw0KICAgICAgICAgICAgZm9yIChfclJvb3ROb2RlID0gX3JEb2N1bWVudFJvb3ROb2RlLkZpcnN0Q2hpbGQ7IF9yUm9vdE5vZGUgIT0gbnVsbCAmJiBfclJvb3ROb2RlLk5vZGVUeXBlICE9IFhtbE5vZGVUeXBlLkVsZW1lbnQ7IF9yUm9vdE5vZGUgPSBfclJvb3ROb2RlLk5leHROb2RlKSA7DQogICAgICAgIH0NCiAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKQ0KICAgICAgICB7DQogICAgICAgICAgICAvL1VuaG9vayB5b3VyIHJlYWRlcg0KICAgICAgICAgICAgX3JYbWxSZWFkZXIgPSBudWxsOw0KDQogICAgICAgICAgICBfc3RyUGFyc2VFcnJvciA9IGUuVG9TdHJpbmcoKTsNCg0KICAgICAgICAgICAgaWYgKF9mVGhyb3cpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgKGUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoX2hyID09IDApDQogICAgICAgICAgICAgICAgX2hyID0gLTE7DQoNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vVW5ob29rIHlvdXIgcmVhZGVyDQogICAgICAgIF9yWG1sUmVhZGVyID0gbnVsbDsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgYm9vbCBMb2FkKHN0cmluZyBzdHJGaWxlTmFtZSkNCiAgICB7DQojcHJhZ21hIHdhcm5pbmcgZGlzYWJsZSAwNjE4DQogICAgICAgIFhtbFRleHRSZWFkZXIgclhtbFRleHRSZWFkZXI7DQogICAgICAgIFhtbFZhbGlkYXRpbmdSZWFkZXIgclhtbFZhbGlkYXRpbmdSZWFkZXI7DQogICAgICAgIGJvb2wgZlJldDsNCg0KICAgICAgICByWG1sVGV4dFJlYWRlciA9IG5ldyBYbWxUZXh0UmVhZGVyKHN0ckZpbGVOYW1lKTsNCiAgICAgICAgclhtbFRleHRSZWFkZXIuV2hpdGVzcGFjZUhhbmRsaW5nID0gX2VXaGl0ZXNwYWNlTW9kZTsNCiAgICAgICAgclhtbFRleHRSZWFkZXIuTmFtZXNwYWNlcyA9IF9mTmFtZXNwYWNlczsNCg0KICAgICAgICBfZUVuY29kaW5nID0gclhtbFRleHRSZWFkZXIuRW5jb2Rpbmc7DQoNCiAgICAgICAgclhtbFZhbGlkYXRpbmdSZWFkZXIgPSBuZXcgWG1sVmFsaWRhdGluZ1JlYWRlcihyWG1sVGV4dFJlYWRlcik7DQogICAgICAgIHJYbWxWYWxpZGF0aW5nUmVhZGVyLlZhbGlkYXRpb25UeXBlID0gX2VWYWxpZGF0aW9uTW9kZTsNCiAgICAgICAgclhtbFZhbGlkYXRpbmdSZWFkZXIuRW50aXR5SGFuZGxpbmcgPSBfZUVudGl0eU1vZGU7DQojcHJhZ21hIHdhcm5pbmcgcmVzdG9yZSAwNjE4DQoNCiAgICAgICAgaWYgKF9mVmFsaWRhdGlvbkNhbGxiYWNrKQ0KICAgICAgICAgICAgclhtbFZhbGlkYXRpbmdSZWFkZXIuVmFsaWRhdGlvbkV2ZW50SGFuZGxlciArPSBuZXcgVmFsaWRhdGlvbkV2ZW50SGFuZGxlcih0aGlzLlZhbGlkYXRpb25DYWxsYmFjayk7DQoNCiAgICAgICAgdHJ5DQogICAgICAgIHsNCiAgICAgICAgICAgIGZSZXQgPSBMb2FkKChYbWxSZWFkZXIpclhtbFZhbGlkYXRpbmdSZWFkZXIpOw0KICAgICAgICB9DQogICAgICAgIGNhdGNoIChFeGNlcHRpb24gZSkNCiAgICAgICAgew0KICAgICAgICAgICAgZlJldCA9IGZhbHNlOw0KICAgICAgICAgICAgclhtbFZhbGlkYXRpbmdSZWFkZXIuRGlzcG9zZSgpOw0KICAgICAgICAgICAgclhtbFRleHRSZWFkZXIuRGlzcG9zZSgpOw0KDQogICAgICAgICAgICBpZiAoX3N0clBhcnNlRXJyb3IgPT0gc3RyaW5nLkVtcHR5KQ0KICAgICAgICAgICAgICAgIF9zdHJQYXJzZUVycm9yID0gZS5Ub1N0cmluZygpOw0KDQogICAgICAgICAgICBpZiAoX2ZUaHJvdykNCiAgICAgICAgICAgICAgICB0aHJvdyAoZSk7DQogICAgICAgIH0NCg0KICAgICAgICByWG1sVmFsaWRhdGluZ1JlYWRlci5EaXNwb3NlKCk7DQogICAgICAgIHJYbWxUZXh0UmVhZGVyLkRpc3Bvc2UoKTsNCiAgICAgICAgcmV0dXJuIGZSZXQ7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgU2F2ZShzdHJpbmcgc3RyTmFtZSkNCiAgICB7DQogICAgICAgIFNhdmUoc3RyTmFtZSwgZmFsc2UsIF9lRW5jb2RpbmcpOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIFNhdmUoc3RyaW5nIHN0ck5hbWUsIGJvb2wgZk92ZXJXcml0ZSkNCiAgICB7DQogICAgICAgIFNhdmUoc3RyTmFtZSwgZk92ZXJXcml0ZSwgX2VFbmNvZGluZyk7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgU2F2ZShzdHJpbmcgc3RyTmFtZSwgYm9vbCBmT3ZlcldyaXRlLCBTeXN0ZW0uVGV4dC5FbmNvZGluZyBFbmNvZGluZykNCiAgICB7DQogICAgICAgIENYbWxCYXNlIHJOb2RlOw0KICAgICAgICBYbWxUZXh0V3JpdGVyIHJYbWxUZXh0V3JpdGVyID0gbnVsbDsNCg0KICAgICAgICB0cnkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKGZPdmVyV3JpdGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgRmlsZS5EZWxldGUoc3RyTmFtZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJYbWxUZXh0V3JpdGVyID0gbmV3IFhtbFRleHRXcml0ZXIoc3RyTmFtZSwgRW5jb2RpbmcpOw0KICAgICAgICAgICAgclhtbFRleHRXcml0ZXIuTmFtZXNwYWNlcyA9IF9mTmFtZXNwYWNlczsNCg0KICAgICAgICAgICAgZm9yIChyTm9kZSA9IF9yRG9jdW1lbnRSb290Tm9kZS5fckZpcnN0Q2hpbGROb2RlOyByTm9kZSAhPSBudWxsOyByTm9kZSA9IHJOb2RlLl9yTmV4dE5vZGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgck5vZGUuV3JpdGUoclhtbFRleHRXcml0ZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgclhtbFRleHRXcml0ZXIuRGlzcG9zZSgpOw0KICAgICAgICB9DQogICAgICAgIGNhdGNoIChFeGNlcHRpb24gZSkNCiAgICAgICAgew0KICAgICAgICAgICAgRGVidWdUcmFjZShlLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgaWYgKHJYbWxUZXh0V3JpdGVyICE9IG51bGwpDQogICAgICAgICAgICAgICAgclhtbFRleHRXcml0ZXIuRGlzcG9zZSgpOw0KICAgICAgICAgICAgdGhyb3cgKGUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgV3JpdGVYbWwoVGV4dFdyaXRlciByVFcpDQogICAgew0KICAgICAgICBDWG1sQmFzZSByTm9kZTsNCg0KICAgICAgICAvL1NwaXQgb3V0IHRoZSBkb2N1bWVudA0KICAgICAgICBmb3IgKHJOb2RlID0gX3JEb2N1bWVudFJvb3ROb2RlLl9yRmlyc3RDaGlsZE5vZGU7IHJOb2RlICE9IG51bGw7IHJOb2RlID0gck5vZGUuX3JOZXh0Tm9kZSkNCiAgICAgICAgICAgIHJOb2RlLldyaXRlWG1sKHJUVyk7DQogICAgfQ0KDQogICAgcHVibGljIENYbWxOb2RlIFJvb3ROb2RlDQogICAgew0KICAgICAgICBnZXQgeyByZXR1cm4gX3JSb290Tm9kZTsgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBzdHJpbmcgUGFyc2VFcnJvcg0KICAgIHsNCiAgICAgICAgZ2V0IHsgcmV0dXJuIF9zdHJQYXJzZUVycm9yOyB9DQogICAgfQ0KDQogICAgcHVibGljIGludCBQYXJzZUVycm9yQ29kZQ0KICAgIHsNCiAgICAgICAgZ2V0IHsgcmV0dXJuIF9ocjsgfQ0KICAgIH0NCg0KICAgIC8vDQogICAgLy8gWG1sUmVhZGVyIFByb3BlcnRpZXMNCiAgICAvLw0KICAgIHB1YmxpYyBzdHJpbmcgRW50aXR5TW9kZQ0KICAgIHsNCiAgICAgICAgc2V0DQogICAgICAgIHsNCiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAiRXhwYW5kRW50aXRpZXMiKQ0KICAgICAgICAgICAgICAgIF9lRW50aXR5TW9kZSA9IEVudGl0eUhhbmRsaW5nLkV4cGFuZEVudGl0aWVzOw0KICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT0gIkV4cGFuZENoYXJFbnRpdGllcyIpDQogICAgICAgICAgICAgICAgX2VFbnRpdHlNb2RlID0gRW50aXR5SGFuZGxpbmcuRXhwYW5kQ2hhckVudGl0aWVzOw0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHRocm93IChuZXcgRXhjZXB0aW9uKCJJbnZhbGlkIEVudGl0eSBtb2RlLiIpKTsNCiAgICAgICAgfQ0KICAgICAgICBnZXQgeyByZXR1cm4gX2VFbnRpdHlNb2RlLlRvU3RyaW5nKCk7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgc3RyaW5nIFZhbGlkYXRpb25Nb2RlDQogICAgew0KICAgICAgICBzZXQNCiAgICAgICAgew0KI3ByYWdtYSB3YXJuaW5nIGRpc2FibGUgMDYxOA0KICAgICAgICAgICAgaWYgKHZhbHVlID09ICJOb25lIikNCiAgICAgICAgICAgICAgICBfZVZhbGlkYXRpb25Nb2RlID0gVmFsaWRhdGlvblR5cGUuTm9uZTsNCiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09ICJEVEQiKQ0KICAgICAgICAgICAgICAgIF9lVmFsaWRhdGlvbk1vZGUgPSBWYWxpZGF0aW9uVHlwZS5EVEQ7DQogICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PSAiWERSIikNCiAgICAgICAgICAgICAgICBfZVZhbGlkYXRpb25Nb2RlID0gVmFsaWRhdGlvblR5cGUuWERSOw0KICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT0gIlNjaGVtYSIpDQogICAgICAgICAgICAgICAgX2VWYWxpZGF0aW9uTW9kZSA9IFZhbGlkYXRpb25UeXBlLlNjaGVtYTsNCiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09ICJBdXRvIikNCiAgICAgICAgICAgICAgICBfZVZhbGlkYXRpb25Nb2RlID0gVmFsaWRhdGlvblR5cGUuQXV0bzsNCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB0aHJvdyAobmV3IEV4Y2VwdGlvbigiSW52YWxpZCBWYWxpZGF0aW9uIG1vZGUuIikpOw0KI3ByYWdtYSB3YXJuaW5nIHJlc3RvcmUgMDYxOA0KICAgICAgICB9DQogICAgICAgIGdldCB7IHJldHVybiBfZVZhbGlkYXRpb25Nb2RlLlRvU3RyaW5nKCk7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgc3RyaW5nIFdoaXRlc3BhY2VNb2RlDQogICAgew0KICAgICAgICBzZXQNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHZhbHVlID09ICJBbGwiKQ0KICAgICAgICAgICAgICAgIF9lV2hpdGVzcGFjZU1vZGUgPSBXaGl0ZXNwYWNlSGFuZGxpbmcuQWxsOw0KICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT0gIlNpZ25pZmljYW50IikNCiAgICAgICAgICAgICAgICBfZVdoaXRlc3BhY2VNb2RlID0gV2hpdGVzcGFjZUhhbmRsaW5nLlNpZ25pZmljYW50Ow0KICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT0gIk5vbmUiKQ0KICAgICAgICAgICAgICAgIF9lV2hpdGVzcGFjZU1vZGUgPSBXaGl0ZXNwYWNlSGFuZGxpbmcuTm9uZTsNCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB0aHJvdyAobmV3IEV4Y2VwdGlvbigiSW52YWxpZCBXaGl0ZXNwYWNlIG1vZGUuIikpOw0KICAgICAgICB9DQogICAgICAgIGdldCB7IHJldHVybiBfZVdoaXRlc3BhY2VNb2RlLlRvU3RyaW5nKCk7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgYm9vbCBOYW1lc3BhY2VzDQogICAgew0KICAgICAgICBzZXQgeyBfZk5hbWVzcGFjZXMgPSB2YWx1ZTsgfQ0KICAgICAgICBnZXQgeyByZXR1cm4gX2ZOYW1lc3BhY2VzOyB9DQogICAgfQ0KDQogICAgcHVibGljIGJvb2wgVXNlVmFsaWRhdGlvbkNhbGxiYWNrDQogICAgew0KICAgICAgICBzZXQgeyBfZlZhbGlkYXRpb25DYWxsYmFjayA9IHZhbHVlOyB9DQogICAgICAgIGdldCB7IHJldHVybiBfZlZhbGlkYXRpb25DYWxsYmFjazsgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBib29sIEV4cGFuZEF0dHJpYnV0ZVZhbHVlcw0KICAgIHsNCiAgICAgICAgc2V0IHsgX2ZFeHBhbmRBdHRyaWJ1dGVWYWx1ZXMgPSB2YWx1ZTsgfQ0KICAgICAgICBnZXQgeyByZXR1cm4gX2ZFeHBhbmRBdHRyaWJ1dGVWYWx1ZXM7IH0NCiAgICB9DQoNCiAgICAvLw0KICAgIC8vIEludGVybmFsIFByb3BlcnRpZXMNCiAgICAvLw0KICAgIHB1YmxpYyBib29sIFRocm93DQogICAgew0KICAgICAgICBnZXQgeyByZXR1cm4gX2ZUaHJvdzsgfQ0KICAgICAgICBzZXQgeyBfZlRocm93ID0gdmFsdWU7IH0NCiAgICB9DQoNCiAgICBwdWJsaWMgYm9vbCBUcmFjZQ0KICAgIHsNCiAgICAgICAgc2V0IHsgX2ZUcmFjZSA9IHZhbHVlOyB9DQogICAgICAgIGdldCB7IHJldHVybiBfZlRyYWNlOyB9DQogICAgfQ0KDQogICAgLy8NCiAgICAvL1ByaXZhdGUgTWV0aG9kcw0KICAgIC8vDQogICAgcHJpdmF0ZSB2b2lkIERlYnVnVHJhY2Uoc3RyaW5nIHN0cikNCiAgICB7DQogICAgICAgIERlYnVnVHJhY2Uoc3RyLCAwKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgRGVidWdUcmFjZShzdHJpbmcgc3RyLCBpbnQgbkRlcHRoKQ0KICAgIHsNCiAgICAgICAgaWYgKF9mVHJhY2UpDQogICAgICAgIHsNCiAgICAgICAgICAgIGludCBpOw0KDQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbkRlcHRoOyBpKyspDQogICAgICAgICAgICAgICAgX291dHB1dC5Xcml0ZUxpbmUoIiAiKTsNCiAgICAgICAgICAgIF9vdXRwdXQuV3JpdGVMaW5lKHN0cik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgRGVidWdUcmFjZShYbWxSZWFkZXIgclhtbFJlYWRlcikNCiAgICB7DQogICAgICAgIGlmIChfZlRyYWNlKQ0KICAgICAgICB7DQogICAgICAgICAgICBzdHJpbmcgc3RyOw0KDQogICAgICAgICAgICBzdHIgPSByWG1sUmVhZGVyLk5vZGVUeXBlLlRvU3RyaW5nKCkgKyAiLCBEZXB0aD0iICsgclhtbFJlYWRlci5EZXB0aCArICIgTmFtZT0iOw0KICAgICAgICAgICAgaWYgKHJYbWxSZWFkZXIuUHJlZml4ICE9ICIiKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0ciArPSByWG1sUmVhZGVyLlByZWZpeCArICI6IjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHN0ciArPSByWG1sUmVhZGVyLkxvY2FsTmFtZTsNCg0KICAgICAgICAgICAgaWYgKHJYbWxSZWFkZXIuSGFzVmFsdWUpDQogICAgICAgICAgICAgICAgc3RyICs9ICIgVmFsdWU9IiArIHJYbWxSZWFkZXIuVmFsdWU7DQoNCiAgICAgICAgICAgIGlmIChyWG1sUmVhZGVyLk5vZGVUeXBlID09IFhtbE5vZGVUeXBlLkF0dHJpYnV0ZSkNCiAgICAgICAgICAgICAgICBzdHIgKz0gIiBRdW90ZUNoYXI9IiArIHJYbWxSZWFkZXIuUXVvdGVDaGFyOw0KDQogICAgICAgICAgICBEZWJ1Z1RyYWNlKHN0ciwgclhtbFJlYWRlci5EZXB0aCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwcm90ZWN0ZWQgdm9pZCBQcm9jZXNzKENYbWxCYXNlIHJQYXJlbnROb2RlKQ0KICAgIHsNCiAgICAgICAgQ1htbE5vZGUgck5ld05vZGU7DQoNCiAgICAgICAgd2hpbGUgKHRydWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vV2Ugd2FudCB0byBwb3AgaWYgUmVhZCgpIHJldHVybnMgZmFsc2UsIGFrYSBFT0YNCiAgICAgICAgICAgIGlmIChfZlJlYWROb2RlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmICghX3JYbWxSZWFkZXIuUmVhZCgpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgRGVidWdUcmFjZSgiUmVhZCgpID09IGZhbHNlIik7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKCFfclhtbFJlYWRlci5SZWFkQXR0cmlidXRlVmFsdWUoKSkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIERlYnVnVHJhY2UoIlJlYWRBdHRyaWJ1dGVWYWx1ZSgpID09IGZhbHNlIik7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIERlYnVnVHJhY2UoX3JYbWxSZWFkZXIpOw0KDQogICAgICAgICAgICAvL1dlIGFsc28gd2FudCB0byBwb3AgaWYgd2UgZ2V0IGFuIEVuZEVsZW1lbnQgb3IgRW5kRW50aXR5DQogICAgICAgICAgICBpZiAoX3JYbWxSZWFkZXIuTm9kZVR5cGUgPT0gWG1sTm9kZVR5cGUuRW5kRWxlbWVudCB8fA0KICAgICAgICAgICAgICAgICBfclhtbFJlYWRlci5Ob2RlVHlwZSA9PSBYbWxOb2RlVHlwZS5FbmRFbnRpdHkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgRGVidWdUcmFjZSgiTm9kZVR5cGUgPT0gRW5kRWxlbWVudCBvciBFbmRFbnRpdHkiKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJOZXdOb2RlID0gR2V0TmV3Tm9kZShfclhtbFJlYWRlcik7DQogICAgICAgICAgICByTmV3Tm9kZS5fbkRlcHRoID0gX3JYbWxSZWFkZXIuRGVwdGg7DQoNCiAgICAgICAgICAgIC8vIFRlc3QgZm9yIE1peGVkQ29udGVudCBhbmQgc2V0IEluZGVudCBpZiBuZWNlc3NhcnkNCiAgICAgICAgICAgIGlmICgoclBhcmVudE5vZGUuRmxhZ3MgJiBOb2RlRmxhZ3MuTWl4ZWRDb250ZW50KSAhPSAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJOZXdOb2RlLl9lRmxhZ3MgfD0gTm9kZUZsYWdzLk1peGVkQ29udGVudDsNCiAgICAgICAgICAgICAgICAvLyBJbmRlbnQgaXMgb2ZmIGZvciBhbGwgbmV3IG5vZGVzDQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgck5ld05vZGUuX2VGbGFncyB8PSBOb2RlRmxhZ3MuSW5kZW50OwkJLy8gVHVybiBvbiBJbmRlbnQgZm9yIGN1cnJlbnQgTm9kZQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyBTZXQgYWxsIERlcHRoIDAgbm9kZXMgdG8gTm8gTWl4ZWQgQ29udGVudCBhbmQgSW5kZW50IFRydWUNCiAgICAgICAgICAgIGlmIChfclhtbFJlYWRlci5EZXB0aCA9PSAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJOZXdOb2RlLl9lRmxhZ3MgfD0gTm9kZUZsYWdzLkluZGVudDsJCQkvLyBUdXJuIG9uIEluZGVudA0KICAgICAgICAgICAgICAgIHJOZXdOb2RlLl9lRmxhZ3MgJj0gfk5vZGVGbGFncy5NaXhlZENvbnRlbnQ7CS8vIFR1cm4gb2ZmIE1peGVkQ29udGVudA0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByUGFyZW50Tm9kZS5JbnNlcnROb2RlKHJOZXdOb2RlKTsNCg0KICAgICAgICAgICAgLy9EbyBzb21lIHNwZWNpYWwgc3R1ZmYgYmFzZWQgb24gTm9kZVR5cGUNCiAgICAgICAgICAgIHN3aXRjaCAoX3JYbWxSZWFkZXIuTm9kZVR5cGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5FbnRpdHlSZWZlcmVuY2U6DQogICAgICAgICAgICAgICAgICAgIGlmIChfZVZhbGlkYXRpb25Nb2RlID09IFZhbGlkYXRpb25UeXBlLkRURCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgX3JYbWxSZWFkZXIuUmVzb2x2ZUVudGl0eSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgUHJvY2VzcyhyTmV3Tm9kZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLkVsZW1lbnQ6DQogICAgICAgICAgICAgICAgICAgIGlmIChfclhtbFJlYWRlci5Nb3ZlVG9GaXJzdEF0dHJpYnV0ZSgpKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBkbw0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENYbWxBdHRyaWJ1dGUgck5ld0F0dHJpYnV0ZSA9IG5ldyBDWG1sQXR0cmlidXRlKF9yWG1sUmVhZGVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByTmV3Tm9kZS5BZGRBdHRyaWJ1dGUock5ld0F0dHJpYnV0ZSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2ZFeHBhbmRBdHRyaWJ1dGVWYWx1ZXMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Z1RyYWNlKCJBdHRyaWJ1dGU6ICIgKyBfclhtbFJlYWRlci5OYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZSZWFkTm9kZSA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9jZXNzKHJOZXdBdHRyaWJ1dGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZlJlYWROb2RlID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1htbE5vZGUgclZhbHVlTm9kZSA9IG5ldyBDWG1sTm9kZSgiIiwgIiIsIFhtbE5vZGVUeXBlLlRleHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByVmFsdWVOb2RlLl9lRmxhZ3MgPSBfZURlZmF1bHRGbGFncyB8IE5vZGVGbGFncy5IYXNWYWx1ZTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByVmFsdWVOb2RlLl9zdHJWYWx1ZSA9IF9yWG1sUmVhZGVyLlZhbHVlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnVHJhY2UoIiAgVmFsdWU9IiArIHJWYWx1ZU5vZGUuVmFsdWUsIF9yWG1sUmVhZGVyLkRlcHRoICsgMSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgck5ld0F0dHJpYnV0ZS5JbnNlcnROb2RlKHJWYWx1ZU5vZGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKF9yWG1sUmVhZGVyLk1vdmVUb05leHRBdHRyaWJ1dGUoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBpZiAoKHJOZXdOb2RlLkZsYWdzICYgTm9kZUZsYWdzLkVtcHR5RWxlbWVudCkgPT0gMCkNCiAgICAgICAgICAgICAgICAgICAgICAgIFByb2Nlc3Mock5ld05vZGUpOw0KDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5YbWxEZWNsYXJhdGlvbjoNCiAgICAgICAgICAgICAgICAgICAgaWYgKF9yWG1sUmVhZGVyIGlzIFhtbFRleHRSZWFkZXIpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIF9lRW5jb2RpbmcgPSAoKFhtbFRleHRSZWFkZXIpX3JYbWxSZWFkZXIpLkVuY29kaW5nOw0KICAgICAgICAgICAgICAgICAgICB9DQojcHJhZ21hIHdhcm5pbmcgZGlzYWJsZSAwNjE4DQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9yWG1sUmVhZGVyIGlzIFhtbFZhbGlkYXRpbmdSZWFkZXIpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIF9lRW5jb2RpbmcgPSAoKFhtbFZhbGlkYXRpbmdSZWFkZXIpX3JYbWxSZWFkZXIpLkVuY29kaW5nOw0KICAgICAgICAgICAgICAgICAgICB9DQojcHJhZ21hIHdhcm5pbmcgcmVzdG9yZSAwNjE4DQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHN0clZhbHVlID0gck5ld05vZGUuTm9kZVZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgaW50IG5Qb3MgPSBzdHJWYWx1ZS5JbmRleE9mKCJlbmNvZGluZyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5Qb3MgIT0gLTEpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IG5FbmQ7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuUG9zID0gc3RyVmFsdWUuSW5kZXhPZigiPSIsIG5Qb3MpOwkJCS8vRmluZCB0aGUgPSBzaWduDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbkVuZCA9IHN0clZhbHVlLkluZGV4T2YoIlwiIiwgblBvcykgKyAxOwkvL0ZpbmQgdGhlIG5leHQgIiBjaGFyYWN0ZXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuUG9zID0gc3RyVmFsdWUuSW5kZXhPZigiJyIsIG5Qb3MpICsgMTsJCS8vRmluZCB0aGUgbmV4dCAnIGNoYXJhY3Rlcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuRW5kID09IDAgfHwgKG5Qb3MgPCBuRW5kICYmIG5Qb3MgPiAwKSkJLy9QaWNrIHRoZSBvbmUgdGhhdCdzIGNsb3NlciB0byB0aGUgPSBzaWduDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuRW5kID0gc3RyVmFsdWUuSW5kZXhPZigiJyIsIG5Qb3MpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuUG9zID0gbkVuZDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbkVuZCA9IHN0clZhbHVlLkluZGV4T2YoIlwiIiwgblBvcyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBzRW5jb2RlTmFtZSA9IHN0clZhbHVlLlN1YnN0cmluZyhuUG9zLCBuRW5kIC0gblBvcyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWdUcmFjZSgiWE1MRGVjbCBjb250YWlucyBlbmNvZGluZyAiICsgc0VuY29kZU5hbWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzRW5jb2RlTmFtZS5Ub1VwcGVyKCkgPT0gIlVDUy0yIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNFbmNvZGVOYW1lID0gInVuaWNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZUVuY29kaW5nID0gU3lzdGVtLlRleHQuRW5jb2RpbmcuR2V0RW5jb2Rpbmcoc0VuY29kZU5hbWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICAgICAgY2FzZSBYbWxOb2RlVHlwZS5UZXh0Og0KICAgICAgICAgICAgICAgICAgICBpZiAoIV9mUmVhZE5vZGUpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJOZXdOb2RlLl9lRmxhZ3MgPSBfZURlZmF1bHRGbGFncyB8IE5vZGVGbGFncy5BdHRyaWJ1dGVUZXh0Tm9kZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByTmV3Tm9kZS5fZUZsYWdzIHw9IE5vZGVGbGFncy5NaXhlZENvbnRlbnQ7CQkvLyB0dXJuIG9uIE1peGVkIENvbnRlbnQgZm9yIGN1cnJlbnQgbm9kZQ0KICAgICAgICAgICAgICAgICAgICByTmV3Tm9kZS5fZUZsYWdzICY9IH5Ob2RlRmxhZ3MuSW5kZW50OwkJCS8vIHR1cm4gb2ZmIEluZGVudCBmb3IgY3VycmVudCBub2RlDQogICAgICAgICAgICAgICAgICAgIHJQYXJlbnROb2RlLl9lRmxhZ3MgfD0gTm9kZUZsYWdzLk1peGVkQ29udGVudDsJLy8gdHVybiBvbiBNaXhlZCBDb250ZW50IGZvciBQYXJlbnQgTm9kZQ0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuV2hpdGVzcGFjZToNCiAgICAgICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLlNpZ25pZmljYW50V2hpdGVzcGFjZToNCiAgICAgICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLkNEQVRBOg0KICAgICAgICAgICAgICAgICAgICByTmV3Tm9kZS5fZUZsYWdzIHw9IE5vZGVGbGFncy5NaXhlZENvbnRlbnQ7CQkvLyB0dXJuIG9uIE1peGVkIENvbnRlbnQgZm9yIGN1cnJlbnQgbm9kZQ0KICAgICAgICAgICAgICAgICAgICByTmV3Tm9kZS5fZUZsYWdzICY9IH5Ob2RlRmxhZ3MuSW5kZW50OwkJCS8vIHR1cm4gb2ZmIEluZGVudCBmb3IgY3VycmVudCBub2RlDQogICAgICAgICAgICAgICAgICAgIHJQYXJlbnROb2RlLl9lRmxhZ3MgfD0gTm9kZUZsYWdzLk1peGVkQ29udGVudDsJLy8gdHVybiBvbiBNaXhlZCBDb250ZW50IGZvciBQYXJlbnQgTm9kZQ0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuQ29tbWVudDoNCiAgICAgICAgICAgICAgICBjYXNlIFhtbE5vZGVUeXBlLk5vdGF0aW9uOg0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgIGNhc2UgWG1sTm9kZVR5cGUuRG9jdW1lbnRUeXBlOg0KICAgICAgICAgICAgICAgICAgICBpZiAoX3JYbWxSZWFkZXIuTW92ZVRvRmlyc3RBdHRyaWJ1dGUoKSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgZG8NCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDWG1sQXR0cmlidXRlIHJOZXdBdHRyaWJ1dGUgPSBuZXcgQ1htbEF0dHJpYnV0ZShfclhtbFJlYWRlcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgck5ld05vZGUuQWRkQXR0cmlidXRlKHJOZXdBdHRyaWJ1dGUpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1htbE5vZGUgclZhbHVlTm9kZSA9IG5ldyBDWG1sTm9kZShfclhtbFJlYWRlcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgclZhbHVlTm9kZS5fc3RyVmFsdWUgPSBfclhtbFJlYWRlci5WYWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByTmV3QXR0cmlidXRlLkluc2VydE5vZGUoclZhbHVlTm9kZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChfclhtbFJlYWRlci5Nb3ZlVG9OZXh0QXR0cmlidXRlKCkpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICBfb3V0cHV0LldyaXRlTGluZSgiVU5IQU5ETEVEIFRZUEUsICIgKyBfclhtbFJlYWRlci5Ob2RlVHlwZS5Ub1N0cmluZygpICsgIiBJTiBQcm9jZXNzKCkhIik7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJvdGVjdGVkIHZpcnR1YWwgQ1htbE5vZGUgR2V0TmV3Tm9kZShYbWxSZWFkZXIgclhtbFJlYWRlcikNCiAgICB7DQogICAgICAgIHJldHVybiBuZXcgQ1htbE5vZGUoclhtbFJlYWRlcik7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIFZhbGlkYXRpb25DYWxsYmFjayhvYmplY3Qgc2VuZGVyLCBWYWxpZGF0aW9uRXZlbnRBcmdzIGFyZ3MpDQogICAgew0KICAgICAgICAvLyAgY29tbWVudGVkIGJ5IFJPQ0hPQSAtLSBkb24ndCBrbm93IHdoZXJlIFZhbGlkYXRpb25FdmVudEFyZ3MgY29tZXMgZnJvbQ0KICAgICAgICAvLwlfaHIgPSBDb252ZXJ0LlRvSW50MTYoYXJncy5FcnJvckNvZGUpOw0KICAgICAgICB0aHJvdyAobmV3IEV4Y2VwdGlvbigiWyIgKyBDb252ZXJ0LlRvU3RyaW5nKF9ocikgKyAiXSAiICsgYXJncy5NZXNzYWdlKSk7DQogICAgfQ0KfQ0KDQpwdWJsaWMgY2xhc3MgQ2hlY2tzdW1Xcml0ZXIgOiBUZXh0V3JpdGVyDQp7DQogICAgcHJpdmF0ZSBpbnQgX25Qb3NpdGlvbiA9IDA7DQogICAgcHJpdmF0ZSBEZWNpbWFsIF9kUmVzdWx0ID0gMDsNCiAgICBwcml2YXRlIEVuY29kaW5nIF9lbmNvZGluZzsNCg0KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgLy8gICAgQ29uc3RydWN0b3INCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgIHB1YmxpYyBDaGVja3N1bVdyaXRlcigpDQogICAgew0KICAgICAgICBfZW5jb2RpbmcgPSBFbmNvZGluZy5VVEY4Ow0KICAgIH0NCg0KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgLy8gICAgUHJvcGVydGllcw0KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgcHVibGljIERlY2ltYWwgQ2hlY2tTdW0NCiAgICB7DQogICAgICAgIGdldCB7IHJldHVybiBfZFJlc3VsdDsgfQ0KICAgIH0NCg0KICAgIHB1YmxpYyBvdmVycmlkZSBFbmNvZGluZyBFbmNvZGluZw0KICAgIHsNCiAgICAgICAgZ2V0IHsgcmV0dXJuIF9lbmNvZGluZzsgfQ0KICAgIH0NCg0KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgLy8gICAgUHVibGljIG1ldGhvZHMNCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgIG92ZXJyaWRlIHB1YmxpYyB2b2lkIFdyaXRlKFN0cmluZyBzdHIpDQogICAgew0KICAgICAgICBpbnQgaTsNCiAgICAgICAgaW50IG07DQoNCiAgICAgICAgbSA9IHN0ci5MZW5ndGg7DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyBpKyspDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlKHN0cltpXSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBvdmVycmlkZSBwdWJsaWMgdm9pZCBXcml0ZShDaGFyW10gcmdjaCkNCiAgICB7DQogICAgICAgIGludCBpOw0KICAgICAgICBpbnQgbTsNCg0KICAgICAgICBtID0gcmdjaC5MZW5ndGg7DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyBpKyspDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlKHJnY2hbaV0pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgb3ZlcnJpZGUgcHVibGljIHZvaWQgV3JpdGUoQ2hhcltdIHJnY2gsIEludDMyIGlPZmZzZXQsIEludDMyIGlDb3VudCkNCiAgICB7DQogICAgICAgIGludCBpOw0KICAgICAgICBpbnQgbTsNCg0KICAgICAgICBtID0gaU9mZnNldCArIGlDb3VudDsNCiAgICAgICAgZm9yIChpID0gaU9mZnNldDsgaSA8IG07IGkrKykNCiAgICAgICAgew0KICAgICAgICAgICAgV3JpdGUocmdjaFtpXSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBvdmVycmlkZSBwdWJsaWMgdm9pZCBXcml0ZShDaGFyIGNoKQ0KICAgIHsNCiAgICAgICAgX2RSZXN1bHQgKz0gTWF0aC5Sb3VuZCgoRGVjaW1hbCkoY2ggLyAoX25Qb3NpdGlvbiArIDEuMCkpLCAxMCk7DQogICAgICAgIF9uUG9zaXRpb24rKzsNCiAgICB9DQoNCiAgICBvdmVycmlkZSBwdWJsaWMgdm9pZCBDbG9zZSgpDQogICAgew0KICAgICAgICBfblBvc2l0aW9uID0gMDsNCiAgICAgICAgX2RSZXN1bHQgPSAwOw0KICAgIH0NCn0NCg=="
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXslTransform.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs": {
          "mimeType": "text/x-csharp",
          "contents": ""
        },
        "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XsltCompiler/XsltCommon.cs": {
          "mimeType": "text/x-csharp",
          "contents": "Ly8gTGljZW5zZWQgdG8gdGhlIC5ORVQgRm91bmRhdGlvbiB1bmRlciBvbmUgb3IgbW9yZSBhZ3JlZW1lbnRzLg0KLy8gVGhlIC5ORVQgRm91bmRhdGlvbiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgbGljZW5zZS4NCi8vIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb24uDQoNCnVzaW5nIE9MRURCLlRlc3QuTW9kdWxlQ29yZTsNCnVzaW5nIFN5c3RlbTsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9uczsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOw0KdXNpbmcgU3lzdGVtLkRpYWdub3N0aWNzOw0KdXNpbmcgU3lzdGVtLkdsb2JhbGl6YXRpb247DQp1c2luZyBTeXN0ZW0uSU87DQp1c2luZyBTeXN0ZW0uTGlucTsNCnVzaW5nIFN5c3RlbS5YbWw7DQp1c2luZyBTeXN0ZW0uWG1sLlhtbERpZmY7DQoNCm5hbWVzcGFjZSBYbWxDb3JlVGVzdC5Db21tb24NCnsNCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KICAgIGF1dGhvciBhbGV4a3INCiAgICBkYXRlICAgMTIvMTQvMjAwNQ0KDQogICAgVGhpcyBjbGFzcyBjb250YWlucyBjb21tb24gc3RhdGljIG1ldGhvZHMgdXNlZCB0byB2ZXJpZnkgdGhlIHJlc3VsdHMgb2YgYW4gWFNMVCBkYXRhLWRyaXZlbiB0ZXN0Lg0KICAgIEl0IGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbWV0aG9kczoNCiAgICAgICAgQ29tcGFyZVhtbCAgICAgICAgIC0gdXNlZCB0byBjb21wYXJlIHR3byBYTUwgb3V0cHV0cywgY2FwdHVyZWQgYXMgZmlsZXMsIHVzaW5nIFhtbERpZmYuDQogICAgICAgIENvbXBhcmVDaGVja3N1bSAgICAtIHVzZWQgdG8gY29tcGFyZSB0d28gbm9uLVhNTCBvdXRwdXRzLCBjYXB0dXJlZCBhcyBmaWxlcywgdXNpbmcgYSBDaGVja3N1bSBjYWxjdWxhdGlvbi4NCiAgICAgICAgQ29tcGFyZUV4Y2VwdGlvbiAgIC0gdXNlZCB0byBjb21wYXJlIHR3byBFeGNlcHRpb25zLCBvciB0aGUgbWV0YS1kYXRhIG9mIHR3byBFeGNlcHRpb25zLCB1c2luZyBhbiBFeGNlcHRpb24gd3JhcHBlciBjbGFzcy4NCg0KICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCg0KICAgIHB1YmxpYyBjbGFzcyBYc2x0VmVyaWZpY2F0aW9uTGlicmFyeQ0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgd2luU0RLUGF0aCA9IHN0cmluZy5FbXB0eTsNCg0KICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KICAgICAgICBYTUxEaWZmIGNvbXBhcmUgZm9yIFhTTFRWMiBkYXRhIGRyaXZlbiB0ZXN0cy4NCiAgICAgICAgSXQgc3VwcG9ydHMgY3VzdG9tIGRhdGEtZHJpdmVuIHhtbGRpZmYgb3B0aW9ucyBwYXNzZWQgZnJvbSB0aGUgY29tbWFuZCBsaW5lLA0KICAgICAgICBJdCBtaWdodCBzdXBwb3J0IGFuIG9wdGlvbmFsIGhlbHBlck9iamVjdCB0aGF0IGNhbiBwZXJmb3JtIGRlbGF5ZWQgbG9nZ2luZywgYnV0IGRvZXMgbm90IHlldC4NCiAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBDb21wYXJlWG1sKHN0cmluZyBiYXNlbGluZUZpbGUsIHN0cmluZyBhY3R1YWxGaWxlLCBzdHJpbmcgeG1sZGlmZm9wdGlvbnZhbHVlKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gQ29tcGFyZVhtbChiYXNlbGluZUZpbGUsIGFjdHVhbEZpbGUsIHhtbGRpZmZvcHRpb252YWx1ZSwgbnVsbCk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgQ29tcGFyZVhtbChzdHJpbmcgYmFzZWxpbmVGaWxlLCBzdHJpbmcgYWN0dWFsRmlsZSwgc3RyaW5nIHhtbGRpZmZvcHRpb252YWx1ZSwgRGVsYXllZFdyaXRlTG9nZ2VyIGxvZ2dlcikNCiAgICAgICAgew0KICAgICAgICAgICAgdXNpbmcgKHZhciBmc0FjdHVhbCA9IG5ldyBGaWxlU3RyZWFtKGFjdHVhbEZpbGUsIEZpbGVNb2RlLk9wZW4sIEZpbGVBY2Nlc3MuUmVhZCkpDQogICAgICAgICAgICB1c2luZyAodmFyIGZzRXhwZWN0ZWQgPSBuZXcgRmlsZVN0cmVhbShiYXNlbGluZUZpbGUsIEZpbGVNb2RlLk9wZW4sIEZpbGVBY2Nlc3MuUmVhZCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIENvbXBhcmVYbWwoZnNBY3R1YWwsIGZzRXhwZWN0ZWQsIHhtbGRpZmZvcHRpb252YWx1ZSwgbG9nZ2VyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBDb21wYXJlWG1sKHN0cmluZyBiYXNlbGluZUZpbGUsIFN0cmVhbSBhY3R1YWxTdHJlYW0pDQogICAgICAgIHsNCiAgICAgICAgICAgIGFjdHVhbFN0cmVhbS5TZWVrKDAsIFNlZWtPcmlnaW4uQmVnaW4pOw0KDQogICAgICAgICAgICB1c2luZyAodmFyIGV4cGVjdGVkU3RyZWFtID0gbmV3IEZpbGVTdHJlYW0oYmFzZWxpbmVGaWxlLCBGaWxlTW9kZS5PcGVuLCBGaWxlQWNjZXNzLlJlYWQpKQ0KICAgICAgICAgICAgICAgIHJldHVybiBDb21wYXJlWG1sKGV4cGVjdGVkU3RyZWFtLCBhY3R1YWxTdHJlYW0sIFN0cmluZy5FbXB0eSwgbnVsbCk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgQ29tcGFyZVhtbChTdHJlYW0gZXhwZWN0ZWRTdHJlYW0sIFN0cmVhbSBhY3R1YWxTdHJlYW0sIHN0cmluZyB4bWxkaWZmb3B0aW9udmFsdWUsIERlbGF5ZWRXcml0ZUxvZ2dlciBsb2dnZXIpDQogICAgICAgIHsNCiAgICAgICAgICAgIGJvb2wgYlJlc3VsdCA9IGZhbHNlOw0KDQogICAgICAgICAgICAvLyBEZWZhdWx0IERpZmYgb3B0aW9ucyB1c2VkIGJ5IFhTTFQgVjIgZHJpdmVyLg0KICAgICAgICAgICAgaW50IGRlZmF1bHRYbWxEaWZmT3B0aW9ucyA9IChpbnQpKFhtbERpZmZPcHRpb24uSW5mb3NldENvbXBhcmlzb24gfCBYbWxEaWZmT3B0aW9uLklnbm9yZUVtcHR5RWxlbWVudCB8IFhtbERpZmZPcHRpb24uSWdub3JlQXR0cmlidXRlT3JkZXIpOw0KICAgICAgICAgICAgWG1sRGlmZiBkaWZmID0gbmV3IFhtbERpZmYoKTsNCg0KICAgICAgICAgICAgaWYgKHhtbGRpZmZvcHRpb252YWx1ZSA9PSBudWxsIHx8IHhtbGRpZmZvcHRpb252YWx1ZS5FcXVhbHMoc3RyaW5nLkVtcHR5KSkNCiAgICAgICAgICAgICAgICBkaWZmLk9wdGlvbiA9IChYbWxEaWZmT3B0aW9uKWRlZmF1bHRYbWxEaWZmT3B0aW9uczsNCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAobG9nZ2VyICE9IG51bGwpIGxvZ2dlci5Mb2dNZXNzYWdlKCJDdXN0b20gWG1sRGlmZk9wdGlvbnMgdXNlZC4gVmFsdWUgcGFzc2VkIGlzICIgKyB4bWxkaWZmb3B0aW9udmFsdWUpOw0KICAgICAgICAgICAgICAgIGRpZmYuT3B0aW9uID0gKFhtbERpZmZPcHRpb24pSW50MzIuUGFyc2UoeG1sZGlmZm9wdGlvbnZhbHVlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgWG1sUGFyc2VyQ29udGV4dCBjb250ZXh0ID0gbmV3IFhtbFBhcnNlckNvbnRleHQobmV3IE5hbWVUYWJsZSgpLCBudWxsLCAiIiwgWG1sU3BhY2UuTm9uZSk7DQoNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGJSZXN1bHQgPQ0KICAgICAgICAgICAgICAgICAgIGRpZmYuQ29tcGFyZShuZXcgWG1sVGV4dFJlYWRlcihhY3R1YWxTdHJlYW0sIFhtbE5vZGVUeXBlLkVsZW1lbnQsIGNvbnRleHQpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgWG1sVGV4dFJlYWRlcihleHBlY3RlZFN0cmVhbSwgWG1sTm9kZVR5cGUuRWxlbWVudCwgY29udGV4dCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGJSZXN1bHQgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICBpZiAobG9nZ2VyICE9IG51bGwpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBsb2dnZXIuTG9nTWVzc2FnZSgiRXhjZXB0aW9uIHRocm93biBpbiBYbWxEaWZmIGNvbXBhcmUhIik7DQogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5Mb2dYbWwoZS5Ub1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICAgICAgdGhyb3c7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoYlJlc3VsdCkNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCg0KICAgICAgICAgICAgaWYgKGxvZ2dlciAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGxvZ2dlci5Mb2dNZXNzYWdlKCJNaXNtYXRjaCBpbiBYbWxEaWZmIik7DQogICAgICAgICAgICAgICAgbG9nZ2VyLkxvZ01lc3NhZ2UoIkFjdHVhbCByZXN1bHQ6ICIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KICAgICAgICBDaGVja3N1bSBjYWxjdWxhdGlvbi4gTGVnYWN5Lg0KICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIENvbXBhcmVDaGVja3N1bShzdHJpbmcgQmFzZWxpbmUsIHN0cmluZyBPdXRGaWxlLCBpbnQgZHJpdmVyVmVyc2lvbikNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIENvbXBhcmVDaGVja3N1bShCYXNlbGluZSwgT3V0RmlsZSwgZHJpdmVyVmVyc2lvbiwgbnVsbCk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgQ29tcGFyZUNoZWNrc3VtKHN0cmluZyBCYXNlbGluZSwgc3RyaW5nIE91dEZpbGUsIGludCBkcml2ZXJWZXJzaW9uLCBEZWxheWVkV3JpdGVMb2dnZXIgbG9nZ2VyKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gQ29tcGFyZUNoZWNrc3VtKA0KICAgICAgICAgICAgICAgQmFzZWxpbmUsDQogICAgICAgICAgICAgICAxLCAgICAgICAgICAgICAgICAvL3N0YXJ0IGZyb20gdGhlIGZpcnN0IGxpbmUgaW4gdGhlIGJhc2VsaW5lIGZpbGUNCiAgICAgICAgICAgICAgIE91dEZpbGUsDQogICAgICAgICAgICAgICAxLCAgICAgICAgICAgICAgICAvL3N0YXJ0IGZyb20gdGhlIGZpcnN0IGxpbmUgaW4gdGhlIG91dHB1dCBmaWxlDQogICAgICAgICAgICAgICBkcml2ZXJWZXJzaW9uLA0KICAgICAgICAgICAgICAgbG9nZ2VyKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iQmFzZWxpbmUiPjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iYmFzZWxpbmVTdGFydExpbmUiPlRoZSBsaW5lIHRvIHN0YXJ0IGNvbXBhcmlzb24gaW4gdGhlIGJhc2VsaW5lIGZpbGU8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Ik91dEZpbGUiPjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ib3V0RmlsZVN0YXJ0TGluZSI+VGhlIGxpbmUgdG8gc3RhcnQgY29tcGFyaXNvbiBpbiB0aGUgb3V0cHV0IGZpbGU8L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImRyaXZlclZlcnNpb24iPjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ibG9nZ2VyIj48L3BhcmFtPg0KICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPg0KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgQ29tcGFyZUNoZWNrc3VtKHN0cmluZyBCYXNlbGluZSwgaW50IGJhc2VsaW5lU3RhcnRMaW5lLCBzdHJpbmcgT3V0RmlsZSwgaW50IG91dEZpbGVTdGFydExpbmUsIGludCBkcml2ZXJWZXJzaW9uLCBEZWxheWVkV3JpdGVMb2dnZXIgbG9nZ2VyKQ0KICAgICAgICB7DQogICAgICAgICAgICAvLyBLZWVwIHBlb3BsZSBob25lc3QuDQogICAgICAgICAgICBpZiAoZHJpdmVyVmVyc2lvbiA9PSAyKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmIChsb2dnZXIgIT0gbnVsbCkgbG9nZ2VyLkxvZ01lc3NhZ2UoIkNhbGN1bGF0aW5nIGNoZWNrc3VtIGZvciBiYXNlbGluZSBvdXRwdXQgezB9Li4uIiwgQmFzZWxpbmUpOw0KDQogICAgICAgICAgICAgICAgc3RyaW5nIGV4cGVjdGVkQ2hlY2tTdW0gPSBDYWxjQ2hlY2tzdW0oQmFzZWxpbmUsIGJhc2VsaW5lU3RhcnRMaW5lLCBsb2dnZXIpOw0KICAgICAgICAgICAgICAgIHN0cmluZyBhY3R1YWxDaGVja3N1bSA9IENhbGNDaGVja3N1bShPdXRGaWxlLCBvdXRGaWxlU3RhcnRMaW5lLCBsb2dnZXIpOw0KDQogICAgICAgICAgICAgICAgaWYgKGV4cGVjdGVkQ2hlY2tTdW0uRXF1YWxzKGFjdHVhbENoZWNrc3VtKSkNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ2dlciAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuTG9nTWVzc2FnZSgiQWN0dWFsIGNoZWNrc3VtOiB7MH0sIEV4cGVjdGVkIGNoZWNrc3VtOiB7MX0iLCBhY3R1YWxDaGVja3N1bSwgZXhwZWN0ZWRDaGVja1N1bSk7DQogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuTG9nTWVzc2FnZSgiQWN0dWFsIHJlc3VsdDogIik7DQogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuV3JpdGVPdXRwdXRGaWxlVG9Mb2coT3V0RmlsZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZEV4Y2VwdGlvbigiTm90IGEgc3VwcG9ydGVkIGRyaXZlciB2ZXJzaW9uIik7DQogICAgICAgIH0NCg0KICAgICAgICBwcml2YXRlIHN0YXRpYyBzdHJpbmcgQ2FsY0NoZWNrc3VtKHN0cmluZyBmaWxlTmFtZSwgRGVsYXllZFdyaXRlTG9nZ2VyIGxvZ2dlcikNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIENhbGNDaGVja3N1bShmaWxlTmFtZSwgMSwgbG9nZ2VyKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZmlsZU5hbWUiPjwvcGFyYW0+DQogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0ic3RhcnRGcm9tTGluZSI+VGhlIGxpbmUgdG8gc3RhcnQgY2FsY3VsYXRpbmcgdGhlIGNoZWNrc3VtLiBBbnkgdGV4dCBiZWZvcmUgdGhpcyBsaW5lIGlzIGlnbm9yZWQuIEZpcnN0IGxpbmUgaXMgMS48L3BhcmFtPg0KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9ImxvZ2dlciI+PC9wYXJhbT4NCiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz4NCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIENhbGNDaGVja3N1bShzdHJpbmcgZmlsZU5hbWUsIGludCBzdGFydEZyb21MaW5lLCBEZWxheWVkV3JpdGVMb2dnZXIgbG9nZ2VyKQ0KICAgICAgICB7DQogICAgICAgICAgICBjb25zdCBpbnQgQlVGRkVSU0laRSA9IDQwOTY7DQogICAgICAgICAgICBEZWNpbWFsIGRSZXN1bHQgPSAwOyAgICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIG9mIHRoZSBjaGVja3N1bQ0KICAgICAgICAgICAgaW50IGkgPSAwOyAgICAgICAgICAgICAgICAgIC8vIEdlbmVyaWMgY291bnRlcg0KICAgICAgICAgICAgaW50IGNCeXRlc1JlYWQgPSAxOyAgICAgICAgLy8gIyBvZiBieXRlcyByZWFkIGF0IG9uZSB0aW1lDQogICAgICAgICAgICBpbnQgY1RvdGFsUmVhZCA9IDA7ICAgICAgICAgLy8gVG90YWwgIyBvZiBieXRlcyByZWFkIHNvIGZhcg0KICAgICAgICAgICAgRGVjaW1hbCBkRW5kQnVmZmVyID0gMDsgICAgIC8vIEJ1ZmZlciB0byByZW1vdmUgZnJvbSB0aGUgZW5kIChUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlDQogICAgICAgICAgICAvLyBub3RlcGFkIGFkZHMgQ1IvTEYgb250byB0aGUgZW5kIG9mIGV2ZXJ5IGZpbGUpDQogICAgICAgICAgICBDaGFyW10gcmdCdWZmZXIgPSBuZXcgQ2hhcltCVUZGRVJTSVpFXTsNCg0KICAgICAgICAgICAgc3RyaW5nIHhtbCA9ICIiOw0KDQogICAgICAgICAgICBTdHJlYW1SZWFkZXIgZnMgPSBudWxsOw0KDQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmcyA9IG5ldyBTdHJlYW1SZWFkZXIobmV3IEZpbGVTdHJlYW0oZmlsZU5hbWUsIEZpbGVNb2RlLk9wZW4sIEZpbGVBY2Nlc3MuUmVhZCkpOw0KDQogICAgICAgICAgICAgICAgLy9zd2l0Y2ggdG8gdGhlIGxpbmUgdG8gc3RhcnQgZnJvbSwgbGluZXMgc3RhcnQgZnJvbSAxDQogICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IDE7IGogPCBzdGFydEZyb21MaW5lOyBqKyspDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBmcy5SZWFkTGluZSgpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGNCeXRlc1JlYWQgPSBmcy5SZWFkKHJnQnVmZmVyLCAwLCBCVUZGRVJTSVpFKTsNCg0KICAgICAgICAgICAgICAgIHdoaWxlIChjQnl0ZXNSZWFkID4gMCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIC8vIEtlZXAgWE1MIHByb3BlcnR5IHVwIHRvIGRhdGUNCiAgICAgICAgICAgICAgICAgICAgeG1sID0gU3RyaW5nLkNvbmNhdCh4bWwsIG5ldyBTdHJpbmcocmdCdWZmZXIsIDAsIGNCeXRlc1JlYWQpKTsNCg0KICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGNoZWNrc3VtDQogICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjQnl0ZXNSZWFkOyBpKyspDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRSZXN1bHQgKz0gTWF0aC5Sb3VuZCgoRGVjaW1hbCkocmdCdWZmZXJbaV0gLyAoY1RvdGFsUmVhZCArIGkgKyAxLjApKSwgMTApOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgY1RvdGFsUmVhZCArPSBjQnl0ZXNSZWFkOw0KICAgICAgICAgICAgICAgICAgICBkRW5kQnVmZmVyID0gMDsNCg0KICAgICAgICAgICAgICAgICAgICAvLyBLZWVwIHJlYWRpbmcgKGluIGNhc2UgZmlsZSBpcyBiaWdnZXIgdGhhbiA0SykNCiAgICAgICAgICAgICAgICAgICAgY0J5dGVzUmVhZCA9IGZzLlJlYWQocmdCdWZmZXIsIDAsIEJVRkZFUlNJWkUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZXgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxvZ2dlciAhPSBudWxsKSBsb2dnZXIuTG9nWG1sKGV4LlRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZpbmFsbHkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoZnMgIT0gbnVsbCkgZnMuRGlzcG9zZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIENvbnZlcnQuVG9TdHJpbmcoZFJlc3VsdCAtIGRFbmRCdWZmZXIsIE51bWJlckZvcm1hdEluZm8uSW52YXJpYW50SW5mbyk7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBJcyB0aGlzIHJlYWxseSBhbGwgdGhlcmUgaXMgdG8gaXQ/DQogICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBEZXRlY3RFbWl0dGVkUERCKHN0cmluZyBmaWxlTmFtZSkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKEZpbGUuRXhpc3RzKGZpbGVOYW1lKSkgcmV0dXJuIHRydWU7DQogICAgICAgICAgICBlbHNlIHJldHVybiBGaWxlLkV4aXN0cyhmaWxlTmFtZSArICIucGRiIik7DQogICAgICAgIH0NCg0KICAgICAgICAvLyBDYWxsIFBFVmVyaWZ5IG9uIHRoZSBBc3NlbWJseSBuYW1lLCBwYXJzZSB0aGUgb3V0cHV0LA0KICAgICAgICAvLyBhbmQgcmV0dXJuIHRydWUgaWYgdGhlIG91dHB1dCBpcyBQQVNTIGFuZCBmYWxzZSBpZiB0aGUgb3V0cHV0IGlzIEZBSUwuDQogICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBWZXJpZnlBc3NlbWJseVVzaW5nUEVWZXJpZnkoc3RyaW5nIGFzbU5hbWUsIGJvb2wgaXNWYWxpZENhc2UsIERlbGF5ZWRXcml0ZUxvZ2dlciBsb2dnZXIsIHJlZiBzdHJpbmcgb3V0cHV0KQ0KICAgICAgICB7DQogICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQoYXNtTmFtZSAhPSBudWxsKTsNCiAgICAgICAgICAgIERlYnVnLkFzc2VydChhc21OYW1lICE9IFN0cmluZy5FbXB0eSk7DQoNCiAgICAgICAgICAgIGlmICghYXNtTmFtZS5Db250YWlucygiLmRsbCIpIHx8ICFhc21OYW1lLkNvbnRhaW5zKCIuRExMIikpDQogICAgICAgICAgICAgICAgYXNtTmFtZSA9IGFzbU5hbWUgKyAiLmRsbCI7DQoNCiAgICAgICAgICAgIGlmIChGaWxlLkV4aXN0cyhhc21OYW1lKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gVmVyaWZ5QXNzZW1ibHlVc2luZ1BFVmVyaWZ5KGFzbU5hbWUsIGxvZ2dlciwgcmVmIG91dHB1dCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRDYXNlKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIG1lc3NhZ2UgPSAiUEVWZXJpZnkgY291bGQgbm90IGJlIHJ1biwgbm8gYXNzZW1ibHkgcHJlc2VudDogIiArIGFzbU5hbWU7DQogICAgICAgICAgICAgICAgICAgIGlmIChsb2dnZXIgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5Mb2dNZXNzYWdlKG1lc3NhZ2UpOw0KICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBtZXNzYWdlOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgVmVyaWZ5U2luZ2xlQXNzZW1ibHlVc2luZ1BFVmVyaWZ5KHN0cmluZyBhc21OYW1lLCBEZWxheWVkV3JpdGVMb2dnZXIgbG9nZ2VyLCByZWYgc3RyaW5nIG91dHB1dCkNCiAgICAgICAgew0KICAgICAgICAgICAgRGVidWcuQXNzZXJ0KGFzbU5hbWUgIT0gbnVsbCk7DQogICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQoYXNtTmFtZSAhPSBTdHJpbmcuRW1wdHkpOw0KDQogICAgICAgICAgICBib29sIHJlc3VsdCA9IGZhbHNlOw0KDQogICAgICAgICAgICBpZiAoRmlsZS5FeGlzdHMoYXNtTmFtZSkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgLy9hZGQgZG91YmxlIHF1b3RlcyBmb3IgbmFtZXMgd2l0aCB3aGl0ZXNwYWNlIGluIHRoZW0NCiAgICAgICAgICAgICAgICBzdHJpbmcgcHJvY2Vzc0FyZ3VtZW50cyA9ICIgL3F1aWV0ICIgKyAiXCIiICsgYXNtTmFtZSArICJcIiI7DQoNCiAgICAgICAgICAgICAgICAvLyBDYWxsIFBFVmVyaWZ5IHRvIHZlcmlmeSBwZXJzaXN0YW50IGFzc2VtYmx5Lg0KICAgICAgICAgICAgICAgIFByb2Nlc3MgcGVWZXJpZnlQcm9jZXNzID0gbmV3IFByb2Nlc3MoKTsNCiAgICAgICAgICAgICAgICBwZVZlcmlmeVByb2Nlc3MuU3RhcnRJbmZvLkZpbGVOYW1lID0gU2VhcmNoUGF0aCgicGV2ZXJpZnkuZXhlIik7DQogICAgICAgICAgICAgICAgcGVWZXJpZnlQcm9jZXNzLlN0YXJ0SW5mby5Bcmd1bWVudHMgPSAiICIgKyBwcm9jZXNzQXJndW1lbnRzOw0KICAgICAgICAgICAgICAgIC8vcGVWZXJpZnlQcm9jZXNzLlN0YXJ0SW5mby5XaW5kb3dTdHlsZSA9IFByb2Nlc3NXaW5kb3dTdHlsZS5IaWRkZW47DQogICAgICAgICAgICAgICAgcGVWZXJpZnlQcm9jZXNzLlN0YXJ0SW5mby5DcmVhdGVOb1dpbmRvdyA9IHRydWU7DQogICAgICAgICAgICAgICAgcGVWZXJpZnlQcm9jZXNzLlN0YXJ0SW5mby5Vc2VTaGVsbEV4ZWN1dGUgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICBwZVZlcmlmeVByb2Nlc3MuU3RhcnRJbmZvLlJlZGlyZWN0U3RhbmRhcmRPdXRwdXQgPSB0cnVlOw0KDQogICAgICAgICAgICAgICAgcGVWZXJpZnlQcm9jZXNzLlN0YXJ0KCk7DQogICAgICAgICAgICAgICAgb3V0cHV0ID0gcGVWZXJpZnlQcm9jZXNzLlN0YW5kYXJkT3V0cHV0LlJlYWRUb0VuZCgpOw0KICAgICAgICAgICAgICAgIHBlVmVyaWZ5UHJvY2Vzcy5XYWl0Rm9yRXhpdCgpOw0KDQogICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIG91dHB1dCBmb3IgdGhlIEFzc2VtYmx5IG5hbWUsIGFuZCB0aGUgd29yZCAiUEFTUyINCiAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZToNCiAgICAgICAgICAgICAgICAvLyBDOj5wZXZlcmlmeSAvcXVpZXQgNEFDOEJEMjlGM0NCODg4RkFENzZGN0MwOEZENTdBRDMuZGxsDQogICAgICAgICAgICAgICAgLy8gNEFDOEJEMjlGM0NCODg4RkFENzZGN0MwOEZENTdBRDMuZGxsIFBBU1MNCiAgICAgICAgICAgICAgICBpZiAocGVWZXJpZnlQcm9jZXNzLkV4aXRDb2RlID09IDAgJiYgb3V0cHV0LkNvbnRhaW5zKGFzbU5hbWUpICYmIG91dHB1dC5Db250YWlucygiUEFTUyIpKQ0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmIChsb2dnZXIgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5Mb2dNZXNzYWdlKCJQRVZlcmlmeSBjb3VsZCBub3QgYmUgcnVuIG9yIEZBSUxFRCA6IHswfSIsIGFzbU5hbWUgKyAiICIgKyBvdXRwdXQpOw0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKGxvZ2dlciAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICBsb2dnZXIuTG9nTWVzc2FnZSgiQXNzZW1ibHkgZmlsZSBjb3VsZCBub3QgYmUgZm91bmQgOiB7MH0iLCBhc21OYW1lKTsNCiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBWZXJpZnlBc3NlbWJseVVzaW5nUEVWZXJpZnkoc3RyaW5nIGFzbU5hbWUsIERlbGF5ZWRXcml0ZUxvZ2dlciBsb2dnZXIsIHJlZiBzdHJpbmcgb3V0cHV0KQ0KICAgICAgICB7DQogICAgICAgICAgICBTdHJpbmcgc2NyaXB0QXNtTmFtZUZvcm1hdCA9IFBhdGguQ2hhbmdlRXh0ZW5zaW9uKGFzbU5hbWUsIG51bGwpICsgIl9TY3JpcHR7MH0uZGxsIjsNCiAgICAgICAgICAgIGludCBzY3JpcHRDb3VudGVyID0gMDsNCiAgICAgICAgICAgIFN0cmluZyB0ZXN0QXNtID0gYXNtTmFtZTsNCiAgICAgICAgICAgIGJvb2wgcmVzdWx0ID0gZmFsc2U7DQoNCiAgICAgICAgICAgIGRvDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmVzdWx0ID0gVmVyaWZ5U2luZ2xlQXNzZW1ibHlVc2luZ1BFVmVyaWZ5KHRlc3RBc20sIGxvZ2dlciwgcmVmIG91dHB1dCk7DQogICAgICAgICAgICAgICAgdGVzdEFzbSA9IFN0cmluZy5Gb3JtYXQoc2NyaXB0QXNtTmFtZUZvcm1hdCwgKytzY3JpcHRDb3VudGVyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHdoaWxlIChyZXN1bHQgJiYgRmlsZS5FeGlzdHModGVzdEFzbSkpOw0KDQogICAgICAgICAgICByZXR1cm4gcmVzdWx0Ow0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgU2VhcmNoUGF0aChTdHJpbmcgZmlsZU5hbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHZhciBsb2NhdGlvbnMgPSBuZXcgSGFzaFNldDxzdHJpbmc+KFN0cmluZ0NvbXBhcmVyLk9yZGluYWxJZ25vcmVDYXNlKTsNCg0KICAgICAgICAgICAgLy8gMzIgYml0IGlmIG9uIDY0IGJpdCBXaW5kb3dzDQogICAgICAgICAgICBsb2NhdGlvbnMuQWRkKFBhdGguQ29tYmluZShFbnZpcm9ubWVudC5HZXRGb2xkZXJQYXRoKEVudmlyb25tZW50LlNwZWNpYWxGb2xkZXIuUHJvZ3JhbUZpbGVzWDg2KSwgQCJNaWNyb3NvZnQgU0RLc1xXaW5kb3dzIikpOw0KICAgICAgICAgICAgLy8gMzIgYml0IGlmIG9uIDMyIGJpdCBXaW5kb3dzLCBvdGhlcndpc2UgNjQgYml0DQogICAgICAgICAgICBsb2NhdGlvbnMuQWRkKFBhdGguQ29tYmluZShFbnZpcm9ubWVudC5HZXRGb2xkZXJQYXRoKEVudmlyb25tZW50LlNwZWNpYWxGb2xkZXIuUHJvZ3JhbUZpbGVzKSwgQCJNaWNyb3NvZnQgU0RLc1xXaW5kb3dzIikpOw0KICAgICAgICAgICAgLy8gNjQgYml0IGlmIGluIDMyIGJpdCBwcm9jZXNzIG9uIDY0IGJpdCBXaW5kb3dzDQogICAgICAgICAgICBsb2NhdGlvbnMuQWRkKFBhdGguQ29tYmluZShFbnZpcm9ubWVudC5HZXRFbnZpcm9ubWVudFZhcmlhYmxlKCJQcm9ncmFtVzY0MzIiKSwgQCJNaWNyb3NvZnQgU0RLc1xXaW5kb3dzIikpOw0KDQogICAgICAgICAgICB2YXIgZmlsZXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7DQoNCiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBsb2NhdGlvbiBpbiBsb2NhdGlvbnMpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgaWYgKERpcmVjdG9yeS5FeGlzdHMobG9jYXRpb24pKQ0KICAgICAgICAgICAgICAgICAgICBmaWxlcy5BZGRSYW5nZShEaXJlY3RvcnkuR2V0RmlsZXMobG9jYXRpb24sIGZpbGVOYW1lLCBTZWFyY2hPcHRpb24uQWxsRGlyZWN0b3JpZXMpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGZpbGVzLkNvdW50ID09IDApDQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEZpbGVOb3RGb3VuZEV4Y2VwdGlvbihmaWxlTmFtZSk7DQoNCiAgICAgICAgICAgIC8vIENydWRlbHkgcHJlZmVyIG5ld2VyIHZlcnNpb25zLCBlZyA0LjYuMiBvdmVyIDQuNi4xLA0KICAgICAgICAgICAgLy8gYnV0IGl0IGN1cnJlbnRseSBpcyBub3QgaW1wb3J0YW50DQogICAgICAgICAgICBmaWxlcy5Tb3J0KFN0cmluZ0NvbXBhcmVyLk9yZGluYWxJZ25vcmVDYXNlKTsNCg0KICAgICAgICAgICAgcmV0dXJuIGZpbGVzW2ZpbGVzLkNvdW50IC0gMV07DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KICAgIFRoaXMgY2xhc3MgaXMgYSBkZWxheWVkLXdyaXRlIG1lc3NhZ2UgbG9nZ2VyLCBzaW1pbGFyIHRvIENFcnJvci5Xcml0ZUxpbmUgZXRjLiBJdCBpcw0KICAgIGluc3RhbnRpYXRlZCBieSB5b3VyIFhzbHREcml2ZXIgYW5kIHVzZWQgdG8gcmVjb3JkIG1lc3NhZ2VzIHRoYXQgeW91IHdvdWxkIG5vcm1hbGx5IHdyaXRlDQogICAgd2l0aCBDRXJyb3IuV3JpdGVMaW5lLCBDRXJyb3IuV3JpdGVMaW5lSWdub3JlLCBvciBDRXJyb3IuV3JpdGVYbWwsIGluIGEgYnVmZmVyZWQgbWFubmVyLg0KICAgIFRoZSBtZXNzYWdlcyBjYW4gYmUgd3JpdHRlbiB0byB0aGUgZmluYWwgbG9nIGZpbGUgdXNpbmcgV3JpdGVPdXRwdXRGaWxlVG9Mb2coKSBieSB5b3VyIGRyaXZlciBjb2RlDQogICAgaWYgdGhlcmUgaXMgYSB2YXJpYXRpb24gZmFpbHVyZSwgb3IganVzdCBkaXNjYXJkZWQgd2hlbiBhIHRlc3QgcGFzc2VzIHRvIGtlZXAgcmVzdWx0cy5sb2cgZmlsZXMNCiAgICB3aXRoaW4gYSBtYW5hZ2FibGUgc2l6ZSBvbiBkaXNrLg0KDQogICAgQXMgYW4gZXhhbXBsZSwgdXNpbmcgdGhpcyBtZXRob2QgcmVkdWNlZCB0aGUgc2l6ZSBvZiB0aGUgWFNMVCBWMiBsb2cgZmlsZSBmcm9tIDNNQiBwZXIgcnVuIHRvIGFyb3VuZCAzMDBrLg0KICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCg0KICAgIHB1YmxpYyBjbGFzcyBEZWxheWVkV3JpdGVMb2dnZXINCiAgICB7DQogICAgICAgIHByaXZhdGUgQXJyYXlMaXN0IF9tZXNzYWdlTG9nOw0KDQogICAgICAgIHB1YmxpYyBEZWxheWVkV3JpdGVMb2dnZXIoKQ0KICAgICAgICB7DQogICAgICAgICAgICBfbWVzc2FnZUxvZyA9IG5ldyBBcnJheUxpc3QoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFdyaXRlcyB0aGUgYnVmZmVyIG9mIG1lc3NhZ2VzIHRvIHRoZSByZXN1bHRzLmxvZyBmaWxlLg0KICAgICAgICBwdWJsaWMgdm9pZCBXcml0ZU91dHB1dEZpbGVUb0xvZyhzdHJpbmcgZmlsZU5hbWUpDQogICAgICAgIHsNCiAgICAgICAgICAgIFN0cmVhbVJlYWRlciBmcyA9IG51bGw7DQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDaGFyW10gcmdCdWZmZXIgPSBuZXcgQ2hhcls0MDk2XTsNCg0KICAgICAgICAgICAgICAgIGZzID0gbmV3IFN0cmVhbVJlYWRlcihuZXcgRmlsZVN0cmVhbShmaWxlTmFtZSwgRmlsZU1vZGUuT3BlbiwgRmlsZUFjY2Vzcy5SZWFkKSk7DQoNCiAgICAgICAgICAgICAgICBpbnQgY0J5dGVzUmVhZCA9IGZzLlJlYWQocmdCdWZmZXIsIDAsIDQwOTYpOw0KICAgICAgICAgICAgICAgIHdoaWxlIChjQnl0ZXNSZWFkID4gMCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuTG9nKG5ldyBzdHJpbmcocmdCdWZmZXIsIDAsIGNCeXRlc1JlYWQpKTsNCiAgICAgICAgICAgICAgICAgICAgY0J5dGVzUmVhZCA9IGZzLlJlYWQocmdCdWZmZXIsIDAsIDQwOTYpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZpbmFsbHkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoZnMgIT0gbnVsbCkgZnMuRGlzcG9zZSgpOw0KICAgICAgICAgICAgICAgIHRoaXMuTG9nTWVzc2FnZShTdHJpbmcuRW1wdHkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgTG9nKHN0cmluZyBtc2cpDQogICAgICAgIHsNCiAgICAgICAgICAgIExvZ01lc3NhZ2UoTWVzc2FnZVR5cGUuV3JpdGUsIG1zZywgbnVsbCk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBMb2dNZXNzYWdlKHN0cmluZyBtc2cpDQogICAgICAgIHsNCiAgICAgICAgICAgIExvZ01lc3NhZ2UoTWVzc2FnZVR5cGUuV3JpdGVMaW5lLCBtc2csIG51bGwpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgTG9nTWVzc2FnZShzdHJpbmcgbXNnLCBwYXJhbXMgb2JqZWN0W10gYXJncykNCiAgICAgICAgew0KICAgICAgICAgICAgTG9nTWVzc2FnZShNZXNzYWdlVHlwZS5Xcml0ZUxpbmVQYXJhbXMsIG1zZywgYXJncyk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBMb2dNZXNzYWdlSWdub3JlKHN0cmluZyBtc2cpDQogICAgICAgIHsNCiAgICAgICAgICAgIExvZ01lc3NhZ2UoTWVzc2FnZVR5cGUuV3JpdGVMaW5lSWdub3JlLCBtc2csIG51bGwpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHZvaWQgTG9nWG1sKHN0cmluZyBtc2cpDQogICAgICAgIHsNCiAgICAgICAgICAgIExvZ01lc3NhZ2UoTWVzc2FnZVR5cGUuWG1sLCBtc2csIG51bGwpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHJpdmF0ZSB2b2lkIExvZ01lc3NhZ2UoTWVzc2FnZVR5cGUgbXNndHlwZSwgc3RyaW5nIG1zZywgcGFyYW1zIG9iamVjdFtdIGFyZ3MpDQogICAgICAgIHsNCiAgICAgICAgICAgIExvZ01lc3NhZ2UgbWVzc2FnZSA9IG5ldyBMb2dNZXNzYWdlKG1zZ3R5cGUsIG1zZywgYXJncyk7DQogICAgICAgICAgICBfbWVzc2FnZUxvZy5BZGQobWVzc2FnZSk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgdm9pZCBXcml0ZUxvZ2dlZE1lc3NhZ2VzKCkNCiAgICAgICAgew0KICAgICAgICAgICAgZm9yZWFjaCAoTG9nTWVzc2FnZSBtZyBpbiBfbWVzc2FnZUxvZykNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1nLnR5cGUpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLldyaXRlOg0KICAgICAgICAgICAgICAgICAgICAgICAgQ0Vycm9yLldyaXRlKG1nLm1zZyk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLldyaXRlTGluZToNCiAgICAgICAgICAgICAgICAgICAgICAgIENFcnJvci5Xcml0ZUxpbmUobWcubXNnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuV3JpdGVMaW5lSWdub3JlOg0KICAgICAgICAgICAgICAgICAgICAgICAgQ0Vycm9yLldyaXRlTGluZUlnbm9yZShtZy5tc2cpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5Xcml0ZUxpbmVQYXJhbXM6DQogICAgICAgICAgICAgICAgICAgICAgICBDRXJyb3IuV3JpdGVMaW5lKG1nLm1zZywgbWcuYXJncyk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlhtbDoNCiAgICAgICAgICAgICAgICAgICAgICAgIENFcnJvci5Xcml0ZVhtbChtZy5tc2cpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgLy8gdXNlZCBieSBEZWxheWVkV3JpdGVMb2dnZXINCiAgICBpbnRlcm5hbCBlbnVtIE1lc3NhZ2VUeXBlDQogICAgew0KICAgICAgICBXcml0ZSwNCiAgICAgICAgV3JpdGVMaW5lLA0KICAgICAgICBXcml0ZUxpbmVQYXJhbXMsDQogICAgICAgIFdyaXRlTGluZUlnbm9yZSwNCiAgICAgICAgWG1sDQogICAgfQ0KDQogICAgLy8gdXNlZCBieSBEZWxheWVkV3JpdGVMb2dnZXINCiAgICBpbnRlcm5hbCBjbGFzcyBMb2dNZXNzYWdlDQogICAgew0KICAgICAgICBwdWJsaWMgTG9nTWVzc2FnZShNZXNzYWdlVHlwZSB0LCBzdHJpbmcgbSwgb2JqZWN0W10gbykNCiAgICAgICAgew0KICAgICAgICAgICAgdHlwZSA9IHQ7DQogICAgICAgICAgICBtc2cgPSBtOw0KICAgICAgICAgICAgYXJncyA9IG87DQogICAgICAgIH0NCg0KICAgICAgICBpbnRlcm5hbCBNZXNzYWdlVHlwZSB0eXBlOw0KICAgICAgICBwdWJsaWMgc3RyaW5nIG1zZzsNCiAgICAgICAgcHVibGljIG9iamVjdFtdIGFyZ3M7DQogICAgfQ0KDQogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCiAgICBhdXRob3IgYWxleGtyDQogICAgZGF0ZSAgIDEyLzEyLzIwMDUNCg0KICAgIFRoaXMgY2xhc3MgaXMgdXNlZCB0byBjb21wYXJlIGV4cGVjdGVkIGV4Y2VwdGlvbnMgd2l0aCBhY3R1YWwgZXhjZXB0aW9ucyBpbiB0aGUgQ29tcGFyZUV4Y2VwdGlvbg0KICAgIG1ldGhvZCwgdXNlZCBieSB0aGUgWFNMVCBWMiBkYXRhIGRyaXZlbiBkcml2ZXIuDQoNCiAgICBJdHMgdXNlIGlzIHNvbWV3aGF0IHN1YnRsZSwgc28gcGxlYXNlIHJlYWQgYWxsIGNvbW1lbnRzLCB1bmRlcnN0YW5kIHRoZSBFcXVhbHMgbWV0aG9kLCBhbmQgYXNrIGZvcg0KICAgIGludHJvZHVjdGlvbiBiZWZvcmUgeW91IHVzZSBpdCBpbiBhbnkgbmV3IGNvZGUsIG9yIG1vZGlmeSBleGlzdGluZyBjb2RlLiBXaHk/IFRoZXJlIGFyZSBtYW55DQogICAgYXNzdW1wdGlvbnMgbWFkZSB3aGVuIHVzaW5nIHRoaXMgY2xhc3MuIEhlcmUgYXJlIHNvbWUuLi4NCg0KICAgICAgIE5vbi1YbWwgRXhjZXB0aW9ucyBhcmUgYWx3YXlzIGNvbXBhcmVkIGJ5IHR5cGUsIGFuZCBtdXN0IG5ldmVyIGhhdmUgRXhjZXB0aW9uUmVzb3VyY2VJZCBvciBFeGNlcHRpb25NZXNzYWdlIGF0dHJpYnV0ZXMgaW4gYSBjb250cm9sIGZpbGUuDQogICAgICAgWG1sIEV4Y2VwdGlvbnMgY2FuIGJlIGVpdGhlciBFeGNlcHRpb25JZCBvbmx5LCBFeGNlcHRpb25JZCBhbmQgRXhjZXB0aW9uTWVzc2FnZSBmb3IgYWxsIFhtbF9Vc2VyRXhjZXB0aW9uIGV4Y2VwdGlvbnMsIG9yIEV4Y2VwdGlvbklkIGFuZCBFeGNlcHRpb25SZXNvdXJjZUlkIGZvciBhbGwgbm9uLVhtbF9Vc2VyRXhjZXB0aW9ucw0KICAgICAgIE5ldmVyIGhhdmUgYm90aCBFeGNlcHRpb25SZXNvdXJjZUlkIEFORCBFeGNlcHRpb25NZXNzYWdlIGF0dHJpYnV0ZXMgc2V0IGZvciB0aGUgc2FtZSBFeGNlcHRpb24gbWV0YS1kYXRhLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkLg0KICAgICAgIFhtbCBFeGNlcHRpb25zIHRoYXQgYXJlIFhtbF9Vc2VyRXhjZXB0aW9ucyBhbmQgaW5jbHVkZSBhIE1lc3NhZ2VGcmFnbWVudCB3aWxsIG9ubHkgYmUgY29tcGFyZWQgaW4gRU5VIHJ1bnMuIEdsb2JhbGl6ZWQgcnVucyByZXNvcnQgdG8gVHlwZSBjb21wYXJpc29uIChFeGNlcHRpb25JZCkgb25seS4NCiAgICAgICBYbWwgRXhjZXB0aW9ucyB0aGF0IGFyZSBub24tWG1sX1VzZXJFeGNlcHRpb25zIGFuZCBpbmNsdWRlIGFuIEV4Y2VwdGlvblJlc291cmNlSWQgd2lsbCBiZSBjb21wYXJlZCBmb3IgYWxsIHJ1bnMuDQoNCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCg0KICAgIHB1YmxpYyBjbGFzcyBYc2x0UnVudGltZUV4Y2VwdGlvbg0KICAgIHsNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgWE1MVVNFUkVYID0gIlhtbF9Vc2VyRXhjZXB0aW9uIjsNCg0KICAgICAgICBwcml2YXRlIFhzbHRSdW50aW1lRXhjZXB0aW9uKCkNCiAgICAgICAgew0KICAgICAgICB9IC8vIG5vIG9wLCBkbyBub3QgY2FsbA0KDQogICAgICAgIHB1YmxpYyBYc2x0UnVudGltZUV4Y2VwdGlvbihzdHJpbmcgYSwgYm9vbCBkKQ0KICAgICAgICAgICAgOiB0aGlzKGEsIFhNTFVTRVJFWCwgU3RyaW5nLkVtcHR5LCBkKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgWHNsdFJ1bnRpbWVFeGNlcHRpb24oc3RyaW5nIGEsIHN0cmluZyBiLCBzdHJpbmcgYywgYm9vbCBkKQ0KICAgICAgICB7DQogICAgICAgICAgICBFeGNlcHRpb25JZCA9IGE7DQogICAgICAgICAgICBSZXNvdXJjZUlkID0gYjsNCiAgICAgICAgICAgIE1lc3NhZ2VGcmFnbWVudCA9IGM7DQogICAgICAgICAgICBfZXhhbWluZU1lc3NhZ2VzID0gZDsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdHJpbmcgRXhjZXB0aW9uSWQ7DQogICAgICAgIHB1YmxpYyBzdHJpbmcgUmVzb3VyY2VJZDsNCiAgICAgICAgcHVibGljIHN0cmluZyBNZXNzYWdlRnJhZ21lbnQ7DQogICAgICAgIHByaXZhdGUgYm9vbCBfZXhhbWluZU1lc3NhZ2VzOw0KDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgVG9TdHJpbmcoKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gRXhjZXB0aW9uSWQgKyAiXG4iICsgUmVzb3VyY2VJZCArICJcbiIgKyBNZXNzYWdlRnJhZ21lbnQ7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgaW50IEdldEhhc2hDb2RlKCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIGJhc2UuR2V0SGFzaENvZGUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIFRoZSBFcXVhbHMgbWV0aG9kIG11c3QgYWx3YXlzIGJlIHVzZWQgdGhpcyB3YXkNCiAgICAgICAgLy8gRXhwZWN0ZWRFeGNlcHRpb24uRXF1YWxzKCBBY3R1YWxFeGNlcHRpb24gKT8NCiAgICAgICAgLy8gUGxlYXNlIG5vdGUgdGhhdCBpZiBFeGFtaW5lTWVzc2FnZXMgaXMgdHJ1ZSwgd2UgYXJlIGluIGEgbm9uLWxvY2FsaXplZCBidWlsZCBhbmQgd2UgY2FuIHNhZmVseSBleGFtaW5lIGV4Y2VwdGlvbiBtZXNzYWdlcy4gSWYgZmFsc2UsIHdlIGZhbGwgYmFjayB0byB0eXBlIGNvbXBhcmlzb24gZXhjbHVzaXZlbHkuDQogICAgICAgIHB1YmxpYyBvdmVycmlkZSBib29sIEVxdWFscyhvYmplY3QgbykNCiAgICAgICAgew0KICAgICAgICAgICAgWHNsdFJ1bnRpbWVFeGNlcHRpb24gb2JqZWN0VG9Db21wYXJlVG8gPSBvIGFzIFhzbHRSdW50aW1lRXhjZXB0aW9uOw0KDQogICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQob2JqZWN0VG9Db21wYXJlVG8gIT0gbnVsbCk7DQogICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQob2JqZWN0VG9Db21wYXJlVG8uRXhjZXB0aW9uSWQgIT0gbnVsbCwgIkV4Y2VwdGlvbklkIG11c3QgYmUgaW5pdGlhbGl6ZWQgdG8gYSB2YWxpZCBmdWxseSBxdWFsaWZpZWQgdHlwZSBuYW1lIik7DQogICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQob2JqZWN0VG9Db21wYXJlVG8uUmVzb3VyY2VJZCAhPSBudWxsLCAiUmVzb3VyY2VJZCBtdXN0IGJlIGluaXRpYWxpemVkIHRvIFN0cmluZy5FbXB0eSwgaW4gd2hpY2ggY2FzZSBNZXNzYWdlRnJhZ21lbnQgaXMgdXNlZCwgb3IgYSBsZWdhbCByZXNvdXJjZSBJZCIpOw0KICAgICAgICAgICAgRGVidWcuQXNzZXJ0KG9iamVjdFRvQ29tcGFyZVRvLk1lc3NhZ2VGcmFnbWVudCAhPSBudWxsLCAiTWVzc2FnZUZyYWdtZW50IG11c3QgYmUgaW5pdGlhbGl6ZWQgdG8gU3RyaW5nLkVtcHR5LCBpbiB3aGljaCBjYXNlIFJlc291cmNlSWQgaXMgdXNlZCwgb3IgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIGEgc3BlY2lmaWMgZXhjZXB0aW9uIG1lc3NhZ2UuIik7DQogICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQodGhpcy5FeGNlcHRpb25JZCAhPSBudWxsLCAiRXhjZXB0aW9uSWQgbXVzdCBiZSBpbml0aWFsaXplZCB0byBhIHZhbGlkIGZ1bGx5IHF1YWxpZmllZCB0eXBlIG5hbWUiKTsNCiAgICAgICAgICAgIERlYnVnLkFzc2VydCh0aGlzLlJlc291cmNlSWQgIT0gbnVsbCwgIlJlc291cmNlSWQgbXVzdCBiZSBpbml0aWFsaXplZCB0byBTdHJpbmcuRW1wdHksIGluIHdoaWNoIGNhc2UgTWVzc2FnZUZyYWdtZW50IGlzIHVzZWQsIG9yIGEgbGVnYWwgcmVzb3VyY2UgSWQiKTsNCiAgICAgICAgICAgIERlYnVnLkFzc2VydCh0aGlzLk1lc3NhZ2VGcmFnbWVudCAhPSBudWxsLCAiTWVzc2FnZUZyYWdtZW50IG11c3QgYmUgaW5pdGlhbGl6ZWQgdG8gU3RyaW5nLkVtcHR5LCBpbiB3aGljaCBjYXNlIFJlc291cmNlSWQgaXMgdXNlZCwgb3IgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIGEgc3BlY2lmaWMgZXhjZXB0aW9uIG1lc3NhZ2UuIik7DQoNCiAgICAgICAgICAgIC8vIEluc2lkZSB0aGlzIGJsb2NrLCB3ZSBoYXZlIHR3byBwcm9wZXJseSBpbml0aWFsaXplZCBYc2x0UnVudGltZUV4Y2VwdGlvbnMgdG8gY29tcGFyZS4NCg0KICAgICAgICAgICAgLy8vLy8NCiAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBzZXZlcmFsIGJhc2ljIGNvbXBhcmlzb25zLCBlYWNoIHdpdGggaXRzIG93biBkZWdyZWUgb2YgY2VydGFpbnR5Lg0KICAgICAgICAgICAgLy8NCiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBjb21wYXJpc29uIGlzIHRoZSBvcmlnaW5hbCB1c2VkIGJ5IHRoZSBkcml2ZXIsIHdoaWNoIHdlIG5vIGxvbmdlciB1c2U6IGlmIHRoZXJlIGlzIGFueQ0KICAgICAgICAgICAgLy8gICAgIGV4Y2VwdGlvbiBhdCBhbGwgZm9yIGFuIGV4cGVjdGVkICJJbnZhbGlkIiBjYXNlLCB3ZSBtYXRjaC4NCiAgICAgICAgICAgIC8vDQogICAgICAgICAgICAvLyBUaGUgc2Vjb25kIGNvbXBhcmlzb24gaXMgdGhlIGluaXRpYWwgcmV2aXNpb24gdG8gdGhlIGRyaXZlcjogYW4gRXhjZXB0aW9uIHR5cGUgY29tcGFyaXNvbi4gVGhpcyBpcyB0aGUgbGVhc3QgY2VydGFpbi4NCiAgICAgICAgICAgIC8vICAgICB0eXBlIG1hdGNoZXMgc2hvdWxkIG5vIGxvbmdlciBleGlzdCBvbmNlIHRoaXMgZXhjZXB0aW9uIHdvcmsgaXMgY29tcGxldGUuIFRoZXNlIHdpbGwgYmUgZmxhZ2dlZCBieSBmYWlsaW5nIHRoZSB0ZXN0Lg0KICAgICAgICAgICAgLy8NCiAgICAgICAgICAgIC8vIFRoZSB0aGlyZCBjb21wYXJpc29uIGlzIGZvciBYbWxfVXNlckV4Y2VwdGlvbnMuIEluIHRoaXMgY2FzZSB3ZSB0cnkgdG8gY29tcGFyZSB0aGUgRXhjZXB0aW9uIFR5cGUgYW5kIEV4Y2VwdGlvbiBNZXNzYWdlLg0KICAgICAgICAgICAgLy8gICAgIElmIHRoZSBFeGNlcHRpb24gdHlwZSBkb2VzIG5vdCBtYXRjaCwgYnV0IHRoZSBtZXNzYWdlIGRvZXMsIHdlIGNvdW50IHRoYXQgYXMgYSBtYXRjaC4gTm90ZSB0aGF0IHRoaXMgbWF0Y2ggaXMgTk9UDQogICAgICAgICAgICAvLyAgICAgaW1tdWUgdG8gdGhlIGVmZmVjdHMgb2YgZ2xvYmFsaXplZCByZXNvdXJjZSBzdHJpbmdzLCBhbmQgaGVuY2UgaXMgbGVzcyBjZXJ0YWluLg0KICAgICAgICAgICAgLy8NCiAgICAgICAgICAgIC8vIFRoZSBmb3VydGggY29tcGFyaXNvbiBpcyBmb3IgTk9OIFhtbF9Vc2VyRXhjZXB0aW9ucy4gSW4gdGhpcyBjYXNlIHdlIHRyeSB0byBjb21wYXJlIHRoZSBFeGNlcHRpb24gVHlwZSBhbmQgUmVzb3VyY2VJZC4NCiAgICAgICAgICAgIC8vICAgICBJZiB0aGUgRXhjZXB0aW9uIHR5cGUgZG9lcyBub3QgbWF0Y2gsIGJ1dCB0aGUgcmVzb3VyY2UgaWQgZG9lcywgd2UgY291bnQgdGhhdCBhIG1hdGNoLiBOb3RlIHRoYXQgdGhpcyBtYXRjaCBpcw0KICAgICAgICAgICAgLy8gICAgIGltbXVuZSB0byB0aGUgZWZmZWN0cyBvZiBnbG9iYWxpemVkIHJlc291cmNlIHN0cmluZ3MuIEl0IGlzIHRoZSBtb3N0IGNlcnRhaW4gbWF0Y2ggd2UgY2FuIG1ha2UuDQogICAgICAgICAgICAvLw0KICAgICAgICAgICAgLy8vLy8NCiAgICAgICAgICAgIGlmICghSXNYbWxFeGNlcHRpb24odGhpcy5FeGNlcHRpb25JZCkpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgLy8gQXllLCBoZXJlJ3MgdGhlIGRpbGxlbWEuIElmIGl0cyBub3QgYW4gWE1MIGV4Y2VwdGlvbiB3ZSBjYW4ndCBsb29rIHVwIGl0cyByZXNvdXJjZSBJRC4NCiAgICAgICAgICAgICAgICAvLyBTbyBpbiB0aGVzZSBjYXNlcyAodmVyeSByYXJlIGFueXdheSkgd2UgcmV2ZXJ0IHRvIHRoZSBvbGQgc2ltcGxlIGRheXMgb2YgY29tcGFyaW5nIHR5cGUgdG8gdHlwZS4NCiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0VG9Db21wYXJlVG8uRXhjZXB0aW9uSWQuRXF1YWxzKHRoaXMuRXhjZXB0aW9uSWQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmICghb2JqZWN0VG9Db21wYXJlVG8uUmVzb3VyY2VJZC5FcXVhbHMoU3RyaW5nLkVtcHR5KSAmJiAhb2JqZWN0VG9Db21wYXJlVG8uUmVzb3VyY2VJZC5FcXVhbHMoWE1MVVNFUkVYKSAmJg0KICAgICAgICAgICAgICAgICAgICBvYmplY3RUb0NvbXBhcmVUby5SZXNvdXJjZUlkLkVxdWFscyh0aGlzLlJlc291cmNlSWQpKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8qKioqIFRoZSBoaWdoZXN0IGRlZ3JlZSBvZiBjZXJ0YWludHkgd2UgaGF2ZS4gKioqKi8vDQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdFRvQ29tcGFyZVRvLkV4Y2VwdGlvbklkLkVxdWFscyh0aGlzLkV4Y2VwdGlvbklkKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAvLyBSZXNvdXJjZUlkcyBtYXRjaCwgYnV0IEV4Y2VwdGlvbiB0eXBlcyBkb250Lg0KICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIENFcnJvci5Xcml0ZUxpbmUoIm1hdGNoP1xuIHswfSBcbmNvbXBhcmUgdG8gXG4gezF9IFxuIHBscyBpbnZlc3RpZ2F0ZSB3aHkgdGhpcyByZXNvdXJjZSBpZCBpcyBiZWluZyB0aHJvd24gaW4gMiBkaWZmZXJldCBleGNlcHRpb25zIiwgb2JqZWN0VG9Db21wYXJlVG8uVG9TdHJpbmcoKSwgdGhpcy5Ub1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vIFJlc291cmNlSWQgaXMgRW1wdHkgb3IgWG1sX1VzZXJFeGNlcHRpb24sIG9yIHRoZXkgZG9udCBtYXRjaA0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLk1lc3NhZ2VGcmFnbWVudC5FcXVhbHMoU3RyaW5nLkVtcHR5KSAmJiBfZXhhbWluZU1lc3NhZ2VzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdFRvQ29tcGFyZVRvLlJlc291cmNlSWQuRXF1YWxzKHRoaXMuUmVzb3VyY2VJZCkgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdFRvQ29tcGFyZVRvLk1lc3NhZ2VGcmFnbWVudC5Db250YWlucyh0aGlzLk1lc3NhZ2VGcmFnbWVudCkpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vKioqKiBWZXJ5IGhpZ2ggY2VydGFpbnR5IGVxdWl2YWxlbmNlICoqKiovLw0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqZWN0VG9Db21wYXJlVG8uRXhjZXB0aW9uSWQuRXF1YWxzKHRoaXMuRXhjZXB0aW9uSWQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXNzYWdlcyBtYXRjaCwgYnV0IEV4Y2VwdGlvbiB0eXBlcyBkb250Lg0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENFcnJvci5Xcml0ZUxpbmUoIm1hdGNoPyhtZXNzYWdlIG1hdGNoZXMgYnV0IGV4YWN0IHR5cGVuYW1lIGRvZXNuJ3QpXG4gezB9IFxuY29tcGFyZSB0byBcbiB7MX0gIiwgb2JqZWN0VG9Db21wYXJlVG8uVG9TdHJpbmcoKSwgdGhpcy5Ub1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGZvciBub3cuDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gUmVzb3VyY2VJZCBpcyBFbXB0eSBvciBYbWxfVXNlckV4Y2VwdGlvbiBvciB0aGV5IGRvbnQgbWF0Y2gsIE1lc3NhZ2UgaXMgRW1wdHkgb3IgdGhleSBkb250IG1hdGNoDQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgLy8qKioqIExvd2VyIGRlZ3JlZSBvZiBjZXJ0YWludHkgKioqKi8vDQogICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYW4gZXhjZXB0aW9uIHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiB1cGRhdGVkIGluIHRoZSBjb250cm9sIGZpbGUgd2l0aCBjb21wbGV0ZSBpbmZvcm1hdGlvbi4NCiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBvbGRlciwgbGVzcyBmbGV4aWJsZSBjb21wYXJpc29uIGxvZ2ljLg0KICAgICAgICAgICAgICAgICAgICBDRXJyb3IuV3JpdGVMaW5lKCJvbGQgY29tcGFyaXNvbjp7MH0gXG5jb21wYXJlIHRvIFxuIHsxfSAiLCBvYmplY3RUb0NvbXBhcmVUby5Ub1N0cmluZygpLCB0aGlzLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0VG9Db21wYXJlVG8uRXhjZXB0aW9uSWQuRXF1YWxzKHRoaXMuRXhjZXB0aW9uSWQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgQXJyYXlMaXN0IFhtbEV4Y2VwdGlvbkxpc3QgPSBuZXcgQXJyYXlMaXN0KDUpOw0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIHZvaWQgc2V0WG1sRXhjZXB0aW9uTGlzdCgpDQogICAgICAgIHsNCiAgICAgICAgICAgIFhtbEV4Y2VwdGlvbkxpc3QuQWRkKCJTeXN0ZW0uWG1sLlhzbC5YUGF0aC5YUGF0aENvbXBpbGVFeGNlcHRpb24iKTsNCiAgICAgICAgICAgIFhtbEV4Y2VwdGlvbkxpc3QuQWRkKCJTeXN0ZW0uWG1sLlhzbC5Yc2xMb2FkRXhjZXB0aW9uIik7DQogICAgICAgICAgICBYbWxFeGNlcHRpb25MaXN0LkFkZCgiU3lzdGVtLlhtbC5Yc2wuWHNsVHJhbnNmb3JtRXhjZXB0aW9uIik7DQogICAgICAgICAgICBYbWxFeGNlcHRpb25MaXN0LkFkZCgiU3lzdGVtLlhtbC5Yc2wuWHNsdEV4Y2VwdGlvbiIpOw0KICAgICAgICAgICAgWG1sRXhjZXB0aW9uTGlzdC5BZGQoIlN5c3RlbS5YbWwuWG1sRXhjZXB0aW9uIik7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgSXNYbWxFeGNlcHRpb24oc3RyaW5nIHR5cGVOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBzZXRYbWxFeGNlcHRpb25MaXN0KCk7DQogICAgICAgICAgICByZXR1cm4gWG1sRXhjZXB0aW9uTGlzdC5Db250YWlucyh0eXBlTmFtZSk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="
        }
      },
      "results": [
        {
          "ruleId": "cs/unsynchronized-static-access",
          "level": "warning",
          "message": "Unsynchronized access to [s_primitiveTypes] in non-static context from [XmlSerializer].",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Serialization/Types.cs",
                "region": {
                  "startLine": 705,
                  "startColumn": 30,
                  "length": 22
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Serialization/Types.cs",
                "region": {
                  "startLine": 472,
                  "startColumn": 25,
                  "length": 16
                }
              },
              "message": "s_primitiveTypes"
            },
            {
              "physicalLocation": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Serialization/XmlSerializer.cs",
                "region": {
                  "startLine": 252,
                  "startColumn": 7,
                  "length": 13
                }
              },
              "message": "XmlSerializer"
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Core/XmlValidatingReaderImpl.cs",
                "region": {
                  "startLine": 163,
                  "startColumn": 7,
                  "length": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Core/XmlValidatingReaderImpl.cs",
                "region": {
                  "startLine": 181,
                  "startColumn": 7,
                  "length": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Dom/XmlDocument.cs",
                "region": {
                  "startLine": 1209,
                  "startColumn": 35,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Dom/XmlDocument.cs",
                "region": {
                  "startLine": 1222,
                  "startColumn": 35,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Dom/XmlDocument.cs",
                "region": {
                  "startLine": 1236,
                  "startColumn": 35,
                  "length": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Dom/XmlDocument.cs",
                "region": {
                  "startLine": 1275,
                  "startColumn": 35,
                  "length": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/SchemaCollectionpreProcessor.cs",
                "region": {
                  "startLine": 227,
                  "startColumn": 23,
                  "length": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XdrBuilder.cs",
                "region": {
                  "startLine": 524,
                  "startColumn": 9,
                  "length": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XdrValidator.cs",
                "region": {
                  "startLine": 336,
                  "startColumn": 9,
                  "length": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XmlSchema.cs",
                "region": {
                  "startLine": 81,
                  "startColumn": 12,
                  "length": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XmlSchema.cs",
                "region": {
                  "startLine": 90,
                  "startColumn": 12,
                  "length": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XmlSchemaCollection.cs",
                "region": {
                  "startLine": 110,
                  "startColumn": 23,
                  "length": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/Schema/XsdValidator.cs",
                "region": {
                  "startLine": 569,
                  "startColumn": 9,
                  "length": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/src/System/Xml/XPath/XPathNavigator.cs",
                "region": {
                  "startLine": 2093,
                  "startColumn": 23,
                  "length": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlReader/Tests/BaseUriTests.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 55,
                  "length": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlReader/Tests/BaseUriTests.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 55,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlReader/Tests/BaseUriTests.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 55,
                  "length": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 23,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 46,
                  "startColumn": 23,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 82,
                  "startColumn": 24,
                  "length": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 24,
                  "length": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 96,
                  "startColumn": 24,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 97,
                  "startColumn": 24,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 23,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 73,
                  "startColumn": 23,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 113,
                  "startColumn": 24,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Reader.cs",
                "region": {
                  "startLine": 124,
                  "startColumn": 23,
                  "length": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs",
                "region": {
                  "startLine": 213,
                  "startColumn": 35,
                  "length": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs",
                "region": {
                  "startLine": 214,
                  "startColumn": 35,
                  "length": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs",
                "region": {
                  "startLine": 254,
                  "startColumn": 18,
                  "length": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs",
                "region": {
                  "startLine": 258,
                  "startColumn": 19,
                  "length": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs",
                "region": {
                  "startLine": 282,
                  "startColumn": 19,
                  "length": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs",
                "region": {
                  "startLine": 324,
                  "startColumn": 18,
                  "length": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs",
                "region": {
                  "startLine": 328,
                  "startColumn": 19,
                  "length": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Add_Schema.cs",
                "region": {
                  "startLine": 358,
                  "startColumn": 19,
                  "length": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Misc.cs",
                "region": {
                  "startLine": 69,
                  "startColumn": 27,
                  "length": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Misc.cs",
                "region": {
                  "startLine": 421,
                  "startColumn": 13,
                  "length": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Misc.cs",
                "region": {
                  "startLine": 439,
                  "startColumn": 13,
                  "length": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Misc.cs",
                "region": {
                  "startLine": 441,
                  "startColumn": 13,
                  "length": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_Misc.cs",
                "region": {
                  "startLine": 888,
                  "startColumn": 21,
                  "length": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_ProhibitDTD.cs",
                "region": {
                  "startLine": 248,
                  "startColumn": 13,
                  "length": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_ValidationEventHandler.cs",
                "region": {
                  "startLine": 94,
                  "startColumn": 22,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSchema/XmlSchemaSet/TC_SchemaSet_ValidationEventHandler.cs",
                "region": {
                  "startLine": 115,
                  "startColumn": 19,
                  "length": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSerializer/XmlSerializerTests.RuntimeOnly.cs",
                "region": {
                  "startLine": 1786,
                  "startColumn": 20,
                  "length": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSerializer/XmlSerializerTests.RuntimeOnly.cs",
                "region": {
                  "startLine": 1979,
                  "startColumn": 23,
                  "length": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/XmlSerializer/XmlSerializerTests.cs",
                "region": {
                  "startLine": 1798,
                  "startColumn": 20,
                  "length": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/TempFiles.cs",
                "region": {
                  "startLine": 97,
                  "startColumn": 15,
                  "length": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XslCompiledTransform.cs",
                "region": {
                  "startLine": 2989,
                  "startColumn": 19,
                  "length": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XsltApiV2.cs",
                "region": {
                  "startLine": 281,
                  "startColumn": 23,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XsltApiV2.cs",
                "region": {
                  "startLine": 368,
                  "startColumn": 23,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XsltApiV2.cs",
                "region": {
                  "startLine": 449,
                  "startColumn": 20,
                  "length": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XsltApiV2.cs",
                "region": {
                  "startLine": 450,
                  "startColumn": 20,
                  "length": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XsltApiV2.cs",
                "region": {
                  "startLine": 479,
                  "startColumn": 22,
                  "length": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslCompiledTransformApi/XsltApiV2.cs",
                "region": {
                  "startLine": 479,
                  "startColumn": 81,
                  "length": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXmlCache.cs",
                "region": {
                  "startLine": 774,
                  "startColumn": 17,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXslTransform.cs",
                "region": {
                  "startLine": 1463,
                  "startColumn": 53,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXslTransform.cs",
                "region": {
                  "startLine": 1492,
                  "startColumn": 53,
                  "length": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXslTransform.cs",
                "region": {
                  "startLine": 1518,
                  "startColumn": 53,
                  "length": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXslTransform.cs",
                "region": {
                  "startLine": 1543,
                  "startColumn": 37,
                  "length": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXslTransform.cs",
                "region": {
                  "startLine": 1581,
                  "startColumn": 53,
                  "length": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/CXslTransform.cs",
                "region": {
                  "startLine": 1778,
                  "startColumn": 53,
                  "length": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs",
                "region": {
                  "startLine": 317,
                  "startColumn": 23,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs",
                "region": {
                  "startLine": 357,
                  "startColumn": 53,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs",
                "region": {
                  "startLine": 381,
                  "startColumn": 53,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs",
                "region": {
                  "startLine": 414,
                  "startColumn": 23,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs",
                "region": {
                  "startLine": 454,
                  "startColumn": 53,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs",
                "region": {
                  "startLine": 478,
                  "startColumn": 53,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs",
                "region": {
                  "startLine": 506,
                  "startColumn": 27,
                  "length": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XslTransformApi/XSLTransform.cs",
                "region": {
                  "startLine": 507,
                  "startColumn": 27,
                  "length": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XsltCompiler/XsltCommon.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 13,
                  "length": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "cs/insecure-xml-read",
          "level": "warning",
          "message": "Insecure XML processing: DTD processing is enabled by default, and resolver is insecure by default",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/corefx/src/System.Private.Xml/tests/Xslt/XsltCompiler/XsltCommon.cs",
                "region": {
                  "startLine": 84,
                  "startColumn": 1,
                  "length": 63
                }
              }
            }
          ]
        }
      ],
      "rules": {
        "cs/ldap-injection": {
          "id": "cs/ldap-injection",
          "name": "cs/ldap-injection",
          "shortDescription": "LDAP query built from user-controlled sources",
          "fullDescription": "Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-090"
],
            "kind": "problem",
            "precision": "medium",
            "name": "LDAP query built from user-controlled sources",
            "description": "Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
            "id": "cs/ldap-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-090/LDAPInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/xpath-injection": {
          "id": "cs/xml/xpath-injection",
          "name": "cs/xml/xpath-injection",
          "shortDescription": "XPath injection",
          "fullDescription": "Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-643"
],
            "kind": "problem",
            "precision": "medium",
            "name": "XPath injection",
            "description": "Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user.",
            "id": "cs/xml/xpath-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-643/XPathInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/command-line-injection": {
          "id": "cs/command-line-injection",
          "name": "cs/command-line-injection",
          "shortDescription": "Uncontrolled command line",
          "fullDescription": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "correctness",
  "security",
  "external/cwe/cwe-078",
  "external/cwe/cwe-088"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled command line",
            "description": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
            "id": "cs/command-line-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-078/CommandInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/directory-browse-enabled": {
          "id": "cs/web/directory-browse-enabled",
          "name": "cs/web/directory-browse-enabled",
          "shortDescription": "ASP.NET config file enables directory browsing",
          "fullDescription": "Directory browsing should not be enabled in production as it can leak sensitive information.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-548"
],
            "kind": "problem",
            "precision": "very-high",
            "name": "ASP.NET config file enables directory browsing",
            "description": "Directory browsing should not be enabled in production as it can leak sensitive information.",
            "id": "cs/web/directory-browse-enabled",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-548/ASPNetDirectoryListing.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/unvalidated-url-redirection": {
          "id": "cs/web/unvalidated-url-redirection",
          "name": "cs/web/unvalidated-url-redirection",
          "shortDescription": "URL redirection from remote source",
          "fullDescription": "URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-601"
],
            "kind": "problem",
            "precision": "medium",
            "name": "URL redirection from remote source",
            "description": "URL redirection based on unvalidated user input may cause redirection to malicious web sites.",
            "id": "cs/web/unvalidated-url-redirection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-601/UrlRedirect.ql",
            "problem.severity": "error"
          }
        },
        "cs/path-injection": {
          "id": "cs/path-injection",
          "name": "cs/path-injection",
          "shortDescription": "Uncontrolled data used in path expression",
          "fullDescription": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-022",
  "external/cwe/cwe-023",
  "external/cwe/cwe-036",
  "external/cwe/cwe-073",
  "external/cwe/cwe-099"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled data used in path expression",
            "description": "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
            "id": "cs/path-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-022/TaintedPath.ql",
            "problem.severity": "error"
          }
        },
        "cs/user-controlled-bypass": {
          "id": "cs/user-controlled-bypass",
          "name": "cs/user-controlled-bypass",
          "shortDescription": "User-controlled bypass of sensitive method",
          "fullDescription": "User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-807",
  "external/cwe/cwe-247",
  "external/cwe/cwe-350"
],
            "kind": "problem",
            "precision": "medium",
            "name": "User-controlled bypass of sensitive method",
            "description": "User-controlled bypassing of sensitive methods may allow attackers to avoid passing through authentication systems.",
            "id": "cs/user-controlled-bypass",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-807/ConditionalBypass.ql",
            "problem.severity": "error"
          }
        },
        "cs/sensitive-data-transmission": {
          "id": "cs/sensitive-data-transmission",
          "name": "cs/sensitive-data-transmission",
          "shortDescription": "Information exposure through transmitted data",
          "fullDescription": "Transmitting sensitive information to the user is a potential security risk.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-201"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Information exposure through transmitted data",
            "description": "Transmitting sensitive information to the user is a potential security risk.",
            "id": "cs/sensitive-data-transmission",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-201/ExposureInTransmittedData.ql",
            "problem.severity": "error"
          }
        },
        "cs/inappropriate-encoding": {
          "id": "cs/inappropriate-encoding",
          "name": "cs/inappropriate-encoding",
          "shortDescription": "Inappropriate encoding",
          "fullDescription": "Using an inappropriate encoding may give unintended results and may pose a security risk.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-838"
],
            "kind": "problem",
            "precision": "low",
            "name": "Inappropriate encoding",
            "description": "Using an inappropriate encoding may give unintended results and may pose a security risk.",
            "id": "cs/inappropriate-encoding",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-838/InappropriateEncoding.ql",
            "problem.severity": "error"
          }
        },
        "cs/hardcoded-credentials": {
          "id": "cs/hardcoded-credentials",
          "name": "cs/hardcoded-credentials",
          "shortDescription": "Hard-coded credentials",
          "fullDescription": "Credentials are hard coded in the source code of the application.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-259",
  "external/cwe/cwe-321",
  "external/cwe/cwe-798"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Hard-coded credentials",
            "description": "Credentials are hard coded in the source code of the application.",
            "id": "cs/hardcoded-credentials",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-798/HardcodedCredentials.ql",
            "problem.severity": "error"
          }
        },
        "cs/insecure-randomness": {
          "id": "cs/insecure-randomness",
          "name": "cs/insecure-randomness",
          "shortDescription": "Insecure randomness",
          "fullDescription": "Using a cryptographically weak pseudo-random number generator to generate a security sensitive value may allow an attacker to predict what sensitive value will be generated.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-338"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Insecure randomness",
            "description": "Using a cryptographically weak pseudo-random number generator to generate a security sensitive value may allow an attacker to predict what sensitive value will be generated.",
            "id": "cs/insecure-randomness",
            "query-path": "/semmlecode-csharp-queries/Security Features/InsecureRandomness.ql",
            "problem.severity": "warning"
          }
        },
        "cs/empty-password-in-configuration": {
          "id": "cs/empty-password-in-configuration",
          "name": "cs/empty-password-in-configuration",
          "shortDescription": "Empty password in configuration file",
          "fullDescription": "Finds empty passwords in configuration files.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-258",
  "external/cwe/cwe-862"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Empty password in configuration file",
            "description": "Finds empty passwords in configuration files.",
            "id": "cs/empty-password-in-configuration",
            "query-path": "/semmlecode-csharp-queries/Configuration/EmptyPasswordInConfigurationFile.ql",
            "problem.severity": "warning"
          }
        },
        "cs/information-exposure-through-exception": {
          "id": "cs/information-exposure-through-exception",
          "name": "cs/information-exposure-through-exception",
          "shortDescription": "Information exposure through an exception",
          "fullDescription": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-209",
  "external/cwe/cwe-497"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Information exposure through an exception",
            "description": "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.",
            "id": "cs/information-exposure-through-exception",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-209/ExceptionInformationExposure.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/missing-token-validation": {
          "id": "cs/web/missing-token-validation",
          "name": "cs/web/missing-token-validation",
          "shortDescription": "Missing cross-site request forgery token validation",
          "fullDescription": "Handling a POST request without verifying that the request came from the user allows a malicious attacker to submit a request on behalf of the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-352"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Missing cross-site request forgery token validation",
            "description": "Handling a POST request without verifying that the request came from the user allows a malicious attacker to submit a request on behalf of the user.",
            "id": "cs/web/missing-token-validation",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-352/MissingAntiForgeryTokenValidation.ql",
            "problem.severity": "error"
          }
        },
        "cs/second-order-sql-injection": {
          "id": "cs/second-order-sql-injection",
          "name": "cs/second-order-sql-injection",
          "shortDescription": "SQL query built from stored user-controlled sources",
          "fullDescription": "Building a SQL query from stored user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-089"
],
            "kind": "problem",
            "precision": "medium",
            "name": "SQL query built from stored user-controlled sources",
            "description": "Building a SQL query from stored user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
            "id": "cs/second-order-sql-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-089/SecondOrderSqlInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/unsynchronized-static-access": {
          "id": "cs/unsynchronized-static-access",
          "name": "cs/unsynchronized-static-access",
          "shortDescription": "Unsynchronized access to static collection member in non-static context",
          "fullDescription": "If an unsynchronized access to a static collection member occurs during an addition or resizing operation, an infinite loop can occur.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "concurrency",
  "external/cwe/cwe-362",
  "external/cwe/cwe-567"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Unsynchronized access to static collection member in non-static context",
            "description": "If an unsynchronized access to a static collection member occurs during an addition or resizing operation, an infinite loop can occur.",
            "id": "cs/unsynchronized-static-access",
            "query-path": "/semmlecode-csharp-queries/Concurrency/UnsynchronizedStaticAccess.ql",
            "problem.severity": "error"
          }
        },
        "cs/insufficient-key-size": {
          "id": "cs/insufficient-key-size",
          "name": "cs/insufficient-key-size",
          "shortDescription": "Weak encryption: Insufficient key size",
          "fullDescription": "Finds uses of encryption algorithms with too small a key size",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption: Insufficient key size",
            "description": "Finds uses of encryption algorithms with too small a key size",
            "id": "cs/insufficient-key-size",
            "query-path": "/semmlecode-csharp-queries/Security Features/InsufficientKeySize.ql",
            "problem.severity": "warning"
          }
        },
        "cs/stored-command-line-injection": {
          "id": "cs/stored-command-line-injection",
          "name": "cs/stored-command-line-injection",
          "shortDescription": "Uncontrolled command line from stored user input",
          "fullDescription": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "correctness",
  "security",
  "external/cwe/cwe-078",
  "external/cwe/cwe-088"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Uncontrolled command line from stored user input",
            "description": "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command.",
            "id": "cs/stored-command-line-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-078/StoredCommandInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/ecb-encryption": {
          "id": "cs/ecb-encryption",
          "name": "cs/ecb-encryption",
          "shortDescription": "Encryption using ECB",
          "fullDescription": "Highlights uses of the encryption mode 'CipherMode.ECB'. This mode should normally not be used because it is vulnerable to replay attacks.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Encryption using ECB",
            "description": "Highlights uses of the encryption mode \u0027CipherMode.ECB\u0027. This mode should normally not be used because it is vulnerable to replay attacks.",
            "id": "cs/ecb-encryption",
            "query-path": "/semmlecode-csharp-queries/Security Features/Encryption using ECB.ql",
            "problem.severity": "warning"
          }
        },
        "cs/inadequate-rsa-padding": {
          "id": "cs/inadequate-rsa-padding",
          "name": "cs/inadequate-rsa-padding",
          "shortDescription": "Weak encryption: inadequate RSA padding",
          "fullDescription": "Finds uses of RSA encryption with inadequate padding.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327",
  "external/cwe/cwe-780"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption: inadequate RSA padding",
            "description": "Finds uses of RSA encryption with inadequate padding.",
            "id": "cs/inadequate-rsa-padding",
            "query-path": "/semmlecode-csharp-queries/Security Features/InadequateRSAPadding.ql",
            "problem.severity": "warning"
          }
        },
        "cs/cleartext-storage-of-sensitive-information": {
          "id": "cs/cleartext-storage-of-sensitive-information",
          "name": "cs/cleartext-storage-of-sensitive-information",
          "shortDescription": "Clear text storage of sensitive information",
          "fullDescription": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-312",
  "external/cwe/cwe-315",
  "external/cwe/cwe-359"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Clear text storage of sensitive information",
            "description": "Sensitive information stored without encryption or hashing can expose it to an attacker.",
            "id": "cs/cleartext-storage-of-sensitive-information",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-312/CleartextStorage.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/missing-global-error-handler": {
          "id": "cs/web/missing-global-error-handler",
          "name": "cs/web/missing-global-error-handler",
          "shortDescription": "Missing global error handler",
          "fullDescription": "ASP.NET applications should not set the 'customError' mode to \"off\" without providing a global error handler, otherwise they may leak exception information.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-12",
  "external/cwe/cwe-248"
],
            "kind": "problem",
            "precision": "high",
            "name": "Missing global error handler",
            "description": "ASP.NET applications should not set the \u0027customError\u0027 mode to \"off\" without providing a global error handler, otherwise they may leak exception information.",
            "id": "cs/web/missing-global-error-handler",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-248/MissingASPNETGlobalErrorHandler.ql",
            "problem.severity": "warning"
          }
        },
        "cs/session-reuse": {
          "id": "cs/session-reuse",
          "name": "cs/session-reuse",
          "shortDescription": "Failure to abandon session",
          "fullDescription": "Reusing an existing session as a different user could allow an attacker to access someone else's account by using their session.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-384"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Failure to abandon session",
            "description": "Reusing an existing session as a different user could allow an attacker to access someone else\u0027s account by using their session.",
            "id": "cs/session-reuse",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-384/AbandonSession.ql",
            "problem.severity": "error"
          }
        },
        "cs/password-in-configuration": {
          "id": "cs/password-in-configuration",
          "name": "cs/password-in-configuration",
          "shortDescription": "Password in configuration file",
          "fullDescription": "Finds passwords in configuration files.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-13",
  "external/cwe/cwe-256",
  "external/cwe/cwe-313"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Password in configuration file",
            "description": "Finds passwords in configuration files.",
            "id": "cs/password-in-configuration",
            "query-path": "/semmlecode-csharp-queries/Configuration/PasswordInConfigurationFile.ql",
            "problem.severity": "warning"
          }
        },
        "cs/xml/missing-validation": {
          "id": "cs/xml/missing-validation",
          "name": "cs/xml/missing-validation",
          "shortDescription": "Missing XML validation",
          "fullDescription": "User input should not be processed as XML without validating it against a known schema.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-112"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Missing XML validation",
            "description": "User input should not be processed as XML without validating it against a known schema.",
            "id": "cs/xml/missing-validation",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-112/MissingXMLValidation.ql",
            "problem.severity": "recommendation"
          }
        },
        "cs/web/broad-cookie-domain": {
          "id": "cs/web/broad-cookie-domain",
          "name": "cs/web/broad-cookie-domain",
          "shortDescription": "Cookie security: overly broad domain",
          "fullDescription": "Finds cookies with an overly broad domain.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-287"
],
            "kind": "problem",
            "precision": "high",
            "name": "Cookie security: overly broad domain",
            "description": "Finds cookies with an overly broad domain.",
            "id": "cs/web/broad-cookie-domain",
            "query-path": "/semmlecode-csharp-queries/Security Features/CookieWithOverlyBroadDomain.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/persistent-cookie": {
          "id": "cs/web/persistent-cookie",
          "name": "cs/web/persistent-cookie",
          "shortDescription": "Cookie security: persistent cookie",
          "fullDescription": "Persistent cookies are vulnerable to attacks.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-539"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Cookie security: persistent cookie",
            "description": "Persistent cookies are vulnerable to attacks.",
            "id": "cs/web/persistent-cookie",
            "query-path": "/semmlecode-csharp-queries/Security Features/PersistentCookie.ql",
            "problem.severity": "warning"
          }
        },
        "cs/insecure-xml-read": {
          "id": "cs/insecure-xml-read",
          "name": "cs/insecure-xml-read",
          "shortDescription": "XML is read insecurely",
          "fullDescription": "XML may include dangerous external references, which should be restricted using a secure resolver or disabling DTD processing.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-611",
  "external/cwe/cwe-827",
  "external/cwe/cwe-776"
],
            "kind": "problem",
            "precision": "medium",
            "name": "XML is read insecurely",
            "description": "XML may include dangerous external references, which should be restricted using a secure resolver or disabling DTD processing.",
            "id": "cs/insecure-xml-read",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-611/UseXmlSecureResolver.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/xss": {
          "id": "cs/web/xss",
          "name": "cs/web/xss",
          "shortDescription": "Cross-site scripting",
          "fullDescription": "Writing user input directly to a web page allows for a cross-site scripting vulnerability.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-079",
  "external/cwe/cwe-116"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Cross-site scripting",
            "description": "Writing user input directly to a web page allows for a cross-site scripting vulnerability.",
            "id": "cs/web/xss",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-079/XSS.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/stored-xpath-injection": {
          "id": "cs/xml/stored-xpath-injection",
          "name": "cs/xml/stored-xpath-injection",
          "shortDescription": "Stored XPath injection",
          "fullDescription": "Building an XPath expression from stored data which may have been provided by the user is vulnerable to insertion of malicious code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-643"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Stored XPath injection",
            "description": "Building an XPath expression from stored data which may have been provided by the user is vulnerable to insertion of malicious code by the user.",
            "id": "cs/xml/stored-xpath-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-643/StoredXPathInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/stored-xss": {
          "id": "cs/web/stored-xss",
          "name": "cs/web/stored-xss",
          "shortDescription": "Stored cross-site scripting",
          "fullDescription": "Writing input from the database directly to a web page indicates a cross-site scripting vulnerability if the data was originally user-provided.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-079",
  "external/cwe/cwe-116"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Stored cross-site scripting",
            "description": "Writing input from the database directly to a web page indicates a cross-site scripting vulnerability if the data was originally user-provided.",
            "id": "cs/web/stored-xss",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-079/StoredXSS.ql",
            "problem.severity": "error"
          }
        },
        "cs/resource-injection": {
          "id": "cs/resource-injection",
          "name": "cs/resource-injection",
          "shortDescription": "Resource injection",
          "fullDescription": "Building a resource descriptor from untrusted user input is vulnerable to a malicious user providing an unintended resource.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-099"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Resource injection",
            "description": "Building a resource descriptor from untrusted user input is vulnerable to a malicious user providing an unintended resource.",
            "id": "cs/resource-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-099/ResourceInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/debug-binary": {
          "id": "cs/web/debug-binary",
          "name": "cs/web/debug-binary",
          "shortDescription": "Creating an ASP.NET debug binary may reveal sensitive information",
          "fullDescription": "ASP.NET projects should not produce debug binaries when deploying to production as debug builds provide additional information useful to a malicious attacker.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "maintainability",
  "frameworks/asp.net",
  "external/cwe/cwe-11"
],
            "kind": "problem",
            "precision": "very-high",
            "name": "Creating an ASP.NET debug binary may reveal sensitive information",
            "description": "ASP.NET projects should not produce debug binaries when deploying to production as debug builds provide additional information useful to a malicious attacker.",
            "id": "cs/web/debug-binary",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-011/ASPNetDebug.ql",
            "problem.severity": "warning"
          }
        },
        "cs/stored-ldap-injection": {
          "id": "cs/stored-ldap-injection",
          "name": "cs/stored-ldap-injection",
          "shortDescription": "LDAP query built from stored user-controlled sources",
          "fullDescription": "Building an LDAP query from stored user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-090"
],
            "kind": "problem",
            "precision": "medium",
            "name": "LDAP query built from stored user-controlled sources",
            "description": "Building an LDAP query from stored user-controlled sources is vulnerable to insertion of malicious LDAP code by the user.",
            "id": "cs/stored-ldap-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-090/StoredLDAPInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/code-injection": {
          "id": "cs/code-injection",
          "name": "cs/code-injection",
          "shortDescription": "Improper control of generation of code",
          "fullDescription": "Treating externally controlled strings as code can allow an attacker to execute malicious code.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-094",
  "external/cwe/cwe-095",
  "external/cwe/cwe-096"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Improper control of generation of code",
            "description": "Treating externally controlled strings as code can allow an attacker to execute malicious code.",
            "id": "cs/code-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-094/CodeInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/unvalidated-local-pointer-arithmetic": {
          "id": "cs/unvalidated-local-pointer-arithmetic",
          "name": "cs/unvalidated-local-pointer-arithmetic",
          "shortDescription": "Unvalidated local pointer arithmetic",
          "fullDescription": "Using the result of a virtual method call in pointer arithmetic without validation is dangerous because the method may be overridden by a subtype to return any value.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-119",
  "external/cwe/cwe-120",
  "external/cwe/cwe-122",
  "external/cwe/cwe-788"
],
            "kind": "problem",
            "precision": "high",
            "name": "Unvalidated local pointer arithmetic",
            "description": "Using the result of a virtual method call in pointer arithmetic without validation is dangerous because the method may be overridden by a subtype to return any value.",
            "id": "cs/unvalidated-local-pointer-arithmetic",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-119/LocalUnvalidatedArithmetic.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/missing-x-frame-options": {
          "id": "cs/web/missing-x-frame-options",
          "name": "cs/web/missing-x-frame-options",
          "shortDescription": "Missing X-Frame-Options HTTP header",
          "fullDescription": "If the 'X-Frame-Options' setting is not provided, a malicious user may be able to overlay their own UI on top of the site by using an iframe.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-451",
  "external/cwe/cwe-829"
],
            "kind": "problem",
            "precision": "high",
            "name": "Missing X-Frame-Options HTTP header",
            "description": "If the \u0027X-Frame-Options\u0027 setting is not provided, a malicious user may be able to overlay their own UI on top of the site by using an iframe.",
            "id": "cs/web/missing-x-frame-options",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-451/MissingXFrameOptions.ql",
            "problem.severity": "error"
          }
        },
        "cs/hardcoded-connection-string-credentials": {
          "id": "cs/hardcoded-connection-string-credentials",
          "name": "cs/hardcoded-connection-string-credentials",
          "shortDescription": "Hard-coded connection string with credentials",
          "fullDescription": "Credentials are hard-coded in a connection string in the source code of the application.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-259",
  "external/cwe/cwe-321",
  "external/cwe/cwe-798"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Hard-coded connection string with credentials",
            "description": "Credentials are hard-coded in a connection string in the source code of the application.",
            "id": "cs/hardcoded-connection-string-credentials",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-798/HardcodedConnectionString.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/broad-cookie-path": {
          "id": "cs/web/broad-cookie-path",
          "name": "cs/web/broad-cookie-path",
          "shortDescription": "Cookie security: overly broad path",
          "fullDescription": "Finds cookies with an overly broad path.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-287"
],
            "kind": "problem",
            "precision": "high",
            "name": "Cookie security: overly broad path",
            "description": "Finds cookies with an overly broad path.",
            "id": "cs/web/broad-cookie-path",
            "query-path": "/semmlecode-csharp-queries/Security Features/CookieWithOverlyBroadPath.ql",
            "problem.severity": "warning"
          }
        },
        "cs/weak-encryption": {
          "id": "cs/weak-encryption",
          "name": "cs/weak-encryption",
          "shortDescription": "Weak encryption",
          "fullDescription": "Finds uses of encryption algorithms that are weak and obsolete",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-327"
],
            "kind": "problem",
            "precision": "high",
            "name": "Weak encryption",
            "description": "Finds uses of encryption algorithms that are weak and obsolete",
            "id": "cs/weak-encryption",
            "query-path": "/semmlecode-csharp-queries/Security Features/WeakEncryption.ql",
            "problem.severity": "warning"
          }
        },
        "cs/web/disabled-header-checking": {
          "id": "cs/web/disabled-header-checking",
          "name": "cs/web/disabled-header-checking",
          "shortDescription": "Header checking disabled",
          "fullDescription": "Finds places where header checking is disabled.",
          "defaultLevel": "warning",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-113"
],
            "kind": "problem",
            "precision": "high",
            "name": "Header checking disabled",
            "description": "Finds places where header checking is disabled.",
            "id": "cs/web/disabled-header-checking",
            "query-path": "/semmlecode-csharp-queries/Security Features/HeaderCheckingDisabled.ql",
            "problem.severity": "warning"
          }
        },
        "cs/log-forging": {
          "id": "cs/log-forging",
          "name": "cs/log-forging",
          "shortDescription": "Log entries created from user input",
          "fullDescription": "Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-117"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Log entries created from user input",
            "description": "Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.",
            "id": "cs/log-forging",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-117/LogForging.ql",
            "problem.severity": "error"
          }
        },
        "cs/web/requiressl-not-set": {
          "id": "cs/web/requiressl-not-set",
          "name": "cs/web/requiressl-not-set",
          "shortDescription": "'requireSSL' attribute is not set to true",
          "fullDescription": "Omitting the 'requireSSL' attribute allows data to be transmitted insecurely using HTTP. Always set 'requireSSL' to 'true' to ensure that HTTPS is used at all times.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-319",
  "external/cwe/cwe-614"
],
            "kind": "problem",
            "precision": "high",
            "name": "\u0027requireSSL\u0027 attribute is not set to true",
            "description": "Omitting the \u0027requireSSL\u0027 attribute allows data to be transmitted insecurely using HTTP. Always set \u0027requireSSL\u0027 to \u0027true\u0027 to ensure that HTTPS is used at all times.",
            "id": "cs/web/requiressl-not-set",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-614/RequireSSL.ql",
            "problem.severity": "error"
          }
        },
        "cs/regex-injection": {
          "id": "cs/regex-injection",
          "name": "cs/regex-injection",
          "shortDescription": "Regular expression injection",
          "fullDescription": "User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to provide a regex that could require exponential time on certain inputs.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-730",
  "external/cwe/cwe-400"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Regular expression injection",
            "description": "User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to provide a regex that could require exponential time on certain inputs.",
            "id": "cs/regex-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-730/RegexInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/xml/insecure-dtd-handling": {
          "id": "cs/xml/insecure-dtd-handling",
          "name": "cs/xml/insecure-dtd-handling",
          "shortDescription": "Untrusted XML is read insecurely",
          "fullDescription": "Untrusted XML is read with an insecure resolver and DTD processing enabled.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-611",
  "external/cwe/cwe-827",
  "external/cwe/cwe-776"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Untrusted XML is read insecurely",
            "description": "Untrusted XML is read with an insecure resolver and DTD processing enabled.",
            "id": "cs/xml/insecure-dtd-handling",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-611/UntrustedDataInsecureXml.ql",
            "problem.severity": "error"
          }
        },
        "cs/sql-injection": {
          "id": "cs/sql-injection",
          "name": "cs/sql-injection",
          "shortDescription": "SQL query built from user-controlled sources",
          "fullDescription": "Building a SQL query from user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-089"
],
            "kind": "problem",
            "precision": "medium",
            "name": "SQL query built from user-controlled sources",
            "description": "Building a SQL query from user-controlled sources is vulnerable to insertion of malicious SQL code by the user.",
            "id": "cs/sql-injection",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-089/SqlInjection.ql",
            "problem.severity": "error"
          }
        },
        "cs/redos": {
          "id": "cs/redos",
          "name": "cs/redos",
          "shortDescription": "Denial of Service from comparison of user input against expensive regex",
          "fullDescription": "User input should not be matched against a regular expression that could require exponential time on certain input.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-730",
  "external/cwe/cwe-400"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Denial of Service from comparison of user input against expensive regex",
            "description": "User input should not be matched against a regular expression that could require exponential time on certain input.",
            "id": "cs/redos",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-730/ReDoS.ql",
            "problem.severity": "error"
          }
        },
        "cs/exposure-of-sensitive-information": {
          "id": "cs/exposure-of-sensitive-information",
          "name": "cs/exposure-of-sensitive-information",
          "shortDescription": "Exposure of private information",
          "fullDescription": "If private information is written to an external location, it may be accessible by unauthorized persons.",
          "defaultLevel": "error",
          "properties": {
            "tags": [
  "security",
  "external/cwe/cwe-359"
],
            "kind": "problem",
            "precision": "medium",
            "name": "Exposure of private information",
            "description": "If private information is written to an external location, it may be accessible by unauthorized persons.",
            "id": "cs/exposure-of-sensitive-information",
            "query-path": "/semmlecode-csharp-queries/Security Features/CWE-359/ExposureOfPrivateInformation.ql",
            "problem.severity": "error"
          }
        }
      },
      "properties": {
        "originalUriBaseIds": {
  "%SRCROOT%": "file:///C:/corefx/src/System.Private.Xml/"
}
      }
    }
  ]
}