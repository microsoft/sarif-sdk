<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ReportDefinition type="xml">
    <TemplateName>Fortify Security Report</TemplateName>
    <TemplatePath></TemplatePath>
    <LogoPath>/fortify.jpg</LogoPath>
    <Footnote>Copyright 2014 Fortify Software Inc.</Footnote>
    <UserName>wenkec</UserName>
    <ReportSection optionalSubsections="false" enabled="true">
        <Title>Executive Summary</Title>
        <SubSection enabled="true">
            <Title>Issues Overview</Title>
            <Description>This section provides an overview of the issues uncovered during analysis. The report covers a summary of vulnerability categories discovered by the tool. The auditor should augment this section with higher-level conclusions derived from human review of the application (including architecture reviews,	black-box testing, compliance issues, etc.)</Description>
            <Text>On Aug 28, 2014, a source code review was performed over the bannedAPIs_m code base. 8 files, 139 LOC (Executable) were scanned and reviewed for defects that could lead to potential security vulnerabilities. A total of 132 reviewed findings were uncovered during the analysis.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Issue Summary by Fortify Priority Order</Title>
            <Description>A table summarizing the number of issues found and the breakdown of issues in each Fortify Priority Level</Description>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>Fortify Priority Order</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="101">
                        <groupTitle>High</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="18">
                        <groupTitle>Low</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="13">
                        <groupTitle>Critical</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
        <SubSection enabled="true">
            <Title>Recommendations and Conclusions</Title>
            <Description>This section gives some high-level recommendations on remediating the issues discussed in the Issues Summary sub section. Recommendations will vary based on deployment scenarios, risk appetite, and existing mitigating strategies. The auditor should supplement the Fortify generic recommendations with specific information that takes into account the application specific variables.</Description>
            <Text>The Issues Category section provides Fortify recommendations for addressing issues at a generic level.  The recommendations for specific fixes can be extrapolated from those generic recommendations by the development group.</Text>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="true" enabled="true">
        <Title>Project Summary</Title>
        <SubSection enabled="true">
            <Title>Code Base Summary</Title>
            <Description>Summary of the Codebase that was analyzed</Description>
            <Text>Code location: /Users/wenkec/tmp&#xD;
Number of Files: 8&#xD;
Lines of Code: 139&#xD;
Build Label: &lt;No Build Label&gt;</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Scan Information</Title>
            <Description>Details of the analysis</Description>
            <Text>Scan time: 00:16&#xD;
SCA Engine version: 6.10.0065&#xD;
Machine Name: DAWN&#xD;
Username running scan: wenkec</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Results Certification</Title>
            <Description>A full summary of the Results Certification for this project</Description>
            <Text>Results Certification Valid&#xD;
&#xD;
Details:&#xD;
&#xD;
Results Signature:

	SCA Analysis Results has Valid signature
	

Rules Signature:

	There were no custom rules used in this scan</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Attack Surface</Title>
            <Description>A full summary of the attack surface for this project</Description>
            <Text>Attack Surface:&#xD;
</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Filter Set Summary</Title>
            <Description>A brief summary of the filterset used to create this report</Description>
            <Text>Current Enabled Filter Set:&#xD;
Security Auditor View&#xD;
&#xD;
Filter Set Details:&#xD;
&#xD;
Folder Filters:
If [fortify priority order] contains critical Then set folder to Critical
If [fortify priority order] contains high Then set folder to High
If [fortify priority order] contains medium Then set folder to Medium
If [fortify priority order] contains low Then set folder to Low</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Audit Guide Summary</Title>
            <Description>Summary of the impact of the audit guide</Description>
            <Text>Audit guide not enabled</Text>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="true" enabled="true">
        <Title>Results Outline</Title>
        <SubSection enabled="true">
            <Title>Overall number of results</Title>
            <Description>Results count</Description>
            <Text>The scan found 132 issues.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Vulnerability Examples by Category</Title>
            <Description>Results summary for critical and high priority issues.  Vulnerability examples are provided by category.</Description>
            <IssueListing externalCategoryType="CWE" limit="-1" listing="true">
                <Refinement>[fortify priority order]:critical OR [fortify priority order]:high</Refinement>
                <Chart chartType="list">
                    <Axis>CWE</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="1">
                        <groupTitle>CWE ID 476</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The program can potentially dereference a null pointer, thereby causing a segmentation fault.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Null pointer exceptions usually occur when one or more of the programmer's assumptions is violated. A dereference-after-store error occurs when a program explicitly sets a pointer to null and dereferences it later. This error is often the result of a programmer initializing a variable to null when it is declared.


Most null pointer issues result in general software reliability problems, but if an attacker can intentionally trigger a null pointer dereference, the attacker might be able to use the resulting exception to bypass security logic or to cause the application to reveal debugging information that will be valuable in planning subsequent attacks.
 
Example: In the following code, the programmer explicitly sets the variable ptr to NULL. Later, the programmer dereferences ptr before checking the object for a null value.


*ptr = NULL;
...
ptr-&gt;field = val;
...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Implement careful checks before dereferencing objects that might be null. When possible, abstract null checks into wrappers around code that manipulates resources to ensure that they are applied in all cases and to minimize the places where mistakes can occur.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="FDE123D1-00F8-A0F5-E54C-B20080EE8025" iid="30C5553B949CCCBFDA3AEF5D98E90CC4">
                            <Category>Null Dereference</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The function MiscTests() in bannedAPIs.m can crash the program by dereferencing a null pointer on line 172.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>172</LineStart>
<Snippet>
        for (int i = countApis; --i &gt;= 0;) {
            free(bannedApis[i]);
        }
        free(bannedApis);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 476</ExternalCategory>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>CWE ID 242</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Functions that cannot be used safely should never be used.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. 



The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Functions that cannot be used safely should never be used. If any of these functions occur in new or legacy code, they must be removed and replaced with safe counterparts.

Assuming that the variable buf is a locally declared character array, replace all calls to gets(buf)with fgets(buf, sizeof(buf), stdin) or the C++ &gt;&gt; operator from a stream to a standard C++ string, like this: cin &gt;&gt; str. Be cautious! Using the same operator to read into a C-style char* string carries the same risk of buffer overflow as gets().</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. On Windows, less secure functions like strcpy() can be replaced with their more secure versions, such as strcpy_s(). However, this still needs to be done with caution. Because parameter validation provided by the _s family of functions varies, relying on it can lead to unexpected behavior. Furthermore, incorrectly specifying the size of the destination buffer can still result in buffer overflows and null termination errors.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="EEFB450A-D737-4022-B6C6-CA5DDDFC2847" iid="23A9EC956EBD4DE3265979412C99C399">
                            <Category>Dangerous Function</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>The function gets() cannot be used safely.  It should not be used.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>243</LineStart>
<Snippet>    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);

    (void)gets(buffer0);
#if defined(_MSC_VER)
    (void)_getws(buffer4);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 242</ExternalCategory>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="9">
                        <groupTitle>CWE ID 134, CWE ID 787</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>The program uses an improperly bounded format string, allowing it to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Buffer overflow is probably the best known form of software security vulnerability. Most software developers know what a buffer overflow vulnerability is, but buffer overflow attacks against both legacy and newly-developed applications are still quite common. Part of the problem is due to the wide variety of ways buffer overflows can occur, and part is due to the error-prone techniques often used to prevent them.

In a classic buffer overflow exploit, the attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function's return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker's data.

Although this type of stack buffer overflow is still common on some platforms and in some development communities, there are a variety of other types of buffer overflow, including heap buffer overflows and off-by-one errors among others. There are a number of excellent books that provide detailed information on how buffer overflow attacks work, including Building Secure Software [1], Writing Secure Code [2], and The Shellcoder's Handbook [3]. 

At the code level, buffer overflow vulnerabilities usually involve the violation of a programmer's assumptions. Many memory manipulation functions in C and C++ do not perform bounds checking and can easily exceed the allocated bounds of the buffers they operate upon. Even bounded functions, such as strncpy(), can cause vulnerabilities when used incorrectly. The combination of memory manipulation and mistaken assumptions about the size or makeup of a piece of data is the root cause of most buffer overflows.

In this case, an improperly constructed format string causes the program to write beyond the bounds of allocated memory. 

Example: The following code overflows c because the double type requires more space than is allocated for c. 


void formatString(double d) {
    char c;

    scanf(&quot;%d&quot;, &amp;c)
} 
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Although the careful use of bounded functions can greatly reduce the risk of buffer overflow, this migration cannot be done blindly and does not go far enough on its own to ensure security. Whenever you manipulate memory, especially strings, remember that buffer overflow vulnerabilities typically occur in code that:

- Relies on external data to control its behavior.

- Depends upon properties of the data that are enforced outside of the immediate scope of the code.

- Is so complex that a programmer cannot accurately predict its behavior.

Additionally, consider the following principles:

- Never trust an external source to provide correct control information to a memory operation. 

- Never trust that properties about the data your program is manipulating will be maintained throughout the program. Sanity check data before you operate on it.

- Limit the complexity of memory manipulation and bounds-checking code. Keep it simple and clearly document the checks you perform, the assumptions that you test, and what the expected behavior of the program is in the case that input validation fails.

- When input data is too large, be leery of truncating the data and continuing to process it. Truncation can change the meaning of the input.

- Do not rely on tools, such as StackGuard, or non-executable stacks to prevent buffer overflow vulnerabilities. These approaches do not address heap buffer overflows and the more subtle stack overflows that can change the contents of variables that control the program. Additionally, many of these approaches are easily defeated, and even when they are working properly, they address the symptom of the problem and not its cause.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. On Windows, less secure functions like memcpy() can be replaced with their more secure versions, such as memcpy_s(). However, this still needs to be done with caution. Because parameter validation provided by the _s family of functions varies, relying on it can lead to unexpected behavior. Furthermore, incorrectly specifying the size of the destination buffer can still result in buffer overflows.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>9</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="BC721B0CA607643167C1FCF97A99049C">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to sscanf() at bannedAPIs.m line 240 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>240</LineStart>
<Snippet>    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);
</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="BC721B0CA607643167C1FCF97A99049D">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to sscanf() at bannedAPIs.m line 240 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>240</LineStart>
<Snippet>    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);
</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="66E83DC8F1956DE5D779F9F4CBFEA340">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to fscanf() at bannedAPIs.m line 238 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="F073D447A2825E29187509EFD3B86C65">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to scanf() at bannedAPIs.m line 236 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="F073D447A2825E29187509EFD3B86C66">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to scanf() at bannedAPIs.m line 236 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="6EDB6A8159343D7A730F8DA7AA953109">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to vscanf() at bannedAPIs.m line 254 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>254</LineStart>
<Snippet>    va_start(vargs, wcsFmt);

    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="66E83DC8F1956DE5D779F9F4CBFEA33F">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to fscanf() at bannedAPIs.m line 238 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="EDF54498D1601A642A13590D0AF7CDF0">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to vfscanf() at bannedAPIs.m line 256 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>256</LineStart>
<Snippet>    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="106ACD32-BCE5-019C-A10F-D428242D6421" iid="B3851112605215EF7EE293C01F52625C">
                            <Category>Buffer Overflow: Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The format string argument to vsscanf() at bannedAPIs.m line 258 does not properly limit the amount of data the function can write, which allows the program to write outside the bounds of allocated memory. This behavior could corrupt data, crash the program, or lead to the execution of malicious code</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>258</LineStart>
<Snippet>    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);
</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 134, CWE ID 787</ExternalCategory>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="89">
                        <groupTitle>CWE ID 134</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Allowing an attacker to control a function's format string can result in a buffer overflow.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Format string vulnerabilities occur when:

1. Data enters the application from an untrusted source.



2. The data is passed as the format string argument to a function like sprintf(), FormatMessageW(), or syslog().


Example 1: The following code copies a command line argument into a buffer using snprintf(). 


int main(int argc, char **argv){
	char buf[128];
	...
	snprintf(buf,128,argv[1]);
}
 

This code allows an attacker to view the contents of the stack and write to the stack using a command line argument containing a sequence of formatting directives. The attacker can read from the stack by providing more formatting directives, such as %x, than the function takes as arguments to be formatted. (In this example, the function takes no arguments to be formatted.) By using the %n formatting directive, the attacker can write to the stack, causing snprintf() to write the number of bytes output thus far to the specified argument (rather than reading a value from the argument, which is the intended behavior). A sophisticated version of this attack will use four staggered writes to completely control the value of a pointer on the stack.

Example 2: Certain implementations make more advanced attacks even easier by providing format directives that control the location in memory to read from or write to. An example of these directives is shown in the following code, written for glibc:


	printf(&quot;%d %d %1$d %1$d\n&quot;, 5, 9);


This code produces the following output:


5 9 5 5


It is also possible to use half-writes (%hn) to accurately control arbitrary DWORDS in memory, which greatly reduces the complexity needed to execute an attack that would otherwise require four staggered writes, such as the one mentioned in Example 1.  

Example 3: Simple format string vulnerabilities often result from seemingly innocuous shortcuts. The use of some such shortcuts is so ingrained that programmers might not even realize that the function they are using expects a format string argument. 

For example, the syslog() function is sometimes used as follows:


	...
syslog(LOG_ERR, cmdBuf);
	...


Because the second parameter to syslog() is a format string, any formatting directives included in cmdBuf are interpreted as described in Example 1. 

The following code shows a correct usage of syslog():


	...
 	syslog(LOG_ERR, &quot;%s&quot;, cmdBuf);
...
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Whenever possible, pass static format strings to functions that accept a format string argument. If format strings must be constructed dynamically, define a set of valid format strings and make selections from this safe set. Finally, always verify that the number of formatting directives in the selected format string corresponds to the number of arguments to be formatted.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>89</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="BDC8FC3C5AAE67B07F46EC48B928AA6E">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="F4EAD2528E3175B5202ADCFFED7C1FA0">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="8893BCF1861EC9CF1A98B85B0E953FD7">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="A0B07FC1302B5E5E37E0C8E0505C2F53">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fwprintf() at bannedAPIs.m line 205, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>205</LineStart>
<Snippet>
    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);
    (void)fwprintf(stdout, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="3806636845C687DD3D898C7687DF6047">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="75E96A16B6963CB20C667DDDE99FA4EC">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="079F0BA2AF3FD6DE8D3044AAA2EC0976">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="E2F4654ECCD989CC6542178BAF661260">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="B7273D0D158330965C761515BD294F48">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>243</LineStart>
<Snippet>    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);

    (void)gets(buffer0);
#if defined(_MSC_VER)
    (void)_getws(buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="B61201418FA0655BB2B63FA66FBE5DA2">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>243</LineStart>
<Snippet>    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);

    (void)gets(buffer0);
#if defined(_MSC_VER)
    (void)_getws(buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="E538381D55AF9DF1C2B83DEB26C17057">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="904355449876787C23BBEFFCC3652FD8">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="9E7020B20F73EB80C1B9E8FFD1698E43">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="36D0CE5DFDCF68A4211DD991DF297401">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="59DDA3BCFAC68E8CE5F87A3410D1E4C5">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="52C8C29C09C50723F93C057876945289">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to wprintf() at bannedAPIs.m line 204, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>204</LineStart>
<Snippet>    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);

    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="9A97F79B12F672BB124D767DA1A39A50">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="BFB0F10810A1DA7A3C0565CB3558333F">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="47510283C86CAE3258A4116864B27A61">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="82731CC5FB8AC8C7982CF7CEC49EE3A2">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="27BAADAEA67E3A01F374F982944504CC">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="EF88307D8F6E4FEC828F7D03963E8CCB">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="344BBA91D5E184883A40424532EE84E4">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="B55FE3672FC2A0E466693855B5FE0815">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>243</LineStart>
<Snippet>    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);

    (void)gets(buffer0);
#if defined(_MSC_VER)
    (void)_getws(buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="5D50AA0FEB1A20778BFB7E4347D76973">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="E37E8EFAFB4F6703FEF354C1D3957A31">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fwprintf() at bannedAPIs.m line 205, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>205</LineStart>
<Snippet>
    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);
    (void)fwprintf(stdout, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="B91BE4B2A10F34298E592DF1EB4D566A">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="19FE9DA1DE9428F0751A2552B44AB7D3">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="10E19E731065F10BDAAF98F8095ED514">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="2006F3F3FB10F19706D5D7D6013DD9A2">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="47510283C86CAE3258A4116864B27A62">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="8D675A9184E5EE999DA1230CFCA31FF2">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="F4EAD2528E3175B5202ADCFFED7C1FA1">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="F221C74F42779C7186A4B108AD32C9A9">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="52C8C29C09C50723F93C05787694528A">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to wprintf() at bannedAPIs.m line 204, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>204</LineStart>
<Snippet>    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);

    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="44156512276E1548B5509F94381EACA4">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="88A313BC2B1970AD9A72CDE6984F1D7D">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fwprintf() at bannedAPIs.m line 205, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>205</LineStart>
<Snippet>
    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);
    (void)fwprintf(stdout, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="0E8A2FECC2E40403211DA7125B360CFA">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="E64D9B15CDE12302F1E0BC7E4F81CC8D">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="BD1FA971642E27B8F6132EC97E3B9974">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="59DDA3BCFAC68E8CE5F87A3410D1E4C4">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="A33A049936ACEF1BBBE88CCA4297473B">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="F6D5C779C9BAA9FA70BB308389F9FB1F">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fwprintf() at bannedAPIs.m line 205, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>205</LineStart>
<Snippet>
    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);
    (void)fwprintf(stdout, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="EDDF4F65D3BED2F29F48521FCCB64F0A">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="BC044DF5332F926B896F8936F416D6E8">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="AB102E292739E6A26083D04E771F90C2">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="39C90BE84174878645162127D2EEF7A5">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="7BEDDF5666EB0F4E889F65731A58D2D7">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="ED8F0F4C67561029F8075C463B097306">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>243</LineStart>
<Snippet>    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);

    (void)gets(buffer0);
#if defined(_MSC_VER)
    (void)_getws(buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="9571D01CEF126F0AC62DECA8C9948D51">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>243</LineStart>
<Snippet>    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);

    (void)gets(buffer0);
#if defined(_MSC_VER)
    (void)_getws(buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="A0B07FC1302B5E5E37E0C8E0505C2F52">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fwprintf() at bannedAPIs.m line 205, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>205</LineStart>
<Snippet>
    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);
    (void)fwprintf(stdout, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="3B1A3BF8E84286E49AE14B93537A3815">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to wprintf() at bannedAPIs.m line 204, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>204</LineStart>
<Snippet>    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);

    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="6D6B130BB95150D28C0EA0989F13B76C">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="44063AE6F90F88C349BC8348AC04F43C">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to wprintf() at bannedAPIs.m line 204, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>204</LineStart>
<Snippet>    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);

    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="40AA064CA5E749DAD9888A9590EB96CD">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="26AEAC68BBF988FED92D872810DAA0A2">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="EDAE315A9552940016EF8C009A0CD659">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="B33A31E8B58A12691BC68729582F6E50">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="247C4B8ADE15F1B4B50C0C8C1FADC70C">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="E27AB6F7D5CB058B498C2829C7C4A2C0">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="1467EABFD44A49CF856C06F03477ACA8">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="4E16D65621351C2E580DB210E77F62CD">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to wprintf() at bannedAPIs.m line 204, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>204</LineStart>
<Snippet>    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);

    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="19CCD2C8F0E97A3E2CE5AEE97B9E7F30">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="236007A7E2324B82AAE44CC2CC25F4BA">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="7925DB4016AE4B1174FC0EC71869F815">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>243</LineStart>
<Snippet>    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);

    (void)gets(buffer0);
#if defined(_MSC_VER)
    (void)_getws(buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="AA424588C1A8B265AF06B431DF09326B">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="96D9D7CBC80B6B14ABAC9D07B2DB1E3C">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="84E9E10DEB89A40B0B597E654EBD3E45">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwprintf() at bannedAPIs.m line 225, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>225</LineStart>
<Snippet>    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);

    (void)vsprintf(buffer1, strFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="330A5219AFAD58232673BDC844F05F8C">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7DDEC64A-9142-4943-BB5C-57D6F09C94DC" iid="7C71422FF16A25931644F5B63BE22B79">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fwprintf() at bannedAPIs.m line 205, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>205</LineStart>
<Snippet>
    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);
    (void)fwprintf(stdout, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="A26FD1A933E9A17CE78C14E08C2A94D8">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="349E661BC9DAB17F2B943A6FF0734FC0">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="F943FA9002D0649DE86DD64585CABCF6">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="079F0BA2AF3FD6DE8D3044AAA2EC0975">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="62A32C7373CBDA644946AB9FC29ED44E">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="BFB0F10810A1DA7A3C0565CB35583340">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="2C723B1BE13419DE1EE73755B963A151">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="369F89B3A439BA2AF8F1855325039376">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="2736DA7D7ACC4048BDEE38D4A10F4D76">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="E71FA539B5E6073AAF585E88BCB22F5D">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="8D675A9184E5EE999DA1230CFCA31FF1">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vfwscanf() at bannedAPIs.m line 257, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>257</LineStart>
<Snippet>    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="3D0258A36CF9480EE83ED0FF720CE317">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to wprintf() at bannedAPIs.m line 204, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>204</LineStart>
<Snippet>    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);

    (void)wprintf(buffer5);
    (void)fwprintf(stdout, buffer5);
    (void)wprintf(wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="D0991BE7-E419-42F1-B543-9449ECFE60DC" iid="0AED1B3043F4DD47AE27EF691675B9FF">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwprintf() at bannedAPIs.m line 223, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>223</LineStart>
<Snippet>
    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);
    (void)vfwprintf(stderr, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="69EFBD2A-C88E-4950-AEA4-DB775BD7732B" iid="8D5D851CB3B5F07CF87266C1557F5356">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vwscanf() at bannedAPIs.m line 255, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>255</LineStart>
<Snippet>
    (void)vscanf(strFmt, vargs);
    (void)vwscanf(wcsFmt, vargs);
    (void)vfscanf(stdin, strFmt, vargs);
    (void)vfwscanf(stdin, wcsFmt, vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>243</LineStart>
<Snippet>    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);

    (void)gets(buffer0);
#if defined(_MSC_VER)
    (void)_getws(buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="9660AD8BC1959880FD17723FA06BCCBC">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="349E661BC9DAB17F2B943A6FF0734FC1">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B6445DB1-42D0-4025-B4A9-071A23DCED66" iid="175D03E66213F6F75A01CBDCB0AE3EB9">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to fprintf() at bannedAPIs.m line 200, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>200</LineStart>
<Snippet>{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="B5084B1B-0E81-4C22-8B55-3CD558799A08" iid="1AC9B8150ED658E10BC361EF320AF5E9">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to printf() at bannedAPIs.m line 199, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>199</LineStart>
<Snippet>void PrintfTests()
{
    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                        <Issue ruleID="7D0A4A12-F436-463D-BAB1-157A3F9D8116" iid="E22B697F1D4A2D0FF91C3F01B3226781">
                            <Category>Format String</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>An attacker can control the format string argument to vswscanf() at bannedAPIs.m line 259, allowing an attack much like a buffer overflow.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>259</LineStart>
<Snippet>    (void)vfwscanf(stdin, wcsFmt, vargs);
    (void)vsscanf(NULL, strFmt, vargs);
    (void)vswscanf(NULL, wcsFmt, vargs);

    va_end(vargs);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 134</ExternalCategory>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>CWE ID 126</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value> The program uses an improperly constructed format string that contains a different number of conversion specifiers than the function has arguments. Incorrect format strings can lead the program to read data outside the bounds of allocated memory, which can allow access to sensitive information, introduce incorrect behavior, or crash the program. 
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Buffer overflow is probably the best known form of software security vulnerability. Most software developers know what a buffer overflow vulnerability is, but buffer overflow attacks against both legacy and newly-developed applications are still quite common. Part of the problem is due to the wide variety of ways buffer overflows can occur, and part is due to the error-prone techniques often used to prevent them.

In a classic buffer overflow exploit, the attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function's return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker's data.

Although this type of stack buffer overflow is still common on some platforms and in some development communities, there are a variety of other types of buffer overflow, including heap buffer overflows and off-by-one errors among others. There are a number of excellent books that provide detailed information on how buffer overflow attacks work, including Building Secure Software [1], Writing Secure Code [2], and The Shellcoder's Handbook [3]. 

At the code level, buffer overflow vulnerabilities usually involve the violation of a programmer's assumptions. Many memory manipulation functions in C and C++ do not perform bounds checking and can easily exceed the allocated bounds of the buffers they operate upon. Even bounded functions, such as strncpy(), can cause vulnerabilities when used incorrectly. The combination of memory manipulation and mistaken assumptions about the size or makeup of a piece of data is the root cause of most buffer overflows.

In this case, an improperly constructed format string causes the program to access values outside the bounds of allocated memory. 

Example: The following reads arbitrary values from the stack because the number of format specifiers does not align with the number of arguments passed to the function.  

void wrongNumberArgs(char *s, float f, int d) {
   char buf[1024];
   sprintf(buf, &quot;Wrong number of %.512s&quot;);
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Although the careful use of bounded functions can greatly reduce the risk of buffer overflow, this migration cannot be done blindly and does not go far enough on its own to ensure security. Whenever you manipulate memory, especially strings, remember that buffer overflow vulnerabilities typically occur in code that:

- Relies on external data to control its behavior.

- Depends upon properties of the data that are enforced outside of the immediate scope of the code.

- Is so complex that a programmer cannot accurately predict its behavior.

Additionally, consider the following principles:

- Never trust an external source to provide correct control information to a memory operation. 

- Never trust that properties about the data your program is manipulating will be maintained throughout the program. Sanity check data before you operate on it.

- Limit the complexity of memory manipulation and bounds-checking code. Keep it simple and clearly document the checks you perform, the assumptions that you test, and what the expected behavior of the program is in the case that input validation fails.

- When input data is too large, be leery of truncating the data and continuing to process it. Truncation can change the meaning of the input.

- Do not rely on tools, such as StackGuard, or non-executable stacks to prevent buffer overflow vulnerabilities. These approaches do not address heap buffer overflows and the more subtle stack overflows that can change the contents of variables that control the program. Additionally, many of these approaches are easily defeated, and even when they are working properly, they address the symptom of the problem and not its cause.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="EB41B05A-F725-4662-8868-2EEA9D7589CA" iid="B20E17F4A2B9C7A437696F31D05FD4A6">
                            <Category>Format String: Argument Number Mismatch</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract> The program uses an improperly constructed format string that contains a different number of conversion specifiers than the function has arguments. Incorrect format strings can lead the program to read data outside the bounds of allocated memory, which can allow access to sensitive information, introduce incorrect behavior, or crash the program. 
</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>222</LineStart>
<Snippet>    va_start(vargs, wcsFmt);

    (void)vprintf(strFmt, vargs);
    (void)vwprintf(wcsFmt, vargs);
    (void)vfprintf(stderr, strFmt, vargs);</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 126</ExternalCategory>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>CWE ID 125, CWE ID 787</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value> The program uses an improperly constructed format string that contains conversion specifiers that do not align with the types of the arguments passed to the function. Incorrect format strings can lead the program to convert values incorrectly and potentially read or write outside the bounds of allocated memory, which can introduce incorrect behavior or crash the program. 
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Buffer overflow is probably the best known form of software security vulnerability. Most software developers know what a buffer overflow vulnerability is, but buffer overflow attacks against both legacy and newly-developed applications are still quite common. Part of the problem is due to the wide variety of ways buffer overflows can occur, and part is due to the error-prone techniques often used to prevent them.

In a classic buffer overflow exploit, the attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function's return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker's data.

Although this type of stack buffer overflow is still common on some platforms and in some development communities, there are a variety of other types of buffer overflow, including heap buffer overflows and off-by-one errors among others. There are a number of excellent books that provide detailed information on how buffer overflow attacks work, including Building Secure Software [1], Writing Secure Code [2], and The Shellcoder's Handbook [3]. 

At the code level, buffer overflow vulnerabilities usually involve the violation of a programmer's assumptions. Many memory manipulation functions in C and C++ do not perform bounds checking and can easily exceed the allocated bounds of the buffers they operate upon. Even bounded functions, such as strncpy(), can cause vulnerabilities when used incorrectly. The combination of memory manipulation and mistaken assumptions about the size or makeup of a piece of data is the root cause of most buffer overflows.

In this case, an improperly constructed format string causes the program to improperly convert data values or to access values outside the bounds of allocated memory. 

Example: The following code incorrectly converts f from a float using a %d format specifier.  


void ArgTypeMismatch(float f, int d, char *s, wchar *ws) {
   char buf[1024];
   sprintf(buf, &quot;Wrong type of %d&quot;, f); 
   ...
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Although the careful use of bounded functions can greatly reduce the risk of buffer overflow, this migration cannot be done blindly and does not go far enough on its own to ensure security. Whenever you manipulate memory, especially strings, remember that buffer overflow vulnerabilities typically occur in code that:

- Relies on external data to control its behavior.

- Depends upon properties of the data that are enforced outside of the immediate scope of the code.

- Is so complex that a programmer cannot accurately predict its behavior.

Additionally, consider the following principles:

- Never trust an external source to provide correct control information to a memory operation. 

- Never trust that properties about the data your program is manipulating will be maintained throughout the program. Sanity check data before you operate on it.

- Limit the complexity of memory manipulation and bounds-checking code. Keep it simple and clearly document the checks you perform, the assumptions that you test, and what the expected behavior of the program is in the case that input validation fails.

- When input data is too large, be leery of truncating the data and continuing to process it. Truncation can change the meaning of the input.

- Do not rely on tools, such as StackGuard, or non-executable stacks to prevent buffer overflow vulnerabilities. These approaches do not address heap buffer overflows and the more subtle stack overflows that can change the contents of variables that control the program. Additionally, many of these approaches are easily defeated, and even when they are working properly, they address the symptom of the problem and not its cause.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>1</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="CCA278AC-24B7-4482-8B9F-EA7BF0A5ECDE" iid="9B64D2BB197A4616AA23A98041CF1618">
                            <Category>Format String: Argument Type Mismatch</Category>
                            <Folder>High</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract> The program uses an improperly constructed format string that contains conversion specifiers that do not align with the types of the arguments passed to the function. Incorrect format strings can lead the program to convert values incorrectly and potentially read or write outside the bounds of allocated memory, which can introduce incorrect behavior or crash the program. 
</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>201</LineStart>
<Snippet>    (void)printf(buffer0);
    (void)fprintf(stdout, buffer0);
    (void)printf(asciiStringFormat, buffer0, buffer4);
    (void)fprintf(stdout, asciiStringFormat, buffer0, buffer4);
</Snippet>
                            </Primary>
                            <ExternalCategory type="CWE">CWE ID 125, CWE ID 787</ExternalCategory>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="12">
                        <groupTitle>CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Writing outside the bounds of a block of allocated memory can corrupt data, crash the program, or cause the execution of malicious code.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Buffer overflow is probably the best known form of software security vulnerability. Most software developers know what a buffer overflow vulnerability is, but buffer overflow attacks against both legacy and newly-developed applications are still quite common. Part of the problem is due to the wide variety of ways buffer overflows can occur, and part is due to the error-prone techniques often used to prevent them.
    
In a classic buffer overflow exploit, the attacker sends data to a program, which it stores in an undersized stack buffer. The result is that information on the call stack is overwritten, including the function's return pointer. The data sets the value of the return pointer so that when the function returns, it transfers control to malicious code contained in the attacker's data.

Although this type of stack buffer overflow is still common on some platforms and in some development communities, there are a variety of other types of buffer overflow, including heap buffer overflows and off-by-one errors among others. There are a number of excellent books that provide detailed information on how buffer overflow attacks work, including Building Secure Software [1], Writing Secure Code [2], and The Shellcoder's Handbook [3]. 

At the code level, buffer overflow vulnerabilities usually involve the violation of a programmer's assumptions. Many memory manipulation functions in C and C++ do not perform bounds checking and can easily overwrite the allocated bounds of the buffers they operate upon. Even bounded functions, such as strncpy(), can cause vulnerabilities when used incorrectly. The combination of memory manipulation and mistaken assumptions about the size or makeup of a piece of data is the root cause of most buffer overflows.

Buffer overflow vulnerabilities typically occur in code that:

- Relies on external data to control its behavior.

- Depends upon properties of the data that are enforced outside of the immediate scope of the code.

- Is so complex that a programmer cannot accurately predict its behavior.



The following examples demonstrate all three of the scenarios.

Example 1.a: The following sample code demonstrates a simple buffer overflow that is often caused by the first scenario in which the code  relies on external data to control its behavior. The code uses the gets() function to read an arbitrary amount of data into a stack buffer. Because there is no way to limit the amount of data read by this function, the safety of the code depends on the user to always enter fewer than BUFSIZE characters.


	...
	char buf[BUFSIZE]; 
	gets(buf);
	...


Example 1.b: This example shows how easy it is to mimic the unsafe behavior of the gets() function in C++ by using the &gt;&gt; operator to read input into a char[] string. 


	...
	char buf[BUFSIZE]; 
	cin &gt;&gt; (buf);
	...


Example 2: The code in this example also relies on user input to control its behavior, but it adds a level of indirection with the use of the bounded memory copy function memcpy(). This function accepts a destination buffer, a source buffer, and the number of bytes to copy. The input buffer is filled by a bounded call to read(), but the user specifies the number of bytes that memcpy() copies.


	...
char buf[64], in[MAX_SIZE];
printf(&quot;Enter buffer contents:\n&quot;);
read(0, in, MAX_SIZE-1);
printf(&quot;Bytes to copy:\n&quot;);
scanf(&quot;%d&quot;, &amp;bytes);
memcpy(buf, in, bytes);
	... 


Note: This type of buffer overflow vulnerability (where a program reads data and then trusts a value from the data in subsequent memory operations on the remaining data) has turned up with some frequency in image, audio, and other file processing libraries. 
	
Example 3: This is an example of the second scenario in which the code depends on properties of the data that are not verified locally. In this example a function named lccopy() takes a string as its argument and returns a heap-allocated copy of the string with all uppercase letters converted to lowercase. The function performs no bounds checking on its input because it expects str to always be smaller than BUFSIZE. If an attacker bypasses checks in the code that calls lccopy(), or if a change in that code makes the assumption about the size of str untrue, then lccopy() will overflow buf with the unbounded call to strcpy().


char *lccopy(const char *str) {
	char buf[BUFSIZE];
	char *p;

	strcpy(buf, str);
	for (p = buf; *p; p++) {
		if (isupper(*p)) {
			*p = tolower(*p);
		}
	}	
	return strdup(buf);
}


Example 4: The following code demonstrates the third scenario in which the code is so complex its behavior cannot be easily predicted. This code is from the popular libPNG image decoder, which is used by a wide array of applications, including Mozilla and some versions of Internet Explorer. 

The code appears to safely perform bounds checking because it checks the size of the variable length, which it later uses to control the amount of data copied by png_crc_read(). However, immediately before it tests length, the code performs a check on png_ptr-&gt;mode, and if this check fails a warning is issued and processing continues. Because length is tested in an else if block, length would not be tested if the first check fails, and is used blindly in the call to png_crc_read(), potentially allowing a stack buffer overflow. 

Although the code in this example is not the most complex we have seen, it demonstrates why complexity should be minimized in code that performs memory operations. 


if (!(png_ptr-&gt;mode &amp; PNG_HAVE_PLTE)) {
	/* Should be an error, but we can cope with it */
png_warning(png_ptr, &quot;Missing PLTE before tRNS&quot;);
}
else if (length &gt; (png_uint_32)png_ptr-&gt;num_palette) {
png_warning(png_ptr, &quot;Incorrect tRNS chunk length&quot;);
png_crc_finish(png_ptr, length);
return;
}
...
png_crc_read(png_ptr, readbuf, (png_size_t)length);


Example 5: This example also demonstrates the third scenario in which the program's complexity exposes it to buffer overflows. In this case, the exposure is due to the ambiguous interface of one of the functions rather than the structure of the code (as was the case in the previous example).

The getUserInfo() function takes a username specified as a multibyte string and a pointer to a structure for user information, and populates the structure with information about the user. Since Windows authentication uses Unicode for usernames, the username argument is first converted from a multibyte string to a Unicode string. This function then incorrectly passes the size of unicodeUser in bytes rather than characters. The call to MultiByteToWideChar() may therefore write up to (UNLEN+1)*sizeof(WCHAR) wide characters, or
(UNLEN+1)*sizeof(WCHAR)*sizeof(WCHAR) bytes, to the unicodeUser array, which has only (UNLEN+1)*sizeof(WCHAR) bytes allocated. If the username string contains more than UNLEN characters, the call to MultiByteToWideChar() will overflow the buffer unicodeUser. 


void getUserInfo(char *username, struct _USER_INFO_2 info){
WCHAR unicodeUser[UNLEN+1];
	MultiByteToWideChar(CP_ACP, 0, username, -1,
    	      			unicodeUser, sizeof(unicodeUser));
NetUserGetInfo(NULL, unicodeUser, 2, (LPBYTE *)&amp;info);
}
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Never use inherently unsafe functions, such as gets(), and avoid the use of functions that are difficult to use safely such as strcpy(). Replace unbounded functions like strcpy() with their bounded equivalents, such as strncpy() or the WinAPI functions defined in strsafe.h [4]. 

Although the careful use of bounded functions can greatly reduce the risk of buffer overflow, this migration cannot be done blindly and does not go far enough on its own to ensure security. Whenever you manipulate memory, especially strings, remember that buffer overflow vulnerabilities typically occur in code that:

- Relies on external data to control its behavior.

- Depends upon properties of the data that are enforced outside of the immediate scope of the code.

- Is so complex that a programmer cannot accurately predict its behavior.

Additionally, consider the following principles:

- Never trust an external source to provide correct control information to a memory operation. 

- Never trust that properties about the data your program is manipulating will be maintained throughout the program. Sanity check data before you operate on it.

- Limit the complexity of memory manipulation and bounds-checking code. Keep it simple and clearly document the checks you perform, the assumptions that you test, and what the expected behavior of the program is in the case that input validation fails.

- When input data is too large, be leery of truncating the data and continuing to process it. Truncation can change the meaning of the input.

- Do not rely on tools, such as StackGuard, or non-executable stacks to prevent buffer overflow vulnerabilities. These approaches do not address heap buffer overflows and the more subtle stack overflows that can change the contents of variables that control the program. Additionally, many of these approaches are easily defeated, and even when they are working properly, they address the symptom of the problem and not its cause.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. On Windows, less secure functions like memcpy() can be replaced with their more secure versions, such as memcpy_s(). However, this still needs to be done with caution. Because parameter validation provided by the _s family of functions varies, relying on it can lead to unexpected behavior. Furthermore, incorrectly specifying the size of the destination buffer can still result in buffer overflows.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>12</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="F5D559C2-3570-4A92-A8D4-4ADAA17F48FF" iid="E97A2D6BAF232260AC303E4940AB5509">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function LikelyBannedTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 279, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>279</LineStart>
<Snippet>    buffer6 = buffer4;
    (void)wctomb(buffer1, *buffer6);
    (void)wcrtomb(buffer1, *buffer6, NULL);
    (void)wcstombs(buffer1, buffer6, _countof(buffer1));
    (void)wcsrtombs(buffer1, &amp;buffer6, _countof(buffer1), NULL);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="9F54C54B-F523-49C4-8808-1996AB220315" iid="65F814D3D0C6F5D61B8B07229C5054D5">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function WideCharStringTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 87, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>87</LineStart>
<Snippet>    buffer6 = wcstok(buffer4, L&quot; \t\n&quot;, &amp;last);
    while (buffer6 != NULL) {
        (void)wcscat(buffer5, buffer6);
        buffer6 = wcstok(NULL, L&quot; \t\n&quot;, &amp;last);
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="9F54C54B-F523-49C4-8808-1996AB220315" iid="DB93D0F298DA2DDC22A9EC7D8A9D6B7F">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function WideCharStringTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 87, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>87</LineStart>
<Snippet>    buffer6 = wcstok(buffer4, L&quot; \t\n&quot;, &amp;last);
    while (buffer6 != NULL) {
        (void)wcscat(buffer5, buffer6);
        buffer6 = wcstok(NULL, L&quot; \t\n&quot;, &amp;last);
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="F5D559C2-3570-4A92-A8D4-4ADAA17F48FF" iid="4AD7C542C06E5B215D308282E30494BF">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function LikelyBannedTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 279, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>279</LineStart>
<Snippet>    buffer6 = buffer4;
    (void)wctomb(buffer1, *buffer6);
    (void)wcrtomb(buffer1, *buffer6, NULL);
    (void)wcstombs(buffer1, buffer6, _countof(buffer1));
    (void)wcsrtombs(buffer1, &amp;buffer6, _countof(buffer1), NULL);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>239</LineStart>
<Snippet>    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);
    (void)swscanf(buffer5, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="F5D559C2-3570-4A92-A8D4-4ADAA17F48FF" iid="D82800828C73CF9882FABCC523B305FB">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function LikelyBannedTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 279, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>279</LineStart>
<Snippet>    buffer6 = buffer4;
    (void)wctomb(buffer1, *buffer6);
    (void)wcrtomb(buffer1, *buffer6, NULL);
    (void)wcstombs(buffer1, buffer6, _countof(buffer1));
    (void)wcsrtombs(buffer1, &amp;buffer6, _countof(buffer1), NULL);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="9F54C54B-F523-49C4-8808-1996AB220315" iid="C7916675D2052C6D8187E27154A47009">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function WideCharStringTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 87, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>87</LineStart>
<Snippet>    buffer6 = wcstok(buffer4, L&quot; \t\n&quot;, &amp;last);
    while (buffer6 != NULL) {
        (void)wcscat(buffer5, buffer6);
        buffer6 = wcstok(NULL, L&quot; \t\n&quot;, &amp;last);
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>236</LineStart>
<Snippet>void ScanfTests()
{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="F5D559C2-3570-4A92-A8D4-4ADAA17F48FF" iid="7167C91DAF29CF8FFC6F8102C238FA27">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function LikelyBannedTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 279, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>279</LineStart>
<Snippet>    buffer6 = buffer4;
    (void)wctomb(buffer1, *buffer6);
    (void)wcrtomb(buffer1, *buffer6, NULL);
    (void)wcstombs(buffer1, buffer6, _countof(buffer1));
    (void)wcsrtombs(buffer1, &amp;buffer6, _countof(buffer1), NULL);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="9F54C54B-F523-49C4-8808-1996AB220315" iid="1C80821B323D117284544B40EFD8A5B3">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function WideCharStringTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 87, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>87</LineStart>
<Snippet>    buffer6 = wcstok(buffer4, L&quot; \t\n&quot;, &amp;last);
    while (buffer6 != NULL) {
        (void)wcscat(buffer5, buffer6);
        buffer6 = wcstok(NULL, L&quot; \t\n&quot;, &amp;last);
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="9F54C54B-F523-49C4-8808-1996AB220315" iid="DB93D0F298DA2DDC22A9EC7D8A9D6B7E">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function WideCharStringTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 87, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>87</LineStart>
<Snippet>    buffer6 = wcstok(buffer4, L&quot; \t\n&quot;, &amp;last);
    while (buffer6 != NULL) {
        (void)wcscat(buffer5, buffer6);
        buffer6 = wcstok(NULL, L&quot; \t\n&quot;, &amp;last);
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>134</LineStart>
<Snippet>
    int countLines = 0;
    while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
        ++countLines;
    }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="F5D559C2-3570-4A92-A8D4-4ADAA17F48FF" iid="D82800828C73CF9882FABCC523B305FC">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function LikelyBannedTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 279, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>279</LineStart>
<Snippet>    buffer6 = buffer4;
    (void)wctomb(buffer1, *buffer6);
    (void)wcrtomb(buffer1, *buffer6, NULL);
    (void)wcstombs(buffer1, buffer6, _countof(buffer1));
    (void)wcsrtombs(buffer1, &amp;buffer6, _countof(buffer1), NULL);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>142</LineStart>
<Snippet>        int i = countLines;
        rewind(file);
        while (fgets(buffer1, sizeof(buffer1), file) != NULL) {
            bannedApis[--i] = strdup(buffer1);
        }</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="F5D559C2-3570-4A92-A8D4-4ADAA17F48FF" iid="AD182EE22933927AAC966D5DDC668E1B">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function LikelyBannedTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 279, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>279</LineStart>
<Snippet>    buffer6 = buffer4;
    (void)wctomb(buffer1, *buffer6);
    (void)wcrtomb(buffer1, *buffer6, NULL);
    (void)wcstombs(buffer1, buffer6, _countof(buffer1));
    (void)wcsrtombs(buffer1, &amp;buffer6, _countof(buffer1), NULL);</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>238</LineStart>
<Snippet>    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);
    (void)sscanf(buffer1, asciiStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                        <Issue ruleID="9F54C54B-F523-49C4-8808-1996AB220315" iid="87CCC6BEFD09409265D8E7127CD280FE">
                            <Category>Buffer Overflow</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The function WideCharStringTests() in bannedAPIs.m writes outside the bounds of allocated memory on line 87, which could corrupt data, cause the program to crash, or lead to the execution of malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>87</LineStart>
<Snippet>    buffer6 = wcstok(buffer4, L&quot; \t\n&quot;, &amp;last);
    while (buffer6 != NULL) {
        (void)wcscat(buffer5, buffer6);
        buffer6 = wcstok(NULL, L&quot; \t\n&quot;, &amp;last);
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>bannedAPIs.m</FileName>
<FilePath>bannedAPIs.m</FilePath>
<LineStart>237</LineStart>
<Snippet>{
    (void)scanf(asciiStringFormat, buffer0, buffer4);
    (void)wscanf(wideCharStringFormat, buffer0, buffer4);
    (void)fscanf(stdin, asciiStringFormat, buffer0, buffer4);
    (void)fwscanf(stdin, wideCharStringFormat, buffer0, buffer4);</Snippet>
                            </Source>
                            <ExternalCategory type="CWE">CWE ID 120, CWE ID 129, CWE ID 131, CWE ID 787</ExternalCategory>
                        </Issue>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="true" enabled="true">
        <Title>Detailed Project Summary</Title>
        <SubSection enabled="true">
            <Title>Files Scanned</Title>
            <Description>A detailed listing of all scanned files.  Files are listed with paths relative to the Source Base Path</Description>
            <Text>Code base location: /Users/wenkec/tmp&#xD;
Files Scanned:&#xD;
/usr/include/i386/_types.h		secondary		4.4 KB	May 8, 2014 3:23:23 PM
/usr/include/stdio.h		secondary		17.6 KB	May 8, 2014 3:23:24 PM
/usr/include/stdlib.h		secondary		11.8 KB	May 8, 2014 3:23:24 PM
/usr/include/string.h		secondary		6.7 KB	May 8, 2014 3:23:24 PM
/usr/include/strings.h		secondary		4 KB	May 8, 2014 3:23:24 PM
/usr/include/time.h		secondary		5.7 KB	May 8, 2014 3:23:24 PM
/usr/include/wchar.h		secondary		9.8 KB	May 8, 2014 3:23:24 PM
bannedAPIs.m		objc	139 Lines	8.2 KB	Aug 27, 2014 3:25:52 PM</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Reference Elements</Title>
            <Description>A Listing of all libraries used for the translation phase of the analysis</Description>
            <Text>Classpath:&#xD;
&#xD;
No classpath specified during translation&#xD;
&#xD;
Libdirs:&#xD;
&#xD;
No libdirs specified during translation</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Rulepacks</Title>
            <Description>A listing of all rulepacks used in the analysis</Description>
            <Text>Valid Rulepacks:

Name: 		Fortify Secure Coding Rules, Core, ABAP
Version: 	2014.1.0.0010
ID: 				5A663288-B1F7-416A-AEED-E5F00DC3596F
SKU: 			RUL13095

Name: 		Fortify Secure Coding Rules, Core, ActionScript 3.0
Version: 	2014.1.0.0010
ID: 				92127AA2-E666-4F28-B1C1-C0F6A939A089
SKU: 			RUL13094

Name: 		Fortify Secure Coding Rules, Core, Android
Version: 	2014.1.0.0010
ID: 				FF9890E6-D119-4EE8-A591-83DCF4CA6952
SKU: 			RUL13093

Name: 		Fortify Secure Coding Rules, Core, Annotations
Version: 	2014.1.0.0010
ID: 				14EE50EB-FA1C-4AE8-8B59-39F952E21E3B
SKU: 			RUL13078

Name: 		Fortify Secure Coding Rules, Core, ColdFusion
Version: 	2014.1.0.0010
ID: 				EEA7C678-058E-462A-8A59-AF925F7B7164
SKU: 			RUL13024

Name: 		Fortify Secure Coding Rules, Core, C/C++
Version: 	2014.1.0.0010
ID: 				711E0652-7494-42BE-94B1-DB3799418C7E
SKU: 			RUL13001

Name: 		Fortify Secure Coding Rules, Core, .NET
Version: 	2014.1.0.0010
ID: 				D57210E5-E762-4112-97DD-019E61D32D0E
SKU: 			RUL13002

Name: 		Fortify Secure Coding Rules, Core, Java
Version: 	2014.1.0.0010
ID: 				06A6CC97-8C3F-4E73-9093-3E74C64A2AAF
SKU: 			RUL13003

Name: 		Fortify Secure Coding Rules, Core, JavaScript
Version: 	2014.1.0.0010
ID: 				BD292C4E-4216-4DB8-96C7-9B607BFD9584
SKU: 			RUL13059

Name: 		Fortify Secure Coding Rules, Core, Objective-C
Version: 	2014.1.0.0010
ID: 				B18E58BA-8B2D-4FC5-83BF-378594CAD260
SKU: 			RUL13099

Name: 		Fortify Secure Coding Rules, Core, PHP
Version: 	2014.1.0.0010
ID: 				343CBB32-087C-4A4E-8BD8-273B5F876069
SKU: 			RUL13058

Name: 		Fortify Secure Coding Rules, Core, Python
Version: 	2014.1.0.0010
ID: 				FD15CBE4-E059-4CBB-914E-546BDCEB422B
SKU: 			RUL13083

Name: 		Fortify Secure Coding Rules, Core, SQL
Version: 	2014.1.0.0010
ID: 				6494160B-E1DB-41F5-9840-2B1609EE7649
SKU: 			RUL13004

Name: 		Fortify Secure Coding Rules, Core, Classic ASP, VBScript, and VB6
Version: 	2014.1.0.0010
ID: 				1D426B6F-8D33-4AD6-BBCE-237ABAFAB924
SKU: 			RUL13060

Name: 		Fortify Secure Coding Rules, Extended, Configuration
Version: 	2014.1.0.0010
ID: 				CD6959FC-0C37-45BE-9637-BAA43C3A4D56
SKU: 			RUL13005

Name: 		Fortify Secure Coding Rules, Extended, Content
Version: 	2014.1.0.0010
ID: 				9C48678C-09B6-474D-B86D-97EE94D38F17
SKU: 			RUL13067

Name: 		Fortify Secure Coding Rules, Extended, C/C++
Version: 	2014.1.0.0010
ID: 				BD4641AD-A6FF-4401-A8F4-6873272F2748
SKU: 			RUL13006

Name: 		Fortify Secure Coding Rules, Extended, .NET
Version: 	2014.1.0.0010
ID: 				557BCC56-CD42-43A7-B4FE-CDD00D58577E
SKU: 			RUL13027

Name: 		Fortify Secure Coding Rules, Extended, Java
Version: 	2014.1.0.0010
ID: 				AAAC0B10-79E7-4FE5-9921-F4903A79D317
SKU: 			RUL13007

Name: 		Fortify Secure Coding Rules, Extended, JSP
Version: 	2014.1.0.0010
ID: 				00403342-15D0-48C9-8E67-4B1CFBDEFCD2
SKU: 			RUL13026

Name: 		Fortify Secure Coding Rules, Extended, SQL
Version: 	2014.1.0.0010
ID: 				4BC5B2FA-C209-4DBC-9C3E-1D3EEFAF135A
SKU: 			RUL13025

External Metadata:

Name: 		CWE
ID: 				3ADB9EE4-5761-4289-8BD3-CBFCC593EBBC

Name: 		FISMA
ID: 				B40F9EE0-3824-4879-B9FE-7A789C89307C

Name: 		NIST SP 800-53 Rev.4
ID: 				1114583B-EA24-45BE-B7F8-B61201BACDD0

Name: 		OWASP Top 10 2004
ID: 				771C470C-9274-4580-8556-C023E4D3ADB4

Name: 		OWASP Top 10 2007
ID: 				1EB1EC0E-74E6-49A0-BCE5-E6603802987A

Name: 		OWASP Top 10 2010
ID: 				FDCECA5E-C2A8-4BE8-BB26-76A8ECD0ED59

Name: 		OWASP Top 10 2013
ID: 				1A2B4C7E-93B0-4502-878A-9BE40D2A25C4

Name: 		PCI 1.1
ID: 				CBDB9D4D-FC20-4C04-AD58-575901CAB531

Name: 		PCI 1.2
ID: 				57940BDB-99F0-48BF-BF2E-CFC42BA035E5

Name: 		PCI 2.0
ID: 				8970556D-7F9F-4EA7-8033-9DF39D68FF3E

Name: 		PCI 3.0
ID: 				E2FB0D38-0192-4F03-8E01-FE2A12680CA3

Name: 		SANS Top 25 2009
ID: 				939EF193-507A-44E2-ABB7-C00B2168B6D8

Name: 		SANS Top 25 2010
ID: 				72688795-4F7B-484C-88A6-D4757A6121CA

Name: 		SANS Top 25 2011
ID: 				92EB4481-1FD9-4165-8E16-F2DE6CB0BD63

Name: 		STIG 3
ID: 				F2FA57EA-5AAA-4DDE-90A5-480BE65CE7E7

Name: 		STIG 3.4
ID: 				58E2C21D-C70F-4314-8994-B859E24CF855

Name: 		STIG 3.5
ID: 				DD18E81F-3507-41FA-9DFA-2A9A15B5479F

Name: 		WASC 24 + 2
ID: 				9DC61E7F-1A48-4711-BBFD-E9DFF537871F

</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Properties</Title>
            <Description>A complete listing of all properties set during analysis phase</Description>
            <Text>WinForms.CollectionMutationMonitor.Label=WinFormsDataSource
WinForms.ExtractEventHandlers=true
WinForms.TransformChangeNotificationPattern=true
WinForms.TransformDataBindings=true
WinForms.TransformMessageLoops=true
awt.toolkit=sun.awt.windows.WToolkit
com.fortify.AuthenticationKey=C:\Users\wenkec\AppData\Local/Fortify/config/tools
com.fortify.Core=E:\tools\fortify\Core
com.fortify.InstallRoot=E:\tools\fortify
com.fortify.InstallationUserName=wenkec
com.fortify.SCAExecutablePath=E:	oolsortifybinsourceanalyzer.exe
com.fortify.TotalPhysicalMemory=17101729792
com.fortify.VS.RequireASPPrecompilation=true
com.fortify.WorkingDirectory=C:\Users\wenkec\AppData\Local/Fortify
com.fortify.locale=en
com.fortify.sca.AddImpliedMethods=true
com.fortify.sca.AntCompilerClass=com.fortify.dev.ant.SCACompiler
com.fortify.sca.BuildID=bannedAPIs_m
com.fortify.sca.BundleControlflowIssues=true
com.fortify.sca.CollectPerformanceData=true
com.fortify.sca.CustomRulesDir=E:\tools\fortify\Core\config\customrules
com.fortify.sca.DaemonCompilers=com.fortify.sca.util.compilers.GppCompiler,com.fortify.sca.util.compilers.GccCompiler,com.fortify.sca.util.compilers.AppleGppCompiler,com.fortify.sca.util.compilers.AppleGccCompiler,com.fortify.sca.util.compilers.MicrosoftCompiler,com.fortify.sca.util.compilers.MicrosoftLinker,com.fortify.sca.util.compilers.LdCompiler,com.fortify.sca.util.compilers.ArUtil,com.fortify.sca.util.compilers.SunCCompiler,com.fortify.sca.util.compilers.SunCppCompiler,com.fortify.sca.util.compilers.IntelCompiler,com.fortify.sca.util.compilers.ExternalCppAdapter,com.fortify.sca.util.compilers.ClangCompiler
com.fortify.sca.DeadCodeFilter=true
com.fortify.sca.DeadCodeIgnoreTrivialPredicates=true
com.fortify.sca.Debug=
com.fortify.sca.DefaultAnalyzers=semantic:dataflow:controlflow:nullptr:configuration:content:structural:buffer
com.fortify.sca.DefaultFileTypes=java,jsp,jspx,tag,tagx,tld,sql,cfm,php,phtml,ctp,pks,pkh,pkb,xml,config,settings,properties,dll,exe,inc,asp,vbscript,js,ini,bas,cls,vbs,frm,ctl,html,htm,xsd,wsdd,xmi,py,cfml,cfc,abap,xhtml,cpx,xcfg,jsff,as,mxml,cbl,cscfg,csdef,wadcfg,appxmanifest,wsdl
com.fortify.sca.DefaultJarsDirs=default_jars
com.fortify.sca.DefaultRulesDir=E:\tools\fortify\Core\config\rules
com.fortify.sca.DisableDeadCodeElimination=false
com.fortify.sca.DisableFunctionPointers=false
com.fortify.sca.DisableGlobals=false
com.fortify.sca.DisableInferredConstants=false
com.fortify.sca.DisplayProgress=true
com.fortify.sca.EnableInterproceduralConstantResolution=true
com.fortify.sca.EnableNestedWrappers=true
com.fortify.sca.EnableStructuralMatchCache=true
com.fortify.sca.EnableWrapperDetection=true
com.fortify.sca.FVDLDisableDescriptions=false
com.fortify.sca.FVDLDisableProgramData=false
com.fortify.sca.FVDLDisableSnippets=false
com.fortify.sca.FVDLStylesheet=E:\tools\fortify\Core/resources/sca/fvdl2html.xsl
com.fortify.sca.IndirectCallGraphBuilders=com.fortify.sca.analyzer.callgraph.WinFormsAdHocFunctionBuilder,com.fortify.sca.analyzer.callgraph.VirtualCGBuilder,com.fortify.sca.analyzer.callgraph.J2EEIndirectCGBuilder,com.fortify.sca.analyzer.callgraph.JNICGBuilder,com.fortify.sca.analyzer.callgraph.StoredProcedureResolver,com.fortify.sca.analyzer.callgraph.JavaWSCGBuilder,com.fortify.sca.analyzer.callgraph.StrutsCGBuilder,com.fortify.sca.analyzer.callgraph.DotNetWSCGBuilder,com.fortify.sca.analyzer.callgraph.SqlServerSPResolver,com.fortify.sca.analyzer.callgraph.ASPCGBuilder,com.fortify.sca.analyzer.callgraph.ScriptedCGBuilder,com.fortify.sca.analyzer.callgraph.NewJspCustomTagCGBuilder,com.fortify.sca.analyzer.callgraph.DotNetCABCGBuilder,com.fortify.sca.analyzer.callgraph.StateInjectionCGBuilder,com.fortify.sca.analyzer.callgraph.SqlServerSPResolver2,com.fortify.sca.analyzer.callgraph.PHPLambdaResolver,com.fortify.sca.analyzer.callgraph.JavaWebCGBuilder
com.fortify.sca.JVMArgs=-Djava.awt.headless=true -Dcom.sun.management.jmxremote=true -XX:SoftRefLRUPolicyMSPerMB=3000 -Xmx8192M -Xss1M -Xms300M -server
com.fortify.sca.JdkVersion=1.4
com.fortify.sca.LogFile=sca.log
com.fortify.sca.LowSeverityCutoff=1.0
com.fortify.sca.NoNestedOutTagOutput=org.apache.taglibs.standard.tag.rt.core.RemoveTag,org.apache.taglibs.standard.tag.rt.core.SetTag
com.fortify.sca.PID=25972
com.fortify.sca.PrintPerformanceDataAfterScan=true
com.fortify.sca.ProfileDataStore=true
com.fortify.sca.ProjectRoot=C:\Users\wenkec\AppData\Local/Fortify
com.fortify.sca.ProjectRoot=C:\Users\wenkec\AppData\Local/Fortify
com.fortify.sca.RequireMapKeys=classrule
com.fortify.sca.ResultsFile=bannedAPIs_m0.fpr
com.fortify.sca.RmiWorkerMaxHeap=2048M
com.fortify.sca.SolverTimeout=15
com.fortify.sca.SqlLanguage=TSQL
com.fortify.sca.SuppressLowSeverity=true
com.fortify.sca.ThreadCount.NameTableLoading=1
com.fortify.sca.UnicodeInputFile=true
com.fortify.sca.Verbose=
com.fortify.sca.WrapperHeuristic=moderate
com.fortify.sca.analyzer.controlflow.EnableLivenessOptimization=false
com.fortify.sca.analyzer.controlflow.EnableMachineFiltering=false
com.fortify.sca.analyzer.controlflow.EnableRefRuleOptimization=false
com.fortify.sca.analyzer.controlflow.EnableTimeOut=true
com.fortify.sca.compilers.ant=com.fortify.sca.util.compilers.AntAdapter
com.fortify.sca.compilers.ar=com.fortify.sca.util.compilers.ArUtil
com.fortify.sca.compilers.armcc=com.fortify.sca.util.compilers.ArmCcCompiler
com.fortify.sca.compilers.armcpp=com.fortify.sca.util.compilers.ArmCppCompiler
com.fortify.sca.compilers.c++=com.fortify.sca.util.compilers.GppCompiler
com.fortify.sca.compilers.c89=com.fortify.sca.util.compilers.C89Compiler
com.fortify.sca.compilers.cc=com.fortify.sca.util.compilers.GccCompiler
com.fortify.sca.compilers.cl=com.fortify.sca.util.compilers.MicrosoftCompiler
com.fortify.sca.compilers.clearmake=com.fortify.sca.util.compilers.TouchlessCompiler
com.fortify.sca.compilers.devenv=com.fortify.sca.util.compilers.DevenvNetAdapter
com.fortify.sca.compilers.fortify=com.fortify.sca.util.compilers.FortifyCompiler
com.fortify.sca.compilers.g++=com.fortify.sca.util.compilers.GppCompiler
com.fortify.sca.compilers.g++-*=com.fortify.sca.util.compilers.GppCompiler
com.fortify.sca.compilers.g++2*=com.fortify.sca.util.compilers.GppCompiler
com.fortify.sca.compilers.g++3*=com.fortify.sca.util.compilers.GppCompiler
com.fortify.sca.compilers.g++4*=com.fortify.sca.util.compilers.GppCompiler
com.fortify.sca.compilers.gcc=com.fortify.sca.util.compilers.GccCompiler
com.fortify.sca.compilers.gcc-*=com.fortify.sca.util.compilers.GccCompiler
com.fortify.sca.compilers.gcc2*=com.fortify.sca.util.compilers.GccCompiler
com.fortify.sca.compilers.gcc3*=com.fortify.sca.util.compilers.GccCompiler
com.fortify.sca.compilers.gcc4*=com.fortify.sca.util.compilers.GccCompiler
com.fortify.sca.compilers.gmake=com.fortify.sca.util.compilers.TouchlessCompiler
com.fortify.sca.compilers.icc=com.fortify.sca.util.compilers.IntelCompiler
com.fortify.sca.compilers.icl=com.fortify.sca.util.compilers.MicrosoftCompiler
com.fortify.sca.compilers.icpc=com.fortify.sca.util.compilers.IntelCompiler
com.fortify.sca.compilers.jam=com.fortify.sca.util.compilers.TouchlessCompiler
com.fortify.sca.compilers.javac=com.fortify.sca.util.compilers.JavacCompiler
com.fortify.sca.compilers.ld=com.fortify.sca.util.compilers.LdCompiler
com.fortify.sca.compilers.link=com.fortify.sca.util.compilers.MicrosoftLinker
com.fortify.sca.compilers.make=com.fortify.sca.util.compilers.TouchlessCompiler
com.fortify.sca.compilers.msbuild=com.fortify.sca.util.compilers.MSBuildAdapter
com.fortify.sca.compilers.msdev=com.fortify.sca.util.compilers.DevenvAdapter
com.fortify.sca.compilers.mvn=com.fortify.sca.util.compilers.MavenAdapter
com.fortify.sca.compilers.nmake=com.fortify.sca.util.compilers.TouchlessCompiler
com.fortify.sca.compilers.tcc=com.fortify.sca.util.compilers.ArmCcCompiler
com.fortify.sca.compilers.tcpp=com.fortify.sca.util.compilers.ArmCppCompiler
com.fortify.sca.compilers.touchless=com.fortify.sca.util.compilers.FortifyCompiler
com.fortify.sca.compilers.xilink=com.fortify.sca.util.compilers.MicrosoftLinker
com.fortify.sca.cpfe.441.command=E:\tools\fortify\Core/private-bin/sca/cpfe441
com.fortify.sca.cpfe.command=E:\tools\fortify\Core/private-bin/sca/cpfe441.rfct.exe
com.fortify.sca.cpfe.file.option=--gen_c_file_name
com.fortify.sca.cpfe.options=--remove_unneeded_entities --suppress_vtbl -tused
com.fortify.sca.cpfe.options=--remove_unneeded_entities --suppress_vtbl -tused
com.fortify.sca.env.cl=&quot;C:\Program Files (x86)\VS2013\VC\bin\cl.exe&quot;
com.fortify.sca.env.exesearchpath=e:\tmp\fortify;E:\tools\fortify\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;c:\tools\DbgX86;c:\tools\bin;c:\tools\idw;c:\tools\bldtools;c:\tools\sd;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files\Common Files\Microsoft Shared\Microsoft Online Services;C:\Program Files (x86)\Common Files\Microsoft Shared\Microsoft Online Services;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SDKs\TypeScript\1.0\;e:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;e:\tools\fortify\bin\..\Core\lib;e:\tools\fortify\bin\..\Core\lib;e:\tools\fortify\bin\..\Core\lib;e:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib
com.fortify.sca.env.include=&quot;C:\Program Files (x86)\VS2013\VC\INCLUDE&quot;
com.fortify.sca.fileextensions.ABAP=ABAP
com.fortify.sca.fileextensions.abap=ABAP
com.fortify.sca.fileextensions.appxmanifest=XML
com.fortify.sca.fileextensions.as=ACTIONSCRIPT
com.fortify.sca.fileextensions.asp=ASP
com.fortify.sca.fileextensions.bas=VB6
com.fortify.sca.fileextensions.cfc=CFML
com.fortify.sca.fileextensions.cfm=CFML
com.fortify.sca.fileextensions.cfml=CFML
com.fortify.sca.fileextensions.cls=VB6
com.fortify.sca.fileextensions.config=XML
com.fortify.sca.fileextensions.cpx=XML
com.fortify.sca.fileextensions.cs=CSHARP
com.fortify.sca.fileextensions.cscfg=XML
com.fortify.sca.fileextensions.csdef=XML
com.fortify.sca.fileextensions.ctl=VB6
com.fortify.sca.fileextensions.ctp=PHP
com.fortify.sca.fileextensions.dll=MSIL
com.fortify.sca.fileextensions.exe=MSIL
com.fortify.sca.fileextensions.faces=JSPX
com.fortify.sca.fileextensions.frm=VB6
com.fortify.sca.fileextensions.htm=HTML
com.fortify.sca.fileextensions.html=HTML
com.fortify.sca.fileextensions.ini=JAVA_PROPERTIES
com.fortify.sca.fileextensions.java=JAVA
com.fortify.sca.fileextensions.js=JAVASCRIPT
com.fortify.sca.fileextensions.jsff=JSPX
com.fortify.sca.fileextensions.jsp=JSP
com.fortify.sca.fileextensions.jspx=JSPX
com.fortify.sca.fileextensions.mdl=MSIL
com.fortify.sca.fileextensions.mod=MSIL
com.fortify.sca.fileextensions.mxml=MXML
com.fortify.sca.fileextensions.php=PHP
com.fortify.sca.fileextensions.phtml=PHP
com.fortify.sca.fileextensions.pkb=PLSQL
com.fortify.sca.fileextensions.pkh=PLSQL
com.fortify.sca.fileextensions.pks=PLSQL
com.fortify.sca.fileextensions.properties=JAVA_PROPERTIES
com.fortify.sca.fileextensions.py=PYTHON
com.fortify.sca.fileextensions.settings=XML
com.fortify.sca.fileextensions.sql=SQL
com.fortify.sca.fileextensions.tag=JSP
com.fortify.sca.fileextensions.tagx=JSP
com.fortify.sca.fileextensions.tld=TLD
com.fortify.sca.fileextensions.vb=VB
com.fortify.sca.fileextensions.vbs=VB6
com.fortify.sca.fileextensions.vbscript=VBSCRIPT
com.fortify.sca.fileextensions.wadcfg=XML
com.fortify.sca.fileextensions.wsdd=XML
com.fortify.sca.fileextensions.wsdl=XML
com.fortify.sca.fileextensions.xcfg=XML
com.fortify.sca.fileextensions.xhtml=JSPX
com.fortify.sca.fileextensions.xmi=XML
com.fortify.sca.fileextensions.xml=XML
com.fortify.sca.fileextensions.xsd=XML
com.fortify.sca.jsp.UseNativeParser=true
com.fortify.sca.parser.python.ignore.module.1=test.badsyntax_future3
com.fortify.sca.parser.python.ignore.module.2=test.badsyntax_future4
com.fortify.sca.parser.python.ignore.module.3=test.badsyntax_future5
com.fortify.sca.parser.python.ignore.module.4=test.badsyntax_future6
com.fortify.sca.parser.python.ignore.module.5=test.badsyntax_future7
com.fortify.sca.parser.python.ignore.module.6=test.badsyntax_future8
com.fortify.sca.parser.python.ignore.module.7=test.badsyntax_future9
com.fortify.sca.parser.python.ignore.module.8=test.badsyntax_nocaret
com.fortify.sca.rmi.ProfileData=true
com.fortify.sca.taint.SkipVirtual=true
com.fortify.search.defaultSyntaxVer=2
com.sun.management.jmxremote=true
dotnet.install.dir=C:\Windows\Microsoft.NET\Framework
dotnet.v30.referenceAssemblies=C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.0
dotnet.v35.referenceAssemblies=C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\v3.5
file.encoding=Cp1252
file.encoding.pkg=sun.io
file.separator=\
java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment
java.awt.headless=true
java.awt.printerjob=sun.awt.windows.WPrinterJob
java.class.path=E:\tools\fortify\Core\lib\exe\sca-exe.jar
java.class.version=51.0
java.endorsed.dirs=E:\tools\fortify\jre64\lib\endorsed
java.ext.dirs=E:\tools\fortify\jre64\lib\ext;C:\WINDOWS\Sun\Java\lib\ext
java.home=E:\tools\fortify\jre64
java.io.tmpdir=C:\Users\wenkec\AppData\Local\Temp\
java.library.path=E:\tools\fortify\jre64\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;E:\tools\fortify\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;c:\tools\DbgX86;c:\tools\bin;c:\tools\idw;c:\tools\bldtools;c:\tools\sd;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files\Common Files\Microsoft Shared\Microsoft Online Services;C:\Program Files (x86)\Common Files\Microsoft Shared\Microsoft Online Services;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SDKs\TypeScript\1.0\;e:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;e:\tools\fortify\bin\..\Core\lib;e:\tools\fortify\bin\..\Core\lib;e:\tools\fortify\bin\..\Core\lib;e:\tools\fortify\bin\..\Core\lib;E:\tools\fortify\bin\..\Core\lib;.
java.rmi.server.randomIDs=true
java.runtime.name=Java(TM) SE Runtime Environment
java.runtime.version=1.7.0_21-b11
java.specification.name=Java Platform API Specification
java.specification.vendor=Oracle Corporation
java.specification.version=1.7
java.vendor=Oracle Corporation
java.vendor.url=http://java.oracle.com/
java.vendor.url.bug=http://bugreport.sun.com/bugreport/
java.version=1.7.0_21
java.vm.info=mixed mode
java.vm.name=Java HotSpot(TM) 64-Bit Server VM
java.vm.specification.name=Java Virtual Machine Specification
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.7
java.vm.vendor=Oracle Corporation
java.vm.version=23.21-b01
line.separator=&#xD;

max.file.path.length=255
os.arch=amd64
os.name=Windows 8
os.version=6.2
path.separator=;
stderr.isatty=true
stdout.isatty=true
sun.arch.data.model=64
sun.boot.class.path=E:\tools\fortify\jre64\lib\resources.jar;E:\tools\fortify\jre64\lib\rt.jar;E:\tools\fortify\jre64\lib\sunrsasign.jar;E:\tools\fortify\jre64\lib\jsse.jar;E:\tools\fortify\jre64\lib\jce.jar;E:\tools\fortify\jre64\lib\charsets.jar;E:\tools\fortify\jre64\lib\jfr.jar;E:\tools\fortify\jre64\classes
sun.boot.library.path=E:\tools\fortify\jre64\bin
sun.cpu.endian=little
sun.cpu.isalist=amd64
sun.desktop=windows
sun.io.unicode.encoding=UnicodeLittle
sun.java.command=E:\tools\fortify\Core\lib\exe\sca-exe.jar -b bannedAPIs_m -debug -verbose -logfile sca.log -scan -f bannedAPIs_m0.fpr
sun.java.launcher=SUN_STANDARD
sun.jnu.encoding=Cp1252
sun.management.compiler=HotSpot 64-Bit Tiered Compilers
sun.os.patch.level=
user.country=US
user.dir=e:\tmp\fortify
user.home=C:\Users\wenkec
user.language=en
user.name=wenkec
user.script=
user.timezone=America/Los_Angeles
user.variant=
vs.110.dotnet.clr.version=v4.0.30319
vs.120.dotnet.clr.version=v4.0.30319
vs.120.dotnet.install.dir=C:\Program Files (x86)\VS2013\Common7\IDE
win32.LocalAppdata=C:\Users\wenkec\AppData\Local
</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Commandline Arguments</Title>
            <Description>A listing of all arguments passed to SCA during the analysis phase</Description>
            <Text>-b
bannedAPIs_m
-debug
-verbose
-logfile
sca.log
-scan
-f
bannedAPIs_m0.fpr
</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Warnings</Title>
            <Description>A listing of all warnings that occurred during the scan, during both translation and analysis phase</Description>
            <Text>No warnings occurred during analysis</Text>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="false" enabled="true">
        <Title>Issue Count by Category</Title>
        <SubSection enabled="true">
            <Title>Issues By Category</Title>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>Category</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="95">
                        <groupTitle>Format String</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="12">
                        <groupTitle>Buffer Overflow</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="9">
                        <groupTitle>Buffer Overflow: Format String</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="5">
                        <groupTitle>Unchecked Return Value</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Insecure Temporary File</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Missing Check against Null</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="2">
                        <groupTitle>Obsolete</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dangerous Function</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Dangerous Function: strcpy()</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Format String: Argument Number Mismatch</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Format String: Argument Type Mismatch</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="1">
                        <groupTitle>Null Dereference</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="false" enabled="true">
        <Title>Issue Breakdown by Analysis</Title>
        <SubSection enabled="true">
            <Title>Issue by Analysis</Title>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="pie">
                    <Axis>Analysis</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="132">
                        <groupTitle>&lt;none&gt;</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="false" enabled="false">
        <Title>New Issues</Title>
        <SubSection enabled="true">
            <Title>New Issues</Title>
            <Description>A list of issues discovered since the previous analysis.</Description>
            <Text>The following issues have been discovered since the last scan.</Text>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="pie">
                    <Axis>New Issue</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="114">
                        <groupTitle>Issue Updated: Aug 28, 2014</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="18">
                        <groupTitle>Issue New: Aug 28, 2014</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
</ReportDefinition>
